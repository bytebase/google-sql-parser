// Code generated from GoogleSQLParser.g4 by ANTLR 4.13.0. DO NOT EDIT.

package parser // GoogleSQLParser
import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr4-go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type GoogleSQLParser struct {
	*antlr.BaseParser
}

var GoogleSQLParserParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func googlesqlparserParserInit() {
	staticData := &GoogleSQLParserParserStaticData
	staticData.LiteralNames = []string{
		"", "'='", "'!='", "'<>'", "'<'", "'<='", "'>'", "'>='", "'<<'", "'>>'",
		"'+'", "'-'", "'*'", "'/'", "'~'", "','", "'.'", "'{'", "'}'", "'('",
		"')'", "'['", "']'", "'|'", "':'", "';'", "'''", "'''''", "'\"'", "'\"\"\"'",
		"'`'", "'?'", "'@'", "'@@'", "'=>'", "'->'", "'+='", "'-='", "'|>'",
		"'^'", "'&'", "'||'", "", "", "", "", "", "", "", "", "", "", "", "",
		"'ARRAY'", "'ALL'", "'AS'", "'ASC'", "'BY'", "'CROSS'", "'JOIN'", "'DELTA'",
		"'DESC'", "'DIFFERENTIAL_PRIVACY'", "'DISTINCT'", "'EPSILON'", "'EXCEPT'",
		"'EXCLUDE'", "'FOR'", "'FROM'", "'FULL'", "'IN'", "'INCLUDE'", "'INNER'",
		"'INTERSECT'", "'LEFT'", "'LIMIT'", "'MAX_GROUPS_CONTRIBUTED'", "'NULL'",
		"'NULLS'", "'OF'", "'OFFSET'", "'ON'", "'OPTIONS'", "'ORDER'", "'OUTER'",
		"'PERCENT'", "'PIVOT'", "'PRIVACY_UNIT_COLUMN'", "'RIGHT'", "'RECURSIVE'",
		"'REPLACE'", "'UNPIVOT'", "'SELECT'", "'STRUCT'", "'SYSTEM'", "'SYSTEM_TIME'",
		"'TABLESAMPLE'", "'UNION'", "'UNNEST'", "'USING'", "'VALUE'", "'WITH'",
		"'TRUE'", "'FALSE'", "'NUMERIC'", "'DECIMAL'", "'BIGNUMERIC'", "'BIGDECIMAL'",
		"'NOT'", "'AND'", "'OR'", "'JSON'", "'DATE'", "'TIME'", "'DATETIME'",
		"'TIMESTAMP'", "'RANGE'", "'INTERVAL'", "'SIMPLE'", "'ABORT'", "'ACCESS'",
		"'ACTION'", "'AGGREGATE'", "'ADD'", "'ALTER'", "'ALWAYS'", "'ANALYZE'",
		"'APPROX'", "'ARE'", "'ASSERT'", "'BATCH'", "'BEGIN'", "'BREAK'", "'CALL'",
		"'CASCADE'", "'CHECK'", "'CLAMPED'", "'CLONE'", "'COPY'", "'CLUSTER'",
		"'COLUMN'", "'COLUMNS'", "'COMMIT'", "'CONNECTION'", "'CONSTANT'", "'CONSTRAINT'",
		"'CONTINUE'", "'CORRESPONDING'", "'CYCLE'", "'DATA'", "'DATABASE'",
		"'DECLARE'", "'DEFINER'", "'DELETE'", "'DELETION'", "'DEPTH'", "'DESCRIBE'",
		"'DETERMINISTIC'", "'DO'", "'DROP'", "'ELSEIF'", "'ENFORCED'", "'ERROR'",
		"'EXCEPTION'", "'EXECUTE'", "'EXPLAIN'", "'EXPORT'", "'EXTEND'", "'EXTERNAL'",
		"'FILES'", "'FILTER'", "'FILL'", "'FIRST'", "'FOREIGN'", "'FORMAT'",
		"'FUNCTION'", "'GENERATED'", "'GRANT'", "'GROUP_ROWS'", "'HIDDEN'",
		"'IDENTITY'", "'IMMEDIATE'", "'IMMUTABLE'", "'IMPORT'", "'INCREMENT'",
		"'INDEX'", "'INOUT'", "'INPUT'", "'INSERT'", "'INVOKER'", "'ISOLATION'",
		"'ITERATE'", "'KEY'", "'LANGUAGE'", "'LAST'", "'LEAVE'", "'LEVEL'",
		"'LOAD'", "'LOOP'", "'MACRO'", "'MAP'", "'MATCH'", "'KW_MATCH_RECOGNIZE_NONRESERVED'",
		"'MATCHED'", "'MATERIALIZED'", "'MAX'", "'MAXVALUE'", "'MEASURES'",
		"'MESSAGE'", "'METADATA'", "'MIN'", "'MINVALUE'", "'MODEL'", "'MODULE'",
		"'ONLY'", "'OUT'", "'OUTPUT'", "'OVERWRITE'", "'PARTITIONS'", "'PATTERN'",
		"'POLICIES'", "'POLICY'", "'PRIMARY'", "'PRIVATE'", "'PRIVILEGE'", "'PRIVILEGES'",
		"'PROCEDURE'", "'PROJECT'", "'PUBLIC'", "'RAISE'", "'READ'", "'REFERENCES'",
		"'REMOTE'", "'REMOVE'", "'RENAME'", "'REPEAT'", "'REPEATABLE'", "'REPLACE_FIELDS'",
		"'REPLICA'", "'REPORT'", "'RESTRICT'", "'RESTRICTION'", "'RETURNS'",
		"'RETURN'", "'REVOKE'", "'ROLLBACK'", "'ROW'", "'RUN'", "'SAFE_CAST'",
		"'SCHEMA'", "'SEARCH'", "'SECURITY'", "'SEQUENCE'", "'SETS'", "'SET'",
		"'SHOW'", "'SNAPSHOT'", "'SOURCE'", "'SQL'", "'STABLE'", "'START'",
		"'STATIC_DESCRIBE'", "'STORED'", "'STORING'", "'STRICT'", "'TABLE'",
		"'TABLES'", "'TARGET'", "'TEMP'", "'TEMPORARY'", "'TRANSACTION'", "'TRANSFORM'",
		"'TRUNCATE'", "'TYPE'", "'UNDROP'", "'UNIQUE'", "'UNKNOWN'", "'UNTIL'",
		"'UPDATE'", "'VALUES'", "'VECTOR'", "'VIEW'", "'VIEWS'", "'VOLATILE'",
		"'WEIGHT'", "'WHILE'", "'WRITE'", "'ZONE'", "'DESCRIPTOR'", "'INTERLEAVE'",
		"'NULL_FILTERED'", "'PARENT'", "'NEW'", "'END'", "'CASE'", "'WHEN'",
		"'THEN'", "'ELSE'", "'CAST'", "'EXTRACT'", "'COLLATE'", "'IF'", "'GROUPING'",
		"'HAVING'", "'GROUP'", "'ROLLUP'", "'CUBE'", "'HASH'", "'PROTO'", "'PARTITION'",
		"'IGNORE'", "'RESPECT'", "'ROWS'", "'OVER'", "'BETWEEN'", "'UNBOUNDED'",
		"'CURRENT'", "'PRECEDING'", "'FOLLOWING'", "'NATURAL'", "'QUALIFY'",
		"'DEFAULT'", "'SLASH'", "'MATCH_RECOGNIZE'", "'DEFINE'", "'LOOKUP'",
		"'WHERE'", "'WINDOW'", "'TO'", "'EXISTS'", "'ANY'", "'SOME'", "'LIKE'",
		"'IS'", "'NO'",
	}
	staticData.SymbolicNames = []string{
		"", "EQUAL_OPERATOR", "NOT_EQUAL_OPERATOR", "NOT_EQUAL2_OPERATOR", "LT_OPERATOR",
		"LE_OPERATOR", "GT_OPERATOR", "GE_OPERATOR", "KL_OPERATOR", "KR_OPERATOR",
		"PLUS_OPERATOR", "MINUS_OPERATOR", "MULTIPLY_OPERATOR", "DIVIDE_OPERATOR",
		"BITWISE_NOT_OPERATOR", "COMMA_SYMBOL", "DOT_SYMBOL", "LC_BRACKET_SYMBOL",
		"RC_BRACKET_SYMBOL", "LR_BRACKET_SYMBOL", "RR_BRACKET_SYMBOL", "LS_BRACKET_SYMBOL",
		"RS_BRACKET_SYMBOL", "STROKE_SYMBOL", "COLON_SYMBOL", "SEMI_SYMBOL",
		"SINGLE_QUOTE_SYMBOL", "SINGLE_QUOTE_3_SYMBOL", "DOUBLE_QUOTE_SYMBOL",
		"DOUBLE_QUOTE_3_SYMBOL", "BACKQUOTE_SYMBOL", "QUESTION_SYMBOL", "AT_SYMBOL",
		"ATAT_SYMBOL", "EQUAL_GT_BRACKET_SYMBOL", "SUB_GT_BRACKET_SYMBOL", "PLUS_EQUAL_SYMBOL",
		"SUB_EQUAL_SYMBOL", "PIPE_SYMBOL", "CIRCUMFLEX_SYMBOL", "BIT_AND_SYMBOL",
		"BOOL_OR_SYMBOL", "STRING_LITERAL", "BYTES_LITERAL", "UNCLOSED_STRING_LITERAL",
		"UNCLOSED_TRIPLE_QUOTED_STRING_LITERAL", "UNCLOSED_RAW_STRING_LITERAL",
		"UNCLOSED_TRIPLE_QUOTED_RAW_STRING_LITERAL", "UNCLOSED_BYTES_LITERAL",
		"UNCLOSED_TRIPLE_QUOTED_BYTES_LITERAL", "UNCLOSED_RAW_BYTES_LITERAL",
		"UNCLOSED_TRIPLE_QUOTED_RAW_BYTES_LITERAL", "FLOATING_POINT_LITERAL",
		"INTEGER_LITERAL", "ARRAY_SYMBOL", "ALL_SYMBOL", "AS_SYMBOL", "ASC_SYMBOL",
		"BY_SYMBOL", "CROSS_SYMBOL", "JOIN_SYMBOL", "DELTA_SYMBOL", "DESC_SYMBOL",
		"DIFFERENTIAL_PRIVACY_SYMBOL", "DISTINCT_SYMBOL", "EPSILON_SYMBOL",
		"EXCEPT_SYMBOL", "EXCLUDE_SYMBOL", "FOR_SYMBOL", "FROM_SYMBOL", "FULL_SYMBOL",
		"IN_SYMBOL", "INCLUDE_SYMBOL", "INNER_SYMBOL", "INTERSECT_SYMBOL", "LEFT_SYMBOL",
		"LIMIT_SYMBOL", "MAX_GROUPS_CONTRIBUTED_SYMBOL", "NULL_SYMBOL", "NULLS_SYMBOL",
		"OF_SYMBOL", "OFFSET_SYMBOL", "ON_SYMBOL", "OPTIONS_SYMBOL", "ORDER_SYMBOL",
		"OUTER_SYMBOL", "PERCENT_SYMBOL", "PIVOT_SYMBOL", "PRIVACY_UNIT_COLUMN_SYMBOL",
		"RIGHT_SYMBOL", "RECURSIVE_SYMBOL", "REPLACE_SYMBOL", "UNPIVOT_SYMBOL",
		"SELECT_SYMBOL", "STRUCT_SYMBOL", "SYSTEM_SYMBOL", "SYSTEM_TIME_SYMBOL",
		"TABLESAMPLE_SYMBOL", "UNION_SYMBOL", "UNNEST_SYMBOL", "USING_SYMBOL",
		"VALUE_SYMBOL", "WITH_SYMBOL", "TRUE_SYMBOL", "FALSE_SYMBOL", "NUMERIC_SYMBOL",
		"DECIMAL_SYMBOL", "BIGNUMERIC_SYMBOL", "BIGDECIMAL_SYMBOL", "NOT_SYMBOL",
		"AND_SYMBOL", "OR_SYMBOL", "JSON_SYMBOL", "DATE_SYMBOL", "TIME_SYMBOL",
		"DATETIME_SYMBOL", "TIMESTAMP_SYMBOL", "RANGE_SYMBOL", "INTERVAL_SYMBOL",
		"SIMPLE_SYMBOL", "ABORT_SYMBOL", "ACCESS_SYMBOL", "ACTION_SYMBOL", "AGGREGATE_SYMBOL",
		"ADD_SYMBOL", "ALTER_SYMBOL", "ALWAYS_SYMBOL", "ANALYZE_SYMBOL", "APPROX_SYMBOL",
		"ARE_SYMBOL", "ASSERT_SYMBOL", "BATCH_SYMBOL", "BEGIN_SYMBOL", "BREAK_SYMBOL",
		"CALL_SYMBOL", "CASCADE_SYMBOL", "CHECK_SYMBOL", "CLAMPED_SYMBOL", "CLONE_SYMBOL",
		"COPY_SYMBOL", "CLUSTER_SYMBOL", "COLUMN_SYMBOL", "COLUMNS_SYMBOL",
		"COMMIT_SYMBOL", "CONNECTION_SYMBOL", "CONSTANT_SYMBOL", "CONSTRAINT_SYMBOL",
		"CONTINUE_SYMBOL", "CORRESPONDING_SYMBOL", "CYCLE_SYMBOL", "DATA_SYMBOL",
		"DATABASE_SYMBOL", "DECLARE_SYMBOL", "DEFINER_SYMBOL", "DELETE_SYMBOL",
		"DELETION_SYMBOL", "DEPTH_SYMBOL", "DESCRIBE_SYMBOL", "DETERMINISTIC_SYMBOL",
		"DO_SYMBOL", "DROP_SYMBOL", "ELSEIF_SYMBOL", "ENFORCED_SYMBOL", "ERROR_SYMBOL",
		"EXCEPTION_SYMBOL", "EXECUTE_SYMBOL", "EXPLAIN_SYMBOL", "EXPORT_SYMBOL",
		"EXTEND_SYMBOL", "EXTERNAL_SYMBOL", "FILES_SYMBOL", "FILTER_SYMBOL",
		"FILL_SYMBOL", "FIRST_SYMBOL", "FOREIGN_SYMBOL", "FORMAT_SYMBOL", "FUNCTION_SYMBOL",
		"GENERATED_SYMBOL", "GRANT_SYMBOL", "GROUP_ROWS_SYMBOL", "HIDDEN_SYMBOL",
		"IDENTITY_SYMBOL", "IMMEDIATE_SYMBOL", "IMMUTABLE_SYMBOL", "IMPORT_SYMBOL",
		"INCREMENT_SYMBOL", "INDEX_SYMBOL", "INOUT_SYMBOL", "INPUT_SYMBOL",
		"INSERT_SYMBOL", "INVOKER_SYMBOL", "ISOLATION_SYMBOL", "ITERATE_SYMBOL",
		"KEY_SYMBOL", "LANGUAGE_SYMBOL", "LAST_SYMBOL", "LEAVE_SYMBOL", "LEVEL_SYMBOL",
		"LOAD_SYMBOL", "LOOP_SYMBOL", "MACRO_SYMBOL", "MAP_SYMBOL", "MATCH_SYMBOL",
		"KW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL", "MATCHED_SYMBOL", "MATERIALIZED_SYMBOL",
		"MAX_SYMBOL", "MAXVALUE_SYMBOL", "MEASURES_SYMBOL", "MESSAGE_SYMBOL",
		"METADATA_SYMBOL", "MIN_SYMBOL", "MINVALUE_SYMBOL", "MODEL_SYMBOL",
		"MODULE_SYMBOL", "ONLY_SYMBOL", "OUT_SYMBOL", "OUTPUT_SYMBOL", "OVERWRITE_SYMBOL",
		"PARTITIONS_SYMBOL", "PATTERN_SYMBOL", "POLICIES_SYMBOL", "POLICY_SYMBOL",
		"PRIMARY_SYMBOL", "PRIVATE_SYMBOL", "PRIVILEGE_SYMBOL", "PRIVILEGES_SYMBOL",
		"PROCEDURE_SYMBOL", "PROJECT_SYMBOL", "PUBLIC_SYMBOL", "RAISE_SYMBOL",
		"READ_SYMBOL", "REFERENCES_SYMBOL", "REMOTE_SYMBOL", "REMOVE_SYMBOL",
		"RENAME_SYMBOL", "REPEAT_SYMBOL", "REPEATABLE_SYMBOL", "REPLACE_FIELDS_SYMBOL",
		"REPLICA_SYMBOL", "REPORT_SYMBOL", "RESTRICT_SYMBOL", "RESTRICTION_SYMBOL",
		"RETURNS_SYMBOL", "RETURN_SYMBOL", "REVOKE_SYMBOL", "ROLLBACK_SYMBOL",
		"ROW_SYMBOL", "RUN_SYMBOL", "SAFE_CAST_SYMBOL", "SCHEMA_SYMBOL", "SEARCH_SYMBOL",
		"SECURITY_SYMBOL", "SEQUENCE_SYMBOL", "SETS_SYMBOL", "SET_SYMBOL", "SHOW_SYMBOL",
		"SNAPSHOT_SYMBOL", "SOURCE_SYMBOL", "SQL_SYMBOL", "STABLE_SYMBOL", "START_SYMBOL",
		"STATIC_DESCRIBE_SYMBOL", "STORED_SYMBOL", "STORING_SYMBOL", "STRICT_SYMBOL",
		"TABLE_SYMBOL", "TABLES_SYMBOL", "TARGET_SYMBOL", "TEMP_SYMBOL", "TEMPORARY_SYMBOL",
		"TRANSACTION_SYMBOL", "TRANSFORM_SYMBOL", "TRUNCATE_SYMBOL", "TYPE_SYMBOL",
		"UNDROP_SYMBOL", "UNIQUE_SYMBOL", "UNKNOWN_SYMBOL", "UNTIL_SYMBOL",
		"UPDATE_SYMBOL", "VALUES_SYMBOL", "VECTOR_SYMBOL", "VIEW_SYMBOL", "VIEWS_SYMBOL",
		"VOLATILE_SYMBOL", "WEIGHT_SYMBOL", "WHILE_SYMBOL", "WRITE_SYMBOL",
		"ZONE_SYMBOL", "DESCRIPTOR_SYMBOL", "INTERLEAVE_SYMBOL", "NULL_FILTERED_SYMBOL",
		"PARENT_SYMBOL", "NEW_SYMBOL", "END_SYMBOL", "CASE_SYMBOL", "WHEN_SYMBOL",
		"THEN_SYMBOL", "ELSE_SYMBOL", "CAST_SYMBOL", "EXTRACT_SYMBOL", "COLLATE_SYMBOL",
		"IF_SYMBOL", "GROUPING_SYMBOL", "HAVING_SYMBOL", "GROUP_SYMBOL", "ROLLUP_SYMBOL",
		"CUBE_SYMBOL", "HASH_SYMBOL", "PROTO_SYMBOL", "PARTITION_SYMBOL", "IGNORE_SYMBOL",
		"RESPECT_SYMBOL", "ROWS_SYMBOL", "OVER_SYMBOL", "BETWEEN_SYMBOL", "UNBOUNDED_SYMBOL",
		"CURRENT_SYMBOL", "PRECEDING_SYMBOL", "FOLLOWING_SYMBOL", "NATURAL_SYMBOL",
		"QUALIFY_SYMBOL", "DEFAULT_SYMBOL", "SLASH_SYMBOL", "MATCH_RECOGNIZE_SYMBOL",
		"DEFINE_SYMBOL", "LOOKUP_SYMBOL", "WHERE_SYMBOL", "WINDOW_SYMBOL", "TO_SYMBOL",
		"EXISTS_SYMBOL", "ANY_SYMBOL", "SOME_SYMBOL", "LIKE_SYMBOL", "IS_SYMBOL",
		"NO_SYMBOL", "IDENTIFIER", "UNCLOSED_ESCAPED_IDENTIFIER", "WHITESPACE",
		"COMMENT",
	}
	staticData.RuleNames = []string{
		"root", "stmts", "stmt", "query_statement", "alter_statement", "row_access_policy_alter_action_list",
		"row_access_policy_alter_action", "grant_to_clause", "grantee_list",
		"privilege_list", "privilege", "path_expression_list_with_parens", "privilege_name",
		"generic_entity_type", "generic_entity_type_unchecked", "schema_object_kind",
		"alter_action_list", "alter_action", "spanner_set_on_delete_action",
		"spanner_alter_column_action", "spanner_generated_or_default", "generic_sub_entity_type",
		"sub_entity_type_identifier", "fill_using_expression", "column_position",
		"table_column_definition", "column_attributes", "column_attribute",
		"primary_key_column_attribute", "foreign_key_column_attribute", "hidden_column_attribute",
		"opt_constraint_identity", "table_column_schema", "opt_column_info",
		"invalid_generated_column", "invalid_default_column", "default_column_info",
		"generated_column_info", "identity_column_info", "opt_start_with", "opt_increment_by",
		"opt_maxvalue", "opt_minvalue", "opt_cycle", "signed_numeric_literal",
		"stored_mode", "generated_mode", "column_schema_inner", "raw_column_schema_inner",
		"range_column_schema_inner", "struct_column_schema_inner", "struct_column_field",
		"simple_column_schema_inner", "array_column_schema_inner", "field_schema",
		"opt_field_attributes", "not_null_column_attribute", "primary_key_or_table_constraint_spec",
		"opt_if_not_exists", "primary_key_spec", "primary_key_element_list",
		"primary_key_element", "table_constraint_spec", "foreign_key_reference",
		"opt_foreign_key_action", "foreign_key_on_update", "foreign_key_on_delete",
		"foreign_key_action", "opt_foreign_key_match", "foreign_key_match_mode",
		"column_list", "options_options_list", "constraint_enforcement", "generic_entity_body",
		"opt_if_exists", "table_or_table_function", "query", "query_without_pipe_operators",
		"bad_keyword_after_from_query", "bad_keyword_after_from_query_allows_parens",
		"with_clause_with_trailing_comma", "select_or_from_keyword", "query_primary_or_set_operation",
		"query_set_operation", "query_set_operation_prefix", "query_set_operation_item",
		"query_primary", "set_operation_metadata", "opt_column_match_suffix",
		"opt_strict", "all_or_distinct", "query_set_operation_type", "opt_corresponding_outer_mode",
		"opt_outer", "with_clause", "aliased_query", "opt_aliased_query_modifiers",
		"recursion_depth_modifier", "possibly_unbounded_int_literal_or_parameter",
		"int_literal_or_parameter", "order_by_clause", "order_by_clause_prefix",
		"ordering_expression", "select", "opt_clauses_following_from", "opt_clauses_following_where",
		"opt_clauses_following_group_by", "window_clause", "window_clause_prefix",
		"window_definition", "where_clause", "having_clause", "group_by_clause",
		"group_by_all", "select_clause", "opt_select_as_clause", "opt_select_with",
		"from_clause", "from_clause_contents", "from_clause_contents_suffix",
		"table_primary", "tvf_with_suffixes", "pivot_or_unpivot_clause_and_aliases",
		"as_alias", "sample_clause", "opt_sample_clause_suffix", "repeatable_clause",
		"possibly_cast_int_literal_or_parameter", "cast_int_literal_or_parameter",
		"sample_size", "sample_size_value", "sample_size_unit", "partition_by_clause_prefix_no_hint",
		"match_recognize_clause", "row_pattern_expr", "row_pattern_concatenation",
		"row_pattern_factor", "select_list_prefix_with_as_aliases", "select_column_expr_with_as_alias",
		"table_subquery", "join", "join_item", "on_or_using_clause_list", "on_or_using_clause",
		"using_clause", "join_hint", "table_path_expression", "opt_at_system_time",
		"opt_with_offset_and_alias", "opt_pivot_or_unpivot_clause_and_alias",
		"table_path_expression_base", "maybe_slashed_or_dashed_path_expression",
		"maybe_dashed_path_expression", "dashed_path_expression", "dashed_identifier",
		"slashed_identifier", "identifier_or_integer", "slashed_identifier_separator",
		"slashed_path_expression", "unnest_expression", "unnest_expression_prefix",
		"opt_array_zip_mode", "expression_with_opt_alias", "tvf_prefix", "tvf_argument",
		"connection_clause", "path_expression_or_default", "descriptor_argument",
		"descriptor_column_list", "descriptor_column", "table_clause", "model_clause",
		"qualify_clause_nonreserved", "unpivot_clause", "unpivot_in_item_list",
		"unpivot_in_item_list_prefix", "unpivot_in_item", "opt_as_string_or_integer",
		"path_expression_list_with_opt_parens", "path_expression_list", "unpivot_nulls_filter",
		"pivot_clause", "pivot_expression_list", "pivot_expression", "pivot_value_list",
		"pivot_value", "tvf_prefix_no_args", "join_type", "opt_natural", "on_clause",
		"select_list", "select_list_item", "select_column_star", "select_column_expr",
		"select_column_dot_star", "star_modifiers", "star_except_list", "star_replace_list",
		"star_replace_item", "expression", "expression_higher_prec_than_and",
		"expression_maybe_parenthesized_not_a_query", "parenthesized_in_rhs",
		"unary_operator", "comparative_operator", "shift_operator", "additive_operator",
		"multiplicative_operator", "is_operator", "between_operator", "in_operator",
		"distinct_operator", "parenthesized_query", "parenthesized_expression_not_a_query",
		"parenthesized_anysomeall_list_in_rhs", "and_expression", "in_list_two_or_more_prefix",
		"any_some_all", "like_operator", "expression_subquery_with_keyword",
		"struct_constructor", "struct_constructor_prefix_with_keyword", "struct_constructor_arg",
		"struct_constructor_prefix_without_keyword", "struct_constructor_prefix_with_keyword_no_arg",
		"interval_expression", "function_call_expression_with_clauses", "function_call_expression_with_clauses_suffix",
		"over_clause", "window_specification", "opt_window_frame_clause", "window_frame_bound",
		"preceding_or_following", "frame_unit", "partition_by_clause", "partition_by_clause_prefix",
		"with_group_rows", "with_report_modifier", "clamped_between_modifier",
		"with_report_format", "options_list", "options_list_prefix", "options_entry",
		"expression_or_proto", "options_assignment_operator", "opt_null_handling_modifier",
		"function_call_argument", "sequence_arg", "named_argument", "lambda_argument",
		"lambda_argument_list", "limit_offset_clause", "opt_having_or_group_by_modifier",
		"group_by_clause_prefix", "group_by_preamble", "opt_and_order", "hint",
		"hint_with_body", "hint_with_body_prefix", "hint_entry", "identifier_in_hints",
		"extra_identifier_in_hints_name", "grouping_item", "grouping_set_list",
		"grouping_set", "cube_list", "rollup_list", "opt_as_alias_with_required_as",
		"opt_grouping_item_order", "opt_selection_item_order", "asc_or_desc",
		"null_order", "function_name_from_keyword", "replace_fields_expression",
		"replace_fields_prefix", "replace_fields_arg", "generalized_path_expression",
		"generalized_extension_path", "with_expression", "with_expression_variable_prefix",
		"with_expression_variable", "extract_expression", "extract_expression_base",
		"opt_format", "opt_at_time_zone", "cast_expression", "case_expression",
		"case_expression_prefix", "case_value_expression_prefix", "case_no_value_expression_prefix",
		"struct_braced_constructor", "braced_new_constructor", "braced_constructor",
		"braced_constructor_start", "braced_constructor_prefix", "braced_constructor_field",
		"braced_constructor_lhs", "braced_constructor_field_value", "braced_constructor_extension",
		"new_constructor", "new_constructor_prefix", "new_constructor_prefix_no_arg",
		"new_constructor_arg", "array_constructor", "array_constructor_prefix",
		"array_constructor_prefix_no_expressions", "range_literal", "range_type",
		"type", "collate_clause", "string_literal_or_parameter", "system_variable_expression",
		"parameter_expression", "named_parameter_expression", "opt_type_parameters",
		"type_parameters_prefix", "type_parameter", "raw_type", "map_type",
		"function_type", "function_type_prefix", "type_name", "path_expression",
		"identifier", "keyword_as_identifier", "common_keyword_as_identifier",
		"token_identifier", "struct_type", "struct_type_prefix", "struct_field",
		"array_type", "template_type_open", "template_type_close", "date_or_time_literal",
		"date_or_time_literal_kind", "floating_point_literal", "json_literal",
		"bignumeric_literal", "bignumeric_literal_prefix", "numeric_literal",
		"numeric_literal_prefix", "integer_literal", "bytes_literal", "null_literal",
		"boolean_literal", "string_literal", "string_literal_component", "bytes_literal_component",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 339, 3910, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4,
		7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10,
		7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7,
		15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20,
		2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2,
		26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31,
		7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7,
		36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41,
		2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2,
		47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52,
		7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7,
		57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62,
		2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2,
		68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73,
		7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7,
		78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83,
		2, 84, 7, 84, 2, 85, 7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2,
		89, 7, 89, 2, 90, 7, 90, 2, 91, 7, 91, 2, 92, 7, 92, 2, 93, 7, 93, 2, 94,
		7, 94, 2, 95, 7, 95, 2, 96, 7, 96, 2, 97, 7, 97, 2, 98, 7, 98, 2, 99, 7,
		99, 2, 100, 7, 100, 2, 101, 7, 101, 2, 102, 7, 102, 2, 103, 7, 103, 2,
		104, 7, 104, 2, 105, 7, 105, 2, 106, 7, 106, 2, 107, 7, 107, 2, 108, 7,
		108, 2, 109, 7, 109, 2, 110, 7, 110, 2, 111, 7, 111, 2, 112, 7, 112, 2,
		113, 7, 113, 2, 114, 7, 114, 2, 115, 7, 115, 2, 116, 7, 116, 2, 117, 7,
		117, 2, 118, 7, 118, 2, 119, 7, 119, 2, 120, 7, 120, 2, 121, 7, 121, 2,
		122, 7, 122, 2, 123, 7, 123, 2, 124, 7, 124, 2, 125, 7, 125, 2, 126, 7,
		126, 2, 127, 7, 127, 2, 128, 7, 128, 2, 129, 7, 129, 2, 130, 7, 130, 2,
		131, 7, 131, 2, 132, 7, 132, 2, 133, 7, 133, 2, 134, 7, 134, 2, 135, 7,
		135, 2, 136, 7, 136, 2, 137, 7, 137, 2, 138, 7, 138, 2, 139, 7, 139, 2,
		140, 7, 140, 2, 141, 7, 141, 2, 142, 7, 142, 2, 143, 7, 143, 2, 144, 7,
		144, 2, 145, 7, 145, 2, 146, 7, 146, 2, 147, 7, 147, 2, 148, 7, 148, 2,
		149, 7, 149, 2, 150, 7, 150, 2, 151, 7, 151, 2, 152, 7, 152, 2, 153, 7,
		153, 2, 154, 7, 154, 2, 155, 7, 155, 2, 156, 7, 156, 2, 157, 7, 157, 2,
		158, 7, 158, 2, 159, 7, 159, 2, 160, 7, 160, 2, 161, 7, 161, 2, 162, 7,
		162, 2, 163, 7, 163, 2, 164, 7, 164, 2, 165, 7, 165, 2, 166, 7, 166, 2,
		167, 7, 167, 2, 168, 7, 168, 2, 169, 7, 169, 2, 170, 7, 170, 2, 171, 7,
		171, 2, 172, 7, 172, 2, 173, 7, 173, 2, 174, 7, 174, 2, 175, 7, 175, 2,
		176, 7, 176, 2, 177, 7, 177, 2, 178, 7, 178, 2, 179, 7, 179, 2, 180, 7,
		180, 2, 181, 7, 181, 2, 182, 7, 182, 2, 183, 7, 183, 2, 184, 7, 184, 2,
		185, 7, 185, 2, 186, 7, 186, 2, 187, 7, 187, 2, 188, 7, 188, 2, 189, 7,
		189, 2, 190, 7, 190, 2, 191, 7, 191, 2, 192, 7, 192, 2, 193, 7, 193, 2,
		194, 7, 194, 2, 195, 7, 195, 2, 196, 7, 196, 2, 197, 7, 197, 2, 198, 7,
		198, 2, 199, 7, 199, 2, 200, 7, 200, 2, 201, 7, 201, 2, 202, 7, 202, 2,
		203, 7, 203, 2, 204, 7, 204, 2, 205, 7, 205, 2, 206, 7, 206, 2, 207, 7,
		207, 2, 208, 7, 208, 2, 209, 7, 209, 2, 210, 7, 210, 2, 211, 7, 211, 2,
		212, 7, 212, 2, 213, 7, 213, 2, 214, 7, 214, 2, 215, 7, 215, 2, 216, 7,
		216, 2, 217, 7, 217, 2, 218, 7, 218, 2, 219, 7, 219, 2, 220, 7, 220, 2,
		221, 7, 221, 2, 222, 7, 222, 2, 223, 7, 223, 2, 224, 7, 224, 2, 225, 7,
		225, 2, 226, 7, 226, 2, 227, 7, 227, 2, 228, 7, 228, 2, 229, 7, 229, 2,
		230, 7, 230, 2, 231, 7, 231, 2, 232, 7, 232, 2, 233, 7, 233, 2, 234, 7,
		234, 2, 235, 7, 235, 2, 236, 7, 236, 2, 237, 7, 237, 2, 238, 7, 238, 2,
		239, 7, 239, 2, 240, 7, 240, 2, 241, 7, 241, 2, 242, 7, 242, 2, 243, 7,
		243, 2, 244, 7, 244, 2, 245, 7, 245, 2, 246, 7, 246, 2, 247, 7, 247, 2,
		248, 7, 248, 2, 249, 7, 249, 2, 250, 7, 250, 2, 251, 7, 251, 2, 252, 7,
		252, 2, 253, 7, 253, 2, 254, 7, 254, 2, 255, 7, 255, 2, 256, 7, 256, 2,
		257, 7, 257, 2, 258, 7, 258, 2, 259, 7, 259, 2, 260, 7, 260, 2, 261, 7,
		261, 2, 262, 7, 262, 2, 263, 7, 263, 2, 264, 7, 264, 2, 265, 7, 265, 2,
		266, 7, 266, 2, 267, 7, 267, 2, 268, 7, 268, 2, 269, 7, 269, 2, 270, 7,
		270, 2, 271, 7, 271, 2, 272, 7, 272, 2, 273, 7, 273, 2, 274, 7, 274, 2,
		275, 7, 275, 2, 276, 7, 276, 2, 277, 7, 277, 2, 278, 7, 278, 2, 279, 7,
		279, 2, 280, 7, 280, 2, 281, 7, 281, 2, 282, 7, 282, 2, 283, 7, 283, 2,
		284, 7, 284, 2, 285, 7, 285, 2, 286, 7, 286, 2, 287, 7, 287, 2, 288, 7,
		288, 2, 289, 7, 289, 2, 290, 7, 290, 2, 291, 7, 291, 2, 292, 7, 292, 2,
		293, 7, 293, 2, 294, 7, 294, 2, 295, 7, 295, 2, 296, 7, 296, 2, 297, 7,
		297, 2, 298, 7, 298, 2, 299, 7, 299, 2, 300, 7, 300, 2, 301, 7, 301, 2,
		302, 7, 302, 2, 303, 7, 303, 2, 304, 7, 304, 2, 305, 7, 305, 2, 306, 7,
		306, 2, 307, 7, 307, 2, 308, 7, 308, 2, 309, 7, 309, 2, 310, 7, 310, 2,
		311, 7, 311, 2, 312, 7, 312, 2, 313, 7, 313, 2, 314, 7, 314, 2, 315, 7,
		315, 2, 316, 7, 316, 2, 317, 7, 317, 2, 318, 7, 318, 2, 319, 7, 319, 2,
		320, 7, 320, 2, 321, 7, 321, 2, 322, 7, 322, 2, 323, 7, 323, 2, 324, 7,
		324, 2, 325, 7, 325, 2, 326, 7, 326, 2, 327, 7, 327, 2, 328, 7, 328, 2,
		329, 7, 329, 2, 330, 7, 330, 2, 331, 7, 331, 2, 332, 7, 332, 2, 333, 7,
		333, 2, 334, 7, 334, 2, 335, 7, 335, 2, 336, 7, 336, 2, 337, 7, 337, 2,
		338, 7, 338, 2, 339, 7, 339, 2, 340, 7, 340, 2, 341, 7, 341, 2, 342, 7,
		342, 2, 343, 7, 343, 2, 344, 7, 344, 2, 345, 7, 345, 2, 346, 7, 346, 2,
		347, 7, 347, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 5, 1, 703, 8, 1, 10, 1,
		12, 1, 706, 9, 1, 1, 1, 3, 1, 709, 8, 1, 1, 2, 1, 2, 3, 2, 713, 8, 2, 1,
		3, 1, 3, 1, 4, 1, 4, 1, 4, 3, 4, 720, 8, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1,
		4, 1, 4, 3, 4, 728, 8, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 3, 4, 736,
		8, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 3, 4, 744, 8, 4, 1, 4, 1, 4,
		1, 4, 1, 4, 1, 4, 1, 4, 3, 4, 752, 8, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4,
		1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 3, 4, 765, 8, 4, 1, 4, 1, 4, 1, 4,
		1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 3, 4,
		781, 8, 4, 1, 5, 1, 5, 1, 5, 5, 5, 786, 8, 5, 10, 5, 12, 5, 789, 9, 5,
		1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6,
		1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 3, 6, 810, 8, 6, 1, 7, 1, 7,
		1, 7, 1, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 5, 8, 821, 8, 8, 10, 8, 12, 8,
		824, 9, 8, 1, 9, 1, 9, 1, 9, 5, 9, 829, 8, 9, 10, 9, 12, 9, 832, 9, 9,
		1, 10, 1, 10, 3, 10, 836, 8, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 12, 1,
		12, 3, 12, 844, 8, 12, 1, 13, 1, 13, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15,
		1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1,
		15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 3, 15, 869, 8, 15, 1, 16, 1, 16,
		1, 16, 5, 16, 874, 8, 16, 10, 16, 12, 16, 877, 9, 16, 1, 17, 1, 17, 1,
		17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17,
		3, 17, 892, 8, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 3, 17, 900,
		8, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 3, 17, 907, 8, 17, 1, 17, 1,
		17, 1, 17, 3, 17, 912, 8, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17,
		3, 17, 920, 8, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1,
		17, 1, 17, 1, 17, 3, 17, 932, 8, 17, 1, 17, 3, 17, 935, 8, 17, 1, 17, 1,
		17, 1, 17, 3, 17, 940, 8, 17, 1, 17, 1, 17, 1, 17, 1, 17, 3, 17, 946, 8,
		17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 3, 17, 955, 8, 17,
		1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 3, 17, 966,
		8, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 3, 17, 976,
		8, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 3, 17, 986,
		8, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 3, 17, 995, 8,
		17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 3, 17, 1005,
		8, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1,
		17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 3, 17, 1022, 8, 17, 1, 17, 1, 17,
		1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 3, 17, 1033, 8, 17, 1,
		17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 3, 17, 1044,
		8, 17, 1, 17, 1, 17, 1, 17, 3, 17, 1049, 8, 17, 1, 17, 1, 17, 1, 17, 1,
		17, 1, 17, 1, 17, 3, 17, 1057, 8, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17,
		3, 17, 1064, 8, 17, 1, 17, 1, 17, 1, 17, 1, 17, 3, 17, 1070, 8, 17, 1,
		18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 19, 1, 19, 1, 19, 3, 19, 1080, 8, 19,
		1, 19, 1, 19, 1, 19, 3, 19, 1085, 8, 19, 1, 19, 3, 19, 1088, 8, 19, 1,
		19, 3, 19, 1091, 8, 19, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 21,
		1, 21, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1,
		24, 3, 24, 1111, 8, 24, 1, 25, 1, 25, 1, 25, 3, 25, 1116, 8, 25, 1, 25,
		3, 25, 1119, 8, 25, 1, 26, 4, 26, 1122, 8, 26, 11, 26, 12, 26, 1123, 1,
		26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 27, 3, 27, 1132, 8, 27, 1, 28, 1, 28,
		1, 28, 1, 29, 3, 29, 1138, 8, 29, 1, 29, 1, 29, 1, 30, 1, 30, 1, 31, 1,
		31, 1, 31, 1, 32, 1, 32, 3, 32, 1149, 8, 32, 1, 32, 3, 32, 1152, 8, 32,
		1, 32, 3, 32, 1155, 8, 32, 1, 33, 1, 33, 3, 33, 1159, 8, 33, 1, 33, 1,
		33, 1, 33, 1, 33, 3, 33, 1165, 8, 33, 1, 33, 1, 33, 3, 33, 1169, 8, 33,
		1, 34, 1, 34, 1, 35, 1, 35, 1, 36, 1, 36, 1, 36, 1, 37, 1, 37, 1, 37, 1,
		37, 1, 37, 3, 37, 1183, 8, 37, 1, 37, 1, 37, 1, 37, 3, 37, 1188, 8, 37,
		1, 38, 1, 38, 1, 38, 3, 38, 1193, 8, 38, 1, 38, 3, 38, 1196, 8, 38, 1,
		38, 3, 38, 1199, 8, 38, 1, 38, 3, 38, 1202, 8, 38, 1, 38, 3, 38, 1205,
		8, 38, 1, 38, 1, 38, 1, 39, 1, 39, 1, 39, 1, 39, 1, 40, 1, 40, 1, 40, 1,
		40, 1, 41, 1, 41, 1, 41, 1, 42, 1, 42, 1, 42, 1, 43, 1, 43, 1, 43, 3, 43,
		1226, 8, 43, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 3,
		44, 1236, 8, 44, 1, 45, 1, 45, 1, 45, 3, 45, 1241, 8, 45, 1, 46, 1, 46,
		1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 3, 46, 1253, 8,
		46, 1, 47, 1, 47, 3, 47, 1257, 8, 47, 1, 48, 1, 48, 1, 48, 1, 48, 3, 48,
		1263, 8, 48, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 50, 1, 50, 1, 50, 1,
		50, 1, 50, 5, 50, 1275, 8, 50, 10, 50, 12, 50, 1278, 9, 50, 3, 50, 1280,
		8, 50, 1, 50, 1, 50, 1, 51, 1, 51, 3, 51, 1286, 8, 51, 1, 51, 3, 51, 1289,
		8, 51, 1, 51, 1, 51, 1, 51, 3, 51, 1294, 8, 51, 1, 52, 1, 52, 3, 52, 1298,
		8, 52, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 54, 1, 54, 3, 54, 1307, 8,
		54, 1, 54, 3, 54, 1310, 8, 54, 1, 54, 3, 54, 1313, 8, 54, 1, 55, 1, 55,
		1, 56, 1, 56, 1, 56, 1, 57, 1, 57, 3, 57, 1322, 8, 57, 1, 58, 1, 58, 1,
		58, 1, 58, 1, 59, 1, 59, 1, 59, 1, 59, 3, 59, 1332, 8, 59, 1, 59, 3, 59,
		1335, 8, 59, 1, 60, 1, 60, 1, 60, 1, 60, 5, 60, 1341, 8, 60, 10, 60, 12,
		60, 1344, 9, 60, 3, 60, 1346, 8, 60, 1, 60, 1, 60, 1, 61, 1, 61, 3, 61,
		1352, 8, 61, 1, 61, 3, 61, 1355, 8, 61, 1, 62, 1, 62, 1, 62, 1, 62, 1,
		62, 3, 62, 1362, 8, 62, 1, 62, 3, 62, 1365, 8, 62, 1, 62, 1, 62, 1, 62,
		1, 62, 1, 62, 3, 62, 1372, 8, 62, 1, 62, 3, 62, 1375, 8, 62, 3, 62, 1377,
		8, 62, 1, 63, 1, 63, 1, 63, 1, 63, 3, 63, 1383, 8, 63, 1, 63, 3, 63, 1386,
		8, 63, 1, 64, 1, 64, 3, 64, 1390, 8, 64, 1, 64, 1, 64, 3, 64, 1394, 8,
		64, 3, 64, 1396, 8, 64, 1, 65, 1, 65, 1, 65, 1, 65, 1, 66, 1, 66, 1, 66,
		1, 66, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 3, 67, 1412, 8, 67, 1,
		68, 1, 68, 1, 68, 1, 69, 1, 69, 1, 69, 1, 69, 3, 69, 1421, 8, 69, 1, 70,
		1, 70, 1, 70, 1, 70, 5, 70, 1427, 8, 70, 10, 70, 12, 70, 1430, 9, 70, 1,
		70, 1, 70, 1, 71, 1, 71, 1, 71, 1, 72, 3, 72, 1438, 8, 72, 1, 72, 1, 72,
		1, 73, 1, 73, 3, 73, 1444, 8, 73, 1, 74, 1, 74, 1, 74, 1, 75, 1, 75, 3,
		75, 1451, 8, 75, 1, 76, 1, 76, 1, 77, 1, 77, 1, 77, 3, 77, 1458, 8, 77,
		1, 77, 3, 77, 1461, 8, 77, 1, 77, 1, 77, 1, 77, 1, 77, 1, 77, 1, 77, 1,
		77, 1, 77, 1, 77, 1, 77, 3, 77, 1473, 8, 77, 1, 77, 3, 77, 1476, 8, 77,
		1, 77, 3, 77, 1479, 8, 77, 1, 77, 1, 77, 1, 77, 1, 77, 3, 77, 1485, 8,
		77, 1, 77, 1, 77, 1, 77, 1, 77, 1, 77, 3, 77, 1492, 8, 77, 1, 77, 1, 77,
		1, 77, 1, 77, 3, 77, 1498, 8, 77, 1, 78, 1, 78, 1, 79, 1, 79, 1, 80, 1,
		80, 1, 80, 1, 81, 1, 81, 1, 82, 1, 82, 3, 82, 1511, 8, 82, 1, 83, 1, 83,
		1, 84, 1, 84, 1, 84, 4, 84, 1518, 8, 84, 11, 84, 12, 84, 1519, 1, 84, 1,
		84, 1, 84, 1, 84, 1, 84, 3, 84, 1527, 8, 84, 1, 84, 1, 84, 1, 84, 1, 84,
		1, 84, 5, 84, 1534, 8, 84, 10, 84, 12, 84, 1537, 9, 84, 1, 85, 1, 85, 1,
		85, 1, 86, 1, 86, 1, 86, 3, 86, 1545, 8, 86, 3, 86, 1547, 8, 86, 1, 87,
		3, 87, 1550, 8, 87, 1, 87, 1, 87, 3, 87, 1554, 8, 87, 1, 87, 1, 87, 3,
		87, 1558, 8, 87, 1, 87, 3, 87, 1561, 8, 87, 1, 88, 1, 88, 1, 88, 3, 88,
		1566, 8, 88, 1, 89, 1, 89, 1, 90, 1, 90, 1, 91, 1, 91, 1, 92, 1, 92, 3,
		92, 1576, 8, 92, 1, 92, 1, 92, 1, 92, 3, 92, 1581, 8, 92, 3, 92, 1583,
		8, 92, 1, 93, 1, 93, 1, 94, 1, 94, 3, 94, 1589, 8, 94, 1, 94, 1, 94, 1,
		94, 5, 94, 1594, 8, 94, 10, 94, 12, 94, 1597, 9, 94, 1, 95, 1, 95, 1, 95,
		1, 95, 3, 95, 1603, 8, 95, 1, 96, 1, 96, 1, 97, 1, 97, 1, 97, 3, 97, 1610,
		8, 97, 1, 97, 1, 97, 1, 97, 3, 97, 1615, 8, 97, 1, 97, 1, 97, 1, 97, 1,
		97, 1, 97, 1, 97, 1, 97, 1, 97, 3, 97, 1625, 8, 97, 1, 97, 1, 97, 3, 97,
		1629, 8, 97, 1, 98, 1, 98, 3, 98, 1633, 8, 98, 1, 99, 1, 99, 1, 99, 3,
		99, 1638, 8, 99, 1, 100, 1, 100, 1, 101, 1, 101, 3, 101, 1644, 8, 101,
		1, 101, 1, 101, 1, 101, 1, 101, 5, 101, 1650, 8, 101, 10, 101, 12, 101,
		1653, 9, 101, 1, 102, 1, 102, 3, 102, 1657, 8, 102, 1, 102, 3, 102, 1660,
		8, 102, 1, 102, 3, 102, 1663, 8, 102, 1, 103, 1, 103, 3, 103, 1667, 8,
		103, 1, 103, 3, 103, 1670, 8, 103, 1, 104, 1, 104, 3, 104, 1674, 8, 104,
		1, 104, 3, 104, 1677, 8, 104, 1, 104, 3, 104, 1680, 8, 104, 1, 104, 3,
		104, 1683, 8, 104, 1, 104, 3, 104, 1686, 8, 104, 1, 105, 1, 105, 3, 105,
		1690, 8, 105, 1, 105, 3, 105, 1693, 8, 105, 1, 105, 3, 105, 1696, 8, 105,
		1, 105, 3, 105, 1699, 8, 105, 1, 106, 1, 106, 3, 106, 1703, 8, 106, 1,
		106, 3, 106, 1706, 8, 106, 1, 106, 1, 106, 3, 106, 1710, 8, 106, 1, 106,
		3, 106, 1713, 8, 106, 1, 107, 1, 107, 1, 108, 1, 108, 1, 108, 1, 108, 5,
		108, 1721, 8, 108, 10, 108, 12, 108, 1724, 9, 108, 1, 109, 1, 109, 1, 109,
		1, 109, 1, 110, 1, 110, 1, 110, 1, 111, 1, 111, 1, 111, 1, 112, 1, 112,
		3, 112, 1738, 8, 112, 1, 113, 1, 113, 1, 113, 1, 114, 1, 114, 3, 114, 1745,
		8, 114, 1, 114, 3, 114, 1748, 8, 114, 1, 114, 3, 114, 1751, 8, 114, 1,
		114, 3, 114, 1754, 8, 114, 1, 114, 1, 114, 1, 114, 3, 114, 1759, 8, 114,
		1, 114, 3, 114, 1762, 8, 114, 1, 114, 3, 114, 1765, 8, 114, 1, 114, 3,
		114, 1768, 8, 114, 1, 114, 1, 114, 3, 114, 1772, 8, 114, 1, 115, 1, 115,
		1, 115, 1, 115, 3, 115, 1778, 8, 115, 1, 116, 1, 116, 1, 116, 1, 116, 1,
		116, 1, 116, 1, 116, 3, 116, 1787, 8, 116, 1, 117, 1, 117, 1, 117, 1, 118,
		1, 118, 5, 118, 1794, 8, 118, 10, 118, 12, 118, 1797, 9, 118, 1, 118, 1,
		118, 1, 118, 1, 118, 1, 118, 1, 118, 3, 118, 1805, 8, 118, 1, 119, 1, 119,
		1, 119, 3, 119, 1810, 8, 119, 1, 119, 3, 119, 1813, 8, 119, 1, 119, 3,
		119, 1816, 8, 119, 1, 119, 1, 119, 3, 119, 1820, 8, 119, 1, 119, 1, 119,
		3, 119, 1824, 8, 119, 3, 119, 1826, 8, 119, 1, 120, 1, 120, 1, 120, 1,
		120, 1, 120, 1, 120, 1, 120, 1, 120, 3, 120, 1836, 8, 120, 1, 120, 1, 120,
		1, 120, 1, 120, 5, 120, 1842, 8, 120, 10, 120, 12, 120, 1845, 9, 120, 1,
		121, 1, 121, 1, 121, 3, 121, 1850, 8, 121, 1, 121, 3, 121, 1853, 8, 121,
		1, 121, 1, 121, 1, 121, 3, 121, 1858, 8, 121, 1, 121, 3, 121, 1861, 8,
		121, 3, 121, 1863, 8, 121, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122,
		1, 122, 3, 122, 1872, 8, 122, 1, 122, 1, 122, 1, 122, 1, 122, 3, 122, 1878,
		8, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122,
		1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122, 1, 122,
		1, 122, 1, 122, 3, 122, 1899, 8, 122, 1, 122, 1, 122, 3, 122, 1903, 8,
		122, 1, 122, 1, 122, 1, 122, 3, 122, 1908, 8, 122, 1, 123, 3, 123, 1911,
		8, 123, 1, 123, 1, 123, 1, 124, 1, 124, 1, 124, 1, 124, 1, 124, 1, 124,
		1, 124, 1, 125, 1, 125, 1, 125, 1, 125, 3, 125, 1926, 8, 125, 1, 125, 1,
		125, 1, 125, 1, 125, 3, 125, 1932, 8, 125, 1, 125, 1, 125, 1, 125, 1, 125,
		1, 125, 3, 125, 1939, 8, 125, 3, 125, 1941, 8, 125, 1, 126, 1, 126, 1,
		126, 1, 126, 1, 126, 1, 127, 1, 127, 3, 127, 1950, 8, 127, 1, 128, 1, 128,
		1, 128, 1, 128, 1, 128, 1, 128, 3, 128, 1958, 8, 128, 1, 128, 1, 128, 1,
		129, 1, 129, 1, 129, 3, 129, 1965, 8, 129, 1, 130, 1, 130, 3, 130, 1969,
		8, 130, 1, 131, 1, 131, 1, 132, 1, 132, 1, 132, 1, 132, 1, 132, 5, 132,
		1978, 8, 132, 10, 132, 12, 132, 1981, 9, 132, 1, 133, 1, 133, 1, 133, 3,
		133, 1986, 8, 133, 1, 133, 1, 133, 1, 133, 1, 133, 1, 133, 1, 133, 1, 133,
		1, 133, 1, 133, 1, 133, 1, 133, 3, 133, 1999, 8, 133, 1, 134, 1, 134, 1,
		134, 1, 134, 1, 134, 1, 134, 5, 134, 2007, 8, 134, 10, 134, 12, 134, 2010,
		9, 134, 1, 135, 1, 135, 1, 135, 1, 135, 1, 135, 5, 135, 2017, 8, 135, 10,
		135, 12, 135, 2020, 9, 135, 1, 136, 1, 136, 1, 136, 1, 136, 1, 136, 3,
		136, 2027, 8, 136, 1, 137, 1, 137, 1, 137, 5, 137, 2032, 8, 137, 10, 137,
		12, 137, 2035, 9, 137, 1, 138, 1, 138, 1, 138, 1, 138, 1, 139, 1, 139,
		3, 139, 2043, 8, 139, 1, 140, 1, 140, 5, 140, 2047, 8, 140, 10, 140, 12,
		140, 2050, 9, 140, 1, 141, 3, 141, 2053, 8, 141, 1, 141, 3, 141, 2056,
		8, 141, 1, 141, 3, 141, 2059, 8, 141, 1, 141, 1, 141, 3, 141, 2063, 8,
		141, 1, 141, 1, 141, 3, 141, 2067, 8, 141, 1, 142, 4, 142, 2070, 8, 142,
		11, 142, 12, 142, 2071, 1, 143, 1, 143, 3, 143, 2076, 8, 143, 1, 144, 1,
		144, 1, 144, 1, 144, 1, 144, 5, 144, 2083, 8, 144, 10, 144, 12, 144, 2086,
		9, 144, 1, 144, 1, 144, 1, 145, 1, 145, 1, 146, 1, 146, 3, 146, 2094, 8,
		146, 1, 146, 3, 146, 2097, 8, 146, 1, 146, 3, 146, 2100, 8, 146, 1, 146,
		3, 146, 2103, 8, 146, 1, 147, 1, 147, 1, 147, 1, 147, 1, 147, 1, 147, 1,
		147, 1, 147, 1, 147, 1, 147, 1, 147, 3, 147, 2116, 8, 147, 1, 148, 1, 148,
		1, 148, 3, 148, 2121, 8, 148, 1, 149, 1, 149, 1, 149, 1, 149, 1, 149, 1,
		149, 1, 149, 3, 149, 2130, 8, 149, 1, 149, 1, 149, 1, 149, 1, 149, 3, 149,
		2136, 8, 149, 1, 149, 1, 149, 1, 149, 1, 149, 1, 149, 1, 149, 1, 149, 1,
		149, 3, 149, 2146, 8, 149, 1, 149, 1, 149, 1, 149, 3, 149, 2151, 8, 149,
		1, 149, 1, 149, 1, 149, 1, 149, 1, 149, 1, 149, 3, 149, 2159, 8, 149, 1,
		149, 1, 149, 3, 149, 2163, 8, 149, 1, 149, 1, 149, 1, 149, 3, 149, 2168,
		8, 149, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150,
		1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150, 1, 150,
		1, 150, 1, 150, 1, 150, 3, 150, 2190, 8, 150, 1, 151, 1, 151, 3, 151, 2194,
		8, 151, 1, 152, 1, 152, 3, 152, 2198, 8, 152, 1, 153, 1, 153, 1, 153, 1,
		153, 1, 153, 1, 153, 5, 153, 2206, 8, 153, 10, 153, 12, 153, 2209, 9, 153,
		1, 154, 1, 154, 1, 154, 1, 154, 1, 154, 1, 154, 1, 154, 1, 154, 1, 154,
		1, 154, 1, 154, 1, 154, 1, 154, 1, 154, 3, 154, 2225, 8, 154, 1, 154, 1,
		154, 1, 154, 1, 154, 1, 154, 1, 154, 1, 154, 1, 154, 1, 154, 1, 154, 1,
		154, 5, 154, 2238, 8, 154, 10, 154, 12, 154, 2241, 9, 154, 1, 155, 1, 155,
		1, 155, 1, 155, 1, 155, 1, 155, 1, 155, 1, 155, 1, 155, 1, 155, 1, 155,
		1, 155, 1, 155, 1, 155, 5, 155, 2257, 8, 155, 10, 155, 12, 155, 2260, 9,
		155, 1, 156, 1, 156, 3, 156, 2264, 8, 156, 1, 157, 1, 157, 1, 157, 1, 157,
		1, 158, 1, 158, 1, 158, 1, 158, 1, 158, 1, 158, 3, 158, 2276, 8, 158, 1,
		159, 1, 159, 3, 159, 2280, 8, 159, 1, 159, 1, 159, 1, 159, 1, 159, 1, 159,
		1, 159, 3, 159, 2288, 8, 159, 1, 160, 1, 160, 1, 160, 1, 160, 1, 160, 5,
		160, 2295, 8, 160, 10, 160, 12, 160, 2298, 9, 160, 1, 161, 1, 161, 1, 161,
		1, 162, 1, 162, 3, 162, 2305, 8, 162, 1, 163, 1, 163, 1, 163, 1, 163, 5,
		163, 2311, 8, 163, 10, 163, 12, 163, 2314, 9, 163, 1, 164, 1, 164, 1, 164,
		1, 164, 1, 164, 1, 164, 1, 164, 1, 164, 1, 164, 1, 164, 1, 164, 1, 164,
		1, 164, 1, 164, 1, 164, 1, 164, 1, 164, 1, 164, 1, 164, 1, 164, 1, 164,
		1, 164, 1, 164, 1, 164, 1, 164, 1, 164, 1, 164, 1, 164, 1, 164, 1, 164,
		3, 164, 2346, 8, 164, 1, 165, 1, 165, 1, 165, 1, 166, 1, 166, 3, 166, 2353,
		8, 166, 1, 167, 1, 167, 1, 167, 1, 167, 1, 167, 1, 168, 1, 168, 1, 168,
		5, 168, 2363, 8, 168, 10, 168, 12, 168, 2366, 9, 168, 1, 169, 1, 169, 1,
		170, 1, 170, 1, 170, 1, 170, 3, 170, 2374, 8, 170, 1, 171, 1, 171, 1, 171,
		1, 172, 1, 172, 1, 172, 1, 173, 1, 173, 3, 173, 2384, 8, 173, 1, 173, 1,
		173, 1, 173, 1, 173, 1, 173, 1, 173, 1, 173, 1, 173, 1, 174, 1, 174, 1,
		174, 1, 175, 1, 175, 1, 175, 1, 175, 1, 175, 1, 175, 1, 175, 5, 175, 2404,
		8, 175, 10, 175, 12, 175, 2407, 9, 175, 1, 176, 1, 176, 3, 176, 2411, 8,
		176, 1, 177, 3, 177, 2414, 8, 177, 1, 177, 1, 177, 3, 177, 2418, 8, 177,
		1, 177, 3, 177, 2421, 8, 177, 1, 178, 1, 178, 1, 178, 1, 178, 1, 178, 3,
		178, 2428, 8, 178, 1, 179, 1, 179, 1, 179, 5, 179, 2433, 8, 179, 10, 179,
		12, 179, 2436, 9, 179, 1, 180, 1, 180, 1, 180, 1, 180, 3, 180, 2442, 8,
		180, 1, 181, 1, 181, 1, 181, 1, 181, 1, 181, 1, 181, 1, 181, 1, 181, 1,
		181, 1, 181, 1, 181, 1, 182, 1, 182, 1, 182, 5, 182, 2458, 8, 182, 10,
		182, 12, 182, 2461, 9, 182, 1, 183, 1, 183, 3, 183, 2465, 8, 183, 1, 184,
		1, 184, 1, 184, 5, 184, 2470, 8, 184, 10, 184, 12, 184, 2473, 9, 184, 1,
		185, 1, 185, 3, 185, 2477, 8, 185, 1, 186, 1, 186, 1, 186, 3, 186, 2482,
		8, 186, 1, 187, 1, 187, 1, 187, 3, 187, 2487, 8, 187, 1, 187, 1, 187, 1,
		187, 3, 187, 2492, 8, 187, 1, 187, 1, 187, 3, 187, 2496, 8, 187, 3, 187,
		2498, 8, 187, 1, 188, 1, 188, 1, 189, 1, 189, 1, 189, 1, 190, 1, 190, 1,
		190, 5, 190, 2508, 8, 190, 10, 190, 12, 190, 2511, 9, 190, 1, 190, 3, 190,
		2514, 8, 190, 1, 191, 1, 191, 1, 191, 3, 191, 2519, 8, 191, 1, 192, 1,
		192, 3, 192, 2523, 8, 192, 1, 193, 1, 193, 1, 193, 1, 193, 1, 193, 3, 193,
		2530, 8, 193, 1, 194, 1, 194, 1, 194, 1, 194, 3, 194, 2536, 8, 194, 1,
		195, 1, 195, 3, 195, 2540, 8, 195, 1, 195, 3, 195, 2543, 8, 195, 1, 196,
		1, 196, 1, 196, 1, 196, 1, 196, 5, 196, 2550, 8, 196, 10, 196, 12, 196,
		2553, 9, 196, 1, 196, 1, 196, 1, 197, 1, 197, 1, 197, 1, 197, 1, 197, 5,
		197, 2562, 8, 197, 10, 197, 12, 197, 2565, 9, 197, 1, 197, 1, 197, 1, 198,
		1, 198, 1, 198, 1, 198, 1, 199, 1, 199, 1, 199, 3, 199, 2576, 8, 199, 1,
		199, 1, 199, 1, 199, 5, 199, 2581, 8, 199, 10, 199, 12, 199, 2584, 9, 199,
		1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200,
		1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200,
		1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200,
		1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200,
		3, 200, 2622, 8, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1,
		200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1,
		200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1,
		200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1,
		200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1,
		200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1,
		200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 3,
		200, 2684, 8, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 3, 200,
		2692, 8, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 3, 200, 2699, 8,
		200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 3, 200, 2707, 8, 200,
		1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200,
		1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200, 1, 200,
		1, 200, 1, 200, 5, 200, 2729, 8, 200, 10, 200, 12, 200, 2732, 9, 200, 1,
		201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1,
		201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1,
		201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1,
		201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1,
		201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1,
		201, 1, 201, 1, 201, 1, 201, 1, 201, 3, 201, 2784, 8, 201, 1, 201, 1, 201,
		1, 201, 1, 201, 1, 201, 1, 201, 3, 201, 2792, 8, 201, 1, 201, 1, 201, 1,
		201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1,
		201, 1, 201, 3, 201, 2807, 8, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201,
		1, 201, 3, 201, 2815, 8, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1,
		201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1,
		201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1,
		201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1,
		201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1,
		201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1,
		201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1,
		201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 1, 201, 3, 201, 2883, 8, 201,
		1, 202, 1, 202, 1, 202, 1, 202, 1, 202, 1, 202, 1, 202, 1, 202, 3, 202,
		2893, 8, 202, 1, 203, 1, 203, 1, 204, 1, 204, 1, 205, 1, 205, 1, 206, 1,
		206, 1, 207, 1, 207, 1, 208, 1, 208, 3, 208, 2907, 8, 208, 1, 209, 3, 209,
		2910, 8, 209, 1, 209, 1, 209, 1, 210, 3, 210, 2915, 8, 210, 1, 210, 1,
		210, 1, 211, 1, 211, 3, 211, 2921, 8, 211, 1, 211, 1, 211, 1, 211, 1, 212,
		1, 212, 1, 212, 1, 212, 1, 213, 1, 213, 1, 213, 1, 213, 1, 214, 1, 214,
		1, 214, 1, 214, 1, 214, 3, 214, 2939, 8, 214, 1, 215, 1, 215, 1, 215, 1,
		215, 1, 215, 5, 215, 2946, 8, 215, 10, 215, 12, 215, 2949, 9, 215, 1, 216,
		1, 216, 1, 216, 1, 216, 1, 216, 1, 216, 5, 216, 2957, 8, 216, 10, 216,
		12, 216, 2960, 9, 216, 1, 217, 1, 217, 1, 218, 1, 218, 1, 218, 3, 218,
		2967, 8, 218, 1, 219, 1, 219, 1, 219, 1, 219, 3, 219, 2973, 8, 219, 1,
		219, 3, 219, 2976, 8, 219, 1, 220, 1, 220, 1, 220, 1, 220, 1, 220, 1, 220,
		1, 220, 1, 220, 1, 220, 3, 220, 2987, 8, 220, 1, 221, 1, 221, 1, 221, 1,
		221, 5, 221, 2993, 8, 221, 10, 221, 12, 221, 2996, 9, 221, 1, 222, 1, 222,
		3, 222, 3000, 8, 222, 1, 223, 1, 223, 1, 223, 1, 223, 1, 223, 1, 223, 5,
		223, 3008, 8, 223, 10, 223, 12, 223, 3011, 9, 223, 1, 224, 1, 224, 1, 224,
		1, 224, 1, 224, 3, 224, 3018, 8, 224, 1, 225, 1, 225, 1, 225, 1, 225, 1,
		225, 3, 225, 3025, 8, 225, 1, 226, 1, 226, 1, 226, 3, 226, 3030, 8, 226,
		1, 226, 1, 226, 1, 226, 1, 226, 1, 226, 1, 226, 3, 226, 3038, 8, 226, 1,
		227, 3, 227, 3041, 8, 227, 1, 227, 3, 227, 3044, 8, 227, 1, 227, 3, 227,
		3047, 8, 227, 1, 227, 1, 227, 1, 227, 3, 227, 3052, 8, 227, 1, 227, 1,
		227, 5, 227, 3056, 8, 227, 10, 227, 12, 227, 3059, 9, 227, 1, 227, 3, 227,
		3062, 8, 227, 1, 227, 3, 227, 3065, 8, 227, 1, 227, 3, 227, 3068, 8, 227,
		1, 227, 3, 227, 3071, 8, 227, 1, 227, 3, 227, 3074, 8, 227, 1, 227, 3,
		227, 3077, 8, 227, 1, 227, 3, 227, 3080, 8, 227, 1, 227, 3, 227, 3083,
		8, 227, 1, 227, 3, 227, 3086, 8, 227, 1, 227, 3, 227, 3089, 8, 227, 1,
		228, 1, 228, 1, 228, 1, 229, 1, 229, 1, 229, 3, 229, 3097, 8, 229, 1, 229,
		3, 229, 3100, 8, 229, 1, 229, 3, 229, 3103, 8, 229, 1, 229, 3, 229, 3106,
		8, 229, 1, 229, 3, 229, 3109, 8, 229, 1, 230, 1, 230, 1, 230, 1, 230, 1,
		230, 1, 230, 1, 230, 1, 230, 1, 230, 3, 230, 3120, 8, 230, 1, 231, 1, 231,
		1, 231, 1, 231, 1, 231, 1, 231, 1, 231, 3, 231, 3129, 8, 231, 1, 232, 1,
		232, 1, 233, 1, 233, 1, 234, 1, 234, 1, 235, 1, 235, 3, 235, 3139, 8, 235,
		1, 235, 1, 235, 1, 235, 1, 235, 5, 235, 3145, 8, 235, 10, 235, 12, 235,
		3148, 9, 235, 1, 236, 1, 236, 1, 236, 1, 236, 1, 237, 1, 237, 1, 237, 1,
		237, 1, 238, 1, 238, 1, 238, 1, 238, 1, 238, 1, 239, 1, 239, 1, 240, 1,
		240, 1, 240, 1, 240, 1, 240, 3, 240, 3170, 8, 240, 1, 241, 1, 241, 1, 241,
		1, 241, 5, 241, 3176, 8, 241, 10, 241, 12, 241, 3179, 9, 241, 1, 242, 1,
		242, 1, 242, 1, 242, 1, 243, 1, 243, 3, 243, 3187, 8, 243, 1, 244, 1, 244,
		1, 245, 1, 245, 1, 245, 1, 245, 3, 245, 3195, 8, 245, 1, 246, 1, 246, 3,
		246, 3199, 8, 246, 1, 246, 1, 246, 1, 246, 1, 246, 1, 246, 3, 246, 3206,
		8, 246, 1, 247, 1, 247, 1, 247, 1, 248, 1, 248, 1, 248, 1, 248, 1, 248,
		1, 248, 1, 248, 1, 248, 3, 248, 3219, 8, 248, 1, 249, 1, 249, 1, 249, 1,
		249, 1, 250, 1, 250, 1, 250, 3, 250, 3228, 8, 250, 1, 251, 1, 251, 1, 251,
		1, 251, 1, 251, 1, 251, 1, 251, 3, 251, 3237, 8, 251, 1, 252, 1, 252, 1,
		252, 1, 252, 1, 252, 1, 252, 1, 252, 1, 252, 3, 252, 3247, 8, 252, 1, 253,
		1, 253, 1, 253, 1, 253, 5, 253, 3253, 8, 253, 10, 253, 12, 253, 3256, 9,
		253, 1, 254, 1, 254, 3, 254, 3260, 8, 254, 1, 254, 3, 254, 3263, 8, 254,
		1, 254, 1, 254, 1, 255, 1, 255, 1, 255, 1, 256, 1, 256, 1, 256, 3, 256,
		3273, 8, 256, 1, 257, 1, 257, 1, 257, 1, 258, 1, 258, 1, 258, 1, 258, 3,
		258, 3282, 8, 258, 1, 258, 1, 258, 1, 258, 1, 258, 5, 258, 3288, 8, 258,
		10, 258, 12, 258, 3291, 9, 258, 1, 259, 1, 259, 1, 259, 1, 259, 1, 259,
		1, 259, 1, 259, 1, 259, 1, 259, 1, 259, 3, 259, 3303, 8, 259, 1, 260, 1,
		260, 3, 260, 3307, 8, 260, 1, 261, 1, 261, 1, 262, 1, 262, 1, 262, 1, 262,
		3, 262, 3315, 8, 262, 1, 262, 3, 262, 3318, 8, 262, 1, 262, 1, 262, 1,
		262, 1, 262, 1, 262, 1, 262, 1, 262, 1, 262, 1, 262, 3, 262, 3329, 8, 262,
		1, 263, 1, 263, 1, 263, 1, 263, 1, 263, 1, 263, 5, 263, 3337, 8, 263, 10,
		263, 12, 263, 3340, 9, 263, 1, 264, 1, 264, 1, 264, 1, 264, 1, 264, 1,
		264, 1, 264, 1, 264, 1, 264, 3, 264, 3351, 8, 264, 1, 265, 1, 265, 1, 265,
		1, 265, 5, 265, 3357, 8, 265, 10, 265, 12, 265, 3360, 9, 265, 1, 266, 1,
		266, 1, 266, 1, 266, 1, 266, 5, 266, 3367, 8, 266, 10, 266, 12, 266, 3370,
		9, 266, 1, 267, 1, 267, 1, 267, 1, 268, 1, 268, 3, 268, 3377, 8, 268, 1,
		269, 1, 269, 3, 269, 3381, 8, 269, 1, 270, 1, 270, 1, 271, 1, 271, 1, 271,
		1, 271, 3, 271, 3389, 8, 271, 1, 272, 1, 272, 1, 273, 1, 273, 1, 273, 1,
		274, 1, 274, 1, 274, 1, 274, 1, 274, 1, 274, 1, 274, 5, 274, 3403, 8, 274,
		10, 274, 12, 274, 3406, 9, 274, 1, 275, 1, 275, 1, 275, 1, 275, 1, 275,
		1, 275, 1, 275, 1, 275, 3, 275, 3416, 8, 275, 1, 276, 1, 276, 1, 276, 1,
		276, 1, 276, 1, 276, 1, 276, 1, 276, 1, 276, 1, 276, 1, 276, 1, 276, 1,
		276, 1, 276, 5, 276, 3432, 8, 276, 10, 276, 12, 276, 3435, 9, 276, 1, 277,
		1, 277, 1, 277, 1, 277, 1, 277, 1, 277, 1, 277, 1, 277, 1, 277, 1, 277,
		1, 277, 1, 277, 1, 277, 1, 277, 3, 277, 3451, 8, 277, 1, 278, 1, 278, 1,
		278, 1, 278, 1, 278, 1, 278, 1, 278, 1, 279, 1, 279, 1, 279, 5, 279, 3463,
		8, 279, 10, 279, 12, 279, 3466, 9, 279, 1, 280, 1, 280, 1, 280, 1, 280,
		1, 281, 1, 281, 1, 281, 1, 281, 1, 281, 1, 281, 1, 281, 1, 281, 1, 281,
		1, 281, 3, 281, 3482, 8, 281, 1, 282, 1, 282, 1, 282, 1, 282, 1, 282, 1,
		282, 1, 283, 1, 283, 1, 283, 3, 283, 3493, 8, 283, 1, 284, 1, 284, 1, 284,
		1, 284, 1, 284, 1, 285, 1, 285, 1, 285, 1, 285, 1, 285, 3, 285, 3505, 8,
		285, 1, 285, 1, 285, 1, 285, 1, 285, 1, 285, 1, 285, 1, 285, 1, 285, 1,
		285, 1, 285, 1, 285, 3, 285, 3518, 8, 285, 1, 285, 1, 285, 1, 285, 1, 285,
		1, 285, 1, 285, 3, 285, 3526, 8, 285, 1, 286, 1, 286, 1, 286, 1, 286, 1,
		286, 1, 286, 1, 286, 1, 286, 3, 286, 3536, 8, 286, 1, 287, 1, 287, 3, 287,
		3540, 8, 287, 1, 288, 1, 288, 1, 288, 1, 288, 1, 288, 1, 288, 1, 288, 4,
		288, 3549, 8, 288, 11, 288, 12, 288, 3550, 1, 289, 1, 289, 1, 289, 1, 289,
		1, 289, 1, 289, 4, 289, 3559, 8, 289, 11, 289, 12, 289, 3560, 1, 290, 1,
		290, 1, 290, 1, 290, 1, 290, 3, 290, 3568, 8, 290, 1, 291, 1, 291, 1, 291,
		1, 291, 1, 292, 1, 292, 1, 292, 1, 292, 1, 292, 1, 292, 1, 292, 1, 292,
		3, 292, 3582, 8, 292, 1, 293, 1, 293, 1, 294, 1, 294, 1, 294, 1, 294, 1,
		294, 1, 294, 1, 294, 3, 294, 3593, 8, 294, 1, 294, 1, 294, 1, 294, 1, 294,
		1, 294, 1, 294, 1, 294, 1, 294, 5, 294, 3603, 8, 294, 10, 294, 12, 294,
		3606, 9, 294, 1, 295, 1, 295, 1, 295, 1, 296, 1, 296, 1, 297, 1, 297, 1,
		297, 3, 297, 3616, 8, 297, 1, 298, 1, 298, 1, 298, 1, 298, 1, 299, 1, 299,
		1, 299, 1, 299, 1, 299, 1, 299, 3, 299, 3628, 8, 299, 1, 300, 1, 300, 1,
		300, 1, 300, 5, 300, 3634, 8, 300, 10, 300, 12, 300, 3637, 9, 300, 1, 301,
		1, 301, 1, 301, 1, 301, 1, 302, 1, 302, 1, 302, 1, 302, 1, 302, 1, 302,
		1, 302, 1, 302, 1, 302, 1, 302, 1, 302, 3, 302, 3654, 8, 302, 1, 303, 1,
		303, 1, 303, 1, 303, 1, 303, 1, 303, 3, 303, 3662, 8, 303, 1, 304, 1, 304,
		1, 304, 1, 304, 5, 304, 3668, 8, 304, 10, 304, 12, 304, 3671, 9, 304, 1,
		305, 1, 305, 1, 305, 1, 305, 1, 305, 1, 305, 3, 305, 3679, 8, 305, 1, 306,
		1, 306, 1, 306, 1, 307, 1, 307, 1, 307, 1, 307, 1, 307, 1, 308, 1, 308,
		3, 308, 3691, 8, 308, 1, 308, 3, 308, 3694, 8, 308, 1, 309, 1, 309, 1,
		309, 1, 310, 1, 310, 1, 310, 3, 310, 3702, 8, 310, 1, 311, 1, 311, 1, 311,
		1, 312, 1, 312, 3, 312, 3709, 8, 312, 1, 313, 1, 313, 1, 313, 1, 314, 1,
		314, 1, 314, 1, 314, 1, 314, 1, 314, 1, 314, 1, 314, 3, 314, 3722, 8, 314,
		1, 315, 1, 315, 1, 315, 1, 315, 5, 315, 3728, 8, 315, 10, 315, 12, 315,
		3731, 9, 315, 1, 316, 1, 316, 1, 316, 1, 316, 1, 316, 1, 316, 3, 316, 3739,
		8, 316, 1, 317, 1, 317, 1, 317, 1, 317, 1, 317, 1, 317, 3, 317, 3747, 8,
		317, 1, 318, 1, 318, 1, 318, 1, 318, 1, 318, 1, 318, 1, 318, 1, 319, 1,
		319, 1, 319, 1, 319, 1, 319, 1, 319, 1, 319, 1, 319, 1, 319, 1, 319, 1,
		319, 1, 319, 1, 319, 1, 319, 1, 319, 1, 319, 1, 319, 1, 319, 1, 319, 1,
		319, 1, 319, 3, 319, 3777, 8, 319, 1, 320, 1, 320, 1, 320, 1, 320, 1, 320,
		1, 320, 5, 320, 3785, 8, 320, 10, 320, 12, 320, 3788, 9, 320, 1, 321, 1,
		321, 3, 321, 3792, 8, 321, 1, 322, 1, 322, 1, 322, 5, 322, 3797, 8, 322,
		10, 322, 12, 322, 3800, 9, 322, 1, 323, 1, 323, 3, 323, 3804, 8, 323, 1,
		324, 1, 324, 3, 324, 3808, 8, 324, 1, 325, 1, 325, 1, 326, 1, 326, 1, 327,
		1, 327, 1, 327, 1, 327, 1, 327, 1, 327, 1, 327, 3, 327, 3821, 8, 327, 1,
		328, 1, 328, 1, 328, 1, 328, 1, 328, 5, 328, 3828, 8, 328, 10, 328, 12,
		328, 3831, 9, 328, 1, 329, 1, 329, 1, 329, 1, 329, 3, 329, 3837, 8, 329,
		1, 330, 1, 330, 1, 330, 1, 330, 1, 330, 1, 331, 1, 331, 1, 332, 1, 332,
		1, 333, 1, 333, 1, 333, 1, 334, 1, 334, 1, 335, 1, 335, 1, 336, 1, 336,
		1, 336, 1, 337, 1, 337, 1, 337, 1, 338, 1, 338, 1, 339, 1, 339, 1, 339,
		1, 340, 1, 340, 1, 341, 1, 341, 1, 342, 1, 342, 1, 342, 1, 342, 1, 342,
		1, 342, 1, 342, 1, 342, 1, 342, 1, 342, 1, 342, 5, 342, 3881, 8, 342, 10,
		342, 12, 342, 3884, 9, 342, 1, 343, 1, 343, 1, 344, 1, 344, 1, 345, 1,
		345, 1, 345, 1, 345, 1, 345, 1, 345, 1, 345, 1, 345, 1, 345, 1, 345, 1,
		345, 5, 345, 3901, 8, 345, 10, 345, 12, 345, 3904, 9, 345, 1, 346, 1, 346,
		1, 347, 1, 347, 1, 347, 0, 14, 168, 240, 268, 270, 306, 308, 310, 350,
		398, 400, 552, 588, 684, 690, 348, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20,
		22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56,
		58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92,
		94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122,
		124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152,
		154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182,
		184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212,
		214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242,
		244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272,
		274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302,
		304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332,
		334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362,
		364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392,
		394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422,
		424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452,
		454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482,
		484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512,
		514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542,
		544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572,
		574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602,
		604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632,
		634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662,
		664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692,
		694, 0, 26, 2, 0, 228, 228, 336, 336, 2, 0, 239, 239, 336, 336, 3, 0, 93,
		93, 305, 305, 327, 327, 5, 0, 66, 66, 74, 74, 76, 76, 84, 84, 98, 98, 2,
		0, 69, 69, 93, 93, 2, 0, 55, 55, 64, 64, 3, 0, 66, 66, 74, 74, 98, 98,
		2, 0, 86, 86, 313, 313, 2, 0, 308, 308, 326, 326, 2, 0, 10, 11, 14, 14,
		1, 0, 1, 7, 1, 0, 8, 9, 1, 0, 10, 11, 1, 0, 12, 13, 2, 0, 55, 55, 331,
		332, 1, 0, 318, 319, 2, 0, 117, 117, 313, 313, 2, 0, 1, 1, 36, 37, 1, 0,
		308, 310, 2, 0, 57, 57, 62, 62, 4, 0, 75, 75, 89, 89, 117, 117, 301, 303,
		11, 0, 72, 72, 81, 81, 83, 83, 86, 87, 91, 92, 95, 96, 101, 101, 105, 108,
		112, 116, 120, 254, 256, 292, 1, 0, 113, 116, 1, 0, 107, 108, 1, 0, 105,
		106, 1, 0, 103, 104, 4213, 0, 696, 1, 0, 0, 0, 2, 699, 1, 0, 0, 0, 4, 712,
		1, 0, 0, 0, 6, 714, 1, 0, 0, 0, 8, 780, 1, 0, 0, 0, 10, 782, 1, 0, 0, 0,
		12, 809, 1, 0, 0, 0, 14, 811, 1, 0, 0, 0, 16, 817, 1, 0, 0, 0, 18, 825,
		1, 0, 0, 0, 20, 833, 1, 0, 0, 0, 22, 837, 1, 0, 0, 0, 24, 843, 1, 0, 0,
		0, 26, 845, 1, 0, 0, 0, 28, 847, 1, 0, 0, 0, 30, 868, 1, 0, 0, 0, 32, 870,
		1, 0, 0, 0, 34, 1069, 1, 0, 0, 0, 36, 1071, 1, 0, 0, 0, 38, 1076, 1, 0,
		0, 0, 40, 1092, 1, 0, 0, 0, 42, 1098, 1, 0, 0, 0, 44, 1100, 1, 0, 0, 0,
		46, 1102, 1, 0, 0, 0, 48, 1110, 1, 0, 0, 0, 50, 1112, 1, 0, 0, 0, 52, 1121,
		1, 0, 0, 0, 54, 1131, 1, 0, 0, 0, 56, 1133, 1, 0, 0, 0, 58, 1137, 1, 0,
		0, 0, 60, 1141, 1, 0, 0, 0, 62, 1143, 1, 0, 0, 0, 64, 1154, 1, 0, 0, 0,
		66, 1168, 1, 0, 0, 0, 68, 1170, 1, 0, 0, 0, 70, 1172, 1, 0, 0, 0, 72, 1174,
		1, 0, 0, 0, 74, 1187, 1, 0, 0, 0, 76, 1189, 1, 0, 0, 0, 78, 1208, 1, 0,
		0, 0, 80, 1212, 1, 0, 0, 0, 82, 1216, 1, 0, 0, 0, 84, 1219, 1, 0, 0, 0,
		86, 1225, 1, 0, 0, 0, 88, 1235, 1, 0, 0, 0, 90, 1240, 1, 0, 0, 0, 92, 1252,
		1, 0, 0, 0, 94, 1254, 1, 0, 0, 0, 96, 1262, 1, 0, 0, 0, 98, 1264, 1, 0,
		0, 0, 100, 1269, 1, 0, 0, 0, 102, 1293, 1, 0, 0, 0, 104, 1297, 1, 0, 0,
		0, 106, 1299, 1, 0, 0, 0, 108, 1304, 1, 0, 0, 0, 110, 1314, 1, 0, 0, 0,
		112, 1316, 1, 0, 0, 0, 114, 1321, 1, 0, 0, 0, 116, 1323, 1, 0, 0, 0, 118,
		1327, 1, 0, 0, 0, 120, 1336, 1, 0, 0, 0, 122, 1349, 1, 0, 0, 0, 124, 1376,
		1, 0, 0, 0, 126, 1378, 1, 0, 0, 0, 128, 1395, 1, 0, 0, 0, 130, 1397, 1,
		0, 0, 0, 132, 1401, 1, 0, 0, 0, 134, 1411, 1, 0, 0, 0, 136, 1413, 1, 0,
		0, 0, 138, 1420, 1, 0, 0, 0, 140, 1422, 1, 0, 0, 0, 142, 1433, 1, 0, 0,
		0, 144, 1437, 1, 0, 0, 0, 146, 1443, 1, 0, 0, 0, 148, 1445, 1, 0, 0, 0,
		150, 1448, 1, 0, 0, 0, 152, 1452, 1, 0, 0, 0, 154, 1497, 1, 0, 0, 0, 156,
		1499, 1, 0, 0, 0, 158, 1501, 1, 0, 0, 0, 160, 1503, 1, 0, 0, 0, 162, 1506,
		1, 0, 0, 0, 164, 1510, 1, 0, 0, 0, 166, 1512, 1, 0, 0, 0, 168, 1526, 1,
		0, 0, 0, 170, 1538, 1, 0, 0, 0, 172, 1546, 1, 0, 0, 0, 174, 1549, 1, 0,
		0, 0, 176, 1565, 1, 0, 0, 0, 178, 1567, 1, 0, 0, 0, 180, 1569, 1, 0, 0,
		0, 182, 1571, 1, 0, 0, 0, 184, 1582, 1, 0, 0, 0, 186, 1584, 1, 0, 0, 0,
		188, 1586, 1, 0, 0, 0, 190, 1598, 1, 0, 0, 0, 192, 1604, 1, 0, 0, 0, 194,
		1628, 1, 0, 0, 0, 196, 1632, 1, 0, 0, 0, 198, 1637, 1, 0, 0, 0, 200, 1639,
		1, 0, 0, 0, 202, 1641, 1, 0, 0, 0, 204, 1654, 1, 0, 0, 0, 206, 1664, 1,
		0, 0, 0, 208, 1685, 1, 0, 0, 0, 210, 1698, 1, 0, 0, 0, 212, 1712, 1, 0,
		0, 0, 214, 1714, 1, 0, 0, 0, 216, 1716, 1, 0, 0, 0, 218, 1725, 1, 0, 0,
		0, 220, 1729, 1, 0, 0, 0, 222, 1732, 1, 0, 0, 0, 224, 1737, 1, 0, 0, 0,
		226, 1739, 1, 0, 0, 0, 228, 1771, 1, 0, 0, 0, 230, 1777, 1, 0, 0, 0, 232,
		1786, 1, 0, 0, 0, 234, 1788, 1, 0, 0, 0, 236, 1804, 1, 0, 0, 0, 238, 1825,
		1, 0, 0, 0, 240, 1835, 1, 0, 0, 0, 242, 1862, 1, 0, 0, 0, 244, 1907, 1,
		0, 0, 0, 246, 1910, 1, 0, 0, 0, 248, 1914, 1, 0, 0, 0, 250, 1940, 1, 0,
		0, 0, 252, 1942, 1, 0, 0, 0, 254, 1949, 1, 0, 0, 0, 256, 1951, 1, 0, 0,
		0, 258, 1961, 1, 0, 0, 0, 260, 1968, 1, 0, 0, 0, 262, 1970, 1, 0, 0, 0,
		264, 1972, 1, 0, 0, 0, 266, 1982, 1, 0, 0, 0, 268, 2000, 1, 0, 0, 0, 270,
		2011, 1, 0, 0, 0, 272, 2026, 1, 0, 0, 0, 274, 2028, 1, 0, 0, 0, 276, 2036,
		1, 0, 0, 0, 278, 2040, 1, 0, 0, 0, 280, 2044, 1, 0, 0, 0, 282, 2052, 1,
		0, 0, 0, 284, 2069, 1, 0, 0, 0, 286, 2075, 1, 0, 0, 0, 288, 2077, 1, 0,
		0, 0, 290, 2089, 1, 0, 0, 0, 292, 2091, 1, 0, 0, 0, 294, 2115, 1, 0, 0,
		0, 296, 2117, 1, 0, 0, 0, 298, 2167, 1, 0, 0, 0, 300, 2189, 1, 0, 0, 0,
		302, 2193, 1, 0, 0, 0, 304, 2197, 1, 0, 0, 0, 306, 2199, 1, 0, 0, 0, 308,
		2224, 1, 0, 0, 0, 310, 2242, 1, 0, 0, 0, 312, 2263, 1, 0, 0, 0, 314, 2265,
		1, 0, 0, 0, 316, 2275, 1, 0, 0, 0, 318, 2287, 1, 0, 0, 0, 320, 2289, 1,
		0, 0, 0, 322, 2299, 1, 0, 0, 0, 324, 2302, 1, 0, 0, 0, 326, 2306, 1, 0,
		0, 0, 328, 2345, 1, 0, 0, 0, 330, 2347, 1, 0, 0, 0, 332, 2352, 1, 0, 0,
		0, 334, 2354, 1, 0, 0, 0, 336, 2359, 1, 0, 0, 0, 338, 2367, 1, 0, 0, 0,
		340, 2373, 1, 0, 0, 0, 342, 2375, 1, 0, 0, 0, 344, 2378, 1, 0, 0, 0, 346,
		2381, 1, 0, 0, 0, 348, 2393, 1, 0, 0, 0, 350, 2396, 1, 0, 0, 0, 352, 2408,
		1, 0, 0, 0, 354, 2420, 1, 0, 0, 0, 356, 2427, 1, 0, 0, 0, 358, 2429, 1,
		0, 0, 0, 360, 2441, 1, 0, 0, 0, 362, 2443, 1, 0, 0, 0, 364, 2454, 1, 0,
		0, 0, 366, 2462, 1, 0, 0, 0, 368, 2466, 1, 0, 0, 0, 370, 2474, 1, 0, 0,
		0, 372, 2481, 1, 0, 0, 0, 374, 2497, 1, 0, 0, 0, 376, 2499, 1, 0, 0, 0,
		378, 2501, 1, 0, 0, 0, 380, 2504, 1, 0, 0, 0, 382, 2518, 1, 0, 0, 0, 384,
		2520, 1, 0, 0, 0, 386, 2529, 1, 0, 0, 0, 388, 2531, 1, 0, 0, 0, 390, 2542,
		1, 0, 0, 0, 392, 2544, 1, 0, 0, 0, 394, 2556, 1, 0, 0, 0, 396, 2568, 1,
		0, 0, 0, 398, 2575, 1, 0, 0, 0, 400, 2621, 1, 0, 0, 0, 402, 2882, 1, 0,
		0, 0, 404, 2892, 1, 0, 0, 0, 406, 2894, 1, 0, 0, 0, 408, 2896, 1, 0, 0,
		0, 410, 2898, 1, 0, 0, 0, 412, 2900, 1, 0, 0, 0, 414, 2902, 1, 0, 0, 0,
		416, 2904, 1, 0, 0, 0, 418, 2909, 1, 0, 0, 0, 420, 2914, 1, 0, 0, 0, 422,
		2918, 1, 0, 0, 0, 424, 2925, 1, 0, 0, 0, 426, 2929, 1, 0, 0, 0, 428, 2938,
		1, 0, 0, 0, 430, 2940, 1, 0, 0, 0, 432, 2950, 1, 0, 0, 0, 434, 2961, 1,
		0, 0, 0, 436, 2966, 1, 0, 0, 0, 438, 2975, 1, 0, 0, 0, 440, 2986, 1, 0,
		0, 0, 442, 2988, 1, 0, 0, 0, 444, 2997, 1, 0, 0, 0, 446, 3001, 1, 0, 0,
		0, 448, 3017, 1, 0, 0, 0, 450, 3019, 1, 0, 0, 0, 452, 3037, 1, 0, 0, 0,
		454, 3079, 1, 0, 0, 0, 456, 3090, 1, 0, 0, 0, 458, 3108, 1, 0, 0, 0, 460,
		3119, 1, 0, 0, 0, 462, 3128, 1, 0, 0, 0, 464, 3130, 1, 0, 0, 0, 466, 3132,
		1, 0, 0, 0, 468, 3134, 1, 0, 0, 0, 470, 3136, 1, 0, 0, 0, 472, 3149, 1,
		0, 0, 0, 474, 3153, 1, 0, 0, 0, 476, 3157, 1, 0, 0, 0, 478, 3162, 1, 0,
		0, 0, 480, 3169, 1, 0, 0, 0, 482, 3171, 1, 0, 0, 0, 484, 3180, 1, 0, 0,
		0, 486, 3186, 1, 0, 0, 0, 488, 3188, 1, 0, 0, 0, 490, 3194, 1, 0, 0, 0,
		492, 3205, 1, 0, 0, 0, 494, 3207, 1, 0, 0, 0, 496, 3218, 1, 0, 0, 0, 498,
		3220, 1, 0, 0, 0, 500, 3227, 1, 0, 0, 0, 502, 3236, 1, 0, 0, 0, 504, 3246,
		1, 0, 0, 0, 506, 3248, 1, 0, 0, 0, 508, 3257, 1, 0, 0, 0, 510, 3266, 1,
		0, 0, 0, 512, 3272, 1, 0, 0, 0, 514, 3274, 1, 0, 0, 0, 516, 3277, 1, 0,
		0, 0, 518, 3302, 1, 0, 0, 0, 520, 3306, 1, 0, 0, 0, 522, 3308, 1, 0, 0,
		0, 524, 3328, 1, 0, 0, 0, 526, 3330, 1, 0, 0, 0, 528, 3350, 1, 0, 0, 0,
		530, 3352, 1, 0, 0, 0, 532, 3361, 1, 0, 0, 0, 534, 3371, 1, 0, 0, 0, 536,
		3376, 1, 0, 0, 0, 538, 3378, 1, 0, 0, 0, 540, 3382, 1, 0, 0, 0, 542, 3388,
		1, 0, 0, 0, 544, 3390, 1, 0, 0, 0, 546, 3392, 1, 0, 0, 0, 548, 3395, 1,
		0, 0, 0, 550, 3415, 1, 0, 0, 0, 552, 3417, 1, 0, 0, 0, 554, 3450, 1, 0,
		0, 0, 556, 3452, 1, 0, 0, 0, 558, 3459, 1, 0, 0, 0, 560, 3467, 1, 0, 0,
		0, 562, 3481, 1, 0, 0, 0, 564, 3483, 1, 0, 0, 0, 566, 3489, 1, 0, 0, 0,
		568, 3494, 1, 0, 0, 0, 570, 3525, 1, 0, 0, 0, 572, 3535, 1, 0, 0, 0, 574,
		3539, 1, 0, 0, 0, 576, 3541, 1, 0, 0, 0, 578, 3552, 1, 0, 0, 0, 580, 3567,
		1, 0, 0, 0, 582, 3569, 1, 0, 0, 0, 584, 3581, 1, 0, 0, 0, 586, 3583, 1,
		0, 0, 0, 588, 3592, 1, 0, 0, 0, 590, 3607, 1, 0, 0, 0, 592, 3610, 1, 0,
		0, 0, 594, 3615, 1, 0, 0, 0, 596, 3617, 1, 0, 0, 0, 598, 3627, 1, 0, 0,
		0, 600, 3629, 1, 0, 0, 0, 602, 3638, 1, 0, 0, 0, 604, 3653, 1, 0, 0, 0,
		606, 3661, 1, 0, 0, 0, 608, 3663, 1, 0, 0, 0, 610, 3678, 1, 0, 0, 0, 612,
		3680, 1, 0, 0, 0, 614, 3683, 1, 0, 0, 0, 616, 3688, 1, 0, 0, 0, 618, 3695,
		1, 0, 0, 0, 620, 3701, 1, 0, 0, 0, 622, 3703, 1, 0, 0, 0, 624, 3708, 1,
		0, 0, 0, 626, 3710, 1, 0, 0, 0, 628, 3721, 1, 0, 0, 0, 630, 3723, 1, 0,
		0, 0, 632, 3738, 1, 0, 0, 0, 634, 3746, 1, 0, 0, 0, 636, 3748, 1, 0, 0,
		0, 638, 3776, 1, 0, 0, 0, 640, 3778, 1, 0, 0, 0, 642, 3791, 1, 0, 0, 0,
		644, 3793, 1, 0, 0, 0, 646, 3803, 1, 0, 0, 0, 648, 3807, 1, 0, 0, 0, 650,
		3809, 1, 0, 0, 0, 652, 3811, 1, 0, 0, 0, 654, 3820, 1, 0, 0, 0, 656, 3822,
		1, 0, 0, 0, 658, 3836, 1, 0, 0, 0, 660, 3838, 1, 0, 0, 0, 662, 3843, 1,
		0, 0, 0, 664, 3845, 1, 0, 0, 0, 666, 3847, 1, 0, 0, 0, 668, 3850, 1, 0,
		0, 0, 670, 3852, 1, 0, 0, 0, 672, 3854, 1, 0, 0, 0, 674, 3857, 1, 0, 0,
		0, 676, 3860, 1, 0, 0, 0, 678, 3862, 1, 0, 0, 0, 680, 3865, 1, 0, 0, 0,
		682, 3867, 1, 0, 0, 0, 684, 3869, 1, 0, 0, 0, 686, 3885, 1, 0, 0, 0, 688,
		3887, 1, 0, 0, 0, 690, 3889, 1, 0, 0, 0, 692, 3905, 1, 0, 0, 0, 694, 3907,
		1, 0, 0, 0, 696, 697, 3, 2, 1, 0, 697, 698, 5, 0, 0, 1, 698, 1, 1, 0, 0,
		0, 699, 704, 3, 4, 2, 0, 700, 701, 5, 25, 0, 0, 701, 703, 3, 4, 2, 0, 702,
		700, 1, 0, 0, 0, 703, 706, 1, 0, 0, 0, 704, 702, 1, 0, 0, 0, 704, 705,
		1, 0, 0, 0, 705, 708, 1, 0, 0, 0, 706, 704, 1, 0, 0, 0, 707, 709, 5, 25,
		0, 0, 708, 707, 1, 0, 0, 0, 708, 709, 1, 0, 0, 0, 709, 3, 1, 0, 0, 0, 710,
		713, 3, 6, 3, 0, 711, 713, 3, 8, 4, 0, 712, 710, 1, 0, 0, 0, 712, 711,
		1, 0, 0, 0, 713, 5, 1, 0, 0, 0, 714, 715, 3, 152, 76, 0, 715, 7, 1, 0,
		0, 0, 716, 717, 5, 125, 0, 0, 717, 719, 3, 150, 75, 0, 718, 720, 3, 148,
		74, 0, 719, 718, 1, 0, 0, 0, 719, 720, 1, 0, 0, 0, 720, 721, 1, 0, 0, 0,
		721, 722, 3, 304, 152, 0, 722, 723, 3, 32, 16, 0, 723, 781, 1, 0, 0, 0,
		724, 725, 5, 125, 0, 0, 725, 727, 3, 30, 15, 0, 726, 728, 3, 148, 74, 0,
		727, 726, 1, 0, 0, 0, 727, 728, 1, 0, 0, 0, 728, 729, 1, 0, 0, 0, 729,
		730, 3, 644, 322, 0, 730, 731, 3, 32, 16, 0, 731, 781, 1, 0, 0, 0, 732,
		733, 5, 125, 0, 0, 733, 735, 3, 26, 13, 0, 734, 736, 3, 148, 74, 0, 735,
		734, 1, 0, 0, 0, 735, 736, 1, 0, 0, 0, 736, 737, 1, 0, 0, 0, 737, 738,
		3, 644, 322, 0, 738, 739, 3, 32, 16, 0, 739, 781, 1, 0, 0, 0, 740, 741,
		5, 125, 0, 0, 741, 743, 3, 26, 13, 0, 742, 744, 3, 148, 74, 0, 743, 742,
		1, 0, 0, 0, 743, 744, 1, 0, 0, 0, 744, 745, 1, 0, 0, 0, 745, 746, 3, 32,
		16, 0, 746, 781, 1, 0, 0, 0, 747, 748, 5, 125, 0, 0, 748, 749, 5, 225,
		0, 0, 749, 751, 5, 242, 0, 0, 750, 752, 3, 148, 74, 0, 751, 750, 1, 0,
		0, 0, 751, 752, 1, 0, 0, 0, 752, 753, 1, 0, 0, 0, 753, 754, 5, 82, 0, 0,
		754, 755, 3, 18, 9, 0, 755, 756, 5, 82, 0, 0, 756, 757, 3, 646, 323, 0,
		757, 758, 3, 644, 322, 0, 758, 781, 1, 0, 0, 0, 759, 760, 5, 125, 0, 0,
		760, 761, 5, 247, 0, 0, 761, 762, 5, 121, 0, 0, 762, 764, 5, 222, 0, 0,
		763, 765, 3, 148, 74, 0, 764, 763, 1, 0, 0, 0, 764, 765, 1, 0, 0, 0, 765,
		766, 1, 0, 0, 0, 766, 767, 3, 646, 323, 0, 767, 768, 5, 82, 0, 0, 768,
		769, 3, 644, 322, 0, 769, 770, 3, 10, 5, 0, 770, 781, 1, 0, 0, 0, 771,
		772, 5, 125, 0, 0, 772, 773, 5, 55, 0, 0, 773, 774, 5, 247, 0, 0, 774,
		775, 5, 121, 0, 0, 775, 776, 5, 221, 0, 0, 776, 777, 5, 82, 0, 0, 777,
		778, 3, 644, 322, 0, 778, 779, 3, 12, 6, 0, 779, 781, 1, 0, 0, 0, 780,
		716, 1, 0, 0, 0, 780, 724, 1, 0, 0, 0, 780, 732, 1, 0, 0, 0, 780, 740,
		1, 0, 0, 0, 780, 747, 1, 0, 0, 0, 780, 759, 1, 0, 0, 0, 780, 771, 1, 0,
		0, 0, 781, 9, 1, 0, 0, 0, 782, 787, 3, 12, 6, 0, 783, 784, 5, 15, 0, 0,
		784, 786, 3, 12, 6, 0, 785, 783, 1, 0, 0, 0, 786, 789, 1, 0, 0, 0, 787,
		785, 1, 0, 0, 0, 787, 788, 1, 0, 0, 0, 788, 11, 1, 0, 0, 0, 789, 787, 1,
		0, 0, 0, 790, 810, 3, 14, 7, 0, 791, 792, 5, 171, 0, 0, 792, 793, 5, 100,
		0, 0, 793, 794, 5, 19, 0, 0, 794, 795, 3, 398, 199, 0, 795, 796, 5, 20,
		0, 0, 796, 810, 1, 0, 0, 0, 797, 798, 5, 245, 0, 0, 798, 799, 5, 69, 0,
		0, 799, 800, 5, 19, 0, 0, 800, 801, 3, 16, 8, 0, 801, 802, 5, 20, 0, 0,
		802, 810, 1, 0, 0, 0, 803, 804, 5, 245, 0, 0, 804, 805, 5, 69, 0, 0, 805,
		810, 5, 55, 0, 0, 806, 807, 5, 235, 0, 0, 807, 808, 5, 329, 0, 0, 808,
		810, 3, 646, 323, 0, 809, 790, 1, 0, 0, 0, 809, 791, 1, 0, 0, 0, 809, 797,
		1, 0, 0, 0, 809, 803, 1, 0, 0, 0, 809, 806, 1, 0, 0, 0, 810, 13, 1, 0,
		0, 0, 811, 812, 5, 178, 0, 0, 812, 813, 5, 329, 0, 0, 813, 814, 5, 19,
		0, 0, 814, 815, 3, 16, 8, 0, 815, 816, 5, 20, 0, 0, 816, 15, 1, 0, 0, 0,
		817, 822, 3, 690, 345, 0, 818, 819, 5, 15, 0, 0, 819, 821, 3, 690, 345,
		0, 820, 818, 1, 0, 0, 0, 821, 824, 1, 0, 0, 0, 822, 820, 1, 0, 0, 0, 822,
		823, 1, 0, 0, 0, 823, 17, 1, 0, 0, 0, 824, 822, 1, 0, 0, 0, 825, 830, 3,
		20, 10, 0, 826, 827, 5, 15, 0, 0, 827, 829, 3, 20, 10, 0, 828, 826, 1,
		0, 0, 0, 829, 832, 1, 0, 0, 0, 830, 828, 1, 0, 0, 0, 830, 831, 1, 0, 0,
		0, 831, 19, 1, 0, 0, 0, 832, 830, 1, 0, 0, 0, 833, 835, 3, 24, 12, 0, 834,
		836, 3, 22, 11, 0, 835, 834, 1, 0, 0, 0, 835, 836, 1, 0, 0, 0, 836, 21,
		1, 0, 0, 0, 837, 838, 5, 19, 0, 0, 838, 839, 3, 358, 179, 0, 839, 840,
		5, 20, 0, 0, 840, 23, 1, 0, 0, 0, 841, 844, 3, 646, 323, 0, 842, 844, 5,
		93, 0, 0, 843, 841, 1, 0, 0, 0, 843, 842, 1, 0, 0, 0, 844, 25, 1, 0, 0,
		0, 845, 846, 3, 28, 14, 0, 846, 27, 1, 0, 0, 0, 847, 848, 7, 0, 0, 0, 848,
		29, 1, 0, 0, 0, 849, 850, 5, 123, 0, 0, 850, 869, 5, 176, 0, 0, 851, 852,
		5, 128, 0, 0, 852, 869, 5, 282, 0, 0, 853, 869, 5, 144, 0, 0, 854, 869,
		5, 145, 0, 0, 855, 869, 5, 151, 0, 0, 856, 857, 5, 169, 0, 0, 857, 869,
		3, 150, 75, 0, 858, 859, 5, 169, 0, 0, 859, 869, 5, 250, 0, 0, 860, 869,
		5, 176, 0, 0, 861, 869, 5, 186, 0, 0, 862, 863, 5, 205, 0, 0, 863, 869,
		5, 282, 0, 0, 864, 869, 5, 213, 0, 0, 865, 869, 5, 227, 0, 0, 866, 869,
		5, 250, 0, 0, 867, 869, 5, 282, 0, 0, 868, 849, 1, 0, 0, 0, 868, 851, 1,
		0, 0, 0, 868, 853, 1, 0, 0, 0, 868, 854, 1, 0, 0, 0, 868, 855, 1, 0, 0,
		0, 868, 856, 1, 0, 0, 0, 868, 858, 1, 0, 0, 0, 868, 860, 1, 0, 0, 0, 868,
		861, 1, 0, 0, 0, 868, 862, 1, 0, 0, 0, 868, 864, 1, 0, 0, 0, 868, 865,
		1, 0, 0, 0, 868, 866, 1, 0, 0, 0, 868, 867, 1, 0, 0, 0, 869, 31, 1, 0,
		0, 0, 870, 875, 3, 34, 17, 0, 871, 872, 5, 15, 0, 0, 872, 874, 3, 34, 17,
		0, 873, 871, 1, 0, 0, 0, 874, 877, 1, 0, 0, 0, 875, 873, 1, 0, 0, 0, 875,
		876, 1, 0, 0, 0, 876, 33, 1, 0, 0, 0, 877, 875, 1, 0, 0, 0, 878, 879, 5,
		255, 0, 0, 879, 880, 5, 83, 0, 0, 880, 1070, 3, 480, 240, 0, 881, 882,
		5, 255, 0, 0, 882, 883, 5, 56, 0, 0, 883, 1070, 3, 146, 73, 0, 884, 885,
		5, 124, 0, 0, 885, 1070, 3, 124, 62, 0, 886, 887, 5, 124, 0, 0, 887, 1070,
		3, 118, 59, 0, 888, 889, 5, 124, 0, 0, 889, 891, 5, 146, 0, 0, 890, 892,
		3, 116, 58, 0, 891, 890, 1, 0, 0, 0, 891, 892, 1, 0, 0, 0, 892, 893, 1,
		0, 0, 0, 893, 894, 3, 646, 323, 0, 894, 895, 3, 114, 57, 0, 895, 1070,
		1, 0, 0, 0, 896, 897, 5, 160, 0, 0, 897, 899, 5, 146, 0, 0, 898, 900, 3,
		148, 74, 0, 899, 898, 1, 0, 0, 0, 899, 900, 1, 0, 0, 0, 900, 901, 1, 0,
		0, 0, 901, 1070, 3, 646, 323, 0, 902, 903, 5, 160, 0, 0, 903, 904, 5, 223,
		0, 0, 904, 906, 5, 193, 0, 0, 905, 907, 3, 148, 74, 0, 906, 905, 1, 0,
		0, 0, 906, 907, 1, 0, 0, 0, 907, 1070, 1, 0, 0, 0, 908, 909, 5, 125, 0,
		0, 909, 911, 5, 146, 0, 0, 910, 912, 3, 148, 74, 0, 911, 910, 1, 0, 0,
		0, 911, 912, 1, 0, 0, 0, 912, 913, 1, 0, 0, 0, 913, 914, 3, 646, 323, 0,
		914, 915, 3, 144, 72, 0, 915, 1070, 1, 0, 0, 0, 916, 917, 5, 125, 0, 0,
		917, 919, 5, 146, 0, 0, 918, 920, 3, 148, 74, 0, 919, 918, 1, 0, 0, 0,
		919, 920, 1, 0, 0, 0, 920, 921, 1, 0, 0, 0, 921, 922, 3, 646, 323, 0, 922,
		923, 5, 255, 0, 0, 923, 924, 5, 83, 0, 0, 924, 925, 3, 480, 240, 0, 925,
		1070, 1, 0, 0, 0, 926, 927, 5, 124, 0, 0, 927, 928, 5, 141, 0, 0, 928,
		929, 3, 116, 58, 0, 929, 931, 3, 50, 25, 0, 930, 932, 3, 48, 24, 0, 931,
		930, 1, 0, 0, 0, 931, 932, 1, 0, 0, 0, 932, 934, 1, 0, 0, 0, 933, 935,
		3, 46, 23, 0, 934, 933, 1, 0, 0, 0, 934, 935, 1, 0, 0, 0, 935, 1070, 1,
		0, 0, 0, 936, 937, 5, 160, 0, 0, 937, 939, 5, 141, 0, 0, 938, 940, 3, 148,
		74, 0, 939, 938, 1, 0, 0, 0, 939, 940, 1, 0, 0, 0, 940, 941, 1, 0, 0, 0,
		941, 1070, 3, 646, 323, 0, 942, 943, 5, 235, 0, 0, 943, 945, 5, 141, 0,
		0, 944, 946, 3, 148, 74, 0, 945, 944, 1, 0, 0, 0, 945, 946, 1, 0, 0, 0,
		946, 947, 1, 0, 0, 0, 947, 948, 3, 646, 323, 0, 948, 949, 5, 329, 0, 0,
		949, 950, 3, 646, 323, 0, 950, 1070, 1, 0, 0, 0, 951, 952, 5, 125, 0, 0,
		952, 954, 5, 141, 0, 0, 953, 955, 3, 148, 74, 0, 954, 953, 1, 0, 0, 0,
		954, 955, 1, 0, 0, 0, 955, 956, 1, 0, 0, 0, 956, 957, 3, 646, 323, 0, 957,
		958, 5, 255, 0, 0, 958, 959, 5, 150, 0, 0, 959, 960, 5, 274, 0, 0, 960,
		961, 3, 108, 54, 0, 961, 1070, 1, 0, 0, 0, 962, 963, 5, 125, 0, 0, 963,
		965, 5, 141, 0, 0, 964, 966, 3, 148, 74, 0, 965, 964, 1, 0, 0, 0, 965,
		966, 1, 0, 0, 0, 966, 967, 1, 0, 0, 0, 967, 968, 3, 646, 323, 0, 968, 969,
		5, 255, 0, 0, 969, 970, 5, 83, 0, 0, 970, 971, 3, 480, 240, 0, 971, 1070,
		1, 0, 0, 0, 972, 973, 5, 125, 0, 0, 973, 975, 5, 141, 0, 0, 974, 976, 3,
		148, 74, 0, 975, 974, 1, 0, 0, 0, 975, 976, 1, 0, 0, 0, 976, 977, 1, 0,
		0, 0, 977, 978, 3, 646, 323, 0, 978, 979, 5, 255, 0, 0, 979, 980, 5, 322,
		0, 0, 980, 981, 3, 398, 199, 0, 981, 1070, 1, 0, 0, 0, 982, 983, 5, 125,
		0, 0, 983, 985, 5, 141, 0, 0, 984, 986, 3, 148, 74, 0, 985, 984, 1, 0,
		0, 0, 985, 986, 1, 0, 0, 0, 986, 987, 1, 0, 0, 0, 987, 988, 3, 646, 323,
		0, 988, 989, 5, 160, 0, 0, 989, 990, 5, 322, 0, 0, 990, 1070, 1, 0, 0,
		0, 991, 992, 5, 125, 0, 0, 992, 994, 5, 141, 0, 0, 993, 995, 3, 148, 74,
		0, 994, 993, 1, 0, 0, 0, 994, 995, 1, 0, 0, 0, 995, 996, 1, 0, 0, 0, 996,
		997, 3, 646, 323, 0, 997, 998, 5, 160, 0, 0, 998, 999, 5, 109, 0, 0, 999,
		1000, 5, 78, 0, 0, 1000, 1070, 1, 0, 0, 0, 1001, 1002, 5, 125, 0, 0, 1002,
		1004, 5, 141, 0, 0, 1003, 1005, 3, 148, 74, 0, 1004, 1003, 1, 0, 0, 0,
		1004, 1005, 1, 0, 0, 0, 1005, 1006, 1, 0, 0, 0, 1006, 1007, 3, 646, 323,
		0, 1007, 1008, 5, 160, 0, 0, 1008, 1009, 5, 177, 0, 0, 1009, 1070, 1, 0,
		0, 0, 1010, 1011, 5, 235, 0, 0, 1011, 1012, 5, 329, 0, 0, 1012, 1070, 3,
		644, 322, 0, 1013, 1014, 5, 255, 0, 0, 1014, 1015, 5, 322, 0, 0, 1015,
		1070, 3, 618, 309, 0, 1016, 1017, 5, 124, 0, 0, 1017, 1018, 5, 247, 0,
		0, 1018, 1019, 5, 155, 0, 0, 1019, 1021, 5, 222, 0, 0, 1020, 1022, 3, 116,
		58, 0, 1021, 1020, 1, 0, 0, 0, 1021, 1022, 1, 0, 0, 0, 1022, 1023, 1, 0,
		0, 0, 1023, 1024, 5, 19, 0, 0, 1024, 1025, 3, 398, 199, 0, 1025, 1026,
		5, 20, 0, 0, 1026, 1070, 1, 0, 0, 0, 1027, 1028, 5, 91, 0, 0, 1028, 1029,
		5, 247, 0, 0, 1029, 1030, 5, 155, 0, 0, 1030, 1032, 5, 222, 0, 0, 1031,
		1033, 3, 148, 74, 0, 1032, 1031, 1, 0, 0, 0, 1032, 1033, 1, 0, 0, 0, 1033,
		1034, 1, 0, 0, 0, 1034, 1035, 5, 19, 0, 0, 1035, 1036, 3, 398, 199, 0,
		1036, 1037, 5, 20, 0, 0, 1037, 1070, 1, 0, 0, 0, 1038, 1039, 5, 160, 0,
		0, 1039, 1040, 5, 247, 0, 0, 1040, 1041, 5, 155, 0, 0, 1041, 1043, 5, 222,
		0, 0, 1042, 1044, 3, 148, 74, 0, 1043, 1042, 1, 0, 0, 0, 1043, 1044, 1,
		0, 0, 0, 1044, 1070, 1, 0, 0, 0, 1045, 1046, 5, 125, 0, 0, 1046, 1048,
		3, 42, 21, 0, 1047, 1049, 3, 148, 74, 0, 1048, 1047, 1, 0, 0, 0, 1048,
		1049, 1, 0, 0, 0, 1049, 1050, 1, 0, 0, 0, 1050, 1051, 3, 646, 323, 0, 1051,
		1052, 3, 34, 17, 0, 1052, 1070, 1, 0, 0, 0, 1053, 1054, 5, 124, 0, 0, 1054,
		1056, 3, 42, 21, 0, 1055, 1057, 3, 116, 58, 0, 1056, 1055, 1, 0, 0, 0,
		1056, 1057, 1, 0, 0, 0, 1057, 1058, 1, 0, 0, 0, 1058, 1059, 3, 646, 323,
		0, 1059, 1070, 1, 0, 0, 0, 1060, 1061, 5, 160, 0, 0, 1061, 1063, 3, 42,
		21, 0, 1062, 1064, 3, 148, 74, 0, 1063, 1062, 1, 0, 0, 0, 1063, 1064, 1,
		0, 0, 0, 1064, 1065, 1, 0, 0, 0, 1065, 1066, 3, 646, 323, 0, 1066, 1070,
		1, 0, 0, 0, 1067, 1070, 3, 38, 19, 0, 1068, 1070, 3, 36, 18, 0, 1069, 878,
		1, 0, 0, 0, 1069, 881, 1, 0, 0, 0, 1069, 884, 1, 0, 0, 0, 1069, 886, 1,
		0, 0, 0, 1069, 888, 1, 0, 0, 0, 1069, 896, 1, 0, 0, 0, 1069, 902, 1, 0,
		0, 0, 1069, 908, 1, 0, 0, 0, 1069, 916, 1, 0, 0, 0, 1069, 926, 1, 0, 0,
		0, 1069, 936, 1, 0, 0, 0, 1069, 942, 1, 0, 0, 0, 1069, 951, 1, 0, 0, 0,
		1069, 962, 1, 0, 0, 0, 1069, 972, 1, 0, 0, 0, 1069, 982, 1, 0, 0, 0, 1069,
		991, 1, 0, 0, 0, 1069, 1001, 1, 0, 0, 0, 1069, 1010, 1, 0, 0, 0, 1069,
		1013, 1, 0, 0, 0, 1069, 1016, 1, 0, 0, 0, 1069, 1027, 1, 0, 0, 0, 1069,
		1038, 1, 0, 0, 0, 1069, 1045, 1, 0, 0, 0, 1069, 1053, 1, 0, 0, 0, 1069,
		1060, 1, 0, 0, 0, 1069, 1067, 1, 0, 0, 0, 1069, 1068, 1, 0, 0, 0, 1070,
		35, 1, 0, 0, 0, 1071, 1072, 5, 255, 0, 0, 1072, 1073, 5, 82, 0, 0, 1073,
		1074, 5, 154, 0, 0, 1074, 1075, 3, 134, 67, 0, 1075, 37, 1, 0, 0, 0, 1076,
		1077, 5, 125, 0, 0, 1077, 1079, 5, 141, 0, 0, 1078, 1080, 3, 148, 74, 0,
		1079, 1078, 1, 0, 0, 0, 1079, 1080, 1, 0, 0, 0, 1080, 1081, 1, 0, 0, 0,
		1081, 1082, 3, 646, 323, 0, 1082, 1084, 3, 94, 47, 0, 1083, 1085, 3, 112,
		56, 0, 1084, 1083, 1, 0, 0, 0, 1084, 1085, 1, 0, 0, 0, 1085, 1087, 1, 0,
		0, 0, 1086, 1088, 3, 40, 20, 0, 1087, 1086, 1, 0, 0, 0, 1087, 1088, 1,
		0, 0, 0, 1088, 1090, 1, 0, 0, 0, 1089, 1091, 3, 480, 240, 0, 1090, 1089,
		1, 0, 0, 0, 1090, 1091, 1, 0, 0, 0, 1091, 39, 1, 0, 0, 0, 1092, 1093, 5,
		56, 0, 0, 1093, 1094, 5, 19, 0, 0, 1094, 1095, 3, 398, 199, 0, 1095, 1096,
		5, 20, 0, 0, 1096, 1097, 5, 263, 0, 0, 1097, 41, 1, 0, 0, 0, 1098, 1099,
		3, 44, 22, 0, 1099, 43, 1, 0, 0, 0, 1100, 1101, 7, 1, 0, 0, 1101, 45, 1,
		0, 0, 0, 1102, 1103, 5, 172, 0, 0, 1103, 1104, 5, 100, 0, 0, 1104, 1105,
		3, 398, 199, 0, 1105, 47, 1, 0, 0, 0, 1106, 1107, 5, 318, 0, 0, 1107, 1111,
		3, 646, 323, 0, 1108, 1109, 5, 319, 0, 0, 1109, 1111, 3, 646, 323, 0, 1110,
		1106, 1, 0, 0, 0, 1110, 1108, 1, 0, 0, 0, 1111, 49, 1, 0, 0, 0, 1112, 1113,
		3, 646, 323, 0, 1113, 1115, 3, 64, 32, 0, 1114, 1116, 3, 52, 26, 0, 1115,
		1114, 1, 0, 0, 0, 1115, 1116, 1, 0, 0, 0, 1116, 1118, 1, 0, 0, 0, 1117,
		1119, 3, 480, 240, 0, 1118, 1117, 1, 0, 0, 0, 1118, 1119, 1, 0, 0, 0, 1119,
		51, 1, 0, 0, 0, 1120, 1122, 3, 54, 27, 0, 1121, 1120, 1, 0, 0, 0, 1122,
		1123, 1, 0, 0, 0, 1123, 1121, 1, 0, 0, 0, 1123, 1124, 1, 0, 0, 0, 1124,
		1125, 1, 0, 0, 0, 1125, 1126, 3, 144, 72, 0, 1126, 53, 1, 0, 0, 0, 1127,
		1132, 3, 56, 28, 0, 1128, 1132, 3, 58, 29, 0, 1129, 1132, 3, 60, 30, 0,
		1130, 1132, 3, 112, 56, 0, 1131, 1127, 1, 0, 0, 0, 1131, 1128, 1, 0, 0,
		0, 1131, 1129, 1, 0, 0, 0, 1131, 1130, 1, 0, 0, 0, 1132, 55, 1, 0, 0, 0,
		1133, 1134, 5, 223, 0, 0, 1134, 1135, 5, 193, 0, 0, 1135, 57, 1, 0, 0,
		0, 1136, 1138, 3, 62, 31, 0, 1137, 1136, 1, 0, 0, 0, 1137, 1138, 1, 0,
		0, 0, 1138, 1139, 1, 0, 0, 0, 1139, 1140, 3, 126, 63, 0, 1140, 59, 1, 0,
		0, 0, 1141, 1142, 5, 180, 0, 0, 1142, 61, 1, 0, 0, 0, 1143, 1144, 5, 146,
		0, 0, 1144, 1145, 3, 646, 323, 0, 1145, 63, 1, 0, 0, 0, 1146, 1148, 3,
		94, 47, 0, 1147, 1149, 3, 618, 309, 0, 1148, 1147, 1, 0, 0, 0, 1148, 1149,
		1, 0, 0, 0, 1149, 1151, 1, 0, 0, 0, 1150, 1152, 3, 66, 33, 0, 1151, 1150,
		1, 0, 0, 0, 1151, 1152, 1, 0, 0, 0, 1152, 1155, 1, 0, 0, 0, 1153, 1155,
		3, 74, 37, 0, 1154, 1146, 1, 0, 0, 0, 1154, 1153, 1, 0, 0, 0, 1155, 65,
		1, 0, 0, 0, 1156, 1158, 3, 74, 37, 0, 1157, 1159, 3, 70, 35, 0, 1158, 1157,
		1, 0, 0, 0, 1158, 1159, 1, 0, 0, 0, 1159, 1160, 1, 0, 0, 0, 1160, 1161,
		6, 33, -1, 0, 1161, 1169, 1, 0, 0, 0, 1162, 1164, 3, 72, 36, 0, 1163, 1165,
		3, 68, 34, 0, 1164, 1163, 1, 0, 0, 0, 1164, 1165, 1, 0, 0, 0, 1165, 1166,
		1, 0, 0, 0, 1166, 1167, 6, 33, -1, 0, 1167, 1169, 1, 0, 0, 0, 1168, 1156,
		1, 0, 0, 0, 1168, 1162, 1, 0, 0, 0, 1169, 67, 1, 0, 0, 0, 1170, 1171, 3,
		74, 37, 0, 1171, 69, 1, 0, 0, 0, 1172, 1173, 3, 72, 36, 0, 1173, 71, 1,
		0, 0, 0, 1174, 1175, 5, 322, 0, 0, 1175, 1176, 3, 398, 199, 0, 1176, 73,
		1, 0, 0, 0, 1177, 1178, 3, 92, 46, 0, 1178, 1179, 5, 19, 0, 0, 1179, 1180,
		3, 398, 199, 0, 1180, 1182, 5, 20, 0, 0, 1181, 1183, 3, 90, 45, 0, 1182,
		1181, 1, 0, 0, 0, 1182, 1183, 1, 0, 0, 0, 1183, 1188, 1, 0, 0, 0, 1184,
		1185, 3, 92, 46, 0, 1185, 1186, 3, 76, 38, 0, 1186, 1188, 1, 0, 0, 0, 1187,
		1177, 1, 0, 0, 0, 1187, 1184, 1, 0, 0, 0, 1188, 75, 1, 0, 0, 0, 1189, 1190,
		5, 181, 0, 0, 1190, 1192, 5, 19, 0, 0, 1191, 1193, 3, 78, 39, 0, 1192,
		1191, 1, 0, 0, 0, 1192, 1193, 1, 0, 0, 0, 1193, 1195, 1, 0, 0, 0, 1194,
		1196, 3, 80, 40, 0, 1195, 1194, 1, 0, 0, 0, 1195, 1196, 1, 0, 0, 0, 1196,
		1198, 1, 0, 0, 0, 1197, 1199, 3, 82, 41, 0, 1198, 1197, 1, 0, 0, 0, 1198,
		1199, 1, 0, 0, 0, 1199, 1201, 1, 0, 0, 0, 1200, 1202, 3, 84, 42, 0, 1201,
		1200, 1, 0, 0, 0, 1201, 1202, 1, 0, 0, 0, 1202, 1204, 1, 0, 0, 0, 1203,
		1205, 3, 86, 43, 0, 1204, 1203, 1, 0, 0, 0, 1204, 1205, 1, 0, 0, 0, 1205,
		1206, 1, 0, 0, 0, 1206, 1207, 5, 20, 0, 0, 1207, 77, 1, 0, 0, 0, 1208,
		1209, 5, 261, 0, 0, 1209, 1210, 5, 102, 0, 0, 1210, 1211, 3, 88, 44, 0,
		1211, 79, 1, 0, 0, 0, 1212, 1213, 5, 185, 0, 0, 1213, 1214, 5, 58, 0, 0,
		1214, 1215, 3, 88, 44, 0, 1215, 81, 1, 0, 0, 0, 1216, 1217, 5, 207, 0,
		0, 1217, 1218, 3, 88, 44, 0, 1218, 83, 1, 0, 0, 0, 1219, 1220, 5, 212,
		0, 0, 1220, 1221, 3, 88, 44, 0, 1221, 85, 1, 0, 0, 0, 1222, 1226, 5, 149,
		0, 0, 1223, 1224, 5, 335, 0, 0, 1224, 1226, 5, 149, 0, 0, 1225, 1222, 1,
		0, 0, 0, 1225, 1223, 1, 0, 0, 0, 1226, 87, 1, 0, 0, 0, 1227, 1236, 3, 682,
		341, 0, 1228, 1236, 3, 678, 339, 0, 1229, 1236, 3, 674, 337, 0, 1230, 1236,
		3, 670, 335, 0, 1231, 1232, 5, 11, 0, 0, 1232, 1236, 3, 682, 341, 0, 1233,
		1234, 5, 11, 0, 0, 1234, 1236, 3, 670, 335, 0, 1235, 1227, 1, 0, 0, 0,
		1235, 1228, 1, 0, 0, 0, 1235, 1229, 1, 0, 0, 0, 1235, 1230, 1, 0, 0, 0,
		1235, 1231, 1, 0, 0, 0, 1235, 1233, 1, 0, 0, 0, 1236, 89, 1, 0, 0, 0, 1237,
		1238, 5, 263, 0, 0, 1238, 1241, 5, 284, 0, 0, 1239, 1241, 5, 263, 0, 0,
		1240, 1237, 1, 0, 0, 0, 1240, 1239, 1, 0, 0, 0, 1241, 91, 1, 0, 0, 0, 1242,
		1243, 5, 177, 0, 0, 1243, 1253, 5, 56, 0, 0, 1244, 1245, 5, 177, 0, 0,
		1245, 1246, 5, 126, 0, 0, 1246, 1253, 5, 56, 0, 0, 1247, 1248, 5, 177,
		0, 0, 1248, 1249, 5, 58, 0, 0, 1249, 1250, 5, 322, 0, 0, 1250, 1253, 5,
		56, 0, 0, 1251, 1253, 5, 56, 0, 0, 1252, 1242, 1, 0, 0, 0, 1252, 1244,
		1, 0, 0, 0, 1252, 1247, 1, 0, 0, 0, 1252, 1251, 1, 0, 0, 0, 1253, 93, 1,
		0, 0, 0, 1254, 1256, 3, 96, 48, 0, 1255, 1257, 3, 628, 314, 0, 1256, 1255,
		1, 0, 0, 0, 1256, 1257, 1, 0, 0, 0, 1257, 95, 1, 0, 0, 0, 1258, 1263, 3,
		104, 52, 0, 1259, 1263, 3, 106, 53, 0, 1260, 1263, 3, 100, 50, 0, 1261,
		1263, 3, 98, 49, 0, 1262, 1258, 1, 0, 0, 0, 1262, 1259, 1, 0, 0, 0, 1262,
		1260, 1, 0, 0, 0, 1262, 1261, 1, 0, 0, 0, 1263, 97, 1, 0, 0, 0, 1264, 1265,
		5, 117, 0, 0, 1265, 1266, 3, 662, 331, 0, 1266, 1267, 3, 108, 54, 0, 1267,
		1268, 3, 664, 332, 0, 1268, 99, 1, 0, 0, 0, 1269, 1270, 5, 94, 0, 0, 1270,
		1279, 3, 662, 331, 0, 1271, 1276, 3, 102, 51, 0, 1272, 1273, 5, 15, 0,
		0, 1273, 1275, 3, 102, 51, 0, 1274, 1272, 1, 0, 0, 0, 1275, 1278, 1, 0,
		0, 0, 1276, 1274, 1, 0, 0, 0, 1276, 1277, 1, 0, 0, 0, 1277, 1280, 1, 0,
		0, 0, 1278, 1276, 1, 0, 0, 0, 1279, 1271, 1, 0, 0, 0, 1279, 1280, 1, 0,
		0, 0, 1280, 1281, 1, 0, 0, 0, 1281, 1282, 3, 664, 332, 0, 1282, 101, 1,
		0, 0, 0, 1283, 1285, 3, 94, 47, 0, 1284, 1286, 3, 618, 309, 0, 1285, 1284,
		1, 0, 0, 0, 1285, 1286, 1, 0, 0, 0, 1286, 1288, 1, 0, 0, 0, 1287, 1289,
		3, 110, 55, 0, 1288, 1287, 1, 0, 0, 0, 1288, 1289, 1, 0, 0, 0, 1289, 1294,
		1, 0, 0, 0, 1290, 1291, 3, 646, 323, 0, 1291, 1292, 3, 108, 54, 0, 1292,
		1294, 1, 0, 0, 0, 1293, 1283, 1, 0, 0, 0, 1293, 1290, 1, 0, 0, 0, 1294,
		103, 1, 0, 0, 0, 1295, 1298, 3, 644, 322, 0, 1296, 1298, 5, 118, 0, 0,
		1297, 1295, 1, 0, 0, 0, 1297, 1296, 1, 0, 0, 0, 1298, 105, 1, 0, 0, 0,
		1299, 1300, 5, 54, 0, 0, 1300, 1301, 3, 662, 331, 0, 1301, 1302, 3, 108,
		54, 0, 1302, 1303, 3, 664, 332, 0, 1303, 107, 1, 0, 0, 0, 1304, 1306, 3,
		94, 47, 0, 1305, 1307, 3, 618, 309, 0, 1306, 1305, 1, 0, 0, 0, 1306, 1307,
		1, 0, 0, 0, 1307, 1309, 1, 0, 0, 0, 1308, 1310, 3, 110, 55, 0, 1309, 1308,
		1, 0, 0, 0, 1309, 1310, 1, 0, 0, 0, 1310, 1312, 1, 0, 0, 0, 1311, 1313,
		3, 480, 240, 0, 1312, 1311, 1, 0, 0, 0, 1312, 1313, 1, 0, 0, 0, 1313, 109,
		1, 0, 0, 0, 1314, 1315, 3, 112, 56, 0, 1315, 111, 1, 0, 0, 0, 1316, 1317,
		5, 109, 0, 0, 1317, 1318, 5, 78, 0, 0, 1318, 113, 1, 0, 0, 0, 1319, 1322,
		3, 118, 59, 0, 1320, 1322, 3, 124, 62, 0, 1321, 1319, 1, 0, 0, 0, 1321,
		1320, 1, 0, 0, 0, 1322, 115, 1, 0, 0, 0, 1323, 1324, 5, 302, 0, 0, 1324,
		1325, 5, 109, 0, 0, 1325, 1326, 5, 330, 0, 0, 1326, 117, 1, 0, 0, 0, 1327,
		1328, 5, 223, 0, 0, 1328, 1329, 5, 193, 0, 0, 1329, 1331, 3, 120, 60, 0,
		1330, 1332, 3, 144, 72, 0, 1331, 1330, 1, 0, 0, 0, 1331, 1332, 1, 0, 0,
		0, 1332, 1334, 1, 0, 0, 0, 1333, 1335, 3, 480, 240, 0, 1334, 1333, 1, 0,
		0, 0, 1334, 1335, 1, 0, 0, 0, 1335, 119, 1, 0, 0, 0, 1336, 1345, 5, 19,
		0, 0, 1337, 1342, 3, 122, 61, 0, 1338, 1339, 5, 15, 0, 0, 1339, 1341, 3,
		122, 61, 0, 1340, 1338, 1, 0, 0, 0, 1341, 1344, 1, 0, 0, 0, 1342, 1340,
		1, 0, 0, 0, 1342, 1343, 1, 0, 0, 0, 1343, 1346, 1, 0, 0, 0, 1344, 1342,
		1, 0, 0, 0, 1345, 1337, 1, 0, 0, 0, 1345, 1346, 1, 0, 0, 0, 1346, 1347,
		1, 0, 0, 0, 1347, 1348, 5, 20, 0, 0, 1348, 121, 1, 0, 0, 0, 1349, 1351,
		3, 646, 323, 0, 1350, 1352, 3, 540, 270, 0, 1351, 1350, 1, 0, 0, 0, 1351,
		1352, 1, 0, 0, 0, 1352, 1354, 1, 0, 0, 0, 1353, 1355, 3, 542, 271, 0, 1354,
		1353, 1, 0, 0, 0, 1354, 1355, 1, 0, 0, 0, 1355, 123, 1, 0, 0, 0, 1356,
		1357, 5, 136, 0, 0, 1357, 1358, 5, 19, 0, 0, 1358, 1359, 3, 398, 199, 0,
		1359, 1361, 5, 20, 0, 0, 1360, 1362, 3, 144, 72, 0, 1361, 1360, 1, 0, 0,
		0, 1361, 1362, 1, 0, 0, 0, 1362, 1364, 1, 0, 0, 0, 1363, 1365, 3, 142,
		71, 0, 1364, 1363, 1, 0, 0, 0, 1364, 1365, 1, 0, 0, 0, 1365, 1377, 1, 0,
		0, 0, 1366, 1367, 5, 174, 0, 0, 1367, 1368, 5, 193, 0, 0, 1368, 1369, 3,
		140, 70, 0, 1369, 1371, 3, 126, 63, 0, 1370, 1372, 3, 144, 72, 0, 1371,
		1370, 1, 0, 0, 0, 1371, 1372, 1, 0, 0, 0, 1372, 1374, 1, 0, 0, 0, 1373,
		1375, 3, 142, 71, 0, 1374, 1373, 1, 0, 0, 0, 1374, 1375, 1, 0, 0, 0, 1375,
		1377, 1, 0, 0, 0, 1376, 1356, 1, 0, 0, 0, 1376, 1366, 1, 0, 0, 0, 1377,
		125, 1, 0, 0, 0, 1378, 1379, 5, 232, 0, 0, 1379, 1380, 3, 644, 322, 0,
		1380, 1382, 3, 140, 70, 0, 1381, 1383, 3, 136, 68, 0, 1382, 1381, 1, 0,
		0, 0, 1382, 1383, 1, 0, 0, 0, 1383, 1385, 1, 0, 0, 0, 1384, 1386, 3, 128,
		64, 0, 1385, 1384, 1, 0, 0, 0, 1385, 1386, 1, 0, 0, 0, 1386, 127, 1, 0,
		0, 0, 1387, 1389, 3, 130, 65, 0, 1388, 1390, 3, 132, 66, 0, 1389, 1388,
		1, 0, 0, 0, 1389, 1390, 1, 0, 0, 0, 1390, 1396, 1, 0, 0, 0, 1391, 1393,
		3, 132, 66, 0, 1392, 1394, 3, 130, 65, 0, 1393, 1392, 1, 0, 0, 0, 1393,
		1394, 1, 0, 0, 0, 1394, 1396, 1, 0, 0, 0, 1395, 1387, 1, 0, 0, 0, 1395,
		1391, 1, 0, 0, 0, 1396, 129, 1, 0, 0, 0, 1397, 1398, 5, 82, 0, 0, 1398,
		1399, 5, 279, 0, 0, 1399, 1400, 3, 134, 67, 0, 1400, 131, 1, 0, 0, 0, 1401,
		1402, 5, 82, 0, 0, 1402, 1403, 5, 154, 0, 0, 1403, 1404, 3, 134, 67, 0,
		1404, 133, 1, 0, 0, 0, 1405, 1406, 5, 335, 0, 0, 1406, 1412, 5, 122, 0,
		0, 1407, 1412, 5, 241, 0, 0, 1408, 1412, 5, 135, 0, 0, 1409, 1410, 5, 255,
		0, 0, 1410, 1412, 5, 78, 0, 0, 1411, 1405, 1, 0, 0, 0, 1411, 1407, 1, 0,
		0, 0, 1411, 1408, 1, 0, 0, 0, 1411, 1409, 1, 0, 0, 0, 1412, 135, 1, 0,
		0, 0, 1413, 1414, 5, 202, 0, 0, 1414, 1415, 3, 138, 69, 0, 1415, 137, 1,
		0, 0, 0, 1416, 1421, 5, 119, 0, 0, 1417, 1421, 5, 70, 0, 0, 1418, 1419,
		5, 109, 0, 0, 1419, 1421, 5, 64, 0, 0, 1420, 1416, 1, 0, 0, 0, 1420, 1417,
		1, 0, 0, 0, 1420, 1418, 1, 0, 0, 0, 1421, 139, 1, 0, 0, 0, 1422, 1423,
		5, 19, 0, 0, 1423, 1428, 3, 646, 323, 0, 1424, 1425, 5, 15, 0, 0, 1425,
		1427, 3, 646, 323, 0, 1426, 1424, 1, 0, 0, 0, 1427, 1430, 1, 0, 0, 0, 1428,
		1426, 1, 0, 0, 0, 1428, 1429, 1, 0, 0, 0, 1429, 1431, 1, 0, 0, 0, 1430,
		1428, 1, 0, 0, 0, 1431, 1432, 5, 20, 0, 0, 1432, 141, 1, 0, 0, 0, 1433,
		1434, 5, 83, 0, 0, 1434, 1435, 3, 480, 240, 0, 1435, 143, 1, 0, 0, 0, 1436,
		1438, 5, 109, 0, 0, 1437, 1436, 1, 0, 0, 0, 1437, 1438, 1, 0, 0, 0, 1438,
		1439, 1, 0, 0, 0, 1439, 1440, 5, 162, 0, 0, 1440, 145, 1, 0, 0, 0, 1441,
		1444, 3, 672, 336, 0, 1442, 1444, 3, 690, 345, 0, 1443, 1441, 1, 0, 0,
		0, 1443, 1442, 1, 0, 0, 0, 1444, 147, 1, 0, 0, 0, 1445, 1446, 5, 302, 0,
		0, 1446, 1447, 5, 330, 0, 0, 1447, 149, 1, 0, 0, 0, 1448, 1450, 5, 266,
		0, 0, 1449, 1451, 5, 176, 0, 0, 1450, 1449, 1, 0, 0, 0, 1450, 1451, 1,
		0, 0, 0, 1451, 151, 1, 0, 0, 0, 1452, 1453, 3, 154, 77, 0, 1453, 153, 1,
		0, 0, 0, 1454, 1455, 3, 188, 94, 0, 1455, 1457, 3, 164, 82, 0, 1456, 1458,
		3, 200, 100, 0, 1457, 1456, 1, 0, 0, 0, 1457, 1458, 1, 0, 0, 0, 1458, 1460,
		1, 0, 0, 0, 1459, 1461, 3, 502, 251, 0, 1460, 1459, 1, 0, 0, 0, 1460, 1461,
		1, 0, 0, 0, 1461, 1498, 1, 0, 0, 0, 1462, 1463, 3, 160, 80, 0, 1463, 1464,
		3, 162, 81, 0, 1464, 1465, 6, 77, -1, 0, 1465, 1498, 1, 0, 0, 0, 1466,
		1467, 3, 188, 94, 0, 1467, 1468, 5, 38, 0, 0, 1468, 1469, 6, 77, -1, 0,
		1469, 1498, 1, 0, 0, 0, 1470, 1472, 3, 164, 82, 0, 1471, 1473, 3, 200,
		100, 0, 1472, 1471, 1, 0, 0, 0, 1472, 1473, 1, 0, 0, 0, 1473, 1475, 1,
		0, 0, 0, 1474, 1476, 3, 502, 251, 0, 1475, 1474, 1, 0, 0, 0, 1475, 1476,
		1, 0, 0, 0, 1476, 1498, 1, 0, 0, 0, 1477, 1479, 3, 188, 94, 0, 1478, 1477,
		1, 0, 0, 0, 1478, 1479, 1, 0, 0, 0, 1479, 1480, 1, 0, 0, 0, 1480, 1481,
		3, 234, 117, 0, 1481, 1482, 6, 77, -1, 0, 1482, 1498, 1, 0, 0, 0, 1483,
		1485, 3, 188, 94, 0, 1484, 1483, 1, 0, 0, 0, 1484, 1485, 1, 0, 0, 0, 1485,
		1486, 1, 0, 0, 0, 1486, 1487, 3, 234, 117, 0, 1487, 1488, 3, 156, 78, 0,
		1488, 1489, 6, 77, -1, 0, 1489, 1498, 1, 0, 0, 0, 1490, 1492, 3, 188, 94,
		0, 1491, 1490, 1, 0, 0, 0, 1491, 1492, 1, 0, 0, 0, 1492, 1493, 1, 0, 0,
		0, 1493, 1494, 3, 234, 117, 0, 1494, 1495, 3, 158, 79, 0, 1495, 1496, 6,
		77, -1, 0, 1496, 1498, 1, 0, 0, 0, 1497, 1454, 1, 0, 0, 0, 1497, 1462,
		1, 0, 0, 0, 1497, 1466, 1, 0, 0, 0, 1497, 1470, 1, 0, 0, 0, 1497, 1478,
		1, 0, 0, 0, 1497, 1484, 1, 0, 0, 0, 1497, 1491, 1, 0, 0, 0, 1498, 155,
		1, 0, 0, 0, 1499, 1500, 7, 2, 0, 0, 1500, 157, 1, 0, 0, 0, 1501, 1502,
		7, 3, 0, 0, 1502, 159, 1, 0, 0, 0, 1503, 1504, 3, 188, 94, 0, 1504, 1505,
		5, 15, 0, 0, 1505, 161, 1, 0, 0, 0, 1506, 1507, 7, 4, 0, 0, 1507, 163,
		1, 0, 0, 0, 1508, 1511, 3, 172, 86, 0, 1509, 1511, 3, 166, 83, 0, 1510,
		1508, 1, 0, 0, 0, 1510, 1509, 1, 0, 0, 0, 1511, 165, 1, 0, 0, 0, 1512,
		1513, 3, 168, 84, 0, 1513, 167, 1, 0, 0, 0, 1514, 1515, 6, 84, -1, 0, 1515,
		1517, 3, 172, 86, 0, 1516, 1518, 3, 170, 85, 0, 1517, 1516, 1, 0, 0, 0,
		1518, 1519, 1, 0, 0, 0, 1519, 1517, 1, 0, 0, 0, 1519, 1520, 1, 0, 0, 0,
		1520, 1527, 1, 0, 0, 0, 1521, 1522, 3, 172, 86, 0, 1522, 1523, 3, 174,
		87, 0, 1523, 1524, 5, 69, 0, 0, 1524, 1525, 6, 84, -1, 0, 1525, 1527, 1,
		0, 0, 0, 1526, 1514, 1, 0, 0, 0, 1526, 1521, 1, 0, 0, 0, 1527, 1535, 1,
		0, 0, 0, 1528, 1529, 10, 1, 0, 0, 1529, 1530, 3, 174, 87, 0, 1530, 1531,
		5, 69, 0, 0, 1531, 1532, 6, 84, -1, 0, 1532, 1534, 1, 0, 0, 0, 1533, 1528,
		1, 0, 0, 0, 1534, 1537, 1, 0, 0, 0, 1535, 1533, 1, 0, 0, 0, 1535, 1536,
		1, 0, 0, 0, 1536, 169, 1, 0, 0, 0, 1537, 1535, 1, 0, 0, 0, 1538, 1539,
		3, 174, 87, 0, 1539, 1540, 3, 172, 86, 0, 1540, 171, 1, 0, 0, 0, 1541,
		1547, 3, 206, 103, 0, 1542, 1544, 3, 424, 212, 0, 1543, 1545, 3, 534, 267,
		0, 1544, 1543, 1, 0, 0, 0, 1544, 1545, 1, 0, 0, 0, 1545, 1547, 1, 0, 0,
		0, 1546, 1541, 1, 0, 0, 0, 1546, 1542, 1, 0, 0, 0, 1547, 173, 1, 0, 0,
		0, 1548, 1550, 3, 184, 92, 0, 1549, 1548, 1, 0, 0, 0, 1549, 1550, 1, 0,
		0, 0, 1550, 1551, 1, 0, 0, 0, 1551, 1553, 3, 182, 91, 0, 1552, 1554, 3,
		512, 256, 0, 1553, 1552, 1, 0, 0, 0, 1553, 1554, 1, 0, 0, 0, 1554, 1555,
		1, 0, 0, 0, 1555, 1557, 3, 180, 90, 0, 1556, 1558, 3, 178, 89, 0, 1557,
		1556, 1, 0, 0, 0, 1557, 1558, 1, 0, 0, 0, 1558, 1560, 1, 0, 0, 0, 1559,
		1561, 3, 176, 88, 0, 1560, 1559, 1, 0, 0, 0, 1560, 1561, 1, 0, 0, 0, 1561,
		175, 1, 0, 0, 0, 1562, 1566, 5, 148, 0, 0, 1563, 1564, 5, 148, 0, 0, 1564,
		1566, 5, 58, 0, 0, 1565, 1562, 1, 0, 0, 0, 1565, 1563, 1, 0, 0, 0, 1566,
		177, 1, 0, 0, 0, 1567, 1568, 5, 265, 0, 0, 1568, 179, 1, 0, 0, 0, 1569,
		1570, 7, 5, 0, 0, 1570, 181, 1, 0, 0, 0, 1571, 1572, 7, 6, 0, 0, 1572,
		183, 1, 0, 0, 0, 1573, 1575, 5, 70, 0, 0, 1574, 1576, 3, 186, 93, 0, 1575,
		1574, 1, 0, 0, 0, 1575, 1576, 1, 0, 0, 0, 1576, 1583, 1, 0, 0, 0, 1577,
		1583, 5, 85, 0, 0, 1578, 1580, 5, 75, 0, 0, 1579, 1581, 3, 186, 93, 0,
		1580, 1579, 1, 0, 0, 0, 1580, 1581, 1, 0, 0, 0, 1581, 1583, 1, 0, 0, 0,
		1582, 1573, 1, 0, 0, 0, 1582, 1577, 1, 0, 0, 0, 1582, 1578, 1, 0, 0, 0,
		1583, 185, 1, 0, 0, 0, 1584, 1585, 5, 85, 0, 0, 1585, 187, 1, 0, 0, 0,
		1586, 1588, 5, 102, 0, 0, 1587, 1589, 5, 90, 0, 0, 1588, 1587, 1, 0, 0,
		0, 1588, 1589, 1, 0, 0, 0, 1589, 1590, 1, 0, 0, 0, 1590, 1595, 3, 190,
		95, 0, 1591, 1592, 5, 15, 0, 0, 1592, 1594, 3, 190, 95, 0, 1593, 1591,
		1, 0, 0, 0, 1594, 1597, 1, 0, 0, 0, 1595, 1593, 1, 0, 0, 0, 1595, 1596,
		1, 0, 0, 0, 1596, 189, 1, 0, 0, 0, 1597, 1595, 1, 0, 0, 0, 1598, 1599,
		3, 646, 323, 0, 1599, 1600, 5, 56, 0, 0, 1600, 1602, 3, 424, 212, 0, 1601,
		1603, 3, 192, 96, 0, 1602, 1601, 1, 0, 0, 0, 1602, 1603, 1, 0, 0, 0, 1603,
		191, 1, 0, 0, 0, 1604, 1605, 3, 194, 97, 0, 1605, 193, 1, 0, 0, 0, 1606,
		1607, 5, 102, 0, 0, 1607, 1609, 5, 156, 0, 0, 1608, 1610, 3, 534, 267,
		0, 1609, 1608, 1, 0, 0, 0, 1609, 1610, 1, 0, 0, 0, 1610, 1629, 1, 0, 0,
		0, 1611, 1612, 5, 102, 0, 0, 1612, 1614, 5, 156, 0, 0, 1613, 1615, 3, 534,
		267, 0, 1614, 1613, 1, 0, 0, 0, 1614, 1615, 1, 0, 0, 0, 1615, 1616, 1,
		0, 0, 0, 1616, 1617, 5, 315, 0, 0, 1617, 1618, 3, 196, 98, 0, 1618, 1619,
		5, 110, 0, 0, 1619, 1620, 3, 196, 98, 0, 1620, 1629, 1, 0, 0, 0, 1621,
		1622, 5, 102, 0, 0, 1622, 1624, 5, 156, 0, 0, 1623, 1625, 3, 534, 267,
		0, 1624, 1623, 1, 0, 0, 0, 1624, 1625, 1, 0, 0, 0, 1625, 1626, 1, 0, 0,
		0, 1626, 1627, 5, 206, 0, 0, 1627, 1629, 3, 196, 98, 0, 1628, 1606, 1,
		0, 0, 0, 1628, 1611, 1, 0, 0, 0, 1628, 1621, 1, 0, 0, 0, 1629, 195, 1,
		0, 0, 0, 1630, 1633, 3, 198, 99, 0, 1631, 1633, 5, 316, 0, 0, 1632, 1630,
		1, 0, 0, 0, 1632, 1631, 1, 0, 0, 0, 1633, 197, 1, 0, 0, 0, 1634, 1638,
		3, 682, 341, 0, 1635, 1638, 3, 624, 312, 0, 1636, 1638, 3, 622, 311, 0,
		1637, 1634, 1, 0, 0, 0, 1637, 1635, 1, 0, 0, 0, 1637, 1636, 1, 0, 0, 0,
		1638, 199, 1, 0, 0, 0, 1639, 1640, 3, 202, 101, 0, 1640, 201, 1, 0, 0,
		0, 1641, 1643, 5, 84, 0, 0, 1642, 1644, 3, 512, 256, 0, 1643, 1642, 1,
		0, 0, 0, 1643, 1644, 1, 0, 0, 0, 1644, 1645, 1, 0, 0, 0, 1645, 1646, 5,
		58, 0, 0, 1646, 1651, 3, 204, 102, 0, 1647, 1648, 5, 15, 0, 0, 1648, 1650,
		3, 204, 102, 0, 1649, 1647, 1, 0, 0, 0, 1650, 1653, 1, 0, 0, 0, 1651, 1649,
		1, 0, 0, 0, 1651, 1652, 1, 0, 0, 0, 1652, 203, 1, 0, 0, 0, 1653, 1651,
		1, 0, 0, 0, 1654, 1656, 3, 398, 199, 0, 1655, 1657, 3, 618, 309, 0, 1656,
		1655, 1, 0, 0, 0, 1656, 1657, 1, 0, 0, 0, 1657, 1659, 1, 0, 0, 0, 1658,
		1660, 3, 540, 270, 0, 1659, 1658, 1, 0, 0, 0, 1659, 1660, 1, 0, 0, 0, 1660,
		1662, 1, 0, 0, 0, 1661, 1663, 3, 542, 271, 0, 1662, 1661, 1, 0, 0, 0, 1662,
		1663, 1, 0, 0, 0, 1663, 205, 1, 0, 0, 0, 1664, 1666, 3, 228, 114, 0, 1665,
		1667, 3, 234, 117, 0, 1666, 1665, 1, 0, 0, 0, 1666, 1667, 1, 0, 0, 0, 1667,
		1669, 1, 0, 0, 0, 1668, 1670, 3, 208, 104, 0, 1669, 1668, 1, 0, 0, 0, 1669,
		1670, 1, 0, 0, 0, 1670, 207, 1, 0, 0, 0, 1671, 1673, 3, 220, 110, 0, 1672,
		1674, 3, 224, 112, 0, 1673, 1672, 1, 0, 0, 0, 1673, 1674, 1, 0, 0, 0, 1674,
		1676, 1, 0, 0, 0, 1675, 1677, 3, 222, 111, 0, 1676, 1675, 1, 0, 0, 0, 1676,
		1677, 1, 0, 0, 0, 1677, 1679, 1, 0, 0, 0, 1678, 1680, 3, 344, 172, 0, 1679,
		1678, 1, 0, 0, 0, 1679, 1680, 1, 0, 0, 0, 1680, 1682, 1, 0, 0, 0, 1681,
		1683, 3, 214, 107, 0, 1682, 1681, 1, 0, 0, 0, 1682, 1683, 1, 0, 0, 0, 1683,
		1686, 1, 0, 0, 0, 1684, 1686, 3, 210, 105, 0, 1685, 1671, 1, 0, 0, 0, 1685,
		1684, 1, 0, 0, 0, 1686, 209, 1, 0, 0, 0, 1687, 1689, 3, 224, 112, 0, 1688,
		1690, 3, 222, 111, 0, 1689, 1688, 1, 0, 0, 0, 1689, 1690, 1, 0, 0, 0, 1690,
		1692, 1, 0, 0, 0, 1691, 1693, 3, 344, 172, 0, 1692, 1691, 1, 0, 0, 0, 1692,
		1693, 1, 0, 0, 0, 1693, 1695, 1, 0, 0, 0, 1694, 1696, 3, 214, 107, 0, 1695,
		1694, 1, 0, 0, 0, 1695, 1696, 1, 0, 0, 0, 1696, 1699, 1, 0, 0, 0, 1697,
		1699, 3, 212, 106, 0, 1698, 1687, 1, 0, 0, 0, 1698, 1697, 1, 0, 0, 0, 1699,
		211, 1, 0, 0, 0, 1700, 1702, 3, 222, 111, 0, 1701, 1703, 3, 344, 172, 0,
		1702, 1701, 1, 0, 0, 0, 1702, 1703, 1, 0, 0, 0, 1703, 1705, 1, 0, 0, 0,
		1704, 1706, 3, 214, 107, 0, 1705, 1704, 1, 0, 0, 0, 1705, 1706, 1, 0, 0,
		0, 1706, 1713, 1, 0, 0, 0, 1707, 1709, 3, 344, 172, 0, 1708, 1710, 3, 214,
		107, 0, 1709, 1708, 1, 0, 0, 0, 1709, 1710, 1, 0, 0, 0, 1710, 1713, 1,
		0, 0, 0, 1711, 1713, 3, 214, 107, 0, 1712, 1700, 1, 0, 0, 0, 1712, 1707,
		1, 0, 0, 0, 1712, 1711, 1, 0, 0, 0, 1713, 213, 1, 0, 0, 0, 1714, 1715,
		3, 216, 108, 0, 1715, 215, 1, 0, 0, 0, 1716, 1717, 5, 328, 0, 0, 1717,
		1722, 3, 218, 109, 0, 1718, 1719, 5, 15, 0, 0, 1719, 1721, 3, 218, 109,
		0, 1720, 1718, 1, 0, 0, 0, 1721, 1724, 1, 0, 0, 0, 1722, 1720, 1, 0, 0,
		0, 1722, 1723, 1, 0, 0, 0, 1723, 217, 1, 0, 0, 0, 1724, 1722, 1, 0, 0,
		0, 1725, 1726, 3, 646, 323, 0, 1726, 1727, 5, 56, 0, 0, 1727, 1728, 3,
		458, 229, 0, 1728, 219, 1, 0, 0, 0, 1729, 1730, 5, 327, 0, 0, 1730, 1731,
		3, 398, 199, 0, 1731, 221, 1, 0, 0, 0, 1732, 1733, 5, 304, 0, 0, 1733,
		1734, 3, 398, 199, 0, 1734, 223, 1, 0, 0, 0, 1735, 1738, 3, 226, 113, 0,
		1736, 1738, 3, 506, 253, 0, 1737, 1735, 1, 0, 0, 0, 1737, 1736, 1, 0, 0,
		0, 1738, 225, 1, 0, 0, 0, 1739, 1740, 3, 508, 254, 0, 1740, 1741, 5, 55,
		0, 0, 1741, 227, 1, 0, 0, 0, 1742, 1744, 5, 93, 0, 0, 1743, 1745, 3, 512,
		256, 0, 1744, 1743, 1, 0, 0, 0, 1744, 1745, 1, 0, 0, 0, 1745, 1747, 1,
		0, 0, 0, 1746, 1748, 3, 232, 116, 0, 1747, 1746, 1, 0, 0, 0, 1747, 1748,
		1, 0, 0, 0, 1748, 1750, 1, 0, 0, 0, 1749, 1751, 3, 180, 90, 0, 1750, 1749,
		1, 0, 0, 0, 1750, 1751, 1, 0, 0, 0, 1751, 1753, 1, 0, 0, 0, 1752, 1754,
		3, 230, 115, 0, 1753, 1752, 1, 0, 0, 0, 1753, 1754, 1, 0, 0, 0, 1754, 1755,
		1, 0, 0, 0, 1755, 1772, 3, 380, 190, 0, 1756, 1758, 5, 93, 0, 0, 1757,
		1759, 3, 512, 256, 0, 1758, 1757, 1, 0, 0, 0, 1758, 1759, 1, 0, 0, 0, 1759,
		1761, 1, 0, 0, 0, 1760, 1762, 3, 232, 116, 0, 1761, 1760, 1, 0, 0, 0, 1761,
		1762, 1, 0, 0, 0, 1762, 1764, 1, 0, 0, 0, 1763, 1765, 3, 180, 90, 0, 1764,
		1763, 1, 0, 0, 0, 1764, 1765, 1, 0, 0, 0, 1765, 1767, 1, 0, 0, 0, 1766,
		1768, 3, 230, 115, 0, 1767, 1766, 1, 0, 0, 0, 1767, 1768, 1, 0, 0, 0, 1768,
		1769, 1, 0, 0, 0, 1769, 1770, 5, 69, 0, 0, 1770, 1772, 6, 114, -1, 0, 1771,
		1742, 1, 0, 0, 0, 1771, 1756, 1, 0, 0, 0, 1772, 229, 1, 0, 0, 0, 1773,
		1774, 5, 56, 0, 0, 1774, 1778, 5, 94, 0, 0, 1775, 1776, 5, 56, 0, 0, 1776,
		1778, 3, 644, 322, 0, 1777, 1773, 1, 0, 0, 0, 1777, 1775, 1, 0, 0, 0, 1778,
		231, 1, 0, 0, 0, 1779, 1780, 5, 102, 0, 0, 1780, 1787, 3, 646, 323, 0,
		1781, 1782, 5, 102, 0, 0, 1782, 1783, 3, 646, 323, 0, 1783, 1784, 5, 83,
		0, 0, 1784, 1785, 3, 480, 240, 0, 1785, 1787, 1, 0, 0, 0, 1786, 1779, 1,
		0, 0, 0, 1786, 1781, 1, 0, 0, 0, 1787, 233, 1, 0, 0, 0, 1788, 1789, 5,
		69, 0, 0, 1789, 1790, 3, 236, 118, 0, 1790, 235, 1, 0, 0, 0, 1791, 1795,
		3, 240, 120, 0, 1792, 1794, 3, 238, 119, 0, 1793, 1792, 1, 0, 0, 0, 1794,
		1797, 1, 0, 0, 0, 1795, 1793, 1, 0, 0, 0, 1795, 1796, 1, 0, 0, 0, 1796,
		1805, 1, 0, 0, 0, 1797, 1795, 1, 0, 0, 0, 1798, 1799, 5, 32, 0, 0, 1799,
		1805, 6, 118, -1, 0, 1800, 1801, 5, 31, 0, 0, 1801, 1805, 6, 118, -1, 0,
		1802, 1803, 5, 33, 0, 0, 1803, 1805, 6, 118, -1, 0, 1804, 1791, 1, 0, 0,
		0, 1804, 1798, 1, 0, 0, 0, 1804, 1800, 1, 0, 0, 0, 1804, 1802, 1, 0, 0,
		0, 1805, 237, 1, 0, 0, 0, 1806, 1807, 5, 15, 0, 0, 1807, 1826, 3, 240,
		120, 0, 1808, 1810, 3, 376, 188, 0, 1809, 1808, 1, 0, 0, 0, 1809, 1810,
		1, 0, 0, 0, 1810, 1812, 1, 0, 0, 0, 1811, 1813, 3, 374, 187, 0, 1812, 1811,
		1, 0, 0, 0, 1812, 1813, 1, 0, 0, 0, 1813, 1815, 1, 0, 0, 0, 1814, 1816,
		3, 290, 145, 0, 1815, 1814, 1, 0, 0, 0, 1815, 1816, 1, 0, 0, 0, 1816, 1817,
		1, 0, 0, 0, 1817, 1819, 5, 60, 0, 0, 1818, 1820, 3, 512, 256, 0, 1819,
		1818, 1, 0, 0, 0, 1819, 1820, 1, 0, 0, 0, 1820, 1821, 1, 0, 0, 0, 1821,
		1823, 3, 240, 120, 0, 1822, 1824, 3, 284, 142, 0, 1823, 1822, 1, 0, 0,
		0, 1823, 1824, 1, 0, 0, 0, 1824, 1826, 1, 0, 0, 0, 1825, 1806, 1, 0, 0,
		0, 1825, 1809, 1, 0, 0, 0, 1826, 239, 1, 0, 0, 0, 1827, 1828, 6, 120, -1,
		0, 1828, 1836, 3, 242, 121, 0, 1829, 1836, 3, 292, 146, 0, 1830, 1831,
		5, 19, 0, 0, 1831, 1832, 3, 280, 140, 0, 1832, 1833, 5, 20, 0, 0, 1833,
		1836, 1, 0, 0, 0, 1834, 1836, 3, 278, 139, 0, 1835, 1827, 1, 0, 0, 0, 1835,
		1829, 1, 0, 0, 0, 1835, 1830, 1, 0, 0, 0, 1835, 1834, 1, 0, 0, 0, 1836,
		1843, 1, 0, 0, 0, 1837, 1838, 10, 2, 0, 0, 1838, 1842, 3, 266, 133, 0,
		1839, 1840, 10, 1, 0, 0, 1840, 1842, 3, 248, 124, 0, 1841, 1837, 1, 0,
		0, 0, 1841, 1839, 1, 0, 0, 0, 1842, 1845, 1, 0, 0, 0, 1843, 1841, 1, 0,
		0, 0, 1843, 1844, 1, 0, 0, 0, 1844, 241, 1, 0, 0, 0, 1845, 1843, 1, 0,
		0, 0, 1846, 1847, 3, 372, 186, 0, 1847, 1849, 5, 20, 0, 0, 1848, 1850,
		3, 512, 256, 0, 1849, 1848, 1, 0, 0, 0, 1849, 1850, 1, 0, 0, 0, 1850, 1852,
		1, 0, 0, 0, 1851, 1853, 3, 244, 122, 0, 1852, 1851, 1, 0, 0, 0, 1852, 1853,
		1, 0, 0, 0, 1853, 1863, 1, 0, 0, 0, 1854, 1855, 3, 326, 163, 0, 1855, 1857,
		5, 20, 0, 0, 1856, 1858, 3, 512, 256, 0, 1857, 1856, 1, 0, 0, 0, 1857,
		1858, 1, 0, 0, 0, 1858, 1860, 1, 0, 0, 0, 1859, 1861, 3, 244, 122, 0, 1860,
		1859, 1, 0, 0, 0, 1860, 1861, 1, 0, 0, 0, 1861, 1863, 1, 0, 0, 0, 1862,
		1846, 1, 0, 0, 0, 1862, 1854, 1, 0, 0, 0, 1863, 243, 1, 0, 0, 0, 1864,
		1865, 5, 56, 0, 0, 1865, 1908, 3, 646, 323, 0, 1866, 1908, 3, 646, 323,
		0, 1867, 1868, 5, 56, 0, 0, 1868, 1869, 3, 646, 323, 0, 1869, 1871, 3,
		362, 181, 0, 1870, 1872, 3, 246, 123, 0, 1871, 1870, 1, 0, 0, 0, 1871,
		1872, 1, 0, 0, 0, 1872, 1908, 1, 0, 0, 0, 1873, 1874, 5, 56, 0, 0, 1874,
		1875, 3, 646, 323, 0, 1875, 1877, 3, 346, 173, 0, 1876, 1878, 3, 246, 123,
		0, 1877, 1876, 1, 0, 0, 0, 1877, 1878, 1, 0, 0, 0, 1878, 1908, 1, 0, 0,
		0, 1879, 1880, 5, 56, 0, 0, 1880, 1881, 3, 646, 323, 0, 1881, 1882, 3,
		344, 172, 0, 1882, 1883, 6, 122, -1, 0, 1883, 1908, 1, 0, 0, 0, 1884, 1885,
		3, 646, 323, 0, 1885, 1886, 3, 362, 181, 0, 1886, 1887, 3, 246, 123, 0,
		1887, 1908, 1, 0, 0, 0, 1888, 1889, 3, 646, 323, 0, 1889, 1890, 3, 346,
		173, 0, 1890, 1891, 3, 246, 123, 0, 1891, 1908, 1, 0, 0, 0, 1892, 1893,
		3, 646, 323, 0, 1893, 1894, 3, 344, 172, 0, 1894, 1895, 6, 122, -1, 0,
		1895, 1908, 1, 0, 0, 0, 1896, 1898, 3, 362, 181, 0, 1897, 1899, 3, 246,
		123, 0, 1898, 1897, 1, 0, 0, 0, 1898, 1899, 1, 0, 0, 0, 1899, 1908, 1,
		0, 0, 0, 1900, 1902, 3, 346, 173, 0, 1901, 1903, 3, 246, 123, 0, 1902,
		1901, 1, 0, 0, 0, 1902, 1903, 1, 0, 0, 0, 1903, 1908, 1, 0, 0, 0, 1904,
		1905, 3, 344, 172, 0, 1905, 1906, 6, 122, -1, 0, 1906, 1908, 1, 0, 0, 0,
		1907, 1864, 1, 0, 0, 0, 1907, 1866, 1, 0, 0, 0, 1907, 1867, 1, 0, 0, 0,
		1907, 1873, 1, 0, 0, 0, 1907, 1879, 1, 0, 0, 0, 1907, 1884, 1, 0, 0, 0,
		1907, 1888, 1, 0, 0, 0, 1907, 1892, 1, 0, 0, 0, 1907, 1896, 1, 0, 0, 0,
		1907, 1900, 1, 0, 0, 0, 1907, 1904, 1, 0, 0, 0, 1908, 245, 1, 0, 0, 0,
		1909, 1911, 5, 56, 0, 0, 1910, 1909, 1, 0, 0, 0, 1910, 1911, 1, 0, 0, 0,
		1911, 1912, 1, 0, 0, 0, 1912, 1913, 3, 646, 323, 0, 1913, 247, 1, 0, 0,
		0, 1914, 1915, 5, 97, 0, 0, 1915, 1916, 3, 646, 323, 0, 1916, 1917, 5,
		19, 0, 0, 1917, 1918, 3, 258, 129, 0, 1918, 1919, 5, 20, 0, 0, 1919, 1920,
		3, 250, 125, 0, 1920, 249, 1, 0, 0, 0, 1921, 1941, 3, 252, 126, 0, 1922,
		1923, 5, 102, 0, 0, 1923, 1925, 5, 285, 0, 0, 1924, 1926, 3, 252, 126,
		0, 1925, 1924, 1, 0, 0, 0, 1925, 1926, 1, 0, 0, 0, 1926, 1941, 1, 0, 0,
		0, 1927, 1928, 5, 102, 0, 0, 1928, 1929, 5, 285, 0, 0, 1929, 1931, 3, 646,
		323, 0, 1930, 1932, 3, 252, 126, 0, 1931, 1930, 1, 0, 0, 0, 1931, 1932,
		1, 0, 0, 0, 1932, 1941, 1, 0, 0, 0, 1933, 1934, 5, 102, 0, 0, 1934, 1935,
		5, 285, 0, 0, 1935, 1936, 5, 56, 0, 0, 1936, 1938, 3, 646, 323, 0, 1937,
		1939, 3, 252, 126, 0, 1938, 1937, 1, 0, 0, 0, 1938, 1939, 1, 0, 0, 0, 1939,
		1941, 1, 0, 0, 0, 1940, 1921, 1, 0, 0, 0, 1940, 1922, 1, 0, 0, 0, 1940,
		1927, 1, 0, 0, 0, 1940, 1933, 1, 0, 0, 0, 1941, 251, 1, 0, 0, 0, 1942,
		1943, 5, 237, 0, 0, 1943, 1944, 5, 19, 0, 0, 1944, 1945, 3, 254, 127, 0,
		1945, 1946, 5, 20, 0, 0, 1946, 253, 1, 0, 0, 0, 1947, 1950, 3, 256, 128,
		0, 1948, 1950, 3, 198, 99, 0, 1949, 1947, 1, 0, 0, 0, 1949, 1948, 1, 0,
		0, 0, 1950, 255, 1, 0, 0, 0, 1951, 1952, 5, 299, 0, 0, 1952, 1953, 5, 19,
		0, 0, 1953, 1954, 3, 198, 99, 0, 1954, 1955, 5, 56, 0, 0, 1955, 1957, 3,
		616, 308, 0, 1956, 1958, 3, 566, 283, 0, 1957, 1956, 1, 0, 0, 0, 1957,
		1958, 1, 0, 0, 0, 1958, 1959, 1, 0, 0, 0, 1959, 1960, 5, 20, 0, 0, 1960,
		257, 1, 0, 0, 0, 1961, 1962, 3, 260, 130, 0, 1962, 1964, 3, 262, 131, 0,
		1963, 1965, 3, 264, 132, 0, 1964, 1963, 1, 0, 0, 0, 1964, 1965, 1, 0, 0,
		0, 1965, 259, 1, 0, 0, 0, 1966, 1969, 3, 254, 127, 0, 1967, 1969, 3, 670,
		335, 0, 1968, 1966, 1, 0, 0, 0, 1968, 1967, 1, 0, 0, 0, 1969, 261, 1, 0,
		0, 0, 1970, 1971, 7, 7, 0, 0, 1971, 263, 1, 0, 0, 0, 1972, 1973, 5, 310,
		0, 0, 1973, 1974, 5, 58, 0, 0, 1974, 1979, 3, 398, 199, 0, 1975, 1976,
		5, 15, 0, 0, 1976, 1978, 3, 398, 199, 0, 1977, 1975, 1, 0, 0, 0, 1978,
		1981, 1, 0, 0, 0, 1979, 1977, 1, 0, 0, 0, 1979, 1980, 1, 0, 0, 0, 1980,
		265, 1, 0, 0, 0, 1981, 1979, 1, 0, 0, 0, 1982, 1983, 5, 324, 0, 0, 1983,
		1985, 5, 19, 0, 0, 1984, 1986, 3, 470, 235, 0, 1985, 1984, 1, 0, 0, 0,
		1985, 1986, 1, 0, 0, 0, 1986, 1987, 1, 0, 0, 0, 1987, 1988, 3, 200, 100,
		0, 1988, 1989, 5, 208, 0, 0, 1989, 1990, 3, 274, 137, 0, 1990, 1991, 5,
		220, 0, 0, 1991, 1992, 5, 19, 0, 0, 1992, 1993, 3, 268, 134, 0, 1993, 1994,
		5, 20, 0, 0, 1994, 1995, 5, 325, 0, 0, 1995, 1996, 3, 558, 279, 0, 1996,
		1998, 5, 20, 0, 0, 1997, 1999, 3, 246, 123, 0, 1998, 1997, 1, 0, 0, 0,
		1998, 1999, 1, 0, 0, 0, 1999, 267, 1, 0, 0, 0, 2000, 2001, 6, 134, -1,
		0, 2001, 2002, 3, 270, 135, 0, 2002, 2008, 1, 0, 0, 0, 2003, 2004, 10,
		1, 0, 0, 2004, 2005, 5, 23, 0, 0, 2005, 2007, 3, 270, 135, 0, 2006, 2003,
		1, 0, 0, 0, 2007, 2010, 1, 0, 0, 0, 2008, 2006, 1, 0, 0, 0, 2008, 2009,
		1, 0, 0, 0, 2009, 269, 1, 0, 0, 0, 2010, 2008, 1, 0, 0, 0, 2011, 2012,
		6, 135, -1, 0, 2012, 2013, 3, 272, 136, 0, 2013, 2018, 1, 0, 0, 0, 2014,
		2015, 10, 1, 0, 0, 2015, 2017, 3, 272, 136, 0, 2016, 2014, 1, 0, 0, 0,
		2017, 2020, 1, 0, 0, 0, 2018, 2016, 1, 0, 0, 0, 2018, 2019, 1, 0, 0, 0,
		2019, 271, 1, 0, 0, 0, 2020, 2018, 1, 0, 0, 0, 2021, 2027, 3, 646, 323,
		0, 2022, 2023, 5, 19, 0, 0, 2023, 2024, 3, 268, 134, 0, 2024, 2025, 5,
		20, 0, 0, 2025, 2027, 1, 0, 0, 0, 2026, 2021, 1, 0, 0, 0, 2026, 2022, 1,
		0, 0, 0, 2027, 273, 1, 0, 0, 0, 2028, 2033, 3, 276, 138, 0, 2029, 2030,
		5, 15, 0, 0, 2030, 2032, 3, 276, 138, 0, 2031, 2029, 1, 0, 0, 0, 2032,
		2035, 1, 0, 0, 0, 2033, 2031, 1, 0, 0, 0, 2033, 2034, 1, 0, 0, 0, 2034,
		275, 1, 0, 0, 0, 2035, 2033, 1, 0, 0, 0, 2036, 2037, 3, 398, 199, 0, 2037,
		2038, 5, 56, 0, 0, 2038, 2039, 3, 646, 323, 0, 2039, 277, 1, 0, 0, 0, 2040,
		2042, 3, 424, 212, 0, 2041, 2043, 3, 298, 149, 0, 2042, 2041, 1, 0, 0,
		0, 2042, 2043, 1, 0, 0, 0, 2043, 279, 1, 0, 0, 0, 2044, 2048, 3, 240, 120,
		0, 2045, 2047, 3, 282, 141, 0, 2046, 2045, 1, 0, 0, 0, 2047, 2050, 1, 0,
		0, 0, 2048, 2046, 1, 0, 0, 0, 2048, 2049, 1, 0, 0, 0, 2049, 281, 1, 0,
		0, 0, 2050, 2048, 1, 0, 0, 0, 2051, 2053, 3, 376, 188, 0, 2052, 2051, 1,
		0, 0, 0, 2052, 2053, 1, 0, 0, 0, 2053, 2055, 1, 0, 0, 0, 2054, 2056, 3,
		374, 187, 0, 2055, 2054, 1, 0, 0, 0, 2055, 2056, 1, 0, 0, 0, 2056, 2058,
		1, 0, 0, 0, 2057, 2059, 3, 290, 145, 0, 2058, 2057, 1, 0, 0, 0, 2058, 2059,
		1, 0, 0, 0, 2059, 2060, 1, 0, 0, 0, 2060, 2062, 5, 60, 0, 0, 2061, 2063,
		3, 512, 256, 0, 2062, 2061, 1, 0, 0, 0, 2062, 2063, 1, 0, 0, 0, 2063, 2064,
		1, 0, 0, 0, 2064, 2066, 3, 240, 120, 0, 2065, 2067, 3, 284, 142, 0, 2066,
		2065, 1, 0, 0, 0, 2066, 2067, 1, 0, 0, 0, 2067, 283, 1, 0, 0, 0, 2068,
		2070, 3, 286, 143, 0, 2069, 2068, 1, 0, 0, 0, 2070, 2071, 1, 0, 0, 0, 2071,
		2069, 1, 0, 0, 0, 2071, 2072, 1, 0, 0, 0, 2072, 285, 1, 0, 0, 0, 2073,
		2076, 3, 378, 189, 0, 2074, 2076, 3, 288, 144, 0, 2075, 2073, 1, 0, 0,
		0, 2075, 2074, 1, 0, 0, 0, 2076, 287, 1, 0, 0, 0, 2077, 2078, 5, 100, 0,
		0, 2078, 2079, 5, 19, 0, 0, 2079, 2084, 3, 646, 323, 0, 2080, 2081, 5,
		16, 0, 0, 2081, 2083, 3, 646, 323, 0, 2082, 2080, 1, 0, 0, 0, 2083, 2086,
		1, 0, 0, 0, 2084, 2082, 1, 0, 0, 0, 2084, 2085, 1, 0, 0, 0, 2085, 2087,
		1, 0, 0, 0, 2086, 2084, 1, 0, 0, 0, 2087, 2088, 5, 20, 0, 0, 2088, 289,
		1, 0, 0, 0, 2089, 2090, 7, 8, 0, 0, 2090, 291, 1, 0, 0, 0, 2091, 2093,
		3, 300, 150, 0, 2092, 2094, 3, 512, 256, 0, 2093, 2092, 1, 0, 0, 0, 2093,
		2094, 1, 0, 0, 0, 2094, 2096, 1, 0, 0, 0, 2095, 2097, 3, 298, 149, 0, 2096,
		2095, 1, 0, 0, 0, 2096, 2097, 1, 0, 0, 0, 2097, 2099, 1, 0, 0, 0, 2098,
		2100, 3, 296, 148, 0, 2099, 2098, 1, 0, 0, 0, 2099, 2100, 1, 0, 0, 0, 2100,
		2102, 1, 0, 0, 0, 2101, 2103, 3, 294, 147, 0, 2102, 2101, 1, 0, 0, 0, 2102,
		2103, 1, 0, 0, 0, 2103, 293, 1, 0, 0, 0, 2104, 2105, 5, 68, 0, 0, 2105,
		2106, 5, 95, 0, 0, 2106, 2107, 5, 114, 0, 0, 2107, 2108, 5, 56, 0, 0, 2108,
		2109, 5, 80, 0, 0, 2109, 2116, 3, 398, 199, 0, 2110, 2111, 5, 68, 0, 0,
		2111, 2112, 5, 96, 0, 0, 2112, 2113, 5, 56, 0, 0, 2113, 2114, 5, 80, 0,
		0, 2114, 2116, 3, 398, 199, 0, 2115, 2104, 1, 0, 0, 0, 2115, 2110, 1, 0,
		0, 0, 2116, 295, 1, 0, 0, 0, 2117, 2118, 5, 102, 0, 0, 2118, 2120, 5, 81,
		0, 0, 2119, 2121, 3, 246, 123, 0, 2120, 2119, 1, 0, 0, 0, 2120, 2121, 1,
		0, 0, 0, 2121, 297, 1, 0, 0, 0, 2122, 2123, 5, 56, 0, 0, 2123, 2168, 3,
		646, 323, 0, 2124, 2168, 3, 646, 323, 0, 2125, 2126, 5, 56, 0, 0, 2126,
		2127, 3, 646, 323, 0, 2127, 2129, 3, 362, 181, 0, 2128, 2130, 3, 246, 123,
		0, 2129, 2128, 1, 0, 0, 0, 2129, 2130, 1, 0, 0, 0, 2130, 2168, 1, 0, 0,
		0, 2131, 2132, 5, 56, 0, 0, 2132, 2133, 3, 646, 323, 0, 2133, 2135, 3,
		346, 173, 0, 2134, 2136, 3, 246, 123, 0, 2135, 2134, 1, 0, 0, 0, 2135,
		2136, 1, 0, 0, 0, 2136, 2168, 1, 0, 0, 0, 2137, 2138, 5, 56, 0, 0, 2138,
		2139, 3, 646, 323, 0, 2139, 2140, 3, 344, 172, 0, 2140, 2141, 6, 149, -1,
		0, 2141, 2168, 1, 0, 0, 0, 2142, 2143, 3, 646, 323, 0, 2143, 2145, 3, 362,
		181, 0, 2144, 2146, 3, 246, 123, 0, 2145, 2144, 1, 0, 0, 0, 2145, 2146,
		1, 0, 0, 0, 2146, 2168, 1, 0, 0, 0, 2147, 2148, 3, 646, 323, 0, 2148, 2150,
		3, 346, 173, 0, 2149, 2151, 3, 246, 123, 0, 2150, 2149, 1, 0, 0, 0, 2150,
		2151, 1, 0, 0, 0, 2151, 2168, 1, 0, 0, 0, 2152, 2153, 3, 646, 323, 0, 2153,
		2154, 3, 344, 172, 0, 2154, 2155, 6, 149, -1, 0, 2155, 2168, 1, 0, 0, 0,
		2156, 2158, 3, 362, 181, 0, 2157, 2159, 3, 246, 123, 0, 2158, 2157, 1,
		0, 0, 0, 2158, 2159, 1, 0, 0, 0, 2159, 2168, 1, 0, 0, 0, 2160, 2162, 3,
		346, 173, 0, 2161, 2163, 3, 246, 123, 0, 2162, 2161, 1, 0, 0, 0, 2162,
		2163, 1, 0, 0, 0, 2163, 2168, 1, 0, 0, 0, 2164, 2165, 3, 344, 172, 0, 2165,
		2166, 6, 149, -1, 0, 2166, 2168, 1, 0, 0, 0, 2167, 2122, 1, 0, 0, 0, 2167,
		2124, 1, 0, 0, 0, 2167, 2125, 1, 0, 0, 0, 2167, 2131, 1, 0, 0, 0, 2167,
		2137, 1, 0, 0, 0, 2167, 2142, 1, 0, 0, 0, 2167, 2147, 1, 0, 0, 0, 2167,
		2152, 1, 0, 0, 0, 2167, 2156, 1, 0, 0, 0, 2167, 2160, 1, 0, 0, 0, 2167,
		2164, 1, 0, 0, 0, 2168, 299, 1, 0, 0, 0, 2169, 2190, 3, 318, 159, 0, 2170,
		2190, 3, 302, 151, 0, 2171, 2172, 3, 644, 322, 0, 2172, 2173, 5, 21, 0,
		0, 2173, 2174, 6, 150, -1, 0, 2174, 2190, 1, 0, 0, 0, 2175, 2176, 3, 644,
		322, 0, 2176, 2177, 5, 16, 0, 0, 2177, 2178, 5, 19, 0, 0, 2178, 2179, 6,
		150, -1, 0, 2179, 2190, 1, 0, 0, 0, 2180, 2181, 3, 318, 159, 0, 2181, 2182,
		5, 21, 0, 0, 2182, 2183, 6, 150, -1, 0, 2183, 2190, 1, 0, 0, 0, 2184, 2185,
		3, 318, 159, 0, 2185, 2186, 5, 16, 0, 0, 2186, 2187, 5, 19, 0, 0, 2187,
		2188, 6, 150, -1, 0, 2188, 2190, 1, 0, 0, 0, 2189, 2169, 1, 0, 0, 0, 2189,
		2170, 1, 0, 0, 0, 2189, 2171, 1, 0, 0, 0, 2189, 2175, 1, 0, 0, 0, 2189,
		2180, 1, 0, 0, 0, 2189, 2184, 1, 0, 0, 0, 2190, 301, 1, 0, 0, 0, 2191,
		2194, 3, 304, 152, 0, 2192, 2194, 3, 316, 158, 0, 2193, 2191, 1, 0, 0,
		0, 2193, 2192, 1, 0, 0, 0, 2194, 303, 1, 0, 0, 0, 2195, 2198, 3, 644, 322,
		0, 2196, 2198, 3, 306, 153, 0, 2197, 2195, 1, 0, 0, 0, 2197, 2196, 1, 0,
		0, 0, 2198, 305, 1, 0, 0, 0, 2199, 2200, 6, 153, -1, 0, 2200, 2201, 3,
		308, 154, 0, 2201, 2207, 1, 0, 0, 0, 2202, 2203, 10, 1, 0, 0, 2203, 2204,
		5, 16, 0, 0, 2204, 2206, 3, 646, 323, 0, 2205, 2202, 1, 0, 0, 0, 2206,
		2209, 1, 0, 0, 0, 2207, 2205, 1, 0, 0, 0, 2207, 2208, 1, 0, 0, 0, 2208,
		307, 1, 0, 0, 0, 2209, 2207, 1, 0, 0, 0, 2210, 2211, 6, 154, -1, 0, 2211,
		2212, 3, 646, 323, 0, 2212, 2213, 5, 11, 0, 0, 2213, 2214, 3, 646, 323,
		0, 2214, 2225, 1, 0, 0, 0, 2215, 2216, 3, 646, 323, 0, 2216, 2217, 5, 11,
		0, 0, 2217, 2218, 5, 53, 0, 0, 2218, 2225, 1, 0, 0, 0, 2219, 2220, 3, 646,
		323, 0, 2220, 2221, 5, 11, 0, 0, 2221, 2222, 3, 670, 335, 0, 2222, 2223,
		3, 646, 323, 0, 2223, 2225, 1, 0, 0, 0, 2224, 2210, 1, 0, 0, 0, 2224, 2215,
		1, 0, 0, 0, 2224, 2219, 1, 0, 0, 0, 2225, 2239, 1, 0, 0, 0, 2226, 2227,
		10, 5, 0, 0, 2227, 2228, 5, 11, 0, 0, 2228, 2238, 3, 308, 154, 6, 2229,
		2230, 10, 3, 0, 0, 2230, 2231, 5, 11, 0, 0, 2231, 2238, 5, 53, 0, 0, 2232,
		2233, 10, 1, 0, 0, 2233, 2234, 5, 11, 0, 0, 2234, 2235, 3, 670, 335, 0,
		2235, 2236, 3, 646, 323, 0, 2236, 2238, 1, 0, 0, 0, 2237, 2226, 1, 0, 0,
		0, 2237, 2229, 1, 0, 0, 0, 2237, 2232, 1, 0, 0, 0, 2238, 2241, 1, 0, 0,
		0, 2239, 2237, 1, 0, 0, 0, 2239, 2240, 1, 0, 0, 0, 2240, 309, 1, 0, 0,
		0, 2241, 2239, 1, 0, 0, 0, 2242, 2243, 6, 155, -1, 0, 2243, 2244, 5, 323,
		0, 0, 2244, 2245, 3, 312, 156, 0, 2245, 2258, 1, 0, 0, 0, 2246, 2247, 10,
		2, 0, 0, 2247, 2248, 3, 314, 157, 0, 2248, 2249, 3, 312, 156, 0, 2249,
		2257, 1, 0, 0, 0, 2250, 2251, 10, 1, 0, 0, 2251, 2252, 3, 314, 157, 0,
		2252, 2253, 3, 670, 335, 0, 2253, 2254, 3, 314, 157, 0, 2254, 2255, 3,
		312, 156, 0, 2255, 2257, 1, 0, 0, 0, 2256, 2246, 1, 0, 0, 0, 2256, 2250,
		1, 0, 0, 0, 2257, 2260, 1, 0, 0, 0, 2258, 2256, 1, 0, 0, 0, 2258, 2259,
		1, 0, 0, 0, 2259, 311, 1, 0, 0, 0, 2260, 2258, 1, 0, 0, 0, 2261, 2264,
		3, 646, 323, 0, 2262, 2264, 5, 53, 0, 0, 2263, 2261, 1, 0, 0, 0, 2263,
		2262, 1, 0, 0, 0, 2264, 313, 1, 0, 0, 0, 2265, 2266, 5, 11, 0, 0, 2266,
		2267, 5, 323, 0, 0, 2267, 2268, 5, 24, 0, 0, 2268, 315, 1, 0, 0, 0, 2269,
		2276, 3, 310, 155, 0, 2270, 2271, 3, 310, 155, 0, 2271, 2272, 3, 314, 157,
		0, 2272, 2273, 3, 670, 335, 0, 2273, 2274, 3, 646, 323, 0, 2274, 2276,
		1, 0, 0, 0, 2275, 2269, 1, 0, 0, 0, 2275, 2270, 1, 0, 0, 0, 2276, 317,
		1, 0, 0, 0, 2277, 2279, 3, 320, 160, 0, 2278, 2280, 3, 322, 161, 0, 2279,
		2278, 1, 0, 0, 0, 2279, 2280, 1, 0, 0, 0, 2280, 2281, 1, 0, 0, 0, 2281,
		2282, 5, 20, 0, 0, 2282, 2288, 1, 0, 0, 0, 2283, 2284, 5, 99, 0, 0, 2284,
		2285, 5, 19, 0, 0, 2285, 2286, 5, 93, 0, 0, 2286, 2288, 6, 159, -1, 0,
		2287, 2277, 1, 0, 0, 0, 2287, 2283, 1, 0, 0, 0, 2288, 319, 1, 0, 0, 0,
		2289, 2290, 5, 99, 0, 0, 2290, 2291, 5, 19, 0, 0, 2291, 2296, 3, 324, 162,
		0, 2292, 2293, 5, 15, 0, 0, 2293, 2295, 3, 324, 162, 0, 2294, 2292, 1,
		0, 0, 0, 2295, 2298, 1, 0, 0, 0, 2296, 2294, 1, 0, 0, 0, 2296, 2297, 1,
		0, 0, 0, 2297, 321, 1, 0, 0, 0, 2298, 2296, 1, 0, 0, 0, 2299, 2300, 5,
		15, 0, 0, 2300, 2301, 3, 496, 248, 0, 2301, 323, 1, 0, 0, 0, 2302, 2304,
		3, 398, 199, 0, 2303, 2305, 3, 534, 267, 0, 2304, 2303, 1, 0, 0, 0, 2304,
		2305, 1, 0, 0, 0, 2305, 325, 1, 0, 0, 0, 2306, 2307, 3, 372, 186, 0, 2307,
		2312, 3, 328, 164, 0, 2308, 2309, 5, 15, 0, 0, 2309, 2311, 3, 328, 164,
		0, 2310, 2308, 1, 0, 0, 0, 2311, 2314, 1, 0, 0, 0, 2312, 2310, 1, 0, 0,
		0, 2312, 2313, 1, 0, 0, 0, 2313, 327, 1, 0, 0, 0, 2314, 2312, 1, 0, 0,
		0, 2315, 2346, 3, 398, 199, 0, 2316, 2346, 3, 334, 167, 0, 2317, 2346,
		3, 340, 170, 0, 2318, 2346, 3, 342, 171, 0, 2319, 2346, 3, 330, 165, 0,
		2320, 2346, 3, 496, 248, 0, 2321, 2322, 5, 19, 0, 0, 2322, 2323, 3, 340,
		170, 0, 2323, 2324, 5, 20, 0, 0, 2324, 2325, 6, 164, -1, 0, 2325, 2346,
		1, 0, 0, 0, 2326, 2327, 5, 19, 0, 0, 2327, 2328, 3, 342, 171, 0, 2328,
		2329, 5, 20, 0, 0, 2329, 2330, 6, 164, -1, 0, 2330, 2346, 1, 0, 0, 0, 2331,
		2332, 5, 19, 0, 0, 2332, 2333, 3, 330, 165, 0, 2333, 2334, 5, 20, 0, 0,
		2334, 2335, 6, 164, -1, 0, 2335, 2346, 1, 0, 0, 0, 2336, 2337, 5, 19, 0,
		0, 2337, 2338, 3, 496, 248, 0, 2338, 2339, 5, 20, 0, 0, 2339, 2340, 6,
		164, -1, 0, 2340, 2346, 1, 0, 0, 0, 2341, 2342, 5, 93, 0, 0, 2342, 2346,
		6, 164, -1, 0, 2343, 2344, 5, 102, 0, 0, 2344, 2346, 6, 164, -1, 0, 2345,
		2315, 1, 0, 0, 0, 2345, 2316, 1, 0, 0, 0, 2345, 2317, 1, 0, 0, 0, 2345,
		2318, 1, 0, 0, 0, 2345, 2319, 1, 0, 0, 0, 2345, 2320, 1, 0, 0, 0, 2345,
		2321, 1, 0, 0, 0, 2345, 2326, 1, 0, 0, 0, 2345, 2331, 1, 0, 0, 0, 2345,
		2336, 1, 0, 0, 0, 2345, 2341, 1, 0, 0, 0, 2345, 2343, 1, 0, 0, 0, 2346,
		329, 1, 0, 0, 0, 2347, 2348, 5, 144, 0, 0, 2348, 2349, 3, 332, 166, 0,
		2349, 331, 1, 0, 0, 0, 2350, 2353, 3, 644, 322, 0, 2351, 2353, 5, 322,
		0, 0, 2352, 2350, 1, 0, 0, 0, 2352, 2351, 1, 0, 0, 0, 2353, 333, 1, 0,
		0, 0, 2354, 2355, 5, 289, 0, 0, 2355, 2356, 5, 19, 0, 0, 2356, 2357, 3,
		336, 168, 0, 2357, 2358, 5, 20, 0, 0, 2358, 335, 1, 0, 0, 0, 2359, 2364,
		3, 338, 169, 0, 2360, 2361, 5, 15, 0, 0, 2361, 2363, 3, 338, 169, 0, 2362,
		2360, 1, 0, 0, 0, 2363, 2366, 1, 0, 0, 0, 2364, 2362, 1, 0, 0, 0, 2364,
		2365, 1, 0, 0, 0, 2365, 337, 1, 0, 0, 0, 2366, 2364, 1, 0, 0, 0, 2367,
		2368, 3, 646, 323, 0, 2368, 339, 1, 0, 0, 0, 2369, 2370, 5, 266, 0, 0,
		2370, 2374, 3, 242, 121, 0, 2371, 2372, 5, 266, 0, 0, 2372, 2374, 3, 644,
		322, 0, 2373, 2369, 1, 0, 0, 0, 2373, 2371, 1, 0, 0, 0, 2374, 341, 1, 0,
		0, 0, 2375, 2376, 5, 213, 0, 0, 2376, 2377, 3, 644, 322, 0, 2377, 343,
		1, 0, 0, 0, 2378, 2379, 5, 321, 0, 0, 2379, 2380, 3, 398, 199, 0, 2380,
		345, 1, 0, 0, 0, 2381, 2383, 5, 92, 0, 0, 2382, 2384, 3, 360, 180, 0, 2383,
		2382, 1, 0, 0, 0, 2383, 2384, 1, 0, 0, 0, 2384, 2385, 1, 0, 0, 0, 2385,
		2386, 5, 19, 0, 0, 2386, 2387, 3, 356, 178, 0, 2387, 2388, 5, 68, 0, 0,
		2388, 2389, 3, 644, 322, 0, 2389, 2390, 5, 71, 0, 0, 2390, 2391, 3, 348,
		174, 0, 2391, 2392, 5, 20, 0, 0, 2392, 347, 1, 0, 0, 0, 2393, 2394, 3,
		350, 175, 0, 2394, 2395, 5, 20, 0, 0, 2395, 349, 1, 0, 0, 0, 2396, 2397,
		6, 175, -1, 0, 2397, 2398, 5, 19, 0, 0, 2398, 2399, 3, 352, 176, 0, 2399,
		2405, 1, 0, 0, 0, 2400, 2401, 10, 1, 0, 0, 2401, 2402, 5, 15, 0, 0, 2402,
		2404, 3, 352, 176, 0, 2403, 2400, 1, 0, 0, 0, 2404, 2407, 1, 0, 0, 0, 2405,
		2403, 1, 0, 0, 0, 2405, 2406, 1, 0, 0, 0, 2406, 351, 1, 0, 0, 0, 2407,
		2405, 1, 0, 0, 0, 2408, 2410, 3, 356, 178, 0, 2409, 2411, 3, 354, 177,
		0, 2410, 2409, 1, 0, 0, 0, 2410, 2411, 1, 0, 0, 0, 2411, 353, 1, 0, 0,
		0, 2412, 2414, 5, 56, 0, 0, 2413, 2412, 1, 0, 0, 0, 2413, 2414, 1, 0, 0,
		0, 2414, 2415, 1, 0, 0, 0, 2415, 2421, 3, 690, 345, 0, 2416, 2418, 5, 56,
		0, 0, 2417, 2416, 1, 0, 0, 0, 2417, 2418, 1, 0, 0, 0, 2418, 2419, 1, 0,
		0, 0, 2419, 2421, 3, 682, 341, 0, 2420, 2413, 1, 0, 0, 0, 2420, 2417, 1,
		0, 0, 0, 2421, 355, 1, 0, 0, 0, 2422, 2423, 5, 19, 0, 0, 2423, 2424, 3,
		358, 179, 0, 2424, 2425, 5, 20, 0, 0, 2425, 2428, 1, 0, 0, 0, 2426, 2428,
		3, 358, 179, 0, 2427, 2422, 1, 0, 0, 0, 2427, 2426, 1, 0, 0, 0, 2428, 357,
		1, 0, 0, 0, 2429, 2434, 3, 644, 322, 0, 2430, 2431, 5, 15, 0, 0, 2431,
		2433, 3, 644, 322, 0, 2432, 2430, 1, 0, 0, 0, 2433, 2436, 1, 0, 0, 0, 2434,
		2432, 1, 0, 0, 0, 2434, 2435, 1, 0, 0, 0, 2435, 359, 1, 0, 0, 0, 2436,
		2434, 1, 0, 0, 0, 2437, 2438, 5, 67, 0, 0, 2438, 2442, 5, 79, 0, 0, 2439,
		2440, 5, 72, 0, 0, 2440, 2442, 5, 79, 0, 0, 2441, 2437, 1, 0, 0, 0, 2441,
		2439, 1, 0, 0, 0, 2442, 361, 1, 0, 0, 0, 2443, 2444, 5, 87, 0, 0, 2444,
		2445, 5, 19, 0, 0, 2445, 2446, 3, 364, 182, 0, 2446, 2447, 5, 68, 0, 0,
		2447, 2448, 3, 400, 200, 0, 2448, 2449, 5, 71, 0, 0, 2449, 2450, 5, 19,
		0, 0, 2450, 2451, 3, 368, 184, 0, 2451, 2452, 5, 20, 0, 0, 2452, 2453,
		5, 20, 0, 0, 2453, 363, 1, 0, 0, 0, 2454, 2459, 3, 366, 183, 0, 2455, 2456,
		5, 15, 0, 0, 2456, 2458, 3, 366, 183, 0, 2457, 2455, 1, 0, 0, 0, 2458,
		2461, 1, 0, 0, 0, 2459, 2457, 1, 0, 0, 0, 2459, 2460, 1, 0, 0, 0, 2460,
		365, 1, 0, 0, 0, 2461, 2459, 1, 0, 0, 0, 2462, 2464, 3, 398, 199, 0, 2463,
		2465, 3, 246, 123, 0, 2464, 2463, 1, 0, 0, 0, 2464, 2465, 1, 0, 0, 0, 2465,
		367, 1, 0, 0, 0, 2466, 2471, 3, 370, 185, 0, 2467, 2468, 5, 15, 0, 0, 2468,
		2470, 3, 370, 185, 0, 2469, 2467, 1, 0, 0, 0, 2470, 2473, 1, 0, 0, 0, 2471,
		2469, 1, 0, 0, 0, 2471, 2472, 1, 0, 0, 0, 2472, 369, 1, 0, 0, 0, 2473,
		2471, 1, 0, 0, 0, 2474, 2476, 3, 398, 199, 0, 2475, 2477, 3, 246, 123,
		0, 2476, 2475, 1, 0, 0, 0, 2476, 2477, 1, 0, 0, 0, 2477, 371, 1, 0, 0,
		0, 2478, 2482, 3, 644, 322, 0, 2479, 2480, 5, 302, 0, 0, 2480, 2482, 5,
		19, 0, 0, 2481, 2478, 1, 0, 0, 0, 2481, 2479, 1, 0, 0, 0, 2482, 373, 1,
		0, 0, 0, 2483, 2498, 5, 59, 0, 0, 2484, 2486, 5, 70, 0, 0, 2485, 2487,
		3, 186, 93, 0, 2486, 2485, 1, 0, 0, 0, 2486, 2487, 1, 0, 0, 0, 2487, 2498,
		1, 0, 0, 0, 2488, 2498, 5, 73, 0, 0, 2489, 2491, 5, 75, 0, 0, 2490, 2492,
		3, 186, 93, 0, 2491, 2490, 1, 0, 0, 0, 2491, 2492, 1, 0, 0, 0, 2492, 2498,
		1, 0, 0, 0, 2493, 2495, 5, 89, 0, 0, 2494, 2496, 3, 186, 93, 0, 2495, 2494,
		1, 0, 0, 0, 2495, 2496, 1, 0, 0, 0, 2496, 2498, 1, 0, 0, 0, 2497, 2483,
		1, 0, 0, 0, 2497, 2484, 1, 0, 0, 0, 2497, 2488, 1, 0, 0, 0, 2497, 2489,
		1, 0, 0, 0, 2497, 2493, 1, 0, 0, 0, 2498, 375, 1, 0, 0, 0, 2499, 2500,
		5, 320, 0, 0, 2500, 377, 1, 0, 0, 0, 2501, 2502, 5, 82, 0, 0, 2502, 2503,
		3, 398, 199, 0, 2503, 379, 1, 0, 0, 0, 2504, 2509, 3, 382, 191, 0, 2505,
		2506, 5, 15, 0, 0, 2506, 2508, 3, 382, 191, 0, 2507, 2505, 1, 0, 0, 0,
		2508, 2511, 1, 0, 0, 0, 2509, 2507, 1, 0, 0, 0, 2509, 2510, 1, 0, 0, 0,
		2510, 2513, 1, 0, 0, 0, 2511, 2509, 1, 0, 0, 0, 2512, 2514, 5, 15, 0, 0,
		2513, 2512, 1, 0, 0, 0, 2513, 2514, 1, 0, 0, 0, 2514, 381, 1, 0, 0, 0,
		2515, 2519, 3, 386, 193, 0, 2516, 2519, 3, 388, 194, 0, 2517, 2519, 3,
		384, 192, 0, 2518, 2515, 1, 0, 0, 0, 2518, 2516, 1, 0, 0, 0, 2518, 2517,
		1, 0, 0, 0, 2519, 383, 1, 0, 0, 0, 2520, 2522, 5, 12, 0, 0, 2521, 2523,
		3, 390, 195, 0, 2522, 2521, 1, 0, 0, 0, 2522, 2523, 1, 0, 0, 0, 2523, 385,
		1, 0, 0, 0, 2524, 2530, 3, 398, 199, 0, 2525, 2530, 3, 276, 138, 0, 2526,
		2527, 3, 398, 199, 0, 2527, 2528, 3, 646, 323, 0, 2528, 2530, 1, 0, 0,
		0, 2529, 2524, 1, 0, 0, 0, 2529, 2525, 1, 0, 0, 0, 2529, 2526, 1, 0, 0,
		0, 2530, 387, 1, 0, 0, 0, 2531, 2532, 3, 400, 200, 0, 2532, 2533, 5, 16,
		0, 0, 2533, 2535, 5, 12, 0, 0, 2534, 2536, 3, 390, 195, 0, 2535, 2534,
		1, 0, 0, 0, 2535, 2536, 1, 0, 0, 0, 2536, 389, 1, 0, 0, 0, 2537, 2543,
		3, 392, 196, 0, 2538, 2540, 3, 392, 196, 0, 2539, 2538, 1, 0, 0, 0, 2539,
		2540, 1, 0, 0, 0, 2540, 2541, 1, 0, 0, 0, 2541, 2543, 3, 394, 197, 0, 2542,
		2537, 1, 0, 0, 0, 2542, 2539, 1, 0, 0, 0, 2543, 391, 1, 0, 0, 0, 2544,
		2545, 5, 66, 0, 0, 2545, 2546, 5, 19, 0, 0, 2546, 2551, 3, 646, 323, 0,
		2547, 2548, 5, 16, 0, 0, 2548, 2550, 3, 646, 323, 0, 2549, 2547, 1, 0,
		0, 0, 2550, 2553, 1, 0, 0, 0, 2551, 2549, 1, 0, 0, 0, 2551, 2552, 1, 0,
		0, 0, 2552, 2554, 1, 0, 0, 0, 2553, 2551, 1, 0, 0, 0, 2554, 2555, 5, 20,
		0, 0, 2555, 393, 1, 0, 0, 0, 2556, 2557, 5, 91, 0, 0, 2557, 2558, 5, 19,
		0, 0, 2558, 2563, 3, 396, 198, 0, 2559, 2560, 5, 15, 0, 0, 2560, 2562,
		3, 396, 198, 0, 2561, 2559, 1, 0, 0, 0, 2562, 2565, 1, 0, 0, 0, 2563, 2561,
		1, 0, 0, 0, 2563, 2564, 1, 0, 0, 0, 2564, 2566, 1, 0, 0, 0, 2565, 2563,
		1, 0, 0, 0, 2566, 2567, 5, 20, 0, 0, 2567, 395, 1, 0, 0, 0, 2568, 2569,
		3, 398, 199, 0, 2569, 2570, 5, 56, 0, 0, 2570, 2571, 3, 646, 323, 0, 2571,
		397, 1, 0, 0, 0, 2572, 2573, 6, 199, -1, 0, 2573, 2576, 3, 400, 200, 0,
		2574, 2576, 3, 430, 215, 0, 2575, 2572, 1, 0, 0, 0, 2575, 2574, 1, 0, 0,
		0, 2576, 2582, 1, 0, 0, 0, 2577, 2578, 10, 1, 0, 0, 2578, 2579, 5, 111,
		0, 0, 2579, 2581, 3, 398, 199, 2, 2580, 2577, 1, 0, 0, 0, 2581, 2584, 1,
		0, 0, 0, 2582, 2580, 1, 0, 0, 0, 2582, 2583, 1, 0, 0, 0, 2583, 399, 1,
		0, 0, 0, 2584, 2582, 1, 0, 0, 0, 2585, 2586, 6, 200, -1, 0, 2586, 2622,
		3, 686, 343, 0, 2587, 2622, 3, 688, 344, 0, 2588, 2622, 3, 690, 345, 0,
		2589, 2622, 3, 684, 342, 0, 2590, 2622, 3, 682, 341, 0, 2591, 2622, 3,
		678, 339, 0, 2592, 2622, 3, 674, 337, 0, 2593, 2622, 3, 672, 336, 0, 2594,
		2622, 3, 670, 335, 0, 2595, 2622, 3, 666, 333, 0, 2596, 2622, 3, 612, 306,
		0, 2597, 2622, 3, 624, 312, 0, 2598, 2622, 3, 622, 311, 0, 2599, 2622,
		3, 606, 303, 0, 2600, 2622, 3, 598, 299, 0, 2601, 2622, 3, 584, 292, 0,
		2602, 2622, 3, 582, 291, 0, 2603, 2622, 3, 580, 290, 0, 2604, 2622, 3,
		572, 286, 0, 2605, 2622, 3, 570, 285, 0, 2606, 2622, 3, 562, 281, 0, 2607,
		2622, 3, 556, 278, 0, 2608, 2622, 3, 546, 273, 0, 2609, 2622, 3, 452, 226,
		0, 2610, 2622, 3, 450, 225, 0, 2611, 2622, 3, 646, 323, 0, 2612, 2622,
		3, 440, 220, 0, 2613, 2622, 3, 438, 219, 0, 2614, 2615, 5, 109, 0, 0, 2615,
		2622, 3, 400, 200, 23, 2616, 2617, 3, 406, 203, 0, 2617, 2618, 3, 400,
		200, 3, 2618, 2622, 1, 0, 0, 0, 2619, 2622, 3, 426, 213, 0, 2620, 2622,
		3, 424, 212, 0, 2621, 2585, 1, 0, 0, 0, 2621, 2587, 1, 0, 0, 0, 2621, 2588,
		1, 0, 0, 0, 2621, 2589, 1, 0, 0, 0, 2621, 2590, 1, 0, 0, 0, 2621, 2591,
		1, 0, 0, 0, 2621, 2592, 1, 0, 0, 0, 2621, 2593, 1, 0, 0, 0, 2621, 2594,
		1, 0, 0, 0, 2621, 2595, 1, 0, 0, 0, 2621, 2596, 1, 0, 0, 0, 2621, 2597,
		1, 0, 0, 0, 2621, 2598, 1, 0, 0, 0, 2621, 2599, 1, 0, 0, 0, 2621, 2600,
		1, 0, 0, 0, 2621, 2601, 1, 0, 0, 0, 2621, 2602, 1, 0, 0, 0, 2621, 2603,
		1, 0, 0, 0, 2621, 2604, 1, 0, 0, 0, 2621, 2605, 1, 0, 0, 0, 2621, 2606,
		1, 0, 0, 0, 2621, 2607, 1, 0, 0, 0, 2621, 2608, 1, 0, 0, 0, 2621, 2609,
		1, 0, 0, 0, 2621, 2610, 1, 0, 0, 0, 2621, 2611, 1, 0, 0, 0, 2621, 2612,
		1, 0, 0, 0, 2621, 2613, 1, 0, 0, 0, 2621, 2614, 1, 0, 0, 0, 2621, 2616,
		1, 0, 0, 0, 2621, 2619, 1, 0, 0, 0, 2621, 2620, 1, 0, 0, 0, 2622, 2730,
		1, 0, 0, 0, 2623, 2624, 10, 20, 0, 0, 2624, 2625, 3, 436, 218, 0, 2625,
		2626, 3, 400, 200, 21, 2626, 2729, 1, 0, 0, 0, 2627, 2628, 10, 19, 0, 0,
		2628, 2629, 3, 422, 211, 0, 2629, 2630, 3, 400, 200, 20, 2630, 2729, 1,
		0, 0, 0, 2631, 2632, 10, 16, 0, 0, 2632, 2633, 3, 418, 209, 0, 2633, 2634,
		3, 400, 200, 0, 2634, 2635, 5, 110, 0, 0, 2635, 2636, 3, 400, 200, 17,
		2636, 2729, 1, 0, 0, 0, 2637, 2638, 10, 11, 0, 0, 2638, 2639, 3, 408, 204,
		0, 2639, 2640, 3, 400, 200, 12, 2640, 2729, 1, 0, 0, 0, 2641, 2642, 10,
		10, 0, 0, 2642, 2643, 5, 23, 0, 0, 2643, 2729, 3, 400, 200, 11, 2644, 2645,
		10, 9, 0, 0, 2645, 2646, 5, 39, 0, 0, 2646, 2729, 3, 400, 200, 10, 2647,
		2648, 10, 8, 0, 0, 2648, 2649, 5, 40, 0, 0, 2649, 2729, 3, 400, 200, 9,
		2650, 2651, 10, 7, 0, 0, 2651, 2652, 5, 41, 0, 0, 2652, 2729, 3, 400, 200,
		8, 2653, 2654, 10, 6, 0, 0, 2654, 2655, 3, 410, 205, 0, 2655, 2656, 3,
		400, 200, 7, 2656, 2729, 1, 0, 0, 0, 2657, 2658, 10, 5, 0, 0, 2658, 2659,
		3, 412, 206, 0, 2659, 2660, 3, 400, 200, 6, 2660, 2729, 1, 0, 0, 0, 2661,
		2662, 10, 4, 0, 0, 2662, 2663, 3, 414, 207, 0, 2663, 2664, 3, 400, 200,
		5, 2664, 2729, 1, 0, 0, 0, 2665, 2666, 10, 26, 0, 0, 2666, 2667, 5, 21,
		0, 0, 2667, 2668, 3, 398, 199, 0, 2668, 2669, 5, 22, 0, 0, 2669, 2729,
		1, 0, 0, 0, 2670, 2671, 10, 25, 0, 0, 2671, 2672, 5, 16, 0, 0, 2672, 2673,
		5, 19, 0, 0, 2673, 2674, 3, 644, 322, 0, 2674, 2675, 5, 20, 0, 0, 2675,
		2729, 1, 0, 0, 0, 2676, 2677, 10, 24, 0, 0, 2677, 2678, 5, 16, 0, 0, 2678,
		2729, 3, 646, 323, 0, 2679, 2680, 10, 22, 0, 0, 2680, 2681, 3, 436, 218,
		0, 2681, 2683, 3, 434, 217, 0, 2682, 2684, 3, 512, 256, 0, 2683, 2682,
		1, 0, 0, 0, 2683, 2684, 1, 0, 0, 0, 2684, 2685, 1, 0, 0, 0, 2685, 2686,
		3, 318, 159, 0, 2686, 2729, 1, 0, 0, 0, 2687, 2688, 10, 21, 0, 0, 2688,
		2689, 3, 436, 218, 0, 2689, 2691, 3, 434, 217, 0, 2690, 2692, 3, 512, 256,
		0, 2691, 2690, 1, 0, 0, 0, 2691, 2692, 1, 0, 0, 0, 2692, 2693, 1, 0, 0,
		0, 2693, 2694, 3, 428, 214, 0, 2694, 2729, 1, 0, 0, 0, 2695, 2696, 10,
		18, 0, 0, 2696, 2698, 3, 420, 210, 0, 2697, 2699, 3, 512, 256, 0, 2698,
		2697, 1, 0, 0, 0, 2698, 2699, 1, 0, 0, 0, 2699, 2700, 1, 0, 0, 0, 2700,
		2701, 3, 318, 159, 0, 2701, 2702, 6, 200, -1, 0, 2702, 2729, 1, 0, 0, 0,
		2703, 2704, 10, 17, 0, 0, 2704, 2706, 3, 420, 210, 0, 2705, 2707, 3, 512,
		256, 0, 2706, 2705, 1, 0, 0, 0, 2706, 2707, 1, 0, 0, 0, 2707, 2708, 1,
		0, 0, 0, 2708, 2709, 3, 404, 202, 0, 2709, 2729, 1, 0, 0, 0, 2710, 2711,
		10, 15, 0, 0, 2711, 2712, 3, 418, 209, 0, 2712, 2713, 3, 400, 200, 0, 2713,
		2714, 5, 111, 0, 0, 2714, 2715, 6, 200, -1, 0, 2715, 2729, 1, 0, 0, 0,
		2716, 2717, 10, 14, 0, 0, 2717, 2718, 3, 416, 208, 0, 2718, 2719, 5, 277,
		0, 0, 2719, 2729, 1, 0, 0, 0, 2720, 2721, 10, 13, 0, 0, 2721, 2722, 3,
		416, 208, 0, 2722, 2723, 3, 686, 343, 0, 2723, 2729, 1, 0, 0, 0, 2724,
		2725, 10, 12, 0, 0, 2725, 2726, 3, 416, 208, 0, 2726, 2727, 3, 688, 344,
		0, 2727, 2729, 1, 0, 0, 0, 2728, 2623, 1, 0, 0, 0, 2728, 2627, 1, 0, 0,
		0, 2728, 2631, 1, 0, 0, 0, 2728, 2637, 1, 0, 0, 0, 2728, 2641, 1, 0, 0,
		0, 2728, 2644, 1, 0, 0, 0, 2728, 2647, 1, 0, 0, 0, 2728, 2650, 1, 0, 0,
		0, 2728, 2653, 1, 0, 0, 0, 2728, 2657, 1, 0, 0, 0, 2728, 2661, 1, 0, 0,
		0, 2728, 2665, 1, 0, 0, 0, 2728, 2670, 1, 0, 0, 0, 2728, 2676, 1, 0, 0,
		0, 2728, 2679, 1, 0, 0, 0, 2728, 2687, 1, 0, 0, 0, 2728, 2695, 1, 0, 0,
		0, 2728, 2703, 1, 0, 0, 0, 2728, 2710, 1, 0, 0, 0, 2728, 2716, 1, 0, 0,
		0, 2728, 2720, 1, 0, 0, 0, 2728, 2724, 1, 0, 0, 0, 2729, 2732, 1, 0, 0,
		0, 2730, 2728, 1, 0, 0, 0, 2730, 2731, 1, 0, 0, 0, 2731, 401, 1, 0, 0,
		0, 2732, 2730, 1, 0, 0, 0, 2733, 2883, 3, 426, 213, 0, 2734, 2883, 3, 686,
		343, 0, 2735, 2883, 3, 688, 344, 0, 2736, 2883, 3, 690, 345, 0, 2737, 2883,
		3, 684, 342, 0, 2738, 2883, 3, 682, 341, 0, 2739, 2883, 3, 678, 339, 0,
		2740, 2883, 3, 674, 337, 0, 2741, 2883, 3, 672, 336, 0, 2742, 2883, 3,
		670, 335, 0, 2743, 2883, 3, 666, 333, 0, 2744, 2883, 3, 612, 306, 0, 2745,
		2883, 3, 624, 312, 0, 2746, 2883, 3, 622, 311, 0, 2747, 2883, 3, 606, 303,
		0, 2748, 2883, 3, 598, 299, 0, 2749, 2883, 3, 584, 292, 0, 2750, 2883,
		3, 582, 291, 0, 2751, 2883, 3, 580, 290, 0, 2752, 2883, 3, 572, 286, 0,
		2753, 2883, 3, 570, 285, 0, 2754, 2883, 3, 562, 281, 0, 2755, 2883, 3,
		556, 278, 0, 2756, 2883, 3, 546, 273, 0, 2757, 2883, 3, 452, 226, 0, 2758,
		2883, 3, 450, 225, 0, 2759, 2883, 3, 646, 323, 0, 2760, 2883, 3, 440, 220,
		0, 2761, 2883, 3, 438, 219, 0, 2762, 2763, 3, 400, 200, 0, 2763, 2764,
		5, 21, 0, 0, 2764, 2765, 3, 398, 199, 0, 2765, 2766, 5, 22, 0, 0, 2766,
		2883, 1, 0, 0, 0, 2767, 2768, 3, 400, 200, 0, 2768, 2769, 5, 16, 0, 0,
		2769, 2770, 5, 19, 0, 0, 2770, 2771, 3, 644, 322, 0, 2771, 2772, 5, 20,
		0, 0, 2772, 2883, 1, 0, 0, 0, 2773, 2774, 3, 400, 200, 0, 2774, 2775, 5,
		16, 0, 0, 2775, 2776, 3, 646, 323, 0, 2776, 2883, 1, 0, 0, 0, 2777, 2778,
		5, 109, 0, 0, 2778, 2883, 3, 400, 200, 0, 2779, 2780, 3, 400, 200, 0, 2780,
		2781, 3, 436, 218, 0, 2781, 2783, 3, 434, 217, 0, 2782, 2784, 3, 512, 256,
		0, 2783, 2782, 1, 0, 0, 0, 2783, 2784, 1, 0, 0, 0, 2784, 2785, 1, 0, 0,
		0, 2785, 2786, 3, 318, 159, 0, 2786, 2883, 1, 0, 0, 0, 2787, 2788, 3, 400,
		200, 0, 2788, 2789, 3, 436, 218, 0, 2789, 2791, 3, 434, 217, 0, 2790, 2792,
		3, 512, 256, 0, 2791, 2790, 1, 0, 0, 0, 2791, 2792, 1, 0, 0, 0, 2792, 2793,
		1, 0, 0, 0, 2793, 2794, 3, 428, 214, 0, 2794, 2883, 1, 0, 0, 0, 2795, 2796,
		3, 400, 200, 0, 2796, 2797, 3, 436, 218, 0, 2797, 2798, 3, 400, 200, 0,
		2798, 2883, 1, 0, 0, 0, 2799, 2800, 3, 400, 200, 0, 2800, 2801, 3, 422,
		211, 0, 2801, 2802, 3, 400, 200, 0, 2802, 2883, 1, 0, 0, 0, 2803, 2804,
		3, 400, 200, 0, 2804, 2806, 3, 420, 210, 0, 2805, 2807, 3, 512, 256, 0,
		2806, 2805, 1, 0, 0, 0, 2806, 2807, 1, 0, 0, 0, 2807, 2808, 1, 0, 0, 0,
		2808, 2809, 3, 318, 159, 0, 2809, 2810, 6, 201, -1, 0, 2810, 2883, 1, 0,
		0, 0, 2811, 2812, 3, 400, 200, 0, 2812, 2814, 3, 420, 210, 0, 2813, 2815,
		3, 512, 256, 0, 2814, 2813, 1, 0, 0, 0, 2814, 2815, 1, 0, 0, 0, 2815, 2816,
		1, 0, 0, 0, 2816, 2817, 3, 404, 202, 0, 2817, 2883, 1, 0, 0, 0, 2818, 2819,
		3, 400, 200, 0, 2819, 2820, 3, 418, 209, 0, 2820, 2821, 3, 400, 200, 0,
		2821, 2822, 5, 110, 0, 0, 2822, 2823, 3, 400, 200, 0, 2823, 2883, 1, 0,
		0, 0, 2824, 2825, 3, 400, 200, 0, 2825, 2826, 3, 418, 209, 0, 2826, 2827,
		3, 400, 200, 0, 2827, 2828, 5, 111, 0, 0, 2828, 2829, 6, 201, -1, 0, 2829,
		2883, 1, 0, 0, 0, 2830, 2831, 3, 400, 200, 0, 2831, 2832, 3, 416, 208,
		0, 2832, 2833, 5, 277, 0, 0, 2833, 2883, 1, 0, 0, 0, 2834, 2835, 3, 400,
		200, 0, 2835, 2836, 3, 416, 208, 0, 2836, 2837, 3, 686, 343, 0, 2837, 2883,
		1, 0, 0, 0, 2838, 2839, 3, 400, 200, 0, 2839, 2840, 3, 416, 208, 0, 2840,
		2841, 3, 688, 344, 0, 2841, 2883, 1, 0, 0, 0, 2842, 2843, 3, 400, 200,
		0, 2843, 2844, 3, 408, 204, 0, 2844, 2845, 3, 400, 200, 0, 2845, 2883,
		1, 0, 0, 0, 2846, 2847, 3, 400, 200, 0, 2847, 2848, 5, 23, 0, 0, 2848,
		2849, 3, 400, 200, 0, 2849, 2883, 1, 0, 0, 0, 2850, 2851, 3, 400, 200,
		0, 2851, 2852, 5, 39, 0, 0, 2852, 2853, 3, 400, 200, 0, 2853, 2883, 1,
		0, 0, 0, 2854, 2855, 3, 400, 200, 0, 2855, 2856, 5, 40, 0, 0, 2856, 2857,
		3, 400, 200, 0, 2857, 2883, 1, 0, 0, 0, 2858, 2859, 3, 400, 200, 0, 2859,
		2860, 5, 41, 0, 0, 2860, 2861, 3, 400, 200, 0, 2861, 2883, 1, 0, 0, 0,
		2862, 2863, 3, 400, 200, 0, 2863, 2864, 3, 410, 205, 0, 2864, 2865, 3,
		400, 200, 0, 2865, 2883, 1, 0, 0, 0, 2866, 2867, 3, 400, 200, 0, 2867,
		2868, 3, 412, 206, 0, 2868, 2869, 3, 400, 200, 0, 2869, 2883, 1, 0, 0,
		0, 2870, 2871, 3, 400, 200, 0, 2871, 2872, 3, 414, 207, 0, 2872, 2873,
		3, 400, 200, 0, 2873, 2883, 1, 0, 0, 0, 2874, 2875, 3, 406, 203, 0, 2875,
		2876, 3, 400, 200, 0, 2876, 2883, 1, 0, 0, 0, 2877, 2883, 3, 430, 215,
		0, 2878, 2879, 3, 398, 199, 0, 2879, 2880, 5, 111, 0, 0, 2880, 2881, 3,
		398, 199, 0, 2881, 2883, 1, 0, 0, 0, 2882, 2733, 1, 0, 0, 0, 2882, 2734,
		1, 0, 0, 0, 2882, 2735, 1, 0, 0, 0, 2882, 2736, 1, 0, 0, 0, 2882, 2737,
		1, 0, 0, 0, 2882, 2738, 1, 0, 0, 0, 2882, 2739, 1, 0, 0, 0, 2882, 2740,
		1, 0, 0, 0, 2882, 2741, 1, 0, 0, 0, 2882, 2742, 1, 0, 0, 0, 2882, 2743,
		1, 0, 0, 0, 2882, 2744, 1, 0, 0, 0, 2882, 2745, 1, 0, 0, 0, 2882, 2746,
		1, 0, 0, 0, 2882, 2747, 1, 0, 0, 0, 2882, 2748, 1, 0, 0, 0, 2882, 2749,
		1, 0, 0, 0, 2882, 2750, 1, 0, 0, 0, 2882, 2751, 1, 0, 0, 0, 2882, 2752,
		1, 0, 0, 0, 2882, 2753, 1, 0, 0, 0, 2882, 2754, 1, 0, 0, 0, 2882, 2755,
		1, 0, 0, 0, 2882, 2756, 1, 0, 0, 0, 2882, 2757, 1, 0, 0, 0, 2882, 2758,
		1, 0, 0, 0, 2882, 2759, 1, 0, 0, 0, 2882, 2760, 1, 0, 0, 0, 2882, 2761,
		1, 0, 0, 0, 2882, 2762, 1, 0, 0, 0, 2882, 2767, 1, 0, 0, 0, 2882, 2773,
		1, 0, 0, 0, 2882, 2777, 1, 0, 0, 0, 2882, 2779, 1, 0, 0, 0, 2882, 2787,
		1, 0, 0, 0, 2882, 2795, 1, 0, 0, 0, 2882, 2799, 1, 0, 0, 0, 2882, 2803,
		1, 0, 0, 0, 2882, 2811, 1, 0, 0, 0, 2882, 2818, 1, 0, 0, 0, 2882, 2824,
		1, 0, 0, 0, 2882, 2830, 1, 0, 0, 0, 2882, 2834, 1, 0, 0, 0, 2882, 2838,
		1, 0, 0, 0, 2882, 2842, 1, 0, 0, 0, 2882, 2846, 1, 0, 0, 0, 2882, 2850,
		1, 0, 0, 0, 2882, 2854, 1, 0, 0, 0, 2882, 2858, 1, 0, 0, 0, 2882, 2862,
		1, 0, 0, 0, 2882, 2866, 1, 0, 0, 0, 2882, 2870, 1, 0, 0, 0, 2882, 2874,
		1, 0, 0, 0, 2882, 2877, 1, 0, 0, 0, 2882, 2878, 1, 0, 0, 0, 2883, 403,
		1, 0, 0, 0, 2884, 2893, 3, 424, 212, 0, 2885, 2886, 5, 19, 0, 0, 2886,
		2887, 3, 402, 201, 0, 2887, 2888, 5, 20, 0, 0, 2888, 2893, 1, 0, 0, 0,
		2889, 2890, 3, 432, 216, 0, 2890, 2891, 5, 20, 0, 0, 2891, 2893, 1, 0,
		0, 0, 2892, 2884, 1, 0, 0, 0, 2892, 2885, 1, 0, 0, 0, 2892, 2889, 1, 0,
		0, 0, 2893, 405, 1, 0, 0, 0, 2894, 2895, 7, 9, 0, 0, 2895, 407, 1, 0, 0,
		0, 2896, 2897, 7, 10, 0, 0, 2897, 409, 1, 0, 0, 0, 2898, 2899, 7, 11, 0,
		0, 2899, 411, 1, 0, 0, 0, 2900, 2901, 7, 12, 0, 0, 2901, 413, 1, 0, 0,
		0, 2902, 2903, 7, 13, 0, 0, 2903, 415, 1, 0, 0, 0, 2904, 2906, 5, 334,
		0, 0, 2905, 2907, 5, 109, 0, 0, 2906, 2905, 1, 0, 0, 0, 2906, 2907, 1,
		0, 0, 0, 2907, 417, 1, 0, 0, 0, 2908, 2910, 5, 109, 0, 0, 2909, 2908, 1,
		0, 0, 0, 2909, 2910, 1, 0, 0, 0, 2910, 2911, 1, 0, 0, 0, 2911, 2912, 5,
		315, 0, 0, 2912, 419, 1, 0, 0, 0, 2913, 2915, 5, 109, 0, 0, 2914, 2913,
		1, 0, 0, 0, 2914, 2915, 1, 0, 0, 0, 2915, 2916, 1, 0, 0, 0, 2916, 2917,
		5, 71, 0, 0, 2917, 421, 1, 0, 0, 0, 2918, 2920, 5, 334, 0, 0, 2919, 2921,
		5, 109, 0, 0, 2920, 2919, 1, 0, 0, 0, 2920, 2921, 1, 0, 0, 0, 2921, 2922,
		1, 0, 0, 0, 2922, 2923, 5, 64, 0, 0, 2923, 2924, 5, 69, 0, 0, 2924, 423,
		1, 0, 0, 0, 2925, 2926, 5, 19, 0, 0, 2926, 2927, 3, 152, 76, 0, 2927, 2928,
		5, 20, 0, 0, 2928, 425, 1, 0, 0, 0, 2929, 2930, 5, 19, 0, 0, 2930, 2931,
		3, 402, 201, 0, 2931, 2932, 5, 20, 0, 0, 2932, 427, 1, 0, 0, 0, 2933, 2939,
		3, 424, 212, 0, 2934, 2939, 3, 426, 213, 0, 2935, 2936, 3, 432, 216, 0,
		2936, 2937, 5, 20, 0, 0, 2937, 2939, 1, 0, 0, 0, 2938, 2933, 1, 0, 0, 0,
		2938, 2934, 1, 0, 0, 0, 2938, 2935, 1, 0, 0, 0, 2939, 429, 1, 0, 0, 0,
		2940, 2941, 3, 400, 200, 0, 2941, 2942, 5, 110, 0, 0, 2942, 2947, 3, 400,
		200, 0, 2943, 2944, 5, 110, 0, 0, 2944, 2946, 3, 400, 200, 0, 2945, 2943,
		1, 0, 0, 0, 2946, 2949, 1, 0, 0, 0, 2947, 2945, 1, 0, 0, 0, 2947, 2948,
		1, 0, 0, 0, 2948, 431, 1, 0, 0, 0, 2949, 2947, 1, 0, 0, 0, 2950, 2951,
		5, 19, 0, 0, 2951, 2952, 3, 398, 199, 0, 2952, 2953, 5, 15, 0, 0, 2953,
		2958, 3, 398, 199, 0, 2954, 2955, 5, 15, 0, 0, 2955, 2957, 3, 398, 199,
		0, 2956, 2954, 1, 0, 0, 0, 2957, 2960, 1, 0, 0, 0, 2958, 2956, 1, 0, 0,
		0, 2958, 2959, 1, 0, 0, 0, 2959, 433, 1, 0, 0, 0, 2960, 2958, 1, 0, 0,
		0, 2961, 2962, 7, 14, 0, 0, 2962, 435, 1, 0, 0, 0, 2963, 2967, 5, 333,
		0, 0, 2964, 2965, 5, 109, 0, 0, 2965, 2967, 5, 333, 0, 0, 2966, 2963, 1,
		0, 0, 0, 2966, 2964, 1, 0, 0, 0, 2967, 437, 1, 0, 0, 0, 2968, 2969, 5,
		54, 0, 0, 2969, 2976, 3, 424, 212, 0, 2970, 2972, 5, 330, 0, 0, 2971, 2973,
		3, 512, 256, 0, 2972, 2971, 1, 0, 0, 0, 2972, 2973, 1, 0, 0, 0, 2973, 2974,
		1, 0, 0, 0, 2974, 2976, 3, 424, 212, 0, 2975, 2968, 1, 0, 0, 0, 2975, 2970,
		1, 0, 0, 0, 2976, 439, 1, 0, 0, 0, 2977, 2978, 3, 442, 221, 0, 2978, 2979,
		5, 20, 0, 0, 2979, 2987, 1, 0, 0, 0, 2980, 2981, 3, 448, 224, 0, 2981,
		2982, 5, 20, 0, 0, 2982, 2987, 1, 0, 0, 0, 2983, 2984, 3, 446, 223, 0,
		2984, 2985, 5, 20, 0, 0, 2985, 2987, 1, 0, 0, 0, 2986, 2977, 1, 0, 0, 0,
		2986, 2980, 1, 0, 0, 0, 2986, 2983, 1, 0, 0, 0, 2987, 441, 1, 0, 0, 0,
		2988, 2989, 3, 448, 224, 0, 2989, 2994, 3, 444, 222, 0, 2990, 2991, 5,
		15, 0, 0, 2991, 2993, 3, 444, 222, 0, 2992, 2990, 1, 0, 0, 0, 2993, 2996,
		1, 0, 0, 0, 2994, 2992, 1, 0, 0, 0, 2994, 2995, 1, 0, 0, 0, 2995, 443,
		1, 0, 0, 0, 2996, 2994, 1, 0, 0, 0, 2997, 2999, 3, 398, 199, 0, 2998, 3000,
		3, 534, 267, 0, 2999, 2998, 1, 0, 0, 0, 2999, 3000, 1, 0, 0, 0, 3000, 445,
		1, 0, 0, 0, 3001, 3002, 5, 19, 0, 0, 3002, 3003, 3, 398, 199, 0, 3003,
		3004, 5, 15, 0, 0, 3004, 3009, 3, 398, 199, 0, 3005, 3006, 5, 15, 0, 0,
		3006, 3008, 3, 398, 199, 0, 3007, 3005, 1, 0, 0, 0, 3008, 3011, 1, 0, 0,
		0, 3009, 3007, 1, 0, 0, 0, 3009, 3010, 1, 0, 0, 0, 3010, 447, 1, 0, 0,
		0, 3011, 3009, 1, 0, 0, 0, 3012, 3013, 3, 654, 327, 0, 3013, 3014, 5, 19,
		0, 0, 3014, 3018, 1, 0, 0, 0, 3015, 3016, 5, 94, 0, 0, 3016, 3018, 5, 19,
		0, 0, 3017, 3012, 1, 0, 0, 0, 3017, 3015, 1, 0, 0, 0, 3018, 449, 1, 0,
		0, 0, 3019, 3020, 5, 118, 0, 0, 3020, 3021, 3, 398, 199, 0, 3021, 3024,
		3, 646, 323, 0, 3022, 3023, 5, 329, 0, 0, 3023, 3025, 3, 646, 323, 0, 3024,
		3022, 1, 0, 0, 0, 3024, 3025, 1, 0, 0, 0, 3025, 451, 1, 0, 0, 0, 3026,
		3027, 3, 644, 322, 0, 3027, 3029, 5, 19, 0, 0, 3028, 3030, 5, 64, 0, 0,
		3029, 3028, 1, 0, 0, 0, 3029, 3030, 1, 0, 0, 0, 3030, 3031, 1, 0, 0, 0,
		3031, 3032, 3, 454, 227, 0, 3032, 3038, 1, 0, 0, 0, 3033, 3034, 3, 544,
		272, 0, 3034, 3035, 5, 19, 0, 0, 3035, 3036, 3, 454, 227, 0, 3036, 3038,
		1, 0, 0, 0, 3037, 3026, 1, 0, 0, 0, 3037, 3033, 1, 0, 0, 0, 3038, 453,
		1, 0, 0, 0, 3039, 3041, 3, 504, 252, 0, 3040, 3039, 1, 0, 0, 0, 3040, 3041,
		1, 0, 0, 0, 3041, 3043, 1, 0, 0, 0, 3042, 3044, 3, 200, 100, 0, 3043, 3042,
		1, 0, 0, 0, 3043, 3044, 1, 0, 0, 0, 3044, 3046, 1, 0, 0, 0, 3045, 3047,
		3, 502, 251, 0, 3046, 3045, 1, 0, 0, 0, 3046, 3047, 1, 0, 0, 0, 3047, 3048,
		1, 0, 0, 0, 3048, 3080, 5, 20, 0, 0, 3049, 3052, 3, 492, 246, 0, 3050,
		3052, 5, 12, 0, 0, 3051, 3049, 1, 0, 0, 0, 3051, 3050, 1, 0, 0, 0, 3052,
		3057, 1, 0, 0, 0, 3053, 3054, 5, 15, 0, 0, 3054, 3056, 3, 492, 246, 0,
		3055, 3053, 1, 0, 0, 0, 3056, 3059, 1, 0, 0, 0, 3057, 3055, 1, 0, 0, 0,
		3057, 3058, 1, 0, 0, 0, 3058, 3061, 1, 0, 0, 0, 3059, 3057, 1, 0, 0, 0,
		3060, 3062, 3, 490, 245, 0, 3061, 3060, 1, 0, 0, 0, 3061, 3062, 1, 0, 0,
		0, 3062, 3064, 1, 0, 0, 0, 3063, 3065, 3, 504, 252, 0, 3064, 3063, 1, 0,
		0, 0, 3064, 3065, 1, 0, 0, 0, 3065, 3067, 1, 0, 0, 0, 3066, 3068, 3, 476,
		238, 0, 3067, 3066, 1, 0, 0, 0, 3067, 3068, 1, 0, 0, 0, 3068, 3070, 1,
		0, 0, 0, 3069, 3071, 3, 474, 237, 0, 3070, 3069, 1, 0, 0, 0, 3070, 3071,
		1, 0, 0, 0, 3071, 3073, 1, 0, 0, 0, 3072, 3074, 3, 200, 100, 0, 3073, 3072,
		1, 0, 0, 0, 3073, 3074, 1, 0, 0, 0, 3074, 3076, 1, 0, 0, 0, 3075, 3077,
		3, 502, 251, 0, 3076, 3075, 1, 0, 0, 0, 3076, 3077, 1, 0, 0, 0, 3077, 3078,
		1, 0, 0, 0, 3078, 3080, 5, 20, 0, 0, 3079, 3040, 1, 0, 0, 0, 3079, 3051,
		1, 0, 0, 0, 3080, 3082, 1, 0, 0, 0, 3081, 3083, 3, 512, 256, 0, 3082, 3081,
		1, 0, 0, 0, 3082, 3083, 1, 0, 0, 0, 3083, 3085, 1, 0, 0, 0, 3084, 3086,
		3, 472, 236, 0, 3085, 3084, 1, 0, 0, 0, 3085, 3086, 1, 0, 0, 0, 3086, 3088,
		1, 0, 0, 0, 3087, 3089, 3, 456, 228, 0, 3088, 3087, 1, 0, 0, 0, 3088, 3089,
		1, 0, 0, 0, 3089, 455, 1, 0, 0, 0, 3090, 3091, 5, 314, 0, 0, 3091, 3092,
		3, 458, 229, 0, 3092, 457, 1, 0, 0, 0, 3093, 3109, 3, 646, 323, 0, 3094,
		3096, 5, 19, 0, 0, 3095, 3097, 3, 646, 323, 0, 3096, 3095, 1, 0, 0, 0,
		3096, 3097, 1, 0, 0, 0, 3097, 3099, 1, 0, 0, 0, 3098, 3100, 3, 468, 234,
		0, 3099, 3098, 1, 0, 0, 0, 3099, 3100, 1, 0, 0, 0, 3100, 3102, 1, 0, 0,
		0, 3101, 3103, 3, 200, 100, 0, 3102, 3101, 1, 0, 0, 0, 3102, 3103, 1, 0,
		0, 0, 3103, 3105, 1, 0, 0, 0, 3104, 3106, 3, 460, 230, 0, 3105, 3104, 1,
		0, 0, 0, 3105, 3106, 1, 0, 0, 0, 3106, 3107, 1, 0, 0, 0, 3107, 3109, 5,
		20, 0, 0, 3108, 3093, 1, 0, 0, 0, 3108, 3094, 1, 0, 0, 0, 3109, 459, 1,
		0, 0, 0, 3110, 3111, 3, 466, 233, 0, 3111, 3112, 5, 315, 0, 0, 3112, 3113,
		3, 462, 231, 0, 3113, 3114, 5, 110, 0, 0, 3114, 3115, 3, 462, 231, 0, 3115,
		3120, 1, 0, 0, 0, 3116, 3117, 3, 466, 233, 0, 3117, 3118, 3, 462, 231,
		0, 3118, 3120, 1, 0, 0, 0, 3119, 3110, 1, 0, 0, 0, 3119, 3116, 1, 0, 0,
		0, 3120, 461, 1, 0, 0, 0, 3121, 3122, 5, 316, 0, 0, 3122, 3129, 3, 464,
		232, 0, 3123, 3124, 5, 317, 0, 0, 3124, 3129, 5, 247, 0, 0, 3125, 3126,
		3, 398, 199, 0, 3126, 3127, 3, 464, 232, 0, 3127, 3129, 1, 0, 0, 0, 3128,
		3121, 1, 0, 0, 0, 3128, 3123, 1, 0, 0, 0, 3128, 3125, 1, 0, 0, 0, 3129,
		463, 1, 0, 0, 0, 3130, 3131, 7, 15, 0, 0, 3131, 465, 1, 0, 0, 0, 3132,
		3133, 7, 16, 0, 0, 3133, 467, 1, 0, 0, 0, 3134, 3135, 3, 470, 235, 0, 3135,
		469, 1, 0, 0, 0, 3136, 3138, 5, 310, 0, 0, 3137, 3139, 3, 512, 256, 0,
		3138, 3137, 1, 0, 0, 0, 3138, 3139, 1, 0, 0, 0, 3139, 3140, 1, 0, 0, 0,
		3140, 3141, 5, 58, 0, 0, 3141, 3146, 3, 398, 199, 0, 3142, 3143, 5, 15,
		0, 0, 3143, 3145, 3, 398, 199, 0, 3144, 3142, 1, 0, 0, 0, 3145, 3148, 1,
		0, 0, 0, 3146, 3144, 1, 0, 0, 0, 3146, 3147, 1, 0, 0, 0, 3147, 471, 1,
		0, 0, 0, 3148, 3146, 1, 0, 0, 0, 3149, 3150, 5, 102, 0, 0, 3150, 3151,
		5, 305, 0, 0, 3151, 3152, 5, 313, 0, 0, 3152, 473, 1, 0, 0, 0, 3153, 3154,
		5, 102, 0, 0, 3154, 3155, 5, 240, 0, 0, 3155, 3156, 3, 478, 239, 0, 3156,
		475, 1, 0, 0, 0, 3157, 3158, 5, 137, 0, 0, 3158, 3159, 3, 400, 200, 0,
		3159, 3160, 5, 110, 0, 0, 3160, 3161, 3, 398, 199, 0, 3161, 477, 1, 0,
		0, 0, 3162, 3163, 3, 480, 240, 0, 3163, 479, 1, 0, 0, 0, 3164, 3165, 3,
		482, 241, 0, 3165, 3166, 5, 20, 0, 0, 3166, 3170, 1, 0, 0, 0, 3167, 3168,
		5, 19, 0, 0, 3168, 3170, 5, 20, 0, 0, 3169, 3164, 1, 0, 0, 0, 3169, 3167,
		1, 0, 0, 0, 3170, 481, 1, 0, 0, 0, 3171, 3172, 5, 19, 0, 0, 3172, 3177,
		3, 484, 242, 0, 3173, 3174, 5, 15, 0, 0, 3174, 3176, 3, 484, 242, 0, 3175,
		3173, 1, 0, 0, 0, 3176, 3179, 1, 0, 0, 0, 3177, 3175, 1, 0, 0, 0, 3177,
		3178, 1, 0, 0, 0, 3178, 483, 1, 0, 0, 0, 3179, 3177, 1, 0, 0, 0, 3180,
		3181, 3, 520, 260, 0, 3181, 3182, 3, 488, 244, 0, 3182, 3183, 3, 486, 243,
		0, 3183, 485, 1, 0, 0, 0, 3184, 3187, 5, 309, 0, 0, 3185, 3187, 3, 398,
		199, 0, 3186, 3184, 1, 0, 0, 0, 3186, 3185, 1, 0, 0, 0, 3187, 487, 1, 0,
		0, 0, 3188, 3189, 7, 17, 0, 0, 3189, 489, 1, 0, 0, 0, 3190, 3191, 5, 311,
		0, 0, 3191, 3195, 5, 79, 0, 0, 3192, 3193, 5, 312, 0, 0, 3193, 3195, 5,
		79, 0, 0, 3194, 3190, 1, 0, 0, 0, 3194, 3192, 1, 0, 0, 0, 3195, 491, 1,
		0, 0, 0, 3196, 3198, 3, 398, 199, 0, 3197, 3199, 3, 534, 267, 0, 3198,
		3197, 1, 0, 0, 0, 3198, 3199, 1, 0, 0, 0, 3199, 3206, 1, 0, 0, 0, 3200,
		3206, 3, 496, 248, 0, 3201, 3206, 3, 498, 249, 0, 3202, 3206, 3, 494, 247,
		0, 3203, 3204, 5, 93, 0, 0, 3204, 3206, 6, 246, -1, 0, 3205, 3196, 1, 0,
		0, 0, 3205, 3200, 1, 0, 0, 0, 3205, 3201, 1, 0, 0, 0, 3205, 3202, 1, 0,
		0, 0, 3205, 3203, 1, 0, 0, 0, 3206, 493, 1, 0, 0, 0, 3207, 3208, 5, 253,
		0, 0, 3208, 3209, 3, 644, 322, 0, 3209, 495, 1, 0, 0, 0, 3210, 3211, 3,
		646, 323, 0, 3211, 3212, 5, 34, 0, 0, 3212, 3213, 3, 398, 199, 0, 3213,
		3219, 1, 0, 0, 0, 3214, 3215, 3, 646, 323, 0, 3215, 3216, 5, 34, 0, 0,
		3216, 3217, 3, 498, 249, 0, 3217, 3219, 1, 0, 0, 0, 3218, 3210, 1, 0, 0,
		0, 3218, 3214, 1, 0, 0, 0, 3219, 497, 1, 0, 0, 0, 3220, 3221, 3, 500, 250,
		0, 3221, 3222, 5, 35, 0, 0, 3222, 3223, 3, 398, 199, 0, 3223, 499, 1, 0,
		0, 0, 3224, 3228, 3, 398, 199, 0, 3225, 3226, 5, 19, 0, 0, 3226, 3228,
		5, 20, 0, 0, 3227, 3224, 1, 0, 0, 0, 3227, 3225, 1, 0, 0, 0, 3228, 501,
		1, 0, 0, 0, 3229, 3230, 5, 76, 0, 0, 3230, 3231, 3, 398, 199, 0, 3231,
		3232, 5, 81, 0, 0, 3232, 3233, 3, 398, 199, 0, 3233, 3237, 1, 0, 0, 0,
		3234, 3235, 5, 76, 0, 0, 3235, 3237, 3, 398, 199, 0, 3236, 3229, 1, 0,
		0, 0, 3236, 3234, 1, 0, 0, 0, 3237, 503, 1, 0, 0, 0, 3238, 3239, 5, 304,
		0, 0, 3239, 3240, 5, 206, 0, 0, 3240, 3247, 3, 398, 199, 0, 3241, 3242,
		5, 304, 0, 0, 3242, 3243, 5, 211, 0, 0, 3243, 3244, 3, 398, 199, 0, 3244,
		3245, 3, 506, 253, 0, 3245, 3247, 1, 0, 0, 0, 3246, 3238, 1, 0, 0, 0, 3246,
		3241, 1, 0, 0, 0, 3247, 505, 1, 0, 0, 0, 3248, 3249, 3, 508, 254, 0, 3249,
		3254, 3, 524, 262, 0, 3250, 3251, 5, 15, 0, 0, 3251, 3253, 3, 524, 262,
		0, 3252, 3250, 1, 0, 0, 0, 3253, 3256, 1, 0, 0, 0, 3254, 3252, 1, 0, 0,
		0, 3254, 3255, 1, 0, 0, 0, 3255, 507, 1, 0, 0, 0, 3256, 3254, 1, 0, 0,
		0, 3257, 3259, 5, 305, 0, 0, 3258, 3260, 3, 512, 256, 0, 3259, 3258, 1,
		0, 0, 0, 3259, 3260, 1, 0, 0, 0, 3260, 3262, 1, 0, 0, 0, 3261, 3263, 3,
		510, 255, 0, 3262, 3261, 1, 0, 0, 0, 3262, 3263, 1, 0, 0, 0, 3263, 3264,
		1, 0, 0, 0, 3264, 3265, 5, 58, 0, 0, 3265, 509, 1, 0, 0, 0, 3266, 3267,
		5, 110, 0, 0, 3267, 3268, 5, 84, 0, 0, 3268, 511, 1, 0, 0, 0, 3269, 3270,
		5, 32, 0, 0, 3270, 3273, 3, 682, 341, 0, 3271, 3273, 3, 514, 257, 0, 3272,
		3269, 1, 0, 0, 0, 3272, 3271, 1, 0, 0, 0, 3273, 513, 1, 0, 0, 0, 3274,
		3275, 3, 516, 258, 0, 3275, 3276, 5, 18, 0, 0, 3276, 515, 1, 0, 0, 0, 3277,
		3281, 5, 32, 0, 0, 3278, 3279, 3, 682, 341, 0, 3279, 3280, 5, 32, 0, 0,
		3280, 3282, 1, 0, 0, 0, 3281, 3278, 1, 0, 0, 0, 3281, 3282, 1, 0, 0, 0,
		3282, 3283, 1, 0, 0, 0, 3283, 3284, 5, 17, 0, 0, 3284, 3289, 3, 518, 259,
		0, 3285, 3286, 5, 15, 0, 0, 3286, 3288, 3, 518, 259, 0, 3287, 3285, 1,
		0, 0, 0, 3288, 3291, 1, 0, 0, 0, 3289, 3287, 1, 0, 0, 0, 3289, 3290, 1,
		0, 0, 0, 3290, 517, 1, 0, 0, 0, 3291, 3289, 1, 0, 0, 0, 3292, 3293, 3,
		520, 260, 0, 3293, 3294, 5, 1, 0, 0, 3294, 3295, 3, 398, 199, 0, 3295,
		3303, 1, 0, 0, 0, 3296, 3297, 3, 520, 260, 0, 3297, 3298, 5, 16, 0, 0,
		3298, 3299, 3, 520, 260, 0, 3299, 3300, 5, 1, 0, 0, 3300, 3301, 3, 398,
		199, 0, 3301, 3303, 1, 0, 0, 0, 3302, 3292, 1, 0, 0, 0, 3302, 3296, 1,
		0, 0, 0, 3303, 519, 1, 0, 0, 0, 3304, 3307, 3, 646, 323, 0, 3305, 3307,
		3, 522, 261, 0, 3306, 3304, 1, 0, 0, 0, 3306, 3305, 1, 0, 0, 0, 3307, 521,
		1, 0, 0, 0, 3308, 3309, 7, 18, 0, 0, 3309, 523, 1, 0, 0, 0, 3310, 3311,
		5, 19, 0, 0, 3311, 3329, 5, 20, 0, 0, 3312, 3314, 3, 398, 199, 0, 3313,
		3315, 3, 534, 267, 0, 3314, 3313, 1, 0, 0, 0, 3314, 3315, 1, 0, 0, 0, 3315,
		3317, 1, 0, 0, 0, 3316, 3318, 3, 536, 268, 0, 3317, 3316, 1, 0, 0, 0, 3317,
		3318, 1, 0, 0, 0, 3318, 3329, 1, 0, 0, 0, 3319, 3320, 3, 532, 266, 0, 3320,
		3321, 5, 20, 0, 0, 3321, 3329, 1, 0, 0, 0, 3322, 3323, 3, 530, 265, 0,
		3323, 3324, 5, 20, 0, 0, 3324, 3329, 1, 0, 0, 0, 3325, 3326, 3, 526, 263,
		0, 3326, 3327, 5, 20, 0, 0, 3327, 3329, 1, 0, 0, 0, 3328, 3310, 1, 0, 0,
		0, 3328, 3312, 1, 0, 0, 0, 3328, 3319, 1, 0, 0, 0, 3328, 3322, 1, 0, 0,
		0, 3328, 3325, 1, 0, 0, 0, 3329, 525, 1, 0, 0, 0, 3330, 3331, 5, 303, 0,
		0, 3331, 3332, 5, 254, 0, 0, 3332, 3333, 5, 19, 0, 0, 3333, 3338, 3, 528,
		264, 0, 3334, 3335, 5, 15, 0, 0, 3335, 3337, 3, 528, 264, 0, 3336, 3334,
		1, 0, 0, 0, 3337, 3340, 1, 0, 0, 0, 3338, 3336, 1, 0, 0, 0, 3338, 3339,
		1, 0, 0, 0, 3339, 527, 1, 0, 0, 0, 3340, 3338, 1, 0, 0, 0, 3341, 3342,
		5, 19, 0, 0, 3342, 3351, 5, 20, 0, 0, 3343, 3351, 3, 398, 199, 0, 3344,
		3345, 3, 532, 266, 0, 3345, 3346, 5, 20, 0, 0, 3346, 3351, 1, 0, 0, 0,
		3347, 3348, 3, 530, 265, 0, 3348, 3349, 5, 20, 0, 0, 3349, 3351, 1, 0,
		0, 0, 3350, 3341, 1, 0, 0, 0, 3350, 3343, 1, 0, 0, 0, 3350, 3344, 1, 0,
		0, 0, 3350, 3347, 1, 0, 0, 0, 3351, 529, 1, 0, 0, 0, 3352, 3353, 5, 307,
		0, 0, 3353, 3358, 5, 19, 0, 0, 3354, 3355, 5, 15, 0, 0, 3355, 3357, 3,
		398, 199, 0, 3356, 3354, 1, 0, 0, 0, 3357, 3360, 1, 0, 0, 0, 3358, 3356,
		1, 0, 0, 0, 3358, 3359, 1, 0, 0, 0, 3359, 531, 1, 0, 0, 0, 3360, 3358,
		1, 0, 0, 0, 3361, 3362, 5, 306, 0, 0, 3362, 3363, 5, 19, 0, 0, 3363, 3368,
		3, 398, 199, 0, 3364, 3365, 5, 15, 0, 0, 3365, 3367, 3, 398, 199, 0, 3366,
		3364, 1, 0, 0, 0, 3367, 3370, 1, 0, 0, 0, 3368, 3366, 1, 0, 0, 0, 3368,
		3369, 1, 0, 0, 0, 3369, 533, 1, 0, 0, 0, 3370, 3368, 1, 0, 0, 0, 3371,
		3372, 5, 56, 0, 0, 3372, 3373, 3, 646, 323, 0, 3373, 535, 1, 0, 0, 0, 3374,
		3377, 3, 538, 269, 0, 3375, 3377, 3, 542, 271, 0, 3376, 3374, 1, 0, 0,
		0, 3376, 3375, 1, 0, 0, 0, 3377, 537, 1, 0, 0, 0, 3378, 3380, 3, 540, 270,
		0, 3379, 3381, 3, 542, 271, 0, 3380, 3379, 1, 0, 0, 0, 3380, 3381, 1, 0,
		0, 0, 3381, 539, 1, 0, 0, 0, 3382, 3383, 7, 19, 0, 0, 3383, 541, 1, 0,
		0, 0, 3384, 3385, 5, 79, 0, 0, 3385, 3389, 5, 173, 0, 0, 3386, 3387, 5,
		79, 0, 0, 3387, 3389, 5, 195, 0, 0, 3388, 3384, 1, 0, 0, 0, 3388, 3386,
		1, 0, 0, 0, 3389, 543, 1, 0, 0, 0, 3390, 3391, 7, 20, 0, 0, 3391, 545,
		1, 0, 0, 0, 3392, 3393, 3, 548, 274, 0, 3393, 3394, 5, 20, 0, 0, 3394,
		547, 1, 0, 0, 0, 3395, 3396, 5, 238, 0, 0, 3396, 3397, 5, 19, 0, 0, 3397,
		3398, 3, 398, 199, 0, 3398, 3399, 5, 15, 0, 0, 3399, 3404, 3, 550, 275,
		0, 3400, 3401, 5, 15, 0, 0, 3401, 3403, 3, 550, 275, 0, 3402, 3400, 1,
		0, 0, 0, 3403, 3406, 1, 0, 0, 0, 3404, 3402, 1, 0, 0, 0, 3404, 3405, 1,
		0, 0, 0, 3405, 549, 1, 0, 0, 0, 3406, 3404, 1, 0, 0, 0, 3407, 3408, 3,
		398, 199, 0, 3408, 3409, 5, 56, 0, 0, 3409, 3410, 3, 552, 276, 0, 3410,
		3416, 1, 0, 0, 0, 3411, 3412, 3, 398, 199, 0, 3412, 3413, 5, 56, 0, 0,
		3413, 3414, 3, 554, 277, 0, 3414, 3416, 1, 0, 0, 0, 3415, 3407, 1, 0, 0,
		0, 3415, 3411, 1, 0, 0, 0, 3416, 551, 1, 0, 0, 0, 3417, 3418, 6, 276, -1,
		0, 3418, 3419, 3, 646, 323, 0, 3419, 3433, 1, 0, 0, 0, 3420, 3421, 10,
		3, 0, 0, 3421, 3422, 5, 16, 0, 0, 3422, 3432, 3, 554, 277, 0, 3423, 3424,
		10, 2, 0, 0, 3424, 3425, 5, 16, 0, 0, 3425, 3432, 3, 646, 323, 0, 3426,
		3427, 10, 1, 0, 0, 3427, 3428, 5, 21, 0, 0, 3428, 3429, 3, 398, 199, 0,
		3429, 3430, 5, 22, 0, 0, 3430, 3432, 1, 0, 0, 0, 3431, 3420, 1, 0, 0, 0,
		3431, 3423, 1, 0, 0, 0, 3431, 3426, 1, 0, 0, 0, 3432, 3435, 1, 0, 0, 0,
		3433, 3431, 1, 0, 0, 0, 3433, 3434, 1, 0, 0, 0, 3434, 553, 1, 0, 0, 0,
		3435, 3433, 1, 0, 0, 0, 3436, 3451, 3, 646, 323, 0, 3437, 3438, 3, 552,
		276, 0, 3438, 3439, 5, 16, 0, 0, 3439, 3440, 3, 554, 277, 0, 3440, 3451,
		1, 0, 0, 0, 3441, 3442, 3, 552, 276, 0, 3442, 3443, 5, 16, 0, 0, 3443,
		3444, 3, 646, 323, 0, 3444, 3451, 1, 0, 0, 0, 3445, 3446, 3, 552, 276,
		0, 3446, 3447, 5, 21, 0, 0, 3447, 3448, 3, 398, 199, 0, 3448, 3449, 5,
		22, 0, 0, 3449, 3451, 1, 0, 0, 0, 3450, 3436, 1, 0, 0, 0, 3450, 3437, 1,
		0, 0, 0, 3450, 3441, 1, 0, 0, 0, 3450, 3445, 1, 0, 0, 0, 3451, 555, 1,
		0, 0, 0, 3452, 3453, 5, 102, 0, 0, 3453, 3454, 5, 19, 0, 0, 3454, 3455,
		3, 558, 279, 0, 3455, 3456, 5, 15, 0, 0, 3456, 3457, 3, 398, 199, 0, 3457,
		3458, 5, 20, 0, 0, 3458, 557, 1, 0, 0, 0, 3459, 3464, 3, 560, 280, 0, 3460,
		3461, 5, 15, 0, 0, 3461, 3463, 3, 560, 280, 0, 3462, 3460, 1, 0, 0, 0,
		3463, 3466, 1, 0, 0, 0, 3464, 3462, 1, 0, 0, 0, 3464, 3465, 1, 0, 0, 0,
		3465, 559, 1, 0, 0, 0, 3466, 3464, 1, 0, 0, 0, 3467, 3468, 3, 646, 323,
		0, 3468, 3469, 5, 56, 0, 0, 3469, 3470, 3, 398, 199, 0, 3470, 561, 1, 0,
		0, 0, 3471, 3472, 3, 564, 282, 0, 3472, 3473, 5, 20, 0, 0, 3473, 3482,
		1, 0, 0, 0, 3474, 3475, 3, 564, 282, 0, 3475, 3476, 5, 32, 0, 0, 3476,
		3477, 5, 114, 0, 0, 3477, 3478, 5, 288, 0, 0, 3478, 3479, 3, 398, 199,
		0, 3479, 3480, 5, 20, 0, 0, 3480, 3482, 1, 0, 0, 0, 3481, 3471, 1, 0, 0,
		0, 3481, 3474, 1, 0, 0, 0, 3482, 563, 1, 0, 0, 0, 3483, 3484, 5, 300, 0,
		0, 3484, 3485, 5, 19, 0, 0, 3485, 3486, 3, 398, 199, 0, 3486, 3487, 5,
		69, 0, 0, 3487, 3488, 3, 398, 199, 0, 3488, 565, 1, 0, 0, 0, 3489, 3490,
		5, 175, 0, 0, 3490, 3492, 3, 398, 199, 0, 3491, 3493, 3, 568, 284, 0, 3492,
		3491, 1, 0, 0, 0, 3492, 3493, 1, 0, 0, 0, 3493, 567, 1, 0, 0, 0, 3494,
		3495, 5, 32, 0, 0, 3495, 3496, 5, 114, 0, 0, 3496, 3497, 5, 288, 0, 0,
		3497, 3498, 3, 398, 199, 0, 3498, 569, 1, 0, 0, 0, 3499, 3500, 5, 299,
		0, 0, 3500, 3501, 5, 19, 0, 0, 3501, 3502, 5, 56, 0, 0, 3502, 3504, 3,
		616, 308, 0, 3503, 3505, 3, 566, 283, 0, 3504, 3503, 1, 0, 0, 0, 3504,
		3505, 1, 0, 0, 0, 3505, 3506, 1, 0, 0, 0, 3506, 3507, 5, 20, 0, 0, 3507,
		3526, 1, 0, 0, 0, 3508, 3509, 5, 299, 0, 0, 3509, 3510, 5, 19, 0, 0, 3510,
		3511, 5, 299, 0, 0, 3511, 3526, 6, 285, -1, 0, 3512, 3513, 5, 249, 0, 0,
		3513, 3514, 5, 19, 0, 0, 3514, 3515, 5, 56, 0, 0, 3515, 3517, 3, 616, 308,
		0, 3516, 3518, 3, 566, 283, 0, 3517, 3516, 1, 0, 0, 0, 3517, 3518, 1, 0,
		0, 0, 3518, 3519, 1, 0, 0, 0, 3519, 3520, 5, 20, 0, 0, 3520, 3526, 1, 0,
		0, 0, 3521, 3522, 5, 249, 0, 0, 3522, 3523, 5, 19, 0, 0, 3523, 3524, 5,
		249, 0, 0, 3524, 3526, 6, 285, -1, 0, 3525, 3499, 1, 0, 0, 0, 3525, 3508,
		1, 0, 0, 0, 3525, 3512, 1, 0, 0, 0, 3525, 3521, 1, 0, 0, 0, 3526, 571,
		1, 0, 0, 0, 3527, 3528, 3, 574, 287, 0, 3528, 3529, 5, 294, 0, 0, 3529,
		3536, 1, 0, 0, 0, 3530, 3531, 3, 574, 287, 0, 3531, 3532, 5, 298, 0, 0,
		3532, 3533, 3, 398, 199, 0, 3533, 3534, 5, 294, 0, 0, 3534, 3536, 1, 0,
		0, 0, 3535, 3527, 1, 0, 0, 0, 3535, 3530, 1, 0, 0, 0, 3536, 573, 1, 0,
		0, 0, 3537, 3540, 3, 578, 289, 0, 3538, 3540, 3, 576, 288, 0, 3539, 3537,
		1, 0, 0, 0, 3539, 3538, 1, 0, 0, 0, 3540, 575, 1, 0, 0, 0, 3541, 3542,
		5, 295, 0, 0, 3542, 3548, 3, 398, 199, 0, 3543, 3544, 5, 296, 0, 0, 3544,
		3545, 3, 398, 199, 0, 3545, 3546, 5, 297, 0, 0, 3546, 3547, 3, 398, 199,
		0, 3547, 3549, 1, 0, 0, 0, 3548, 3543, 1, 0, 0, 0, 3549, 3550, 1, 0, 0,
		0, 3550, 3548, 1, 0, 0, 0, 3550, 3551, 1, 0, 0, 0, 3551, 577, 1, 0, 0,
		0, 3552, 3558, 5, 295, 0, 0, 3553, 3554, 5, 296, 0, 0, 3554, 3555, 3, 398,
		199, 0, 3555, 3556, 5, 297, 0, 0, 3556, 3557, 3, 398, 199, 0, 3557, 3559,
		1, 0, 0, 0, 3558, 3553, 1, 0, 0, 0, 3559, 3560, 1, 0, 0, 0, 3560, 3558,
		1, 0, 0, 0, 3560, 3561, 1, 0, 0, 0, 3561, 579, 1, 0, 0, 0, 3562, 3563,
		3, 654, 327, 0, 3563, 3564, 3, 584, 292, 0, 3564, 3568, 1, 0, 0, 0, 3565,
		3566, 5, 94, 0, 0, 3566, 3568, 3, 584, 292, 0, 3567, 3562, 1, 0, 0, 0,
		3567, 3565, 1, 0, 0, 0, 3568, 581, 1, 0, 0, 0, 3569, 3570, 5, 293, 0, 0,
		3570, 3571, 3, 642, 321, 0, 3571, 3572, 3, 598, 299, 0, 3572, 583, 1, 0,
		0, 0, 3573, 3574, 3, 586, 293, 0, 3574, 3575, 5, 18, 0, 0, 3575, 3582,
		1, 0, 0, 0, 3576, 3577, 3, 588, 294, 0, 3577, 3578, 5, 18, 0, 0, 3578,
		3579, 5, 15, 0, 0, 3579, 3580, 5, 18, 0, 0, 3580, 3582, 1, 0, 0, 0, 3581,
		3573, 1, 0, 0, 0, 3581, 3576, 1, 0, 0, 0, 3582, 585, 1, 0, 0, 0, 3583,
		3584, 5, 18, 0, 0, 3584, 587, 1, 0, 0, 0, 3585, 3586, 6, 294, -1, 0, 3586,
		3587, 3, 586, 293, 0, 3587, 3588, 3, 590, 295, 0, 3588, 3593, 1, 0, 0,
		0, 3589, 3590, 3, 586, 293, 0, 3590, 3591, 3, 596, 298, 0, 3591, 3593,
		1, 0, 0, 0, 3592, 3585, 1, 0, 0, 0, 3592, 3589, 1, 0, 0, 0, 3593, 3604,
		1, 0, 0, 0, 3594, 3595, 10, 3, 0, 0, 3595, 3596, 5, 15, 0, 0, 3596, 3603,
		3, 590, 295, 0, 3597, 3598, 10, 2, 0, 0, 3598, 3603, 3, 590, 295, 0, 3599,
		3600, 10, 1, 0, 0, 3600, 3601, 5, 15, 0, 0, 3601, 3603, 3, 596, 298, 0,
		3602, 3594, 1, 0, 0, 0, 3602, 3597, 1, 0, 0, 0, 3602, 3599, 1, 0, 0, 0,
		3603, 3606, 1, 0, 0, 0, 3604, 3602, 1, 0, 0, 0, 3604, 3605, 1, 0, 0, 0,
		3605, 589, 1, 0, 0, 0, 3606, 3604, 1, 0, 0, 0, 3607, 3608, 3, 592, 296,
		0, 3608, 3609, 3, 594, 297, 0, 3609, 591, 1, 0, 0, 0, 3610, 3611, 3, 552,
		276, 0, 3611, 593, 1, 0, 0, 0, 3612, 3613, 5, 24, 0, 0, 3613, 3616, 3,
		398, 199, 0, 3614, 3616, 3, 584, 292, 0, 3615, 3612, 1, 0, 0, 0, 3615,
		3614, 1, 0, 0, 0, 3616, 595, 1, 0, 0, 0, 3617, 3618, 5, 19, 0, 0, 3618,
		3619, 3, 644, 322, 0, 3619, 3620, 5, 20, 0, 0, 3620, 597, 1, 0, 0, 0, 3621,
		3622, 3, 600, 300, 0, 3622, 3623, 5, 20, 0, 0, 3623, 3628, 1, 0, 0, 0,
		3624, 3625, 3, 602, 301, 0, 3625, 3626, 5, 20, 0, 0, 3626, 3628, 1, 0,
		0, 0, 3627, 3621, 1, 0, 0, 0, 3627, 3624, 1, 0, 0, 0, 3628, 599, 1, 0,
		0, 0, 3629, 3630, 3, 602, 301, 0, 3630, 3635, 3, 604, 302, 0, 3631, 3632,
		5, 15, 0, 0, 3632, 3634, 3, 604, 302, 0, 3633, 3631, 1, 0, 0, 0, 3634,
		3637, 1, 0, 0, 0, 3635, 3633, 1, 0, 0, 0, 3635, 3636, 1, 0, 0, 0, 3636,
		601, 1, 0, 0, 0, 3637, 3635, 1, 0, 0, 0, 3638, 3639, 5, 293, 0, 0, 3639,
		3640, 3, 642, 321, 0, 3640, 3641, 5, 19, 0, 0, 3641, 603, 1, 0, 0, 0, 3642,
		3654, 3, 398, 199, 0, 3643, 3644, 3, 398, 199, 0, 3644, 3645, 5, 56, 0,
		0, 3645, 3646, 3, 646, 323, 0, 3646, 3654, 1, 0, 0, 0, 3647, 3648, 3, 398,
		199, 0, 3648, 3649, 5, 56, 0, 0, 3649, 3650, 5, 19, 0, 0, 3650, 3651, 3,
		644, 322, 0, 3651, 3652, 5, 20, 0, 0, 3652, 3654, 1, 0, 0, 0, 3653, 3642,
		1, 0, 0, 0, 3653, 3643, 1, 0, 0, 0, 3653, 3647, 1, 0, 0, 0, 3654, 605,
		1, 0, 0, 0, 3655, 3656, 3, 610, 305, 0, 3656, 3657, 5, 22, 0, 0, 3657,
		3662, 1, 0, 0, 0, 3658, 3659, 3, 608, 304, 0, 3659, 3660, 5, 22, 0, 0,
		3660, 3662, 1, 0, 0, 0, 3661, 3655, 1, 0, 0, 0, 3661, 3658, 1, 0, 0, 0,
		3662, 607, 1, 0, 0, 0, 3663, 3664, 3, 610, 305, 0, 3664, 3669, 3, 398,
		199, 0, 3665, 3666, 5, 15, 0, 0, 3666, 3668, 3, 398, 199, 0, 3667, 3665,
		1, 0, 0, 0, 3668, 3671, 1, 0, 0, 0, 3669, 3667, 1, 0, 0, 0, 3669, 3670,
		1, 0, 0, 0, 3670, 609, 1, 0, 0, 0, 3671, 3669, 1, 0, 0, 0, 3672, 3673,
		5, 54, 0, 0, 3673, 3679, 5, 21, 0, 0, 3674, 3679, 5, 21, 0, 0, 3675, 3676,
		3, 660, 330, 0, 3676, 3677, 5, 21, 0, 0, 3677, 3679, 1, 0, 0, 0, 3678,
		3672, 1, 0, 0, 0, 3678, 3674, 1, 0, 0, 0, 3678, 3675, 1, 0, 0, 0, 3679,
		611, 1, 0, 0, 0, 3680, 3681, 3, 614, 307, 0, 3681, 3682, 3, 690, 345, 0,
		3682, 613, 1, 0, 0, 0, 3683, 3684, 5, 117, 0, 0, 3684, 3685, 3, 662, 331,
		0, 3685, 3686, 3, 616, 308, 0, 3686, 3687, 3, 664, 332, 0, 3687, 615, 1,
		0, 0, 0, 3688, 3690, 3, 634, 317, 0, 3689, 3691, 3, 628, 314, 0, 3690,
		3689, 1, 0, 0, 0, 3690, 3691, 1, 0, 0, 0, 3691, 3693, 1, 0, 0, 0, 3692,
		3694, 3, 618, 309, 0, 3693, 3692, 1, 0, 0, 0, 3693, 3694, 1, 0, 0, 0, 3694,
		617, 1, 0, 0, 0, 3695, 3696, 5, 301, 0, 0, 3696, 3697, 3, 620, 310, 0,
		3697, 619, 1, 0, 0, 0, 3698, 3702, 3, 690, 345, 0, 3699, 3702, 3, 624,
		312, 0, 3700, 3702, 3, 622, 311, 0, 3701, 3698, 1, 0, 0, 0, 3701, 3699,
		1, 0, 0, 0, 3701, 3700, 1, 0, 0, 0, 3702, 621, 1, 0, 0, 0, 3703, 3704,
		5, 33, 0, 0, 3704, 3705, 3, 644, 322, 0, 3705, 623, 1, 0, 0, 0, 3706, 3709,
		3, 626, 313, 0, 3707, 3709, 5, 31, 0, 0, 3708, 3706, 1, 0, 0, 0, 3708,
		3707, 1, 0, 0, 0, 3709, 625, 1, 0, 0, 0, 3710, 3711, 5, 32, 0, 0, 3711,
		3712, 3, 646, 323, 0, 3712, 627, 1, 0, 0, 0, 3713, 3714, 3, 630, 315, 0,
		3714, 3715, 5, 20, 0, 0, 3715, 3722, 1, 0, 0, 0, 3716, 3717, 3, 630, 315,
		0, 3717, 3718, 5, 15, 0, 0, 3718, 3719, 5, 20, 0, 0, 3719, 3720, 6, 314,
		-1, 0, 3720, 3722, 1, 0, 0, 0, 3721, 3713, 1, 0, 0, 0, 3721, 3716, 1, 0,
		0, 0, 3722, 629, 1, 0, 0, 0, 3723, 3724, 5, 19, 0, 0, 3724, 3729, 3, 632,
		316, 0, 3725, 3726, 5, 15, 0, 0, 3726, 3728, 3, 632, 316, 0, 3727, 3725,
		1, 0, 0, 0, 3728, 3731, 1, 0, 0, 0, 3729, 3727, 1, 0, 0, 0, 3729, 3730,
		1, 0, 0, 0, 3730, 631, 1, 0, 0, 0, 3731, 3729, 1, 0, 0, 0, 3732, 3739,
		3, 682, 341, 0, 3733, 3739, 3, 688, 344, 0, 3734, 3739, 3, 690, 345, 0,
		3735, 3739, 3, 684, 342, 0, 3736, 3739, 3, 670, 335, 0, 3737, 3739, 5,
		206, 0, 0, 3738, 3732, 1, 0, 0, 0, 3738, 3733, 1, 0, 0, 0, 3738, 3734,
		1, 0, 0, 0, 3738, 3735, 1, 0, 0, 0, 3738, 3736, 1, 0, 0, 0, 3738, 3737,
		1, 0, 0, 0, 3739, 633, 1, 0, 0, 0, 3740, 3747, 3, 660, 330, 0, 3741, 3747,
		3, 654, 327, 0, 3742, 3747, 3, 642, 321, 0, 3743, 3747, 3, 614, 307, 0,
		3744, 3747, 3, 638, 319, 0, 3745, 3747, 3, 636, 318, 0, 3746, 3740, 1,
		0, 0, 0, 3746, 3741, 1, 0, 0, 0, 3746, 3742, 1, 0, 0, 0, 3746, 3743, 1,
		0, 0, 0, 3746, 3744, 1, 0, 0, 0, 3746, 3745, 1, 0, 0, 0, 3747, 635, 1,
		0, 0, 0, 3748, 3749, 5, 201, 0, 0, 3749, 3750, 3, 662, 331, 0, 3750, 3751,
		3, 616, 308, 0, 3751, 3752, 5, 15, 0, 0, 3752, 3753, 3, 616, 308, 0, 3753,
		3754, 3, 664, 332, 0, 3754, 637, 1, 0, 0, 0, 3755, 3756, 5, 176, 0, 0,
		3756, 3757, 3, 662, 331, 0, 3757, 3758, 5, 19, 0, 0, 3758, 3759, 5, 20,
		0, 0, 3759, 3760, 5, 35, 0, 0, 3760, 3761, 3, 616, 308, 0, 3761, 3762,
		3, 664, 332, 0, 3762, 3777, 1, 0, 0, 0, 3763, 3764, 5, 176, 0, 0, 3764,
		3765, 3, 662, 331, 0, 3765, 3766, 3, 616, 308, 0, 3766, 3767, 5, 35, 0,
		0, 3767, 3768, 3, 616, 308, 0, 3768, 3769, 3, 664, 332, 0, 3769, 3777,
		1, 0, 0, 0, 3770, 3771, 3, 640, 320, 0, 3771, 3772, 5, 20, 0, 0, 3772,
		3773, 5, 35, 0, 0, 3773, 3774, 3, 616, 308, 0, 3774, 3775, 3, 664, 332,
		0, 3775, 3777, 1, 0, 0, 0, 3776, 3755, 1, 0, 0, 0, 3776, 3763, 1, 0, 0,
		0, 3776, 3770, 1, 0, 0, 0, 3777, 639, 1, 0, 0, 0, 3778, 3779, 5, 176, 0,
		0, 3779, 3780, 3, 662, 331, 0, 3780, 3781, 5, 19, 0, 0, 3781, 3786, 3,
		616, 308, 0, 3782, 3783, 5, 15, 0, 0, 3783, 3785, 3, 616, 308, 0, 3784,
		3782, 1, 0, 0, 0, 3785, 3788, 1, 0, 0, 0, 3786, 3784, 1, 0, 0, 0, 3786,
		3787, 1, 0, 0, 0, 3787, 641, 1, 0, 0, 0, 3788, 3786, 1, 0, 0, 0, 3789,
		3792, 3, 644, 322, 0, 3790, 3792, 5, 118, 0, 0, 3791, 3789, 1, 0, 0, 0,
		3791, 3790, 1, 0, 0, 0, 3792, 643, 1, 0, 0, 0, 3793, 3798, 3, 646, 323,
		0, 3794, 3795, 5, 16, 0, 0, 3795, 3797, 3, 646, 323, 0, 3796, 3794, 1,
		0, 0, 0, 3797, 3800, 1, 0, 0, 0, 3798, 3796, 1, 0, 0, 0, 3798, 3799, 1,
		0, 0, 0, 3799, 645, 1, 0, 0, 0, 3800, 3798, 1, 0, 0, 0, 3801, 3804, 3,
		652, 326, 0, 3802, 3804, 3, 648, 324, 0, 3803, 3801, 1, 0, 0, 0, 3803,
		3802, 1, 0, 0, 0, 3804, 647, 1, 0, 0, 0, 3805, 3808, 3, 650, 325, 0, 3806,
		3808, 5, 119, 0, 0, 3807, 3805, 1, 0, 0, 0, 3807, 3806, 1, 0, 0, 0, 3808,
		649, 1, 0, 0, 0, 3809, 3810, 7, 21, 0, 0, 3810, 651, 1, 0, 0, 0, 3811,
		3812, 5, 336, 0, 0, 3812, 653, 1, 0, 0, 0, 3813, 3814, 5, 94, 0, 0, 3814,
		3815, 3, 662, 331, 0, 3815, 3816, 3, 664, 332, 0, 3816, 3821, 1, 0, 0,
		0, 3817, 3818, 3, 656, 328, 0, 3818, 3819, 3, 664, 332, 0, 3819, 3821,
		1, 0, 0, 0, 3820, 3813, 1, 0, 0, 0, 3820, 3817, 1, 0, 0, 0, 3821, 655,
		1, 0, 0, 0, 3822, 3823, 5, 94, 0, 0, 3823, 3824, 3, 662, 331, 0, 3824,
		3829, 3, 658, 329, 0, 3825, 3826, 5, 15, 0, 0, 3826, 3828, 3, 658, 329,
		0, 3827, 3825, 1, 0, 0, 0, 3828, 3831, 1, 0, 0, 0, 3829, 3827, 1, 0, 0,
		0, 3829, 3830, 1, 0, 0, 0, 3830, 657, 1, 0, 0, 0, 3831, 3829, 1, 0, 0,
		0, 3832, 3833, 3, 646, 323, 0, 3833, 3834, 3, 616, 308, 0, 3834, 3837,
		1, 0, 0, 0, 3835, 3837, 3, 616, 308, 0, 3836, 3832, 1, 0, 0, 0, 3836, 3835,
		1, 0, 0, 0, 3837, 659, 1, 0, 0, 0, 3838, 3839, 5, 54, 0, 0, 3839, 3840,
		3, 662, 331, 0, 3840, 3841, 3, 616, 308, 0, 3841, 3842, 3, 664, 332, 0,
		3842, 661, 1, 0, 0, 0, 3843, 3844, 5, 4, 0, 0, 3844, 663, 1, 0, 0, 0, 3845,
		3846, 5, 6, 0, 0, 3846, 665, 1, 0, 0, 0, 3847, 3848, 3, 668, 334, 0, 3848,
		3849, 3, 690, 345, 0, 3849, 667, 1, 0, 0, 0, 3850, 3851, 7, 22, 0, 0, 3851,
		669, 1, 0, 0, 0, 3852, 3853, 5, 52, 0, 0, 3853, 671, 1, 0, 0, 0, 3854,
		3855, 5, 112, 0, 0, 3855, 3856, 3, 690, 345, 0, 3856, 673, 1, 0, 0, 0,
		3857, 3858, 3, 676, 338, 0, 3858, 3859, 3, 690, 345, 0, 3859, 675, 1, 0,
		0, 0, 3860, 3861, 7, 23, 0, 0, 3861, 677, 1, 0, 0, 0, 3862, 3863, 3, 680,
		340, 0, 3863, 3864, 3, 690, 345, 0, 3864, 679, 1, 0, 0, 0, 3865, 3866,
		7, 24, 0, 0, 3866, 681, 1, 0, 0, 0, 3867, 3868, 5, 53, 0, 0, 3868, 683,
		1, 0, 0, 0, 3869, 3870, 6, 342, -1, 0, 3870, 3871, 3, 694, 347, 0, 3871,
		3882, 1, 0, 0, 0, 3872, 3873, 10, 2, 0, 0, 3873, 3874, 3, 694, 347, 0,
		3874, 3875, 6, 342, -1, 0, 3875, 3881, 1, 0, 0, 0, 3876, 3877, 10, 1, 0,
		0, 3877, 3878, 3, 692, 346, 0, 3878, 3879, 6, 342, -1, 0, 3879, 3881, 1,
		0, 0, 0, 3880, 3872, 1, 0, 0, 0, 3880, 3876, 1, 0, 0, 0, 3881, 3884, 1,
		0, 0, 0, 3882, 3880, 1, 0, 0, 0, 3882, 3883, 1, 0, 0, 0, 3883, 685, 1,
		0, 0, 0, 3884, 3882, 1, 0, 0, 0, 3885, 3886, 5, 78, 0, 0, 3886, 687, 1,
		0, 0, 0, 3887, 3888, 7, 25, 0, 0, 3888, 689, 1, 0, 0, 0, 3889, 3890, 6,
		345, -1, 0, 3890, 3891, 3, 692, 346, 0, 3891, 3902, 1, 0, 0, 0, 3892, 3893,
		10, 2, 0, 0, 3893, 3894, 3, 692, 346, 0, 3894, 3895, 6, 345, -1, 0, 3895,
		3901, 1, 0, 0, 0, 3896, 3897, 10, 1, 0, 0, 3897, 3898, 3, 694, 347, 0,
		3898, 3899, 6, 345, -1, 0, 3899, 3901, 1, 0, 0, 0, 3900, 3892, 1, 0, 0,
		0, 3900, 3896, 1, 0, 0, 0, 3901, 3904, 1, 0, 0, 0, 3902, 3900, 1, 0, 0,
		0, 3902, 3903, 1, 0, 0, 0, 3903, 691, 1, 0, 0, 0, 3904, 3902, 1, 0, 0,
		0, 3905, 3906, 5, 42, 0, 0, 3906, 693, 1, 0, 0, 0, 3907, 3908, 5, 43, 0,
		0, 3908, 695, 1, 0, 0, 0, 406, 704, 708, 712, 719, 727, 735, 743, 751,
		764, 780, 787, 809, 822, 830, 835, 843, 868, 875, 891, 899, 906, 911, 919,
		931, 934, 939, 945, 954, 965, 975, 985, 994, 1004, 1021, 1032, 1043, 1048,
		1056, 1063, 1069, 1079, 1084, 1087, 1090, 1110, 1115, 1118, 1123, 1131,
		1137, 1148, 1151, 1154, 1158, 1164, 1168, 1182, 1187, 1192, 1195, 1198,
		1201, 1204, 1225, 1235, 1240, 1252, 1256, 1262, 1276, 1279, 1285, 1288,
		1293, 1297, 1306, 1309, 1312, 1321, 1331, 1334, 1342, 1345, 1351, 1354,
		1361, 1364, 1371, 1374, 1376, 1382, 1385, 1389, 1393, 1395, 1411, 1420,
		1428, 1437, 1443, 1450, 1457, 1460, 1472, 1475, 1478, 1484, 1491, 1497,
		1510, 1519, 1526, 1535, 1544, 1546, 1549, 1553, 1557, 1560, 1565, 1575,
		1580, 1582, 1588, 1595, 1602, 1609, 1614, 1624, 1628, 1632, 1637, 1643,
		1651, 1656, 1659, 1662, 1666, 1669, 1673, 1676, 1679, 1682, 1685, 1689,
		1692, 1695, 1698, 1702, 1705, 1709, 1712, 1722, 1737, 1744, 1747, 1750,
		1753, 1758, 1761, 1764, 1767, 1771, 1777, 1786, 1795, 1804, 1809, 1812,
		1815, 1819, 1823, 1825, 1835, 1841, 1843, 1849, 1852, 1857, 1860, 1862,
		1871, 1877, 1898, 1902, 1907, 1910, 1925, 1931, 1938, 1940, 1949, 1957,
		1964, 1968, 1979, 1985, 1998, 2008, 2018, 2026, 2033, 2042, 2048, 2052,
		2055, 2058, 2062, 2066, 2071, 2075, 2084, 2093, 2096, 2099, 2102, 2115,
		2120, 2129, 2135, 2145, 2150, 2158, 2162, 2167, 2189, 2193, 2197, 2207,
		2224, 2237, 2239, 2256, 2258, 2263, 2275, 2279, 2287, 2296, 2304, 2312,
		2345, 2352, 2364, 2373, 2383, 2405, 2410, 2413, 2417, 2420, 2427, 2434,
		2441, 2459, 2464, 2471, 2476, 2481, 2486, 2491, 2495, 2497, 2509, 2513,
		2518, 2522, 2529, 2535, 2539, 2542, 2551, 2563, 2575, 2582, 2621, 2683,
		2691, 2698, 2706, 2728, 2730, 2783, 2791, 2806, 2814, 2882, 2892, 2906,
		2909, 2914, 2920, 2938, 2947, 2958, 2966, 2972, 2975, 2986, 2994, 2999,
		3009, 3017, 3024, 3029, 3037, 3040, 3043, 3046, 3051, 3057, 3061, 3064,
		3067, 3070, 3073, 3076, 3079, 3082, 3085, 3088, 3096, 3099, 3102, 3105,
		3108, 3119, 3128, 3138, 3146, 3169, 3177, 3186, 3194, 3198, 3205, 3218,
		3227, 3236, 3246, 3254, 3259, 3262, 3272, 3281, 3289, 3302, 3306, 3314,
		3317, 3328, 3338, 3350, 3358, 3368, 3376, 3380, 3388, 3404, 3415, 3431,
		3433, 3450, 3464, 3481, 3492, 3504, 3517, 3525, 3535, 3539, 3550, 3560,
		3567, 3581, 3592, 3602, 3604, 3615, 3627, 3635, 3653, 3661, 3669, 3678,
		3690, 3693, 3701, 3708, 3721, 3729, 3738, 3746, 3776, 3786, 3791, 3798,
		3803, 3807, 3820, 3829, 3836, 3880, 3882, 3900, 3902,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// GoogleSQLParserInit initializes any static state used to implement GoogleSQLParser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewGoogleSQLParser(). You can call this function if you wish to initialize the static state ahead
// of time.
func GoogleSQLParserInit() {
	staticData := &GoogleSQLParserParserStaticData
	staticData.once.Do(googlesqlparserParserInit)
}

// NewGoogleSQLParser produces a new parser instance for the optional input antlr.TokenStream.
func NewGoogleSQLParser(input antlr.TokenStream) *GoogleSQLParser {
	GoogleSQLParserInit()
	this := new(GoogleSQLParser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &GoogleSQLParserParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	this.RuleNames = staticData.RuleNames
	this.LiteralNames = staticData.LiteralNames
	this.SymbolicNames = staticData.SymbolicNames
	this.GrammarFileName = "GoogleSQLParser.g4"

	return this
}

// GoogleSQLParser tokens.
const (
	GoogleSQLParserEOF                                       = antlr.TokenEOF
	GoogleSQLParserEQUAL_OPERATOR                            = 1
	GoogleSQLParserNOT_EQUAL_OPERATOR                        = 2
	GoogleSQLParserNOT_EQUAL2_OPERATOR                       = 3
	GoogleSQLParserLT_OPERATOR                               = 4
	GoogleSQLParserLE_OPERATOR                               = 5
	GoogleSQLParserGT_OPERATOR                               = 6
	GoogleSQLParserGE_OPERATOR                               = 7
	GoogleSQLParserKL_OPERATOR                               = 8
	GoogleSQLParserKR_OPERATOR                               = 9
	GoogleSQLParserPLUS_OPERATOR                             = 10
	GoogleSQLParserMINUS_OPERATOR                            = 11
	GoogleSQLParserMULTIPLY_OPERATOR                         = 12
	GoogleSQLParserDIVIDE_OPERATOR                           = 13
	GoogleSQLParserBITWISE_NOT_OPERATOR                      = 14
	GoogleSQLParserCOMMA_SYMBOL                              = 15
	GoogleSQLParserDOT_SYMBOL                                = 16
	GoogleSQLParserLC_BRACKET_SYMBOL                         = 17
	GoogleSQLParserRC_BRACKET_SYMBOL                         = 18
	GoogleSQLParserLR_BRACKET_SYMBOL                         = 19
	GoogleSQLParserRR_BRACKET_SYMBOL                         = 20
	GoogleSQLParserLS_BRACKET_SYMBOL                         = 21
	GoogleSQLParserRS_BRACKET_SYMBOL                         = 22
	GoogleSQLParserSTROKE_SYMBOL                             = 23
	GoogleSQLParserCOLON_SYMBOL                              = 24
	GoogleSQLParserSEMI_SYMBOL                               = 25
	GoogleSQLParserSINGLE_QUOTE_SYMBOL                       = 26
	GoogleSQLParserSINGLE_QUOTE_3_SYMBOL                     = 27
	GoogleSQLParserDOUBLE_QUOTE_SYMBOL                       = 28
	GoogleSQLParserDOUBLE_QUOTE_3_SYMBOL                     = 29
	GoogleSQLParserBACKQUOTE_SYMBOL                          = 30
	GoogleSQLParserQUESTION_SYMBOL                           = 31
	GoogleSQLParserAT_SYMBOL                                 = 32
	GoogleSQLParserATAT_SYMBOL                               = 33
	GoogleSQLParserEQUAL_GT_BRACKET_SYMBOL                   = 34
	GoogleSQLParserSUB_GT_BRACKET_SYMBOL                     = 35
	GoogleSQLParserPLUS_EQUAL_SYMBOL                         = 36
	GoogleSQLParserSUB_EQUAL_SYMBOL                          = 37
	GoogleSQLParserPIPE_SYMBOL                               = 38
	GoogleSQLParserCIRCUMFLEX_SYMBOL                         = 39
	GoogleSQLParserBIT_AND_SYMBOL                            = 40
	GoogleSQLParserBOOL_OR_SYMBOL                            = 41
	GoogleSQLParserSTRING_LITERAL                            = 42
	GoogleSQLParserBYTES_LITERAL                             = 43
	GoogleSQLParserUNCLOSED_STRING_LITERAL                   = 44
	GoogleSQLParserUNCLOSED_TRIPLE_QUOTED_STRING_LITERAL     = 45
	GoogleSQLParserUNCLOSED_RAW_STRING_LITERAL               = 46
	GoogleSQLParserUNCLOSED_TRIPLE_QUOTED_RAW_STRING_LITERAL = 47
	GoogleSQLParserUNCLOSED_BYTES_LITERAL                    = 48
	GoogleSQLParserUNCLOSED_TRIPLE_QUOTED_BYTES_LITERAL      = 49
	GoogleSQLParserUNCLOSED_RAW_BYTES_LITERAL                = 50
	GoogleSQLParserUNCLOSED_TRIPLE_QUOTED_RAW_BYTES_LITERAL  = 51
	GoogleSQLParserFLOATING_POINT_LITERAL                    = 52
	GoogleSQLParserINTEGER_LITERAL                           = 53
	GoogleSQLParserARRAY_SYMBOL                              = 54
	GoogleSQLParserALL_SYMBOL                                = 55
	GoogleSQLParserAS_SYMBOL                                 = 56
	GoogleSQLParserASC_SYMBOL                                = 57
	GoogleSQLParserBY_SYMBOL                                 = 58
	GoogleSQLParserCROSS_SYMBOL                              = 59
	GoogleSQLParserJOIN_SYMBOL                               = 60
	GoogleSQLParserDELTA_SYMBOL                              = 61
	GoogleSQLParserDESC_SYMBOL                               = 62
	GoogleSQLParserDIFFERENTIAL_PRIVACY_SYMBOL               = 63
	GoogleSQLParserDISTINCT_SYMBOL                           = 64
	GoogleSQLParserEPSILON_SYMBOL                            = 65
	GoogleSQLParserEXCEPT_SYMBOL                             = 66
	GoogleSQLParserEXCLUDE_SYMBOL                            = 67
	GoogleSQLParserFOR_SYMBOL                                = 68
	GoogleSQLParserFROM_SYMBOL                               = 69
	GoogleSQLParserFULL_SYMBOL                               = 70
	GoogleSQLParserIN_SYMBOL                                 = 71
	GoogleSQLParserINCLUDE_SYMBOL                            = 72
	GoogleSQLParserINNER_SYMBOL                              = 73
	GoogleSQLParserINTERSECT_SYMBOL                          = 74
	GoogleSQLParserLEFT_SYMBOL                               = 75
	GoogleSQLParserLIMIT_SYMBOL                              = 76
	GoogleSQLParserMAX_GROUPS_CONTRIBUTED_SYMBOL             = 77
	GoogleSQLParserNULL_SYMBOL                               = 78
	GoogleSQLParserNULLS_SYMBOL                              = 79
	GoogleSQLParserOF_SYMBOL                                 = 80
	GoogleSQLParserOFFSET_SYMBOL                             = 81
	GoogleSQLParserON_SYMBOL                                 = 82
	GoogleSQLParserOPTIONS_SYMBOL                            = 83
	GoogleSQLParserORDER_SYMBOL                              = 84
	GoogleSQLParserOUTER_SYMBOL                              = 85
	GoogleSQLParserPERCENT_SYMBOL                            = 86
	GoogleSQLParserPIVOT_SYMBOL                              = 87
	GoogleSQLParserPRIVACY_UNIT_COLUMN_SYMBOL                = 88
	GoogleSQLParserRIGHT_SYMBOL                              = 89
	GoogleSQLParserRECURSIVE_SYMBOL                          = 90
	GoogleSQLParserREPLACE_SYMBOL                            = 91
	GoogleSQLParserUNPIVOT_SYMBOL                            = 92
	GoogleSQLParserSELECT_SYMBOL                             = 93
	GoogleSQLParserSTRUCT_SYMBOL                             = 94
	GoogleSQLParserSYSTEM_SYMBOL                             = 95
	GoogleSQLParserSYSTEM_TIME_SYMBOL                        = 96
	GoogleSQLParserTABLESAMPLE_SYMBOL                        = 97
	GoogleSQLParserUNION_SYMBOL                              = 98
	GoogleSQLParserUNNEST_SYMBOL                             = 99
	GoogleSQLParserUSING_SYMBOL                              = 100
	GoogleSQLParserVALUE_SYMBOL                              = 101
	GoogleSQLParserWITH_SYMBOL                               = 102
	GoogleSQLParserTRUE_SYMBOL                               = 103
	GoogleSQLParserFALSE_SYMBOL                              = 104
	GoogleSQLParserNUMERIC_SYMBOL                            = 105
	GoogleSQLParserDECIMAL_SYMBOL                            = 106
	GoogleSQLParserBIGNUMERIC_SYMBOL                         = 107
	GoogleSQLParserBIGDECIMAL_SYMBOL                         = 108
	GoogleSQLParserNOT_SYMBOL                                = 109
	GoogleSQLParserAND_SYMBOL                                = 110
	GoogleSQLParserOR_SYMBOL                                 = 111
	GoogleSQLParserJSON_SYMBOL                               = 112
	GoogleSQLParserDATE_SYMBOL                               = 113
	GoogleSQLParserTIME_SYMBOL                               = 114
	GoogleSQLParserDATETIME_SYMBOL                           = 115
	GoogleSQLParserTIMESTAMP_SYMBOL                          = 116
	GoogleSQLParserRANGE_SYMBOL                              = 117
	GoogleSQLParserINTERVAL_SYMBOL                           = 118
	GoogleSQLParserSIMPLE_SYMBOL                             = 119
	GoogleSQLParserABORT_SYMBOL                              = 120
	GoogleSQLParserACCESS_SYMBOL                             = 121
	GoogleSQLParserACTION_SYMBOL                             = 122
	GoogleSQLParserAGGREGATE_SYMBOL                          = 123
	GoogleSQLParserADD_SYMBOL                                = 124
	GoogleSQLParserALTER_SYMBOL                              = 125
	GoogleSQLParserALWAYS_SYMBOL                             = 126
	GoogleSQLParserANALYZE_SYMBOL                            = 127
	GoogleSQLParserAPPROX_SYMBOL                             = 128
	GoogleSQLParserARE_SYMBOL                                = 129
	GoogleSQLParserASSERT_SYMBOL                             = 130
	GoogleSQLParserBATCH_SYMBOL                              = 131
	GoogleSQLParserBEGIN_SYMBOL                              = 132
	GoogleSQLParserBREAK_SYMBOL                              = 133
	GoogleSQLParserCALL_SYMBOL                               = 134
	GoogleSQLParserCASCADE_SYMBOL                            = 135
	GoogleSQLParserCHECK_SYMBOL                              = 136
	GoogleSQLParserCLAMPED_SYMBOL                            = 137
	GoogleSQLParserCLONE_SYMBOL                              = 138
	GoogleSQLParserCOPY_SYMBOL                               = 139
	GoogleSQLParserCLUSTER_SYMBOL                            = 140
	GoogleSQLParserCOLUMN_SYMBOL                             = 141
	GoogleSQLParserCOLUMNS_SYMBOL                            = 142
	GoogleSQLParserCOMMIT_SYMBOL                             = 143
	GoogleSQLParserCONNECTION_SYMBOL                         = 144
	GoogleSQLParserCONSTANT_SYMBOL                           = 145
	GoogleSQLParserCONSTRAINT_SYMBOL                         = 146
	GoogleSQLParserCONTINUE_SYMBOL                           = 147
	GoogleSQLParserCORRESPONDING_SYMBOL                      = 148
	GoogleSQLParserCYCLE_SYMBOL                              = 149
	GoogleSQLParserDATA_SYMBOL                               = 150
	GoogleSQLParserDATABASE_SYMBOL                           = 151
	GoogleSQLParserDECLARE_SYMBOL                            = 152
	GoogleSQLParserDEFINER_SYMBOL                            = 153
	GoogleSQLParserDELETE_SYMBOL                             = 154
	GoogleSQLParserDELETION_SYMBOL                           = 155
	GoogleSQLParserDEPTH_SYMBOL                              = 156
	GoogleSQLParserDESCRIBE_SYMBOL                           = 157
	GoogleSQLParserDETERMINISTIC_SYMBOL                      = 158
	GoogleSQLParserDO_SYMBOL                                 = 159
	GoogleSQLParserDROP_SYMBOL                               = 160
	GoogleSQLParserELSEIF_SYMBOL                             = 161
	GoogleSQLParserENFORCED_SYMBOL                           = 162
	GoogleSQLParserERROR_SYMBOL                              = 163
	GoogleSQLParserEXCEPTION_SYMBOL                          = 164
	GoogleSQLParserEXECUTE_SYMBOL                            = 165
	GoogleSQLParserEXPLAIN_SYMBOL                            = 166
	GoogleSQLParserEXPORT_SYMBOL                             = 167
	GoogleSQLParserEXTEND_SYMBOL                             = 168
	GoogleSQLParserEXTERNAL_SYMBOL                           = 169
	GoogleSQLParserFILES_SYMBOL                              = 170
	GoogleSQLParserFILTER_SYMBOL                             = 171
	GoogleSQLParserFILL_SYMBOL                               = 172
	GoogleSQLParserFIRST_SYMBOL                              = 173
	GoogleSQLParserFOREIGN_SYMBOL                            = 174
	GoogleSQLParserFORMAT_SYMBOL                             = 175
	GoogleSQLParserFUNCTION_SYMBOL                           = 176
	GoogleSQLParserGENERATED_SYMBOL                          = 177
	GoogleSQLParserGRANT_SYMBOL                              = 178
	GoogleSQLParserGROUP_ROWS_SYMBOL                         = 179
	GoogleSQLParserHIDDEN_SYMBOL                             = 180
	GoogleSQLParserIDENTITY_SYMBOL                           = 181
	GoogleSQLParserIMMEDIATE_SYMBOL                          = 182
	GoogleSQLParserIMMUTABLE_SYMBOL                          = 183
	GoogleSQLParserIMPORT_SYMBOL                             = 184
	GoogleSQLParserINCREMENT_SYMBOL                          = 185
	GoogleSQLParserINDEX_SYMBOL                              = 186
	GoogleSQLParserINOUT_SYMBOL                              = 187
	GoogleSQLParserINPUT_SYMBOL                              = 188
	GoogleSQLParserINSERT_SYMBOL                             = 189
	GoogleSQLParserINVOKER_SYMBOL                            = 190
	GoogleSQLParserISOLATION_SYMBOL                          = 191
	GoogleSQLParserITERATE_SYMBOL                            = 192
	GoogleSQLParserKEY_SYMBOL                                = 193
	GoogleSQLParserLANGUAGE_SYMBOL                           = 194
	GoogleSQLParserLAST_SYMBOL                               = 195
	GoogleSQLParserLEAVE_SYMBOL                              = 196
	GoogleSQLParserLEVEL_SYMBOL                              = 197
	GoogleSQLParserLOAD_SYMBOL                               = 198
	GoogleSQLParserLOOP_SYMBOL                               = 199
	GoogleSQLParserMACRO_SYMBOL                              = 200
	GoogleSQLParserMAP_SYMBOL                                = 201
	GoogleSQLParserMATCH_SYMBOL                              = 202
	GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL     = 203
	GoogleSQLParserMATCHED_SYMBOL                            = 204
	GoogleSQLParserMATERIALIZED_SYMBOL                       = 205
	GoogleSQLParserMAX_SYMBOL                                = 206
	GoogleSQLParserMAXVALUE_SYMBOL                           = 207
	GoogleSQLParserMEASURES_SYMBOL                           = 208
	GoogleSQLParserMESSAGE_SYMBOL                            = 209
	GoogleSQLParserMETADATA_SYMBOL                           = 210
	GoogleSQLParserMIN_SYMBOL                                = 211
	GoogleSQLParserMINVALUE_SYMBOL                           = 212
	GoogleSQLParserMODEL_SYMBOL                              = 213
	GoogleSQLParserMODULE_SYMBOL                             = 214
	GoogleSQLParserONLY_SYMBOL                               = 215
	GoogleSQLParserOUT_SYMBOL                                = 216
	GoogleSQLParserOUTPUT_SYMBOL                             = 217
	GoogleSQLParserOVERWRITE_SYMBOL                          = 218
	GoogleSQLParserPARTITIONS_SYMBOL                         = 219
	GoogleSQLParserPATTERN_SYMBOL                            = 220
	GoogleSQLParserPOLICIES_SYMBOL                           = 221
	GoogleSQLParserPOLICY_SYMBOL                             = 222
	GoogleSQLParserPRIMARY_SYMBOL                            = 223
	GoogleSQLParserPRIVATE_SYMBOL                            = 224
	GoogleSQLParserPRIVILEGE_SYMBOL                          = 225
	GoogleSQLParserPRIVILEGES_SYMBOL                         = 226
	GoogleSQLParserPROCEDURE_SYMBOL                          = 227
	GoogleSQLParserPROJECT_SYMBOL                            = 228
	GoogleSQLParserPUBLIC_SYMBOL                             = 229
	GoogleSQLParserRAISE_SYMBOL                              = 230
	GoogleSQLParserREAD_SYMBOL                               = 231
	GoogleSQLParserREFERENCES_SYMBOL                         = 232
	GoogleSQLParserREMOTE_SYMBOL                             = 233
	GoogleSQLParserREMOVE_SYMBOL                             = 234
	GoogleSQLParserRENAME_SYMBOL                             = 235
	GoogleSQLParserREPEAT_SYMBOL                             = 236
	GoogleSQLParserREPEATABLE_SYMBOL                         = 237
	GoogleSQLParserREPLACE_FIELDS_SYMBOL                     = 238
	GoogleSQLParserREPLICA_SYMBOL                            = 239
	GoogleSQLParserREPORT_SYMBOL                             = 240
	GoogleSQLParserRESTRICT_SYMBOL                           = 241
	GoogleSQLParserRESTRICTION_SYMBOL                        = 242
	GoogleSQLParserRETURNS_SYMBOL                            = 243
	GoogleSQLParserRETURN_SYMBOL                             = 244
	GoogleSQLParserREVOKE_SYMBOL                             = 245
	GoogleSQLParserROLLBACK_SYMBOL                           = 246
	GoogleSQLParserROW_SYMBOL                                = 247
	GoogleSQLParserRUN_SYMBOL                                = 248
	GoogleSQLParserSAFE_CAST_SYMBOL                          = 249
	GoogleSQLParserSCHEMA_SYMBOL                             = 250
	GoogleSQLParserSEARCH_SYMBOL                             = 251
	GoogleSQLParserSECURITY_SYMBOL                           = 252
	GoogleSQLParserSEQUENCE_SYMBOL                           = 253
	GoogleSQLParserSETS_SYMBOL                               = 254
	GoogleSQLParserSET_SYMBOL                                = 255
	GoogleSQLParserSHOW_SYMBOL                               = 256
	GoogleSQLParserSNAPSHOT_SYMBOL                           = 257
	GoogleSQLParserSOURCE_SYMBOL                             = 258
	GoogleSQLParserSQL_SYMBOL                                = 259
	GoogleSQLParserSTABLE_SYMBOL                             = 260
	GoogleSQLParserSTART_SYMBOL                              = 261
	GoogleSQLParserSTATIC_DESCRIBE_SYMBOL                    = 262
	GoogleSQLParserSTORED_SYMBOL                             = 263
	GoogleSQLParserSTORING_SYMBOL                            = 264
	GoogleSQLParserSTRICT_SYMBOL                             = 265
	GoogleSQLParserTABLE_SYMBOL                              = 266
	GoogleSQLParserTABLES_SYMBOL                             = 267
	GoogleSQLParserTARGET_SYMBOL                             = 268
	GoogleSQLParserTEMP_SYMBOL                               = 269
	GoogleSQLParserTEMPORARY_SYMBOL                          = 270
	GoogleSQLParserTRANSACTION_SYMBOL                        = 271
	GoogleSQLParserTRANSFORM_SYMBOL                          = 272
	GoogleSQLParserTRUNCATE_SYMBOL                           = 273
	GoogleSQLParserTYPE_SYMBOL                               = 274
	GoogleSQLParserUNDROP_SYMBOL                             = 275
	GoogleSQLParserUNIQUE_SYMBOL                             = 276
	GoogleSQLParserUNKNOWN_SYMBOL                            = 277
	GoogleSQLParserUNTIL_SYMBOL                              = 278
	GoogleSQLParserUPDATE_SYMBOL                             = 279
	GoogleSQLParserVALUES_SYMBOL                             = 280
	GoogleSQLParserVECTOR_SYMBOL                             = 281
	GoogleSQLParserVIEW_SYMBOL                               = 282
	GoogleSQLParserVIEWS_SYMBOL                              = 283
	GoogleSQLParserVOLATILE_SYMBOL                           = 284
	GoogleSQLParserWEIGHT_SYMBOL                             = 285
	GoogleSQLParserWHILE_SYMBOL                              = 286
	GoogleSQLParserWRITE_SYMBOL                              = 287
	GoogleSQLParserZONE_SYMBOL                               = 288
	GoogleSQLParserDESCRIPTOR_SYMBOL                         = 289
	GoogleSQLParserINTERLEAVE_SYMBOL                         = 290
	GoogleSQLParserNULL_FILTERED_SYMBOL                      = 291
	GoogleSQLParserPARENT_SYMBOL                             = 292
	GoogleSQLParserNEW_SYMBOL                                = 293
	GoogleSQLParserEND_SYMBOL                                = 294
	GoogleSQLParserCASE_SYMBOL                               = 295
	GoogleSQLParserWHEN_SYMBOL                               = 296
	GoogleSQLParserTHEN_SYMBOL                               = 297
	GoogleSQLParserELSE_SYMBOL                               = 298
	GoogleSQLParserCAST_SYMBOL                               = 299
	GoogleSQLParserEXTRACT_SYMBOL                            = 300
	GoogleSQLParserCOLLATE_SYMBOL                            = 301
	GoogleSQLParserIF_SYMBOL                                 = 302
	GoogleSQLParserGROUPING_SYMBOL                           = 303
	GoogleSQLParserHAVING_SYMBOL                             = 304
	GoogleSQLParserGROUP_SYMBOL                              = 305
	GoogleSQLParserROLLUP_SYMBOL                             = 306
	GoogleSQLParserCUBE_SYMBOL                               = 307
	GoogleSQLParserHASH_SYMBOL                               = 308
	GoogleSQLParserPROTO_SYMBOL                              = 309
	GoogleSQLParserPARTITION_SYMBOL                          = 310
	GoogleSQLParserIGNORE_SYMBOL                             = 311
	GoogleSQLParserRESPECT_SYMBOL                            = 312
	GoogleSQLParserROWS_SYMBOL                               = 313
	GoogleSQLParserOVER_SYMBOL                               = 314
	GoogleSQLParserBETWEEN_SYMBOL                            = 315
	GoogleSQLParserUNBOUNDED_SYMBOL                          = 316
	GoogleSQLParserCURRENT_SYMBOL                            = 317
	GoogleSQLParserPRECEDING_SYMBOL                          = 318
	GoogleSQLParserFOLLOWING_SYMBOL                          = 319
	GoogleSQLParserNATURAL_SYMBOL                            = 320
	GoogleSQLParserQUALIFY_SYMBOL                            = 321
	GoogleSQLParserDEFAULT_SYMBOL                            = 322
	GoogleSQLParserSLASH_SYMBOL                              = 323
	GoogleSQLParserMATCH_RECOGNIZE_SYMBOL                    = 324
	GoogleSQLParserDEFINE_SYMBOL                             = 325
	GoogleSQLParserLOOKUP_SYMBOL                             = 326
	GoogleSQLParserWHERE_SYMBOL                              = 327
	GoogleSQLParserWINDOW_SYMBOL                             = 328
	GoogleSQLParserTO_SYMBOL                                 = 329
	GoogleSQLParserEXISTS_SYMBOL                             = 330
	GoogleSQLParserANY_SYMBOL                                = 331
	GoogleSQLParserSOME_SYMBOL                               = 332
	GoogleSQLParserLIKE_SYMBOL                               = 333
	GoogleSQLParserIS_SYMBOL                                 = 334
	GoogleSQLParserNO_SYMBOL                                 = 335
	GoogleSQLParserIDENTIFIER                                = 336
	GoogleSQLParserUNCLOSED_ESCAPED_IDENTIFIER               = 337
	GoogleSQLParserWHITESPACE                                = 338
	GoogleSQLParserCOMMENT                                   = 339
)

// GoogleSQLParser rules.
const (
	GoogleSQLParserRULE_root                                          = 0
	GoogleSQLParserRULE_stmts                                         = 1
	GoogleSQLParserRULE_stmt                                          = 2
	GoogleSQLParserRULE_query_statement                               = 3
	GoogleSQLParserRULE_alter_statement                               = 4
	GoogleSQLParserRULE_row_access_policy_alter_action_list           = 5
	GoogleSQLParserRULE_row_access_policy_alter_action                = 6
	GoogleSQLParserRULE_grant_to_clause                               = 7
	GoogleSQLParserRULE_grantee_list                                  = 8
	GoogleSQLParserRULE_privilege_list                                = 9
	GoogleSQLParserRULE_privilege                                     = 10
	GoogleSQLParserRULE_path_expression_list_with_parens              = 11
	GoogleSQLParserRULE_privilege_name                                = 12
	GoogleSQLParserRULE_generic_entity_type                           = 13
	GoogleSQLParserRULE_generic_entity_type_unchecked                 = 14
	GoogleSQLParserRULE_schema_object_kind                            = 15
	GoogleSQLParserRULE_alter_action_list                             = 16
	GoogleSQLParserRULE_alter_action                                  = 17
	GoogleSQLParserRULE_spanner_set_on_delete_action                  = 18
	GoogleSQLParserRULE_spanner_alter_column_action                   = 19
	GoogleSQLParserRULE_spanner_generated_or_default                  = 20
	GoogleSQLParserRULE_generic_sub_entity_type                       = 21
	GoogleSQLParserRULE_sub_entity_type_identifier                    = 22
	GoogleSQLParserRULE_fill_using_expression                         = 23
	GoogleSQLParserRULE_column_position                               = 24
	GoogleSQLParserRULE_table_column_definition                       = 25
	GoogleSQLParserRULE_column_attributes                             = 26
	GoogleSQLParserRULE_column_attribute                              = 27
	GoogleSQLParserRULE_primary_key_column_attribute                  = 28
	GoogleSQLParserRULE_foreign_key_column_attribute                  = 29
	GoogleSQLParserRULE_hidden_column_attribute                       = 30
	GoogleSQLParserRULE_opt_constraint_identity                       = 31
	GoogleSQLParserRULE_table_column_schema                           = 32
	GoogleSQLParserRULE_opt_column_info                               = 33
	GoogleSQLParserRULE_invalid_generated_column                      = 34
	GoogleSQLParserRULE_invalid_default_column                        = 35
	GoogleSQLParserRULE_default_column_info                           = 36
	GoogleSQLParserRULE_generated_column_info                         = 37
	GoogleSQLParserRULE_identity_column_info                          = 38
	GoogleSQLParserRULE_opt_start_with                                = 39
	GoogleSQLParserRULE_opt_increment_by                              = 40
	GoogleSQLParserRULE_opt_maxvalue                                  = 41
	GoogleSQLParserRULE_opt_minvalue                                  = 42
	GoogleSQLParserRULE_opt_cycle                                     = 43
	GoogleSQLParserRULE_signed_numeric_literal                        = 44
	GoogleSQLParserRULE_stored_mode                                   = 45
	GoogleSQLParserRULE_generated_mode                                = 46
	GoogleSQLParserRULE_column_schema_inner                           = 47
	GoogleSQLParserRULE_raw_column_schema_inner                       = 48
	GoogleSQLParserRULE_range_column_schema_inner                     = 49
	GoogleSQLParserRULE_struct_column_schema_inner                    = 50
	GoogleSQLParserRULE_struct_column_field                           = 51
	GoogleSQLParserRULE_simple_column_schema_inner                    = 52
	GoogleSQLParserRULE_array_column_schema_inner                     = 53
	GoogleSQLParserRULE_field_schema                                  = 54
	GoogleSQLParserRULE_opt_field_attributes                          = 55
	GoogleSQLParserRULE_not_null_column_attribute                     = 56
	GoogleSQLParserRULE_primary_key_or_table_constraint_spec          = 57
	GoogleSQLParserRULE_opt_if_not_exists                             = 58
	GoogleSQLParserRULE_primary_key_spec                              = 59
	GoogleSQLParserRULE_primary_key_element_list                      = 60
	GoogleSQLParserRULE_primary_key_element                           = 61
	GoogleSQLParserRULE_table_constraint_spec                         = 62
	GoogleSQLParserRULE_foreign_key_reference                         = 63
	GoogleSQLParserRULE_opt_foreign_key_action                        = 64
	GoogleSQLParserRULE_foreign_key_on_update                         = 65
	GoogleSQLParserRULE_foreign_key_on_delete                         = 66
	GoogleSQLParserRULE_foreign_key_action                            = 67
	GoogleSQLParserRULE_opt_foreign_key_match                         = 68
	GoogleSQLParserRULE_foreign_key_match_mode                        = 69
	GoogleSQLParserRULE_column_list                                   = 70
	GoogleSQLParserRULE_options_options_list                          = 71
	GoogleSQLParserRULE_constraint_enforcement                        = 72
	GoogleSQLParserRULE_generic_entity_body                           = 73
	GoogleSQLParserRULE_opt_if_exists                                 = 74
	GoogleSQLParserRULE_table_or_table_function                       = 75
	GoogleSQLParserRULE_query                                         = 76
	GoogleSQLParserRULE_query_without_pipe_operators                  = 77
	GoogleSQLParserRULE_bad_keyword_after_from_query                  = 78
	GoogleSQLParserRULE_bad_keyword_after_from_query_allows_parens    = 79
	GoogleSQLParserRULE_with_clause_with_trailing_comma               = 80
	GoogleSQLParserRULE_select_or_from_keyword                        = 81
	GoogleSQLParserRULE_query_primary_or_set_operation                = 82
	GoogleSQLParserRULE_query_set_operation                           = 83
	GoogleSQLParserRULE_query_set_operation_prefix                    = 84
	GoogleSQLParserRULE_query_set_operation_item                      = 85
	GoogleSQLParserRULE_query_primary                                 = 86
	GoogleSQLParserRULE_set_operation_metadata                        = 87
	GoogleSQLParserRULE_opt_column_match_suffix                       = 88
	GoogleSQLParserRULE_opt_strict                                    = 89
	GoogleSQLParserRULE_all_or_distinct                               = 90
	GoogleSQLParserRULE_query_set_operation_type                      = 91
	GoogleSQLParserRULE_opt_corresponding_outer_mode                  = 92
	GoogleSQLParserRULE_opt_outer                                     = 93
	GoogleSQLParserRULE_with_clause                                   = 94
	GoogleSQLParserRULE_aliased_query                                 = 95
	GoogleSQLParserRULE_opt_aliased_query_modifiers                   = 96
	GoogleSQLParserRULE_recursion_depth_modifier                      = 97
	GoogleSQLParserRULE_possibly_unbounded_int_literal_or_parameter   = 98
	GoogleSQLParserRULE_int_literal_or_parameter                      = 99
	GoogleSQLParserRULE_order_by_clause                               = 100
	GoogleSQLParserRULE_order_by_clause_prefix                        = 101
	GoogleSQLParserRULE_ordering_expression                           = 102
	GoogleSQLParserRULE_select                                        = 103
	GoogleSQLParserRULE_opt_clauses_following_from                    = 104
	GoogleSQLParserRULE_opt_clauses_following_where                   = 105
	GoogleSQLParserRULE_opt_clauses_following_group_by                = 106
	GoogleSQLParserRULE_window_clause                                 = 107
	GoogleSQLParserRULE_window_clause_prefix                          = 108
	GoogleSQLParserRULE_window_definition                             = 109
	GoogleSQLParserRULE_where_clause                                  = 110
	GoogleSQLParserRULE_having_clause                                 = 111
	GoogleSQLParserRULE_group_by_clause                               = 112
	GoogleSQLParserRULE_group_by_all                                  = 113
	GoogleSQLParserRULE_select_clause                                 = 114
	GoogleSQLParserRULE_opt_select_as_clause                          = 115
	GoogleSQLParserRULE_opt_select_with                               = 116
	GoogleSQLParserRULE_from_clause                                   = 117
	GoogleSQLParserRULE_from_clause_contents                          = 118
	GoogleSQLParserRULE_from_clause_contents_suffix                   = 119
	GoogleSQLParserRULE_table_primary                                 = 120
	GoogleSQLParserRULE_tvf_with_suffixes                             = 121
	GoogleSQLParserRULE_pivot_or_unpivot_clause_and_aliases           = 122
	GoogleSQLParserRULE_as_alias                                      = 123
	GoogleSQLParserRULE_sample_clause                                 = 124
	GoogleSQLParserRULE_opt_sample_clause_suffix                      = 125
	GoogleSQLParserRULE_repeatable_clause                             = 126
	GoogleSQLParserRULE_possibly_cast_int_literal_or_parameter        = 127
	GoogleSQLParserRULE_cast_int_literal_or_parameter                 = 128
	GoogleSQLParserRULE_sample_size                                   = 129
	GoogleSQLParserRULE_sample_size_value                             = 130
	GoogleSQLParserRULE_sample_size_unit                              = 131
	GoogleSQLParserRULE_partition_by_clause_prefix_no_hint            = 132
	GoogleSQLParserRULE_match_recognize_clause                        = 133
	GoogleSQLParserRULE_row_pattern_expr                              = 134
	GoogleSQLParserRULE_row_pattern_concatenation                     = 135
	GoogleSQLParserRULE_row_pattern_factor                            = 136
	GoogleSQLParserRULE_select_list_prefix_with_as_aliases            = 137
	GoogleSQLParserRULE_select_column_expr_with_as_alias              = 138
	GoogleSQLParserRULE_table_subquery                                = 139
	GoogleSQLParserRULE_join                                          = 140
	GoogleSQLParserRULE_join_item                                     = 141
	GoogleSQLParserRULE_on_or_using_clause_list                       = 142
	GoogleSQLParserRULE_on_or_using_clause                            = 143
	GoogleSQLParserRULE_using_clause                                  = 144
	GoogleSQLParserRULE_join_hint                                     = 145
	GoogleSQLParserRULE_table_path_expression                         = 146
	GoogleSQLParserRULE_opt_at_system_time                            = 147
	GoogleSQLParserRULE_opt_with_offset_and_alias                     = 148
	GoogleSQLParserRULE_opt_pivot_or_unpivot_clause_and_alias         = 149
	GoogleSQLParserRULE_table_path_expression_base                    = 150
	GoogleSQLParserRULE_maybe_slashed_or_dashed_path_expression       = 151
	GoogleSQLParserRULE_maybe_dashed_path_expression                  = 152
	GoogleSQLParserRULE_dashed_path_expression                        = 153
	GoogleSQLParserRULE_dashed_identifier                             = 154
	GoogleSQLParserRULE_slashed_identifier                            = 155
	GoogleSQLParserRULE_identifier_or_integer                         = 156
	GoogleSQLParserRULE_slashed_identifier_separator                  = 157
	GoogleSQLParserRULE_slashed_path_expression                       = 158
	GoogleSQLParserRULE_unnest_expression                             = 159
	GoogleSQLParserRULE_unnest_expression_prefix                      = 160
	GoogleSQLParserRULE_opt_array_zip_mode                            = 161
	GoogleSQLParserRULE_expression_with_opt_alias                     = 162
	GoogleSQLParserRULE_tvf_prefix                                    = 163
	GoogleSQLParserRULE_tvf_argument                                  = 164
	GoogleSQLParserRULE_connection_clause                             = 165
	GoogleSQLParserRULE_path_expression_or_default                    = 166
	GoogleSQLParserRULE_descriptor_argument                           = 167
	GoogleSQLParserRULE_descriptor_column_list                        = 168
	GoogleSQLParserRULE_descriptor_column                             = 169
	GoogleSQLParserRULE_table_clause                                  = 170
	GoogleSQLParserRULE_model_clause                                  = 171
	GoogleSQLParserRULE_qualify_clause_nonreserved                    = 172
	GoogleSQLParserRULE_unpivot_clause                                = 173
	GoogleSQLParserRULE_unpivot_in_item_list                          = 174
	GoogleSQLParserRULE_unpivot_in_item_list_prefix                   = 175
	GoogleSQLParserRULE_unpivot_in_item                               = 176
	GoogleSQLParserRULE_opt_as_string_or_integer                      = 177
	GoogleSQLParserRULE_path_expression_list_with_opt_parens          = 178
	GoogleSQLParserRULE_path_expression_list                          = 179
	GoogleSQLParserRULE_unpivot_nulls_filter                          = 180
	GoogleSQLParserRULE_pivot_clause                                  = 181
	GoogleSQLParserRULE_pivot_expression_list                         = 182
	GoogleSQLParserRULE_pivot_expression                              = 183
	GoogleSQLParserRULE_pivot_value_list                              = 184
	GoogleSQLParserRULE_pivot_value                                   = 185
	GoogleSQLParserRULE_tvf_prefix_no_args                            = 186
	GoogleSQLParserRULE_join_type                                     = 187
	GoogleSQLParserRULE_opt_natural                                   = 188
	GoogleSQLParserRULE_on_clause                                     = 189
	GoogleSQLParserRULE_select_list                                   = 190
	GoogleSQLParserRULE_select_list_item                              = 191
	GoogleSQLParserRULE_select_column_star                            = 192
	GoogleSQLParserRULE_select_column_expr                            = 193
	GoogleSQLParserRULE_select_column_dot_star                        = 194
	GoogleSQLParserRULE_star_modifiers                                = 195
	GoogleSQLParserRULE_star_except_list                              = 196
	GoogleSQLParserRULE_star_replace_list                             = 197
	GoogleSQLParserRULE_star_replace_item                             = 198
	GoogleSQLParserRULE_expression                                    = 199
	GoogleSQLParserRULE_expression_higher_prec_than_and               = 200
	GoogleSQLParserRULE_expression_maybe_parenthesized_not_a_query    = 201
	GoogleSQLParserRULE_parenthesized_in_rhs                          = 202
	GoogleSQLParserRULE_unary_operator                                = 203
	GoogleSQLParserRULE_comparative_operator                          = 204
	GoogleSQLParserRULE_shift_operator                                = 205
	GoogleSQLParserRULE_additive_operator                             = 206
	GoogleSQLParserRULE_multiplicative_operator                       = 207
	GoogleSQLParserRULE_is_operator                                   = 208
	GoogleSQLParserRULE_between_operator                              = 209
	GoogleSQLParserRULE_in_operator                                   = 210
	GoogleSQLParserRULE_distinct_operator                             = 211
	GoogleSQLParserRULE_parenthesized_query                           = 212
	GoogleSQLParserRULE_parenthesized_expression_not_a_query          = 213
	GoogleSQLParserRULE_parenthesized_anysomeall_list_in_rhs          = 214
	GoogleSQLParserRULE_and_expression                                = 215
	GoogleSQLParserRULE_in_list_two_or_more_prefix                    = 216
	GoogleSQLParserRULE_any_some_all                                  = 217
	GoogleSQLParserRULE_like_operator                                 = 218
	GoogleSQLParserRULE_expression_subquery_with_keyword              = 219
	GoogleSQLParserRULE_struct_constructor                            = 220
	GoogleSQLParserRULE_struct_constructor_prefix_with_keyword        = 221
	GoogleSQLParserRULE_struct_constructor_arg                        = 222
	GoogleSQLParserRULE_struct_constructor_prefix_without_keyword     = 223
	GoogleSQLParserRULE_struct_constructor_prefix_with_keyword_no_arg = 224
	GoogleSQLParserRULE_interval_expression                           = 225
	GoogleSQLParserRULE_function_call_expression_with_clauses         = 226
	GoogleSQLParserRULE_function_call_expression_with_clauses_suffix  = 227
	GoogleSQLParserRULE_over_clause                                   = 228
	GoogleSQLParserRULE_window_specification                          = 229
	GoogleSQLParserRULE_opt_window_frame_clause                       = 230
	GoogleSQLParserRULE_window_frame_bound                            = 231
	GoogleSQLParserRULE_preceding_or_following                        = 232
	GoogleSQLParserRULE_frame_unit                                    = 233
	GoogleSQLParserRULE_partition_by_clause                           = 234
	GoogleSQLParserRULE_partition_by_clause_prefix                    = 235
	GoogleSQLParserRULE_with_group_rows                               = 236
	GoogleSQLParserRULE_with_report_modifier                          = 237
	GoogleSQLParserRULE_clamped_between_modifier                      = 238
	GoogleSQLParserRULE_with_report_format                            = 239
	GoogleSQLParserRULE_options_list                                  = 240
	GoogleSQLParserRULE_options_list_prefix                           = 241
	GoogleSQLParserRULE_options_entry                                 = 242
	GoogleSQLParserRULE_expression_or_proto                           = 243
	GoogleSQLParserRULE_options_assignment_operator                   = 244
	GoogleSQLParserRULE_opt_null_handling_modifier                    = 245
	GoogleSQLParserRULE_function_call_argument                        = 246
	GoogleSQLParserRULE_sequence_arg                                  = 247
	GoogleSQLParserRULE_named_argument                                = 248
	GoogleSQLParserRULE_lambda_argument                               = 249
	GoogleSQLParserRULE_lambda_argument_list                          = 250
	GoogleSQLParserRULE_limit_offset_clause                           = 251
	GoogleSQLParserRULE_opt_having_or_group_by_modifier               = 252
	GoogleSQLParserRULE_group_by_clause_prefix                        = 253
	GoogleSQLParserRULE_group_by_preamble                             = 254
	GoogleSQLParserRULE_opt_and_order                                 = 255
	GoogleSQLParserRULE_hint                                          = 256
	GoogleSQLParserRULE_hint_with_body                                = 257
	GoogleSQLParserRULE_hint_with_body_prefix                         = 258
	GoogleSQLParserRULE_hint_entry                                    = 259
	GoogleSQLParserRULE_identifier_in_hints                           = 260
	GoogleSQLParserRULE_extra_identifier_in_hints_name                = 261
	GoogleSQLParserRULE_grouping_item                                 = 262
	GoogleSQLParserRULE_grouping_set_list                             = 263
	GoogleSQLParserRULE_grouping_set                                  = 264
	GoogleSQLParserRULE_cube_list                                     = 265
	GoogleSQLParserRULE_rollup_list                                   = 266
	GoogleSQLParserRULE_opt_as_alias_with_required_as                 = 267
	GoogleSQLParserRULE_opt_grouping_item_order                       = 268
	GoogleSQLParserRULE_opt_selection_item_order                      = 269
	GoogleSQLParserRULE_asc_or_desc                                   = 270
	GoogleSQLParserRULE_null_order                                    = 271
	GoogleSQLParserRULE_function_name_from_keyword                    = 272
	GoogleSQLParserRULE_replace_fields_expression                     = 273
	GoogleSQLParserRULE_replace_fields_prefix                         = 274
	GoogleSQLParserRULE_replace_fields_arg                            = 275
	GoogleSQLParserRULE_generalized_path_expression                   = 276
	GoogleSQLParserRULE_generalized_extension_path                    = 277
	GoogleSQLParserRULE_with_expression                               = 278
	GoogleSQLParserRULE_with_expression_variable_prefix               = 279
	GoogleSQLParserRULE_with_expression_variable                      = 280
	GoogleSQLParserRULE_extract_expression                            = 281
	GoogleSQLParserRULE_extract_expression_base                       = 282
	GoogleSQLParserRULE_opt_format                                    = 283
	GoogleSQLParserRULE_opt_at_time_zone                              = 284
	GoogleSQLParserRULE_cast_expression                               = 285
	GoogleSQLParserRULE_case_expression                               = 286
	GoogleSQLParserRULE_case_expression_prefix                        = 287
	GoogleSQLParserRULE_case_value_expression_prefix                  = 288
	GoogleSQLParserRULE_case_no_value_expression_prefix               = 289
	GoogleSQLParserRULE_struct_braced_constructor                     = 290
	GoogleSQLParserRULE_braced_new_constructor                        = 291
	GoogleSQLParserRULE_braced_constructor                            = 292
	GoogleSQLParserRULE_braced_constructor_start                      = 293
	GoogleSQLParserRULE_braced_constructor_prefix                     = 294
	GoogleSQLParserRULE_braced_constructor_field                      = 295
	GoogleSQLParserRULE_braced_constructor_lhs                        = 296
	GoogleSQLParserRULE_braced_constructor_field_value                = 297
	GoogleSQLParserRULE_braced_constructor_extension                  = 298
	GoogleSQLParserRULE_new_constructor                               = 299
	GoogleSQLParserRULE_new_constructor_prefix                        = 300
	GoogleSQLParserRULE_new_constructor_prefix_no_arg                 = 301
	GoogleSQLParserRULE_new_constructor_arg                           = 302
	GoogleSQLParserRULE_array_constructor                             = 303
	GoogleSQLParserRULE_array_constructor_prefix                      = 304
	GoogleSQLParserRULE_array_constructor_prefix_no_expressions       = 305
	GoogleSQLParserRULE_range_literal                                 = 306
	GoogleSQLParserRULE_range_type                                    = 307
	GoogleSQLParserRULE_type                                          = 308
	GoogleSQLParserRULE_collate_clause                                = 309
	GoogleSQLParserRULE_string_literal_or_parameter                   = 310
	GoogleSQLParserRULE_system_variable_expression                    = 311
	GoogleSQLParserRULE_parameter_expression                          = 312
	GoogleSQLParserRULE_named_parameter_expression                    = 313
	GoogleSQLParserRULE_opt_type_parameters                           = 314
	GoogleSQLParserRULE_type_parameters_prefix                        = 315
	GoogleSQLParserRULE_type_parameter                                = 316
	GoogleSQLParserRULE_raw_type                                      = 317
	GoogleSQLParserRULE_map_type                                      = 318
	GoogleSQLParserRULE_function_type                                 = 319
	GoogleSQLParserRULE_function_type_prefix                          = 320
	GoogleSQLParserRULE_type_name                                     = 321
	GoogleSQLParserRULE_path_expression                               = 322
	GoogleSQLParserRULE_identifier                                    = 323
	GoogleSQLParserRULE_keyword_as_identifier                         = 324
	GoogleSQLParserRULE_common_keyword_as_identifier                  = 325
	GoogleSQLParserRULE_token_identifier                              = 326
	GoogleSQLParserRULE_struct_type                                   = 327
	GoogleSQLParserRULE_struct_type_prefix                            = 328
	GoogleSQLParserRULE_struct_field                                  = 329
	GoogleSQLParserRULE_array_type                                    = 330
	GoogleSQLParserRULE_template_type_open                            = 331
	GoogleSQLParserRULE_template_type_close                           = 332
	GoogleSQLParserRULE_date_or_time_literal                          = 333
	GoogleSQLParserRULE_date_or_time_literal_kind                     = 334
	GoogleSQLParserRULE_floating_point_literal                        = 335
	GoogleSQLParserRULE_json_literal                                  = 336
	GoogleSQLParserRULE_bignumeric_literal                            = 337
	GoogleSQLParserRULE_bignumeric_literal_prefix                     = 338
	GoogleSQLParserRULE_numeric_literal                               = 339
	GoogleSQLParserRULE_numeric_literal_prefix                        = 340
	GoogleSQLParserRULE_integer_literal                               = 341
	GoogleSQLParserRULE_bytes_literal                                 = 342
	GoogleSQLParserRULE_null_literal                                  = 343
	GoogleSQLParserRULE_boolean_literal                               = 344
	GoogleSQLParserRULE_string_literal                                = 345
	GoogleSQLParserRULE_string_literal_component                      = 346
	GoogleSQLParserRULE_bytes_literal_component                       = 347
)

// IRootContext is an interface to support dynamic dispatch.
type IRootContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Stmts() IStmtsContext
	EOF() antlr.TerminalNode

	// IsRootContext differentiates from other interfaces.
	IsRootContext()
}

type RootContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRootContext() *RootContext {
	var p = new(RootContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_root
	return p
}

func InitEmptyRootContext(p *RootContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_root
}

func (*RootContext) IsRootContext() {}

func NewRootContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RootContext {
	var p = new(RootContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_root

	return p
}

func (s *RootContext) GetParser() antlr.Parser { return s.parser }

func (s *RootContext) Stmts() IStmtsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStmtsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStmtsContext)
}

func (s *RootContext) EOF() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEOF, 0)
}

func (s *RootContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RootContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RootContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRoot(s)
	}
}

func (s *RootContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRoot(s)
	}
}

func (s *RootContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRoot(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Root() (localctx IRootContext) {
	localctx = NewRootContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, GoogleSQLParserRULE_root)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(696)
		p.Stmts()
	}
	{
		p.SetState(697)
		p.Match(GoogleSQLParserEOF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStmtsContext is an interface to support dynamic dispatch.
type IStmtsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllStmt() []IStmtContext
	Stmt(i int) IStmtContext
	AllSEMI_SYMBOL() []antlr.TerminalNode
	SEMI_SYMBOL(i int) antlr.TerminalNode

	// IsStmtsContext differentiates from other interfaces.
	IsStmtsContext()
}

type StmtsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStmtsContext() *StmtsContext {
	var p = new(StmtsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_stmts
	return p
}

func InitEmptyStmtsContext(p *StmtsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_stmts
}

func (*StmtsContext) IsStmtsContext() {}

func NewStmtsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StmtsContext {
	var p = new(StmtsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_stmts

	return p
}

func (s *StmtsContext) GetParser() antlr.Parser { return s.parser }

func (s *StmtsContext) AllStmt() []IStmtContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStmtContext); ok {
			len++
		}
	}

	tst := make([]IStmtContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStmtContext); ok {
			tst[i] = t.(IStmtContext)
			i++
		}
	}

	return tst
}

func (s *StmtsContext) Stmt(i int) IStmtContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStmtContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStmtContext)
}

func (s *StmtsContext) AllSEMI_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserSEMI_SYMBOL)
}

func (s *StmtsContext) SEMI_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSEMI_SYMBOL, i)
}

func (s *StmtsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StmtsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStmts(s)
	}
}

func (s *StmtsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStmts(s)
	}
}

func (s *StmtsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStmts(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Stmts() (localctx IStmtsContext) {
	localctx = NewStmtsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, GoogleSQLParserRULE_stmts)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(699)
		p.Stmt()
	}
	p.SetState(704)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 0, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(700)
				p.Match(GoogleSQLParserSEMI_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(701)
				p.Stmt()
			}

		}
		p.SetState(706)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 0, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(708)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserSEMI_SYMBOL {
		{
			p.SetState(707)
			p.Match(GoogleSQLParserSEMI_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStmtContext is an interface to support dynamic dispatch.
type IStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Query_statement() IQuery_statementContext
	Alter_statement() IAlter_statementContext

	// IsStmtContext differentiates from other interfaces.
	IsStmtContext()
}

type StmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStmtContext() *StmtContext {
	var p = new(StmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_stmt
	return p
}

func InitEmptyStmtContext(p *StmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_stmt
}

func (*StmtContext) IsStmtContext() {}

func NewStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StmtContext {
	var p = new(StmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_stmt

	return p
}

func (s *StmtContext) GetParser() antlr.Parser { return s.parser }

func (s *StmtContext) Query_statement() IQuery_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuery_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuery_statementContext)
}

func (s *StmtContext) Alter_statement() IAlter_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_statementContext)
}

func (s *StmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStmt(s)
	}
}

func (s *StmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStmt(s)
	}
}

func (s *StmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Stmt() (localctx IStmtContext) {
	localctx = NewStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, GoogleSQLParserRULE_stmt)
	p.SetState(712)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserLR_BRACKET_SYMBOL, GoogleSQLParserFROM_SYMBOL, GoogleSQLParserSELECT_SYMBOL, GoogleSQLParserWITH_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(710)
			p.Query_statement()
		}

	case GoogleSQLParserALTER_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(711)
			p.Alter_statement()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQuery_statementContext is an interface to support dynamic dispatch.
type IQuery_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Query() IQueryContext

	// IsQuery_statementContext differentiates from other interfaces.
	IsQuery_statementContext()
}

type Query_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuery_statementContext() *Query_statementContext {
	var p = new(Query_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_statement
	return p
}

func InitEmptyQuery_statementContext(p *Query_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_statement
}

func (*Query_statementContext) IsQuery_statementContext() {}

func NewQuery_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Query_statementContext {
	var p = new(Query_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_query_statement

	return p
}

func (s *Query_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Query_statementContext) Query() IQueryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQueryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *Query_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Query_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterQuery_statement(s)
	}
}

func (s *Query_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitQuery_statement(s)
	}
}

func (s *Query_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitQuery_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Query_statement() (localctx IQuery_statementContext) {
	localctx = NewQuery_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, GoogleSQLParserRULE_query_statement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(714)
		p.Query()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAlter_statementContext is an interface to support dynamic dispatch.
type IAlter_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ALTER_SYMBOL() antlr.TerminalNode
	Table_or_table_function() ITable_or_table_functionContext
	Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext
	Alter_action_list() IAlter_action_listContext
	Opt_if_exists() IOpt_if_existsContext
	Schema_object_kind() ISchema_object_kindContext
	Path_expression() IPath_expressionContext
	Generic_entity_type() IGeneric_entity_typeContext
	PRIVILEGE_SYMBOL() antlr.TerminalNode
	RESTRICTION_SYMBOL() antlr.TerminalNode
	AllON_SYMBOL() []antlr.TerminalNode
	ON_SYMBOL(i int) antlr.TerminalNode
	Privilege_list() IPrivilege_listContext
	Identifier() IIdentifierContext
	ROW_SYMBOL() antlr.TerminalNode
	ACCESS_SYMBOL() antlr.TerminalNode
	POLICY_SYMBOL() antlr.TerminalNode
	Row_access_policy_alter_action_list() IRow_access_policy_alter_action_listContext
	ALL_SYMBOL() antlr.TerminalNode
	POLICIES_SYMBOL() antlr.TerminalNode
	Row_access_policy_alter_action() IRow_access_policy_alter_actionContext

	// IsAlter_statementContext differentiates from other interfaces.
	IsAlter_statementContext()
}

type Alter_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_statementContext() *Alter_statementContext {
	var p = new(Alter_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_alter_statement
	return p
}

func InitEmptyAlter_statementContext(p *Alter_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_alter_statement
}

func (*Alter_statementContext) IsAlter_statementContext() {}

func NewAlter_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_statementContext {
	var p = new(Alter_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_alter_statement

	return p
}

func (s *Alter_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_statementContext) ALTER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserALTER_SYMBOL, 0)
}

func (s *Alter_statementContext) Table_or_table_function() ITable_or_table_functionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_or_table_functionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_or_table_functionContext)
}

func (s *Alter_statementContext) Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMaybe_dashed_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMaybe_dashed_path_expressionContext)
}

func (s *Alter_statementContext) Alter_action_list() IAlter_action_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_action_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_action_listContext)
}

func (s *Alter_statementContext) Opt_if_exists() IOpt_if_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_if_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_if_existsContext)
}

func (s *Alter_statementContext) Schema_object_kind() ISchema_object_kindContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_object_kindContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_object_kindContext)
}

func (s *Alter_statementContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Alter_statementContext) Generic_entity_type() IGeneric_entity_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGeneric_entity_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGeneric_entity_typeContext)
}

func (s *Alter_statementContext) PRIVILEGE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPRIVILEGE_SYMBOL, 0)
}

func (s *Alter_statementContext) RESTRICTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRESTRICTION_SYMBOL, 0)
}

func (s *Alter_statementContext) AllON_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserON_SYMBOL)
}

func (s *Alter_statementContext) ON_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserON_SYMBOL, i)
}

func (s *Alter_statementContext) Privilege_list() IPrivilege_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrivilege_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrivilege_listContext)
}

func (s *Alter_statementContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_statementContext) ROW_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserROW_SYMBOL, 0)
}

func (s *Alter_statementContext) ACCESS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserACCESS_SYMBOL, 0)
}

func (s *Alter_statementContext) POLICY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPOLICY_SYMBOL, 0)
}

func (s *Alter_statementContext) Row_access_policy_alter_action_list() IRow_access_policy_alter_action_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRow_access_policy_alter_action_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRow_access_policy_alter_action_listContext)
}

func (s *Alter_statementContext) ALL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserALL_SYMBOL, 0)
}

func (s *Alter_statementContext) POLICIES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPOLICIES_SYMBOL, 0)
}

func (s *Alter_statementContext) Row_access_policy_alter_action() IRow_access_policy_alter_actionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRow_access_policy_alter_actionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRow_access_policy_alter_actionContext)
}

func (s *Alter_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAlter_statement(s)
	}
}

func (s *Alter_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAlter_statement(s)
	}
}

func (s *Alter_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAlter_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Alter_statement() (localctx IAlter_statementContext) {
	localctx = NewAlter_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, GoogleSQLParserRULE_alter_statement)
	var _la int

	p.SetState(780)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 9, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(716)
			p.Match(GoogleSQLParserALTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(717)
			p.Table_or_table_function()
		}
		p.SetState(719)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(718)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(721)
			p.Maybe_dashed_path_expression()
		}
		{
			p.SetState(722)
			p.Alter_action_list()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(724)
			p.Match(GoogleSQLParserALTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(725)
			p.Schema_object_kind()
		}
		p.SetState(727)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(726)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(729)
			p.Path_expression()
		}
		{
			p.SetState(730)
			p.Alter_action_list()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(732)
			p.Match(GoogleSQLParserALTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(733)
			p.Generic_entity_type()
		}
		p.SetState(735)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(734)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(737)
			p.Path_expression()
		}
		{
			p.SetState(738)
			p.Alter_action_list()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(740)
			p.Match(GoogleSQLParserALTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(741)
			p.Generic_entity_type()
		}
		p.SetState(743)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(742)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(745)
			p.Alter_action_list()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(747)
			p.Match(GoogleSQLParserALTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(748)
			p.Match(GoogleSQLParserPRIVILEGE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(749)
			p.Match(GoogleSQLParserRESTRICTION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(751)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(750)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(753)
			p.Match(GoogleSQLParserON_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(754)
			p.Privilege_list()
		}
		{
			p.SetState(755)
			p.Match(GoogleSQLParserON_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(756)
			p.Identifier()
		}
		{
			p.SetState(757)
			p.Path_expression()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(759)
			p.Match(GoogleSQLParserALTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(760)
			p.Match(GoogleSQLParserROW_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(761)
			p.Match(GoogleSQLParserACCESS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(762)
			p.Match(GoogleSQLParserPOLICY_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(764)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(763)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(766)
			p.Identifier()
		}
		{
			p.SetState(767)
			p.Match(GoogleSQLParserON_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(768)
			p.Path_expression()
		}
		{
			p.SetState(769)
			p.Row_access_policy_alter_action_list()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(771)
			p.Match(GoogleSQLParserALTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(772)
			p.Match(GoogleSQLParserALL_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(773)
			p.Match(GoogleSQLParserROW_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(774)
			p.Match(GoogleSQLParserACCESS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(775)
			p.Match(GoogleSQLParserPOLICIES_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(776)
			p.Match(GoogleSQLParserON_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(777)
			p.Path_expression()
		}
		{
			p.SetState(778)
			p.Row_access_policy_alter_action()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRow_access_policy_alter_action_listContext is an interface to support dynamic dispatch.
type IRow_access_policy_alter_action_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllRow_access_policy_alter_action() []IRow_access_policy_alter_actionContext
	Row_access_policy_alter_action(i int) IRow_access_policy_alter_actionContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsRow_access_policy_alter_action_listContext differentiates from other interfaces.
	IsRow_access_policy_alter_action_listContext()
}

type Row_access_policy_alter_action_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRow_access_policy_alter_action_listContext() *Row_access_policy_alter_action_listContext {
	var p = new(Row_access_policy_alter_action_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_row_access_policy_alter_action_list
	return p
}

func InitEmptyRow_access_policy_alter_action_listContext(p *Row_access_policy_alter_action_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_row_access_policy_alter_action_list
}

func (*Row_access_policy_alter_action_listContext) IsRow_access_policy_alter_action_listContext() {}

func NewRow_access_policy_alter_action_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Row_access_policy_alter_action_listContext {
	var p = new(Row_access_policy_alter_action_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_row_access_policy_alter_action_list

	return p
}

func (s *Row_access_policy_alter_action_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Row_access_policy_alter_action_listContext) AllRow_access_policy_alter_action() []IRow_access_policy_alter_actionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IRow_access_policy_alter_actionContext); ok {
			len++
		}
	}

	tst := make([]IRow_access_policy_alter_actionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IRow_access_policy_alter_actionContext); ok {
			tst[i] = t.(IRow_access_policy_alter_actionContext)
			i++
		}
	}

	return tst
}

func (s *Row_access_policy_alter_action_listContext) Row_access_policy_alter_action(i int) IRow_access_policy_alter_actionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRow_access_policy_alter_actionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRow_access_policy_alter_actionContext)
}

func (s *Row_access_policy_alter_action_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Row_access_policy_alter_action_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Row_access_policy_alter_action_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Row_access_policy_alter_action_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Row_access_policy_alter_action_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRow_access_policy_alter_action_list(s)
	}
}

func (s *Row_access_policy_alter_action_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRow_access_policy_alter_action_list(s)
	}
}

func (s *Row_access_policy_alter_action_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRow_access_policy_alter_action_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Row_access_policy_alter_action_list() (localctx IRow_access_policy_alter_action_listContext) {
	localctx = NewRow_access_policy_alter_action_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, GoogleSQLParserRULE_row_access_policy_alter_action_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(782)
		p.Row_access_policy_alter_action()
	}
	p.SetState(787)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(783)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(784)
			p.Row_access_policy_alter_action()
		}

		p.SetState(789)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRow_access_policy_alter_actionContext is an interface to support dynamic dispatch.
type IRow_access_policy_alter_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Grant_to_clause() IGrant_to_clauseContext
	FILTER_SYMBOL() antlr.TerminalNode
	USING_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	REVOKE_SYMBOL() antlr.TerminalNode
	FROM_SYMBOL() antlr.TerminalNode
	Grantee_list() IGrantee_listContext
	ALL_SYMBOL() antlr.TerminalNode
	RENAME_SYMBOL() antlr.TerminalNode
	TO_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext

	// IsRow_access_policy_alter_actionContext differentiates from other interfaces.
	IsRow_access_policy_alter_actionContext()
}

type Row_access_policy_alter_actionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRow_access_policy_alter_actionContext() *Row_access_policy_alter_actionContext {
	var p = new(Row_access_policy_alter_actionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_row_access_policy_alter_action
	return p
}

func InitEmptyRow_access_policy_alter_actionContext(p *Row_access_policy_alter_actionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_row_access_policy_alter_action
}

func (*Row_access_policy_alter_actionContext) IsRow_access_policy_alter_actionContext() {}

func NewRow_access_policy_alter_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Row_access_policy_alter_actionContext {
	var p = new(Row_access_policy_alter_actionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_row_access_policy_alter_action

	return p
}

func (s *Row_access_policy_alter_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Row_access_policy_alter_actionContext) Grant_to_clause() IGrant_to_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGrant_to_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGrant_to_clauseContext)
}

func (s *Row_access_policy_alter_actionContext) FILTER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFILTER_SYMBOL, 0)
}

func (s *Row_access_policy_alter_actionContext) USING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUSING_SYMBOL, 0)
}

func (s *Row_access_policy_alter_actionContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Row_access_policy_alter_actionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Row_access_policy_alter_actionContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Row_access_policy_alter_actionContext) REVOKE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREVOKE_SYMBOL, 0)
}

func (s *Row_access_policy_alter_actionContext) FROM_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFROM_SYMBOL, 0)
}

func (s *Row_access_policy_alter_actionContext) Grantee_list() IGrantee_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGrantee_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGrantee_listContext)
}

func (s *Row_access_policy_alter_actionContext) ALL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserALL_SYMBOL, 0)
}

func (s *Row_access_policy_alter_actionContext) RENAME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRENAME_SYMBOL, 0)
}

func (s *Row_access_policy_alter_actionContext) TO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTO_SYMBOL, 0)
}

func (s *Row_access_policy_alter_actionContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Row_access_policy_alter_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Row_access_policy_alter_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Row_access_policy_alter_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRow_access_policy_alter_action(s)
	}
}

func (s *Row_access_policy_alter_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRow_access_policy_alter_action(s)
	}
}

func (s *Row_access_policy_alter_actionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRow_access_policy_alter_action(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Row_access_policy_alter_action() (localctx IRow_access_policy_alter_actionContext) {
	localctx = NewRow_access_policy_alter_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, GoogleSQLParserRULE_row_access_policy_alter_action)
	p.SetState(809)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 11, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(790)
			p.Grant_to_clause()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(791)
			p.Match(GoogleSQLParserFILTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(792)
			p.Match(GoogleSQLParserUSING_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(793)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(794)
			p.expression(0)
		}
		{
			p.SetState(795)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(797)
			p.Match(GoogleSQLParserREVOKE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(798)
			p.Match(GoogleSQLParserFROM_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(799)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(800)
			p.Grantee_list()
		}
		{
			p.SetState(801)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(803)
			p.Match(GoogleSQLParserREVOKE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(804)
			p.Match(GoogleSQLParserFROM_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(805)
			p.Match(GoogleSQLParserALL_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(806)
			p.Match(GoogleSQLParserRENAME_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(807)
			p.Match(GoogleSQLParserTO_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(808)
			p.Identifier()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGrant_to_clauseContext is an interface to support dynamic dispatch.
type IGrant_to_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	GRANT_SYMBOL() antlr.TerminalNode
	TO_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Grantee_list() IGrantee_listContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsGrant_to_clauseContext differentiates from other interfaces.
	IsGrant_to_clauseContext()
}

type Grant_to_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGrant_to_clauseContext() *Grant_to_clauseContext {
	var p = new(Grant_to_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_grant_to_clause
	return p
}

func InitEmptyGrant_to_clauseContext(p *Grant_to_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_grant_to_clause
}

func (*Grant_to_clauseContext) IsGrant_to_clauseContext() {}

func NewGrant_to_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Grant_to_clauseContext {
	var p = new(Grant_to_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_grant_to_clause

	return p
}

func (s *Grant_to_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Grant_to_clauseContext) GRANT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGRANT_SYMBOL, 0)
}

func (s *Grant_to_clauseContext) TO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTO_SYMBOL, 0)
}

func (s *Grant_to_clauseContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Grant_to_clauseContext) Grantee_list() IGrantee_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGrantee_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGrantee_listContext)
}

func (s *Grant_to_clauseContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Grant_to_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Grant_to_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Grant_to_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGrant_to_clause(s)
	}
}

func (s *Grant_to_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGrant_to_clause(s)
	}
}

func (s *Grant_to_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGrant_to_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Grant_to_clause() (localctx IGrant_to_clauseContext) {
	localctx = NewGrant_to_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, GoogleSQLParserRULE_grant_to_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(811)
		p.Match(GoogleSQLParserGRANT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(812)
		p.Match(GoogleSQLParserTO_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(813)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(814)
		p.Grantee_list()
	}
	{
		p.SetState(815)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGrantee_listContext is an interface to support dynamic dispatch.
type IGrantee_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllString_literal() []IString_literalContext
	String_literal(i int) IString_literalContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsGrantee_listContext differentiates from other interfaces.
	IsGrantee_listContext()
}

type Grantee_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGrantee_listContext() *Grantee_listContext {
	var p = new(Grantee_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_grantee_list
	return p
}

func InitEmptyGrantee_listContext(p *Grantee_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_grantee_list
}

func (*Grantee_listContext) IsGrantee_listContext() {}

func NewGrantee_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Grantee_listContext {
	var p = new(Grantee_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_grantee_list

	return p
}

func (s *Grantee_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Grantee_listContext) AllString_literal() []IString_literalContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IString_literalContext); ok {
			len++
		}
	}

	tst := make([]IString_literalContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IString_literalContext); ok {
			tst[i] = t.(IString_literalContext)
			i++
		}
	}

	return tst
}

func (s *Grantee_listContext) String_literal(i int) IString_literalContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Grantee_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Grantee_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Grantee_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Grantee_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Grantee_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGrantee_list(s)
	}
}

func (s *Grantee_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGrantee_list(s)
	}
}

func (s *Grantee_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGrantee_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Grantee_list() (localctx IGrantee_listContext) {
	localctx = NewGrantee_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, GoogleSQLParserRULE_grantee_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(817)
		p.string_literal(0)
	}
	p.SetState(822)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(818)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(819)
			p.string_literal(0)
		}

		p.SetState(824)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrivilege_listContext is an interface to support dynamic dispatch.
type IPrivilege_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllPrivilege() []IPrivilegeContext
	Privilege(i int) IPrivilegeContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsPrivilege_listContext differentiates from other interfaces.
	IsPrivilege_listContext()
}

type Privilege_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrivilege_listContext() *Privilege_listContext {
	var p = new(Privilege_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_privilege_list
	return p
}

func InitEmptyPrivilege_listContext(p *Privilege_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_privilege_list
}

func (*Privilege_listContext) IsPrivilege_listContext() {}

func NewPrivilege_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Privilege_listContext {
	var p = new(Privilege_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_privilege_list

	return p
}

func (s *Privilege_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Privilege_listContext) AllPrivilege() []IPrivilegeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPrivilegeContext); ok {
			len++
		}
	}

	tst := make([]IPrivilegeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPrivilegeContext); ok {
			tst[i] = t.(IPrivilegeContext)
			i++
		}
	}

	return tst
}

func (s *Privilege_listContext) Privilege(i int) IPrivilegeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrivilegeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrivilegeContext)
}

func (s *Privilege_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Privilege_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Privilege_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Privilege_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Privilege_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPrivilege_list(s)
	}
}

func (s *Privilege_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPrivilege_list(s)
	}
}

func (s *Privilege_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPrivilege_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Privilege_list() (localctx IPrivilege_listContext) {
	localctx = NewPrivilege_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, GoogleSQLParserRULE_privilege_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(825)
		p.Privilege()
	}
	p.SetState(830)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(826)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(827)
			p.Privilege()
		}

		p.SetState(832)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrivilegeContext is an interface to support dynamic dispatch.
type IPrivilegeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Privilege_name() IPrivilege_nameContext
	Path_expression_list_with_parens() IPath_expression_list_with_parensContext

	// IsPrivilegeContext differentiates from other interfaces.
	IsPrivilegeContext()
}

type PrivilegeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrivilegeContext() *PrivilegeContext {
	var p = new(PrivilegeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_privilege
	return p
}

func InitEmptyPrivilegeContext(p *PrivilegeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_privilege
}

func (*PrivilegeContext) IsPrivilegeContext() {}

func NewPrivilegeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrivilegeContext {
	var p = new(PrivilegeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_privilege

	return p
}

func (s *PrivilegeContext) GetParser() antlr.Parser { return s.parser }

func (s *PrivilegeContext) Privilege_name() IPrivilege_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrivilege_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrivilege_nameContext)
}

func (s *PrivilegeContext) Path_expression_list_with_parens() IPath_expression_list_with_parensContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expression_list_with_parensContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expression_list_with_parensContext)
}

func (s *PrivilegeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrivilegeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrivilegeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPrivilege(s)
	}
}

func (s *PrivilegeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPrivilege(s)
	}
}

func (s *PrivilegeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPrivilege(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Privilege() (localctx IPrivilegeContext) {
	localctx = NewPrivilegeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, GoogleSQLParserRULE_privilege)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(833)
		p.Privilege_name()
	}
	p.SetState(835)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserLR_BRACKET_SYMBOL {
		{
			p.SetState(834)
			p.Path_expression_list_with_parens()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPath_expression_list_with_parensContext is an interface to support dynamic dispatch.
type IPath_expression_list_with_parensContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Path_expression_list() IPath_expression_listContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsPath_expression_list_with_parensContext differentiates from other interfaces.
	IsPath_expression_list_with_parensContext()
}

type Path_expression_list_with_parensContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPath_expression_list_with_parensContext() *Path_expression_list_with_parensContext {
	var p = new(Path_expression_list_with_parensContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_path_expression_list_with_parens
	return p
}

func InitEmptyPath_expression_list_with_parensContext(p *Path_expression_list_with_parensContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_path_expression_list_with_parens
}

func (*Path_expression_list_with_parensContext) IsPath_expression_list_with_parensContext() {}

func NewPath_expression_list_with_parensContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Path_expression_list_with_parensContext {
	var p = new(Path_expression_list_with_parensContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_path_expression_list_with_parens

	return p
}

func (s *Path_expression_list_with_parensContext) GetParser() antlr.Parser { return s.parser }

func (s *Path_expression_list_with_parensContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Path_expression_list_with_parensContext) Path_expression_list() IPath_expression_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expression_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expression_listContext)
}

func (s *Path_expression_list_with_parensContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Path_expression_list_with_parensContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Path_expression_list_with_parensContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Path_expression_list_with_parensContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPath_expression_list_with_parens(s)
	}
}

func (s *Path_expression_list_with_parensContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPath_expression_list_with_parens(s)
	}
}

func (s *Path_expression_list_with_parensContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPath_expression_list_with_parens(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Path_expression_list_with_parens() (localctx IPath_expression_list_with_parensContext) {
	localctx = NewPath_expression_list_with_parensContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, GoogleSQLParserRULE_path_expression_list_with_parens)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(837)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(838)
		p.Path_expression_list()
	}
	{
		p.SetState(839)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrivilege_nameContext is an interface to support dynamic dispatch.
type IPrivilege_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	SELECT_SYMBOL() antlr.TerminalNode

	// IsPrivilege_nameContext differentiates from other interfaces.
	IsPrivilege_nameContext()
}

type Privilege_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrivilege_nameContext() *Privilege_nameContext {
	var p = new(Privilege_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_privilege_name
	return p
}

func InitEmptyPrivilege_nameContext(p *Privilege_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_privilege_name
}

func (*Privilege_nameContext) IsPrivilege_nameContext() {}

func NewPrivilege_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Privilege_nameContext {
	var p = new(Privilege_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_privilege_name

	return p
}

func (s *Privilege_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Privilege_nameContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Privilege_nameContext) SELECT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSELECT_SYMBOL, 0)
}

func (s *Privilege_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Privilege_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Privilege_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPrivilege_name(s)
	}
}

func (s *Privilege_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPrivilege_name(s)
	}
}

func (s *Privilege_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPrivilege_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Privilege_name() (localctx IPrivilege_nameContext) {
	localctx = NewPrivilege_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, GoogleSQLParserRULE_privilege_name)
	p.SetState(843)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(841)
			p.Identifier()
		}

	case GoogleSQLParserSELECT_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(842)
			p.Match(GoogleSQLParserSELECT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGeneric_entity_typeContext is an interface to support dynamic dispatch.
type IGeneric_entity_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Generic_entity_type_unchecked() IGeneric_entity_type_uncheckedContext

	// IsGeneric_entity_typeContext differentiates from other interfaces.
	IsGeneric_entity_typeContext()
}

type Generic_entity_typeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGeneric_entity_typeContext() *Generic_entity_typeContext {
	var p = new(Generic_entity_typeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_generic_entity_type
	return p
}

func InitEmptyGeneric_entity_typeContext(p *Generic_entity_typeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_generic_entity_type
}

func (*Generic_entity_typeContext) IsGeneric_entity_typeContext() {}

func NewGeneric_entity_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Generic_entity_typeContext {
	var p = new(Generic_entity_typeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_generic_entity_type

	return p
}

func (s *Generic_entity_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Generic_entity_typeContext) Generic_entity_type_unchecked() IGeneric_entity_type_uncheckedContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGeneric_entity_type_uncheckedContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGeneric_entity_type_uncheckedContext)
}

func (s *Generic_entity_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Generic_entity_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Generic_entity_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGeneric_entity_type(s)
	}
}

func (s *Generic_entity_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGeneric_entity_type(s)
	}
}

func (s *Generic_entity_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGeneric_entity_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Generic_entity_type() (localctx IGeneric_entity_typeContext) {
	localctx = NewGeneric_entity_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, GoogleSQLParserRULE_generic_entity_type)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(845)
		p.Generic_entity_type_unchecked()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGeneric_entity_type_uncheckedContext is an interface to support dynamic dispatch.
type IGeneric_entity_type_uncheckedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode
	PROJECT_SYMBOL() antlr.TerminalNode

	// IsGeneric_entity_type_uncheckedContext differentiates from other interfaces.
	IsGeneric_entity_type_uncheckedContext()
}

type Generic_entity_type_uncheckedContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGeneric_entity_type_uncheckedContext() *Generic_entity_type_uncheckedContext {
	var p = new(Generic_entity_type_uncheckedContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_generic_entity_type_unchecked
	return p
}

func InitEmptyGeneric_entity_type_uncheckedContext(p *Generic_entity_type_uncheckedContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_generic_entity_type_unchecked
}

func (*Generic_entity_type_uncheckedContext) IsGeneric_entity_type_uncheckedContext() {}

func NewGeneric_entity_type_uncheckedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Generic_entity_type_uncheckedContext {
	var p = new(Generic_entity_type_uncheckedContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_generic_entity_type_unchecked

	return p
}

func (s *Generic_entity_type_uncheckedContext) GetParser() antlr.Parser { return s.parser }

func (s *Generic_entity_type_uncheckedContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIDENTIFIER, 0)
}

func (s *Generic_entity_type_uncheckedContext) PROJECT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPROJECT_SYMBOL, 0)
}

func (s *Generic_entity_type_uncheckedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Generic_entity_type_uncheckedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Generic_entity_type_uncheckedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGeneric_entity_type_unchecked(s)
	}
}

func (s *Generic_entity_type_uncheckedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGeneric_entity_type_unchecked(s)
	}
}

func (s *Generic_entity_type_uncheckedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGeneric_entity_type_unchecked(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Generic_entity_type_unchecked() (localctx IGeneric_entity_type_uncheckedContext) {
	localctx = NewGeneric_entity_type_uncheckedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, GoogleSQLParserRULE_generic_entity_type_unchecked)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(847)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserPROJECT_SYMBOL || _la == GoogleSQLParserIDENTIFIER) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISchema_object_kindContext is an interface to support dynamic dispatch.
type ISchema_object_kindContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AGGREGATE_SYMBOL() antlr.TerminalNode
	FUNCTION_SYMBOL() antlr.TerminalNode
	APPROX_SYMBOL() antlr.TerminalNode
	VIEW_SYMBOL() antlr.TerminalNode
	CONNECTION_SYMBOL() antlr.TerminalNode
	CONSTANT_SYMBOL() antlr.TerminalNode
	DATABASE_SYMBOL() antlr.TerminalNode
	EXTERNAL_SYMBOL() antlr.TerminalNode
	Table_or_table_function() ITable_or_table_functionContext
	SCHEMA_SYMBOL() antlr.TerminalNode
	INDEX_SYMBOL() antlr.TerminalNode
	MATERIALIZED_SYMBOL() antlr.TerminalNode
	MODEL_SYMBOL() antlr.TerminalNode
	PROCEDURE_SYMBOL() antlr.TerminalNode

	// IsSchema_object_kindContext differentiates from other interfaces.
	IsSchema_object_kindContext()
}

type Schema_object_kindContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySchema_object_kindContext() *Schema_object_kindContext {
	var p = new(Schema_object_kindContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_schema_object_kind
	return p
}

func InitEmptySchema_object_kindContext(p *Schema_object_kindContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_schema_object_kind
}

func (*Schema_object_kindContext) IsSchema_object_kindContext() {}

func NewSchema_object_kindContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Schema_object_kindContext {
	var p = new(Schema_object_kindContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_schema_object_kind

	return p
}

func (s *Schema_object_kindContext) GetParser() antlr.Parser { return s.parser }

func (s *Schema_object_kindContext) AGGREGATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAGGREGATE_SYMBOL, 0)
}

func (s *Schema_object_kindContext) FUNCTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFUNCTION_SYMBOL, 0)
}

func (s *Schema_object_kindContext) APPROX_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAPPROX_SYMBOL, 0)
}

func (s *Schema_object_kindContext) VIEW_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserVIEW_SYMBOL, 0)
}

func (s *Schema_object_kindContext) CONNECTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCONNECTION_SYMBOL, 0)
}

func (s *Schema_object_kindContext) CONSTANT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCONSTANT_SYMBOL, 0)
}

func (s *Schema_object_kindContext) DATABASE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDATABASE_SYMBOL, 0)
}

func (s *Schema_object_kindContext) EXTERNAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXTERNAL_SYMBOL, 0)
}

func (s *Schema_object_kindContext) Table_or_table_function() ITable_or_table_functionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_or_table_functionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_or_table_functionContext)
}

func (s *Schema_object_kindContext) SCHEMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSCHEMA_SYMBOL, 0)
}

func (s *Schema_object_kindContext) INDEX_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINDEX_SYMBOL, 0)
}

func (s *Schema_object_kindContext) MATERIALIZED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMATERIALIZED_SYMBOL, 0)
}

func (s *Schema_object_kindContext) MODEL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMODEL_SYMBOL, 0)
}

func (s *Schema_object_kindContext) PROCEDURE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPROCEDURE_SYMBOL, 0)
}

func (s *Schema_object_kindContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Schema_object_kindContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Schema_object_kindContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSchema_object_kind(s)
	}
}

func (s *Schema_object_kindContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSchema_object_kind(s)
	}
}

func (s *Schema_object_kindContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSchema_object_kind(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Schema_object_kind() (localctx ISchema_object_kindContext) {
	localctx = NewSchema_object_kindContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, GoogleSQLParserRULE_schema_object_kind)
	p.SetState(868)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 16, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(849)
			p.Match(GoogleSQLParserAGGREGATE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(850)
			p.Match(GoogleSQLParserFUNCTION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(851)
			p.Match(GoogleSQLParserAPPROX_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(852)
			p.Match(GoogleSQLParserVIEW_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(853)
			p.Match(GoogleSQLParserCONNECTION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(854)
			p.Match(GoogleSQLParserCONSTANT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(855)
			p.Match(GoogleSQLParserDATABASE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(856)
			p.Match(GoogleSQLParserEXTERNAL_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(857)
			p.Table_or_table_function()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(858)
			p.Match(GoogleSQLParserEXTERNAL_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(859)
			p.Match(GoogleSQLParserSCHEMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(860)
			p.Match(GoogleSQLParserFUNCTION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(861)
			p.Match(GoogleSQLParserINDEX_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(862)
			p.Match(GoogleSQLParserMATERIALIZED_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(863)
			p.Match(GoogleSQLParserVIEW_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(864)
			p.Match(GoogleSQLParserMODEL_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(865)
			p.Match(GoogleSQLParserPROCEDURE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(866)
			p.Match(GoogleSQLParserSCHEMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(867)
			p.Match(GoogleSQLParserVIEW_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAlter_action_listContext is an interface to support dynamic dispatch.
type IAlter_action_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllAlter_action() []IAlter_actionContext
	Alter_action(i int) IAlter_actionContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsAlter_action_listContext differentiates from other interfaces.
	IsAlter_action_listContext()
}

type Alter_action_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_action_listContext() *Alter_action_listContext {
	var p = new(Alter_action_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_alter_action_list
	return p
}

func InitEmptyAlter_action_listContext(p *Alter_action_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_alter_action_list
}

func (*Alter_action_listContext) IsAlter_action_listContext() {}

func NewAlter_action_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_action_listContext {
	var p = new(Alter_action_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_alter_action_list

	return p
}

func (s *Alter_action_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_action_listContext) AllAlter_action() []IAlter_actionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAlter_actionContext); ok {
			len++
		}
	}

	tst := make([]IAlter_actionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAlter_actionContext); ok {
			tst[i] = t.(IAlter_actionContext)
			i++
		}
	}

	return tst
}

func (s *Alter_action_listContext) Alter_action(i int) IAlter_actionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_actionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_actionContext)
}

func (s *Alter_action_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Alter_action_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Alter_action_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_action_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_action_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAlter_action_list(s)
	}
}

func (s *Alter_action_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAlter_action_list(s)
	}
}

func (s *Alter_action_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAlter_action_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Alter_action_list() (localctx IAlter_action_listContext) {
	localctx = NewAlter_action_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, GoogleSQLParserRULE_alter_action_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(870)
		p.Alter_action()
	}
	p.SetState(875)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(871)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(872)
			p.Alter_action()
		}

		p.SetState(877)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAlter_actionContext is an interface to support dynamic dispatch.
type IAlter_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SET_SYMBOL() antlr.TerminalNode
	OPTIONS_SYMBOL() antlr.TerminalNode
	Options_list() IOptions_listContext
	AS_SYMBOL() antlr.TerminalNode
	Generic_entity_body() IGeneric_entity_bodyContext
	ADD_SYMBOL() antlr.TerminalNode
	Table_constraint_spec() ITable_constraint_specContext
	Primary_key_spec() IPrimary_key_specContext
	CONSTRAINT_SYMBOL() antlr.TerminalNode
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	Primary_key_or_table_constraint_spec() IPrimary_key_or_table_constraint_specContext
	Opt_if_not_exists() IOpt_if_not_existsContext
	DROP_SYMBOL() antlr.TerminalNode
	Opt_if_exists() IOpt_if_existsContext
	PRIMARY_SYMBOL() antlr.TerminalNode
	KEY_SYMBOL() antlr.TerminalNode
	ALTER_SYMBOL() antlr.TerminalNode
	Constraint_enforcement() IConstraint_enforcementContext
	COLUMN_SYMBOL() antlr.TerminalNode
	Table_column_definition() ITable_column_definitionContext
	Column_position() IColumn_positionContext
	Fill_using_expression() IFill_using_expressionContext
	RENAME_SYMBOL() antlr.TerminalNode
	TO_SYMBOL() antlr.TerminalNode
	DATA_SYMBOL() antlr.TerminalNode
	TYPE_SYMBOL() antlr.TerminalNode
	Field_schema() IField_schemaContext
	DEFAULT_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	NOT_SYMBOL() antlr.TerminalNode
	NULL_SYMBOL() antlr.TerminalNode
	GENERATED_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext
	Collate_clause() ICollate_clauseContext
	ROW_SYMBOL() antlr.TerminalNode
	DELETION_SYMBOL() antlr.TerminalNode
	POLICY_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	REPLACE_SYMBOL() antlr.TerminalNode
	Generic_sub_entity_type() IGeneric_sub_entity_typeContext
	Alter_action() IAlter_actionContext
	Spanner_alter_column_action() ISpanner_alter_column_actionContext
	Spanner_set_on_delete_action() ISpanner_set_on_delete_actionContext

	// IsAlter_actionContext differentiates from other interfaces.
	IsAlter_actionContext()
}

type Alter_actionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_actionContext() *Alter_actionContext {
	var p = new(Alter_actionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_alter_action
	return p
}

func InitEmptyAlter_actionContext(p *Alter_actionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_alter_action
}

func (*Alter_actionContext) IsAlter_actionContext() {}

func NewAlter_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_actionContext {
	var p = new(Alter_actionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_alter_action

	return p
}

func (s *Alter_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_actionContext) SET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSET_SYMBOL, 0)
}

func (s *Alter_actionContext) OPTIONS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOPTIONS_SYMBOL, 0)
}

func (s *Alter_actionContext) Options_list() IOptions_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOptions_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOptions_listContext)
}

func (s *Alter_actionContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Alter_actionContext) Generic_entity_body() IGeneric_entity_bodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGeneric_entity_bodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGeneric_entity_bodyContext)
}

func (s *Alter_actionContext) ADD_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserADD_SYMBOL, 0)
}

func (s *Alter_actionContext) Table_constraint_spec() ITable_constraint_specContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_constraint_specContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_constraint_specContext)
}

func (s *Alter_actionContext) Primary_key_spec() IPrimary_key_specContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimary_key_specContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimary_key_specContext)
}

func (s *Alter_actionContext) CONSTRAINT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCONSTRAINT_SYMBOL, 0)
}

func (s *Alter_actionContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Alter_actionContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_actionContext) Primary_key_or_table_constraint_spec() IPrimary_key_or_table_constraint_specContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimary_key_or_table_constraint_specContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimary_key_or_table_constraint_specContext)
}

func (s *Alter_actionContext) Opt_if_not_exists() IOpt_if_not_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_if_not_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_if_not_existsContext)
}

func (s *Alter_actionContext) DROP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDROP_SYMBOL, 0)
}

func (s *Alter_actionContext) Opt_if_exists() IOpt_if_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_if_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_if_existsContext)
}

func (s *Alter_actionContext) PRIMARY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPRIMARY_SYMBOL, 0)
}

func (s *Alter_actionContext) KEY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserKEY_SYMBOL, 0)
}

func (s *Alter_actionContext) ALTER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserALTER_SYMBOL, 0)
}

func (s *Alter_actionContext) Constraint_enforcement() IConstraint_enforcementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstraint_enforcementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstraint_enforcementContext)
}

func (s *Alter_actionContext) COLUMN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOLUMN_SYMBOL, 0)
}

func (s *Alter_actionContext) Table_column_definition() ITable_column_definitionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_column_definitionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_column_definitionContext)
}

func (s *Alter_actionContext) Column_position() IColumn_positionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_positionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_positionContext)
}

func (s *Alter_actionContext) Fill_using_expression() IFill_using_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFill_using_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFill_using_expressionContext)
}

func (s *Alter_actionContext) RENAME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRENAME_SYMBOL, 0)
}

func (s *Alter_actionContext) TO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTO_SYMBOL, 0)
}

func (s *Alter_actionContext) DATA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDATA_SYMBOL, 0)
}

func (s *Alter_actionContext) TYPE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTYPE_SYMBOL, 0)
}

func (s *Alter_actionContext) Field_schema() IField_schemaContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IField_schemaContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IField_schemaContext)
}

func (s *Alter_actionContext) DEFAULT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDEFAULT_SYMBOL, 0)
}

func (s *Alter_actionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Alter_actionContext) NOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNOT_SYMBOL, 0)
}

func (s *Alter_actionContext) NULL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNULL_SYMBOL, 0)
}

func (s *Alter_actionContext) GENERATED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGENERATED_SYMBOL, 0)
}

func (s *Alter_actionContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Alter_actionContext) Collate_clause() ICollate_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollate_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollate_clauseContext)
}

func (s *Alter_actionContext) ROW_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserROW_SYMBOL, 0)
}

func (s *Alter_actionContext) DELETION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDELETION_SYMBOL, 0)
}

func (s *Alter_actionContext) POLICY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPOLICY_SYMBOL, 0)
}

func (s *Alter_actionContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Alter_actionContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Alter_actionContext) REPLACE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPLACE_SYMBOL, 0)
}

func (s *Alter_actionContext) Generic_sub_entity_type() IGeneric_sub_entity_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGeneric_sub_entity_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGeneric_sub_entity_typeContext)
}

func (s *Alter_actionContext) Alter_action() IAlter_actionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_actionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_actionContext)
}

func (s *Alter_actionContext) Spanner_alter_column_action() ISpanner_alter_column_actionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISpanner_alter_column_actionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISpanner_alter_column_actionContext)
}

func (s *Alter_actionContext) Spanner_set_on_delete_action() ISpanner_set_on_delete_actionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISpanner_set_on_delete_actionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISpanner_set_on_delete_actionContext)
}

func (s *Alter_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAlter_action(s)
	}
}

func (s *Alter_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAlter_action(s)
	}
}

func (s *Alter_actionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAlter_action(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Alter_action() (localctx IAlter_actionContext) {
	localctx = NewAlter_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, GoogleSQLParserRULE_alter_action)
	var _la int

	p.SetState(1069)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 39, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(878)
			p.Match(GoogleSQLParserSET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(879)
			p.Match(GoogleSQLParserOPTIONS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(880)
			p.Options_list()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(881)
			p.Match(GoogleSQLParserSET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(882)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(883)
			p.Generic_entity_body()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(884)
			p.Match(GoogleSQLParserADD_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(885)
			p.Table_constraint_spec()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(886)
			p.Match(GoogleSQLParserADD_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(887)
			p.Primary_key_spec()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(888)
			p.Match(GoogleSQLParserADD_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(889)
			p.Match(GoogleSQLParserCONSTRAINT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(891)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(890)
				p.Opt_if_not_exists()
			}

		}
		{
			p.SetState(893)
			p.Identifier()
		}
		{
			p.SetState(894)
			p.Primary_key_or_table_constraint_spec()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(896)
			p.Match(GoogleSQLParserDROP_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(897)
			p.Match(GoogleSQLParserCONSTRAINT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(899)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(898)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(901)
			p.Identifier()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(902)
			p.Match(GoogleSQLParserDROP_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(903)
			p.Match(GoogleSQLParserPRIMARY_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(904)
			p.Match(GoogleSQLParserKEY_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(906)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(905)
				p.Opt_if_exists()
			}

		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(908)
			p.Match(GoogleSQLParserALTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(909)
			p.Match(GoogleSQLParserCONSTRAINT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(911)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(910)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(913)
			p.Identifier()
		}
		{
			p.SetState(914)
			p.Constraint_enforcement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(916)
			p.Match(GoogleSQLParserALTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(917)
			p.Match(GoogleSQLParserCONSTRAINT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(919)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(918)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(921)
			p.Identifier()
		}
		{
			p.SetState(922)
			p.Match(GoogleSQLParserSET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(923)
			p.Match(GoogleSQLParserOPTIONS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(924)
			p.Options_list()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(926)
			p.Match(GoogleSQLParserADD_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(927)
			p.Match(GoogleSQLParserCOLUMN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(928)
			p.Opt_if_not_exists()
		}
		{
			p.SetState(929)
			p.Table_column_definition()
		}
		p.SetState(931)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserPRECEDING_SYMBOL || _la == GoogleSQLParserFOLLOWING_SYMBOL {
			{
				p.SetState(930)
				p.Column_position()
			}

		}
		p.SetState(934)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserFILL_SYMBOL {
			{
				p.SetState(933)
				p.Fill_using_expression()
			}

		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(936)
			p.Match(GoogleSQLParserDROP_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(937)
			p.Match(GoogleSQLParserCOLUMN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(939)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(938)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(941)
			p.Identifier()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(942)
			p.Match(GoogleSQLParserRENAME_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(943)
			p.Match(GoogleSQLParserCOLUMN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(945)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(944)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(947)
			p.Identifier()
		}
		{
			p.SetState(948)
			p.Match(GoogleSQLParserTO_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(949)
			p.Identifier()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(951)
			p.Match(GoogleSQLParserALTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(952)
			p.Match(GoogleSQLParserCOLUMN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(954)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(953)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(956)
			p.Identifier()
		}
		{
			p.SetState(957)
			p.Match(GoogleSQLParserSET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(958)
			p.Match(GoogleSQLParserDATA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(959)
			p.Match(GoogleSQLParserTYPE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(960)
			p.Field_schema()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(962)
			p.Match(GoogleSQLParserALTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(963)
			p.Match(GoogleSQLParserCOLUMN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(965)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(964)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(967)
			p.Identifier()
		}
		{
			p.SetState(968)
			p.Match(GoogleSQLParserSET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(969)
			p.Match(GoogleSQLParserOPTIONS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(970)
			p.Options_list()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(972)
			p.Match(GoogleSQLParserALTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(973)
			p.Match(GoogleSQLParserCOLUMN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(975)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(974)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(977)
			p.Identifier()
		}
		{
			p.SetState(978)
			p.Match(GoogleSQLParserSET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(979)
			p.Match(GoogleSQLParserDEFAULT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(980)
			p.expression(0)
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(982)
			p.Match(GoogleSQLParserALTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(983)
			p.Match(GoogleSQLParserCOLUMN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(985)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(984)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(987)
			p.Identifier()
		}
		{
			p.SetState(988)
			p.Match(GoogleSQLParserDROP_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(989)
			p.Match(GoogleSQLParserDEFAULT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(991)
			p.Match(GoogleSQLParserALTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(992)
			p.Match(GoogleSQLParserCOLUMN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(994)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(993)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(996)
			p.Identifier()
		}
		{
			p.SetState(997)
			p.Match(GoogleSQLParserDROP_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(998)
			p.Match(GoogleSQLParserNOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(999)
			p.Match(GoogleSQLParserNULL_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(1001)
			p.Match(GoogleSQLParserALTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1002)
			p.Match(GoogleSQLParserCOLUMN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1004)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(1003)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(1006)
			p.Identifier()
		}
		{
			p.SetState(1007)
			p.Match(GoogleSQLParserDROP_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1008)
			p.Match(GoogleSQLParserGENERATED_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(1010)
			p.Match(GoogleSQLParserRENAME_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1011)
			p.Match(GoogleSQLParserTO_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1012)
			p.Path_expression()
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(1013)
			p.Match(GoogleSQLParserSET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1014)
			p.Match(GoogleSQLParserDEFAULT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1015)
			p.Collate_clause()
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(1016)
			p.Match(GoogleSQLParserADD_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1017)
			p.Match(GoogleSQLParserROW_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1018)
			p.Match(GoogleSQLParserDELETION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1019)
			p.Match(GoogleSQLParserPOLICY_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1021)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(1020)
				p.Opt_if_not_exists()
			}

		}
		{
			p.SetState(1023)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1024)
			p.expression(0)
		}
		{
			p.SetState(1025)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(1027)
			p.Match(GoogleSQLParserREPLACE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1028)
			p.Match(GoogleSQLParserROW_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1029)
			p.Match(GoogleSQLParserDELETION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1030)
			p.Match(GoogleSQLParserPOLICY_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1032)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(1031)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(1034)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1035)
			p.expression(0)
		}
		{
			p.SetState(1036)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(1038)
			p.Match(GoogleSQLParserDROP_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1039)
			p.Match(GoogleSQLParserROW_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1040)
			p.Match(GoogleSQLParserDELETION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1041)
			p.Match(GoogleSQLParserPOLICY_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1043)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(1042)
				p.Opt_if_exists()
			}

		}

	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(1045)
			p.Match(GoogleSQLParserALTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1046)
			p.Generic_sub_entity_type()
		}
		p.SetState(1048)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(1047)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(1050)
			p.Identifier()
		}
		{
			p.SetState(1051)
			p.Alter_action()
		}

	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(1053)
			p.Match(GoogleSQLParserADD_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1054)
			p.Generic_sub_entity_type()
		}
		p.SetState(1056)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(1055)
				p.Opt_if_not_exists()
			}

		}
		{
			p.SetState(1058)
			p.Identifier()
		}

	case 26:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(1060)
			p.Match(GoogleSQLParserDROP_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1061)
			p.Generic_sub_entity_type()
		}
		p.SetState(1063)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(1062)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(1065)
			p.Identifier()
		}

	case 27:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(1067)
			p.Spanner_alter_column_action()
		}

	case 28:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(1068)
			p.Spanner_set_on_delete_action()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISpanner_set_on_delete_actionContext is an interface to support dynamic dispatch.
type ISpanner_set_on_delete_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SET_SYMBOL() antlr.TerminalNode
	ON_SYMBOL() antlr.TerminalNode
	DELETE_SYMBOL() antlr.TerminalNode
	Foreign_key_action() IForeign_key_actionContext

	// IsSpanner_set_on_delete_actionContext differentiates from other interfaces.
	IsSpanner_set_on_delete_actionContext()
}

type Spanner_set_on_delete_actionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySpanner_set_on_delete_actionContext() *Spanner_set_on_delete_actionContext {
	var p = new(Spanner_set_on_delete_actionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_spanner_set_on_delete_action
	return p
}

func InitEmptySpanner_set_on_delete_actionContext(p *Spanner_set_on_delete_actionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_spanner_set_on_delete_action
}

func (*Spanner_set_on_delete_actionContext) IsSpanner_set_on_delete_actionContext() {}

func NewSpanner_set_on_delete_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Spanner_set_on_delete_actionContext {
	var p = new(Spanner_set_on_delete_actionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_spanner_set_on_delete_action

	return p
}

func (s *Spanner_set_on_delete_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Spanner_set_on_delete_actionContext) SET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSET_SYMBOL, 0)
}

func (s *Spanner_set_on_delete_actionContext) ON_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserON_SYMBOL, 0)
}

func (s *Spanner_set_on_delete_actionContext) DELETE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDELETE_SYMBOL, 0)
}

func (s *Spanner_set_on_delete_actionContext) Foreign_key_action() IForeign_key_actionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeign_key_actionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeign_key_actionContext)
}

func (s *Spanner_set_on_delete_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Spanner_set_on_delete_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Spanner_set_on_delete_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSpanner_set_on_delete_action(s)
	}
}

func (s *Spanner_set_on_delete_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSpanner_set_on_delete_action(s)
	}
}

func (s *Spanner_set_on_delete_actionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSpanner_set_on_delete_action(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Spanner_set_on_delete_action() (localctx ISpanner_set_on_delete_actionContext) {
	localctx = NewSpanner_set_on_delete_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, GoogleSQLParserRULE_spanner_set_on_delete_action)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1071)
		p.Match(GoogleSQLParserSET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1072)
		p.Match(GoogleSQLParserON_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1073)
		p.Match(GoogleSQLParserDELETE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1074)
		p.Foreign_key_action()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISpanner_alter_column_actionContext is an interface to support dynamic dispatch.
type ISpanner_alter_column_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ALTER_SYMBOL() antlr.TerminalNode
	COLUMN_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext
	Column_schema_inner() IColumn_schema_innerContext
	Opt_if_exists() IOpt_if_existsContext
	Not_null_column_attribute() INot_null_column_attributeContext
	Spanner_generated_or_default() ISpanner_generated_or_defaultContext
	Options_list() IOptions_listContext

	// IsSpanner_alter_column_actionContext differentiates from other interfaces.
	IsSpanner_alter_column_actionContext()
}

type Spanner_alter_column_actionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySpanner_alter_column_actionContext() *Spanner_alter_column_actionContext {
	var p = new(Spanner_alter_column_actionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_spanner_alter_column_action
	return p
}

func InitEmptySpanner_alter_column_actionContext(p *Spanner_alter_column_actionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_spanner_alter_column_action
}

func (*Spanner_alter_column_actionContext) IsSpanner_alter_column_actionContext() {}

func NewSpanner_alter_column_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Spanner_alter_column_actionContext {
	var p = new(Spanner_alter_column_actionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_spanner_alter_column_action

	return p
}

func (s *Spanner_alter_column_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Spanner_alter_column_actionContext) ALTER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserALTER_SYMBOL, 0)
}

func (s *Spanner_alter_column_actionContext) COLUMN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOLUMN_SYMBOL, 0)
}

func (s *Spanner_alter_column_actionContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Spanner_alter_column_actionContext) Column_schema_inner() IColumn_schema_innerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_schema_innerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_schema_innerContext)
}

func (s *Spanner_alter_column_actionContext) Opt_if_exists() IOpt_if_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_if_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_if_existsContext)
}

func (s *Spanner_alter_column_actionContext) Not_null_column_attribute() INot_null_column_attributeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INot_null_column_attributeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INot_null_column_attributeContext)
}

func (s *Spanner_alter_column_actionContext) Spanner_generated_or_default() ISpanner_generated_or_defaultContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISpanner_generated_or_defaultContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISpanner_generated_or_defaultContext)
}

func (s *Spanner_alter_column_actionContext) Options_list() IOptions_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOptions_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOptions_listContext)
}

func (s *Spanner_alter_column_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Spanner_alter_column_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Spanner_alter_column_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSpanner_alter_column_action(s)
	}
}

func (s *Spanner_alter_column_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSpanner_alter_column_action(s)
	}
}

func (s *Spanner_alter_column_actionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSpanner_alter_column_action(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Spanner_alter_column_action() (localctx ISpanner_alter_column_actionContext) {
	localctx = NewSpanner_alter_column_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, GoogleSQLParserRULE_spanner_alter_column_action)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1076)
		p.Match(GoogleSQLParserALTER_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1077)
		p.Match(GoogleSQLParserCOLUMN_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1079)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserIF_SYMBOL {
		{
			p.SetState(1078)
			p.Opt_if_exists()
		}

	}
	{
		p.SetState(1081)
		p.Identifier()
	}
	{
		p.SetState(1082)
		p.Column_schema_inner()
	}
	p.SetState(1084)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserNOT_SYMBOL {
		{
			p.SetState(1083)
			p.Not_null_column_attribute()
		}

	}
	p.SetState(1087)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAS_SYMBOL {
		{
			p.SetState(1086)
			p.Spanner_generated_or_default()
		}

	}
	p.SetState(1090)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserLR_BRACKET_SYMBOL {
		{
			p.SetState(1089)
			p.Options_list()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISpanner_generated_or_defaultContext is an interface to support dynamic dispatch.
type ISpanner_generated_or_defaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AS_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	STORED_SYMBOL() antlr.TerminalNode

	// IsSpanner_generated_or_defaultContext differentiates from other interfaces.
	IsSpanner_generated_or_defaultContext()
}

type Spanner_generated_or_defaultContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySpanner_generated_or_defaultContext() *Spanner_generated_or_defaultContext {
	var p = new(Spanner_generated_or_defaultContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_spanner_generated_or_default
	return p
}

func InitEmptySpanner_generated_or_defaultContext(p *Spanner_generated_or_defaultContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_spanner_generated_or_default
}

func (*Spanner_generated_or_defaultContext) IsSpanner_generated_or_defaultContext() {}

func NewSpanner_generated_or_defaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Spanner_generated_or_defaultContext {
	var p = new(Spanner_generated_or_defaultContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_spanner_generated_or_default

	return p
}

func (s *Spanner_generated_or_defaultContext) GetParser() antlr.Parser { return s.parser }

func (s *Spanner_generated_or_defaultContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Spanner_generated_or_defaultContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Spanner_generated_or_defaultContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Spanner_generated_or_defaultContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Spanner_generated_or_defaultContext) STORED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTORED_SYMBOL, 0)
}

func (s *Spanner_generated_or_defaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Spanner_generated_or_defaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Spanner_generated_or_defaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSpanner_generated_or_default(s)
	}
}

func (s *Spanner_generated_or_defaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSpanner_generated_or_default(s)
	}
}

func (s *Spanner_generated_or_defaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSpanner_generated_or_default(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Spanner_generated_or_default() (localctx ISpanner_generated_or_defaultContext) {
	localctx = NewSpanner_generated_or_defaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, GoogleSQLParserRULE_spanner_generated_or_default)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1092)
		p.Match(GoogleSQLParserAS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1093)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1094)
		p.expression(0)
	}
	{
		p.SetState(1095)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1096)
		p.Match(GoogleSQLParserSTORED_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGeneric_sub_entity_typeContext is an interface to support dynamic dispatch.
type IGeneric_sub_entity_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Sub_entity_type_identifier() ISub_entity_type_identifierContext

	// IsGeneric_sub_entity_typeContext differentiates from other interfaces.
	IsGeneric_sub_entity_typeContext()
}

type Generic_sub_entity_typeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGeneric_sub_entity_typeContext() *Generic_sub_entity_typeContext {
	var p = new(Generic_sub_entity_typeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_generic_sub_entity_type
	return p
}

func InitEmptyGeneric_sub_entity_typeContext(p *Generic_sub_entity_typeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_generic_sub_entity_type
}

func (*Generic_sub_entity_typeContext) IsGeneric_sub_entity_typeContext() {}

func NewGeneric_sub_entity_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Generic_sub_entity_typeContext {
	var p = new(Generic_sub_entity_typeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_generic_sub_entity_type

	return p
}

func (s *Generic_sub_entity_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Generic_sub_entity_typeContext) Sub_entity_type_identifier() ISub_entity_type_identifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISub_entity_type_identifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISub_entity_type_identifierContext)
}

func (s *Generic_sub_entity_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Generic_sub_entity_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Generic_sub_entity_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGeneric_sub_entity_type(s)
	}
}

func (s *Generic_sub_entity_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGeneric_sub_entity_type(s)
	}
}

func (s *Generic_sub_entity_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGeneric_sub_entity_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Generic_sub_entity_type() (localctx IGeneric_sub_entity_typeContext) {
	localctx = NewGeneric_sub_entity_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, GoogleSQLParserRULE_generic_sub_entity_type)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1098)
		p.Sub_entity_type_identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISub_entity_type_identifierContext is an interface to support dynamic dispatch.
type ISub_entity_type_identifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode
	REPLICA_SYMBOL() antlr.TerminalNode

	// IsSub_entity_type_identifierContext differentiates from other interfaces.
	IsSub_entity_type_identifierContext()
}

type Sub_entity_type_identifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySub_entity_type_identifierContext() *Sub_entity_type_identifierContext {
	var p = new(Sub_entity_type_identifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_sub_entity_type_identifier
	return p
}

func InitEmptySub_entity_type_identifierContext(p *Sub_entity_type_identifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_sub_entity_type_identifier
}

func (*Sub_entity_type_identifierContext) IsSub_entity_type_identifierContext() {}

func NewSub_entity_type_identifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sub_entity_type_identifierContext {
	var p = new(Sub_entity_type_identifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_sub_entity_type_identifier

	return p
}

func (s *Sub_entity_type_identifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Sub_entity_type_identifierContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIDENTIFIER, 0)
}

func (s *Sub_entity_type_identifierContext) REPLICA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPLICA_SYMBOL, 0)
}

func (s *Sub_entity_type_identifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sub_entity_type_identifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sub_entity_type_identifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSub_entity_type_identifier(s)
	}
}

func (s *Sub_entity_type_identifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSub_entity_type_identifier(s)
	}
}

func (s *Sub_entity_type_identifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSub_entity_type_identifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Sub_entity_type_identifier() (localctx ISub_entity_type_identifierContext) {
	localctx = NewSub_entity_type_identifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, GoogleSQLParserRULE_sub_entity_type_identifier)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1100)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserREPLICA_SYMBOL || _la == GoogleSQLParserIDENTIFIER) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFill_using_expressionContext is an interface to support dynamic dispatch.
type IFill_using_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FILL_SYMBOL() antlr.TerminalNode
	USING_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsFill_using_expressionContext differentiates from other interfaces.
	IsFill_using_expressionContext()
}

type Fill_using_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFill_using_expressionContext() *Fill_using_expressionContext {
	var p = new(Fill_using_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_fill_using_expression
	return p
}

func InitEmptyFill_using_expressionContext(p *Fill_using_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_fill_using_expression
}

func (*Fill_using_expressionContext) IsFill_using_expressionContext() {}

func NewFill_using_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Fill_using_expressionContext {
	var p = new(Fill_using_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_fill_using_expression

	return p
}

func (s *Fill_using_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Fill_using_expressionContext) FILL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFILL_SYMBOL, 0)
}

func (s *Fill_using_expressionContext) USING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUSING_SYMBOL, 0)
}

func (s *Fill_using_expressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Fill_using_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Fill_using_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Fill_using_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFill_using_expression(s)
	}
}

func (s *Fill_using_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFill_using_expression(s)
	}
}

func (s *Fill_using_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFill_using_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Fill_using_expression() (localctx IFill_using_expressionContext) {
	localctx = NewFill_using_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, GoogleSQLParserRULE_fill_using_expression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1102)
		p.Match(GoogleSQLParserFILL_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1103)
		p.Match(GoogleSQLParserUSING_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1104)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumn_positionContext is an interface to support dynamic dispatch.
type IColumn_positionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PRECEDING_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext
	FOLLOWING_SYMBOL() antlr.TerminalNode

	// IsColumn_positionContext differentiates from other interfaces.
	IsColumn_positionContext()
}

type Column_positionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_positionContext() *Column_positionContext {
	var p = new(Column_positionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_column_position
	return p
}

func InitEmptyColumn_positionContext(p *Column_positionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_column_position
}

func (*Column_positionContext) IsColumn_positionContext() {}

func NewColumn_positionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_positionContext {
	var p = new(Column_positionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_column_position

	return p
}

func (s *Column_positionContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_positionContext) PRECEDING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPRECEDING_SYMBOL, 0)
}

func (s *Column_positionContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Column_positionContext) FOLLOWING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFOLLOWING_SYMBOL, 0)
}

func (s *Column_positionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_positionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_positionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterColumn_position(s)
	}
}

func (s *Column_positionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitColumn_position(s)
	}
}

func (s *Column_positionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitColumn_position(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Column_position() (localctx IColumn_positionContext) {
	localctx = NewColumn_positionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, GoogleSQLParserRULE_column_position)
	p.SetState(1110)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserPRECEDING_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1106)
			p.Match(GoogleSQLParserPRECEDING_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1107)
			p.Identifier()
		}

	case GoogleSQLParserFOLLOWING_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1108)
			p.Match(GoogleSQLParserFOLLOWING_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1109)
			p.Identifier()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_column_definitionContext is an interface to support dynamic dispatch.
type ITable_column_definitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	Table_column_schema() ITable_column_schemaContext
	Column_attributes() IColumn_attributesContext
	Options_list() IOptions_listContext

	// IsTable_column_definitionContext differentiates from other interfaces.
	IsTable_column_definitionContext()
}

type Table_column_definitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_column_definitionContext() *Table_column_definitionContext {
	var p = new(Table_column_definitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_column_definition
	return p
}

func InitEmptyTable_column_definitionContext(p *Table_column_definitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_column_definition
}

func (*Table_column_definitionContext) IsTable_column_definitionContext() {}

func NewTable_column_definitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_column_definitionContext {
	var p = new(Table_column_definitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_table_column_definition

	return p
}

func (s *Table_column_definitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_column_definitionContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Table_column_definitionContext) Table_column_schema() ITable_column_schemaContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_column_schemaContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_column_schemaContext)
}

func (s *Table_column_definitionContext) Column_attributes() IColumn_attributesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_attributesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_attributesContext)
}

func (s *Table_column_definitionContext) Options_list() IOptions_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOptions_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOptions_listContext)
}

func (s *Table_column_definitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_column_definitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_column_definitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTable_column_definition(s)
	}
}

func (s *Table_column_definitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTable_column_definition(s)
	}
}

func (s *Table_column_definitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTable_column_definition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Table_column_definition() (localctx ITable_column_definitionContext) {
	localctx = NewTable_column_definitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, GoogleSQLParserRULE_table_column_definition)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1112)
		p.Identifier()
	}
	{
		p.SetState(1113)
		p.Table_column_schema()
	}
	p.SetState(1115)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserNOT_SYMBOL || _la == GoogleSQLParserCONSTRAINT_SYMBOL || ((int64((_la-180)) & ^0x3f) == 0 && ((int64(1)<<(_la-180))&4512395720392705) != 0) {
		{
			p.SetState(1114)
			p.Column_attributes()
		}

	}
	p.SetState(1118)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserLR_BRACKET_SYMBOL {
		{
			p.SetState(1117)
			p.Options_list()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumn_attributesContext is an interface to support dynamic dispatch.
type IColumn_attributesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Constraint_enforcement() IConstraint_enforcementContext
	AllColumn_attribute() []IColumn_attributeContext
	Column_attribute(i int) IColumn_attributeContext

	// IsColumn_attributesContext differentiates from other interfaces.
	IsColumn_attributesContext()
}

type Column_attributesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_attributesContext() *Column_attributesContext {
	var p = new(Column_attributesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_column_attributes
	return p
}

func InitEmptyColumn_attributesContext(p *Column_attributesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_column_attributes
}

func (*Column_attributesContext) IsColumn_attributesContext() {}

func NewColumn_attributesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_attributesContext {
	var p = new(Column_attributesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_column_attributes

	return p
}

func (s *Column_attributesContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_attributesContext) Constraint_enforcement() IConstraint_enforcementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstraint_enforcementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstraint_enforcementContext)
}

func (s *Column_attributesContext) AllColumn_attribute() []IColumn_attributeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_attributeContext); ok {
			len++
		}
	}

	tst := make([]IColumn_attributeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_attributeContext); ok {
			tst[i] = t.(IColumn_attributeContext)
			i++
		}
	}

	return tst
}

func (s *Column_attributesContext) Column_attribute(i int) IColumn_attributeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_attributeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_attributeContext)
}

func (s *Column_attributesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_attributesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_attributesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterColumn_attributes(s)
	}
}

func (s *Column_attributesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitColumn_attributes(s)
	}
}

func (s *Column_attributesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitColumn_attributes(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Column_attributes() (localctx IColumn_attributesContext) {
	localctx = NewColumn_attributesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, GoogleSQLParserRULE_column_attributes)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1121)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1120)
				p.Column_attribute()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(1123)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 47, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(1125)
		p.Constraint_enforcement()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumn_attributeContext is an interface to support dynamic dispatch.
type IColumn_attributeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Primary_key_column_attribute() IPrimary_key_column_attributeContext
	Foreign_key_column_attribute() IForeign_key_column_attributeContext
	Hidden_column_attribute() IHidden_column_attributeContext
	Not_null_column_attribute() INot_null_column_attributeContext

	// IsColumn_attributeContext differentiates from other interfaces.
	IsColumn_attributeContext()
}

type Column_attributeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_attributeContext() *Column_attributeContext {
	var p = new(Column_attributeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_column_attribute
	return p
}

func InitEmptyColumn_attributeContext(p *Column_attributeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_column_attribute
}

func (*Column_attributeContext) IsColumn_attributeContext() {}

func NewColumn_attributeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_attributeContext {
	var p = new(Column_attributeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_column_attribute

	return p
}

func (s *Column_attributeContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_attributeContext) Primary_key_column_attribute() IPrimary_key_column_attributeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimary_key_column_attributeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimary_key_column_attributeContext)
}

func (s *Column_attributeContext) Foreign_key_column_attribute() IForeign_key_column_attributeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeign_key_column_attributeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeign_key_column_attributeContext)
}

func (s *Column_attributeContext) Hidden_column_attribute() IHidden_column_attributeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHidden_column_attributeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHidden_column_attributeContext)
}

func (s *Column_attributeContext) Not_null_column_attribute() INot_null_column_attributeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INot_null_column_attributeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INot_null_column_attributeContext)
}

func (s *Column_attributeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_attributeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_attributeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterColumn_attribute(s)
	}
}

func (s *Column_attributeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitColumn_attribute(s)
	}
}

func (s *Column_attributeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitColumn_attribute(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Column_attribute() (localctx IColumn_attributeContext) {
	localctx = NewColumn_attributeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, GoogleSQLParserRULE_column_attribute)
	p.SetState(1131)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserPRIMARY_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1127)
			p.Primary_key_column_attribute()
		}

	case GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1128)
			p.Foreign_key_column_attribute()
		}

	case GoogleSQLParserHIDDEN_SYMBOL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1129)
			p.Hidden_column_attribute()
		}

	case GoogleSQLParserNOT_SYMBOL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1130)
			p.Not_null_column_attribute()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrimary_key_column_attributeContext is an interface to support dynamic dispatch.
type IPrimary_key_column_attributeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PRIMARY_SYMBOL() antlr.TerminalNode
	KEY_SYMBOL() antlr.TerminalNode

	// IsPrimary_key_column_attributeContext differentiates from other interfaces.
	IsPrimary_key_column_attributeContext()
}

type Primary_key_column_attributeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimary_key_column_attributeContext() *Primary_key_column_attributeContext {
	var p = new(Primary_key_column_attributeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_primary_key_column_attribute
	return p
}

func InitEmptyPrimary_key_column_attributeContext(p *Primary_key_column_attributeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_primary_key_column_attribute
}

func (*Primary_key_column_attributeContext) IsPrimary_key_column_attributeContext() {}

func NewPrimary_key_column_attributeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Primary_key_column_attributeContext {
	var p = new(Primary_key_column_attributeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_primary_key_column_attribute

	return p
}

func (s *Primary_key_column_attributeContext) GetParser() antlr.Parser { return s.parser }

func (s *Primary_key_column_attributeContext) PRIMARY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPRIMARY_SYMBOL, 0)
}

func (s *Primary_key_column_attributeContext) KEY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserKEY_SYMBOL, 0)
}

func (s *Primary_key_column_attributeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Primary_key_column_attributeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Primary_key_column_attributeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPrimary_key_column_attribute(s)
	}
}

func (s *Primary_key_column_attributeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPrimary_key_column_attribute(s)
	}
}

func (s *Primary_key_column_attributeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPrimary_key_column_attribute(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Primary_key_column_attribute() (localctx IPrimary_key_column_attributeContext) {
	localctx = NewPrimary_key_column_attributeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, GoogleSQLParserRULE_primary_key_column_attribute)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1133)
		p.Match(GoogleSQLParserPRIMARY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1134)
		p.Match(GoogleSQLParserKEY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IForeign_key_column_attributeContext is an interface to support dynamic dispatch.
type IForeign_key_column_attributeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Foreign_key_reference() IForeign_key_referenceContext
	Opt_constraint_identity() IOpt_constraint_identityContext

	// IsForeign_key_column_attributeContext differentiates from other interfaces.
	IsForeign_key_column_attributeContext()
}

type Foreign_key_column_attributeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForeign_key_column_attributeContext() *Foreign_key_column_attributeContext {
	var p = new(Foreign_key_column_attributeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_column_attribute
	return p
}

func InitEmptyForeign_key_column_attributeContext(p *Foreign_key_column_attributeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_column_attribute
}

func (*Foreign_key_column_attributeContext) IsForeign_key_column_attributeContext() {}

func NewForeign_key_column_attributeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Foreign_key_column_attributeContext {
	var p = new(Foreign_key_column_attributeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_column_attribute

	return p
}

func (s *Foreign_key_column_attributeContext) GetParser() antlr.Parser { return s.parser }

func (s *Foreign_key_column_attributeContext) Foreign_key_reference() IForeign_key_referenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeign_key_referenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeign_key_referenceContext)
}

func (s *Foreign_key_column_attributeContext) Opt_constraint_identity() IOpt_constraint_identityContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_constraint_identityContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_constraint_identityContext)
}

func (s *Foreign_key_column_attributeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Foreign_key_column_attributeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Foreign_key_column_attributeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterForeign_key_column_attribute(s)
	}
}

func (s *Foreign_key_column_attributeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitForeign_key_column_attribute(s)
	}
}

func (s *Foreign_key_column_attributeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitForeign_key_column_attribute(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Foreign_key_column_attribute() (localctx IForeign_key_column_attributeContext) {
	localctx = NewForeign_key_column_attributeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, GoogleSQLParserRULE_foreign_key_column_attribute)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1137)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserCONSTRAINT_SYMBOL {
		{
			p.SetState(1136)
			p.Opt_constraint_identity()
		}

	}
	{
		p.SetState(1139)
		p.Foreign_key_reference()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IHidden_column_attributeContext is an interface to support dynamic dispatch.
type IHidden_column_attributeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	HIDDEN_SYMBOL() antlr.TerminalNode

	// IsHidden_column_attributeContext differentiates from other interfaces.
	IsHidden_column_attributeContext()
}

type Hidden_column_attributeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHidden_column_attributeContext() *Hidden_column_attributeContext {
	var p = new(Hidden_column_attributeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_hidden_column_attribute
	return p
}

func InitEmptyHidden_column_attributeContext(p *Hidden_column_attributeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_hidden_column_attribute
}

func (*Hidden_column_attributeContext) IsHidden_column_attributeContext() {}

func NewHidden_column_attributeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Hidden_column_attributeContext {
	var p = new(Hidden_column_attributeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_hidden_column_attribute

	return p
}

func (s *Hidden_column_attributeContext) GetParser() antlr.Parser { return s.parser }

func (s *Hidden_column_attributeContext) HIDDEN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserHIDDEN_SYMBOL, 0)
}

func (s *Hidden_column_attributeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Hidden_column_attributeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Hidden_column_attributeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterHidden_column_attribute(s)
	}
}

func (s *Hidden_column_attributeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitHidden_column_attribute(s)
	}
}

func (s *Hidden_column_attributeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitHidden_column_attribute(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Hidden_column_attribute() (localctx IHidden_column_attributeContext) {
	localctx = NewHidden_column_attributeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, GoogleSQLParserRULE_hidden_column_attribute)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1141)
		p.Match(GoogleSQLParserHIDDEN_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_constraint_identityContext is an interface to support dynamic dispatch.
type IOpt_constraint_identityContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CONSTRAINT_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext

	// IsOpt_constraint_identityContext differentiates from other interfaces.
	IsOpt_constraint_identityContext()
}

type Opt_constraint_identityContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_constraint_identityContext() *Opt_constraint_identityContext {
	var p = new(Opt_constraint_identityContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_constraint_identity
	return p
}

func InitEmptyOpt_constraint_identityContext(p *Opt_constraint_identityContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_constraint_identity
}

func (*Opt_constraint_identityContext) IsOpt_constraint_identityContext() {}

func NewOpt_constraint_identityContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_constraint_identityContext {
	var p = new(Opt_constraint_identityContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_constraint_identity

	return p
}

func (s *Opt_constraint_identityContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_constraint_identityContext) CONSTRAINT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCONSTRAINT_SYMBOL, 0)
}

func (s *Opt_constraint_identityContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Opt_constraint_identityContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_constraint_identityContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_constraint_identityContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_constraint_identity(s)
	}
}

func (s *Opt_constraint_identityContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_constraint_identity(s)
	}
}

func (s *Opt_constraint_identityContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_constraint_identity(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_constraint_identity() (localctx IOpt_constraint_identityContext) {
	localctx = NewOpt_constraint_identityContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, GoogleSQLParserRULE_opt_constraint_identity)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1143)
		p.Match(GoogleSQLParserCONSTRAINT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1144)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_column_schemaContext is an interface to support dynamic dispatch.
type ITable_column_schemaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Column_schema_inner() IColumn_schema_innerContext
	Collate_clause() ICollate_clauseContext
	Opt_column_info() IOpt_column_infoContext
	Generated_column_info() IGenerated_column_infoContext

	// IsTable_column_schemaContext differentiates from other interfaces.
	IsTable_column_schemaContext()
}

type Table_column_schemaContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_column_schemaContext() *Table_column_schemaContext {
	var p = new(Table_column_schemaContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_column_schema
	return p
}

func InitEmptyTable_column_schemaContext(p *Table_column_schemaContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_column_schema
}

func (*Table_column_schemaContext) IsTable_column_schemaContext() {}

func NewTable_column_schemaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_column_schemaContext {
	var p = new(Table_column_schemaContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_table_column_schema

	return p
}

func (s *Table_column_schemaContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_column_schemaContext) Column_schema_inner() IColumn_schema_innerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_schema_innerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_schema_innerContext)
}

func (s *Table_column_schemaContext) Collate_clause() ICollate_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollate_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollate_clauseContext)
}

func (s *Table_column_schemaContext) Opt_column_info() IOpt_column_infoContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_column_infoContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_column_infoContext)
}

func (s *Table_column_schemaContext) Generated_column_info() IGenerated_column_infoContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenerated_column_infoContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenerated_column_infoContext)
}

func (s *Table_column_schemaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_column_schemaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_column_schemaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTable_column_schema(s)
	}
}

func (s *Table_column_schemaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTable_column_schema(s)
	}
}

func (s *Table_column_schemaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTable_column_schema(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Table_column_schema() (localctx ITable_column_schemaContext) {
	localctx = NewTable_column_schemaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, GoogleSQLParserRULE_table_column_schema)
	var _la int

	p.SetState(1154)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 52, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1146)
			p.Column_schema_inner()
		}
		p.SetState(1148)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserCOLLATE_SYMBOL {
			{
				p.SetState(1147)
				p.Collate_clause()
			}

		}
		p.SetState(1151)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAS_SYMBOL || _la == GoogleSQLParserGENERATED_SYMBOL || _la == GoogleSQLParserDEFAULT_SYMBOL {
			{
				p.SetState(1150)
				p.Opt_column_info()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1153)
			p.Generated_column_info()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_column_infoContext is an interface to support dynamic dispatch.
type IOpt_column_infoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Generated_column_info() IGenerated_column_infoContext
	Invalid_default_column() IInvalid_default_columnContext
	Default_column_info() IDefault_column_infoContext
	Invalid_generated_column() IInvalid_generated_columnContext

	// IsOpt_column_infoContext differentiates from other interfaces.
	IsOpt_column_infoContext()
}

type Opt_column_infoContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_column_infoContext() *Opt_column_infoContext {
	var p = new(Opt_column_infoContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_column_info
	return p
}

func InitEmptyOpt_column_infoContext(p *Opt_column_infoContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_column_info
}

func (*Opt_column_infoContext) IsOpt_column_infoContext() {}

func NewOpt_column_infoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_column_infoContext {
	var p = new(Opt_column_infoContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_column_info

	return p
}

func (s *Opt_column_infoContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_column_infoContext) Generated_column_info() IGenerated_column_infoContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenerated_column_infoContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenerated_column_infoContext)
}

func (s *Opt_column_infoContext) Invalid_default_column() IInvalid_default_columnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInvalid_default_columnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInvalid_default_columnContext)
}

func (s *Opt_column_infoContext) Default_column_info() IDefault_column_infoContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefault_column_infoContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefault_column_infoContext)
}

func (s *Opt_column_infoContext) Invalid_generated_column() IInvalid_generated_columnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInvalid_generated_columnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInvalid_generated_columnContext)
}

func (s *Opt_column_infoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_column_infoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_column_infoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_column_info(s)
	}
}

func (s *Opt_column_infoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_column_info(s)
	}
}

func (s *Opt_column_infoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_column_info(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_column_info() (localctx IOpt_column_infoContext) {
	localctx = NewOpt_column_infoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, GoogleSQLParserRULE_opt_column_info)
	var _la int

	p.SetState(1168)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserAS_SYMBOL, GoogleSQLParserGENERATED_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1156)
			p.Generated_column_info()
		}
		p.SetState(1158)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserDEFAULT_SYMBOL {
			{
				p.SetState(1157)
				p.Invalid_default_column()
			}

		}

		if localctx.Invalid_default_column() != nil {
			p.NotifyErrorListeners("Syntax error: \"DEFAULT\" and \"GENERATED ALWAYS AS\" clauses must not be both provided for the column", nil, nil)
		}

	case GoogleSQLParserDEFAULT_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1162)
			p.Default_column_info()
		}
		p.SetState(1164)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAS_SYMBOL || _la == GoogleSQLParserGENERATED_SYMBOL {
			{
				p.SetState(1163)
				p.Invalid_generated_column()
			}

		}

		if localctx.Invalid_generated_column() != nil {
			p.NotifyErrorListeners("Syntax error: \"DEFAULT\" and \"GENERATED ALWAYS AS\" clauses must not be both provided for the column", nil, nil)
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInvalid_generated_columnContext is an interface to support dynamic dispatch.
type IInvalid_generated_columnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Generated_column_info() IGenerated_column_infoContext

	// IsInvalid_generated_columnContext differentiates from other interfaces.
	IsInvalid_generated_columnContext()
}

type Invalid_generated_columnContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInvalid_generated_columnContext() *Invalid_generated_columnContext {
	var p = new(Invalid_generated_columnContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_invalid_generated_column
	return p
}

func InitEmptyInvalid_generated_columnContext(p *Invalid_generated_columnContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_invalid_generated_column
}

func (*Invalid_generated_columnContext) IsInvalid_generated_columnContext() {}

func NewInvalid_generated_columnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Invalid_generated_columnContext {
	var p = new(Invalid_generated_columnContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_invalid_generated_column

	return p
}

func (s *Invalid_generated_columnContext) GetParser() antlr.Parser { return s.parser }

func (s *Invalid_generated_columnContext) Generated_column_info() IGenerated_column_infoContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenerated_column_infoContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenerated_column_infoContext)
}

func (s *Invalid_generated_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Invalid_generated_columnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Invalid_generated_columnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterInvalid_generated_column(s)
	}
}

func (s *Invalid_generated_columnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitInvalid_generated_column(s)
	}
}

func (s *Invalid_generated_columnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitInvalid_generated_column(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Invalid_generated_column() (localctx IInvalid_generated_columnContext) {
	localctx = NewInvalid_generated_columnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, GoogleSQLParserRULE_invalid_generated_column)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1170)
		p.Generated_column_info()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInvalid_default_columnContext is an interface to support dynamic dispatch.
type IInvalid_default_columnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Default_column_info() IDefault_column_infoContext

	// IsInvalid_default_columnContext differentiates from other interfaces.
	IsInvalid_default_columnContext()
}

type Invalid_default_columnContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInvalid_default_columnContext() *Invalid_default_columnContext {
	var p = new(Invalid_default_columnContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_invalid_default_column
	return p
}

func InitEmptyInvalid_default_columnContext(p *Invalid_default_columnContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_invalid_default_column
}

func (*Invalid_default_columnContext) IsInvalid_default_columnContext() {}

func NewInvalid_default_columnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Invalid_default_columnContext {
	var p = new(Invalid_default_columnContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_invalid_default_column

	return p
}

func (s *Invalid_default_columnContext) GetParser() antlr.Parser { return s.parser }

func (s *Invalid_default_columnContext) Default_column_info() IDefault_column_infoContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefault_column_infoContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefault_column_infoContext)
}

func (s *Invalid_default_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Invalid_default_columnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Invalid_default_columnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterInvalid_default_column(s)
	}
}

func (s *Invalid_default_columnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitInvalid_default_column(s)
	}
}

func (s *Invalid_default_columnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitInvalid_default_column(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Invalid_default_column() (localctx IInvalid_default_columnContext) {
	localctx = NewInvalid_default_columnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, GoogleSQLParserRULE_invalid_default_column)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1172)
		p.Default_column_info()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDefault_column_infoContext is an interface to support dynamic dispatch.
type IDefault_column_infoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DEFAULT_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsDefault_column_infoContext differentiates from other interfaces.
	IsDefault_column_infoContext()
}

type Default_column_infoContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefault_column_infoContext() *Default_column_infoContext {
	var p = new(Default_column_infoContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_default_column_info
	return p
}

func InitEmptyDefault_column_infoContext(p *Default_column_infoContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_default_column_info
}

func (*Default_column_infoContext) IsDefault_column_infoContext() {}

func NewDefault_column_infoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Default_column_infoContext {
	var p = new(Default_column_infoContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_default_column_info

	return p
}

func (s *Default_column_infoContext) GetParser() antlr.Parser { return s.parser }

func (s *Default_column_infoContext) DEFAULT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDEFAULT_SYMBOL, 0)
}

func (s *Default_column_infoContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Default_column_infoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Default_column_infoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Default_column_infoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterDefault_column_info(s)
	}
}

func (s *Default_column_infoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitDefault_column_info(s)
	}
}

func (s *Default_column_infoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitDefault_column_info(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Default_column_info() (localctx IDefault_column_infoContext) {
	localctx = NewDefault_column_infoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, GoogleSQLParserRULE_default_column_info)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1174)
		p.Match(GoogleSQLParserDEFAULT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1175)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGenerated_column_infoContext is an interface to support dynamic dispatch.
type IGenerated_column_infoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Generated_mode() IGenerated_modeContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Stored_mode() IStored_modeContext
	Identity_column_info() IIdentity_column_infoContext

	// IsGenerated_column_infoContext differentiates from other interfaces.
	IsGenerated_column_infoContext()
}

type Generated_column_infoContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenerated_column_infoContext() *Generated_column_infoContext {
	var p = new(Generated_column_infoContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_generated_column_info
	return p
}

func InitEmptyGenerated_column_infoContext(p *Generated_column_infoContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_generated_column_info
}

func (*Generated_column_infoContext) IsGenerated_column_infoContext() {}

func NewGenerated_column_infoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Generated_column_infoContext {
	var p = new(Generated_column_infoContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_generated_column_info

	return p
}

func (s *Generated_column_infoContext) GetParser() antlr.Parser { return s.parser }

func (s *Generated_column_infoContext) Generated_mode() IGenerated_modeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenerated_modeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenerated_modeContext)
}

func (s *Generated_column_infoContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Generated_column_infoContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Generated_column_infoContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Generated_column_infoContext) Stored_mode() IStored_modeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStored_modeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStored_modeContext)
}

func (s *Generated_column_infoContext) Identity_column_info() IIdentity_column_infoContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentity_column_infoContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentity_column_infoContext)
}

func (s *Generated_column_infoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Generated_column_infoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Generated_column_infoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGenerated_column_info(s)
	}
}

func (s *Generated_column_infoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGenerated_column_info(s)
	}
}

func (s *Generated_column_infoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGenerated_column_info(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Generated_column_info() (localctx IGenerated_column_infoContext) {
	localctx = NewGenerated_column_infoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, GoogleSQLParserRULE_generated_column_info)
	var _la int

	p.SetState(1187)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 57, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1177)
			p.Generated_mode()
		}
		{
			p.SetState(1178)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1179)
			p.expression(0)
		}
		{
			p.SetState(1180)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1182)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserSTORED_SYMBOL {
			{
				p.SetState(1181)
				p.Stored_mode()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1184)
			p.Generated_mode()
		}
		{
			p.SetState(1185)
			p.Identity_column_info()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIdentity_column_infoContext is an interface to support dynamic dispatch.
type IIdentity_column_infoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTITY_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Opt_start_with() IOpt_start_withContext
	Opt_increment_by() IOpt_increment_byContext
	Opt_maxvalue() IOpt_maxvalueContext
	Opt_minvalue() IOpt_minvalueContext
	Opt_cycle() IOpt_cycleContext

	// IsIdentity_column_infoContext differentiates from other interfaces.
	IsIdentity_column_infoContext()
}

type Identity_column_infoContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentity_column_infoContext() *Identity_column_infoContext {
	var p = new(Identity_column_infoContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_identity_column_info
	return p
}

func InitEmptyIdentity_column_infoContext(p *Identity_column_infoContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_identity_column_info
}

func (*Identity_column_infoContext) IsIdentity_column_infoContext() {}

func NewIdentity_column_infoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Identity_column_infoContext {
	var p = new(Identity_column_infoContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_identity_column_info

	return p
}

func (s *Identity_column_infoContext) GetParser() antlr.Parser { return s.parser }

func (s *Identity_column_infoContext) IDENTITY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIDENTITY_SYMBOL, 0)
}

func (s *Identity_column_infoContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Identity_column_infoContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Identity_column_infoContext) Opt_start_with() IOpt_start_withContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_start_withContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_start_withContext)
}

func (s *Identity_column_infoContext) Opt_increment_by() IOpt_increment_byContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_increment_byContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_increment_byContext)
}

func (s *Identity_column_infoContext) Opt_maxvalue() IOpt_maxvalueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_maxvalueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_maxvalueContext)
}

func (s *Identity_column_infoContext) Opt_minvalue() IOpt_minvalueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_minvalueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_minvalueContext)
}

func (s *Identity_column_infoContext) Opt_cycle() IOpt_cycleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_cycleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_cycleContext)
}

func (s *Identity_column_infoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Identity_column_infoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Identity_column_infoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterIdentity_column_info(s)
	}
}

func (s *Identity_column_infoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitIdentity_column_info(s)
	}
}

func (s *Identity_column_infoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitIdentity_column_info(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Identity_column_info() (localctx IIdentity_column_infoContext) {
	localctx = NewIdentity_column_infoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, GoogleSQLParserRULE_identity_column_info)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1189)
		p.Match(GoogleSQLParserIDENTITY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1190)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1192)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserSTART_SYMBOL {
		{
			p.SetState(1191)
			p.Opt_start_with()
		}

	}
	p.SetState(1195)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserINCREMENT_SYMBOL {
		{
			p.SetState(1194)
			p.Opt_increment_by()
		}

	}
	p.SetState(1198)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserMAXVALUE_SYMBOL {
		{
			p.SetState(1197)
			p.Opt_maxvalue()
		}

	}
	p.SetState(1201)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserMINVALUE_SYMBOL {
		{
			p.SetState(1200)
			p.Opt_minvalue()
		}

	}
	p.SetState(1204)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserCYCLE_SYMBOL || _la == GoogleSQLParserNO_SYMBOL {
		{
			p.SetState(1203)
			p.Opt_cycle()
		}

	}
	{
		p.SetState(1206)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_start_withContext is an interface to support dynamic dispatch.
type IOpt_start_withContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	START_SYMBOL() antlr.TerminalNode
	WITH_SYMBOL() antlr.TerminalNode
	Signed_numeric_literal() ISigned_numeric_literalContext

	// IsOpt_start_withContext differentiates from other interfaces.
	IsOpt_start_withContext()
}

type Opt_start_withContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_start_withContext() *Opt_start_withContext {
	var p = new(Opt_start_withContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_start_with
	return p
}

func InitEmptyOpt_start_withContext(p *Opt_start_withContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_start_with
}

func (*Opt_start_withContext) IsOpt_start_withContext() {}

func NewOpt_start_withContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_start_withContext {
	var p = new(Opt_start_withContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_start_with

	return p
}

func (s *Opt_start_withContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_start_withContext) START_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTART_SYMBOL, 0)
}

func (s *Opt_start_withContext) WITH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWITH_SYMBOL, 0)
}

func (s *Opt_start_withContext) Signed_numeric_literal() ISigned_numeric_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISigned_numeric_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISigned_numeric_literalContext)
}

func (s *Opt_start_withContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_start_withContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_start_withContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_start_with(s)
	}
}

func (s *Opt_start_withContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_start_with(s)
	}
}

func (s *Opt_start_withContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_start_with(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_start_with() (localctx IOpt_start_withContext) {
	localctx = NewOpt_start_withContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, GoogleSQLParserRULE_opt_start_with)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1208)
		p.Match(GoogleSQLParserSTART_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1209)
		p.Match(GoogleSQLParserWITH_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1210)
		p.Signed_numeric_literal()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_increment_byContext is an interface to support dynamic dispatch.
type IOpt_increment_byContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	INCREMENT_SYMBOL() antlr.TerminalNode
	BY_SYMBOL() antlr.TerminalNode
	Signed_numeric_literal() ISigned_numeric_literalContext

	// IsOpt_increment_byContext differentiates from other interfaces.
	IsOpt_increment_byContext()
}

type Opt_increment_byContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_increment_byContext() *Opt_increment_byContext {
	var p = new(Opt_increment_byContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_increment_by
	return p
}

func InitEmptyOpt_increment_byContext(p *Opt_increment_byContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_increment_by
}

func (*Opt_increment_byContext) IsOpt_increment_byContext() {}

func NewOpt_increment_byContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_increment_byContext {
	var p = new(Opt_increment_byContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_increment_by

	return p
}

func (s *Opt_increment_byContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_increment_byContext) INCREMENT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINCREMENT_SYMBOL, 0)
}

func (s *Opt_increment_byContext) BY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBY_SYMBOL, 0)
}

func (s *Opt_increment_byContext) Signed_numeric_literal() ISigned_numeric_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISigned_numeric_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISigned_numeric_literalContext)
}

func (s *Opt_increment_byContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_increment_byContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_increment_byContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_increment_by(s)
	}
}

func (s *Opt_increment_byContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_increment_by(s)
	}
}

func (s *Opt_increment_byContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_increment_by(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_increment_by() (localctx IOpt_increment_byContext) {
	localctx = NewOpt_increment_byContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, GoogleSQLParserRULE_opt_increment_by)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1212)
		p.Match(GoogleSQLParserINCREMENT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1213)
		p.Match(GoogleSQLParserBY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1214)
		p.Signed_numeric_literal()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_maxvalueContext is an interface to support dynamic dispatch.
type IOpt_maxvalueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MAXVALUE_SYMBOL() antlr.TerminalNode
	Signed_numeric_literal() ISigned_numeric_literalContext

	// IsOpt_maxvalueContext differentiates from other interfaces.
	IsOpt_maxvalueContext()
}

type Opt_maxvalueContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_maxvalueContext() *Opt_maxvalueContext {
	var p = new(Opt_maxvalueContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_maxvalue
	return p
}

func InitEmptyOpt_maxvalueContext(p *Opt_maxvalueContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_maxvalue
}

func (*Opt_maxvalueContext) IsOpt_maxvalueContext() {}

func NewOpt_maxvalueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_maxvalueContext {
	var p = new(Opt_maxvalueContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_maxvalue

	return p
}

func (s *Opt_maxvalueContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_maxvalueContext) MAXVALUE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMAXVALUE_SYMBOL, 0)
}

func (s *Opt_maxvalueContext) Signed_numeric_literal() ISigned_numeric_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISigned_numeric_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISigned_numeric_literalContext)
}

func (s *Opt_maxvalueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_maxvalueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_maxvalueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_maxvalue(s)
	}
}

func (s *Opt_maxvalueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_maxvalue(s)
	}
}

func (s *Opt_maxvalueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_maxvalue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_maxvalue() (localctx IOpt_maxvalueContext) {
	localctx = NewOpt_maxvalueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, GoogleSQLParserRULE_opt_maxvalue)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1216)
		p.Match(GoogleSQLParserMAXVALUE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1217)
		p.Signed_numeric_literal()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_minvalueContext is an interface to support dynamic dispatch.
type IOpt_minvalueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MINVALUE_SYMBOL() antlr.TerminalNode
	Signed_numeric_literal() ISigned_numeric_literalContext

	// IsOpt_minvalueContext differentiates from other interfaces.
	IsOpt_minvalueContext()
}

type Opt_minvalueContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_minvalueContext() *Opt_minvalueContext {
	var p = new(Opt_minvalueContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_minvalue
	return p
}

func InitEmptyOpt_minvalueContext(p *Opt_minvalueContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_minvalue
}

func (*Opt_minvalueContext) IsOpt_minvalueContext() {}

func NewOpt_minvalueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_minvalueContext {
	var p = new(Opt_minvalueContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_minvalue

	return p
}

func (s *Opt_minvalueContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_minvalueContext) MINVALUE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMINVALUE_SYMBOL, 0)
}

func (s *Opt_minvalueContext) Signed_numeric_literal() ISigned_numeric_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISigned_numeric_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISigned_numeric_literalContext)
}

func (s *Opt_minvalueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_minvalueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_minvalueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_minvalue(s)
	}
}

func (s *Opt_minvalueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_minvalue(s)
	}
}

func (s *Opt_minvalueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_minvalue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_minvalue() (localctx IOpt_minvalueContext) {
	localctx = NewOpt_minvalueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, GoogleSQLParserRULE_opt_minvalue)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1219)
		p.Match(GoogleSQLParserMINVALUE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1220)
		p.Signed_numeric_literal()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_cycleContext is an interface to support dynamic dispatch.
type IOpt_cycleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CYCLE_SYMBOL() antlr.TerminalNode
	NO_SYMBOL() antlr.TerminalNode

	// IsOpt_cycleContext differentiates from other interfaces.
	IsOpt_cycleContext()
}

type Opt_cycleContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_cycleContext() *Opt_cycleContext {
	var p = new(Opt_cycleContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_cycle
	return p
}

func InitEmptyOpt_cycleContext(p *Opt_cycleContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_cycle
}

func (*Opt_cycleContext) IsOpt_cycleContext() {}

func NewOpt_cycleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_cycleContext {
	var p = new(Opt_cycleContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_cycle

	return p
}

func (s *Opt_cycleContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_cycleContext) CYCLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCYCLE_SYMBOL, 0)
}

func (s *Opt_cycleContext) NO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNO_SYMBOL, 0)
}

func (s *Opt_cycleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_cycleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_cycleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_cycle(s)
	}
}

func (s *Opt_cycleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_cycle(s)
	}
}

func (s *Opt_cycleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_cycle(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_cycle() (localctx IOpt_cycleContext) {
	localctx = NewOpt_cycleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, GoogleSQLParserRULE_opt_cycle)
	p.SetState(1225)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserCYCLE_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1222)
			p.Match(GoogleSQLParserCYCLE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserNO_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1223)
			p.Match(GoogleSQLParserNO_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1224)
			p.Match(GoogleSQLParserCYCLE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISigned_numeric_literalContext is an interface to support dynamic dispatch.
type ISigned_numeric_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Integer_literal() IInteger_literalContext
	Numeric_literal() INumeric_literalContext
	Bignumeric_literal() IBignumeric_literalContext
	Floating_point_literal() IFloating_point_literalContext
	MINUS_OPERATOR() antlr.TerminalNode

	// IsSigned_numeric_literalContext differentiates from other interfaces.
	IsSigned_numeric_literalContext()
}

type Signed_numeric_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySigned_numeric_literalContext() *Signed_numeric_literalContext {
	var p = new(Signed_numeric_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_signed_numeric_literal
	return p
}

func InitEmptySigned_numeric_literalContext(p *Signed_numeric_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_signed_numeric_literal
}

func (*Signed_numeric_literalContext) IsSigned_numeric_literalContext() {}

func NewSigned_numeric_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Signed_numeric_literalContext {
	var p = new(Signed_numeric_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_signed_numeric_literal

	return p
}

func (s *Signed_numeric_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Signed_numeric_literalContext) Integer_literal() IInteger_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInteger_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInteger_literalContext)
}

func (s *Signed_numeric_literalContext) Numeric_literal() INumeric_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumeric_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumeric_literalContext)
}

func (s *Signed_numeric_literalContext) Bignumeric_literal() IBignumeric_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBignumeric_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBignumeric_literalContext)
}

func (s *Signed_numeric_literalContext) Floating_point_literal() IFloating_point_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFloating_point_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFloating_point_literalContext)
}

func (s *Signed_numeric_literalContext) MINUS_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMINUS_OPERATOR, 0)
}

func (s *Signed_numeric_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Signed_numeric_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Signed_numeric_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSigned_numeric_literal(s)
	}
}

func (s *Signed_numeric_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSigned_numeric_literal(s)
	}
}

func (s *Signed_numeric_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSigned_numeric_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Signed_numeric_literal() (localctx ISigned_numeric_literalContext) {
	localctx = NewSigned_numeric_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, GoogleSQLParserRULE_signed_numeric_literal)
	p.SetState(1235)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 64, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1227)
			p.Integer_literal()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1228)
			p.Numeric_literal()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1229)
			p.Bignumeric_literal()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1230)
			p.Floating_point_literal()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1231)
			p.Match(GoogleSQLParserMINUS_OPERATOR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1232)
			p.Integer_literal()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1233)
			p.Match(GoogleSQLParserMINUS_OPERATOR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1234)
			p.Floating_point_literal()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStored_modeContext is an interface to support dynamic dispatch.
type IStored_modeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	STORED_SYMBOL() antlr.TerminalNode
	VOLATILE_SYMBOL() antlr.TerminalNode

	// IsStored_modeContext differentiates from other interfaces.
	IsStored_modeContext()
}

type Stored_modeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStored_modeContext() *Stored_modeContext {
	var p = new(Stored_modeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_stored_mode
	return p
}

func InitEmptyStored_modeContext(p *Stored_modeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_stored_mode
}

func (*Stored_modeContext) IsStored_modeContext() {}

func NewStored_modeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Stored_modeContext {
	var p = new(Stored_modeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_stored_mode

	return p
}

func (s *Stored_modeContext) GetParser() antlr.Parser { return s.parser }

func (s *Stored_modeContext) STORED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTORED_SYMBOL, 0)
}

func (s *Stored_modeContext) VOLATILE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserVOLATILE_SYMBOL, 0)
}

func (s *Stored_modeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stored_modeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Stored_modeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStored_mode(s)
	}
}

func (s *Stored_modeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStored_mode(s)
	}
}

func (s *Stored_modeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStored_mode(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Stored_mode() (localctx IStored_modeContext) {
	localctx = NewStored_modeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, GoogleSQLParserRULE_stored_mode)
	p.SetState(1240)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 65, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1237)
			p.Match(GoogleSQLParserSTORED_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1238)
			p.Match(GoogleSQLParserVOLATILE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1239)
			p.Match(GoogleSQLParserSTORED_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGenerated_modeContext is an interface to support dynamic dispatch.
type IGenerated_modeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	GENERATED_SYMBOL() antlr.TerminalNode
	AS_SYMBOL() antlr.TerminalNode
	ALWAYS_SYMBOL() antlr.TerminalNode
	BY_SYMBOL() antlr.TerminalNode
	DEFAULT_SYMBOL() antlr.TerminalNode

	// IsGenerated_modeContext differentiates from other interfaces.
	IsGenerated_modeContext()
}

type Generated_modeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenerated_modeContext() *Generated_modeContext {
	var p = new(Generated_modeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_generated_mode
	return p
}

func InitEmptyGenerated_modeContext(p *Generated_modeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_generated_mode
}

func (*Generated_modeContext) IsGenerated_modeContext() {}

func NewGenerated_modeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Generated_modeContext {
	var p = new(Generated_modeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_generated_mode

	return p
}

func (s *Generated_modeContext) GetParser() antlr.Parser { return s.parser }

func (s *Generated_modeContext) GENERATED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGENERATED_SYMBOL, 0)
}

func (s *Generated_modeContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Generated_modeContext) ALWAYS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserALWAYS_SYMBOL, 0)
}

func (s *Generated_modeContext) BY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBY_SYMBOL, 0)
}

func (s *Generated_modeContext) DEFAULT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDEFAULT_SYMBOL, 0)
}

func (s *Generated_modeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Generated_modeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Generated_modeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGenerated_mode(s)
	}
}

func (s *Generated_modeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGenerated_mode(s)
	}
}

func (s *Generated_modeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGenerated_mode(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Generated_mode() (localctx IGenerated_modeContext) {
	localctx = NewGenerated_modeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, GoogleSQLParserRULE_generated_mode)
	p.SetState(1252)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 66, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1242)
			p.Match(GoogleSQLParserGENERATED_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1243)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1244)
			p.Match(GoogleSQLParserGENERATED_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1245)
			p.Match(GoogleSQLParserALWAYS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1246)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1247)
			p.Match(GoogleSQLParserGENERATED_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1248)
			p.Match(GoogleSQLParserBY_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1249)
			p.Match(GoogleSQLParserDEFAULT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1250)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1251)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumn_schema_innerContext is an interface to support dynamic dispatch.
type IColumn_schema_innerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Raw_column_schema_inner() IRaw_column_schema_innerContext
	Opt_type_parameters() IOpt_type_parametersContext

	// IsColumn_schema_innerContext differentiates from other interfaces.
	IsColumn_schema_innerContext()
}

type Column_schema_innerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_schema_innerContext() *Column_schema_innerContext {
	var p = new(Column_schema_innerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_column_schema_inner
	return p
}

func InitEmptyColumn_schema_innerContext(p *Column_schema_innerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_column_schema_inner
}

func (*Column_schema_innerContext) IsColumn_schema_innerContext() {}

func NewColumn_schema_innerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_schema_innerContext {
	var p = new(Column_schema_innerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_column_schema_inner

	return p
}

func (s *Column_schema_innerContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_schema_innerContext) Raw_column_schema_inner() IRaw_column_schema_innerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRaw_column_schema_innerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRaw_column_schema_innerContext)
}

func (s *Column_schema_innerContext) Opt_type_parameters() IOpt_type_parametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_type_parametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_type_parametersContext)
}

func (s *Column_schema_innerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_schema_innerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_schema_innerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterColumn_schema_inner(s)
	}
}

func (s *Column_schema_innerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitColumn_schema_inner(s)
	}
}

func (s *Column_schema_innerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitColumn_schema_inner(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Column_schema_inner() (localctx IColumn_schema_innerContext) {
	localctx = NewColumn_schema_innerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, GoogleSQLParserRULE_column_schema_inner)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1254)
		p.Raw_column_schema_inner()
	}
	p.SetState(1256)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 67, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1255)
			p.Opt_type_parameters()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRaw_column_schema_innerContext is an interface to support dynamic dispatch.
type IRaw_column_schema_innerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Simple_column_schema_inner() ISimple_column_schema_innerContext
	Array_column_schema_inner() IArray_column_schema_innerContext
	Struct_column_schema_inner() IStruct_column_schema_innerContext
	Range_column_schema_inner() IRange_column_schema_innerContext

	// IsRaw_column_schema_innerContext differentiates from other interfaces.
	IsRaw_column_schema_innerContext()
}

type Raw_column_schema_innerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRaw_column_schema_innerContext() *Raw_column_schema_innerContext {
	var p = new(Raw_column_schema_innerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_raw_column_schema_inner
	return p
}

func InitEmptyRaw_column_schema_innerContext(p *Raw_column_schema_innerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_raw_column_schema_inner
}

func (*Raw_column_schema_innerContext) IsRaw_column_schema_innerContext() {}

func NewRaw_column_schema_innerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Raw_column_schema_innerContext {
	var p = new(Raw_column_schema_innerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_raw_column_schema_inner

	return p
}

func (s *Raw_column_schema_innerContext) GetParser() antlr.Parser { return s.parser }

func (s *Raw_column_schema_innerContext) Simple_column_schema_inner() ISimple_column_schema_innerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimple_column_schema_innerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimple_column_schema_innerContext)
}

func (s *Raw_column_schema_innerContext) Array_column_schema_inner() IArray_column_schema_innerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArray_column_schema_innerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArray_column_schema_innerContext)
}

func (s *Raw_column_schema_innerContext) Struct_column_schema_inner() IStruct_column_schema_innerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_column_schema_innerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_column_schema_innerContext)
}

func (s *Raw_column_schema_innerContext) Range_column_schema_inner() IRange_column_schema_innerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRange_column_schema_innerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRange_column_schema_innerContext)
}

func (s *Raw_column_schema_innerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Raw_column_schema_innerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Raw_column_schema_innerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRaw_column_schema_inner(s)
	}
}

func (s *Raw_column_schema_innerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRaw_column_schema_inner(s)
	}
}

func (s *Raw_column_schema_innerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRaw_column_schema_inner(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Raw_column_schema_inner() (localctx IRaw_column_schema_innerContext) {
	localctx = NewRaw_column_schema_innerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, GoogleSQLParserRULE_raw_column_schema_inner)
	p.SetState(1262)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserINTERVAL_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1258)
			p.Simple_column_schema_inner()
		}

	case GoogleSQLParserARRAY_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1259)
			p.Array_column_schema_inner()
		}

	case GoogleSQLParserSTRUCT_SYMBOL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1260)
			p.Struct_column_schema_inner()
		}

	case GoogleSQLParserRANGE_SYMBOL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1261)
			p.Range_column_schema_inner()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRange_column_schema_innerContext is an interface to support dynamic dispatch.
type IRange_column_schema_innerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RANGE_SYMBOL() antlr.TerminalNode
	Template_type_open() ITemplate_type_openContext
	Field_schema() IField_schemaContext
	Template_type_close() ITemplate_type_closeContext

	// IsRange_column_schema_innerContext differentiates from other interfaces.
	IsRange_column_schema_innerContext()
}

type Range_column_schema_innerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRange_column_schema_innerContext() *Range_column_schema_innerContext {
	var p = new(Range_column_schema_innerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_range_column_schema_inner
	return p
}

func InitEmptyRange_column_schema_innerContext(p *Range_column_schema_innerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_range_column_schema_inner
}

func (*Range_column_schema_innerContext) IsRange_column_schema_innerContext() {}

func NewRange_column_schema_innerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Range_column_schema_innerContext {
	var p = new(Range_column_schema_innerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_range_column_schema_inner

	return p
}

func (s *Range_column_schema_innerContext) GetParser() antlr.Parser { return s.parser }

func (s *Range_column_schema_innerContext) RANGE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRANGE_SYMBOL, 0)
}

func (s *Range_column_schema_innerContext) Template_type_open() ITemplate_type_openContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_openContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_openContext)
}

func (s *Range_column_schema_innerContext) Field_schema() IField_schemaContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IField_schemaContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IField_schemaContext)
}

func (s *Range_column_schema_innerContext) Template_type_close() ITemplate_type_closeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_closeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_closeContext)
}

func (s *Range_column_schema_innerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Range_column_schema_innerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Range_column_schema_innerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRange_column_schema_inner(s)
	}
}

func (s *Range_column_schema_innerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRange_column_schema_inner(s)
	}
}

func (s *Range_column_schema_innerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRange_column_schema_inner(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Range_column_schema_inner() (localctx IRange_column_schema_innerContext) {
	localctx = NewRange_column_schema_innerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, GoogleSQLParserRULE_range_column_schema_inner)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1264)
		p.Match(GoogleSQLParserRANGE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1265)
		p.Template_type_open()
	}
	{
		p.SetState(1266)
		p.Field_schema()
	}
	{
		p.SetState(1267)
		p.Template_type_close()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStruct_column_schema_innerContext is an interface to support dynamic dispatch.
type IStruct_column_schema_innerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	STRUCT_SYMBOL() antlr.TerminalNode
	Template_type_open() ITemplate_type_openContext
	Template_type_close() ITemplate_type_closeContext
	AllStruct_column_field() []IStruct_column_fieldContext
	Struct_column_field(i int) IStruct_column_fieldContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsStruct_column_schema_innerContext differentiates from other interfaces.
	IsStruct_column_schema_innerContext()
}

type Struct_column_schema_innerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStruct_column_schema_innerContext() *Struct_column_schema_innerContext {
	var p = new(Struct_column_schema_innerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_column_schema_inner
	return p
}

func InitEmptyStruct_column_schema_innerContext(p *Struct_column_schema_innerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_column_schema_inner
}

func (*Struct_column_schema_innerContext) IsStruct_column_schema_innerContext() {}

func NewStruct_column_schema_innerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Struct_column_schema_innerContext {
	var p = new(Struct_column_schema_innerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_struct_column_schema_inner

	return p
}

func (s *Struct_column_schema_innerContext) GetParser() antlr.Parser { return s.parser }

func (s *Struct_column_schema_innerContext) STRUCT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTRUCT_SYMBOL, 0)
}

func (s *Struct_column_schema_innerContext) Template_type_open() ITemplate_type_openContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_openContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_openContext)
}

func (s *Struct_column_schema_innerContext) Template_type_close() ITemplate_type_closeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_closeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_closeContext)
}

func (s *Struct_column_schema_innerContext) AllStruct_column_field() []IStruct_column_fieldContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStruct_column_fieldContext); ok {
			len++
		}
	}

	tst := make([]IStruct_column_fieldContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStruct_column_fieldContext); ok {
			tst[i] = t.(IStruct_column_fieldContext)
			i++
		}
	}

	return tst
}

func (s *Struct_column_schema_innerContext) Struct_column_field(i int) IStruct_column_fieldContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_column_fieldContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_column_fieldContext)
}

func (s *Struct_column_schema_innerContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Struct_column_schema_innerContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Struct_column_schema_innerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Struct_column_schema_innerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Struct_column_schema_innerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStruct_column_schema_inner(s)
	}
}

func (s *Struct_column_schema_innerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStruct_column_schema_inner(s)
	}
}

func (s *Struct_column_schema_innerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStruct_column_schema_inner(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Struct_column_schema_inner() (localctx IStruct_column_schema_innerContext) {
	localctx = NewStruct_column_schema_innerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, GoogleSQLParserRULE_struct_column_schema_inner)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1269)
		p.Match(GoogleSQLParserSTRUCT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1270)
		p.Template_type_open()
	}
	p.SetState(1279)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64((_la-54)) & ^0x3f) == 0 && ((int64(1)<<(_la-54))&-254304519003570175) != 0) || ((int64((_la-118)) & ^0x3f) == 0 && ((int64(1)<<(_la-118))&-1) != 0) || ((int64((_la-182)) & ^0x3f) == 0 && ((int64(1)<<(_la-182))&-1) != 0) || ((int64((_la-246)) & ^0x3f) == 0 && ((int64(1)<<(_la-246))&140737488354815) != 0) || _la == GoogleSQLParserIDENTIFIER {
		{
			p.SetState(1271)
			p.Struct_column_field()
		}
		p.SetState(1276)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == GoogleSQLParserCOMMA_SYMBOL {
			{
				p.SetState(1272)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1273)
				p.Struct_column_field()
			}

			p.SetState(1278)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(1281)
		p.Template_type_close()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStruct_column_fieldContext is an interface to support dynamic dispatch.
type IStruct_column_fieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Column_schema_inner() IColumn_schema_innerContext
	Collate_clause() ICollate_clauseContext
	Opt_field_attributes() IOpt_field_attributesContext
	Identifier() IIdentifierContext
	Field_schema() IField_schemaContext

	// IsStruct_column_fieldContext differentiates from other interfaces.
	IsStruct_column_fieldContext()
}

type Struct_column_fieldContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStruct_column_fieldContext() *Struct_column_fieldContext {
	var p = new(Struct_column_fieldContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_column_field
	return p
}

func InitEmptyStruct_column_fieldContext(p *Struct_column_fieldContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_column_field
}

func (*Struct_column_fieldContext) IsStruct_column_fieldContext() {}

func NewStruct_column_fieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Struct_column_fieldContext {
	var p = new(Struct_column_fieldContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_struct_column_field

	return p
}

func (s *Struct_column_fieldContext) GetParser() antlr.Parser { return s.parser }

func (s *Struct_column_fieldContext) Column_schema_inner() IColumn_schema_innerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_schema_innerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_schema_innerContext)
}

func (s *Struct_column_fieldContext) Collate_clause() ICollate_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollate_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollate_clauseContext)
}

func (s *Struct_column_fieldContext) Opt_field_attributes() IOpt_field_attributesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_field_attributesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_field_attributesContext)
}

func (s *Struct_column_fieldContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Struct_column_fieldContext) Field_schema() IField_schemaContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IField_schemaContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IField_schemaContext)
}

func (s *Struct_column_fieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Struct_column_fieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Struct_column_fieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStruct_column_field(s)
	}
}

func (s *Struct_column_fieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStruct_column_field(s)
	}
}

func (s *Struct_column_fieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStruct_column_field(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Struct_column_field() (localctx IStruct_column_fieldContext) {
	localctx = NewStruct_column_fieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, GoogleSQLParserRULE_struct_column_field)
	var _la int

	p.SetState(1293)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 73, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1283)
			p.Column_schema_inner()
		}
		p.SetState(1285)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserCOLLATE_SYMBOL {
			{
				p.SetState(1284)
				p.Collate_clause()
			}

		}
		p.SetState(1288)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserNOT_SYMBOL {
			{
				p.SetState(1287)
				p.Opt_field_attributes()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1290)
			p.Identifier()
		}
		{
			p.SetState(1291)
			p.Field_schema()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISimple_column_schema_innerContext is an interface to support dynamic dispatch.
type ISimple_column_schema_innerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Path_expression() IPath_expressionContext
	INTERVAL_SYMBOL() antlr.TerminalNode

	// IsSimple_column_schema_innerContext differentiates from other interfaces.
	IsSimple_column_schema_innerContext()
}

type Simple_column_schema_innerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimple_column_schema_innerContext() *Simple_column_schema_innerContext {
	var p = new(Simple_column_schema_innerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_simple_column_schema_inner
	return p
}

func InitEmptySimple_column_schema_innerContext(p *Simple_column_schema_innerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_simple_column_schema_inner
}

func (*Simple_column_schema_innerContext) IsSimple_column_schema_innerContext() {}

func NewSimple_column_schema_innerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Simple_column_schema_innerContext {
	var p = new(Simple_column_schema_innerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_simple_column_schema_inner

	return p
}

func (s *Simple_column_schema_innerContext) GetParser() antlr.Parser { return s.parser }

func (s *Simple_column_schema_innerContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Simple_column_schema_innerContext) INTERVAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINTERVAL_SYMBOL, 0)
}

func (s *Simple_column_schema_innerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Simple_column_schema_innerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Simple_column_schema_innerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSimple_column_schema_inner(s)
	}
}

func (s *Simple_column_schema_innerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSimple_column_schema_inner(s)
	}
}

func (s *Simple_column_schema_innerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSimple_column_schema_inner(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Simple_column_schema_inner() (localctx ISimple_column_schema_innerContext) {
	localctx = NewSimple_column_schema_innerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, GoogleSQLParserRULE_simple_column_schema_inner)
	p.SetState(1297)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1295)
			p.Path_expression()
		}

	case GoogleSQLParserINTERVAL_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1296)
			p.Match(GoogleSQLParserINTERVAL_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArray_column_schema_innerContext is an interface to support dynamic dispatch.
type IArray_column_schema_innerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ARRAY_SYMBOL() antlr.TerminalNode
	Template_type_open() ITemplate_type_openContext
	Field_schema() IField_schemaContext
	Template_type_close() ITemplate_type_closeContext

	// IsArray_column_schema_innerContext differentiates from other interfaces.
	IsArray_column_schema_innerContext()
}

type Array_column_schema_innerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArray_column_schema_innerContext() *Array_column_schema_innerContext {
	var p = new(Array_column_schema_innerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_array_column_schema_inner
	return p
}

func InitEmptyArray_column_schema_innerContext(p *Array_column_schema_innerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_array_column_schema_inner
}

func (*Array_column_schema_innerContext) IsArray_column_schema_innerContext() {}

func NewArray_column_schema_innerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_column_schema_innerContext {
	var p = new(Array_column_schema_innerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_array_column_schema_inner

	return p
}

func (s *Array_column_schema_innerContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_column_schema_innerContext) ARRAY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserARRAY_SYMBOL, 0)
}

func (s *Array_column_schema_innerContext) Template_type_open() ITemplate_type_openContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_openContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_openContext)
}

func (s *Array_column_schema_innerContext) Field_schema() IField_schemaContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IField_schemaContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IField_schemaContext)
}

func (s *Array_column_schema_innerContext) Template_type_close() ITemplate_type_closeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_closeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_closeContext)
}

func (s *Array_column_schema_innerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_column_schema_innerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Array_column_schema_innerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterArray_column_schema_inner(s)
	}
}

func (s *Array_column_schema_innerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitArray_column_schema_inner(s)
	}
}

func (s *Array_column_schema_innerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitArray_column_schema_inner(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Array_column_schema_inner() (localctx IArray_column_schema_innerContext) {
	localctx = NewArray_column_schema_innerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, GoogleSQLParserRULE_array_column_schema_inner)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1299)
		p.Match(GoogleSQLParserARRAY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1300)
		p.Template_type_open()
	}
	{
		p.SetState(1301)
		p.Field_schema()
	}
	{
		p.SetState(1302)
		p.Template_type_close()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IField_schemaContext is an interface to support dynamic dispatch.
type IField_schemaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Column_schema_inner() IColumn_schema_innerContext
	Collate_clause() ICollate_clauseContext
	Opt_field_attributes() IOpt_field_attributesContext
	Options_list() IOptions_listContext

	// IsField_schemaContext differentiates from other interfaces.
	IsField_schemaContext()
}

type Field_schemaContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyField_schemaContext() *Field_schemaContext {
	var p = new(Field_schemaContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_field_schema
	return p
}

func InitEmptyField_schemaContext(p *Field_schemaContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_field_schema
}

func (*Field_schemaContext) IsField_schemaContext() {}

func NewField_schemaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Field_schemaContext {
	var p = new(Field_schemaContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_field_schema

	return p
}

func (s *Field_schemaContext) GetParser() antlr.Parser { return s.parser }

func (s *Field_schemaContext) Column_schema_inner() IColumn_schema_innerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_schema_innerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_schema_innerContext)
}

func (s *Field_schemaContext) Collate_clause() ICollate_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollate_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollate_clauseContext)
}

func (s *Field_schemaContext) Opt_field_attributes() IOpt_field_attributesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_field_attributesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_field_attributesContext)
}

func (s *Field_schemaContext) Options_list() IOptions_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOptions_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOptions_listContext)
}

func (s *Field_schemaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Field_schemaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Field_schemaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterField_schema(s)
	}
}

func (s *Field_schemaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitField_schema(s)
	}
}

func (s *Field_schemaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitField_schema(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Field_schema() (localctx IField_schemaContext) {
	localctx = NewField_schemaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, GoogleSQLParserRULE_field_schema)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1304)
		p.Column_schema_inner()
	}
	p.SetState(1306)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserCOLLATE_SYMBOL {
		{
			p.SetState(1305)
			p.Collate_clause()
		}

	}
	p.SetState(1309)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserNOT_SYMBOL {
		{
			p.SetState(1308)
			p.Opt_field_attributes()
		}

	}
	p.SetState(1312)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserLR_BRACKET_SYMBOL {
		{
			p.SetState(1311)
			p.Options_list()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_field_attributesContext is an interface to support dynamic dispatch.
type IOpt_field_attributesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Not_null_column_attribute() INot_null_column_attributeContext

	// IsOpt_field_attributesContext differentiates from other interfaces.
	IsOpt_field_attributesContext()
}

type Opt_field_attributesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_field_attributesContext() *Opt_field_attributesContext {
	var p = new(Opt_field_attributesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_field_attributes
	return p
}

func InitEmptyOpt_field_attributesContext(p *Opt_field_attributesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_field_attributes
}

func (*Opt_field_attributesContext) IsOpt_field_attributesContext() {}

func NewOpt_field_attributesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_field_attributesContext {
	var p = new(Opt_field_attributesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_field_attributes

	return p
}

func (s *Opt_field_attributesContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_field_attributesContext) Not_null_column_attribute() INot_null_column_attributeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INot_null_column_attributeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INot_null_column_attributeContext)
}

func (s *Opt_field_attributesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_field_attributesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_field_attributesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_field_attributes(s)
	}
}

func (s *Opt_field_attributesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_field_attributes(s)
	}
}

func (s *Opt_field_attributesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_field_attributes(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_field_attributes() (localctx IOpt_field_attributesContext) {
	localctx = NewOpt_field_attributesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, GoogleSQLParserRULE_opt_field_attributes)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1314)
		p.Not_null_column_attribute()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INot_null_column_attributeContext is an interface to support dynamic dispatch.
type INot_null_column_attributeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NOT_SYMBOL() antlr.TerminalNode
	NULL_SYMBOL() antlr.TerminalNode

	// IsNot_null_column_attributeContext differentiates from other interfaces.
	IsNot_null_column_attributeContext()
}

type Not_null_column_attributeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNot_null_column_attributeContext() *Not_null_column_attributeContext {
	var p = new(Not_null_column_attributeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_not_null_column_attribute
	return p
}

func InitEmptyNot_null_column_attributeContext(p *Not_null_column_attributeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_not_null_column_attribute
}

func (*Not_null_column_attributeContext) IsNot_null_column_attributeContext() {}

func NewNot_null_column_attributeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Not_null_column_attributeContext {
	var p = new(Not_null_column_attributeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_not_null_column_attribute

	return p
}

func (s *Not_null_column_attributeContext) GetParser() antlr.Parser { return s.parser }

func (s *Not_null_column_attributeContext) NOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNOT_SYMBOL, 0)
}

func (s *Not_null_column_attributeContext) NULL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNULL_SYMBOL, 0)
}

func (s *Not_null_column_attributeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Not_null_column_attributeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Not_null_column_attributeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterNot_null_column_attribute(s)
	}
}

func (s *Not_null_column_attributeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitNot_null_column_attribute(s)
	}
}

func (s *Not_null_column_attributeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitNot_null_column_attribute(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Not_null_column_attribute() (localctx INot_null_column_attributeContext) {
	localctx = NewNot_null_column_attributeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, GoogleSQLParserRULE_not_null_column_attribute)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1316)
		p.Match(GoogleSQLParserNOT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1317)
		p.Match(GoogleSQLParserNULL_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrimary_key_or_table_constraint_specContext is an interface to support dynamic dispatch.
type IPrimary_key_or_table_constraint_specContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Primary_key_spec() IPrimary_key_specContext
	Table_constraint_spec() ITable_constraint_specContext

	// IsPrimary_key_or_table_constraint_specContext differentiates from other interfaces.
	IsPrimary_key_or_table_constraint_specContext()
}

type Primary_key_or_table_constraint_specContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimary_key_or_table_constraint_specContext() *Primary_key_or_table_constraint_specContext {
	var p = new(Primary_key_or_table_constraint_specContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_primary_key_or_table_constraint_spec
	return p
}

func InitEmptyPrimary_key_or_table_constraint_specContext(p *Primary_key_or_table_constraint_specContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_primary_key_or_table_constraint_spec
}

func (*Primary_key_or_table_constraint_specContext) IsPrimary_key_or_table_constraint_specContext() {}

func NewPrimary_key_or_table_constraint_specContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Primary_key_or_table_constraint_specContext {
	var p = new(Primary_key_or_table_constraint_specContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_primary_key_or_table_constraint_spec

	return p
}

func (s *Primary_key_or_table_constraint_specContext) GetParser() antlr.Parser { return s.parser }

func (s *Primary_key_or_table_constraint_specContext) Primary_key_spec() IPrimary_key_specContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimary_key_specContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimary_key_specContext)
}

func (s *Primary_key_or_table_constraint_specContext) Table_constraint_spec() ITable_constraint_specContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_constraint_specContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_constraint_specContext)
}

func (s *Primary_key_or_table_constraint_specContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Primary_key_or_table_constraint_specContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Primary_key_or_table_constraint_specContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPrimary_key_or_table_constraint_spec(s)
	}
}

func (s *Primary_key_or_table_constraint_specContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPrimary_key_or_table_constraint_spec(s)
	}
}

func (s *Primary_key_or_table_constraint_specContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPrimary_key_or_table_constraint_spec(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Primary_key_or_table_constraint_spec() (localctx IPrimary_key_or_table_constraint_specContext) {
	localctx = NewPrimary_key_or_table_constraint_specContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, GoogleSQLParserRULE_primary_key_or_table_constraint_spec)
	p.SetState(1321)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserPRIMARY_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1319)
			p.Primary_key_spec()
		}

	case GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1320)
			p.Table_constraint_spec()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_if_not_existsContext is an interface to support dynamic dispatch.
type IOpt_if_not_existsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IF_SYMBOL() antlr.TerminalNode
	NOT_SYMBOL() antlr.TerminalNode
	EXISTS_SYMBOL() antlr.TerminalNode

	// IsOpt_if_not_existsContext differentiates from other interfaces.
	IsOpt_if_not_existsContext()
}

type Opt_if_not_existsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_if_not_existsContext() *Opt_if_not_existsContext {
	var p = new(Opt_if_not_existsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_if_not_exists
	return p
}

func InitEmptyOpt_if_not_existsContext(p *Opt_if_not_existsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_if_not_exists
}

func (*Opt_if_not_existsContext) IsOpt_if_not_existsContext() {}

func NewOpt_if_not_existsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_if_not_existsContext {
	var p = new(Opt_if_not_existsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_if_not_exists

	return p
}

func (s *Opt_if_not_existsContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_if_not_existsContext) IF_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIF_SYMBOL, 0)
}

func (s *Opt_if_not_existsContext) NOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNOT_SYMBOL, 0)
}

func (s *Opt_if_not_existsContext) EXISTS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXISTS_SYMBOL, 0)
}

func (s *Opt_if_not_existsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_if_not_existsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_if_not_existsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_if_not_exists(s)
	}
}

func (s *Opt_if_not_existsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_if_not_exists(s)
	}
}

func (s *Opt_if_not_existsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_if_not_exists(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_if_not_exists() (localctx IOpt_if_not_existsContext) {
	localctx = NewOpt_if_not_existsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, GoogleSQLParserRULE_opt_if_not_exists)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1323)
		p.Match(GoogleSQLParserIF_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1324)
		p.Match(GoogleSQLParserNOT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1325)
		p.Match(GoogleSQLParserEXISTS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrimary_key_specContext is an interface to support dynamic dispatch.
type IPrimary_key_specContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PRIMARY_SYMBOL() antlr.TerminalNode
	KEY_SYMBOL() antlr.TerminalNode
	Primary_key_element_list() IPrimary_key_element_listContext
	Constraint_enforcement() IConstraint_enforcementContext
	Options_list() IOptions_listContext

	// IsPrimary_key_specContext differentiates from other interfaces.
	IsPrimary_key_specContext()
}

type Primary_key_specContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimary_key_specContext() *Primary_key_specContext {
	var p = new(Primary_key_specContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_primary_key_spec
	return p
}

func InitEmptyPrimary_key_specContext(p *Primary_key_specContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_primary_key_spec
}

func (*Primary_key_specContext) IsPrimary_key_specContext() {}

func NewPrimary_key_specContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Primary_key_specContext {
	var p = new(Primary_key_specContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_primary_key_spec

	return p
}

func (s *Primary_key_specContext) GetParser() antlr.Parser { return s.parser }

func (s *Primary_key_specContext) PRIMARY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPRIMARY_SYMBOL, 0)
}

func (s *Primary_key_specContext) KEY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserKEY_SYMBOL, 0)
}

func (s *Primary_key_specContext) Primary_key_element_list() IPrimary_key_element_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimary_key_element_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimary_key_element_listContext)
}

func (s *Primary_key_specContext) Constraint_enforcement() IConstraint_enforcementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstraint_enforcementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstraint_enforcementContext)
}

func (s *Primary_key_specContext) Options_list() IOptions_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOptions_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOptions_listContext)
}

func (s *Primary_key_specContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Primary_key_specContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Primary_key_specContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPrimary_key_spec(s)
	}
}

func (s *Primary_key_specContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPrimary_key_spec(s)
	}
}

func (s *Primary_key_specContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPrimary_key_spec(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Primary_key_spec() (localctx IPrimary_key_specContext) {
	localctx = NewPrimary_key_specContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, GoogleSQLParserRULE_primary_key_spec)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1327)
		p.Match(GoogleSQLParserPRIMARY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1328)
		p.Match(GoogleSQLParserKEY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1329)
		p.Primary_key_element_list()
	}
	p.SetState(1331)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserNOT_SYMBOL || _la == GoogleSQLParserENFORCED_SYMBOL {
		{
			p.SetState(1330)
			p.Constraint_enforcement()
		}

	}
	p.SetState(1334)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserLR_BRACKET_SYMBOL {
		{
			p.SetState(1333)
			p.Options_list()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrimary_key_element_listContext is an interface to support dynamic dispatch.
type IPrimary_key_element_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	AllPrimary_key_element() []IPrimary_key_elementContext
	Primary_key_element(i int) IPrimary_key_elementContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsPrimary_key_element_listContext differentiates from other interfaces.
	IsPrimary_key_element_listContext()
}

type Primary_key_element_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimary_key_element_listContext() *Primary_key_element_listContext {
	var p = new(Primary_key_element_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_primary_key_element_list
	return p
}

func InitEmptyPrimary_key_element_listContext(p *Primary_key_element_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_primary_key_element_list
}

func (*Primary_key_element_listContext) IsPrimary_key_element_listContext() {}

func NewPrimary_key_element_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Primary_key_element_listContext {
	var p = new(Primary_key_element_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_primary_key_element_list

	return p
}

func (s *Primary_key_element_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Primary_key_element_listContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Primary_key_element_listContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Primary_key_element_listContext) AllPrimary_key_element() []IPrimary_key_elementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPrimary_key_elementContext); ok {
			len++
		}
	}

	tst := make([]IPrimary_key_elementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPrimary_key_elementContext); ok {
			tst[i] = t.(IPrimary_key_elementContext)
			i++
		}
	}

	return tst
}

func (s *Primary_key_element_listContext) Primary_key_element(i int) IPrimary_key_elementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimary_key_elementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimary_key_elementContext)
}

func (s *Primary_key_element_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Primary_key_element_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Primary_key_element_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Primary_key_element_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Primary_key_element_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPrimary_key_element_list(s)
	}
}

func (s *Primary_key_element_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPrimary_key_element_list(s)
	}
}

func (s *Primary_key_element_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPrimary_key_element_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Primary_key_element_list() (localctx IPrimary_key_element_listContext) {
	localctx = NewPrimary_key_element_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, GoogleSQLParserRULE_primary_key_element_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1336)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1345)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64((_la-72)) & ^0x3f) == 0 && ((int64(1)<<(_la-72))&-106523215214079) != 0) || ((int64((_la-136)) & ^0x3f) == 0 && ((int64(1)<<(_la-136))&-1) != 0) || ((int64((_la-200)) & ^0x3f) == 0 && ((int64(1)<<(_la-200))&-36028797018963969) != 0) || ((int64((_la-264)) & ^0x3f) == 0 && ((int64(1)<<(_la-264))&536870911) != 0) || _la == GoogleSQLParserIDENTIFIER {
		{
			p.SetState(1337)
			p.Primary_key_element()
		}
		p.SetState(1342)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == GoogleSQLParserCOMMA_SYMBOL {
			{
				p.SetState(1338)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1339)
				p.Primary_key_element()
			}

			p.SetState(1344)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(1347)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrimary_key_elementContext is an interface to support dynamic dispatch.
type IPrimary_key_elementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	Asc_or_desc() IAsc_or_descContext
	Null_order() INull_orderContext

	// IsPrimary_key_elementContext differentiates from other interfaces.
	IsPrimary_key_elementContext()
}

type Primary_key_elementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimary_key_elementContext() *Primary_key_elementContext {
	var p = new(Primary_key_elementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_primary_key_element
	return p
}

func InitEmptyPrimary_key_elementContext(p *Primary_key_elementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_primary_key_element
}

func (*Primary_key_elementContext) IsPrimary_key_elementContext() {}

func NewPrimary_key_elementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Primary_key_elementContext {
	var p = new(Primary_key_elementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_primary_key_element

	return p
}

func (s *Primary_key_elementContext) GetParser() antlr.Parser { return s.parser }

func (s *Primary_key_elementContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Primary_key_elementContext) Asc_or_desc() IAsc_or_descContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAsc_or_descContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAsc_or_descContext)
}

func (s *Primary_key_elementContext) Null_order() INull_orderContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INull_orderContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INull_orderContext)
}

func (s *Primary_key_elementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Primary_key_elementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Primary_key_elementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPrimary_key_element(s)
	}
}

func (s *Primary_key_elementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPrimary_key_element(s)
	}
}

func (s *Primary_key_elementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPrimary_key_element(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Primary_key_element() (localctx IPrimary_key_elementContext) {
	localctx = NewPrimary_key_elementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, GoogleSQLParserRULE_primary_key_element)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1349)
		p.Identifier()
	}
	p.SetState(1351)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserASC_SYMBOL || _la == GoogleSQLParserDESC_SYMBOL {
		{
			p.SetState(1350)
			p.Asc_or_desc()
		}

	}
	p.SetState(1354)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserNULLS_SYMBOL {
		{
			p.SetState(1353)
			p.Null_order()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_constraint_specContext is an interface to support dynamic dispatch.
type ITable_constraint_specContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CHECK_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Constraint_enforcement() IConstraint_enforcementContext
	Options_options_list() IOptions_options_listContext
	FOREIGN_SYMBOL() antlr.TerminalNode
	KEY_SYMBOL() antlr.TerminalNode
	Column_list() IColumn_listContext
	Foreign_key_reference() IForeign_key_referenceContext

	// IsTable_constraint_specContext differentiates from other interfaces.
	IsTable_constraint_specContext()
}

type Table_constraint_specContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_constraint_specContext() *Table_constraint_specContext {
	var p = new(Table_constraint_specContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_constraint_spec
	return p
}

func InitEmptyTable_constraint_specContext(p *Table_constraint_specContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_constraint_spec
}

func (*Table_constraint_specContext) IsTable_constraint_specContext() {}

func NewTable_constraint_specContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_constraint_specContext {
	var p = new(Table_constraint_specContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_table_constraint_spec

	return p
}

func (s *Table_constraint_specContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_constraint_specContext) CHECK_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCHECK_SYMBOL, 0)
}

func (s *Table_constraint_specContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Table_constraint_specContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Table_constraint_specContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Table_constraint_specContext) Constraint_enforcement() IConstraint_enforcementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstraint_enforcementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstraint_enforcementContext)
}

func (s *Table_constraint_specContext) Options_options_list() IOptions_options_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOptions_options_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOptions_options_listContext)
}

func (s *Table_constraint_specContext) FOREIGN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFOREIGN_SYMBOL, 0)
}

func (s *Table_constraint_specContext) KEY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserKEY_SYMBOL, 0)
}

func (s *Table_constraint_specContext) Column_list() IColumn_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_listContext)
}

func (s *Table_constraint_specContext) Foreign_key_reference() IForeign_key_referenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeign_key_referenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeign_key_referenceContext)
}

func (s *Table_constraint_specContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_constraint_specContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_constraint_specContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTable_constraint_spec(s)
	}
}

func (s *Table_constraint_specContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTable_constraint_spec(s)
	}
}

func (s *Table_constraint_specContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTable_constraint_spec(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Table_constraint_spec() (localctx ITable_constraint_specContext) {
	localctx = NewTable_constraint_specContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, GoogleSQLParserRULE_table_constraint_spec)
	var _la int

	p.SetState(1376)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserCHECK_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1356)
			p.Match(GoogleSQLParserCHECK_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1357)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1358)
			p.expression(0)
		}
		{
			p.SetState(1359)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1361)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserNOT_SYMBOL || _la == GoogleSQLParserENFORCED_SYMBOL {
			{
				p.SetState(1360)
				p.Constraint_enforcement()
			}

		}
		p.SetState(1364)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserOPTIONS_SYMBOL {
			{
				p.SetState(1363)
				p.Options_options_list()
			}

		}

	case GoogleSQLParserFOREIGN_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1366)
			p.Match(GoogleSQLParserFOREIGN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1367)
			p.Match(GoogleSQLParserKEY_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1368)
			p.Column_list()
		}
		{
			p.SetState(1369)
			p.Foreign_key_reference()
		}
		p.SetState(1371)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserNOT_SYMBOL || _la == GoogleSQLParserENFORCED_SYMBOL {
			{
				p.SetState(1370)
				p.Constraint_enforcement()
			}

		}
		p.SetState(1374)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserOPTIONS_SYMBOL {
			{
				p.SetState(1373)
				p.Options_options_list()
			}

		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IForeign_key_referenceContext is an interface to support dynamic dispatch.
type IForeign_key_referenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	REFERENCES_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext
	Column_list() IColumn_listContext
	Opt_foreign_key_match() IOpt_foreign_key_matchContext
	Opt_foreign_key_action() IOpt_foreign_key_actionContext

	// IsForeign_key_referenceContext differentiates from other interfaces.
	IsForeign_key_referenceContext()
}

type Foreign_key_referenceContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForeign_key_referenceContext() *Foreign_key_referenceContext {
	var p = new(Foreign_key_referenceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_reference
	return p
}

func InitEmptyForeign_key_referenceContext(p *Foreign_key_referenceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_reference
}

func (*Foreign_key_referenceContext) IsForeign_key_referenceContext() {}

func NewForeign_key_referenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Foreign_key_referenceContext {
	var p = new(Foreign_key_referenceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_reference

	return p
}

func (s *Foreign_key_referenceContext) GetParser() antlr.Parser { return s.parser }

func (s *Foreign_key_referenceContext) REFERENCES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREFERENCES_SYMBOL, 0)
}

func (s *Foreign_key_referenceContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Foreign_key_referenceContext) Column_list() IColumn_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_listContext)
}

func (s *Foreign_key_referenceContext) Opt_foreign_key_match() IOpt_foreign_key_matchContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_foreign_key_matchContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_foreign_key_matchContext)
}

func (s *Foreign_key_referenceContext) Opt_foreign_key_action() IOpt_foreign_key_actionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_foreign_key_actionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_foreign_key_actionContext)
}

func (s *Foreign_key_referenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Foreign_key_referenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Foreign_key_referenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterForeign_key_reference(s)
	}
}

func (s *Foreign_key_referenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitForeign_key_reference(s)
	}
}

func (s *Foreign_key_referenceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitForeign_key_reference(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Foreign_key_reference() (localctx IForeign_key_referenceContext) {
	localctx = NewForeign_key_referenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, GoogleSQLParserRULE_foreign_key_reference)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1378)
		p.Match(GoogleSQLParserREFERENCES_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1379)
		p.Path_expression()
	}
	{
		p.SetState(1380)
		p.Column_list()
	}
	p.SetState(1382)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserMATCH_SYMBOL {
		{
			p.SetState(1381)
			p.Opt_foreign_key_match()
		}

	}
	p.SetState(1385)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserON_SYMBOL {
		{
			p.SetState(1384)
			p.Opt_foreign_key_action()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_foreign_key_actionContext is an interface to support dynamic dispatch.
type IOpt_foreign_key_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Foreign_key_on_update() IForeign_key_on_updateContext
	Foreign_key_on_delete() IForeign_key_on_deleteContext

	// IsOpt_foreign_key_actionContext differentiates from other interfaces.
	IsOpt_foreign_key_actionContext()
}

type Opt_foreign_key_actionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_foreign_key_actionContext() *Opt_foreign_key_actionContext {
	var p = new(Opt_foreign_key_actionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_foreign_key_action
	return p
}

func InitEmptyOpt_foreign_key_actionContext(p *Opt_foreign_key_actionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_foreign_key_action
}

func (*Opt_foreign_key_actionContext) IsOpt_foreign_key_actionContext() {}

func NewOpt_foreign_key_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_foreign_key_actionContext {
	var p = new(Opt_foreign_key_actionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_foreign_key_action

	return p
}

func (s *Opt_foreign_key_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_foreign_key_actionContext) Foreign_key_on_update() IForeign_key_on_updateContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeign_key_on_updateContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeign_key_on_updateContext)
}

func (s *Opt_foreign_key_actionContext) Foreign_key_on_delete() IForeign_key_on_deleteContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeign_key_on_deleteContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeign_key_on_deleteContext)
}

func (s *Opt_foreign_key_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_foreign_key_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_foreign_key_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_foreign_key_action(s)
	}
}

func (s *Opt_foreign_key_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_foreign_key_action(s)
	}
}

func (s *Opt_foreign_key_actionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_foreign_key_action(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_foreign_key_action() (localctx IOpt_foreign_key_actionContext) {
	localctx = NewOpt_foreign_key_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, GoogleSQLParserRULE_opt_foreign_key_action)
	var _la int

	p.SetState(1395)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 94, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1387)
			p.Foreign_key_on_update()
		}
		p.SetState(1389)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserON_SYMBOL {
			{
				p.SetState(1388)
				p.Foreign_key_on_delete()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1391)
			p.Foreign_key_on_delete()
		}
		p.SetState(1393)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserON_SYMBOL {
			{
				p.SetState(1392)
				p.Foreign_key_on_update()
			}

		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IForeign_key_on_updateContext is an interface to support dynamic dispatch.
type IForeign_key_on_updateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ON_SYMBOL() antlr.TerminalNode
	UPDATE_SYMBOL() antlr.TerminalNode
	Foreign_key_action() IForeign_key_actionContext

	// IsForeign_key_on_updateContext differentiates from other interfaces.
	IsForeign_key_on_updateContext()
}

type Foreign_key_on_updateContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForeign_key_on_updateContext() *Foreign_key_on_updateContext {
	var p = new(Foreign_key_on_updateContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_on_update
	return p
}

func InitEmptyForeign_key_on_updateContext(p *Foreign_key_on_updateContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_on_update
}

func (*Foreign_key_on_updateContext) IsForeign_key_on_updateContext() {}

func NewForeign_key_on_updateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Foreign_key_on_updateContext {
	var p = new(Foreign_key_on_updateContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_on_update

	return p
}

func (s *Foreign_key_on_updateContext) GetParser() antlr.Parser { return s.parser }

func (s *Foreign_key_on_updateContext) ON_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserON_SYMBOL, 0)
}

func (s *Foreign_key_on_updateContext) UPDATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUPDATE_SYMBOL, 0)
}

func (s *Foreign_key_on_updateContext) Foreign_key_action() IForeign_key_actionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeign_key_actionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeign_key_actionContext)
}

func (s *Foreign_key_on_updateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Foreign_key_on_updateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Foreign_key_on_updateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterForeign_key_on_update(s)
	}
}

func (s *Foreign_key_on_updateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitForeign_key_on_update(s)
	}
}

func (s *Foreign_key_on_updateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitForeign_key_on_update(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Foreign_key_on_update() (localctx IForeign_key_on_updateContext) {
	localctx = NewForeign_key_on_updateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, GoogleSQLParserRULE_foreign_key_on_update)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1397)
		p.Match(GoogleSQLParserON_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1398)
		p.Match(GoogleSQLParserUPDATE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1399)
		p.Foreign_key_action()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IForeign_key_on_deleteContext is an interface to support dynamic dispatch.
type IForeign_key_on_deleteContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ON_SYMBOL() antlr.TerminalNode
	DELETE_SYMBOL() antlr.TerminalNode
	Foreign_key_action() IForeign_key_actionContext

	// IsForeign_key_on_deleteContext differentiates from other interfaces.
	IsForeign_key_on_deleteContext()
}

type Foreign_key_on_deleteContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForeign_key_on_deleteContext() *Foreign_key_on_deleteContext {
	var p = new(Foreign_key_on_deleteContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_on_delete
	return p
}

func InitEmptyForeign_key_on_deleteContext(p *Foreign_key_on_deleteContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_on_delete
}

func (*Foreign_key_on_deleteContext) IsForeign_key_on_deleteContext() {}

func NewForeign_key_on_deleteContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Foreign_key_on_deleteContext {
	var p = new(Foreign_key_on_deleteContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_on_delete

	return p
}

func (s *Foreign_key_on_deleteContext) GetParser() antlr.Parser { return s.parser }

func (s *Foreign_key_on_deleteContext) ON_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserON_SYMBOL, 0)
}

func (s *Foreign_key_on_deleteContext) DELETE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDELETE_SYMBOL, 0)
}

func (s *Foreign_key_on_deleteContext) Foreign_key_action() IForeign_key_actionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeign_key_actionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeign_key_actionContext)
}

func (s *Foreign_key_on_deleteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Foreign_key_on_deleteContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Foreign_key_on_deleteContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterForeign_key_on_delete(s)
	}
}

func (s *Foreign_key_on_deleteContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitForeign_key_on_delete(s)
	}
}

func (s *Foreign_key_on_deleteContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitForeign_key_on_delete(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Foreign_key_on_delete() (localctx IForeign_key_on_deleteContext) {
	localctx = NewForeign_key_on_deleteContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, GoogleSQLParserRULE_foreign_key_on_delete)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1401)
		p.Match(GoogleSQLParserON_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1402)
		p.Match(GoogleSQLParserDELETE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1403)
		p.Foreign_key_action()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IForeign_key_actionContext is an interface to support dynamic dispatch.
type IForeign_key_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NO_SYMBOL() antlr.TerminalNode
	ACTION_SYMBOL() antlr.TerminalNode
	RESTRICT_SYMBOL() antlr.TerminalNode
	CASCADE_SYMBOL() antlr.TerminalNode
	SET_SYMBOL() antlr.TerminalNode
	NULL_SYMBOL() antlr.TerminalNode

	// IsForeign_key_actionContext differentiates from other interfaces.
	IsForeign_key_actionContext()
}

type Foreign_key_actionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForeign_key_actionContext() *Foreign_key_actionContext {
	var p = new(Foreign_key_actionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_action
	return p
}

func InitEmptyForeign_key_actionContext(p *Foreign_key_actionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_action
}

func (*Foreign_key_actionContext) IsForeign_key_actionContext() {}

func NewForeign_key_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Foreign_key_actionContext {
	var p = new(Foreign_key_actionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_action

	return p
}

func (s *Foreign_key_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Foreign_key_actionContext) NO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNO_SYMBOL, 0)
}

func (s *Foreign_key_actionContext) ACTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserACTION_SYMBOL, 0)
}

func (s *Foreign_key_actionContext) RESTRICT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRESTRICT_SYMBOL, 0)
}

func (s *Foreign_key_actionContext) CASCADE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCASCADE_SYMBOL, 0)
}

func (s *Foreign_key_actionContext) SET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSET_SYMBOL, 0)
}

func (s *Foreign_key_actionContext) NULL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNULL_SYMBOL, 0)
}

func (s *Foreign_key_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Foreign_key_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Foreign_key_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterForeign_key_action(s)
	}
}

func (s *Foreign_key_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitForeign_key_action(s)
	}
}

func (s *Foreign_key_actionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitForeign_key_action(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Foreign_key_action() (localctx IForeign_key_actionContext) {
	localctx = NewForeign_key_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, GoogleSQLParserRULE_foreign_key_action)
	p.SetState(1411)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserNO_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1405)
			p.Match(GoogleSQLParserNO_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1406)
			p.Match(GoogleSQLParserACTION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserRESTRICT_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1407)
			p.Match(GoogleSQLParserRESTRICT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserCASCADE_SYMBOL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1408)
			p.Match(GoogleSQLParserCASCADE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserSET_SYMBOL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1409)
			p.Match(GoogleSQLParserSET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1410)
			p.Match(GoogleSQLParserNULL_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_foreign_key_matchContext is an interface to support dynamic dispatch.
type IOpt_foreign_key_matchContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MATCH_SYMBOL() antlr.TerminalNode
	Foreign_key_match_mode() IForeign_key_match_modeContext

	// IsOpt_foreign_key_matchContext differentiates from other interfaces.
	IsOpt_foreign_key_matchContext()
}

type Opt_foreign_key_matchContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_foreign_key_matchContext() *Opt_foreign_key_matchContext {
	var p = new(Opt_foreign_key_matchContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_foreign_key_match
	return p
}

func InitEmptyOpt_foreign_key_matchContext(p *Opt_foreign_key_matchContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_foreign_key_match
}

func (*Opt_foreign_key_matchContext) IsOpt_foreign_key_matchContext() {}

func NewOpt_foreign_key_matchContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_foreign_key_matchContext {
	var p = new(Opt_foreign_key_matchContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_foreign_key_match

	return p
}

func (s *Opt_foreign_key_matchContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_foreign_key_matchContext) MATCH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMATCH_SYMBOL, 0)
}

func (s *Opt_foreign_key_matchContext) Foreign_key_match_mode() IForeign_key_match_modeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeign_key_match_modeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeign_key_match_modeContext)
}

func (s *Opt_foreign_key_matchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_foreign_key_matchContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_foreign_key_matchContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_foreign_key_match(s)
	}
}

func (s *Opt_foreign_key_matchContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_foreign_key_match(s)
	}
}

func (s *Opt_foreign_key_matchContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_foreign_key_match(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_foreign_key_match() (localctx IOpt_foreign_key_matchContext) {
	localctx = NewOpt_foreign_key_matchContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, GoogleSQLParserRULE_opt_foreign_key_match)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1413)
		p.Match(GoogleSQLParserMATCH_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1414)
		p.Foreign_key_match_mode()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IForeign_key_match_modeContext is an interface to support dynamic dispatch.
type IForeign_key_match_modeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SIMPLE_SYMBOL() antlr.TerminalNode
	FULL_SYMBOL() antlr.TerminalNode
	NOT_SYMBOL() antlr.TerminalNode
	DISTINCT_SYMBOL() antlr.TerminalNode

	// IsForeign_key_match_modeContext differentiates from other interfaces.
	IsForeign_key_match_modeContext()
}

type Foreign_key_match_modeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForeign_key_match_modeContext() *Foreign_key_match_modeContext {
	var p = new(Foreign_key_match_modeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_match_mode
	return p
}

func InitEmptyForeign_key_match_modeContext(p *Foreign_key_match_modeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_match_mode
}

func (*Foreign_key_match_modeContext) IsForeign_key_match_modeContext() {}

func NewForeign_key_match_modeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Foreign_key_match_modeContext {
	var p = new(Foreign_key_match_modeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_match_mode

	return p
}

func (s *Foreign_key_match_modeContext) GetParser() antlr.Parser { return s.parser }

func (s *Foreign_key_match_modeContext) SIMPLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSIMPLE_SYMBOL, 0)
}

func (s *Foreign_key_match_modeContext) FULL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFULL_SYMBOL, 0)
}

func (s *Foreign_key_match_modeContext) NOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNOT_SYMBOL, 0)
}

func (s *Foreign_key_match_modeContext) DISTINCT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDISTINCT_SYMBOL, 0)
}

func (s *Foreign_key_match_modeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Foreign_key_match_modeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Foreign_key_match_modeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterForeign_key_match_mode(s)
	}
}

func (s *Foreign_key_match_modeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitForeign_key_match_mode(s)
	}
}

func (s *Foreign_key_match_modeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitForeign_key_match_mode(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Foreign_key_match_mode() (localctx IForeign_key_match_modeContext) {
	localctx = NewForeign_key_match_modeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, GoogleSQLParserRULE_foreign_key_match_mode)
	p.SetState(1420)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserSIMPLE_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1416)
			p.Match(GoogleSQLParserSIMPLE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserFULL_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1417)
			p.Match(GoogleSQLParserFULL_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserNOT_SYMBOL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1418)
			p.Match(GoogleSQLParserNOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1419)
			p.Match(GoogleSQLParserDISTINCT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumn_listContext is an interface to support dynamic dispatch.
type IColumn_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsColumn_listContext differentiates from other interfaces.
	IsColumn_listContext()
}

type Column_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_listContext() *Column_listContext {
	var p = new(Column_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_column_list
	return p
}

func InitEmptyColumn_listContext(p *Column_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_column_list
}

func (*Column_listContext) IsColumn_listContext() {}

func NewColumn_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_listContext {
	var p = new(Column_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_column_list

	return p
}

func (s *Column_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_listContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Column_listContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Column_listContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Column_listContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Column_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Column_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Column_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterColumn_list(s)
	}
}

func (s *Column_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitColumn_list(s)
	}
}

func (s *Column_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitColumn_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Column_list() (localctx IColumn_listContext) {
	localctx = NewColumn_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, GoogleSQLParserRULE_column_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1422)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1423)
		p.Identifier()
	}
	p.SetState(1428)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(1424)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1425)
			p.Identifier()
		}

		p.SetState(1430)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1431)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOptions_options_listContext is an interface to support dynamic dispatch.
type IOptions_options_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OPTIONS_SYMBOL() antlr.TerminalNode
	Options_list() IOptions_listContext

	// IsOptions_options_listContext differentiates from other interfaces.
	IsOptions_options_listContext()
}

type Options_options_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOptions_options_listContext() *Options_options_listContext {
	var p = new(Options_options_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_options_options_list
	return p
}

func InitEmptyOptions_options_listContext(p *Options_options_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_options_options_list
}

func (*Options_options_listContext) IsOptions_options_listContext() {}

func NewOptions_options_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Options_options_listContext {
	var p = new(Options_options_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_options_options_list

	return p
}

func (s *Options_options_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Options_options_listContext) OPTIONS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOPTIONS_SYMBOL, 0)
}

func (s *Options_options_listContext) Options_list() IOptions_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOptions_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOptions_listContext)
}

func (s *Options_options_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Options_options_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Options_options_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOptions_options_list(s)
	}
}

func (s *Options_options_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOptions_options_list(s)
	}
}

func (s *Options_options_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOptions_options_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Options_options_list() (localctx IOptions_options_listContext) {
	localctx = NewOptions_options_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, GoogleSQLParserRULE_options_options_list)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1433)
		p.Match(GoogleSQLParserOPTIONS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1434)
		p.Options_list()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConstraint_enforcementContext is an interface to support dynamic dispatch.
type IConstraint_enforcementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ENFORCED_SYMBOL() antlr.TerminalNode
	NOT_SYMBOL() antlr.TerminalNode

	// IsConstraint_enforcementContext differentiates from other interfaces.
	IsConstraint_enforcementContext()
}

type Constraint_enforcementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstraint_enforcementContext() *Constraint_enforcementContext {
	var p = new(Constraint_enforcementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_constraint_enforcement
	return p
}

func InitEmptyConstraint_enforcementContext(p *Constraint_enforcementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_constraint_enforcement
}

func (*Constraint_enforcementContext) IsConstraint_enforcementContext() {}

func NewConstraint_enforcementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Constraint_enforcementContext {
	var p = new(Constraint_enforcementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_constraint_enforcement

	return p
}

func (s *Constraint_enforcementContext) GetParser() antlr.Parser { return s.parser }

func (s *Constraint_enforcementContext) ENFORCED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserENFORCED_SYMBOL, 0)
}

func (s *Constraint_enforcementContext) NOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNOT_SYMBOL, 0)
}

func (s *Constraint_enforcementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Constraint_enforcementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Constraint_enforcementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterConstraint_enforcement(s)
	}
}

func (s *Constraint_enforcementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitConstraint_enforcement(s)
	}
}

func (s *Constraint_enforcementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitConstraint_enforcement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Constraint_enforcement() (localctx IConstraint_enforcementContext) {
	localctx = NewConstraint_enforcementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, GoogleSQLParserRULE_constraint_enforcement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1437)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserNOT_SYMBOL {
		{
			p.SetState(1436)
			p.Match(GoogleSQLParserNOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1439)
		p.Match(GoogleSQLParserENFORCED_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGeneric_entity_bodyContext is an interface to support dynamic dispatch.
type IGeneric_entity_bodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Json_literal() IJson_literalContext
	String_literal() IString_literalContext

	// IsGeneric_entity_bodyContext differentiates from other interfaces.
	IsGeneric_entity_bodyContext()
}

type Generic_entity_bodyContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGeneric_entity_bodyContext() *Generic_entity_bodyContext {
	var p = new(Generic_entity_bodyContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_generic_entity_body
	return p
}

func InitEmptyGeneric_entity_bodyContext(p *Generic_entity_bodyContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_generic_entity_body
}

func (*Generic_entity_bodyContext) IsGeneric_entity_bodyContext() {}

func NewGeneric_entity_bodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Generic_entity_bodyContext {
	var p = new(Generic_entity_bodyContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_generic_entity_body

	return p
}

func (s *Generic_entity_bodyContext) GetParser() antlr.Parser { return s.parser }

func (s *Generic_entity_bodyContext) Json_literal() IJson_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJson_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJson_literalContext)
}

func (s *Generic_entity_bodyContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Generic_entity_bodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Generic_entity_bodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Generic_entity_bodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGeneric_entity_body(s)
	}
}

func (s *Generic_entity_bodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGeneric_entity_body(s)
	}
}

func (s *Generic_entity_bodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGeneric_entity_body(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Generic_entity_body() (localctx IGeneric_entity_bodyContext) {
	localctx = NewGeneric_entity_bodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, GoogleSQLParserRULE_generic_entity_body)
	p.SetState(1443)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserJSON_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1441)
			p.Json_literal()
		}

	case GoogleSQLParserSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1442)
			p.string_literal(0)
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_if_existsContext is an interface to support dynamic dispatch.
type IOpt_if_existsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IF_SYMBOL() antlr.TerminalNode
	EXISTS_SYMBOL() antlr.TerminalNode

	// IsOpt_if_existsContext differentiates from other interfaces.
	IsOpt_if_existsContext()
}

type Opt_if_existsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_if_existsContext() *Opt_if_existsContext {
	var p = new(Opt_if_existsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_if_exists
	return p
}

func InitEmptyOpt_if_existsContext(p *Opt_if_existsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_if_exists
}

func (*Opt_if_existsContext) IsOpt_if_existsContext() {}

func NewOpt_if_existsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_if_existsContext {
	var p = new(Opt_if_existsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_if_exists

	return p
}

func (s *Opt_if_existsContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_if_existsContext) IF_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIF_SYMBOL, 0)
}

func (s *Opt_if_existsContext) EXISTS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXISTS_SYMBOL, 0)
}

func (s *Opt_if_existsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_if_existsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_if_existsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_if_exists(s)
	}
}

func (s *Opt_if_existsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_if_exists(s)
	}
}

func (s *Opt_if_existsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_if_exists(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_if_exists() (localctx IOpt_if_existsContext) {
	localctx = NewOpt_if_existsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, GoogleSQLParserRULE_opt_if_exists)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1445)
		p.Match(GoogleSQLParserIF_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1446)
		p.Match(GoogleSQLParserEXISTS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_or_table_functionContext is an interface to support dynamic dispatch.
type ITable_or_table_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TABLE_SYMBOL() antlr.TerminalNode
	FUNCTION_SYMBOL() antlr.TerminalNode

	// IsTable_or_table_functionContext differentiates from other interfaces.
	IsTable_or_table_functionContext()
}

type Table_or_table_functionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_or_table_functionContext() *Table_or_table_functionContext {
	var p = new(Table_or_table_functionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_or_table_function
	return p
}

func InitEmptyTable_or_table_functionContext(p *Table_or_table_functionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_or_table_function
}

func (*Table_or_table_functionContext) IsTable_or_table_functionContext() {}

func NewTable_or_table_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_or_table_functionContext {
	var p = new(Table_or_table_functionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_table_or_table_function

	return p
}

func (s *Table_or_table_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_or_table_functionContext) TABLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTABLE_SYMBOL, 0)
}

func (s *Table_or_table_functionContext) FUNCTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFUNCTION_SYMBOL, 0)
}

func (s *Table_or_table_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_or_table_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_or_table_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTable_or_table_function(s)
	}
}

func (s *Table_or_table_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTable_or_table_function(s)
	}
}

func (s *Table_or_table_functionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTable_or_table_function(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Table_or_table_function() (localctx ITable_or_table_functionContext) {
	localctx = NewTable_or_table_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, GoogleSQLParserRULE_table_or_table_function)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1448)
		p.Match(GoogleSQLParserTABLE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1450)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 100, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1449)
			p.Match(GoogleSQLParserFUNCTION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQueryContext is an interface to support dynamic dispatch.
type IQueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Query_without_pipe_operators() IQuery_without_pipe_operatorsContext

	// IsQueryContext differentiates from other interfaces.
	IsQueryContext()
}

type QueryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQueryContext() *QueryContext {
	var p = new(QueryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query
	return p
}

func InitEmptyQueryContext(p *QueryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query
}

func (*QueryContext) IsQueryContext() {}

func NewQueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QueryContext {
	var p = new(QueryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_query

	return p
}

func (s *QueryContext) GetParser() antlr.Parser { return s.parser }

func (s *QueryContext) Query_without_pipe_operators() IQuery_without_pipe_operatorsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuery_without_pipe_operatorsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuery_without_pipe_operatorsContext)
}

func (s *QueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterQuery(s)
	}
}

func (s *QueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitQuery(s)
	}
}

func (s *QueryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitQuery(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Query() (localctx IQueryContext) {
	localctx = NewQueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, GoogleSQLParserRULE_query)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1452)
		p.Query_without_pipe_operators()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQuery_without_pipe_operatorsContext is an interface to support dynamic dispatch.
type IQuery_without_pipe_operatorsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	With_clause() IWith_clauseContext
	Query_primary_or_set_operation() IQuery_primary_or_set_operationContext
	Order_by_clause() IOrder_by_clauseContext
	Limit_offset_clause() ILimit_offset_clauseContext
	With_clause_with_trailing_comma() IWith_clause_with_trailing_commaContext
	Select_or_from_keyword() ISelect_or_from_keywordContext
	PIPE_SYMBOL() antlr.TerminalNode
	From_clause() IFrom_clauseContext
	Bad_keyword_after_from_query() IBad_keyword_after_from_queryContext
	Bad_keyword_after_from_query_allows_parens() IBad_keyword_after_from_query_allows_parensContext

	// IsQuery_without_pipe_operatorsContext differentiates from other interfaces.
	IsQuery_without_pipe_operatorsContext()
}

type Query_without_pipe_operatorsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuery_without_pipe_operatorsContext() *Query_without_pipe_operatorsContext {
	var p = new(Query_without_pipe_operatorsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_without_pipe_operators
	return p
}

func InitEmptyQuery_without_pipe_operatorsContext(p *Query_without_pipe_operatorsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_without_pipe_operators
}

func (*Query_without_pipe_operatorsContext) IsQuery_without_pipe_operatorsContext() {}

func NewQuery_without_pipe_operatorsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Query_without_pipe_operatorsContext {
	var p = new(Query_without_pipe_operatorsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_query_without_pipe_operators

	return p
}

func (s *Query_without_pipe_operatorsContext) GetParser() antlr.Parser { return s.parser }

func (s *Query_without_pipe_operatorsContext) With_clause() IWith_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Query_without_pipe_operatorsContext) Query_primary_or_set_operation() IQuery_primary_or_set_operationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuery_primary_or_set_operationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuery_primary_or_set_operationContext)
}

func (s *Query_without_pipe_operatorsContext) Order_by_clause() IOrder_by_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrder_by_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrder_by_clauseContext)
}

func (s *Query_without_pipe_operatorsContext) Limit_offset_clause() ILimit_offset_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILimit_offset_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILimit_offset_clauseContext)
}

func (s *Query_without_pipe_operatorsContext) With_clause_with_trailing_comma() IWith_clause_with_trailing_commaContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_clause_with_trailing_commaContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_clause_with_trailing_commaContext)
}

func (s *Query_without_pipe_operatorsContext) Select_or_from_keyword() ISelect_or_from_keywordContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_or_from_keywordContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_or_from_keywordContext)
}

func (s *Query_without_pipe_operatorsContext) PIPE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPIPE_SYMBOL, 0)
}

func (s *Query_without_pipe_operatorsContext) From_clause() IFrom_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrom_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrom_clauseContext)
}

func (s *Query_without_pipe_operatorsContext) Bad_keyword_after_from_query() IBad_keyword_after_from_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBad_keyword_after_from_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBad_keyword_after_from_queryContext)
}

func (s *Query_without_pipe_operatorsContext) Bad_keyword_after_from_query_allows_parens() IBad_keyword_after_from_query_allows_parensContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBad_keyword_after_from_query_allows_parensContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBad_keyword_after_from_query_allows_parensContext)
}

func (s *Query_without_pipe_operatorsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_without_pipe_operatorsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Query_without_pipe_operatorsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterQuery_without_pipe_operators(s)
	}
}

func (s *Query_without_pipe_operatorsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitQuery_without_pipe_operators(s)
	}
}

func (s *Query_without_pipe_operatorsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitQuery_without_pipe_operators(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Query_without_pipe_operators() (localctx IQuery_without_pipe_operatorsContext) {
	localctx = NewQuery_without_pipe_operatorsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, GoogleSQLParserRULE_query_without_pipe_operators)
	var _la int

	p.SetState(1497)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 108, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1454)
			p.With_clause()
		}
		{
			p.SetState(1455)
			p.Query_primary_or_set_operation()
		}
		p.SetState(1457)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserORDER_SYMBOL {
			{
				p.SetState(1456)
				p.Order_by_clause()
			}

		}
		p.SetState(1460)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserLIMIT_SYMBOL {
			{
				p.SetState(1459)
				p.Limit_offset_clause()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1462)
			p.With_clause_with_trailing_comma()
		}
		{
			p.SetState(1463)
			p.Select_or_from_keyword()
		}
		p.NotifyErrorListeners("Syntax error: Trailing comma after the WITH clause before the main query is not allowed", nil, nil)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1466)
			p.With_clause()
		}
		{
			p.SetState(1467)
			p.Match(GoogleSQLParserPIPE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Syntax error: A pipe operator cannot follow the WITH clause before the main query; The main query usually starts with SELECT or FROM here", nil, nil)

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1470)
			p.Query_primary_or_set_operation()
		}
		p.SetState(1472)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserORDER_SYMBOL {
			{
				p.SetState(1471)
				p.Order_by_clause()
			}

		}
		p.SetState(1475)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserLIMIT_SYMBOL {
			{
				p.SetState(1474)
				p.Limit_offset_clause()
			}

		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		p.SetState(1478)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserWITH_SYMBOL {
			{
				p.SetState(1477)
				p.With_clause()
			}

		}
		{
			p.SetState(1480)
			p.From_clause()
		}
		p.NotifyErrorListeners("Syntax error: Unexpected FROM", nil, nil)

	case 6:
		p.EnterOuterAlt(localctx, 6)
		p.SetState(1484)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserWITH_SYMBOL {
			{
				p.SetState(1483)
				p.With_clause()
			}

		}
		{
			p.SetState(1486)
			p.From_clause()
		}
		{
			p.SetState(1487)
			p.Bad_keyword_after_from_query()
		}
		p.NotifyErrorListeners("Syntax error: <KEYWORD> not supported after FROM query; Consider using pipe operator `|>` ", nil, nil)

	case 7:
		p.EnterOuterAlt(localctx, 7)
		p.SetState(1491)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserWITH_SYMBOL {
			{
				p.SetState(1490)
				p.With_clause()
			}

		}
		{
			p.SetState(1493)
			p.From_clause()
		}
		{
			p.SetState(1494)
			p.Bad_keyword_after_from_query_allows_parens()
		}
		p.NotifyErrorListeners("Syntax error: <KEYWORD> not supported after FROM query; Consider using pipe operator `|>` ", nil, nil)

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBad_keyword_after_from_queryContext is an interface to support dynamic dispatch.
type IBad_keyword_after_from_queryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WHERE_SYMBOL() antlr.TerminalNode
	SELECT_SYMBOL() antlr.TerminalNode
	GROUP_SYMBOL() antlr.TerminalNode

	// IsBad_keyword_after_from_queryContext differentiates from other interfaces.
	IsBad_keyword_after_from_queryContext()
}

type Bad_keyword_after_from_queryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBad_keyword_after_from_queryContext() *Bad_keyword_after_from_queryContext {
	var p = new(Bad_keyword_after_from_queryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_bad_keyword_after_from_query
	return p
}

func InitEmptyBad_keyword_after_from_queryContext(p *Bad_keyword_after_from_queryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_bad_keyword_after_from_query
}

func (*Bad_keyword_after_from_queryContext) IsBad_keyword_after_from_queryContext() {}

func NewBad_keyword_after_from_queryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bad_keyword_after_from_queryContext {
	var p = new(Bad_keyword_after_from_queryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_bad_keyword_after_from_query

	return p
}

func (s *Bad_keyword_after_from_queryContext) GetParser() antlr.Parser { return s.parser }

func (s *Bad_keyword_after_from_queryContext) WHERE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWHERE_SYMBOL, 0)
}

func (s *Bad_keyword_after_from_queryContext) SELECT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSELECT_SYMBOL, 0)
}

func (s *Bad_keyword_after_from_queryContext) GROUP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGROUP_SYMBOL, 0)
}

func (s *Bad_keyword_after_from_queryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bad_keyword_after_from_queryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bad_keyword_after_from_queryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBad_keyword_after_from_query(s)
	}
}

func (s *Bad_keyword_after_from_queryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBad_keyword_after_from_query(s)
	}
}

func (s *Bad_keyword_after_from_queryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBad_keyword_after_from_query(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Bad_keyword_after_from_query() (localctx IBad_keyword_after_from_queryContext) {
	localctx = NewBad_keyword_after_from_queryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, GoogleSQLParserRULE_bad_keyword_after_from_query)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1499)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserSELECT_SYMBOL || _la == GoogleSQLParserGROUP_SYMBOL || _la == GoogleSQLParserWHERE_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBad_keyword_after_from_query_allows_parensContext is an interface to support dynamic dispatch.
type IBad_keyword_after_from_query_allows_parensContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ORDER_SYMBOL() antlr.TerminalNode
	UNION_SYMBOL() antlr.TerminalNode
	INTERSECT_SYMBOL() antlr.TerminalNode
	EXCEPT_SYMBOL() antlr.TerminalNode
	LIMIT_SYMBOL() antlr.TerminalNode

	// IsBad_keyword_after_from_query_allows_parensContext differentiates from other interfaces.
	IsBad_keyword_after_from_query_allows_parensContext()
}

type Bad_keyword_after_from_query_allows_parensContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBad_keyword_after_from_query_allows_parensContext() *Bad_keyword_after_from_query_allows_parensContext {
	var p = new(Bad_keyword_after_from_query_allows_parensContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_bad_keyword_after_from_query_allows_parens
	return p
}

func InitEmptyBad_keyword_after_from_query_allows_parensContext(p *Bad_keyword_after_from_query_allows_parensContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_bad_keyword_after_from_query_allows_parens
}

func (*Bad_keyword_after_from_query_allows_parensContext) IsBad_keyword_after_from_query_allows_parensContext() {
}

func NewBad_keyword_after_from_query_allows_parensContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bad_keyword_after_from_query_allows_parensContext {
	var p = new(Bad_keyword_after_from_query_allows_parensContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_bad_keyword_after_from_query_allows_parens

	return p
}

func (s *Bad_keyword_after_from_query_allows_parensContext) GetParser() antlr.Parser { return s.parser }

func (s *Bad_keyword_after_from_query_allows_parensContext) ORDER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserORDER_SYMBOL, 0)
}

func (s *Bad_keyword_after_from_query_allows_parensContext) UNION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNION_SYMBOL, 0)
}

func (s *Bad_keyword_after_from_query_allows_parensContext) INTERSECT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINTERSECT_SYMBOL, 0)
}

func (s *Bad_keyword_after_from_query_allows_parensContext) EXCEPT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXCEPT_SYMBOL, 0)
}

func (s *Bad_keyword_after_from_query_allows_parensContext) LIMIT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLIMIT_SYMBOL, 0)
}

func (s *Bad_keyword_after_from_query_allows_parensContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bad_keyword_after_from_query_allows_parensContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bad_keyword_after_from_query_allows_parensContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBad_keyword_after_from_query_allows_parens(s)
	}
}

func (s *Bad_keyword_after_from_query_allows_parensContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBad_keyword_after_from_query_allows_parens(s)
	}
}

func (s *Bad_keyword_after_from_query_allows_parensContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBad_keyword_after_from_query_allows_parens(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Bad_keyword_after_from_query_allows_parens() (localctx IBad_keyword_after_from_query_allows_parensContext) {
	localctx = NewBad_keyword_after_from_query_allows_parensContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, GoogleSQLParserRULE_bad_keyword_after_from_query_allows_parens)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1501)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-66)) & ^0x3f) == 0 && ((int64(1)<<(_la-66))&4295230721) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWith_clause_with_trailing_commaContext is an interface to support dynamic dispatch.
type IWith_clause_with_trailing_commaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	With_clause() IWith_clauseContext
	COMMA_SYMBOL() antlr.TerminalNode

	// IsWith_clause_with_trailing_commaContext differentiates from other interfaces.
	IsWith_clause_with_trailing_commaContext()
}

type With_clause_with_trailing_commaContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_clause_with_trailing_commaContext() *With_clause_with_trailing_commaContext {
	var p = new(With_clause_with_trailing_commaContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_clause_with_trailing_comma
	return p
}

func InitEmptyWith_clause_with_trailing_commaContext(p *With_clause_with_trailing_commaContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_clause_with_trailing_comma
}

func (*With_clause_with_trailing_commaContext) IsWith_clause_with_trailing_commaContext() {}

func NewWith_clause_with_trailing_commaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_clause_with_trailing_commaContext {
	var p = new(With_clause_with_trailing_commaContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_with_clause_with_trailing_comma

	return p
}

func (s *With_clause_with_trailing_commaContext) GetParser() antlr.Parser { return s.parser }

func (s *With_clause_with_trailing_commaContext) With_clause() IWith_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *With_clause_with_trailing_commaContext) COMMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, 0)
}

func (s *With_clause_with_trailing_commaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_clause_with_trailing_commaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_clause_with_trailing_commaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWith_clause_with_trailing_comma(s)
	}
}

func (s *With_clause_with_trailing_commaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWith_clause_with_trailing_comma(s)
	}
}

func (s *With_clause_with_trailing_commaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWith_clause_with_trailing_comma(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) With_clause_with_trailing_comma() (localctx IWith_clause_with_trailing_commaContext) {
	localctx = NewWith_clause_with_trailing_commaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, GoogleSQLParserRULE_with_clause_with_trailing_comma)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1503)
		p.With_clause()
	}
	{
		p.SetState(1504)
		p.Match(GoogleSQLParserCOMMA_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelect_or_from_keywordContext is an interface to support dynamic dispatch.
type ISelect_or_from_keywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SELECT_SYMBOL() antlr.TerminalNode
	FROM_SYMBOL() antlr.TerminalNode

	// IsSelect_or_from_keywordContext differentiates from other interfaces.
	IsSelect_or_from_keywordContext()
}

type Select_or_from_keywordContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_or_from_keywordContext() *Select_or_from_keywordContext {
	var p = new(Select_or_from_keywordContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_or_from_keyword
	return p
}

func InitEmptySelect_or_from_keywordContext(p *Select_or_from_keywordContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_or_from_keyword
}

func (*Select_or_from_keywordContext) IsSelect_or_from_keywordContext() {}

func NewSelect_or_from_keywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_or_from_keywordContext {
	var p = new(Select_or_from_keywordContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_select_or_from_keyword

	return p
}

func (s *Select_or_from_keywordContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_or_from_keywordContext) SELECT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSELECT_SYMBOL, 0)
}

func (s *Select_or_from_keywordContext) FROM_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFROM_SYMBOL, 0)
}

func (s *Select_or_from_keywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_or_from_keywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_or_from_keywordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSelect_or_from_keyword(s)
	}
}

func (s *Select_or_from_keywordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSelect_or_from_keyword(s)
	}
}

func (s *Select_or_from_keywordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSelect_or_from_keyword(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Select_or_from_keyword() (localctx ISelect_or_from_keywordContext) {
	localctx = NewSelect_or_from_keywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, GoogleSQLParserRULE_select_or_from_keyword)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1506)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserFROM_SYMBOL || _la == GoogleSQLParserSELECT_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQuery_primary_or_set_operationContext is an interface to support dynamic dispatch.
type IQuery_primary_or_set_operationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Query_primary() IQuery_primaryContext
	Query_set_operation() IQuery_set_operationContext

	// IsQuery_primary_or_set_operationContext differentiates from other interfaces.
	IsQuery_primary_or_set_operationContext()
}

type Query_primary_or_set_operationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuery_primary_or_set_operationContext() *Query_primary_or_set_operationContext {
	var p = new(Query_primary_or_set_operationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_primary_or_set_operation
	return p
}

func InitEmptyQuery_primary_or_set_operationContext(p *Query_primary_or_set_operationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_primary_or_set_operation
}

func (*Query_primary_or_set_operationContext) IsQuery_primary_or_set_operationContext() {}

func NewQuery_primary_or_set_operationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Query_primary_or_set_operationContext {
	var p = new(Query_primary_or_set_operationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_query_primary_or_set_operation

	return p
}

func (s *Query_primary_or_set_operationContext) GetParser() antlr.Parser { return s.parser }

func (s *Query_primary_or_set_operationContext) Query_primary() IQuery_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuery_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuery_primaryContext)
}

func (s *Query_primary_or_set_operationContext) Query_set_operation() IQuery_set_operationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuery_set_operationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuery_set_operationContext)
}

func (s *Query_primary_or_set_operationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_primary_or_set_operationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Query_primary_or_set_operationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterQuery_primary_or_set_operation(s)
	}
}

func (s *Query_primary_or_set_operationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitQuery_primary_or_set_operation(s)
	}
}

func (s *Query_primary_or_set_operationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitQuery_primary_or_set_operation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Query_primary_or_set_operation() (localctx IQuery_primary_or_set_operationContext) {
	localctx = NewQuery_primary_or_set_operationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, GoogleSQLParserRULE_query_primary_or_set_operation)
	p.SetState(1510)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 109, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1508)
			p.Query_primary()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1509)
			p.Query_set_operation()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQuery_set_operationContext is an interface to support dynamic dispatch.
type IQuery_set_operationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Query_set_operation_prefix() IQuery_set_operation_prefixContext

	// IsQuery_set_operationContext differentiates from other interfaces.
	IsQuery_set_operationContext()
}

type Query_set_operationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuery_set_operationContext() *Query_set_operationContext {
	var p = new(Query_set_operationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_set_operation
	return p
}

func InitEmptyQuery_set_operationContext(p *Query_set_operationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_set_operation
}

func (*Query_set_operationContext) IsQuery_set_operationContext() {}

func NewQuery_set_operationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Query_set_operationContext {
	var p = new(Query_set_operationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_query_set_operation

	return p
}

func (s *Query_set_operationContext) GetParser() antlr.Parser { return s.parser }

func (s *Query_set_operationContext) Query_set_operation_prefix() IQuery_set_operation_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuery_set_operation_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuery_set_operation_prefixContext)
}

func (s *Query_set_operationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_set_operationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Query_set_operationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterQuery_set_operation(s)
	}
}

func (s *Query_set_operationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitQuery_set_operation(s)
	}
}

func (s *Query_set_operationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitQuery_set_operation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Query_set_operation() (localctx IQuery_set_operationContext) {
	localctx = NewQuery_set_operationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, GoogleSQLParserRULE_query_set_operation)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1512)
		p.query_set_operation_prefix(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQuery_set_operation_prefixContext is an interface to support dynamic dispatch.
type IQuery_set_operation_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Query_primary() IQuery_primaryContext
	AllQuery_set_operation_item() []IQuery_set_operation_itemContext
	Query_set_operation_item(i int) IQuery_set_operation_itemContext
	Set_operation_metadata() ISet_operation_metadataContext
	FROM_SYMBOL() antlr.TerminalNode
	Query_set_operation_prefix() IQuery_set_operation_prefixContext

	// IsQuery_set_operation_prefixContext differentiates from other interfaces.
	IsQuery_set_operation_prefixContext()
}

type Query_set_operation_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuery_set_operation_prefixContext() *Query_set_operation_prefixContext {
	var p = new(Query_set_operation_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_set_operation_prefix
	return p
}

func InitEmptyQuery_set_operation_prefixContext(p *Query_set_operation_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_set_operation_prefix
}

func (*Query_set_operation_prefixContext) IsQuery_set_operation_prefixContext() {}

func NewQuery_set_operation_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Query_set_operation_prefixContext {
	var p = new(Query_set_operation_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_query_set_operation_prefix

	return p
}

func (s *Query_set_operation_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Query_set_operation_prefixContext) Query_primary() IQuery_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuery_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuery_primaryContext)
}

func (s *Query_set_operation_prefixContext) AllQuery_set_operation_item() []IQuery_set_operation_itemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IQuery_set_operation_itemContext); ok {
			len++
		}
	}

	tst := make([]IQuery_set_operation_itemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IQuery_set_operation_itemContext); ok {
			tst[i] = t.(IQuery_set_operation_itemContext)
			i++
		}
	}

	return tst
}

func (s *Query_set_operation_prefixContext) Query_set_operation_item(i int) IQuery_set_operation_itemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuery_set_operation_itemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuery_set_operation_itemContext)
}

func (s *Query_set_operation_prefixContext) Set_operation_metadata() ISet_operation_metadataContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISet_operation_metadataContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISet_operation_metadataContext)
}

func (s *Query_set_operation_prefixContext) FROM_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFROM_SYMBOL, 0)
}

func (s *Query_set_operation_prefixContext) Query_set_operation_prefix() IQuery_set_operation_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuery_set_operation_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuery_set_operation_prefixContext)
}

func (s *Query_set_operation_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_set_operation_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Query_set_operation_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterQuery_set_operation_prefix(s)
	}
}

func (s *Query_set_operation_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitQuery_set_operation_prefix(s)
	}
}

func (s *Query_set_operation_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitQuery_set_operation_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Query_set_operation_prefix() (localctx IQuery_set_operation_prefixContext) {
	return p.query_set_operation_prefix(0)
}

func (p *GoogleSQLParser) query_set_operation_prefix(_p int) (localctx IQuery_set_operation_prefixContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewQuery_set_operation_prefixContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IQuery_set_operation_prefixContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 168
	p.EnterRecursionRule(localctx, 168, GoogleSQLParserRULE_query_set_operation_prefix, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1526)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 111, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1515)
			p.Query_primary()
		}
		p.SetState(1517)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(1516)
					p.Query_set_operation_item()
				}

			default:
				p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				goto errorExit
			}

			p.SetState(1519)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 110, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

	case 2:
		{
			p.SetState(1521)
			p.Query_primary()
		}
		{
			p.SetState(1522)
			p.Set_operation_metadata()
		}
		{
			p.SetState(1523)
			p.Match(GoogleSQLParserFROM_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Syntax error: Unexpected FROM;FROM queries following a set operation must be parenthesized", nil, nil)

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1535)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 112, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewQuery_set_operation_prefixContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_query_set_operation_prefix)
			p.SetState(1528)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				goto errorExit
			}
			{
				p.SetState(1529)
				p.Set_operation_metadata()
			}
			{
				p.SetState(1530)
				p.Match(GoogleSQLParserFROM_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.NotifyErrorListeners("Syntax error: Unexpected FROM;FROM queries following a set operation must be parenthesized", nil, nil)

		}
		p.SetState(1537)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 112, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQuery_set_operation_itemContext is an interface to support dynamic dispatch.
type IQuery_set_operation_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Set_operation_metadata() ISet_operation_metadataContext
	Query_primary() IQuery_primaryContext

	// IsQuery_set_operation_itemContext differentiates from other interfaces.
	IsQuery_set_operation_itemContext()
}

type Query_set_operation_itemContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuery_set_operation_itemContext() *Query_set_operation_itemContext {
	var p = new(Query_set_operation_itemContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_set_operation_item
	return p
}

func InitEmptyQuery_set_operation_itemContext(p *Query_set_operation_itemContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_set_operation_item
}

func (*Query_set_operation_itemContext) IsQuery_set_operation_itemContext() {}

func NewQuery_set_operation_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Query_set_operation_itemContext {
	var p = new(Query_set_operation_itemContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_query_set_operation_item

	return p
}

func (s *Query_set_operation_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Query_set_operation_itemContext) Set_operation_metadata() ISet_operation_metadataContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISet_operation_metadataContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISet_operation_metadataContext)
}

func (s *Query_set_operation_itemContext) Query_primary() IQuery_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuery_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuery_primaryContext)
}

func (s *Query_set_operation_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_set_operation_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Query_set_operation_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterQuery_set_operation_item(s)
	}
}

func (s *Query_set_operation_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitQuery_set_operation_item(s)
	}
}

func (s *Query_set_operation_itemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitQuery_set_operation_item(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Query_set_operation_item() (localctx IQuery_set_operation_itemContext) {
	localctx = NewQuery_set_operation_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, GoogleSQLParserRULE_query_set_operation_item)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1538)
		p.Set_operation_metadata()
	}
	{
		p.SetState(1539)
		p.Query_primary()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQuery_primaryContext is an interface to support dynamic dispatch.
type IQuery_primaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Select_() ISelectContext
	Parenthesized_query() IParenthesized_queryContext
	Opt_as_alias_with_required_as() IOpt_as_alias_with_required_asContext

	// IsQuery_primaryContext differentiates from other interfaces.
	IsQuery_primaryContext()
}

type Query_primaryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuery_primaryContext() *Query_primaryContext {
	var p = new(Query_primaryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_primary
	return p
}

func InitEmptyQuery_primaryContext(p *Query_primaryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_primary
}

func (*Query_primaryContext) IsQuery_primaryContext() {}

func NewQuery_primaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Query_primaryContext {
	var p = new(Query_primaryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_query_primary

	return p
}

func (s *Query_primaryContext) GetParser() antlr.Parser { return s.parser }

func (s *Query_primaryContext) Select_() ISelectContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelectContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelectContext)
}

func (s *Query_primaryContext) Parenthesized_query() IParenthesized_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesized_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesized_queryContext)
}

func (s *Query_primaryContext) Opt_as_alias_with_required_as() IOpt_as_alias_with_required_asContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_as_alias_with_required_asContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_as_alias_with_required_asContext)
}

func (s *Query_primaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_primaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Query_primaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterQuery_primary(s)
	}
}

func (s *Query_primaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitQuery_primary(s)
	}
}

func (s *Query_primaryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitQuery_primary(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Query_primary() (localctx IQuery_primaryContext) {
	localctx = NewQuery_primaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, GoogleSQLParserRULE_query_primary)
	p.SetState(1546)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserSELECT_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1541)
			p.Select_()
		}

	case GoogleSQLParserLR_BRACKET_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1542)
			p.Parenthesized_query()
		}
		p.SetState(1544)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 113, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1543)
				p.Opt_as_alias_with_required_as()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISet_operation_metadataContext is an interface to support dynamic dispatch.
type ISet_operation_metadataContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Query_set_operation_type() IQuery_set_operation_typeContext
	All_or_distinct() IAll_or_distinctContext
	Opt_corresponding_outer_mode() IOpt_corresponding_outer_modeContext
	Hint() IHintContext
	Opt_strict() IOpt_strictContext
	Opt_column_match_suffix() IOpt_column_match_suffixContext

	// IsSet_operation_metadataContext differentiates from other interfaces.
	IsSet_operation_metadataContext()
}

type Set_operation_metadataContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySet_operation_metadataContext() *Set_operation_metadataContext {
	var p = new(Set_operation_metadataContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_set_operation_metadata
	return p
}

func InitEmptySet_operation_metadataContext(p *Set_operation_metadataContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_set_operation_metadata
}

func (*Set_operation_metadataContext) IsSet_operation_metadataContext() {}

func NewSet_operation_metadataContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Set_operation_metadataContext {
	var p = new(Set_operation_metadataContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_set_operation_metadata

	return p
}

func (s *Set_operation_metadataContext) GetParser() antlr.Parser { return s.parser }

func (s *Set_operation_metadataContext) Query_set_operation_type() IQuery_set_operation_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuery_set_operation_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuery_set_operation_typeContext)
}

func (s *Set_operation_metadataContext) All_or_distinct() IAll_or_distinctContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAll_or_distinctContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAll_or_distinctContext)
}

func (s *Set_operation_metadataContext) Opt_corresponding_outer_mode() IOpt_corresponding_outer_modeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_corresponding_outer_modeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_corresponding_outer_modeContext)
}

func (s *Set_operation_metadataContext) Hint() IHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHintContext)
}

func (s *Set_operation_metadataContext) Opt_strict() IOpt_strictContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_strictContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_strictContext)
}

func (s *Set_operation_metadataContext) Opt_column_match_suffix() IOpt_column_match_suffixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_column_match_suffixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_column_match_suffixContext)
}

func (s *Set_operation_metadataContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Set_operation_metadataContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Set_operation_metadataContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSet_operation_metadata(s)
	}
}

func (s *Set_operation_metadataContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSet_operation_metadata(s)
	}
}

func (s *Set_operation_metadataContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSet_operation_metadata(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Set_operation_metadata() (localctx ISet_operation_metadataContext) {
	localctx = NewSet_operation_metadataContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, GoogleSQLParserRULE_set_operation_metadata)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1549)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-70)) & ^0x3f) == 0 && ((int64(1)<<(_la-70))&32801) != 0 {
		{
			p.SetState(1548)
			p.Opt_corresponding_outer_mode()
		}

	}
	{
		p.SetState(1551)
		p.Query_set_operation_type()
	}
	p.SetState(1553)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAT_SYMBOL {
		{
			p.SetState(1552)
			p.Hint()
		}

	}
	{
		p.SetState(1555)
		p.All_or_distinct()
	}
	p.SetState(1557)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserSTRICT_SYMBOL {
		{
			p.SetState(1556)
			p.Opt_strict()
		}

	}
	p.SetState(1560)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserCORRESPONDING_SYMBOL {
		{
			p.SetState(1559)
			p.Opt_column_match_suffix()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_column_match_suffixContext is an interface to support dynamic dispatch.
type IOpt_column_match_suffixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CORRESPONDING_SYMBOL() antlr.TerminalNode
	BY_SYMBOL() antlr.TerminalNode

	// IsOpt_column_match_suffixContext differentiates from other interfaces.
	IsOpt_column_match_suffixContext()
}

type Opt_column_match_suffixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_column_match_suffixContext() *Opt_column_match_suffixContext {
	var p = new(Opt_column_match_suffixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_column_match_suffix
	return p
}

func InitEmptyOpt_column_match_suffixContext(p *Opt_column_match_suffixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_column_match_suffix
}

func (*Opt_column_match_suffixContext) IsOpt_column_match_suffixContext() {}

func NewOpt_column_match_suffixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_column_match_suffixContext {
	var p = new(Opt_column_match_suffixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_column_match_suffix

	return p
}

func (s *Opt_column_match_suffixContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_column_match_suffixContext) CORRESPONDING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCORRESPONDING_SYMBOL, 0)
}

func (s *Opt_column_match_suffixContext) BY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBY_SYMBOL, 0)
}

func (s *Opt_column_match_suffixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_column_match_suffixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_column_match_suffixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_column_match_suffix(s)
	}
}

func (s *Opt_column_match_suffixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_column_match_suffix(s)
	}
}

func (s *Opt_column_match_suffixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_column_match_suffix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_column_match_suffix() (localctx IOpt_column_match_suffixContext) {
	localctx = NewOpt_column_match_suffixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, GoogleSQLParserRULE_opt_column_match_suffix)
	p.SetState(1565)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 119, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1562)
			p.Match(GoogleSQLParserCORRESPONDING_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1563)
			p.Match(GoogleSQLParserCORRESPONDING_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1564)
			p.Match(GoogleSQLParserBY_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_strictContext is an interface to support dynamic dispatch.
type IOpt_strictContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	STRICT_SYMBOL() antlr.TerminalNode

	// IsOpt_strictContext differentiates from other interfaces.
	IsOpt_strictContext()
}

type Opt_strictContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_strictContext() *Opt_strictContext {
	var p = new(Opt_strictContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_strict
	return p
}

func InitEmptyOpt_strictContext(p *Opt_strictContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_strict
}

func (*Opt_strictContext) IsOpt_strictContext() {}

func NewOpt_strictContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_strictContext {
	var p = new(Opt_strictContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_strict

	return p
}

func (s *Opt_strictContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_strictContext) STRICT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTRICT_SYMBOL, 0)
}

func (s *Opt_strictContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_strictContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_strictContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_strict(s)
	}
}

func (s *Opt_strictContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_strict(s)
	}
}

func (s *Opt_strictContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_strict(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_strict() (localctx IOpt_strictContext) {
	localctx = NewOpt_strictContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, GoogleSQLParserRULE_opt_strict)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1567)
		p.Match(GoogleSQLParserSTRICT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAll_or_distinctContext is an interface to support dynamic dispatch.
type IAll_or_distinctContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ALL_SYMBOL() antlr.TerminalNode
	DISTINCT_SYMBOL() antlr.TerminalNode

	// IsAll_or_distinctContext differentiates from other interfaces.
	IsAll_or_distinctContext()
}

type All_or_distinctContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAll_or_distinctContext() *All_or_distinctContext {
	var p = new(All_or_distinctContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_all_or_distinct
	return p
}

func InitEmptyAll_or_distinctContext(p *All_or_distinctContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_all_or_distinct
}

func (*All_or_distinctContext) IsAll_or_distinctContext() {}

func NewAll_or_distinctContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *All_or_distinctContext {
	var p = new(All_or_distinctContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_all_or_distinct

	return p
}

func (s *All_or_distinctContext) GetParser() antlr.Parser { return s.parser }

func (s *All_or_distinctContext) ALL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserALL_SYMBOL, 0)
}

func (s *All_or_distinctContext) DISTINCT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDISTINCT_SYMBOL, 0)
}

func (s *All_or_distinctContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *All_or_distinctContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *All_or_distinctContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAll_or_distinct(s)
	}
}

func (s *All_or_distinctContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAll_or_distinct(s)
	}
}

func (s *All_or_distinctContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAll_or_distinct(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) All_or_distinct() (localctx IAll_or_distinctContext) {
	localctx = NewAll_or_distinctContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, GoogleSQLParserRULE_all_or_distinct)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1569)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserALL_SYMBOL || _la == GoogleSQLParserDISTINCT_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQuery_set_operation_typeContext is an interface to support dynamic dispatch.
type IQuery_set_operation_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UNION_SYMBOL() antlr.TerminalNode
	EXCEPT_SYMBOL() antlr.TerminalNode
	INTERSECT_SYMBOL() antlr.TerminalNode

	// IsQuery_set_operation_typeContext differentiates from other interfaces.
	IsQuery_set_operation_typeContext()
}

type Query_set_operation_typeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuery_set_operation_typeContext() *Query_set_operation_typeContext {
	var p = new(Query_set_operation_typeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_set_operation_type
	return p
}

func InitEmptyQuery_set_operation_typeContext(p *Query_set_operation_typeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_set_operation_type
}

func (*Query_set_operation_typeContext) IsQuery_set_operation_typeContext() {}

func NewQuery_set_operation_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Query_set_operation_typeContext {
	var p = new(Query_set_operation_typeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_query_set_operation_type

	return p
}

func (s *Query_set_operation_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Query_set_operation_typeContext) UNION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNION_SYMBOL, 0)
}

func (s *Query_set_operation_typeContext) EXCEPT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXCEPT_SYMBOL, 0)
}

func (s *Query_set_operation_typeContext) INTERSECT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINTERSECT_SYMBOL, 0)
}

func (s *Query_set_operation_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_set_operation_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Query_set_operation_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterQuery_set_operation_type(s)
	}
}

func (s *Query_set_operation_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitQuery_set_operation_type(s)
	}
}

func (s *Query_set_operation_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitQuery_set_operation_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Query_set_operation_type() (localctx IQuery_set_operation_typeContext) {
	localctx = NewQuery_set_operation_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, GoogleSQLParserRULE_query_set_operation_type)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1571)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-66)) & ^0x3f) == 0 && ((int64(1)<<(_la-66))&4294967553) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_corresponding_outer_modeContext is an interface to support dynamic dispatch.
type IOpt_corresponding_outer_modeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FULL_SYMBOL() antlr.TerminalNode
	Opt_outer() IOpt_outerContext
	OUTER_SYMBOL() antlr.TerminalNode
	LEFT_SYMBOL() antlr.TerminalNode

	// IsOpt_corresponding_outer_modeContext differentiates from other interfaces.
	IsOpt_corresponding_outer_modeContext()
}

type Opt_corresponding_outer_modeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_corresponding_outer_modeContext() *Opt_corresponding_outer_modeContext {
	var p = new(Opt_corresponding_outer_modeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_corresponding_outer_mode
	return p
}

func InitEmptyOpt_corresponding_outer_modeContext(p *Opt_corresponding_outer_modeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_corresponding_outer_mode
}

func (*Opt_corresponding_outer_modeContext) IsOpt_corresponding_outer_modeContext() {}

func NewOpt_corresponding_outer_modeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_corresponding_outer_modeContext {
	var p = new(Opt_corresponding_outer_modeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_corresponding_outer_mode

	return p
}

func (s *Opt_corresponding_outer_modeContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_corresponding_outer_modeContext) FULL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFULL_SYMBOL, 0)
}

func (s *Opt_corresponding_outer_modeContext) Opt_outer() IOpt_outerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_outerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_outerContext)
}

func (s *Opt_corresponding_outer_modeContext) OUTER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOUTER_SYMBOL, 0)
}

func (s *Opt_corresponding_outer_modeContext) LEFT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLEFT_SYMBOL, 0)
}

func (s *Opt_corresponding_outer_modeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_corresponding_outer_modeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_corresponding_outer_modeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_corresponding_outer_mode(s)
	}
}

func (s *Opt_corresponding_outer_modeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_corresponding_outer_mode(s)
	}
}

func (s *Opt_corresponding_outer_modeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_corresponding_outer_mode(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_corresponding_outer_mode() (localctx IOpt_corresponding_outer_modeContext) {
	localctx = NewOpt_corresponding_outer_modeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, GoogleSQLParserRULE_opt_corresponding_outer_mode)
	var _la int

	p.SetState(1582)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserFULL_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1573)
			p.Match(GoogleSQLParserFULL_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1575)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserOUTER_SYMBOL {
			{
				p.SetState(1574)
				p.Opt_outer()
			}

		}

	case GoogleSQLParserOUTER_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1577)
			p.Match(GoogleSQLParserOUTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserLEFT_SYMBOL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1578)
			p.Match(GoogleSQLParserLEFT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1580)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserOUTER_SYMBOL {
			{
				p.SetState(1579)
				p.Opt_outer()
			}

		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_outerContext is an interface to support dynamic dispatch.
type IOpt_outerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OUTER_SYMBOL() antlr.TerminalNode

	// IsOpt_outerContext differentiates from other interfaces.
	IsOpt_outerContext()
}

type Opt_outerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_outerContext() *Opt_outerContext {
	var p = new(Opt_outerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_outer
	return p
}

func InitEmptyOpt_outerContext(p *Opt_outerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_outer
}

func (*Opt_outerContext) IsOpt_outerContext() {}

func NewOpt_outerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_outerContext {
	var p = new(Opt_outerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_outer

	return p
}

func (s *Opt_outerContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_outerContext) OUTER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOUTER_SYMBOL, 0)
}

func (s *Opt_outerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_outerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_outerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_outer(s)
	}
}

func (s *Opt_outerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_outer(s)
	}
}

func (s *Opt_outerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_outer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_outer() (localctx IOpt_outerContext) {
	localctx = NewOpt_outerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, GoogleSQLParserRULE_opt_outer)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1584)
		p.Match(GoogleSQLParserOUTER_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWith_clauseContext is an interface to support dynamic dispatch.
type IWith_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WITH_SYMBOL() antlr.TerminalNode
	AllAliased_query() []IAliased_queryContext
	Aliased_query(i int) IAliased_queryContext
	RECURSIVE_SYMBOL() antlr.TerminalNode
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsWith_clauseContext differentiates from other interfaces.
	IsWith_clauseContext()
}

type With_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_clauseContext() *With_clauseContext {
	var p = new(With_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_clause
	return p
}

func InitEmptyWith_clauseContext(p *With_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_clause
}

func (*With_clauseContext) IsWith_clauseContext() {}

func NewWith_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_clauseContext {
	var p = new(With_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_with_clause

	return p
}

func (s *With_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *With_clauseContext) WITH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWITH_SYMBOL, 0)
}

func (s *With_clauseContext) AllAliased_query() []IAliased_queryContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAliased_queryContext); ok {
			len++
		}
	}

	tst := make([]IAliased_queryContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAliased_queryContext); ok {
			tst[i] = t.(IAliased_queryContext)
			i++
		}
	}

	return tst
}

func (s *With_clauseContext) Aliased_query(i int) IAliased_queryContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAliased_queryContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAliased_queryContext)
}

func (s *With_clauseContext) RECURSIVE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRECURSIVE_SYMBOL, 0)
}

func (s *With_clauseContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *With_clauseContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *With_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWith_clause(s)
	}
}

func (s *With_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWith_clause(s)
	}
}

func (s *With_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWith_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) With_clause() (localctx IWith_clauseContext) {
	localctx = NewWith_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, GoogleSQLParserRULE_with_clause)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1586)
		p.Match(GoogleSQLParserWITH_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1588)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserRECURSIVE_SYMBOL {
		{
			p.SetState(1587)
			p.Match(GoogleSQLParserRECURSIVE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1590)
		p.Aliased_query()
	}
	p.SetState(1595)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 124, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1591)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1592)
				p.Aliased_query()
			}

		}
		p.SetState(1597)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 124, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAliased_queryContext is an interface to support dynamic dispatch.
type IAliased_queryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	AS_SYMBOL() antlr.TerminalNode
	Parenthesized_query() IParenthesized_queryContext
	Opt_aliased_query_modifiers() IOpt_aliased_query_modifiersContext

	// IsAliased_queryContext differentiates from other interfaces.
	IsAliased_queryContext()
}

type Aliased_queryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAliased_queryContext() *Aliased_queryContext {
	var p = new(Aliased_queryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_aliased_query
	return p
}

func InitEmptyAliased_queryContext(p *Aliased_queryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_aliased_query
}

func (*Aliased_queryContext) IsAliased_queryContext() {}

func NewAliased_queryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Aliased_queryContext {
	var p = new(Aliased_queryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_aliased_query

	return p
}

func (s *Aliased_queryContext) GetParser() antlr.Parser { return s.parser }

func (s *Aliased_queryContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Aliased_queryContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Aliased_queryContext) Parenthesized_query() IParenthesized_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesized_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesized_queryContext)
}

func (s *Aliased_queryContext) Opt_aliased_query_modifiers() IOpt_aliased_query_modifiersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_aliased_query_modifiersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_aliased_query_modifiersContext)
}

func (s *Aliased_queryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Aliased_queryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Aliased_queryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAliased_query(s)
	}
}

func (s *Aliased_queryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAliased_query(s)
	}
}

func (s *Aliased_queryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAliased_query(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Aliased_query() (localctx IAliased_queryContext) {
	localctx = NewAliased_queryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, GoogleSQLParserRULE_aliased_query)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1598)
		p.Identifier()
	}
	{
		p.SetState(1599)
		p.Match(GoogleSQLParserAS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1600)
		p.Parenthesized_query()
	}
	p.SetState(1602)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserWITH_SYMBOL {
		{
			p.SetState(1601)
			p.Opt_aliased_query_modifiers()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_aliased_query_modifiersContext is an interface to support dynamic dispatch.
type IOpt_aliased_query_modifiersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Recursion_depth_modifier() IRecursion_depth_modifierContext

	// IsOpt_aliased_query_modifiersContext differentiates from other interfaces.
	IsOpt_aliased_query_modifiersContext()
}

type Opt_aliased_query_modifiersContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_aliased_query_modifiersContext() *Opt_aliased_query_modifiersContext {
	var p = new(Opt_aliased_query_modifiersContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_aliased_query_modifiers
	return p
}

func InitEmptyOpt_aliased_query_modifiersContext(p *Opt_aliased_query_modifiersContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_aliased_query_modifiers
}

func (*Opt_aliased_query_modifiersContext) IsOpt_aliased_query_modifiersContext() {}

func NewOpt_aliased_query_modifiersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_aliased_query_modifiersContext {
	var p = new(Opt_aliased_query_modifiersContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_aliased_query_modifiers

	return p
}

func (s *Opt_aliased_query_modifiersContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_aliased_query_modifiersContext) Recursion_depth_modifier() IRecursion_depth_modifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRecursion_depth_modifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRecursion_depth_modifierContext)
}

func (s *Opt_aliased_query_modifiersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_aliased_query_modifiersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_aliased_query_modifiersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_aliased_query_modifiers(s)
	}
}

func (s *Opt_aliased_query_modifiersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_aliased_query_modifiers(s)
	}
}

func (s *Opt_aliased_query_modifiersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_aliased_query_modifiers(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_aliased_query_modifiers() (localctx IOpt_aliased_query_modifiersContext) {
	localctx = NewOpt_aliased_query_modifiersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, GoogleSQLParserRULE_opt_aliased_query_modifiers)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1604)
		p.Recursion_depth_modifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRecursion_depth_modifierContext is an interface to support dynamic dispatch.
type IRecursion_depth_modifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WITH_SYMBOL() antlr.TerminalNode
	DEPTH_SYMBOL() antlr.TerminalNode
	Opt_as_alias_with_required_as() IOpt_as_alias_with_required_asContext
	BETWEEN_SYMBOL() antlr.TerminalNode
	AllPossibly_unbounded_int_literal_or_parameter() []IPossibly_unbounded_int_literal_or_parameterContext
	Possibly_unbounded_int_literal_or_parameter(i int) IPossibly_unbounded_int_literal_or_parameterContext
	AND_SYMBOL() antlr.TerminalNode
	MAX_SYMBOL() antlr.TerminalNode

	// IsRecursion_depth_modifierContext differentiates from other interfaces.
	IsRecursion_depth_modifierContext()
}

type Recursion_depth_modifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRecursion_depth_modifierContext() *Recursion_depth_modifierContext {
	var p = new(Recursion_depth_modifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_recursion_depth_modifier
	return p
}

func InitEmptyRecursion_depth_modifierContext(p *Recursion_depth_modifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_recursion_depth_modifier
}

func (*Recursion_depth_modifierContext) IsRecursion_depth_modifierContext() {}

func NewRecursion_depth_modifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Recursion_depth_modifierContext {
	var p = new(Recursion_depth_modifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_recursion_depth_modifier

	return p
}

func (s *Recursion_depth_modifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Recursion_depth_modifierContext) WITH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWITH_SYMBOL, 0)
}

func (s *Recursion_depth_modifierContext) DEPTH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDEPTH_SYMBOL, 0)
}

func (s *Recursion_depth_modifierContext) Opt_as_alias_with_required_as() IOpt_as_alias_with_required_asContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_as_alias_with_required_asContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_as_alias_with_required_asContext)
}

func (s *Recursion_depth_modifierContext) BETWEEN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBETWEEN_SYMBOL, 0)
}

func (s *Recursion_depth_modifierContext) AllPossibly_unbounded_int_literal_or_parameter() []IPossibly_unbounded_int_literal_or_parameterContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPossibly_unbounded_int_literal_or_parameterContext); ok {
			len++
		}
	}

	tst := make([]IPossibly_unbounded_int_literal_or_parameterContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPossibly_unbounded_int_literal_or_parameterContext); ok {
			tst[i] = t.(IPossibly_unbounded_int_literal_or_parameterContext)
			i++
		}
	}

	return tst
}

func (s *Recursion_depth_modifierContext) Possibly_unbounded_int_literal_or_parameter(i int) IPossibly_unbounded_int_literal_or_parameterContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPossibly_unbounded_int_literal_or_parameterContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPossibly_unbounded_int_literal_or_parameterContext)
}

func (s *Recursion_depth_modifierContext) AND_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAND_SYMBOL, 0)
}

func (s *Recursion_depth_modifierContext) MAX_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMAX_SYMBOL, 0)
}

func (s *Recursion_depth_modifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Recursion_depth_modifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Recursion_depth_modifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRecursion_depth_modifier(s)
	}
}

func (s *Recursion_depth_modifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRecursion_depth_modifier(s)
	}
}

func (s *Recursion_depth_modifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRecursion_depth_modifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Recursion_depth_modifier() (localctx IRecursion_depth_modifierContext) {
	localctx = NewRecursion_depth_modifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, GoogleSQLParserRULE_recursion_depth_modifier)
	var _la int

	p.SetState(1628)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 129, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1606)
			p.Match(GoogleSQLParserWITH_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1607)
			p.Match(GoogleSQLParserDEPTH_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1609)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAS_SYMBOL {
			{
				p.SetState(1608)
				p.Opt_as_alias_with_required_as()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1611)
			p.Match(GoogleSQLParserWITH_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1612)
			p.Match(GoogleSQLParserDEPTH_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1614)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAS_SYMBOL {
			{
				p.SetState(1613)
				p.Opt_as_alias_with_required_as()
			}

		}
		{
			p.SetState(1616)
			p.Match(GoogleSQLParserBETWEEN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1617)
			p.Possibly_unbounded_int_literal_or_parameter()
		}
		{
			p.SetState(1618)
			p.Match(GoogleSQLParserAND_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1619)
			p.Possibly_unbounded_int_literal_or_parameter()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1621)
			p.Match(GoogleSQLParserWITH_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1622)
			p.Match(GoogleSQLParserDEPTH_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1624)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAS_SYMBOL {
			{
				p.SetState(1623)
				p.Opt_as_alias_with_required_as()
			}

		}
		{
			p.SetState(1626)
			p.Match(GoogleSQLParserMAX_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1627)
			p.Possibly_unbounded_int_literal_or_parameter()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPossibly_unbounded_int_literal_or_parameterContext is an interface to support dynamic dispatch.
type IPossibly_unbounded_int_literal_or_parameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Int_literal_or_parameter() IInt_literal_or_parameterContext
	UNBOUNDED_SYMBOL() antlr.TerminalNode

	// IsPossibly_unbounded_int_literal_or_parameterContext differentiates from other interfaces.
	IsPossibly_unbounded_int_literal_or_parameterContext()
}

type Possibly_unbounded_int_literal_or_parameterContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPossibly_unbounded_int_literal_or_parameterContext() *Possibly_unbounded_int_literal_or_parameterContext {
	var p = new(Possibly_unbounded_int_literal_or_parameterContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_possibly_unbounded_int_literal_or_parameter
	return p
}

func InitEmptyPossibly_unbounded_int_literal_or_parameterContext(p *Possibly_unbounded_int_literal_or_parameterContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_possibly_unbounded_int_literal_or_parameter
}

func (*Possibly_unbounded_int_literal_or_parameterContext) IsPossibly_unbounded_int_literal_or_parameterContext() {
}

func NewPossibly_unbounded_int_literal_or_parameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Possibly_unbounded_int_literal_or_parameterContext {
	var p = new(Possibly_unbounded_int_literal_or_parameterContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_possibly_unbounded_int_literal_or_parameter

	return p
}

func (s *Possibly_unbounded_int_literal_or_parameterContext) GetParser() antlr.Parser {
	return s.parser
}

func (s *Possibly_unbounded_int_literal_or_parameterContext) Int_literal_or_parameter() IInt_literal_or_parameterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInt_literal_or_parameterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInt_literal_or_parameterContext)
}

func (s *Possibly_unbounded_int_literal_or_parameterContext) UNBOUNDED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNBOUNDED_SYMBOL, 0)
}

func (s *Possibly_unbounded_int_literal_or_parameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Possibly_unbounded_int_literal_or_parameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Possibly_unbounded_int_literal_or_parameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPossibly_unbounded_int_literal_or_parameter(s)
	}
}

func (s *Possibly_unbounded_int_literal_or_parameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPossibly_unbounded_int_literal_or_parameter(s)
	}
}

func (s *Possibly_unbounded_int_literal_or_parameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPossibly_unbounded_int_literal_or_parameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Possibly_unbounded_int_literal_or_parameter() (localctx IPossibly_unbounded_int_literal_or_parameterContext) {
	localctx = NewPossibly_unbounded_int_literal_or_parameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, GoogleSQLParserRULE_possibly_unbounded_int_literal_or_parameter)
	p.SetState(1632)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserQUESTION_SYMBOL, GoogleSQLParserAT_SYMBOL, GoogleSQLParserATAT_SYMBOL, GoogleSQLParserINTEGER_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1630)
			p.Int_literal_or_parameter()
		}

	case GoogleSQLParserUNBOUNDED_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1631)
			p.Match(GoogleSQLParserUNBOUNDED_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInt_literal_or_parameterContext is an interface to support dynamic dispatch.
type IInt_literal_or_parameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Integer_literal() IInteger_literalContext
	Parameter_expression() IParameter_expressionContext
	System_variable_expression() ISystem_variable_expressionContext

	// IsInt_literal_or_parameterContext differentiates from other interfaces.
	IsInt_literal_or_parameterContext()
}

type Int_literal_or_parameterContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInt_literal_or_parameterContext() *Int_literal_or_parameterContext {
	var p = new(Int_literal_or_parameterContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_int_literal_or_parameter
	return p
}

func InitEmptyInt_literal_or_parameterContext(p *Int_literal_or_parameterContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_int_literal_or_parameter
}

func (*Int_literal_or_parameterContext) IsInt_literal_or_parameterContext() {}

func NewInt_literal_or_parameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Int_literal_or_parameterContext {
	var p = new(Int_literal_or_parameterContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_int_literal_or_parameter

	return p
}

func (s *Int_literal_or_parameterContext) GetParser() antlr.Parser { return s.parser }

func (s *Int_literal_or_parameterContext) Integer_literal() IInteger_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInteger_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInteger_literalContext)
}

func (s *Int_literal_or_parameterContext) Parameter_expression() IParameter_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParameter_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParameter_expressionContext)
}

func (s *Int_literal_or_parameterContext) System_variable_expression() ISystem_variable_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISystem_variable_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISystem_variable_expressionContext)
}

func (s *Int_literal_or_parameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Int_literal_or_parameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Int_literal_or_parameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterInt_literal_or_parameter(s)
	}
}

func (s *Int_literal_or_parameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitInt_literal_or_parameter(s)
	}
}

func (s *Int_literal_or_parameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitInt_literal_or_parameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Int_literal_or_parameter() (localctx IInt_literal_or_parameterContext) {
	localctx = NewInt_literal_or_parameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, GoogleSQLParserRULE_int_literal_or_parameter)
	p.SetState(1637)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINTEGER_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1634)
			p.Integer_literal()
		}

	case GoogleSQLParserQUESTION_SYMBOL, GoogleSQLParserAT_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1635)
			p.Parameter_expression()
		}

	case GoogleSQLParserATAT_SYMBOL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1636)
			p.System_variable_expression()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOrder_by_clauseContext is an interface to support dynamic dispatch.
type IOrder_by_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Order_by_clause_prefix() IOrder_by_clause_prefixContext

	// IsOrder_by_clauseContext differentiates from other interfaces.
	IsOrder_by_clauseContext()
}

type Order_by_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrder_by_clauseContext() *Order_by_clauseContext {
	var p = new(Order_by_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_order_by_clause
	return p
}

func InitEmptyOrder_by_clauseContext(p *Order_by_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_order_by_clause
}

func (*Order_by_clauseContext) IsOrder_by_clauseContext() {}

func NewOrder_by_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Order_by_clauseContext {
	var p = new(Order_by_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_order_by_clause

	return p
}

func (s *Order_by_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Order_by_clauseContext) Order_by_clause_prefix() IOrder_by_clause_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrder_by_clause_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrder_by_clause_prefixContext)
}

func (s *Order_by_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Order_by_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Order_by_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOrder_by_clause(s)
	}
}

func (s *Order_by_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOrder_by_clause(s)
	}
}

func (s *Order_by_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOrder_by_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Order_by_clause() (localctx IOrder_by_clauseContext) {
	localctx = NewOrder_by_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, GoogleSQLParserRULE_order_by_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1639)
		p.Order_by_clause_prefix()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOrder_by_clause_prefixContext is an interface to support dynamic dispatch.
type IOrder_by_clause_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ORDER_SYMBOL() antlr.TerminalNode
	BY_SYMBOL() antlr.TerminalNode
	AllOrdering_expression() []IOrdering_expressionContext
	Ordering_expression(i int) IOrdering_expressionContext
	Hint() IHintContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsOrder_by_clause_prefixContext differentiates from other interfaces.
	IsOrder_by_clause_prefixContext()
}

type Order_by_clause_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrder_by_clause_prefixContext() *Order_by_clause_prefixContext {
	var p = new(Order_by_clause_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_order_by_clause_prefix
	return p
}

func InitEmptyOrder_by_clause_prefixContext(p *Order_by_clause_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_order_by_clause_prefix
}

func (*Order_by_clause_prefixContext) IsOrder_by_clause_prefixContext() {}

func NewOrder_by_clause_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Order_by_clause_prefixContext {
	var p = new(Order_by_clause_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_order_by_clause_prefix

	return p
}

func (s *Order_by_clause_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Order_by_clause_prefixContext) ORDER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserORDER_SYMBOL, 0)
}

func (s *Order_by_clause_prefixContext) BY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBY_SYMBOL, 0)
}

func (s *Order_by_clause_prefixContext) AllOrdering_expression() []IOrdering_expressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOrdering_expressionContext); ok {
			len++
		}
	}

	tst := make([]IOrdering_expressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOrdering_expressionContext); ok {
			tst[i] = t.(IOrdering_expressionContext)
			i++
		}
	}

	return tst
}

func (s *Order_by_clause_prefixContext) Ordering_expression(i int) IOrdering_expressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrdering_expressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrdering_expressionContext)
}

func (s *Order_by_clause_prefixContext) Hint() IHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHintContext)
}

func (s *Order_by_clause_prefixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Order_by_clause_prefixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Order_by_clause_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Order_by_clause_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Order_by_clause_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOrder_by_clause_prefix(s)
	}
}

func (s *Order_by_clause_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOrder_by_clause_prefix(s)
	}
}

func (s *Order_by_clause_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOrder_by_clause_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Order_by_clause_prefix() (localctx IOrder_by_clause_prefixContext) {
	localctx = NewOrder_by_clause_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, GoogleSQLParserRULE_order_by_clause_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1641)
		p.Match(GoogleSQLParserORDER_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1643)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAT_SYMBOL {
		{
			p.SetState(1642)
			p.Hint()
		}

	}
	{
		p.SetState(1645)
		p.Match(GoogleSQLParserBY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1646)
		p.Ordering_expression()
	}
	p.SetState(1651)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(1647)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1648)
			p.Ordering_expression()
		}

		p.SetState(1653)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOrdering_expressionContext is an interface to support dynamic dispatch.
type IOrdering_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	Collate_clause() ICollate_clauseContext
	Asc_or_desc() IAsc_or_descContext
	Null_order() INull_orderContext

	// IsOrdering_expressionContext differentiates from other interfaces.
	IsOrdering_expressionContext()
}

type Ordering_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrdering_expressionContext() *Ordering_expressionContext {
	var p = new(Ordering_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_ordering_expression
	return p
}

func InitEmptyOrdering_expressionContext(p *Ordering_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_ordering_expression
}

func (*Ordering_expressionContext) IsOrdering_expressionContext() {}

func NewOrdering_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ordering_expressionContext {
	var p = new(Ordering_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_ordering_expression

	return p
}

func (s *Ordering_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Ordering_expressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Ordering_expressionContext) Collate_clause() ICollate_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollate_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollate_clauseContext)
}

func (s *Ordering_expressionContext) Asc_or_desc() IAsc_or_descContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAsc_or_descContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAsc_or_descContext)
}

func (s *Ordering_expressionContext) Null_order() INull_orderContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INull_orderContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INull_orderContext)
}

func (s *Ordering_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ordering_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ordering_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOrdering_expression(s)
	}
}

func (s *Ordering_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOrdering_expression(s)
	}
}

func (s *Ordering_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOrdering_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Ordering_expression() (localctx IOrdering_expressionContext) {
	localctx = NewOrdering_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, GoogleSQLParserRULE_ordering_expression)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1654)
		p.expression(0)
	}
	p.SetState(1656)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserCOLLATE_SYMBOL {
		{
			p.SetState(1655)
			p.Collate_clause()
		}

	}
	p.SetState(1659)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserASC_SYMBOL || _la == GoogleSQLParserDESC_SYMBOL {
		{
			p.SetState(1658)
			p.Asc_or_desc()
		}

	}
	p.SetState(1662)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserNULLS_SYMBOL {
		{
			p.SetState(1661)
			p.Null_order()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelectContext is an interface to support dynamic dispatch.
type ISelectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Select_clause() ISelect_clauseContext
	From_clause() IFrom_clauseContext
	Opt_clauses_following_from() IOpt_clauses_following_fromContext

	// IsSelectContext differentiates from other interfaces.
	IsSelectContext()
}

type SelectContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectContext() *SelectContext {
	var p = new(SelectContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select
	return p
}

func InitEmptySelectContext(p *SelectContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select
}

func (*SelectContext) IsSelectContext() {}

func NewSelectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectContext {
	var p = new(SelectContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_select

	return p
}

func (s *SelectContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectContext) Select_clause() ISelect_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_clauseContext)
}

func (s *SelectContext) From_clause() IFrom_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrom_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrom_clauseContext)
}

func (s *SelectContext) Opt_clauses_following_from() IOpt_clauses_following_fromContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_clauses_following_fromContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_clauses_following_fromContext)
}

func (s *SelectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSelect(s)
	}
}

func (s *SelectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSelect(s)
	}
}

func (s *SelectContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSelect(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Select_() (localctx ISelectContext) {
	localctx = NewSelectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, GoogleSQLParserRULE_select)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1664)
		p.Select_clause()
	}
	p.SetState(1666)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 137, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1665)
			p.From_clause()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1669)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 138, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1668)
			p.Opt_clauses_following_from()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_clauses_following_fromContext is an interface to support dynamic dispatch.
type IOpt_clauses_following_fromContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Where_clause() IWhere_clauseContext
	Group_by_clause() IGroup_by_clauseContext
	Having_clause() IHaving_clauseContext
	Qualify_clause_nonreserved() IQualify_clause_nonreservedContext
	Window_clause() IWindow_clauseContext
	Opt_clauses_following_where() IOpt_clauses_following_whereContext

	// IsOpt_clauses_following_fromContext differentiates from other interfaces.
	IsOpt_clauses_following_fromContext()
}

type Opt_clauses_following_fromContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_clauses_following_fromContext() *Opt_clauses_following_fromContext {
	var p = new(Opt_clauses_following_fromContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_clauses_following_from
	return p
}

func InitEmptyOpt_clauses_following_fromContext(p *Opt_clauses_following_fromContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_clauses_following_from
}

func (*Opt_clauses_following_fromContext) IsOpt_clauses_following_fromContext() {}

func NewOpt_clauses_following_fromContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_clauses_following_fromContext {
	var p = new(Opt_clauses_following_fromContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_clauses_following_from

	return p
}

func (s *Opt_clauses_following_fromContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_clauses_following_fromContext) Where_clause() IWhere_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhere_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhere_clauseContext)
}

func (s *Opt_clauses_following_fromContext) Group_by_clause() IGroup_by_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGroup_by_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGroup_by_clauseContext)
}

func (s *Opt_clauses_following_fromContext) Having_clause() IHaving_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHaving_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHaving_clauseContext)
}

func (s *Opt_clauses_following_fromContext) Qualify_clause_nonreserved() IQualify_clause_nonreservedContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualify_clause_nonreservedContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualify_clause_nonreservedContext)
}

func (s *Opt_clauses_following_fromContext) Window_clause() IWindow_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindow_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindow_clauseContext)
}

func (s *Opt_clauses_following_fromContext) Opt_clauses_following_where() IOpt_clauses_following_whereContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_clauses_following_whereContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_clauses_following_whereContext)
}

func (s *Opt_clauses_following_fromContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_clauses_following_fromContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_clauses_following_fromContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_clauses_following_from(s)
	}
}

func (s *Opt_clauses_following_fromContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_clauses_following_from(s)
	}
}

func (s *Opt_clauses_following_fromContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_clauses_following_from(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_clauses_following_from() (localctx IOpt_clauses_following_fromContext) {
	localctx = NewOpt_clauses_following_fromContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, GoogleSQLParserRULE_opt_clauses_following_from)
	p.SetState(1685)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserWHERE_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1671)
			p.Where_clause()
		}
		p.SetState(1673)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 139, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1672)
				p.Group_by_clause()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1676)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 140, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1675)
				p.Having_clause()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1679)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 141, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1678)
				p.Qualify_clause_nonreserved()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1682)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 142, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1681)
				p.Window_clause()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case GoogleSQLParserHAVING_SYMBOL, GoogleSQLParserGROUP_SYMBOL, GoogleSQLParserQUALIFY_SYMBOL, GoogleSQLParserWINDOW_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1684)
			p.Opt_clauses_following_where()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_clauses_following_whereContext is an interface to support dynamic dispatch.
type IOpt_clauses_following_whereContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Group_by_clause() IGroup_by_clauseContext
	Having_clause() IHaving_clauseContext
	Qualify_clause_nonreserved() IQualify_clause_nonreservedContext
	Window_clause() IWindow_clauseContext
	Opt_clauses_following_group_by() IOpt_clauses_following_group_byContext

	// IsOpt_clauses_following_whereContext differentiates from other interfaces.
	IsOpt_clauses_following_whereContext()
}

type Opt_clauses_following_whereContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_clauses_following_whereContext() *Opt_clauses_following_whereContext {
	var p = new(Opt_clauses_following_whereContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_clauses_following_where
	return p
}

func InitEmptyOpt_clauses_following_whereContext(p *Opt_clauses_following_whereContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_clauses_following_where
}

func (*Opt_clauses_following_whereContext) IsOpt_clauses_following_whereContext() {}

func NewOpt_clauses_following_whereContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_clauses_following_whereContext {
	var p = new(Opt_clauses_following_whereContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_clauses_following_where

	return p
}

func (s *Opt_clauses_following_whereContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_clauses_following_whereContext) Group_by_clause() IGroup_by_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGroup_by_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGroup_by_clauseContext)
}

func (s *Opt_clauses_following_whereContext) Having_clause() IHaving_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHaving_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHaving_clauseContext)
}

func (s *Opt_clauses_following_whereContext) Qualify_clause_nonreserved() IQualify_clause_nonreservedContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualify_clause_nonreservedContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualify_clause_nonreservedContext)
}

func (s *Opt_clauses_following_whereContext) Window_clause() IWindow_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindow_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindow_clauseContext)
}

func (s *Opt_clauses_following_whereContext) Opt_clauses_following_group_by() IOpt_clauses_following_group_byContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_clauses_following_group_byContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_clauses_following_group_byContext)
}

func (s *Opt_clauses_following_whereContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_clauses_following_whereContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_clauses_following_whereContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_clauses_following_where(s)
	}
}

func (s *Opt_clauses_following_whereContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_clauses_following_where(s)
	}
}

func (s *Opt_clauses_following_whereContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_clauses_following_where(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_clauses_following_where() (localctx IOpt_clauses_following_whereContext) {
	localctx = NewOpt_clauses_following_whereContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, GoogleSQLParserRULE_opt_clauses_following_where)
	p.SetState(1698)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserGROUP_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1687)
			p.Group_by_clause()
		}
		p.SetState(1689)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 144, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1688)
				p.Having_clause()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1692)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 145, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1691)
				p.Qualify_clause_nonreserved()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1695)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 146, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1694)
				p.Window_clause()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case GoogleSQLParserHAVING_SYMBOL, GoogleSQLParserQUALIFY_SYMBOL, GoogleSQLParserWINDOW_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1697)
			p.Opt_clauses_following_group_by()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_clauses_following_group_byContext is an interface to support dynamic dispatch.
type IOpt_clauses_following_group_byContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Having_clause() IHaving_clauseContext
	Qualify_clause_nonreserved() IQualify_clause_nonreservedContext
	Window_clause() IWindow_clauseContext

	// IsOpt_clauses_following_group_byContext differentiates from other interfaces.
	IsOpt_clauses_following_group_byContext()
}

type Opt_clauses_following_group_byContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_clauses_following_group_byContext() *Opt_clauses_following_group_byContext {
	var p = new(Opt_clauses_following_group_byContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_clauses_following_group_by
	return p
}

func InitEmptyOpt_clauses_following_group_byContext(p *Opt_clauses_following_group_byContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_clauses_following_group_by
}

func (*Opt_clauses_following_group_byContext) IsOpt_clauses_following_group_byContext() {}

func NewOpt_clauses_following_group_byContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_clauses_following_group_byContext {
	var p = new(Opt_clauses_following_group_byContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_clauses_following_group_by

	return p
}

func (s *Opt_clauses_following_group_byContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_clauses_following_group_byContext) Having_clause() IHaving_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHaving_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHaving_clauseContext)
}

func (s *Opt_clauses_following_group_byContext) Qualify_clause_nonreserved() IQualify_clause_nonreservedContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualify_clause_nonreservedContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualify_clause_nonreservedContext)
}

func (s *Opt_clauses_following_group_byContext) Window_clause() IWindow_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindow_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindow_clauseContext)
}

func (s *Opt_clauses_following_group_byContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_clauses_following_group_byContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_clauses_following_group_byContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_clauses_following_group_by(s)
	}
}

func (s *Opt_clauses_following_group_byContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_clauses_following_group_by(s)
	}
}

func (s *Opt_clauses_following_group_byContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_clauses_following_group_by(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_clauses_following_group_by() (localctx IOpt_clauses_following_group_byContext) {
	localctx = NewOpt_clauses_following_group_byContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, GoogleSQLParserRULE_opt_clauses_following_group_by)
	p.SetState(1712)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserHAVING_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1700)
			p.Having_clause()
		}
		p.SetState(1702)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 148, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1701)
				p.Qualify_clause_nonreserved()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1705)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 149, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1704)
				p.Window_clause()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case GoogleSQLParserQUALIFY_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1707)
			p.Qualify_clause_nonreserved()
		}
		p.SetState(1709)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 150, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1708)
				p.Window_clause()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case GoogleSQLParserWINDOW_SYMBOL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1711)
			p.Window_clause()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWindow_clauseContext is an interface to support dynamic dispatch.
type IWindow_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Window_clause_prefix() IWindow_clause_prefixContext

	// IsWindow_clauseContext differentiates from other interfaces.
	IsWindow_clauseContext()
}

type Window_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_clauseContext() *Window_clauseContext {
	var p = new(Window_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_window_clause
	return p
}

func InitEmptyWindow_clauseContext(p *Window_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_window_clause
}

func (*Window_clauseContext) IsWindow_clauseContext() {}

func NewWindow_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_clauseContext {
	var p = new(Window_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_window_clause

	return p
}

func (s *Window_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_clauseContext) Window_clause_prefix() IWindow_clause_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindow_clause_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindow_clause_prefixContext)
}

func (s *Window_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWindow_clause(s)
	}
}

func (s *Window_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWindow_clause(s)
	}
}

func (s *Window_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWindow_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Window_clause() (localctx IWindow_clauseContext) {
	localctx = NewWindow_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, GoogleSQLParserRULE_window_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1714)
		p.Window_clause_prefix()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWindow_clause_prefixContext is an interface to support dynamic dispatch.
type IWindow_clause_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WINDOW_SYMBOL() antlr.TerminalNode
	AllWindow_definition() []IWindow_definitionContext
	Window_definition(i int) IWindow_definitionContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsWindow_clause_prefixContext differentiates from other interfaces.
	IsWindow_clause_prefixContext()
}

type Window_clause_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_clause_prefixContext() *Window_clause_prefixContext {
	var p = new(Window_clause_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_window_clause_prefix
	return p
}

func InitEmptyWindow_clause_prefixContext(p *Window_clause_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_window_clause_prefix
}

func (*Window_clause_prefixContext) IsWindow_clause_prefixContext() {}

func NewWindow_clause_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_clause_prefixContext {
	var p = new(Window_clause_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_window_clause_prefix

	return p
}

func (s *Window_clause_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_clause_prefixContext) WINDOW_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWINDOW_SYMBOL, 0)
}

func (s *Window_clause_prefixContext) AllWindow_definition() []IWindow_definitionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWindow_definitionContext); ok {
			len++
		}
	}

	tst := make([]IWindow_definitionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWindow_definitionContext); ok {
			tst[i] = t.(IWindow_definitionContext)
			i++
		}
	}

	return tst
}

func (s *Window_clause_prefixContext) Window_definition(i int) IWindow_definitionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindow_definitionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindow_definitionContext)
}

func (s *Window_clause_prefixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Window_clause_prefixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Window_clause_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_clause_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_clause_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWindow_clause_prefix(s)
	}
}

func (s *Window_clause_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWindow_clause_prefix(s)
	}
}

func (s *Window_clause_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWindow_clause_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Window_clause_prefix() (localctx IWindow_clause_prefixContext) {
	localctx = NewWindow_clause_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, GoogleSQLParserRULE_window_clause_prefix)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1716)
		p.Match(GoogleSQLParserWINDOW_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1717)
		p.Window_definition()
	}
	p.SetState(1722)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 152, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1718)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1719)
				p.Window_definition()
			}

		}
		p.SetState(1724)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 152, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWindow_definitionContext is an interface to support dynamic dispatch.
type IWindow_definitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	AS_SYMBOL() antlr.TerminalNode
	Window_specification() IWindow_specificationContext

	// IsWindow_definitionContext differentiates from other interfaces.
	IsWindow_definitionContext()
}

type Window_definitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_definitionContext() *Window_definitionContext {
	var p = new(Window_definitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_window_definition
	return p
}

func InitEmptyWindow_definitionContext(p *Window_definitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_window_definition
}

func (*Window_definitionContext) IsWindow_definitionContext() {}

func NewWindow_definitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_definitionContext {
	var p = new(Window_definitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_window_definition

	return p
}

func (s *Window_definitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_definitionContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Window_definitionContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Window_definitionContext) Window_specification() IWindow_specificationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindow_specificationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindow_specificationContext)
}

func (s *Window_definitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_definitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_definitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWindow_definition(s)
	}
}

func (s *Window_definitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWindow_definition(s)
	}
}

func (s *Window_definitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWindow_definition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Window_definition() (localctx IWindow_definitionContext) {
	localctx = NewWindow_definitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, GoogleSQLParserRULE_window_definition)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1725)
		p.Identifier()
	}
	{
		p.SetState(1726)
		p.Match(GoogleSQLParserAS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1727)
		p.Window_specification()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWhere_clauseContext is an interface to support dynamic dispatch.
type IWhere_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WHERE_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsWhere_clauseContext differentiates from other interfaces.
	IsWhere_clauseContext()
}

type Where_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhere_clauseContext() *Where_clauseContext {
	var p = new(Where_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_where_clause
	return p
}

func InitEmptyWhere_clauseContext(p *Where_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_where_clause
}

func (*Where_clauseContext) IsWhere_clauseContext() {}

func NewWhere_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Where_clauseContext {
	var p = new(Where_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_where_clause

	return p
}

func (s *Where_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Where_clauseContext) WHERE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWHERE_SYMBOL, 0)
}

func (s *Where_clauseContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Where_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Where_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Where_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWhere_clause(s)
	}
}

func (s *Where_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWhere_clause(s)
	}
}

func (s *Where_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWhere_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Where_clause() (localctx IWhere_clauseContext) {
	localctx = NewWhere_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, GoogleSQLParserRULE_where_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1729)
		p.Match(GoogleSQLParserWHERE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1730)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IHaving_clauseContext is an interface to support dynamic dispatch.
type IHaving_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	HAVING_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsHaving_clauseContext differentiates from other interfaces.
	IsHaving_clauseContext()
}

type Having_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHaving_clauseContext() *Having_clauseContext {
	var p = new(Having_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_having_clause
	return p
}

func InitEmptyHaving_clauseContext(p *Having_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_having_clause
}

func (*Having_clauseContext) IsHaving_clauseContext() {}

func NewHaving_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Having_clauseContext {
	var p = new(Having_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_having_clause

	return p
}

func (s *Having_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Having_clauseContext) HAVING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserHAVING_SYMBOL, 0)
}

func (s *Having_clauseContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Having_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Having_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Having_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterHaving_clause(s)
	}
}

func (s *Having_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitHaving_clause(s)
	}
}

func (s *Having_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitHaving_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Having_clause() (localctx IHaving_clauseContext) {
	localctx = NewHaving_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, GoogleSQLParserRULE_having_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1732)
		p.Match(GoogleSQLParserHAVING_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1733)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGroup_by_clauseContext is an interface to support dynamic dispatch.
type IGroup_by_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Group_by_all() IGroup_by_allContext
	Group_by_clause_prefix() IGroup_by_clause_prefixContext

	// IsGroup_by_clauseContext differentiates from other interfaces.
	IsGroup_by_clauseContext()
}

type Group_by_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroup_by_clauseContext() *Group_by_clauseContext {
	var p = new(Group_by_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_group_by_clause
	return p
}

func InitEmptyGroup_by_clauseContext(p *Group_by_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_group_by_clause
}

func (*Group_by_clauseContext) IsGroup_by_clauseContext() {}

func NewGroup_by_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Group_by_clauseContext {
	var p = new(Group_by_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_group_by_clause

	return p
}

func (s *Group_by_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Group_by_clauseContext) Group_by_all() IGroup_by_allContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGroup_by_allContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGroup_by_allContext)
}

func (s *Group_by_clauseContext) Group_by_clause_prefix() IGroup_by_clause_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGroup_by_clause_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGroup_by_clause_prefixContext)
}

func (s *Group_by_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Group_by_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Group_by_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGroup_by_clause(s)
	}
}

func (s *Group_by_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGroup_by_clause(s)
	}
}

func (s *Group_by_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGroup_by_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Group_by_clause() (localctx IGroup_by_clauseContext) {
	localctx = NewGroup_by_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, GoogleSQLParserRULE_group_by_clause)
	p.SetState(1737)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 153, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1735)
			p.Group_by_all()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1736)
			p.Group_by_clause_prefix()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGroup_by_allContext is an interface to support dynamic dispatch.
type IGroup_by_allContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Group_by_preamble() IGroup_by_preambleContext
	ALL_SYMBOL() antlr.TerminalNode

	// IsGroup_by_allContext differentiates from other interfaces.
	IsGroup_by_allContext()
}

type Group_by_allContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroup_by_allContext() *Group_by_allContext {
	var p = new(Group_by_allContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_group_by_all
	return p
}

func InitEmptyGroup_by_allContext(p *Group_by_allContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_group_by_all
}

func (*Group_by_allContext) IsGroup_by_allContext() {}

func NewGroup_by_allContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Group_by_allContext {
	var p = new(Group_by_allContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_group_by_all

	return p
}

func (s *Group_by_allContext) GetParser() antlr.Parser { return s.parser }

func (s *Group_by_allContext) Group_by_preamble() IGroup_by_preambleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGroup_by_preambleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGroup_by_preambleContext)
}

func (s *Group_by_allContext) ALL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserALL_SYMBOL, 0)
}

func (s *Group_by_allContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Group_by_allContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Group_by_allContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGroup_by_all(s)
	}
}

func (s *Group_by_allContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGroup_by_all(s)
	}
}

func (s *Group_by_allContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGroup_by_all(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Group_by_all() (localctx IGroup_by_allContext) {
	localctx = NewGroup_by_allContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, GoogleSQLParserRULE_group_by_all)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1739)
		p.Group_by_preamble()
	}
	{
		p.SetState(1740)
		p.Match(GoogleSQLParserALL_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelect_clauseContext is an interface to support dynamic dispatch.
type ISelect_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SELECT_SYMBOL() antlr.TerminalNode
	Select_list() ISelect_listContext
	Hint() IHintContext
	Opt_select_with() IOpt_select_withContext
	All_or_distinct() IAll_or_distinctContext
	Opt_select_as_clause() IOpt_select_as_clauseContext
	FROM_SYMBOL() antlr.TerminalNode

	// IsSelect_clauseContext differentiates from other interfaces.
	IsSelect_clauseContext()
}

type Select_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_clauseContext() *Select_clauseContext {
	var p = new(Select_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_clause
	return p
}

func InitEmptySelect_clauseContext(p *Select_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_clause
}

func (*Select_clauseContext) IsSelect_clauseContext() {}

func NewSelect_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_clauseContext {
	var p = new(Select_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_select_clause

	return p
}

func (s *Select_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_clauseContext) SELECT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSELECT_SYMBOL, 0)
}

func (s *Select_clauseContext) Select_list() ISelect_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_listContext)
}

func (s *Select_clauseContext) Hint() IHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHintContext)
}

func (s *Select_clauseContext) Opt_select_with() IOpt_select_withContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_select_withContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_select_withContext)
}

func (s *Select_clauseContext) All_or_distinct() IAll_or_distinctContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAll_or_distinctContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAll_or_distinctContext)
}

func (s *Select_clauseContext) Opt_select_as_clause() IOpt_select_as_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_select_as_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_select_as_clauseContext)
}

func (s *Select_clauseContext) FROM_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFROM_SYMBOL, 0)
}

func (s *Select_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSelect_clause(s)
	}
}

func (s *Select_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSelect_clause(s)
	}
}

func (s *Select_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSelect_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Select_clause() (localctx ISelect_clauseContext) {
	localctx = NewSelect_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, GoogleSQLParserRULE_select_clause)
	var _la int

	p.SetState(1771)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 162, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1742)
			p.Match(GoogleSQLParserSELECT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1744)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 154, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1743)
				p.Hint()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1747)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 155, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1746)
				p.Opt_select_with()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1750)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserALL_SYMBOL || _la == GoogleSQLParserDISTINCT_SYMBOL {
			{
				p.SetState(1749)
				p.All_or_distinct()
			}

		}
		p.SetState(1753)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAS_SYMBOL {
			{
				p.SetState(1752)
				p.Opt_select_as_clause()
			}

		}
		{
			p.SetState(1755)
			p.Select_list()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1756)
			p.Match(GoogleSQLParserSELECT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1758)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAT_SYMBOL {
			{
				p.SetState(1757)
				p.Hint()
			}

		}
		p.SetState(1761)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserWITH_SYMBOL {
			{
				p.SetState(1760)
				p.Opt_select_with()
			}

		}
		p.SetState(1764)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserALL_SYMBOL || _la == GoogleSQLParserDISTINCT_SYMBOL {
			{
				p.SetState(1763)
				p.All_or_distinct()
			}

		}
		p.SetState(1767)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAS_SYMBOL {
			{
				p.SetState(1766)
				p.Opt_select_as_clause()
			}

		}
		{
			p.SetState(1769)
			p.Match(GoogleSQLParserFROM_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Syntax error: SELECT list must not be empty", nil, nil)

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_select_as_clauseContext is an interface to support dynamic dispatch.
type IOpt_select_as_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AS_SYMBOL() antlr.TerminalNode
	STRUCT_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext

	// IsOpt_select_as_clauseContext differentiates from other interfaces.
	IsOpt_select_as_clauseContext()
}

type Opt_select_as_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_select_as_clauseContext() *Opt_select_as_clauseContext {
	var p = new(Opt_select_as_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_select_as_clause
	return p
}

func InitEmptyOpt_select_as_clauseContext(p *Opt_select_as_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_select_as_clause
}

func (*Opt_select_as_clauseContext) IsOpt_select_as_clauseContext() {}

func NewOpt_select_as_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_select_as_clauseContext {
	var p = new(Opt_select_as_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_select_as_clause

	return p
}

func (s *Opt_select_as_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_select_as_clauseContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Opt_select_as_clauseContext) STRUCT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTRUCT_SYMBOL, 0)
}

func (s *Opt_select_as_clauseContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Opt_select_as_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_select_as_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_select_as_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_select_as_clause(s)
	}
}

func (s *Opt_select_as_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_select_as_clause(s)
	}
}

func (s *Opt_select_as_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_select_as_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_select_as_clause() (localctx IOpt_select_as_clauseContext) {
	localctx = NewOpt_select_as_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, GoogleSQLParserRULE_opt_select_as_clause)
	p.SetState(1777)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 163, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1773)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1774)
			p.Match(GoogleSQLParserSTRUCT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1775)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1776)
			p.Path_expression()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_select_withContext is an interface to support dynamic dispatch.
type IOpt_select_withContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WITH_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext
	OPTIONS_SYMBOL() antlr.TerminalNode
	Options_list() IOptions_listContext

	// IsOpt_select_withContext differentiates from other interfaces.
	IsOpt_select_withContext()
}

type Opt_select_withContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_select_withContext() *Opt_select_withContext {
	var p = new(Opt_select_withContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_select_with
	return p
}

func InitEmptyOpt_select_withContext(p *Opt_select_withContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_select_with
}

func (*Opt_select_withContext) IsOpt_select_withContext() {}

func NewOpt_select_withContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_select_withContext {
	var p = new(Opt_select_withContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_select_with

	return p
}

func (s *Opt_select_withContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_select_withContext) WITH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWITH_SYMBOL, 0)
}

func (s *Opt_select_withContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Opt_select_withContext) OPTIONS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOPTIONS_SYMBOL, 0)
}

func (s *Opt_select_withContext) Options_list() IOptions_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOptions_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOptions_listContext)
}

func (s *Opt_select_withContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_select_withContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_select_withContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_select_with(s)
	}
}

func (s *Opt_select_withContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_select_with(s)
	}
}

func (s *Opt_select_withContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_select_with(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_select_with() (localctx IOpt_select_withContext) {
	localctx = NewOpt_select_withContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, GoogleSQLParserRULE_opt_select_with)
	p.SetState(1786)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 164, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1779)
			p.Match(GoogleSQLParserWITH_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1780)
			p.Identifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1781)
			p.Match(GoogleSQLParserWITH_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1782)
			p.Identifier()
		}
		{
			p.SetState(1783)
			p.Match(GoogleSQLParserOPTIONS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1784)
			p.Options_list()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFrom_clauseContext is an interface to support dynamic dispatch.
type IFrom_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FROM_SYMBOL() antlr.TerminalNode
	From_clause_contents() IFrom_clause_contentsContext

	// IsFrom_clauseContext differentiates from other interfaces.
	IsFrom_clauseContext()
}

type From_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrom_clauseContext() *From_clauseContext {
	var p = new(From_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_from_clause
	return p
}

func InitEmptyFrom_clauseContext(p *From_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_from_clause
}

func (*From_clauseContext) IsFrom_clauseContext() {}

func NewFrom_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *From_clauseContext {
	var p = new(From_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_from_clause

	return p
}

func (s *From_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *From_clauseContext) FROM_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFROM_SYMBOL, 0)
}

func (s *From_clauseContext) From_clause_contents() IFrom_clause_contentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrom_clause_contentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrom_clause_contentsContext)
}

func (s *From_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *From_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *From_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFrom_clause(s)
	}
}

func (s *From_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFrom_clause(s)
	}
}

func (s *From_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFrom_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) From_clause() (localctx IFrom_clauseContext) {
	localctx = NewFrom_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, GoogleSQLParserRULE_from_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1788)
		p.Match(GoogleSQLParserFROM_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1789)
		p.From_clause_contents()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFrom_clause_contentsContext is an interface to support dynamic dispatch.
type IFrom_clause_contentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Table_primary() ITable_primaryContext
	AllFrom_clause_contents_suffix() []IFrom_clause_contents_suffixContext
	From_clause_contents_suffix(i int) IFrom_clause_contents_suffixContext
	AT_SYMBOL() antlr.TerminalNode
	QUESTION_SYMBOL() antlr.TerminalNode
	ATAT_SYMBOL() antlr.TerminalNode

	// IsFrom_clause_contentsContext differentiates from other interfaces.
	IsFrom_clause_contentsContext()
}

type From_clause_contentsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrom_clause_contentsContext() *From_clause_contentsContext {
	var p = new(From_clause_contentsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_from_clause_contents
	return p
}

func InitEmptyFrom_clause_contentsContext(p *From_clause_contentsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_from_clause_contents
}

func (*From_clause_contentsContext) IsFrom_clause_contentsContext() {}

func NewFrom_clause_contentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *From_clause_contentsContext {
	var p = new(From_clause_contentsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_from_clause_contents

	return p
}

func (s *From_clause_contentsContext) GetParser() antlr.Parser { return s.parser }

func (s *From_clause_contentsContext) Table_primary() ITable_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_primaryContext)
}

func (s *From_clause_contentsContext) AllFrom_clause_contents_suffix() []IFrom_clause_contents_suffixContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFrom_clause_contents_suffixContext); ok {
			len++
		}
	}

	tst := make([]IFrom_clause_contents_suffixContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFrom_clause_contents_suffixContext); ok {
			tst[i] = t.(IFrom_clause_contents_suffixContext)
			i++
		}
	}

	return tst
}

func (s *From_clause_contentsContext) From_clause_contents_suffix(i int) IFrom_clause_contents_suffixContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrom_clause_contents_suffixContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrom_clause_contents_suffixContext)
}

func (s *From_clause_contentsContext) AT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAT_SYMBOL, 0)
}

func (s *From_clause_contentsContext) QUESTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserQUESTION_SYMBOL, 0)
}

func (s *From_clause_contentsContext) ATAT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserATAT_SYMBOL, 0)
}

func (s *From_clause_contentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *From_clause_contentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *From_clause_contentsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFrom_clause_contents(s)
	}
}

func (s *From_clause_contentsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFrom_clause_contents(s)
	}
}

func (s *From_clause_contentsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFrom_clause_contents(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) From_clause_contents() (localctx IFrom_clause_contentsContext) {
	localctx = NewFrom_clause_contentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, GoogleSQLParserRULE_from_clause_contents)
	var _alt int

	p.SetState(1804)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserLR_BRACKET_SYMBOL, GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserUNNEST_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserIF_SYMBOL, GoogleSQLParserSLASH_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1791)
			p.table_primary(0)
		}
		p.SetState(1795)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 165, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1792)
					p.From_clause_contents_suffix()
				}

			}
			p.SetState(1797)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 165, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

	case GoogleSQLParserAT_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1798)
			p.Match(GoogleSQLParserAT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Query parameters cannot be used in place of table names", nil, nil)

	case GoogleSQLParserQUESTION_SYMBOL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1800)
			p.Match(GoogleSQLParserQUESTION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Query parameters cannot be used in place of table names", nil, nil)

	case GoogleSQLParserATAT_SYMBOL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1802)
			p.Match(GoogleSQLParserATAT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("System variables cannot be used in place of table names", nil, nil)

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFrom_clause_contents_suffixContext is an interface to support dynamic dispatch.
type IFrom_clause_contents_suffixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	COMMA_SYMBOL() antlr.TerminalNode
	Table_primary() ITable_primaryContext
	JOIN_SYMBOL() antlr.TerminalNode
	Opt_natural() IOpt_naturalContext
	Join_type() IJoin_typeContext
	Join_hint() IJoin_hintContext
	Hint() IHintContext
	On_or_using_clause_list() IOn_or_using_clause_listContext

	// IsFrom_clause_contents_suffixContext differentiates from other interfaces.
	IsFrom_clause_contents_suffixContext()
}

type From_clause_contents_suffixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrom_clause_contents_suffixContext() *From_clause_contents_suffixContext {
	var p = new(From_clause_contents_suffixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_from_clause_contents_suffix
	return p
}

func InitEmptyFrom_clause_contents_suffixContext(p *From_clause_contents_suffixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_from_clause_contents_suffix
}

func (*From_clause_contents_suffixContext) IsFrom_clause_contents_suffixContext() {}

func NewFrom_clause_contents_suffixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *From_clause_contents_suffixContext {
	var p = new(From_clause_contents_suffixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_from_clause_contents_suffix

	return p
}

func (s *From_clause_contents_suffixContext) GetParser() antlr.Parser { return s.parser }

func (s *From_clause_contents_suffixContext) COMMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, 0)
}

func (s *From_clause_contents_suffixContext) Table_primary() ITable_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_primaryContext)
}

func (s *From_clause_contents_suffixContext) JOIN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserJOIN_SYMBOL, 0)
}

func (s *From_clause_contents_suffixContext) Opt_natural() IOpt_naturalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_naturalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_naturalContext)
}

func (s *From_clause_contents_suffixContext) Join_type() IJoin_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoin_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoin_typeContext)
}

func (s *From_clause_contents_suffixContext) Join_hint() IJoin_hintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoin_hintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoin_hintContext)
}

func (s *From_clause_contents_suffixContext) Hint() IHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHintContext)
}

func (s *From_clause_contents_suffixContext) On_or_using_clause_list() IOn_or_using_clause_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOn_or_using_clause_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOn_or_using_clause_listContext)
}

func (s *From_clause_contents_suffixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *From_clause_contents_suffixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *From_clause_contents_suffixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFrom_clause_contents_suffix(s)
	}
}

func (s *From_clause_contents_suffixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFrom_clause_contents_suffix(s)
	}
}

func (s *From_clause_contents_suffixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFrom_clause_contents_suffix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) From_clause_contents_suffix() (localctx IFrom_clause_contents_suffixContext) {
	localctx = NewFrom_clause_contents_suffixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, GoogleSQLParserRULE_from_clause_contents_suffix)
	var _la int

	p.SetState(1825)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserCOMMA_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1806)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1807)
			p.table_primary(0)
		}

	case GoogleSQLParserCROSS_SYMBOL, GoogleSQLParserJOIN_SYMBOL, GoogleSQLParserFULL_SYMBOL, GoogleSQLParserINNER_SYMBOL, GoogleSQLParserLEFT_SYMBOL, GoogleSQLParserRIGHT_SYMBOL, GoogleSQLParserHASH_SYMBOL, GoogleSQLParserNATURAL_SYMBOL, GoogleSQLParserLOOKUP_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1809)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserNATURAL_SYMBOL {
			{
				p.SetState(1808)
				p.Opt_natural()
			}

		}
		p.SetState(1812)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if (int64((_la-59)) & ^0x3f) == 0 && ((int64(1)<<(_la-59))&1073825793) != 0 {
			{
				p.SetState(1811)
				p.Join_type()
			}

		}
		p.SetState(1815)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserHASH_SYMBOL || _la == GoogleSQLParserLOOKUP_SYMBOL {
			{
				p.SetState(1814)
				p.Join_hint()
			}

		}
		{
			p.SetState(1817)
			p.Match(GoogleSQLParserJOIN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1819)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAT_SYMBOL {
			{
				p.SetState(1818)
				p.Hint()
			}

		}
		{
			p.SetState(1821)
			p.table_primary(0)
		}
		p.SetState(1823)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 171, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1822)
				p.On_or_using_clause_list()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_primaryContext is an interface to support dynamic dispatch.
type ITable_primaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Tvf_with_suffixes() ITvf_with_suffixesContext
	Table_path_expression() ITable_path_expressionContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Join() IJoinContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Table_subquery() ITable_subqueryContext
	Table_primary() ITable_primaryContext
	Match_recognize_clause() IMatch_recognize_clauseContext
	Sample_clause() ISample_clauseContext

	// IsTable_primaryContext differentiates from other interfaces.
	IsTable_primaryContext()
}

type Table_primaryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_primaryContext() *Table_primaryContext {
	var p = new(Table_primaryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_primary
	return p
}

func InitEmptyTable_primaryContext(p *Table_primaryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_primary
}

func (*Table_primaryContext) IsTable_primaryContext() {}

func NewTable_primaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_primaryContext {
	var p = new(Table_primaryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_table_primary

	return p
}

func (s *Table_primaryContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_primaryContext) Tvf_with_suffixes() ITvf_with_suffixesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITvf_with_suffixesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITvf_with_suffixesContext)
}

func (s *Table_primaryContext) Table_path_expression() ITable_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_path_expressionContext)
}

func (s *Table_primaryContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Table_primaryContext) Join() IJoinContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoinContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoinContext)
}

func (s *Table_primaryContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Table_primaryContext) Table_subquery() ITable_subqueryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_subqueryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_subqueryContext)
}

func (s *Table_primaryContext) Table_primary() ITable_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_primaryContext)
}

func (s *Table_primaryContext) Match_recognize_clause() IMatch_recognize_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatch_recognize_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatch_recognize_clauseContext)
}

func (s *Table_primaryContext) Sample_clause() ISample_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISample_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISample_clauseContext)
}

func (s *Table_primaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_primaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_primaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTable_primary(s)
	}
}

func (s *Table_primaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTable_primary(s)
	}
}

func (s *Table_primaryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTable_primary(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Table_primary() (localctx ITable_primaryContext) {
	return p.table_primary(0)
}

func (p *GoogleSQLParser) table_primary(_p int) (localctx ITable_primaryContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewTable_primaryContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ITable_primaryContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 240
	p.EnterRecursionRule(localctx, 240, GoogleSQLParserRULE_table_primary, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1835)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 173, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1828)
			p.Tvf_with_suffixes()
		}

	case 2:
		{
			p.SetState(1829)
			p.Table_path_expression()
		}

	case 3:
		{
			p.SetState(1830)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1831)
			p.Join()
		}
		{
			p.SetState(1832)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		{
			p.SetState(1834)
			p.Table_subquery()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1843)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 175, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1841)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 174, p.GetParserRuleContext()) {
			case 1:
				localctx = NewTable_primaryContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_table_primary)
				p.SetState(1837)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
					goto errorExit
				}
				{
					p.SetState(1838)
					p.Match_recognize_clause()
				}

			case 2:
				localctx = NewTable_primaryContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_table_primary)
				p.SetState(1839)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
					goto errorExit
				}
				{
					p.SetState(1840)
					p.Sample_clause()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(1845)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 175, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITvf_with_suffixesContext is an interface to support dynamic dispatch.
type ITvf_with_suffixesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Tvf_prefix_no_args() ITvf_prefix_no_argsContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Hint() IHintContext
	Pivot_or_unpivot_clause_and_aliases() IPivot_or_unpivot_clause_and_aliasesContext
	Tvf_prefix() ITvf_prefixContext

	// IsTvf_with_suffixesContext differentiates from other interfaces.
	IsTvf_with_suffixesContext()
}

type Tvf_with_suffixesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTvf_with_suffixesContext() *Tvf_with_suffixesContext {
	var p = new(Tvf_with_suffixesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_tvf_with_suffixes
	return p
}

func InitEmptyTvf_with_suffixesContext(p *Tvf_with_suffixesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_tvf_with_suffixes
}

func (*Tvf_with_suffixesContext) IsTvf_with_suffixesContext() {}

func NewTvf_with_suffixesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tvf_with_suffixesContext {
	var p = new(Tvf_with_suffixesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_tvf_with_suffixes

	return p
}

func (s *Tvf_with_suffixesContext) GetParser() antlr.Parser { return s.parser }

func (s *Tvf_with_suffixesContext) Tvf_prefix_no_args() ITvf_prefix_no_argsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITvf_prefix_no_argsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITvf_prefix_no_argsContext)
}

func (s *Tvf_with_suffixesContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Tvf_with_suffixesContext) Hint() IHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHintContext)
}

func (s *Tvf_with_suffixesContext) Pivot_or_unpivot_clause_and_aliases() IPivot_or_unpivot_clause_and_aliasesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPivot_or_unpivot_clause_and_aliasesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPivot_or_unpivot_clause_and_aliasesContext)
}

func (s *Tvf_with_suffixesContext) Tvf_prefix() ITvf_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITvf_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITvf_prefixContext)
}

func (s *Tvf_with_suffixesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tvf_with_suffixesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tvf_with_suffixesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTvf_with_suffixes(s)
	}
}

func (s *Tvf_with_suffixesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTvf_with_suffixes(s)
	}
}

func (s *Tvf_with_suffixesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTvf_with_suffixes(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Tvf_with_suffixes() (localctx ITvf_with_suffixesContext) {
	localctx = NewTvf_with_suffixesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 242, GoogleSQLParserRULE_tvf_with_suffixes)
	p.SetState(1862)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 180, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1846)
			p.Tvf_prefix_no_args()
		}
		{
			p.SetState(1847)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1849)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 176, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1848)
				p.Hint()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1852)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 177, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1851)
				p.Pivot_or_unpivot_clause_and_aliases()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1854)
			p.Tvf_prefix()
		}
		{
			p.SetState(1855)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1857)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 178, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1856)
				p.Hint()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1860)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 179, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1859)
				p.Pivot_or_unpivot_clause_and_aliases()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPivot_or_unpivot_clause_and_aliasesContext is an interface to support dynamic dispatch.
type IPivot_or_unpivot_clause_and_aliasesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AS_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext
	Pivot_clause() IPivot_clauseContext
	As_alias() IAs_aliasContext
	Unpivot_clause() IUnpivot_clauseContext
	Qualify_clause_nonreserved() IQualify_clause_nonreservedContext

	// IsPivot_or_unpivot_clause_and_aliasesContext differentiates from other interfaces.
	IsPivot_or_unpivot_clause_and_aliasesContext()
}

type Pivot_or_unpivot_clause_and_aliasesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPivot_or_unpivot_clause_and_aliasesContext() *Pivot_or_unpivot_clause_and_aliasesContext {
	var p = new(Pivot_or_unpivot_clause_and_aliasesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_pivot_or_unpivot_clause_and_aliases
	return p
}

func InitEmptyPivot_or_unpivot_clause_and_aliasesContext(p *Pivot_or_unpivot_clause_and_aliasesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_pivot_or_unpivot_clause_and_aliases
}

func (*Pivot_or_unpivot_clause_and_aliasesContext) IsPivot_or_unpivot_clause_and_aliasesContext() {}

func NewPivot_or_unpivot_clause_and_aliasesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pivot_or_unpivot_clause_and_aliasesContext {
	var p = new(Pivot_or_unpivot_clause_and_aliasesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_pivot_or_unpivot_clause_and_aliases

	return p
}

func (s *Pivot_or_unpivot_clause_and_aliasesContext) GetParser() antlr.Parser { return s.parser }

func (s *Pivot_or_unpivot_clause_and_aliasesContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Pivot_or_unpivot_clause_and_aliasesContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Pivot_or_unpivot_clause_and_aliasesContext) Pivot_clause() IPivot_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPivot_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPivot_clauseContext)
}

func (s *Pivot_or_unpivot_clause_and_aliasesContext) As_alias() IAs_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_aliasContext)
}

func (s *Pivot_or_unpivot_clause_and_aliasesContext) Unpivot_clause() IUnpivot_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnpivot_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnpivot_clauseContext)
}

func (s *Pivot_or_unpivot_clause_and_aliasesContext) Qualify_clause_nonreserved() IQualify_clause_nonreservedContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualify_clause_nonreservedContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualify_clause_nonreservedContext)
}

func (s *Pivot_or_unpivot_clause_and_aliasesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pivot_or_unpivot_clause_and_aliasesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pivot_or_unpivot_clause_and_aliasesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPivot_or_unpivot_clause_and_aliases(s)
	}
}

func (s *Pivot_or_unpivot_clause_and_aliasesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPivot_or_unpivot_clause_and_aliases(s)
	}
}

func (s *Pivot_or_unpivot_clause_and_aliasesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPivot_or_unpivot_clause_and_aliases(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Pivot_or_unpivot_clause_and_aliases() (localctx IPivot_or_unpivot_clause_and_aliasesContext) {
	localctx = NewPivot_or_unpivot_clause_and_aliasesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, GoogleSQLParserRULE_pivot_or_unpivot_clause_and_aliases)
	p.SetState(1907)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 185, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1864)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1865)
			p.Identifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1866)
			p.Identifier()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1867)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1868)
			p.Identifier()
		}
		{
			p.SetState(1869)
			p.Pivot_clause()
		}
		p.SetState(1871)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 181, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1870)
				p.As_alias()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1873)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1874)
			p.Identifier()
		}
		{
			p.SetState(1875)
			p.Unpivot_clause()
		}
		p.SetState(1877)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 182, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1876)
				p.As_alias()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1879)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1880)
			p.Identifier()
		}
		{
			p.SetState(1881)
			p.Qualify_clause_nonreserved()
		}

		p.NotifyErrorListeners("QUALIFY clause must be used in conjunction with WHERE or GROUP BY or HAVING clause", nil, nil)

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1884)
			p.Identifier()
		}
		{
			p.SetState(1885)
			p.Pivot_clause()
		}
		{
			p.SetState(1886)
			p.As_alias()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1888)
			p.Identifier()
		}
		{
			p.SetState(1889)
			p.Unpivot_clause()
		}
		{
			p.SetState(1890)
			p.As_alias()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1892)
			p.Identifier()
		}
		{
			p.SetState(1893)
			p.Qualify_clause_nonreserved()
		}

		p.NotifyErrorListeners("QUALIFY clause must be used in conjunction with WHERE or GROUP BY or HAVING clause", nil, nil)

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1896)
			p.Pivot_clause()
		}
		p.SetState(1898)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 183, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1897)
				p.As_alias()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1900)
			p.Unpivot_clause()
		}
		p.SetState(1902)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 184, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1901)
				p.As_alias()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1904)
			p.Qualify_clause_nonreserved()
		}

		p.NotifyErrorListeners("QUALIFY clause must be used in conjunction with WHERE or GROUP BY or HAVING clause", nil, nil)

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAs_aliasContext is an interface to support dynamic dispatch.
type IAs_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	AS_SYMBOL() antlr.TerminalNode

	// IsAs_aliasContext differentiates from other interfaces.
	IsAs_aliasContext()
}

type As_aliasContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAs_aliasContext() *As_aliasContext {
	var p = new(As_aliasContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_as_alias
	return p
}

func InitEmptyAs_aliasContext(p *As_aliasContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_as_alias
}

func (*As_aliasContext) IsAs_aliasContext() {}

func NewAs_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *As_aliasContext {
	var p = new(As_aliasContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_as_alias

	return p
}

func (s *As_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *As_aliasContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *As_aliasContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *As_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *As_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *As_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAs_alias(s)
	}
}

func (s *As_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAs_alias(s)
	}
}

func (s *As_aliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAs_alias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) As_alias() (localctx IAs_aliasContext) {
	localctx = NewAs_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, GoogleSQLParserRULE_as_alias)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1910)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAS_SYMBOL {
		{
			p.SetState(1909)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1912)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISample_clauseContext is an interface to support dynamic dispatch.
type ISample_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TABLESAMPLE_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Sample_size() ISample_sizeContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Opt_sample_clause_suffix() IOpt_sample_clause_suffixContext

	// IsSample_clauseContext differentiates from other interfaces.
	IsSample_clauseContext()
}

type Sample_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySample_clauseContext() *Sample_clauseContext {
	var p = new(Sample_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_sample_clause
	return p
}

func InitEmptySample_clauseContext(p *Sample_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_sample_clause
}

func (*Sample_clauseContext) IsSample_clauseContext() {}

func NewSample_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sample_clauseContext {
	var p = new(Sample_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_sample_clause

	return p
}

func (s *Sample_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Sample_clauseContext) TABLESAMPLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTABLESAMPLE_SYMBOL, 0)
}

func (s *Sample_clauseContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Sample_clauseContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Sample_clauseContext) Sample_size() ISample_sizeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISample_sizeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISample_sizeContext)
}

func (s *Sample_clauseContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Sample_clauseContext) Opt_sample_clause_suffix() IOpt_sample_clause_suffixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_sample_clause_suffixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_sample_clause_suffixContext)
}

func (s *Sample_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sample_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sample_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSample_clause(s)
	}
}

func (s *Sample_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSample_clause(s)
	}
}

func (s *Sample_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSample_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Sample_clause() (localctx ISample_clauseContext) {
	localctx = NewSample_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, GoogleSQLParserRULE_sample_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1914)
		p.Match(GoogleSQLParserTABLESAMPLE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1915)
		p.Identifier()
	}
	{
		p.SetState(1916)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1917)
		p.Sample_size()
	}
	{
		p.SetState(1918)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1919)
		p.Opt_sample_clause_suffix()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_sample_clause_suffixContext is an interface to support dynamic dispatch.
type IOpt_sample_clause_suffixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Repeatable_clause() IRepeatable_clauseContext
	WITH_SYMBOL() antlr.TerminalNode
	WEIGHT_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext
	AS_SYMBOL() antlr.TerminalNode

	// IsOpt_sample_clause_suffixContext differentiates from other interfaces.
	IsOpt_sample_clause_suffixContext()
}

type Opt_sample_clause_suffixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_sample_clause_suffixContext() *Opt_sample_clause_suffixContext {
	var p = new(Opt_sample_clause_suffixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_sample_clause_suffix
	return p
}

func InitEmptyOpt_sample_clause_suffixContext(p *Opt_sample_clause_suffixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_sample_clause_suffix
}

func (*Opt_sample_clause_suffixContext) IsOpt_sample_clause_suffixContext() {}

func NewOpt_sample_clause_suffixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_sample_clause_suffixContext {
	var p = new(Opt_sample_clause_suffixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_sample_clause_suffix

	return p
}

func (s *Opt_sample_clause_suffixContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_sample_clause_suffixContext) Repeatable_clause() IRepeatable_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRepeatable_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRepeatable_clauseContext)
}

func (s *Opt_sample_clause_suffixContext) WITH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWITH_SYMBOL, 0)
}

func (s *Opt_sample_clause_suffixContext) WEIGHT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWEIGHT_SYMBOL, 0)
}

func (s *Opt_sample_clause_suffixContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Opt_sample_clause_suffixContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Opt_sample_clause_suffixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_sample_clause_suffixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_sample_clause_suffixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_sample_clause_suffix(s)
	}
}

func (s *Opt_sample_clause_suffixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_sample_clause_suffix(s)
	}
}

func (s *Opt_sample_clause_suffixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_sample_clause_suffix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_sample_clause_suffix() (localctx IOpt_sample_clause_suffixContext) {
	localctx = NewOpt_sample_clause_suffixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 250, GoogleSQLParserRULE_opt_sample_clause_suffix)
	p.SetState(1940)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 190, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1921)
			p.Repeatable_clause()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1922)
			p.Match(GoogleSQLParserWITH_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1923)
			p.Match(GoogleSQLParserWEIGHT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1925)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 187, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1924)
				p.Repeatable_clause()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1927)
			p.Match(GoogleSQLParserWITH_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1928)
			p.Match(GoogleSQLParserWEIGHT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1929)
			p.Identifier()
		}
		p.SetState(1931)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 188, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1930)
				p.Repeatable_clause()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1933)
			p.Match(GoogleSQLParserWITH_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1934)
			p.Match(GoogleSQLParserWEIGHT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1935)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1936)
			p.Identifier()
		}
		p.SetState(1938)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 189, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1937)
				p.Repeatable_clause()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRepeatable_clauseContext is an interface to support dynamic dispatch.
type IRepeatable_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	REPEATABLE_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Possibly_cast_int_literal_or_parameter() IPossibly_cast_int_literal_or_parameterContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsRepeatable_clauseContext differentiates from other interfaces.
	IsRepeatable_clauseContext()
}

type Repeatable_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRepeatable_clauseContext() *Repeatable_clauseContext {
	var p = new(Repeatable_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_repeatable_clause
	return p
}

func InitEmptyRepeatable_clauseContext(p *Repeatable_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_repeatable_clause
}

func (*Repeatable_clauseContext) IsRepeatable_clauseContext() {}

func NewRepeatable_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Repeatable_clauseContext {
	var p = new(Repeatable_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_repeatable_clause

	return p
}

func (s *Repeatable_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Repeatable_clauseContext) REPEATABLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPEATABLE_SYMBOL, 0)
}

func (s *Repeatable_clauseContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Repeatable_clauseContext) Possibly_cast_int_literal_or_parameter() IPossibly_cast_int_literal_or_parameterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPossibly_cast_int_literal_or_parameterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPossibly_cast_int_literal_or_parameterContext)
}

func (s *Repeatable_clauseContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Repeatable_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Repeatable_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Repeatable_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRepeatable_clause(s)
	}
}

func (s *Repeatable_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRepeatable_clause(s)
	}
}

func (s *Repeatable_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRepeatable_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Repeatable_clause() (localctx IRepeatable_clauseContext) {
	localctx = NewRepeatable_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 252, GoogleSQLParserRULE_repeatable_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1942)
		p.Match(GoogleSQLParserREPEATABLE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1943)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1944)
		p.Possibly_cast_int_literal_or_parameter()
	}
	{
		p.SetState(1945)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPossibly_cast_int_literal_or_parameterContext is an interface to support dynamic dispatch.
type IPossibly_cast_int_literal_or_parameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Cast_int_literal_or_parameter() ICast_int_literal_or_parameterContext
	Int_literal_or_parameter() IInt_literal_or_parameterContext

	// IsPossibly_cast_int_literal_or_parameterContext differentiates from other interfaces.
	IsPossibly_cast_int_literal_or_parameterContext()
}

type Possibly_cast_int_literal_or_parameterContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPossibly_cast_int_literal_or_parameterContext() *Possibly_cast_int_literal_or_parameterContext {
	var p = new(Possibly_cast_int_literal_or_parameterContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_possibly_cast_int_literal_or_parameter
	return p
}

func InitEmptyPossibly_cast_int_literal_or_parameterContext(p *Possibly_cast_int_literal_or_parameterContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_possibly_cast_int_literal_or_parameter
}

func (*Possibly_cast_int_literal_or_parameterContext) IsPossibly_cast_int_literal_or_parameterContext() {
}

func NewPossibly_cast_int_literal_or_parameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Possibly_cast_int_literal_or_parameterContext {
	var p = new(Possibly_cast_int_literal_or_parameterContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_possibly_cast_int_literal_or_parameter

	return p
}

func (s *Possibly_cast_int_literal_or_parameterContext) GetParser() antlr.Parser { return s.parser }

func (s *Possibly_cast_int_literal_or_parameterContext) Cast_int_literal_or_parameter() ICast_int_literal_or_parameterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICast_int_literal_or_parameterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICast_int_literal_or_parameterContext)
}

func (s *Possibly_cast_int_literal_or_parameterContext) Int_literal_or_parameter() IInt_literal_or_parameterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInt_literal_or_parameterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInt_literal_or_parameterContext)
}

func (s *Possibly_cast_int_literal_or_parameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Possibly_cast_int_literal_or_parameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Possibly_cast_int_literal_or_parameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPossibly_cast_int_literal_or_parameter(s)
	}
}

func (s *Possibly_cast_int_literal_or_parameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPossibly_cast_int_literal_or_parameter(s)
	}
}

func (s *Possibly_cast_int_literal_or_parameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPossibly_cast_int_literal_or_parameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Possibly_cast_int_literal_or_parameter() (localctx IPossibly_cast_int_literal_or_parameterContext) {
	localctx = NewPossibly_cast_int_literal_or_parameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, GoogleSQLParserRULE_possibly_cast_int_literal_or_parameter)
	p.SetState(1949)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserCAST_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1947)
			p.Cast_int_literal_or_parameter()
		}

	case GoogleSQLParserQUESTION_SYMBOL, GoogleSQLParserAT_SYMBOL, GoogleSQLParserATAT_SYMBOL, GoogleSQLParserINTEGER_LITERAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1948)
			p.Int_literal_or_parameter()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICast_int_literal_or_parameterContext is an interface to support dynamic dispatch.
type ICast_int_literal_or_parameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CAST_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Int_literal_or_parameter() IInt_literal_or_parameterContext
	AS_SYMBOL() antlr.TerminalNode
	Type_() ITypeContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Opt_format() IOpt_formatContext

	// IsCast_int_literal_or_parameterContext differentiates from other interfaces.
	IsCast_int_literal_or_parameterContext()
}

type Cast_int_literal_or_parameterContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCast_int_literal_or_parameterContext() *Cast_int_literal_or_parameterContext {
	var p = new(Cast_int_literal_or_parameterContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_cast_int_literal_or_parameter
	return p
}

func InitEmptyCast_int_literal_or_parameterContext(p *Cast_int_literal_or_parameterContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_cast_int_literal_or_parameter
}

func (*Cast_int_literal_or_parameterContext) IsCast_int_literal_or_parameterContext() {}

func NewCast_int_literal_or_parameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cast_int_literal_or_parameterContext {
	var p = new(Cast_int_literal_or_parameterContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_cast_int_literal_or_parameter

	return p
}

func (s *Cast_int_literal_or_parameterContext) GetParser() antlr.Parser { return s.parser }

func (s *Cast_int_literal_or_parameterContext) CAST_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCAST_SYMBOL, 0)
}

func (s *Cast_int_literal_or_parameterContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Cast_int_literal_or_parameterContext) Int_literal_or_parameter() IInt_literal_or_parameterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInt_literal_or_parameterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInt_literal_or_parameterContext)
}

func (s *Cast_int_literal_or_parameterContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Cast_int_literal_or_parameterContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Cast_int_literal_or_parameterContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Cast_int_literal_or_parameterContext) Opt_format() IOpt_formatContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_formatContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_formatContext)
}

func (s *Cast_int_literal_or_parameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cast_int_literal_or_parameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cast_int_literal_or_parameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCast_int_literal_or_parameter(s)
	}
}

func (s *Cast_int_literal_or_parameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCast_int_literal_or_parameter(s)
	}
}

func (s *Cast_int_literal_or_parameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCast_int_literal_or_parameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Cast_int_literal_or_parameter() (localctx ICast_int_literal_or_parameterContext) {
	localctx = NewCast_int_literal_or_parameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 256, GoogleSQLParserRULE_cast_int_literal_or_parameter)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1951)
		p.Match(GoogleSQLParserCAST_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1952)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1953)
		p.Int_literal_or_parameter()
	}
	{
		p.SetState(1954)
		p.Match(GoogleSQLParserAS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1955)
		p.Type_()
	}
	p.SetState(1957)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserFORMAT_SYMBOL {
		{
			p.SetState(1956)
			p.Opt_format()
		}

	}
	{
		p.SetState(1959)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISample_sizeContext is an interface to support dynamic dispatch.
type ISample_sizeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Sample_size_value() ISample_size_valueContext
	Sample_size_unit() ISample_size_unitContext
	Partition_by_clause_prefix_no_hint() IPartition_by_clause_prefix_no_hintContext

	// IsSample_sizeContext differentiates from other interfaces.
	IsSample_sizeContext()
}

type Sample_sizeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySample_sizeContext() *Sample_sizeContext {
	var p = new(Sample_sizeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_sample_size
	return p
}

func InitEmptySample_sizeContext(p *Sample_sizeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_sample_size
}

func (*Sample_sizeContext) IsSample_sizeContext() {}

func NewSample_sizeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sample_sizeContext {
	var p = new(Sample_sizeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_sample_size

	return p
}

func (s *Sample_sizeContext) GetParser() antlr.Parser { return s.parser }

func (s *Sample_sizeContext) Sample_size_value() ISample_size_valueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISample_size_valueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISample_size_valueContext)
}

func (s *Sample_sizeContext) Sample_size_unit() ISample_size_unitContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISample_size_unitContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISample_size_unitContext)
}

func (s *Sample_sizeContext) Partition_by_clause_prefix_no_hint() IPartition_by_clause_prefix_no_hintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartition_by_clause_prefix_no_hintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartition_by_clause_prefix_no_hintContext)
}

func (s *Sample_sizeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sample_sizeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sample_sizeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSample_size(s)
	}
}

func (s *Sample_sizeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSample_size(s)
	}
}

func (s *Sample_sizeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSample_size(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Sample_size() (localctx ISample_sizeContext) {
	localctx = NewSample_sizeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, GoogleSQLParserRULE_sample_size)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1961)
		p.Sample_size_value()
	}
	{
		p.SetState(1962)
		p.Sample_size_unit()
	}
	p.SetState(1964)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserPARTITION_SYMBOL {
		{
			p.SetState(1963)
			p.Partition_by_clause_prefix_no_hint()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISample_size_valueContext is an interface to support dynamic dispatch.
type ISample_size_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Possibly_cast_int_literal_or_parameter() IPossibly_cast_int_literal_or_parameterContext
	Floating_point_literal() IFloating_point_literalContext

	// IsSample_size_valueContext differentiates from other interfaces.
	IsSample_size_valueContext()
}

type Sample_size_valueContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySample_size_valueContext() *Sample_size_valueContext {
	var p = new(Sample_size_valueContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_sample_size_value
	return p
}

func InitEmptySample_size_valueContext(p *Sample_size_valueContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_sample_size_value
}

func (*Sample_size_valueContext) IsSample_size_valueContext() {}

func NewSample_size_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sample_size_valueContext {
	var p = new(Sample_size_valueContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_sample_size_value

	return p
}

func (s *Sample_size_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Sample_size_valueContext) Possibly_cast_int_literal_or_parameter() IPossibly_cast_int_literal_or_parameterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPossibly_cast_int_literal_or_parameterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPossibly_cast_int_literal_or_parameterContext)
}

func (s *Sample_size_valueContext) Floating_point_literal() IFloating_point_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFloating_point_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFloating_point_literalContext)
}

func (s *Sample_size_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sample_size_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sample_size_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSample_size_value(s)
	}
}

func (s *Sample_size_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSample_size_value(s)
	}
}

func (s *Sample_size_valueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSample_size_value(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Sample_size_value() (localctx ISample_size_valueContext) {
	localctx = NewSample_size_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 260, GoogleSQLParserRULE_sample_size_value)
	p.SetState(1968)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserQUESTION_SYMBOL, GoogleSQLParserAT_SYMBOL, GoogleSQLParserATAT_SYMBOL, GoogleSQLParserINTEGER_LITERAL, GoogleSQLParserCAST_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1966)
			p.Possibly_cast_int_literal_or_parameter()
		}

	case GoogleSQLParserFLOATING_POINT_LITERAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1967)
			p.Floating_point_literal()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISample_size_unitContext is an interface to support dynamic dispatch.
type ISample_size_unitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ROWS_SYMBOL() antlr.TerminalNode
	PERCENT_SYMBOL() antlr.TerminalNode

	// IsSample_size_unitContext differentiates from other interfaces.
	IsSample_size_unitContext()
}

type Sample_size_unitContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySample_size_unitContext() *Sample_size_unitContext {
	var p = new(Sample_size_unitContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_sample_size_unit
	return p
}

func InitEmptySample_size_unitContext(p *Sample_size_unitContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_sample_size_unit
}

func (*Sample_size_unitContext) IsSample_size_unitContext() {}

func NewSample_size_unitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sample_size_unitContext {
	var p = new(Sample_size_unitContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_sample_size_unit

	return p
}

func (s *Sample_size_unitContext) GetParser() antlr.Parser { return s.parser }

func (s *Sample_size_unitContext) ROWS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserROWS_SYMBOL, 0)
}

func (s *Sample_size_unitContext) PERCENT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPERCENT_SYMBOL, 0)
}

func (s *Sample_size_unitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sample_size_unitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sample_size_unitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSample_size_unit(s)
	}
}

func (s *Sample_size_unitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSample_size_unit(s)
	}
}

func (s *Sample_size_unitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSample_size_unit(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Sample_size_unit() (localctx ISample_size_unitContext) {
	localctx = NewSample_size_unitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 262, GoogleSQLParserRULE_sample_size_unit)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1970)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserPERCENT_SYMBOL || _la == GoogleSQLParserROWS_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPartition_by_clause_prefix_no_hintContext is an interface to support dynamic dispatch.
type IPartition_by_clause_prefix_no_hintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PARTITION_SYMBOL() antlr.TerminalNode
	BY_SYMBOL() antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsPartition_by_clause_prefix_no_hintContext differentiates from other interfaces.
	IsPartition_by_clause_prefix_no_hintContext()
}

type Partition_by_clause_prefix_no_hintContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartition_by_clause_prefix_no_hintContext() *Partition_by_clause_prefix_no_hintContext {
	var p = new(Partition_by_clause_prefix_no_hintContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_partition_by_clause_prefix_no_hint
	return p
}

func InitEmptyPartition_by_clause_prefix_no_hintContext(p *Partition_by_clause_prefix_no_hintContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_partition_by_clause_prefix_no_hint
}

func (*Partition_by_clause_prefix_no_hintContext) IsPartition_by_clause_prefix_no_hintContext() {}

func NewPartition_by_clause_prefix_no_hintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Partition_by_clause_prefix_no_hintContext {
	var p = new(Partition_by_clause_prefix_no_hintContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_partition_by_clause_prefix_no_hint

	return p
}

func (s *Partition_by_clause_prefix_no_hintContext) GetParser() antlr.Parser { return s.parser }

func (s *Partition_by_clause_prefix_no_hintContext) PARTITION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPARTITION_SYMBOL, 0)
}

func (s *Partition_by_clause_prefix_no_hintContext) BY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBY_SYMBOL, 0)
}

func (s *Partition_by_clause_prefix_no_hintContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *Partition_by_clause_prefix_no_hintContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Partition_by_clause_prefix_no_hintContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Partition_by_clause_prefix_no_hintContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Partition_by_clause_prefix_no_hintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Partition_by_clause_prefix_no_hintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Partition_by_clause_prefix_no_hintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPartition_by_clause_prefix_no_hint(s)
	}
}

func (s *Partition_by_clause_prefix_no_hintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPartition_by_clause_prefix_no_hint(s)
	}
}

func (s *Partition_by_clause_prefix_no_hintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPartition_by_clause_prefix_no_hint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Partition_by_clause_prefix_no_hint() (localctx IPartition_by_clause_prefix_no_hintContext) {
	localctx = NewPartition_by_clause_prefix_no_hintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 264, GoogleSQLParserRULE_partition_by_clause_prefix_no_hint)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1972)
		p.Match(GoogleSQLParserPARTITION_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1973)
		p.Match(GoogleSQLParserBY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1974)
		p.expression(0)
	}
	p.SetState(1979)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(1975)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1976)
			p.expression(0)
		}

		p.SetState(1981)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMatch_recognize_clauseContext is an interface to support dynamic dispatch.
type IMatch_recognize_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MATCH_RECOGNIZE_SYMBOL() antlr.TerminalNode
	AllLR_BRACKET_SYMBOL() []antlr.TerminalNode
	LR_BRACKET_SYMBOL(i int) antlr.TerminalNode
	Order_by_clause() IOrder_by_clauseContext
	MEASURES_SYMBOL() antlr.TerminalNode
	Select_list_prefix_with_as_aliases() ISelect_list_prefix_with_as_aliasesContext
	PATTERN_SYMBOL() antlr.TerminalNode
	Row_pattern_expr() IRow_pattern_exprContext
	AllRR_BRACKET_SYMBOL() []antlr.TerminalNode
	RR_BRACKET_SYMBOL(i int) antlr.TerminalNode
	DEFINE_SYMBOL() antlr.TerminalNode
	With_expression_variable_prefix() IWith_expression_variable_prefixContext
	Partition_by_clause_prefix() IPartition_by_clause_prefixContext
	As_alias() IAs_aliasContext

	// IsMatch_recognize_clauseContext differentiates from other interfaces.
	IsMatch_recognize_clauseContext()
}

type Match_recognize_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatch_recognize_clauseContext() *Match_recognize_clauseContext {
	var p = new(Match_recognize_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_match_recognize_clause
	return p
}

func InitEmptyMatch_recognize_clauseContext(p *Match_recognize_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_match_recognize_clause
}

func (*Match_recognize_clauseContext) IsMatch_recognize_clauseContext() {}

func NewMatch_recognize_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Match_recognize_clauseContext {
	var p = new(Match_recognize_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_match_recognize_clause

	return p
}

func (s *Match_recognize_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Match_recognize_clauseContext) MATCH_RECOGNIZE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMATCH_RECOGNIZE_SYMBOL, 0)
}

func (s *Match_recognize_clauseContext) AllLR_BRACKET_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserLR_BRACKET_SYMBOL)
}

func (s *Match_recognize_clauseContext) LR_BRACKET_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, i)
}

func (s *Match_recognize_clauseContext) Order_by_clause() IOrder_by_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrder_by_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrder_by_clauseContext)
}

func (s *Match_recognize_clauseContext) MEASURES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMEASURES_SYMBOL, 0)
}

func (s *Match_recognize_clauseContext) Select_list_prefix_with_as_aliases() ISelect_list_prefix_with_as_aliasesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_list_prefix_with_as_aliasesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_list_prefix_with_as_aliasesContext)
}

func (s *Match_recognize_clauseContext) PATTERN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPATTERN_SYMBOL, 0)
}

func (s *Match_recognize_clauseContext) Row_pattern_expr() IRow_pattern_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRow_pattern_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRow_pattern_exprContext)
}

func (s *Match_recognize_clauseContext) AllRR_BRACKET_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserRR_BRACKET_SYMBOL)
}

func (s *Match_recognize_clauseContext) RR_BRACKET_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, i)
}

func (s *Match_recognize_clauseContext) DEFINE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDEFINE_SYMBOL, 0)
}

func (s *Match_recognize_clauseContext) With_expression_variable_prefix() IWith_expression_variable_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_expression_variable_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_expression_variable_prefixContext)
}

func (s *Match_recognize_clauseContext) Partition_by_clause_prefix() IPartition_by_clause_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartition_by_clause_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartition_by_clause_prefixContext)
}

func (s *Match_recognize_clauseContext) As_alias() IAs_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_aliasContext)
}

func (s *Match_recognize_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Match_recognize_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Match_recognize_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterMatch_recognize_clause(s)
	}
}

func (s *Match_recognize_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitMatch_recognize_clause(s)
	}
}

func (s *Match_recognize_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitMatch_recognize_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Match_recognize_clause() (localctx IMatch_recognize_clauseContext) {
	localctx = NewMatch_recognize_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 266, GoogleSQLParserRULE_match_recognize_clause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1982)
		p.Match(GoogleSQLParserMATCH_RECOGNIZE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1983)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1985)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserPARTITION_SYMBOL {
		{
			p.SetState(1984)
			p.Partition_by_clause_prefix()
		}

	}
	{
		p.SetState(1987)
		p.Order_by_clause()
	}
	{
		p.SetState(1988)
		p.Match(GoogleSQLParserMEASURES_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1989)
		p.Select_list_prefix_with_as_aliases()
	}
	{
		p.SetState(1990)
		p.Match(GoogleSQLParserPATTERN_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1991)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1992)
		p.row_pattern_expr(0)
	}
	{
		p.SetState(1993)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1994)
		p.Match(GoogleSQLParserDEFINE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1995)
		p.With_expression_variable_prefix()
	}
	{
		p.SetState(1996)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1998)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 197, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1997)
			p.As_alias()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRow_pattern_exprContext is an interface to support dynamic dispatch.
type IRow_pattern_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Row_pattern_concatenation() IRow_pattern_concatenationContext
	Row_pattern_expr() IRow_pattern_exprContext
	STROKE_SYMBOL() antlr.TerminalNode

	// IsRow_pattern_exprContext differentiates from other interfaces.
	IsRow_pattern_exprContext()
}

type Row_pattern_exprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRow_pattern_exprContext() *Row_pattern_exprContext {
	var p = new(Row_pattern_exprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_row_pattern_expr
	return p
}

func InitEmptyRow_pattern_exprContext(p *Row_pattern_exprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_row_pattern_expr
}

func (*Row_pattern_exprContext) IsRow_pattern_exprContext() {}

func NewRow_pattern_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Row_pattern_exprContext {
	var p = new(Row_pattern_exprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_row_pattern_expr

	return p
}

func (s *Row_pattern_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Row_pattern_exprContext) Row_pattern_concatenation() IRow_pattern_concatenationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRow_pattern_concatenationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRow_pattern_concatenationContext)
}

func (s *Row_pattern_exprContext) Row_pattern_expr() IRow_pattern_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRow_pattern_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRow_pattern_exprContext)
}

func (s *Row_pattern_exprContext) STROKE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTROKE_SYMBOL, 0)
}

func (s *Row_pattern_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Row_pattern_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Row_pattern_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRow_pattern_expr(s)
	}
}

func (s *Row_pattern_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRow_pattern_expr(s)
	}
}

func (s *Row_pattern_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRow_pattern_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Row_pattern_expr() (localctx IRow_pattern_exprContext) {
	return p.row_pattern_expr(0)
}

func (p *GoogleSQLParser) row_pattern_expr(_p int) (localctx IRow_pattern_exprContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewRow_pattern_exprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IRow_pattern_exprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 268
	p.EnterRecursionRule(localctx, 268, GoogleSQLParserRULE_row_pattern_expr, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2001)
		p.row_pattern_concatenation(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2008)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 198, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewRow_pattern_exprContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_row_pattern_expr)
			p.SetState(2003)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				goto errorExit
			}
			{
				p.SetState(2004)
				p.Match(GoogleSQLParserSTROKE_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(2005)
				p.row_pattern_concatenation(0)
			}

		}
		p.SetState(2010)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 198, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRow_pattern_concatenationContext is an interface to support dynamic dispatch.
type IRow_pattern_concatenationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Row_pattern_factor() IRow_pattern_factorContext
	Row_pattern_concatenation() IRow_pattern_concatenationContext

	// IsRow_pattern_concatenationContext differentiates from other interfaces.
	IsRow_pattern_concatenationContext()
}

type Row_pattern_concatenationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRow_pattern_concatenationContext() *Row_pattern_concatenationContext {
	var p = new(Row_pattern_concatenationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_row_pattern_concatenation
	return p
}

func InitEmptyRow_pattern_concatenationContext(p *Row_pattern_concatenationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_row_pattern_concatenation
}

func (*Row_pattern_concatenationContext) IsRow_pattern_concatenationContext() {}

func NewRow_pattern_concatenationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Row_pattern_concatenationContext {
	var p = new(Row_pattern_concatenationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_row_pattern_concatenation

	return p
}

func (s *Row_pattern_concatenationContext) GetParser() antlr.Parser { return s.parser }

func (s *Row_pattern_concatenationContext) Row_pattern_factor() IRow_pattern_factorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRow_pattern_factorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRow_pattern_factorContext)
}

func (s *Row_pattern_concatenationContext) Row_pattern_concatenation() IRow_pattern_concatenationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRow_pattern_concatenationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRow_pattern_concatenationContext)
}

func (s *Row_pattern_concatenationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Row_pattern_concatenationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Row_pattern_concatenationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRow_pattern_concatenation(s)
	}
}

func (s *Row_pattern_concatenationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRow_pattern_concatenation(s)
	}
}

func (s *Row_pattern_concatenationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRow_pattern_concatenation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Row_pattern_concatenation() (localctx IRow_pattern_concatenationContext) {
	return p.row_pattern_concatenation(0)
}

func (p *GoogleSQLParser) row_pattern_concatenation(_p int) (localctx IRow_pattern_concatenationContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewRow_pattern_concatenationContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IRow_pattern_concatenationContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 270
	p.EnterRecursionRule(localctx, 270, GoogleSQLParserRULE_row_pattern_concatenation, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2012)
		p.Row_pattern_factor()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2018)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 199, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewRow_pattern_concatenationContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_row_pattern_concatenation)
			p.SetState(2014)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				goto errorExit
			}
			{
				p.SetState(2015)
				p.Row_pattern_factor()
			}

		}
		p.SetState(2020)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 199, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRow_pattern_factorContext is an interface to support dynamic dispatch.
type IRow_pattern_factorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Row_pattern_expr() IRow_pattern_exprContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsRow_pattern_factorContext differentiates from other interfaces.
	IsRow_pattern_factorContext()
}

type Row_pattern_factorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRow_pattern_factorContext() *Row_pattern_factorContext {
	var p = new(Row_pattern_factorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_row_pattern_factor
	return p
}

func InitEmptyRow_pattern_factorContext(p *Row_pattern_factorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_row_pattern_factor
}

func (*Row_pattern_factorContext) IsRow_pattern_factorContext() {}

func NewRow_pattern_factorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Row_pattern_factorContext {
	var p = new(Row_pattern_factorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_row_pattern_factor

	return p
}

func (s *Row_pattern_factorContext) GetParser() antlr.Parser { return s.parser }

func (s *Row_pattern_factorContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Row_pattern_factorContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Row_pattern_factorContext) Row_pattern_expr() IRow_pattern_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRow_pattern_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRow_pattern_exprContext)
}

func (s *Row_pattern_factorContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Row_pattern_factorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Row_pattern_factorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Row_pattern_factorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRow_pattern_factor(s)
	}
}

func (s *Row_pattern_factorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRow_pattern_factor(s)
	}
}

func (s *Row_pattern_factorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRow_pattern_factor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Row_pattern_factor() (localctx IRow_pattern_factorContext) {
	localctx = NewRow_pattern_factorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 272, GoogleSQLParserRULE_row_pattern_factor)
	p.SetState(2026)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2021)
			p.Identifier()
		}

	case GoogleSQLParserLR_BRACKET_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2022)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2023)
			p.row_pattern_expr(0)
		}
		{
			p.SetState(2024)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelect_list_prefix_with_as_aliasesContext is an interface to support dynamic dispatch.
type ISelect_list_prefix_with_as_aliasesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllSelect_column_expr_with_as_alias() []ISelect_column_expr_with_as_aliasContext
	Select_column_expr_with_as_alias(i int) ISelect_column_expr_with_as_aliasContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsSelect_list_prefix_with_as_aliasesContext differentiates from other interfaces.
	IsSelect_list_prefix_with_as_aliasesContext()
}

type Select_list_prefix_with_as_aliasesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_list_prefix_with_as_aliasesContext() *Select_list_prefix_with_as_aliasesContext {
	var p = new(Select_list_prefix_with_as_aliasesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_list_prefix_with_as_aliases
	return p
}

func InitEmptySelect_list_prefix_with_as_aliasesContext(p *Select_list_prefix_with_as_aliasesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_list_prefix_with_as_aliases
}

func (*Select_list_prefix_with_as_aliasesContext) IsSelect_list_prefix_with_as_aliasesContext() {}

func NewSelect_list_prefix_with_as_aliasesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_list_prefix_with_as_aliasesContext {
	var p = new(Select_list_prefix_with_as_aliasesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_select_list_prefix_with_as_aliases

	return p
}

func (s *Select_list_prefix_with_as_aliasesContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_list_prefix_with_as_aliasesContext) AllSelect_column_expr_with_as_alias() []ISelect_column_expr_with_as_aliasContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISelect_column_expr_with_as_aliasContext); ok {
			len++
		}
	}

	tst := make([]ISelect_column_expr_with_as_aliasContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISelect_column_expr_with_as_aliasContext); ok {
			tst[i] = t.(ISelect_column_expr_with_as_aliasContext)
			i++
		}
	}

	return tst
}

func (s *Select_list_prefix_with_as_aliasesContext) Select_column_expr_with_as_alias(i int) ISelect_column_expr_with_as_aliasContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_column_expr_with_as_aliasContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_column_expr_with_as_aliasContext)
}

func (s *Select_list_prefix_with_as_aliasesContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Select_list_prefix_with_as_aliasesContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Select_list_prefix_with_as_aliasesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_list_prefix_with_as_aliasesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_list_prefix_with_as_aliasesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSelect_list_prefix_with_as_aliases(s)
	}
}

func (s *Select_list_prefix_with_as_aliasesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSelect_list_prefix_with_as_aliases(s)
	}
}

func (s *Select_list_prefix_with_as_aliasesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSelect_list_prefix_with_as_aliases(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Select_list_prefix_with_as_aliases() (localctx ISelect_list_prefix_with_as_aliasesContext) {
	localctx = NewSelect_list_prefix_with_as_aliasesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 274, GoogleSQLParserRULE_select_list_prefix_with_as_aliases)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2028)
		p.Select_column_expr_with_as_alias()
	}
	p.SetState(2033)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(2029)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2030)
			p.Select_column_expr_with_as_alias()
		}

		p.SetState(2035)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelect_column_expr_with_as_aliasContext is an interface to support dynamic dispatch.
type ISelect_column_expr_with_as_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	AS_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext

	// IsSelect_column_expr_with_as_aliasContext differentiates from other interfaces.
	IsSelect_column_expr_with_as_aliasContext()
}

type Select_column_expr_with_as_aliasContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_column_expr_with_as_aliasContext() *Select_column_expr_with_as_aliasContext {
	var p = new(Select_column_expr_with_as_aliasContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_column_expr_with_as_alias
	return p
}

func InitEmptySelect_column_expr_with_as_aliasContext(p *Select_column_expr_with_as_aliasContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_column_expr_with_as_alias
}

func (*Select_column_expr_with_as_aliasContext) IsSelect_column_expr_with_as_aliasContext() {}

func NewSelect_column_expr_with_as_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_column_expr_with_as_aliasContext {
	var p = new(Select_column_expr_with_as_aliasContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_select_column_expr_with_as_alias

	return p
}

func (s *Select_column_expr_with_as_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_column_expr_with_as_aliasContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Select_column_expr_with_as_aliasContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Select_column_expr_with_as_aliasContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Select_column_expr_with_as_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_column_expr_with_as_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_column_expr_with_as_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSelect_column_expr_with_as_alias(s)
	}
}

func (s *Select_column_expr_with_as_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSelect_column_expr_with_as_alias(s)
	}
}

func (s *Select_column_expr_with_as_aliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSelect_column_expr_with_as_alias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Select_column_expr_with_as_alias() (localctx ISelect_column_expr_with_as_aliasContext) {
	localctx = NewSelect_column_expr_with_as_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, GoogleSQLParserRULE_select_column_expr_with_as_alias)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2036)
		p.expression(0)
	}
	{
		p.SetState(2037)
		p.Match(GoogleSQLParserAS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2038)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_subqueryContext is an interface to support dynamic dispatch.
type ITable_subqueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Parenthesized_query() IParenthesized_queryContext
	Opt_pivot_or_unpivot_clause_and_alias() IOpt_pivot_or_unpivot_clause_and_aliasContext

	// IsTable_subqueryContext differentiates from other interfaces.
	IsTable_subqueryContext()
}

type Table_subqueryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_subqueryContext() *Table_subqueryContext {
	var p = new(Table_subqueryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_subquery
	return p
}

func InitEmptyTable_subqueryContext(p *Table_subqueryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_subquery
}

func (*Table_subqueryContext) IsTable_subqueryContext() {}

func NewTable_subqueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_subqueryContext {
	var p = new(Table_subqueryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_table_subquery

	return p
}

func (s *Table_subqueryContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_subqueryContext) Parenthesized_query() IParenthesized_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesized_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesized_queryContext)
}

func (s *Table_subqueryContext) Opt_pivot_or_unpivot_clause_and_alias() IOpt_pivot_or_unpivot_clause_and_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_pivot_or_unpivot_clause_and_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_pivot_or_unpivot_clause_and_aliasContext)
}

func (s *Table_subqueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_subqueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_subqueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTable_subquery(s)
	}
}

func (s *Table_subqueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTable_subquery(s)
	}
}

func (s *Table_subqueryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTable_subquery(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Table_subquery() (localctx ITable_subqueryContext) {
	localctx = NewTable_subqueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 278, GoogleSQLParserRULE_table_subquery)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2040)
		p.Parenthesized_query()
	}
	p.SetState(2042)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 202, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2041)
			p.Opt_pivot_or_unpivot_clause_and_alias()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJoinContext is an interface to support dynamic dispatch.
type IJoinContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Table_primary() ITable_primaryContext
	AllJoin_item() []IJoin_itemContext
	Join_item(i int) IJoin_itemContext

	// IsJoinContext differentiates from other interfaces.
	IsJoinContext()
}

type JoinContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoinContext() *JoinContext {
	var p = new(JoinContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_join
	return p
}

func InitEmptyJoinContext(p *JoinContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_join
}

func (*JoinContext) IsJoinContext() {}

func NewJoinContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JoinContext {
	var p = new(JoinContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_join

	return p
}

func (s *JoinContext) GetParser() antlr.Parser { return s.parser }

func (s *JoinContext) Table_primary() ITable_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_primaryContext)
}

func (s *JoinContext) AllJoin_item() []IJoin_itemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IJoin_itemContext); ok {
			len++
		}
	}

	tst := make([]IJoin_itemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IJoin_itemContext); ok {
			tst[i] = t.(IJoin_itemContext)
			i++
		}
	}

	return tst
}

func (s *JoinContext) Join_item(i int) IJoin_itemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoin_itemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoin_itemContext)
}

func (s *JoinContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JoinContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterJoin(s)
	}
}

func (s *JoinContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitJoin(s)
	}
}

func (s *JoinContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitJoin(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Join() (localctx IJoinContext) {
	localctx = NewJoinContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 280, GoogleSQLParserRULE_join)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2044)
		p.table_primary(0)
	}
	p.SetState(2048)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64((_la-59)) & ^0x3f) == 0 && ((int64(1)<<(_la-59))&1073825795) != 0) || ((int64((_la-308)) & ^0x3f) == 0 && ((int64(1)<<(_la-308))&266241) != 0) {
		{
			p.SetState(2045)
			p.Join_item()
		}

		p.SetState(2050)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJoin_itemContext is an interface to support dynamic dispatch.
type IJoin_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	JOIN_SYMBOL() antlr.TerminalNode
	Table_primary() ITable_primaryContext
	Opt_natural() IOpt_naturalContext
	Join_type() IJoin_typeContext
	Join_hint() IJoin_hintContext
	Hint() IHintContext
	On_or_using_clause_list() IOn_or_using_clause_listContext

	// IsJoin_itemContext differentiates from other interfaces.
	IsJoin_itemContext()
}

type Join_itemContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoin_itemContext() *Join_itemContext {
	var p = new(Join_itemContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_join_item
	return p
}

func InitEmptyJoin_itemContext(p *Join_itemContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_join_item
}

func (*Join_itemContext) IsJoin_itemContext() {}

func NewJoin_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Join_itemContext {
	var p = new(Join_itemContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_join_item

	return p
}

func (s *Join_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Join_itemContext) JOIN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserJOIN_SYMBOL, 0)
}

func (s *Join_itemContext) Table_primary() ITable_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_primaryContext)
}

func (s *Join_itemContext) Opt_natural() IOpt_naturalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_naturalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_naturalContext)
}

func (s *Join_itemContext) Join_type() IJoin_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoin_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoin_typeContext)
}

func (s *Join_itemContext) Join_hint() IJoin_hintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoin_hintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoin_hintContext)
}

func (s *Join_itemContext) Hint() IHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHintContext)
}

func (s *Join_itemContext) On_or_using_clause_list() IOn_or_using_clause_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOn_or_using_clause_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOn_or_using_clause_listContext)
}

func (s *Join_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Join_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Join_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterJoin_item(s)
	}
}

func (s *Join_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitJoin_item(s)
	}
}

func (s *Join_itemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitJoin_item(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Join_item() (localctx IJoin_itemContext) {
	localctx = NewJoin_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 282, GoogleSQLParserRULE_join_item)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2052)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserNATURAL_SYMBOL {
		{
			p.SetState(2051)
			p.Opt_natural()
		}

	}
	p.SetState(2055)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-59)) & ^0x3f) == 0 && ((int64(1)<<(_la-59))&1073825793) != 0 {
		{
			p.SetState(2054)
			p.Join_type()
		}

	}
	p.SetState(2058)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserHASH_SYMBOL || _la == GoogleSQLParserLOOKUP_SYMBOL {
		{
			p.SetState(2057)
			p.Join_hint()
		}

	}
	{
		p.SetState(2060)
		p.Match(GoogleSQLParserJOIN_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2062)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAT_SYMBOL {
		{
			p.SetState(2061)
			p.Hint()
		}

	}
	{
		p.SetState(2064)
		p.table_primary(0)
	}
	p.SetState(2066)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserON_SYMBOL || _la == GoogleSQLParserUSING_SYMBOL {
		{
			p.SetState(2065)
			p.On_or_using_clause_list()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOn_or_using_clause_listContext is an interface to support dynamic dispatch.
type IOn_or_using_clause_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllOn_or_using_clause() []IOn_or_using_clauseContext
	On_or_using_clause(i int) IOn_or_using_clauseContext

	// IsOn_or_using_clause_listContext differentiates from other interfaces.
	IsOn_or_using_clause_listContext()
}

type On_or_using_clause_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOn_or_using_clause_listContext() *On_or_using_clause_listContext {
	var p = new(On_or_using_clause_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_on_or_using_clause_list
	return p
}

func InitEmptyOn_or_using_clause_listContext(p *On_or_using_clause_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_on_or_using_clause_list
}

func (*On_or_using_clause_listContext) IsOn_or_using_clause_listContext() {}

func NewOn_or_using_clause_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *On_or_using_clause_listContext {
	var p = new(On_or_using_clause_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_on_or_using_clause_list

	return p
}

func (s *On_or_using_clause_listContext) GetParser() antlr.Parser { return s.parser }

func (s *On_or_using_clause_listContext) AllOn_or_using_clause() []IOn_or_using_clauseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOn_or_using_clauseContext); ok {
			len++
		}
	}

	tst := make([]IOn_or_using_clauseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOn_or_using_clauseContext); ok {
			tst[i] = t.(IOn_or_using_clauseContext)
			i++
		}
	}

	return tst
}

func (s *On_or_using_clause_listContext) On_or_using_clause(i int) IOn_or_using_clauseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOn_or_using_clauseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOn_or_using_clauseContext)
}

func (s *On_or_using_clause_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *On_or_using_clause_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *On_or_using_clause_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOn_or_using_clause_list(s)
	}
}

func (s *On_or_using_clause_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOn_or_using_clause_list(s)
	}
}

func (s *On_or_using_clause_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOn_or_using_clause_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) On_or_using_clause_list() (localctx IOn_or_using_clause_listContext) {
	localctx = NewOn_or_using_clause_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 284, GoogleSQLParserRULE_on_or_using_clause_list)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2069)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(2068)
				p.On_or_using_clause()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(2071)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 209, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOn_or_using_clauseContext is an interface to support dynamic dispatch.
type IOn_or_using_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	On_clause() IOn_clauseContext
	Using_clause() IUsing_clauseContext

	// IsOn_or_using_clauseContext differentiates from other interfaces.
	IsOn_or_using_clauseContext()
}

type On_or_using_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOn_or_using_clauseContext() *On_or_using_clauseContext {
	var p = new(On_or_using_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_on_or_using_clause
	return p
}

func InitEmptyOn_or_using_clauseContext(p *On_or_using_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_on_or_using_clause
}

func (*On_or_using_clauseContext) IsOn_or_using_clauseContext() {}

func NewOn_or_using_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *On_or_using_clauseContext {
	var p = new(On_or_using_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_on_or_using_clause

	return p
}

func (s *On_or_using_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *On_or_using_clauseContext) On_clause() IOn_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOn_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOn_clauseContext)
}

func (s *On_or_using_clauseContext) Using_clause() IUsing_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUsing_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUsing_clauseContext)
}

func (s *On_or_using_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *On_or_using_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *On_or_using_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOn_or_using_clause(s)
	}
}

func (s *On_or_using_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOn_or_using_clause(s)
	}
}

func (s *On_or_using_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOn_or_using_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) On_or_using_clause() (localctx IOn_or_using_clauseContext) {
	localctx = NewOn_or_using_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 286, GoogleSQLParserRULE_on_or_using_clause)
	p.SetState(2075)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserON_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2073)
			p.On_clause()
		}

	case GoogleSQLParserUSING_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2074)
			p.Using_clause()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUsing_clauseContext is an interface to support dynamic dispatch.
type IUsing_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	USING_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	AllDOT_SYMBOL() []antlr.TerminalNode
	DOT_SYMBOL(i int) antlr.TerminalNode

	// IsUsing_clauseContext differentiates from other interfaces.
	IsUsing_clauseContext()
}

type Using_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUsing_clauseContext() *Using_clauseContext {
	var p = new(Using_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_using_clause
	return p
}

func InitEmptyUsing_clauseContext(p *Using_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_using_clause
}

func (*Using_clauseContext) IsUsing_clauseContext() {}

func NewUsing_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Using_clauseContext {
	var p = new(Using_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_using_clause

	return p
}

func (s *Using_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Using_clauseContext) USING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUSING_SYMBOL, 0)
}

func (s *Using_clauseContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Using_clauseContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Using_clauseContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Using_clauseContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Using_clauseContext) AllDOT_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserDOT_SYMBOL)
}

func (s *Using_clauseContext) DOT_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDOT_SYMBOL, i)
}

func (s *Using_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Using_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Using_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUsing_clause(s)
	}
}

func (s *Using_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUsing_clause(s)
	}
}

func (s *Using_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUsing_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Using_clause() (localctx IUsing_clauseContext) {
	localctx = NewUsing_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 288, GoogleSQLParserRULE_using_clause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2077)
		p.Match(GoogleSQLParserUSING_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2078)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2079)
		p.Identifier()
	}
	p.SetState(2084)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserDOT_SYMBOL {
		{
			p.SetState(2080)
			p.Match(GoogleSQLParserDOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2081)
			p.Identifier()
		}

		p.SetState(2086)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2087)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJoin_hintContext is an interface to support dynamic dispatch.
type IJoin_hintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	HASH_SYMBOL() antlr.TerminalNode
	LOOKUP_SYMBOL() antlr.TerminalNode

	// IsJoin_hintContext differentiates from other interfaces.
	IsJoin_hintContext()
}

type Join_hintContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoin_hintContext() *Join_hintContext {
	var p = new(Join_hintContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_join_hint
	return p
}

func InitEmptyJoin_hintContext(p *Join_hintContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_join_hint
}

func (*Join_hintContext) IsJoin_hintContext() {}

func NewJoin_hintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Join_hintContext {
	var p = new(Join_hintContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_join_hint

	return p
}

func (s *Join_hintContext) GetParser() antlr.Parser { return s.parser }

func (s *Join_hintContext) HASH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserHASH_SYMBOL, 0)
}

func (s *Join_hintContext) LOOKUP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLOOKUP_SYMBOL, 0)
}

func (s *Join_hintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Join_hintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Join_hintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterJoin_hint(s)
	}
}

func (s *Join_hintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitJoin_hint(s)
	}
}

func (s *Join_hintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitJoin_hint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Join_hint() (localctx IJoin_hintContext) {
	localctx = NewJoin_hintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 290, GoogleSQLParserRULE_join_hint)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2089)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserHASH_SYMBOL || _la == GoogleSQLParserLOOKUP_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_path_expressionContext is an interface to support dynamic dispatch.
type ITable_path_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Table_path_expression_base() ITable_path_expression_baseContext
	Hint() IHintContext
	Opt_pivot_or_unpivot_clause_and_alias() IOpt_pivot_or_unpivot_clause_and_aliasContext
	Opt_with_offset_and_alias() IOpt_with_offset_and_aliasContext
	Opt_at_system_time() IOpt_at_system_timeContext

	// IsTable_path_expressionContext differentiates from other interfaces.
	IsTable_path_expressionContext()
}

type Table_path_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_path_expressionContext() *Table_path_expressionContext {
	var p = new(Table_path_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_path_expression
	return p
}

func InitEmptyTable_path_expressionContext(p *Table_path_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_path_expression
}

func (*Table_path_expressionContext) IsTable_path_expressionContext() {}

func NewTable_path_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_path_expressionContext {
	var p = new(Table_path_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_table_path_expression

	return p
}

func (s *Table_path_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_path_expressionContext) Table_path_expression_base() ITable_path_expression_baseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_path_expression_baseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_path_expression_baseContext)
}

func (s *Table_path_expressionContext) Hint() IHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHintContext)
}

func (s *Table_path_expressionContext) Opt_pivot_or_unpivot_clause_and_alias() IOpt_pivot_or_unpivot_clause_and_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_pivot_or_unpivot_clause_and_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_pivot_or_unpivot_clause_and_aliasContext)
}

func (s *Table_path_expressionContext) Opt_with_offset_and_alias() IOpt_with_offset_and_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_with_offset_and_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_with_offset_and_aliasContext)
}

func (s *Table_path_expressionContext) Opt_at_system_time() IOpt_at_system_timeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_at_system_timeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_at_system_timeContext)
}

func (s *Table_path_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_path_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_path_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTable_path_expression(s)
	}
}

func (s *Table_path_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTable_path_expression(s)
	}
}

func (s *Table_path_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTable_path_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Table_path_expression() (localctx ITable_path_expressionContext) {
	localctx = NewTable_path_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 292, GoogleSQLParserRULE_table_path_expression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2091)
		p.Table_path_expression_base()
	}
	p.SetState(2093)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 212, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2092)
			p.Hint()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(2096)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 213, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2095)
			p.Opt_pivot_or_unpivot_clause_and_alias()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(2099)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 214, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2098)
			p.Opt_with_offset_and_alias()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(2102)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 215, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2101)
			p.Opt_at_system_time()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_at_system_timeContext is an interface to support dynamic dispatch.
type IOpt_at_system_timeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FOR_SYMBOL() antlr.TerminalNode
	SYSTEM_SYMBOL() antlr.TerminalNode
	TIME_SYMBOL() antlr.TerminalNode
	AS_SYMBOL() antlr.TerminalNode
	OF_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	SYSTEM_TIME_SYMBOL() antlr.TerminalNode

	// IsOpt_at_system_timeContext differentiates from other interfaces.
	IsOpt_at_system_timeContext()
}

type Opt_at_system_timeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_at_system_timeContext() *Opt_at_system_timeContext {
	var p = new(Opt_at_system_timeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_at_system_time
	return p
}

func InitEmptyOpt_at_system_timeContext(p *Opt_at_system_timeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_at_system_time
}

func (*Opt_at_system_timeContext) IsOpt_at_system_timeContext() {}

func NewOpt_at_system_timeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_at_system_timeContext {
	var p = new(Opt_at_system_timeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_at_system_time

	return p
}

func (s *Opt_at_system_timeContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_at_system_timeContext) FOR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFOR_SYMBOL, 0)
}

func (s *Opt_at_system_timeContext) SYSTEM_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSYSTEM_SYMBOL, 0)
}

func (s *Opt_at_system_timeContext) TIME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTIME_SYMBOL, 0)
}

func (s *Opt_at_system_timeContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Opt_at_system_timeContext) OF_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOF_SYMBOL, 0)
}

func (s *Opt_at_system_timeContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Opt_at_system_timeContext) SYSTEM_TIME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSYSTEM_TIME_SYMBOL, 0)
}

func (s *Opt_at_system_timeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_at_system_timeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_at_system_timeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_at_system_time(s)
	}
}

func (s *Opt_at_system_timeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_at_system_time(s)
	}
}

func (s *Opt_at_system_timeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_at_system_time(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_at_system_time() (localctx IOpt_at_system_timeContext) {
	localctx = NewOpt_at_system_timeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 294, GoogleSQLParserRULE_opt_at_system_time)
	p.SetState(2115)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 216, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2104)
			p.Match(GoogleSQLParserFOR_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2105)
			p.Match(GoogleSQLParserSYSTEM_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2106)
			p.Match(GoogleSQLParserTIME_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2107)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2108)
			p.Match(GoogleSQLParserOF_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2109)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2110)
			p.Match(GoogleSQLParserFOR_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2111)
			p.Match(GoogleSQLParserSYSTEM_TIME_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2112)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2113)
			p.Match(GoogleSQLParserOF_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2114)
			p.expression(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_with_offset_and_aliasContext is an interface to support dynamic dispatch.
type IOpt_with_offset_and_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WITH_SYMBOL() antlr.TerminalNode
	OFFSET_SYMBOL() antlr.TerminalNode
	As_alias() IAs_aliasContext

	// IsOpt_with_offset_and_aliasContext differentiates from other interfaces.
	IsOpt_with_offset_and_aliasContext()
}

type Opt_with_offset_and_aliasContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_with_offset_and_aliasContext() *Opt_with_offset_and_aliasContext {
	var p = new(Opt_with_offset_and_aliasContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_with_offset_and_alias
	return p
}

func InitEmptyOpt_with_offset_and_aliasContext(p *Opt_with_offset_and_aliasContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_with_offset_and_alias
}

func (*Opt_with_offset_and_aliasContext) IsOpt_with_offset_and_aliasContext() {}

func NewOpt_with_offset_and_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_with_offset_and_aliasContext {
	var p = new(Opt_with_offset_and_aliasContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_with_offset_and_alias

	return p
}

func (s *Opt_with_offset_and_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_with_offset_and_aliasContext) WITH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWITH_SYMBOL, 0)
}

func (s *Opt_with_offset_and_aliasContext) OFFSET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOFFSET_SYMBOL, 0)
}

func (s *Opt_with_offset_and_aliasContext) As_alias() IAs_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_aliasContext)
}

func (s *Opt_with_offset_and_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_with_offset_and_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_with_offset_and_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_with_offset_and_alias(s)
	}
}

func (s *Opt_with_offset_and_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_with_offset_and_alias(s)
	}
}

func (s *Opt_with_offset_and_aliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_with_offset_and_alias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_with_offset_and_alias() (localctx IOpt_with_offset_and_aliasContext) {
	localctx = NewOpt_with_offset_and_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 296, GoogleSQLParserRULE_opt_with_offset_and_alias)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2117)
		p.Match(GoogleSQLParserWITH_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2118)
		p.Match(GoogleSQLParserOFFSET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2120)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 217, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2119)
			p.As_alias()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_pivot_or_unpivot_clause_and_aliasContext is an interface to support dynamic dispatch.
type IOpt_pivot_or_unpivot_clause_and_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AS_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext
	Pivot_clause() IPivot_clauseContext
	As_alias() IAs_aliasContext
	Unpivot_clause() IUnpivot_clauseContext
	Qualify_clause_nonreserved() IQualify_clause_nonreservedContext

	// IsOpt_pivot_or_unpivot_clause_and_aliasContext differentiates from other interfaces.
	IsOpt_pivot_or_unpivot_clause_and_aliasContext()
}

type Opt_pivot_or_unpivot_clause_and_aliasContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_pivot_or_unpivot_clause_and_aliasContext() *Opt_pivot_or_unpivot_clause_and_aliasContext {
	var p = new(Opt_pivot_or_unpivot_clause_and_aliasContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_pivot_or_unpivot_clause_and_alias
	return p
}

func InitEmptyOpt_pivot_or_unpivot_clause_and_aliasContext(p *Opt_pivot_or_unpivot_clause_and_aliasContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_pivot_or_unpivot_clause_and_alias
}

func (*Opt_pivot_or_unpivot_clause_and_aliasContext) IsOpt_pivot_or_unpivot_clause_and_aliasContext() {
}

func NewOpt_pivot_or_unpivot_clause_and_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_pivot_or_unpivot_clause_and_aliasContext {
	var p = new(Opt_pivot_or_unpivot_clause_and_aliasContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_pivot_or_unpivot_clause_and_alias

	return p
}

func (s *Opt_pivot_or_unpivot_clause_and_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_pivot_or_unpivot_clause_and_aliasContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Opt_pivot_or_unpivot_clause_and_aliasContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Opt_pivot_or_unpivot_clause_and_aliasContext) Pivot_clause() IPivot_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPivot_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPivot_clauseContext)
}

func (s *Opt_pivot_or_unpivot_clause_and_aliasContext) As_alias() IAs_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_aliasContext)
}

func (s *Opt_pivot_or_unpivot_clause_and_aliasContext) Unpivot_clause() IUnpivot_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnpivot_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnpivot_clauseContext)
}

func (s *Opt_pivot_or_unpivot_clause_and_aliasContext) Qualify_clause_nonreserved() IQualify_clause_nonreservedContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualify_clause_nonreservedContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualify_clause_nonreservedContext)
}

func (s *Opt_pivot_or_unpivot_clause_and_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_pivot_or_unpivot_clause_and_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_pivot_or_unpivot_clause_and_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_pivot_or_unpivot_clause_and_alias(s)
	}
}

func (s *Opt_pivot_or_unpivot_clause_and_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_pivot_or_unpivot_clause_and_alias(s)
	}
}

func (s *Opt_pivot_or_unpivot_clause_and_aliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_pivot_or_unpivot_clause_and_alias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_pivot_or_unpivot_clause_and_alias() (localctx IOpt_pivot_or_unpivot_clause_and_aliasContext) {
	localctx = NewOpt_pivot_or_unpivot_clause_and_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 298, GoogleSQLParserRULE_opt_pivot_or_unpivot_clause_and_alias)
	p.SetState(2167)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 224, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2122)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2123)
			p.Identifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2124)
			p.Identifier()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2125)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2126)
			p.Identifier()
		}
		{
			p.SetState(2127)
			p.Pivot_clause()
		}
		p.SetState(2129)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 218, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2128)
				p.As_alias()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2131)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2132)
			p.Identifier()
		}
		{
			p.SetState(2133)
			p.Unpivot_clause()
		}
		p.SetState(2135)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 219, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2134)
				p.As_alias()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2137)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2138)
			p.Identifier()
		}
		{
			p.SetState(2139)
			p.Qualify_clause_nonreserved()
		}
		p.NotifyErrorListeners("QUALIFY clause must be used in conjunction with WHERE or GROUP BY or HAVING clause", nil, nil)

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2142)
			p.Identifier()
		}
		{
			p.SetState(2143)
			p.Pivot_clause()
		}
		p.SetState(2145)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 220, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2144)
				p.As_alias()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2147)
			p.Identifier()
		}
		{
			p.SetState(2148)
			p.Unpivot_clause()
		}
		p.SetState(2150)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 221, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2149)
				p.As_alias()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2152)
			p.Identifier()
		}
		{
			p.SetState(2153)
			p.Qualify_clause_nonreserved()
		}
		p.NotifyErrorListeners("QUALIFY clause must be used in conjunction with WHERE or GROUP BY or HAVING clause", nil, nil)

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2156)
			p.Pivot_clause()
		}
		p.SetState(2158)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 222, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2157)
				p.As_alias()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(2160)
			p.Unpivot_clause()
		}
		p.SetState(2162)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 223, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2161)
				p.As_alias()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(2164)
			p.Qualify_clause_nonreserved()
		}
		p.NotifyErrorListeners("QUALIFY clause must be used in conjunction with WHERE or GROUP BY or HAVING clause", nil, nil)

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_path_expression_baseContext is an interface to support dynamic dispatch.
type ITable_path_expression_baseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Unnest_expression() IUnnest_expressionContext
	Maybe_slashed_or_dashed_path_expression() IMaybe_slashed_or_dashed_path_expressionContext
	Path_expression() IPath_expressionContext
	LS_BRACKET_SYMBOL() antlr.TerminalNode
	DOT_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsTable_path_expression_baseContext differentiates from other interfaces.
	IsTable_path_expression_baseContext()
}

type Table_path_expression_baseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_path_expression_baseContext() *Table_path_expression_baseContext {
	var p = new(Table_path_expression_baseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_path_expression_base
	return p
}

func InitEmptyTable_path_expression_baseContext(p *Table_path_expression_baseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_path_expression_base
}

func (*Table_path_expression_baseContext) IsTable_path_expression_baseContext() {}

func NewTable_path_expression_baseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_path_expression_baseContext {
	var p = new(Table_path_expression_baseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_table_path_expression_base

	return p
}

func (s *Table_path_expression_baseContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_path_expression_baseContext) Unnest_expression() IUnnest_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnnest_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnnest_expressionContext)
}

func (s *Table_path_expression_baseContext) Maybe_slashed_or_dashed_path_expression() IMaybe_slashed_or_dashed_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMaybe_slashed_or_dashed_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMaybe_slashed_or_dashed_path_expressionContext)
}

func (s *Table_path_expression_baseContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Table_path_expression_baseContext) LS_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLS_BRACKET_SYMBOL, 0)
}

func (s *Table_path_expression_baseContext) DOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDOT_SYMBOL, 0)
}

func (s *Table_path_expression_baseContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Table_path_expression_baseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_path_expression_baseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_path_expression_baseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTable_path_expression_base(s)
	}
}

func (s *Table_path_expression_baseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTable_path_expression_base(s)
	}
}

func (s *Table_path_expression_baseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTable_path_expression_base(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Table_path_expression_base() (localctx ITable_path_expression_baseContext) {
	localctx = NewTable_path_expression_baseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 300, GoogleSQLParserRULE_table_path_expression_base)
	p.SetState(2189)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 225, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2169)
			p.Unnest_expression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2170)
			p.Maybe_slashed_or_dashed_path_expression()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2171)
			p.Path_expression()
		}
		{
			p.SetState(2172)
			p.Match(GoogleSQLParserLS_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Syntax error: Array element access is not allowed in the FROM clause without UNNEST; Use UNNEST(<expression>)", nil, nil)

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2175)
			p.Path_expression()
		}
		{
			p.SetState(2176)
			p.Match(GoogleSQLParserDOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2177)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Syntax error: Generalized field access is not allowed in the FROM clause without UNNEST; Use UNNEST(<expression>)", nil, nil)

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2180)
			p.Unnest_expression()
		}
		{
			p.SetState(2181)
			p.Match(GoogleSQLParserLS_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Syntax error: Array element access is not allowed in the FROM clause without UNNEST; Use UNNEST(<expression>)", nil, nil)

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2184)
			p.Unnest_expression()
		}
		{
			p.SetState(2185)
			p.Match(GoogleSQLParserDOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2186)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Syntax error: Generalized field access is not allowed in the FROM clause without UNNEST; Use UNNEST(<expression>)", nil, nil)

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMaybe_slashed_or_dashed_path_expressionContext is an interface to support dynamic dispatch.
type IMaybe_slashed_or_dashed_path_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext
	Slashed_path_expression() ISlashed_path_expressionContext

	// IsMaybe_slashed_or_dashed_path_expressionContext differentiates from other interfaces.
	IsMaybe_slashed_or_dashed_path_expressionContext()
}

type Maybe_slashed_or_dashed_path_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMaybe_slashed_or_dashed_path_expressionContext() *Maybe_slashed_or_dashed_path_expressionContext {
	var p = new(Maybe_slashed_or_dashed_path_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_maybe_slashed_or_dashed_path_expression
	return p
}

func InitEmptyMaybe_slashed_or_dashed_path_expressionContext(p *Maybe_slashed_or_dashed_path_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_maybe_slashed_or_dashed_path_expression
}

func (*Maybe_slashed_or_dashed_path_expressionContext) IsMaybe_slashed_or_dashed_path_expressionContext() {
}

func NewMaybe_slashed_or_dashed_path_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Maybe_slashed_or_dashed_path_expressionContext {
	var p = new(Maybe_slashed_or_dashed_path_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_maybe_slashed_or_dashed_path_expression

	return p
}

func (s *Maybe_slashed_or_dashed_path_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Maybe_slashed_or_dashed_path_expressionContext) Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMaybe_dashed_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMaybe_dashed_path_expressionContext)
}

func (s *Maybe_slashed_or_dashed_path_expressionContext) Slashed_path_expression() ISlashed_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISlashed_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISlashed_path_expressionContext)
}

func (s *Maybe_slashed_or_dashed_path_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Maybe_slashed_or_dashed_path_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Maybe_slashed_or_dashed_path_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterMaybe_slashed_or_dashed_path_expression(s)
	}
}

func (s *Maybe_slashed_or_dashed_path_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitMaybe_slashed_or_dashed_path_expression(s)
	}
}

func (s *Maybe_slashed_or_dashed_path_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitMaybe_slashed_or_dashed_path_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Maybe_slashed_or_dashed_path_expression() (localctx IMaybe_slashed_or_dashed_path_expressionContext) {
	localctx = NewMaybe_slashed_or_dashed_path_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 302, GoogleSQLParserRULE_maybe_slashed_or_dashed_path_expression)
	p.SetState(2193)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2191)
			p.Maybe_dashed_path_expression()
		}

	case GoogleSQLParserSLASH_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2192)
			p.Slashed_path_expression()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMaybe_dashed_path_expressionContext is an interface to support dynamic dispatch.
type IMaybe_dashed_path_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Path_expression() IPath_expressionContext
	Dashed_path_expression() IDashed_path_expressionContext

	// IsMaybe_dashed_path_expressionContext differentiates from other interfaces.
	IsMaybe_dashed_path_expressionContext()
}

type Maybe_dashed_path_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMaybe_dashed_path_expressionContext() *Maybe_dashed_path_expressionContext {
	var p = new(Maybe_dashed_path_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_maybe_dashed_path_expression
	return p
}

func InitEmptyMaybe_dashed_path_expressionContext(p *Maybe_dashed_path_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_maybe_dashed_path_expression
}

func (*Maybe_dashed_path_expressionContext) IsMaybe_dashed_path_expressionContext() {}

func NewMaybe_dashed_path_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Maybe_dashed_path_expressionContext {
	var p = new(Maybe_dashed_path_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_maybe_dashed_path_expression

	return p
}

func (s *Maybe_dashed_path_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Maybe_dashed_path_expressionContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Maybe_dashed_path_expressionContext) Dashed_path_expression() IDashed_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDashed_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDashed_path_expressionContext)
}

func (s *Maybe_dashed_path_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Maybe_dashed_path_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Maybe_dashed_path_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterMaybe_dashed_path_expression(s)
	}
}

func (s *Maybe_dashed_path_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitMaybe_dashed_path_expression(s)
	}
}

func (s *Maybe_dashed_path_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitMaybe_dashed_path_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Maybe_dashed_path_expression() (localctx IMaybe_dashed_path_expressionContext) {
	localctx = NewMaybe_dashed_path_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 304, GoogleSQLParserRULE_maybe_dashed_path_expression)
	p.SetState(2197)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 227, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2195)
			p.Path_expression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2196)
			p.dashed_path_expression(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDashed_path_expressionContext is an interface to support dynamic dispatch.
type IDashed_path_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Dashed_identifier() IDashed_identifierContext
	Dashed_path_expression() IDashed_path_expressionContext
	DOT_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext

	// IsDashed_path_expressionContext differentiates from other interfaces.
	IsDashed_path_expressionContext()
}

type Dashed_path_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDashed_path_expressionContext() *Dashed_path_expressionContext {
	var p = new(Dashed_path_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_dashed_path_expression
	return p
}

func InitEmptyDashed_path_expressionContext(p *Dashed_path_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_dashed_path_expression
}

func (*Dashed_path_expressionContext) IsDashed_path_expressionContext() {}

func NewDashed_path_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dashed_path_expressionContext {
	var p = new(Dashed_path_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_dashed_path_expression

	return p
}

func (s *Dashed_path_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Dashed_path_expressionContext) Dashed_identifier() IDashed_identifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDashed_identifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDashed_identifierContext)
}

func (s *Dashed_path_expressionContext) Dashed_path_expression() IDashed_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDashed_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDashed_path_expressionContext)
}

func (s *Dashed_path_expressionContext) DOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDOT_SYMBOL, 0)
}

func (s *Dashed_path_expressionContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Dashed_path_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dashed_path_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dashed_path_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterDashed_path_expression(s)
	}
}

func (s *Dashed_path_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitDashed_path_expression(s)
	}
}

func (s *Dashed_path_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitDashed_path_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Dashed_path_expression() (localctx IDashed_path_expressionContext) {
	return p.dashed_path_expression(0)
}

func (p *GoogleSQLParser) dashed_path_expression(_p int) (localctx IDashed_path_expressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewDashed_path_expressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IDashed_path_expressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 306
	p.EnterRecursionRule(localctx, 306, GoogleSQLParserRULE_dashed_path_expression, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2200)
		p.dashed_identifier(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2207)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 228, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewDashed_path_expressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_dashed_path_expression)
			p.SetState(2202)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				goto errorExit
			}
			{
				p.SetState(2203)
				p.Match(GoogleSQLParserDOT_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(2204)
				p.Identifier()
			}

		}
		p.SetState(2209)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 228, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDashed_identifierContext is an interface to support dynamic dispatch.
type IDashed_identifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	MINUS_OPERATOR() antlr.TerminalNode
	INTEGER_LITERAL() antlr.TerminalNode
	Floating_point_literal() IFloating_point_literalContext
	AllDashed_identifier() []IDashed_identifierContext
	Dashed_identifier(i int) IDashed_identifierContext

	// IsDashed_identifierContext differentiates from other interfaces.
	IsDashed_identifierContext()
}

type Dashed_identifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDashed_identifierContext() *Dashed_identifierContext {
	var p = new(Dashed_identifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_dashed_identifier
	return p
}

func InitEmptyDashed_identifierContext(p *Dashed_identifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_dashed_identifier
}

func (*Dashed_identifierContext) IsDashed_identifierContext() {}

func NewDashed_identifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dashed_identifierContext {
	var p = new(Dashed_identifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_dashed_identifier

	return p
}

func (s *Dashed_identifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Dashed_identifierContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Dashed_identifierContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Dashed_identifierContext) MINUS_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMINUS_OPERATOR, 0)
}

func (s *Dashed_identifierContext) INTEGER_LITERAL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINTEGER_LITERAL, 0)
}

func (s *Dashed_identifierContext) Floating_point_literal() IFloating_point_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFloating_point_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFloating_point_literalContext)
}

func (s *Dashed_identifierContext) AllDashed_identifier() []IDashed_identifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDashed_identifierContext); ok {
			len++
		}
	}

	tst := make([]IDashed_identifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDashed_identifierContext); ok {
			tst[i] = t.(IDashed_identifierContext)
			i++
		}
	}

	return tst
}

func (s *Dashed_identifierContext) Dashed_identifier(i int) IDashed_identifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDashed_identifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDashed_identifierContext)
}

func (s *Dashed_identifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dashed_identifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dashed_identifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterDashed_identifier(s)
	}
}

func (s *Dashed_identifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitDashed_identifier(s)
	}
}

func (s *Dashed_identifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitDashed_identifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Dashed_identifier() (localctx IDashed_identifierContext) {
	return p.dashed_identifier(0)
}

func (p *GoogleSQLParser) dashed_identifier(_p int) (localctx IDashed_identifierContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewDashed_identifierContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IDashed_identifierContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 308
	p.EnterRecursionRule(localctx, 308, GoogleSQLParserRULE_dashed_identifier, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2224)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 229, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2211)
			p.Identifier()
		}
		{
			p.SetState(2212)
			p.Match(GoogleSQLParserMINUS_OPERATOR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2213)
			p.Identifier()
		}

	case 2:
		{
			p.SetState(2215)
			p.Identifier()
		}
		{
			p.SetState(2216)
			p.Match(GoogleSQLParserMINUS_OPERATOR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2217)
			p.Match(GoogleSQLParserINTEGER_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		{
			p.SetState(2219)
			p.Identifier()
		}
		{
			p.SetState(2220)
			p.Match(GoogleSQLParserMINUS_OPERATOR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2221)
			p.Floating_point_literal()
		}
		{
			p.SetState(2222)
			p.Identifier()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2239)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 231, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2237)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 230, p.GetParserRuleContext()) {
			case 1:
				localctx = NewDashed_identifierContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_dashed_identifier)
				p.SetState(2226)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
					goto errorExit
				}
				{
					p.SetState(2227)
					p.Match(GoogleSQLParserMINUS_OPERATOR)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2228)
					p.dashed_identifier(6)
				}

			case 2:
				localctx = NewDashed_identifierContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_dashed_identifier)
				p.SetState(2229)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
					goto errorExit
				}
				{
					p.SetState(2230)
					p.Match(GoogleSQLParserMINUS_OPERATOR)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2231)
					p.Match(GoogleSQLParserINTEGER_LITERAL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 3:
				localctx = NewDashed_identifierContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_dashed_identifier)
				p.SetState(2232)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
					goto errorExit
				}
				{
					p.SetState(2233)
					p.Match(GoogleSQLParserMINUS_OPERATOR)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2234)
					p.Floating_point_literal()
				}
				{
					p.SetState(2235)
					p.Identifier()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(2241)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 231, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISlashed_identifierContext is an interface to support dynamic dispatch.
type ISlashed_identifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SLASH_SYMBOL() antlr.TerminalNode
	Identifier_or_integer() IIdentifier_or_integerContext
	Slashed_identifier() ISlashed_identifierContext
	AllSlashed_identifier_separator() []ISlashed_identifier_separatorContext
	Slashed_identifier_separator(i int) ISlashed_identifier_separatorContext
	Floating_point_literal() IFloating_point_literalContext

	// IsSlashed_identifierContext differentiates from other interfaces.
	IsSlashed_identifierContext()
}

type Slashed_identifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySlashed_identifierContext() *Slashed_identifierContext {
	var p = new(Slashed_identifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_slashed_identifier
	return p
}

func InitEmptySlashed_identifierContext(p *Slashed_identifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_slashed_identifier
}

func (*Slashed_identifierContext) IsSlashed_identifierContext() {}

func NewSlashed_identifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Slashed_identifierContext {
	var p = new(Slashed_identifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_slashed_identifier

	return p
}

func (s *Slashed_identifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Slashed_identifierContext) SLASH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSLASH_SYMBOL, 0)
}

func (s *Slashed_identifierContext) Identifier_or_integer() IIdentifier_or_integerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifier_or_integerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifier_or_integerContext)
}

func (s *Slashed_identifierContext) Slashed_identifier() ISlashed_identifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISlashed_identifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISlashed_identifierContext)
}

func (s *Slashed_identifierContext) AllSlashed_identifier_separator() []ISlashed_identifier_separatorContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISlashed_identifier_separatorContext); ok {
			len++
		}
	}

	tst := make([]ISlashed_identifier_separatorContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISlashed_identifier_separatorContext); ok {
			tst[i] = t.(ISlashed_identifier_separatorContext)
			i++
		}
	}

	return tst
}

func (s *Slashed_identifierContext) Slashed_identifier_separator(i int) ISlashed_identifier_separatorContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISlashed_identifier_separatorContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISlashed_identifier_separatorContext)
}

func (s *Slashed_identifierContext) Floating_point_literal() IFloating_point_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFloating_point_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFloating_point_literalContext)
}

func (s *Slashed_identifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Slashed_identifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Slashed_identifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSlashed_identifier(s)
	}
}

func (s *Slashed_identifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSlashed_identifier(s)
	}
}

func (s *Slashed_identifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSlashed_identifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Slashed_identifier() (localctx ISlashed_identifierContext) {
	return p.slashed_identifier(0)
}

func (p *GoogleSQLParser) slashed_identifier(_p int) (localctx ISlashed_identifierContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewSlashed_identifierContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ISlashed_identifierContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 310
	p.EnterRecursionRule(localctx, 310, GoogleSQLParserRULE_slashed_identifier, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2243)
		p.Match(GoogleSQLParserSLASH_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2244)
		p.Identifier_or_integer()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2258)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 233, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2256)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 232, p.GetParserRuleContext()) {
			case 1:
				localctx = NewSlashed_identifierContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_slashed_identifier)
				p.SetState(2246)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
					goto errorExit
				}
				{
					p.SetState(2247)
					p.Slashed_identifier_separator()
				}
				{
					p.SetState(2248)
					p.Identifier_or_integer()
				}

			case 2:
				localctx = NewSlashed_identifierContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_slashed_identifier)
				p.SetState(2250)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
					goto errorExit
				}
				{
					p.SetState(2251)
					p.Slashed_identifier_separator()
				}
				{
					p.SetState(2252)
					p.Floating_point_literal()
				}
				{
					p.SetState(2253)
					p.Slashed_identifier_separator()
				}
				{
					p.SetState(2254)
					p.Identifier_or_integer()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(2260)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 233, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIdentifier_or_integerContext is an interface to support dynamic dispatch.
type IIdentifier_or_integerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	INTEGER_LITERAL() antlr.TerminalNode

	// IsIdentifier_or_integerContext differentiates from other interfaces.
	IsIdentifier_or_integerContext()
}

type Identifier_or_integerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifier_or_integerContext() *Identifier_or_integerContext {
	var p = new(Identifier_or_integerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_identifier_or_integer
	return p
}

func InitEmptyIdentifier_or_integerContext(p *Identifier_or_integerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_identifier_or_integer
}

func (*Identifier_or_integerContext) IsIdentifier_or_integerContext() {}

func NewIdentifier_or_integerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Identifier_or_integerContext {
	var p = new(Identifier_or_integerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_identifier_or_integer

	return p
}

func (s *Identifier_or_integerContext) GetParser() antlr.Parser { return s.parser }

func (s *Identifier_or_integerContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Identifier_or_integerContext) INTEGER_LITERAL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINTEGER_LITERAL, 0)
}

func (s *Identifier_or_integerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Identifier_or_integerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Identifier_or_integerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterIdentifier_or_integer(s)
	}
}

func (s *Identifier_or_integerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitIdentifier_or_integer(s)
	}
}

func (s *Identifier_or_integerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitIdentifier_or_integer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Identifier_or_integer() (localctx IIdentifier_or_integerContext) {
	localctx = NewIdentifier_or_integerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 312, GoogleSQLParserRULE_identifier_or_integer)
	p.SetState(2263)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2261)
			p.Identifier()
		}

	case GoogleSQLParserINTEGER_LITERAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2262)
			p.Match(GoogleSQLParserINTEGER_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISlashed_identifier_separatorContext is an interface to support dynamic dispatch.
type ISlashed_identifier_separatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MINUS_OPERATOR() antlr.TerminalNode
	SLASH_SYMBOL() antlr.TerminalNode
	COLON_SYMBOL() antlr.TerminalNode

	// IsSlashed_identifier_separatorContext differentiates from other interfaces.
	IsSlashed_identifier_separatorContext()
}

type Slashed_identifier_separatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySlashed_identifier_separatorContext() *Slashed_identifier_separatorContext {
	var p = new(Slashed_identifier_separatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_slashed_identifier_separator
	return p
}

func InitEmptySlashed_identifier_separatorContext(p *Slashed_identifier_separatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_slashed_identifier_separator
}

func (*Slashed_identifier_separatorContext) IsSlashed_identifier_separatorContext() {}

func NewSlashed_identifier_separatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Slashed_identifier_separatorContext {
	var p = new(Slashed_identifier_separatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_slashed_identifier_separator

	return p
}

func (s *Slashed_identifier_separatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Slashed_identifier_separatorContext) MINUS_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMINUS_OPERATOR, 0)
}

func (s *Slashed_identifier_separatorContext) SLASH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSLASH_SYMBOL, 0)
}

func (s *Slashed_identifier_separatorContext) COLON_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOLON_SYMBOL, 0)
}

func (s *Slashed_identifier_separatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Slashed_identifier_separatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Slashed_identifier_separatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSlashed_identifier_separator(s)
	}
}

func (s *Slashed_identifier_separatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSlashed_identifier_separator(s)
	}
}

func (s *Slashed_identifier_separatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSlashed_identifier_separator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Slashed_identifier_separator() (localctx ISlashed_identifier_separatorContext) {
	localctx = NewSlashed_identifier_separatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 314, GoogleSQLParserRULE_slashed_identifier_separator)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2265)
		p.Match(GoogleSQLParserMINUS_OPERATOR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2266)
		p.Match(GoogleSQLParserSLASH_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2267)
		p.Match(GoogleSQLParserCOLON_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISlashed_path_expressionContext is an interface to support dynamic dispatch.
type ISlashed_path_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Slashed_identifier() ISlashed_identifierContext
	Slashed_identifier_separator() ISlashed_identifier_separatorContext
	Floating_point_literal() IFloating_point_literalContext
	Identifier() IIdentifierContext

	// IsSlashed_path_expressionContext differentiates from other interfaces.
	IsSlashed_path_expressionContext()
}

type Slashed_path_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySlashed_path_expressionContext() *Slashed_path_expressionContext {
	var p = new(Slashed_path_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_slashed_path_expression
	return p
}

func InitEmptySlashed_path_expressionContext(p *Slashed_path_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_slashed_path_expression
}

func (*Slashed_path_expressionContext) IsSlashed_path_expressionContext() {}

func NewSlashed_path_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Slashed_path_expressionContext {
	var p = new(Slashed_path_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_slashed_path_expression

	return p
}

func (s *Slashed_path_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Slashed_path_expressionContext) Slashed_identifier() ISlashed_identifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISlashed_identifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISlashed_identifierContext)
}

func (s *Slashed_path_expressionContext) Slashed_identifier_separator() ISlashed_identifier_separatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISlashed_identifier_separatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISlashed_identifier_separatorContext)
}

func (s *Slashed_path_expressionContext) Floating_point_literal() IFloating_point_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFloating_point_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFloating_point_literalContext)
}

func (s *Slashed_path_expressionContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Slashed_path_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Slashed_path_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Slashed_path_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSlashed_path_expression(s)
	}
}

func (s *Slashed_path_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSlashed_path_expression(s)
	}
}

func (s *Slashed_path_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSlashed_path_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Slashed_path_expression() (localctx ISlashed_path_expressionContext) {
	localctx = NewSlashed_path_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 316, GoogleSQLParserRULE_slashed_path_expression)
	p.SetState(2275)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 235, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2269)
			p.slashed_identifier(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2270)
			p.slashed_identifier(0)
		}
		{
			p.SetState(2271)
			p.Slashed_identifier_separator()
		}
		{
			p.SetState(2272)
			p.Floating_point_literal()
		}
		{
			p.SetState(2273)
			p.Identifier()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnnest_expressionContext is an interface to support dynamic dispatch.
type IUnnest_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Unnest_expression_prefix() IUnnest_expression_prefixContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Opt_array_zip_mode() IOpt_array_zip_modeContext
	UNNEST_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	SELECT_SYMBOL() antlr.TerminalNode

	// IsUnnest_expressionContext differentiates from other interfaces.
	IsUnnest_expressionContext()
}

type Unnest_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnnest_expressionContext() *Unnest_expressionContext {
	var p = new(Unnest_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unnest_expression
	return p
}

func InitEmptyUnnest_expressionContext(p *Unnest_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unnest_expression
}

func (*Unnest_expressionContext) IsUnnest_expressionContext() {}

func NewUnnest_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unnest_expressionContext {
	var p = new(Unnest_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_unnest_expression

	return p
}

func (s *Unnest_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Unnest_expressionContext) Unnest_expression_prefix() IUnnest_expression_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnnest_expression_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnnest_expression_prefixContext)
}

func (s *Unnest_expressionContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Unnest_expressionContext) Opt_array_zip_mode() IOpt_array_zip_modeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_array_zip_modeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_array_zip_modeContext)
}

func (s *Unnest_expressionContext) UNNEST_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNNEST_SYMBOL, 0)
}

func (s *Unnest_expressionContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Unnest_expressionContext) SELECT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSELECT_SYMBOL, 0)
}

func (s *Unnest_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unnest_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unnest_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUnnest_expression(s)
	}
}

func (s *Unnest_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUnnest_expression(s)
	}
}

func (s *Unnest_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUnnest_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Unnest_expression() (localctx IUnnest_expressionContext) {
	localctx = NewUnnest_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 318, GoogleSQLParserRULE_unnest_expression)
	var _la int

	p.SetState(2287)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 237, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2277)
			p.Unnest_expression_prefix()
		}
		p.SetState(2279)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserCOMMA_SYMBOL {
			{
				p.SetState(2278)
				p.Opt_array_zip_mode()
			}

		}
		{
			p.SetState(2281)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2283)
			p.Match(GoogleSQLParserUNNEST_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2284)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2285)
			p.Match(GoogleSQLParserSELECT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("The argument to UNNEST is an expression, not a query; to use a query as an expression, the query must be wrapped with additional parentheses to make it a scalar subquery expression", nil, nil)

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnnest_expression_prefixContext is an interface to support dynamic dispatch.
type IUnnest_expression_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UNNEST_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllExpression_with_opt_alias() []IExpression_with_opt_aliasContext
	Expression_with_opt_alias(i int) IExpression_with_opt_aliasContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsUnnest_expression_prefixContext differentiates from other interfaces.
	IsUnnest_expression_prefixContext()
}

type Unnest_expression_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnnest_expression_prefixContext() *Unnest_expression_prefixContext {
	var p = new(Unnest_expression_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unnest_expression_prefix
	return p
}

func InitEmptyUnnest_expression_prefixContext(p *Unnest_expression_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unnest_expression_prefix
}

func (*Unnest_expression_prefixContext) IsUnnest_expression_prefixContext() {}

func NewUnnest_expression_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unnest_expression_prefixContext {
	var p = new(Unnest_expression_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_unnest_expression_prefix

	return p
}

func (s *Unnest_expression_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Unnest_expression_prefixContext) UNNEST_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNNEST_SYMBOL, 0)
}

func (s *Unnest_expression_prefixContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Unnest_expression_prefixContext) AllExpression_with_opt_alias() []IExpression_with_opt_aliasContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpression_with_opt_aliasContext); ok {
			len++
		}
	}

	tst := make([]IExpression_with_opt_aliasContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpression_with_opt_aliasContext); ok {
			tst[i] = t.(IExpression_with_opt_aliasContext)
			i++
		}
	}

	return tst
}

func (s *Unnest_expression_prefixContext) Expression_with_opt_alias(i int) IExpression_with_opt_aliasContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpression_with_opt_aliasContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpression_with_opt_aliasContext)
}

func (s *Unnest_expression_prefixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Unnest_expression_prefixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Unnest_expression_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unnest_expression_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unnest_expression_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUnnest_expression_prefix(s)
	}
}

func (s *Unnest_expression_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUnnest_expression_prefix(s)
	}
}

func (s *Unnest_expression_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUnnest_expression_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Unnest_expression_prefix() (localctx IUnnest_expression_prefixContext) {
	localctx = NewUnnest_expression_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 320, GoogleSQLParserRULE_unnest_expression_prefix)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2289)
		p.Match(GoogleSQLParserUNNEST_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2290)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2291)
		p.Expression_with_opt_alias()
	}
	p.SetState(2296)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 238, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2292)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(2293)
				p.Expression_with_opt_alias()
			}

		}
		p.SetState(2298)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 238, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_array_zip_modeContext is an interface to support dynamic dispatch.
type IOpt_array_zip_modeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	COMMA_SYMBOL() antlr.TerminalNode
	Named_argument() INamed_argumentContext

	// IsOpt_array_zip_modeContext differentiates from other interfaces.
	IsOpt_array_zip_modeContext()
}

type Opt_array_zip_modeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_array_zip_modeContext() *Opt_array_zip_modeContext {
	var p = new(Opt_array_zip_modeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_array_zip_mode
	return p
}

func InitEmptyOpt_array_zip_modeContext(p *Opt_array_zip_modeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_array_zip_mode
}

func (*Opt_array_zip_modeContext) IsOpt_array_zip_modeContext() {}

func NewOpt_array_zip_modeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_array_zip_modeContext {
	var p = new(Opt_array_zip_modeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_array_zip_mode

	return p
}

func (s *Opt_array_zip_modeContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_array_zip_modeContext) COMMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, 0)
}

func (s *Opt_array_zip_modeContext) Named_argument() INamed_argumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamed_argumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamed_argumentContext)
}

func (s *Opt_array_zip_modeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_array_zip_modeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_array_zip_modeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_array_zip_mode(s)
	}
}

func (s *Opt_array_zip_modeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_array_zip_mode(s)
	}
}

func (s *Opt_array_zip_modeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_array_zip_mode(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_array_zip_mode() (localctx IOpt_array_zip_modeContext) {
	localctx = NewOpt_array_zip_modeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 322, GoogleSQLParserRULE_opt_array_zip_mode)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2299)
		p.Match(GoogleSQLParserCOMMA_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2300)
		p.Named_argument()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpression_with_opt_aliasContext is an interface to support dynamic dispatch.
type IExpression_with_opt_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	Opt_as_alias_with_required_as() IOpt_as_alias_with_required_asContext

	// IsExpression_with_opt_aliasContext differentiates from other interfaces.
	IsExpression_with_opt_aliasContext()
}

type Expression_with_opt_aliasContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_with_opt_aliasContext() *Expression_with_opt_aliasContext {
	var p = new(Expression_with_opt_aliasContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expression_with_opt_alias
	return p
}

func InitEmptyExpression_with_opt_aliasContext(p *Expression_with_opt_aliasContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expression_with_opt_alias
}

func (*Expression_with_opt_aliasContext) IsExpression_with_opt_aliasContext() {}

func NewExpression_with_opt_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_with_opt_aliasContext {
	var p = new(Expression_with_opt_aliasContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_expression_with_opt_alias

	return p
}

func (s *Expression_with_opt_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_with_opt_aliasContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Expression_with_opt_aliasContext) Opt_as_alias_with_required_as() IOpt_as_alias_with_required_asContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_as_alias_with_required_asContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_as_alias_with_required_asContext)
}

func (s *Expression_with_opt_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_with_opt_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expression_with_opt_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterExpression_with_opt_alias(s)
	}
}

func (s *Expression_with_opt_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitExpression_with_opt_alias(s)
	}
}

func (s *Expression_with_opt_aliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitExpression_with_opt_alias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Expression_with_opt_alias() (localctx IExpression_with_opt_aliasContext) {
	localctx = NewExpression_with_opt_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 324, GoogleSQLParserRULE_expression_with_opt_alias)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2302)
		p.expression(0)
	}
	p.SetState(2304)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAS_SYMBOL {
		{
			p.SetState(2303)
			p.Opt_as_alias_with_required_as()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITvf_prefixContext is an interface to support dynamic dispatch.
type ITvf_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Tvf_prefix_no_args() ITvf_prefix_no_argsContext
	AllTvf_argument() []ITvf_argumentContext
	Tvf_argument(i int) ITvf_argumentContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsTvf_prefixContext differentiates from other interfaces.
	IsTvf_prefixContext()
}

type Tvf_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTvf_prefixContext() *Tvf_prefixContext {
	var p = new(Tvf_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_tvf_prefix
	return p
}

func InitEmptyTvf_prefixContext(p *Tvf_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_tvf_prefix
}

func (*Tvf_prefixContext) IsTvf_prefixContext() {}

func NewTvf_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tvf_prefixContext {
	var p = new(Tvf_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_tvf_prefix

	return p
}

func (s *Tvf_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Tvf_prefixContext) Tvf_prefix_no_args() ITvf_prefix_no_argsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITvf_prefix_no_argsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITvf_prefix_no_argsContext)
}

func (s *Tvf_prefixContext) AllTvf_argument() []ITvf_argumentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITvf_argumentContext); ok {
			len++
		}
	}

	tst := make([]ITvf_argumentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITvf_argumentContext); ok {
			tst[i] = t.(ITvf_argumentContext)
			i++
		}
	}

	return tst
}

func (s *Tvf_prefixContext) Tvf_argument(i int) ITvf_argumentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITvf_argumentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITvf_argumentContext)
}

func (s *Tvf_prefixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Tvf_prefixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Tvf_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tvf_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tvf_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTvf_prefix(s)
	}
}

func (s *Tvf_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTvf_prefix(s)
	}
}

func (s *Tvf_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTvf_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Tvf_prefix() (localctx ITvf_prefixContext) {
	localctx = NewTvf_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 326, GoogleSQLParserRULE_tvf_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2306)
		p.Tvf_prefix_no_args()
	}
	{
		p.SetState(2307)
		p.Tvf_argument()
	}
	p.SetState(2312)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(2308)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2309)
			p.Tvf_argument()
		}

		p.SetState(2314)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITvf_argumentContext is an interface to support dynamic dispatch.
type ITvf_argumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	Descriptor_argument() IDescriptor_argumentContext
	Table_clause() ITable_clauseContext
	Model_clause() IModel_clauseContext
	Connection_clause() IConnection_clauseContext
	Named_argument() INamed_argumentContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	SELECT_SYMBOL() antlr.TerminalNode
	WITH_SYMBOL() antlr.TerminalNode

	// IsTvf_argumentContext differentiates from other interfaces.
	IsTvf_argumentContext()
}

type Tvf_argumentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTvf_argumentContext() *Tvf_argumentContext {
	var p = new(Tvf_argumentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_tvf_argument
	return p
}

func InitEmptyTvf_argumentContext(p *Tvf_argumentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_tvf_argument
}

func (*Tvf_argumentContext) IsTvf_argumentContext() {}

func NewTvf_argumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tvf_argumentContext {
	var p = new(Tvf_argumentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_tvf_argument

	return p
}

func (s *Tvf_argumentContext) GetParser() antlr.Parser { return s.parser }

func (s *Tvf_argumentContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Tvf_argumentContext) Descriptor_argument() IDescriptor_argumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescriptor_argumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescriptor_argumentContext)
}

func (s *Tvf_argumentContext) Table_clause() ITable_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_clauseContext)
}

func (s *Tvf_argumentContext) Model_clause() IModel_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IModel_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IModel_clauseContext)
}

func (s *Tvf_argumentContext) Connection_clause() IConnection_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConnection_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConnection_clauseContext)
}

func (s *Tvf_argumentContext) Named_argument() INamed_argumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamed_argumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamed_argumentContext)
}

func (s *Tvf_argumentContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Tvf_argumentContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Tvf_argumentContext) SELECT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSELECT_SYMBOL, 0)
}

func (s *Tvf_argumentContext) WITH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWITH_SYMBOL, 0)
}

func (s *Tvf_argumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tvf_argumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tvf_argumentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTvf_argument(s)
	}
}

func (s *Tvf_argumentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTvf_argument(s)
	}
}

func (s *Tvf_argumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTvf_argument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Tvf_argument() (localctx ITvf_argumentContext) {
	localctx = NewTvf_argumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 328, GoogleSQLParserRULE_tvf_argument)
	p.SetState(2345)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 241, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2315)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2316)
			p.Descriptor_argument()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2317)
			p.Table_clause()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2318)
			p.Model_clause()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2319)
			p.Connection_clause()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2320)
			p.Named_argument()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2321)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2322)
			p.Table_clause()
		}
		{
			p.SetState(2323)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Syntax error: Table arguments for table-valued function calls written as \"TABLE path\" must not be enclosed in parentheses. To fix this, replace (TABLE path) with TABLE path", nil, nil)

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2326)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2327)
			p.Model_clause()
		}
		{
			p.SetState(2328)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Syntax error: Model arguments for table-valued function calls written as \"MODEL path\" must not be enclosed in parentheses. To fix this, replace (MODEL path) with MODEL path", nil, nil)

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2331)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2332)
			p.Connection_clause()
		}
		{
			p.SetState(2333)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Syntax error: Connection arguments for table-valued function calls written as \"CONNECTION path\" must not be enclosed in parentheses. To fix this, replace (CONNECTION path) with CONNECTION path", nil, nil)

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(2336)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2337)
			p.Named_argument()
		}
		{
			p.SetState(2338)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Syntax error: Named arguments for table-valued function calls written as \"name => value\" must not be enclosed in parentheses. To fix this, replace (name => value) with name => value", nil, nil)

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(2341)
			p.Match(GoogleSQLParserSELECT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Syntax error: Each subquery argument for table-valued function calls must be enclosed in parentheses. To fix this, replace SELECT... with (SELECT...)", nil, nil)

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(2343)
			p.Match(GoogleSQLParserWITH_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Syntax error: Each subquery argument for table-valued function calls must be enclosed in parentheses. To fix this, replace WITH... with (WITH...)", nil, nil)

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConnection_clauseContext is an interface to support dynamic dispatch.
type IConnection_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CONNECTION_SYMBOL() antlr.TerminalNode
	Path_expression_or_default() IPath_expression_or_defaultContext

	// IsConnection_clauseContext differentiates from other interfaces.
	IsConnection_clauseContext()
}

type Connection_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConnection_clauseContext() *Connection_clauseContext {
	var p = new(Connection_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_connection_clause
	return p
}

func InitEmptyConnection_clauseContext(p *Connection_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_connection_clause
}

func (*Connection_clauseContext) IsConnection_clauseContext() {}

func NewConnection_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Connection_clauseContext {
	var p = new(Connection_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_connection_clause

	return p
}

func (s *Connection_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Connection_clauseContext) CONNECTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCONNECTION_SYMBOL, 0)
}

func (s *Connection_clauseContext) Path_expression_or_default() IPath_expression_or_defaultContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expression_or_defaultContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expression_or_defaultContext)
}

func (s *Connection_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Connection_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Connection_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterConnection_clause(s)
	}
}

func (s *Connection_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitConnection_clause(s)
	}
}

func (s *Connection_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitConnection_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Connection_clause() (localctx IConnection_clauseContext) {
	localctx = NewConnection_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 330, GoogleSQLParserRULE_connection_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2347)
		p.Match(GoogleSQLParserCONNECTION_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2348)
		p.Path_expression_or_default()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPath_expression_or_defaultContext is an interface to support dynamic dispatch.
type IPath_expression_or_defaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Path_expression() IPath_expressionContext
	DEFAULT_SYMBOL() antlr.TerminalNode

	// IsPath_expression_or_defaultContext differentiates from other interfaces.
	IsPath_expression_or_defaultContext()
}

type Path_expression_or_defaultContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPath_expression_or_defaultContext() *Path_expression_or_defaultContext {
	var p = new(Path_expression_or_defaultContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_path_expression_or_default
	return p
}

func InitEmptyPath_expression_or_defaultContext(p *Path_expression_or_defaultContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_path_expression_or_default
}

func (*Path_expression_or_defaultContext) IsPath_expression_or_defaultContext() {}

func NewPath_expression_or_defaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Path_expression_or_defaultContext {
	var p = new(Path_expression_or_defaultContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_path_expression_or_default

	return p
}

func (s *Path_expression_or_defaultContext) GetParser() antlr.Parser { return s.parser }

func (s *Path_expression_or_defaultContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Path_expression_or_defaultContext) DEFAULT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDEFAULT_SYMBOL, 0)
}

func (s *Path_expression_or_defaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Path_expression_or_defaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Path_expression_or_defaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPath_expression_or_default(s)
	}
}

func (s *Path_expression_or_defaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPath_expression_or_default(s)
	}
}

func (s *Path_expression_or_defaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPath_expression_or_default(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Path_expression_or_default() (localctx IPath_expression_or_defaultContext) {
	localctx = NewPath_expression_or_defaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 332, GoogleSQLParserRULE_path_expression_or_default)
	p.SetState(2352)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2350)
			p.Path_expression()
		}

	case GoogleSQLParserDEFAULT_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2351)
			p.Match(GoogleSQLParserDEFAULT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDescriptor_argumentContext is an interface to support dynamic dispatch.
type IDescriptor_argumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DESCRIPTOR_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Descriptor_column_list() IDescriptor_column_listContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsDescriptor_argumentContext differentiates from other interfaces.
	IsDescriptor_argumentContext()
}

type Descriptor_argumentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescriptor_argumentContext() *Descriptor_argumentContext {
	var p = new(Descriptor_argumentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_descriptor_argument
	return p
}

func InitEmptyDescriptor_argumentContext(p *Descriptor_argumentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_descriptor_argument
}

func (*Descriptor_argumentContext) IsDescriptor_argumentContext() {}

func NewDescriptor_argumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Descriptor_argumentContext {
	var p = new(Descriptor_argumentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_descriptor_argument

	return p
}

func (s *Descriptor_argumentContext) GetParser() antlr.Parser { return s.parser }

func (s *Descriptor_argumentContext) DESCRIPTOR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDESCRIPTOR_SYMBOL, 0)
}

func (s *Descriptor_argumentContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Descriptor_argumentContext) Descriptor_column_list() IDescriptor_column_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescriptor_column_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescriptor_column_listContext)
}

func (s *Descriptor_argumentContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Descriptor_argumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Descriptor_argumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Descriptor_argumentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterDescriptor_argument(s)
	}
}

func (s *Descriptor_argumentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitDescriptor_argument(s)
	}
}

func (s *Descriptor_argumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitDescriptor_argument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Descriptor_argument() (localctx IDescriptor_argumentContext) {
	localctx = NewDescriptor_argumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 334, GoogleSQLParserRULE_descriptor_argument)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2354)
		p.Match(GoogleSQLParserDESCRIPTOR_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2355)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2356)
		p.Descriptor_column_list()
	}
	{
		p.SetState(2357)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDescriptor_column_listContext is an interface to support dynamic dispatch.
type IDescriptor_column_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllDescriptor_column() []IDescriptor_columnContext
	Descriptor_column(i int) IDescriptor_columnContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsDescriptor_column_listContext differentiates from other interfaces.
	IsDescriptor_column_listContext()
}

type Descriptor_column_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescriptor_column_listContext() *Descriptor_column_listContext {
	var p = new(Descriptor_column_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_descriptor_column_list
	return p
}

func InitEmptyDescriptor_column_listContext(p *Descriptor_column_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_descriptor_column_list
}

func (*Descriptor_column_listContext) IsDescriptor_column_listContext() {}

func NewDescriptor_column_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Descriptor_column_listContext {
	var p = new(Descriptor_column_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_descriptor_column_list

	return p
}

func (s *Descriptor_column_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Descriptor_column_listContext) AllDescriptor_column() []IDescriptor_columnContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDescriptor_columnContext); ok {
			len++
		}
	}

	tst := make([]IDescriptor_columnContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDescriptor_columnContext); ok {
			tst[i] = t.(IDescriptor_columnContext)
			i++
		}
	}

	return tst
}

func (s *Descriptor_column_listContext) Descriptor_column(i int) IDescriptor_columnContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescriptor_columnContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescriptor_columnContext)
}

func (s *Descriptor_column_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Descriptor_column_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Descriptor_column_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Descriptor_column_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Descriptor_column_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterDescriptor_column_list(s)
	}
}

func (s *Descriptor_column_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitDescriptor_column_list(s)
	}
}

func (s *Descriptor_column_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitDescriptor_column_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Descriptor_column_list() (localctx IDescriptor_column_listContext) {
	localctx = NewDescriptor_column_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 336, GoogleSQLParserRULE_descriptor_column_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2359)
		p.Descriptor_column()
	}
	p.SetState(2364)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(2360)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2361)
			p.Descriptor_column()
		}

		p.SetState(2366)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDescriptor_columnContext is an interface to support dynamic dispatch.
type IDescriptor_columnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext

	// IsDescriptor_columnContext differentiates from other interfaces.
	IsDescriptor_columnContext()
}

type Descriptor_columnContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescriptor_columnContext() *Descriptor_columnContext {
	var p = new(Descriptor_columnContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_descriptor_column
	return p
}

func InitEmptyDescriptor_columnContext(p *Descriptor_columnContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_descriptor_column
}

func (*Descriptor_columnContext) IsDescriptor_columnContext() {}

func NewDescriptor_columnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Descriptor_columnContext {
	var p = new(Descriptor_columnContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_descriptor_column

	return p
}

func (s *Descriptor_columnContext) GetParser() antlr.Parser { return s.parser }

func (s *Descriptor_columnContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Descriptor_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Descriptor_columnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Descriptor_columnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterDescriptor_column(s)
	}
}

func (s *Descriptor_columnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitDescriptor_column(s)
	}
}

func (s *Descriptor_columnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitDescriptor_column(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Descriptor_column() (localctx IDescriptor_columnContext) {
	localctx = NewDescriptor_columnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 338, GoogleSQLParserRULE_descriptor_column)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2367)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_clauseContext is an interface to support dynamic dispatch.
type ITable_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TABLE_SYMBOL() antlr.TerminalNode
	Tvf_with_suffixes() ITvf_with_suffixesContext
	Path_expression() IPath_expressionContext

	// IsTable_clauseContext differentiates from other interfaces.
	IsTable_clauseContext()
}

type Table_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_clauseContext() *Table_clauseContext {
	var p = new(Table_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_clause
	return p
}

func InitEmptyTable_clauseContext(p *Table_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_clause
}

func (*Table_clauseContext) IsTable_clauseContext() {}

func NewTable_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_clauseContext {
	var p = new(Table_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_table_clause

	return p
}

func (s *Table_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_clauseContext) TABLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTABLE_SYMBOL, 0)
}

func (s *Table_clauseContext) Tvf_with_suffixes() ITvf_with_suffixesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITvf_with_suffixesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITvf_with_suffixesContext)
}

func (s *Table_clauseContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Table_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTable_clause(s)
	}
}

func (s *Table_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTable_clause(s)
	}
}

func (s *Table_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTable_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Table_clause() (localctx ITable_clauseContext) {
	localctx = NewTable_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 340, GoogleSQLParserRULE_table_clause)
	p.SetState(2373)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 244, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2369)
			p.Match(GoogleSQLParserTABLE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2370)
			p.Tvf_with_suffixes()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2371)
			p.Match(GoogleSQLParserTABLE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2372)
			p.Path_expression()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IModel_clauseContext is an interface to support dynamic dispatch.
type IModel_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MODEL_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext

	// IsModel_clauseContext differentiates from other interfaces.
	IsModel_clauseContext()
}

type Model_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModel_clauseContext() *Model_clauseContext {
	var p = new(Model_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_model_clause
	return p
}

func InitEmptyModel_clauseContext(p *Model_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_model_clause
}

func (*Model_clauseContext) IsModel_clauseContext() {}

func NewModel_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Model_clauseContext {
	var p = new(Model_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_model_clause

	return p
}

func (s *Model_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Model_clauseContext) MODEL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMODEL_SYMBOL, 0)
}

func (s *Model_clauseContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Model_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Model_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Model_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterModel_clause(s)
	}
}

func (s *Model_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitModel_clause(s)
	}
}

func (s *Model_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitModel_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Model_clause() (localctx IModel_clauseContext) {
	localctx = NewModel_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 342, GoogleSQLParserRULE_model_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2375)
		p.Match(GoogleSQLParserMODEL_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2376)
		p.Path_expression()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQualify_clause_nonreservedContext is an interface to support dynamic dispatch.
type IQualify_clause_nonreservedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	QUALIFY_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsQualify_clause_nonreservedContext differentiates from other interfaces.
	IsQualify_clause_nonreservedContext()
}

type Qualify_clause_nonreservedContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQualify_clause_nonreservedContext() *Qualify_clause_nonreservedContext {
	var p = new(Qualify_clause_nonreservedContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_qualify_clause_nonreserved
	return p
}

func InitEmptyQualify_clause_nonreservedContext(p *Qualify_clause_nonreservedContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_qualify_clause_nonreserved
}

func (*Qualify_clause_nonreservedContext) IsQualify_clause_nonreservedContext() {}

func NewQualify_clause_nonreservedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Qualify_clause_nonreservedContext {
	var p = new(Qualify_clause_nonreservedContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_qualify_clause_nonreserved

	return p
}

func (s *Qualify_clause_nonreservedContext) GetParser() antlr.Parser { return s.parser }

func (s *Qualify_clause_nonreservedContext) QUALIFY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserQUALIFY_SYMBOL, 0)
}

func (s *Qualify_clause_nonreservedContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Qualify_clause_nonreservedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Qualify_clause_nonreservedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Qualify_clause_nonreservedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterQualify_clause_nonreserved(s)
	}
}

func (s *Qualify_clause_nonreservedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitQualify_clause_nonreserved(s)
	}
}

func (s *Qualify_clause_nonreservedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitQualify_clause_nonreserved(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Qualify_clause_nonreserved() (localctx IQualify_clause_nonreservedContext) {
	localctx = NewQualify_clause_nonreservedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 344, GoogleSQLParserRULE_qualify_clause_nonreserved)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2378)
		p.Match(GoogleSQLParserQUALIFY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2379)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnpivot_clauseContext is an interface to support dynamic dispatch.
type IUnpivot_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UNPIVOT_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Path_expression_list_with_opt_parens() IPath_expression_list_with_opt_parensContext
	FOR_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext
	IN_SYMBOL() antlr.TerminalNode
	Unpivot_in_item_list() IUnpivot_in_item_listContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Unpivot_nulls_filter() IUnpivot_nulls_filterContext

	// IsUnpivot_clauseContext differentiates from other interfaces.
	IsUnpivot_clauseContext()
}

type Unpivot_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnpivot_clauseContext() *Unpivot_clauseContext {
	var p = new(Unpivot_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unpivot_clause
	return p
}

func InitEmptyUnpivot_clauseContext(p *Unpivot_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unpivot_clause
}

func (*Unpivot_clauseContext) IsUnpivot_clauseContext() {}

func NewUnpivot_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unpivot_clauseContext {
	var p = new(Unpivot_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_unpivot_clause

	return p
}

func (s *Unpivot_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Unpivot_clauseContext) UNPIVOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNPIVOT_SYMBOL, 0)
}

func (s *Unpivot_clauseContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Unpivot_clauseContext) Path_expression_list_with_opt_parens() IPath_expression_list_with_opt_parensContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expression_list_with_opt_parensContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expression_list_with_opt_parensContext)
}

func (s *Unpivot_clauseContext) FOR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFOR_SYMBOL, 0)
}

func (s *Unpivot_clauseContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Unpivot_clauseContext) IN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIN_SYMBOL, 0)
}

func (s *Unpivot_clauseContext) Unpivot_in_item_list() IUnpivot_in_item_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnpivot_in_item_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnpivot_in_item_listContext)
}

func (s *Unpivot_clauseContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Unpivot_clauseContext) Unpivot_nulls_filter() IUnpivot_nulls_filterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnpivot_nulls_filterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnpivot_nulls_filterContext)
}

func (s *Unpivot_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unpivot_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unpivot_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUnpivot_clause(s)
	}
}

func (s *Unpivot_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUnpivot_clause(s)
	}
}

func (s *Unpivot_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUnpivot_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Unpivot_clause() (localctx IUnpivot_clauseContext) {
	localctx = NewUnpivot_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 346, GoogleSQLParserRULE_unpivot_clause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2381)
		p.Match(GoogleSQLParserUNPIVOT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2383)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserEXCLUDE_SYMBOL || _la == GoogleSQLParserINCLUDE_SYMBOL {
		{
			p.SetState(2382)
			p.Unpivot_nulls_filter()
		}

	}
	{
		p.SetState(2385)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2386)
		p.Path_expression_list_with_opt_parens()
	}
	{
		p.SetState(2387)
		p.Match(GoogleSQLParserFOR_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2388)
		p.Path_expression()
	}
	{
		p.SetState(2389)
		p.Match(GoogleSQLParserIN_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2390)
		p.Unpivot_in_item_list()
	}
	{
		p.SetState(2391)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnpivot_in_item_listContext is an interface to support dynamic dispatch.
type IUnpivot_in_item_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Unpivot_in_item_list_prefix() IUnpivot_in_item_list_prefixContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsUnpivot_in_item_listContext differentiates from other interfaces.
	IsUnpivot_in_item_listContext()
}

type Unpivot_in_item_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnpivot_in_item_listContext() *Unpivot_in_item_listContext {
	var p = new(Unpivot_in_item_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unpivot_in_item_list
	return p
}

func InitEmptyUnpivot_in_item_listContext(p *Unpivot_in_item_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unpivot_in_item_list
}

func (*Unpivot_in_item_listContext) IsUnpivot_in_item_listContext() {}

func NewUnpivot_in_item_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unpivot_in_item_listContext {
	var p = new(Unpivot_in_item_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_unpivot_in_item_list

	return p
}

func (s *Unpivot_in_item_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Unpivot_in_item_listContext) Unpivot_in_item_list_prefix() IUnpivot_in_item_list_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnpivot_in_item_list_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnpivot_in_item_list_prefixContext)
}

func (s *Unpivot_in_item_listContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Unpivot_in_item_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unpivot_in_item_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unpivot_in_item_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUnpivot_in_item_list(s)
	}
}

func (s *Unpivot_in_item_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUnpivot_in_item_list(s)
	}
}

func (s *Unpivot_in_item_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUnpivot_in_item_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Unpivot_in_item_list() (localctx IUnpivot_in_item_listContext) {
	localctx = NewUnpivot_in_item_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 348, GoogleSQLParserRULE_unpivot_in_item_list)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2393)
		p.unpivot_in_item_list_prefix(0)
	}
	{
		p.SetState(2394)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnpivot_in_item_list_prefixContext is an interface to support dynamic dispatch.
type IUnpivot_in_item_list_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Unpivot_in_item() IUnpivot_in_itemContext
	Unpivot_in_item_list_prefix() IUnpivot_in_item_list_prefixContext
	COMMA_SYMBOL() antlr.TerminalNode

	// IsUnpivot_in_item_list_prefixContext differentiates from other interfaces.
	IsUnpivot_in_item_list_prefixContext()
}

type Unpivot_in_item_list_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnpivot_in_item_list_prefixContext() *Unpivot_in_item_list_prefixContext {
	var p = new(Unpivot_in_item_list_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unpivot_in_item_list_prefix
	return p
}

func InitEmptyUnpivot_in_item_list_prefixContext(p *Unpivot_in_item_list_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unpivot_in_item_list_prefix
}

func (*Unpivot_in_item_list_prefixContext) IsUnpivot_in_item_list_prefixContext() {}

func NewUnpivot_in_item_list_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unpivot_in_item_list_prefixContext {
	var p = new(Unpivot_in_item_list_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_unpivot_in_item_list_prefix

	return p
}

func (s *Unpivot_in_item_list_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Unpivot_in_item_list_prefixContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Unpivot_in_item_list_prefixContext) Unpivot_in_item() IUnpivot_in_itemContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnpivot_in_itemContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnpivot_in_itemContext)
}

func (s *Unpivot_in_item_list_prefixContext) Unpivot_in_item_list_prefix() IUnpivot_in_item_list_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnpivot_in_item_list_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnpivot_in_item_list_prefixContext)
}

func (s *Unpivot_in_item_list_prefixContext) COMMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, 0)
}

func (s *Unpivot_in_item_list_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unpivot_in_item_list_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unpivot_in_item_list_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUnpivot_in_item_list_prefix(s)
	}
}

func (s *Unpivot_in_item_list_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUnpivot_in_item_list_prefix(s)
	}
}

func (s *Unpivot_in_item_list_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUnpivot_in_item_list_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Unpivot_in_item_list_prefix() (localctx IUnpivot_in_item_list_prefixContext) {
	return p.unpivot_in_item_list_prefix(0)
}

func (p *GoogleSQLParser) unpivot_in_item_list_prefix(_p int) (localctx IUnpivot_in_item_list_prefixContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewUnpivot_in_item_list_prefixContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IUnpivot_in_item_list_prefixContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 350
	p.EnterRecursionRule(localctx, 350, GoogleSQLParserRULE_unpivot_in_item_list_prefix, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2397)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2398)
		p.Unpivot_in_item()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2405)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 246, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewUnpivot_in_item_list_prefixContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_unpivot_in_item_list_prefix)
			p.SetState(2400)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				goto errorExit
			}
			{
				p.SetState(2401)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(2402)
				p.Unpivot_in_item()
			}

		}
		p.SetState(2407)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 246, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnpivot_in_itemContext is an interface to support dynamic dispatch.
type IUnpivot_in_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Path_expression_list_with_opt_parens() IPath_expression_list_with_opt_parensContext
	Opt_as_string_or_integer() IOpt_as_string_or_integerContext

	// IsUnpivot_in_itemContext differentiates from other interfaces.
	IsUnpivot_in_itemContext()
}

type Unpivot_in_itemContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnpivot_in_itemContext() *Unpivot_in_itemContext {
	var p = new(Unpivot_in_itemContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unpivot_in_item
	return p
}

func InitEmptyUnpivot_in_itemContext(p *Unpivot_in_itemContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unpivot_in_item
}

func (*Unpivot_in_itemContext) IsUnpivot_in_itemContext() {}

func NewUnpivot_in_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unpivot_in_itemContext {
	var p = new(Unpivot_in_itemContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_unpivot_in_item

	return p
}

func (s *Unpivot_in_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Unpivot_in_itemContext) Path_expression_list_with_opt_parens() IPath_expression_list_with_opt_parensContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expression_list_with_opt_parensContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expression_list_with_opt_parensContext)
}

func (s *Unpivot_in_itemContext) Opt_as_string_or_integer() IOpt_as_string_or_integerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_as_string_or_integerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_as_string_or_integerContext)
}

func (s *Unpivot_in_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unpivot_in_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unpivot_in_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUnpivot_in_item(s)
	}
}

func (s *Unpivot_in_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUnpivot_in_item(s)
	}
}

func (s *Unpivot_in_itemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUnpivot_in_item(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Unpivot_in_item() (localctx IUnpivot_in_itemContext) {
	localctx = NewUnpivot_in_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 352, GoogleSQLParserRULE_unpivot_in_item)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2408)
		p.Path_expression_list_with_opt_parens()
	}
	p.SetState(2410)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 247, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2409)
			p.Opt_as_string_or_integer()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_as_string_or_integerContext is an interface to support dynamic dispatch.
type IOpt_as_string_or_integerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	String_literal() IString_literalContext
	AS_SYMBOL() antlr.TerminalNode
	Integer_literal() IInteger_literalContext

	// IsOpt_as_string_or_integerContext differentiates from other interfaces.
	IsOpt_as_string_or_integerContext()
}

type Opt_as_string_or_integerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_as_string_or_integerContext() *Opt_as_string_or_integerContext {
	var p = new(Opt_as_string_or_integerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_as_string_or_integer
	return p
}

func InitEmptyOpt_as_string_or_integerContext(p *Opt_as_string_or_integerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_as_string_or_integer
}

func (*Opt_as_string_or_integerContext) IsOpt_as_string_or_integerContext() {}

func NewOpt_as_string_or_integerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_as_string_or_integerContext {
	var p = new(Opt_as_string_or_integerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_as_string_or_integer

	return p
}

func (s *Opt_as_string_or_integerContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_as_string_or_integerContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Opt_as_string_or_integerContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Opt_as_string_or_integerContext) Integer_literal() IInteger_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInteger_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInteger_literalContext)
}

func (s *Opt_as_string_or_integerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_as_string_or_integerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_as_string_or_integerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_as_string_or_integer(s)
	}
}

func (s *Opt_as_string_or_integerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_as_string_or_integer(s)
	}
}

func (s *Opt_as_string_or_integerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_as_string_or_integer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_as_string_or_integer() (localctx IOpt_as_string_or_integerContext) {
	localctx = NewOpt_as_string_or_integerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 354, GoogleSQLParserRULE_opt_as_string_or_integer)
	var _la int

	p.SetState(2420)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 250, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(2413)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAS_SYMBOL {
			{
				p.SetState(2412)
				p.Match(GoogleSQLParserAS_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(2415)
			p.string_literal(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(2417)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAS_SYMBOL {
			{
				p.SetState(2416)
				p.Match(GoogleSQLParserAS_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(2419)
			p.Integer_literal()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPath_expression_list_with_opt_parensContext is an interface to support dynamic dispatch.
type IPath_expression_list_with_opt_parensContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Path_expression_list() IPath_expression_listContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsPath_expression_list_with_opt_parensContext differentiates from other interfaces.
	IsPath_expression_list_with_opt_parensContext()
}

type Path_expression_list_with_opt_parensContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPath_expression_list_with_opt_parensContext() *Path_expression_list_with_opt_parensContext {
	var p = new(Path_expression_list_with_opt_parensContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_path_expression_list_with_opt_parens
	return p
}

func InitEmptyPath_expression_list_with_opt_parensContext(p *Path_expression_list_with_opt_parensContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_path_expression_list_with_opt_parens
}

func (*Path_expression_list_with_opt_parensContext) IsPath_expression_list_with_opt_parensContext() {}

func NewPath_expression_list_with_opt_parensContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Path_expression_list_with_opt_parensContext {
	var p = new(Path_expression_list_with_opt_parensContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_path_expression_list_with_opt_parens

	return p
}

func (s *Path_expression_list_with_opt_parensContext) GetParser() antlr.Parser { return s.parser }

func (s *Path_expression_list_with_opt_parensContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Path_expression_list_with_opt_parensContext) Path_expression_list() IPath_expression_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expression_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expression_listContext)
}

func (s *Path_expression_list_with_opt_parensContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Path_expression_list_with_opt_parensContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Path_expression_list_with_opt_parensContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Path_expression_list_with_opt_parensContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPath_expression_list_with_opt_parens(s)
	}
}

func (s *Path_expression_list_with_opt_parensContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPath_expression_list_with_opt_parens(s)
	}
}

func (s *Path_expression_list_with_opt_parensContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPath_expression_list_with_opt_parens(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Path_expression_list_with_opt_parens() (localctx IPath_expression_list_with_opt_parensContext) {
	localctx = NewPath_expression_list_with_opt_parensContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 356, GoogleSQLParserRULE_path_expression_list_with_opt_parens)
	p.SetState(2427)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserLR_BRACKET_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2422)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2423)
			p.Path_expression_list()
		}
		{
			p.SetState(2424)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2426)
			p.Path_expression_list()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPath_expression_listContext is an interface to support dynamic dispatch.
type IPath_expression_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllPath_expression() []IPath_expressionContext
	Path_expression(i int) IPath_expressionContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsPath_expression_listContext differentiates from other interfaces.
	IsPath_expression_listContext()
}

type Path_expression_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPath_expression_listContext() *Path_expression_listContext {
	var p = new(Path_expression_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_path_expression_list
	return p
}

func InitEmptyPath_expression_listContext(p *Path_expression_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_path_expression_list
}

func (*Path_expression_listContext) IsPath_expression_listContext() {}

func NewPath_expression_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Path_expression_listContext {
	var p = new(Path_expression_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_path_expression_list

	return p
}

func (s *Path_expression_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Path_expression_listContext) AllPath_expression() []IPath_expressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPath_expressionContext); ok {
			len++
		}
	}

	tst := make([]IPath_expressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPath_expressionContext); ok {
			tst[i] = t.(IPath_expressionContext)
			i++
		}
	}

	return tst
}

func (s *Path_expression_listContext) Path_expression(i int) IPath_expressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Path_expression_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Path_expression_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Path_expression_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Path_expression_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Path_expression_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPath_expression_list(s)
	}
}

func (s *Path_expression_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPath_expression_list(s)
	}
}

func (s *Path_expression_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPath_expression_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Path_expression_list() (localctx IPath_expression_listContext) {
	localctx = NewPath_expression_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 358, GoogleSQLParserRULE_path_expression_list)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2429)
		p.Path_expression()
	}
	p.SetState(2434)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 252, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2430)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(2431)
				p.Path_expression()
			}

		}
		p.SetState(2436)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 252, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnpivot_nulls_filterContext is an interface to support dynamic dispatch.
type IUnpivot_nulls_filterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EXCLUDE_SYMBOL() antlr.TerminalNode
	NULLS_SYMBOL() antlr.TerminalNode
	INCLUDE_SYMBOL() antlr.TerminalNode

	// IsUnpivot_nulls_filterContext differentiates from other interfaces.
	IsUnpivot_nulls_filterContext()
}

type Unpivot_nulls_filterContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnpivot_nulls_filterContext() *Unpivot_nulls_filterContext {
	var p = new(Unpivot_nulls_filterContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unpivot_nulls_filter
	return p
}

func InitEmptyUnpivot_nulls_filterContext(p *Unpivot_nulls_filterContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unpivot_nulls_filter
}

func (*Unpivot_nulls_filterContext) IsUnpivot_nulls_filterContext() {}

func NewUnpivot_nulls_filterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unpivot_nulls_filterContext {
	var p = new(Unpivot_nulls_filterContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_unpivot_nulls_filter

	return p
}

func (s *Unpivot_nulls_filterContext) GetParser() antlr.Parser { return s.parser }

func (s *Unpivot_nulls_filterContext) EXCLUDE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXCLUDE_SYMBOL, 0)
}

func (s *Unpivot_nulls_filterContext) NULLS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNULLS_SYMBOL, 0)
}

func (s *Unpivot_nulls_filterContext) INCLUDE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINCLUDE_SYMBOL, 0)
}

func (s *Unpivot_nulls_filterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unpivot_nulls_filterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unpivot_nulls_filterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUnpivot_nulls_filter(s)
	}
}

func (s *Unpivot_nulls_filterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUnpivot_nulls_filter(s)
	}
}

func (s *Unpivot_nulls_filterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUnpivot_nulls_filter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Unpivot_nulls_filter() (localctx IUnpivot_nulls_filterContext) {
	localctx = NewUnpivot_nulls_filterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 360, GoogleSQLParserRULE_unpivot_nulls_filter)
	p.SetState(2441)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserEXCLUDE_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2437)
			p.Match(GoogleSQLParserEXCLUDE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2438)
			p.Match(GoogleSQLParserNULLS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserINCLUDE_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2439)
			p.Match(GoogleSQLParserINCLUDE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2440)
			p.Match(GoogleSQLParserNULLS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPivot_clauseContext is an interface to support dynamic dispatch.
type IPivot_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PIVOT_SYMBOL() antlr.TerminalNode
	AllLR_BRACKET_SYMBOL() []antlr.TerminalNode
	LR_BRACKET_SYMBOL(i int) antlr.TerminalNode
	Pivot_expression_list() IPivot_expression_listContext
	FOR_SYMBOL() antlr.TerminalNode
	Expression_higher_prec_than_and() IExpression_higher_prec_than_andContext
	IN_SYMBOL() antlr.TerminalNode
	Pivot_value_list() IPivot_value_listContext
	AllRR_BRACKET_SYMBOL() []antlr.TerminalNode
	RR_BRACKET_SYMBOL(i int) antlr.TerminalNode

	// IsPivot_clauseContext differentiates from other interfaces.
	IsPivot_clauseContext()
}

type Pivot_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPivot_clauseContext() *Pivot_clauseContext {
	var p = new(Pivot_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_pivot_clause
	return p
}

func InitEmptyPivot_clauseContext(p *Pivot_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_pivot_clause
}

func (*Pivot_clauseContext) IsPivot_clauseContext() {}

func NewPivot_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pivot_clauseContext {
	var p = new(Pivot_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_pivot_clause

	return p
}

func (s *Pivot_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Pivot_clauseContext) PIVOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPIVOT_SYMBOL, 0)
}

func (s *Pivot_clauseContext) AllLR_BRACKET_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserLR_BRACKET_SYMBOL)
}

func (s *Pivot_clauseContext) LR_BRACKET_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, i)
}

func (s *Pivot_clauseContext) Pivot_expression_list() IPivot_expression_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPivot_expression_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPivot_expression_listContext)
}

func (s *Pivot_clauseContext) FOR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFOR_SYMBOL, 0)
}

func (s *Pivot_clauseContext) Expression_higher_prec_than_and() IExpression_higher_prec_than_andContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpression_higher_prec_than_andContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpression_higher_prec_than_andContext)
}

func (s *Pivot_clauseContext) IN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIN_SYMBOL, 0)
}

func (s *Pivot_clauseContext) Pivot_value_list() IPivot_value_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPivot_value_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPivot_value_listContext)
}

func (s *Pivot_clauseContext) AllRR_BRACKET_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserRR_BRACKET_SYMBOL)
}

func (s *Pivot_clauseContext) RR_BRACKET_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, i)
}

func (s *Pivot_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pivot_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pivot_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPivot_clause(s)
	}
}

func (s *Pivot_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPivot_clause(s)
	}
}

func (s *Pivot_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPivot_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Pivot_clause() (localctx IPivot_clauseContext) {
	localctx = NewPivot_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 362, GoogleSQLParserRULE_pivot_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2443)
		p.Match(GoogleSQLParserPIVOT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2444)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2445)
		p.Pivot_expression_list()
	}
	{
		p.SetState(2446)
		p.Match(GoogleSQLParserFOR_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2447)
		p.expression_higher_prec_than_and(0)
	}
	{
		p.SetState(2448)
		p.Match(GoogleSQLParserIN_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2449)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2450)
		p.Pivot_value_list()
	}
	{
		p.SetState(2451)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2452)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPivot_expression_listContext is an interface to support dynamic dispatch.
type IPivot_expression_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllPivot_expression() []IPivot_expressionContext
	Pivot_expression(i int) IPivot_expressionContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsPivot_expression_listContext differentiates from other interfaces.
	IsPivot_expression_listContext()
}

type Pivot_expression_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPivot_expression_listContext() *Pivot_expression_listContext {
	var p = new(Pivot_expression_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_pivot_expression_list
	return p
}

func InitEmptyPivot_expression_listContext(p *Pivot_expression_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_pivot_expression_list
}

func (*Pivot_expression_listContext) IsPivot_expression_listContext() {}

func NewPivot_expression_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pivot_expression_listContext {
	var p = new(Pivot_expression_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_pivot_expression_list

	return p
}

func (s *Pivot_expression_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Pivot_expression_listContext) AllPivot_expression() []IPivot_expressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPivot_expressionContext); ok {
			len++
		}
	}

	tst := make([]IPivot_expressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPivot_expressionContext); ok {
			tst[i] = t.(IPivot_expressionContext)
			i++
		}
	}

	return tst
}

func (s *Pivot_expression_listContext) Pivot_expression(i int) IPivot_expressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPivot_expressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPivot_expressionContext)
}

func (s *Pivot_expression_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Pivot_expression_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Pivot_expression_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pivot_expression_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pivot_expression_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPivot_expression_list(s)
	}
}

func (s *Pivot_expression_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPivot_expression_list(s)
	}
}

func (s *Pivot_expression_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPivot_expression_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Pivot_expression_list() (localctx IPivot_expression_listContext) {
	localctx = NewPivot_expression_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 364, GoogleSQLParserRULE_pivot_expression_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2454)
		p.Pivot_expression()
	}
	p.SetState(2459)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(2455)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2456)
			p.Pivot_expression()
		}

		p.SetState(2461)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPivot_expressionContext is an interface to support dynamic dispatch.
type IPivot_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	As_alias() IAs_aliasContext

	// IsPivot_expressionContext differentiates from other interfaces.
	IsPivot_expressionContext()
}

type Pivot_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPivot_expressionContext() *Pivot_expressionContext {
	var p = new(Pivot_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_pivot_expression
	return p
}

func InitEmptyPivot_expressionContext(p *Pivot_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_pivot_expression
}

func (*Pivot_expressionContext) IsPivot_expressionContext() {}

func NewPivot_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pivot_expressionContext {
	var p = new(Pivot_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_pivot_expression

	return p
}

func (s *Pivot_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Pivot_expressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Pivot_expressionContext) As_alias() IAs_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_aliasContext)
}

func (s *Pivot_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pivot_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pivot_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPivot_expression(s)
	}
}

func (s *Pivot_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPivot_expression(s)
	}
}

func (s *Pivot_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPivot_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Pivot_expression() (localctx IPivot_expressionContext) {
	localctx = NewPivot_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 366, GoogleSQLParserRULE_pivot_expression)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2462)
		p.expression(0)
	}
	p.SetState(2464)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64((_la-56)) & ^0x3f) == 0 && ((int64(1)<<(_la-56))&-6981105432269881343) != 0) || ((int64((_la-120)) & ^0x3f) == 0 && ((int64(1)<<(_la-120))&-1) != 0) || ((int64((_la-184)) & ^0x3f) == 0 && ((int64(1)<<(_la-184))&-1) != 0) || ((int64((_la-248)) & ^0x3f) == 0 && ((int64(1)<<(_la-248))&35184372088703) != 0) || _la == GoogleSQLParserIDENTIFIER {
		{
			p.SetState(2463)
			p.As_alias()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPivot_value_listContext is an interface to support dynamic dispatch.
type IPivot_value_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllPivot_value() []IPivot_valueContext
	Pivot_value(i int) IPivot_valueContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsPivot_value_listContext differentiates from other interfaces.
	IsPivot_value_listContext()
}

type Pivot_value_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPivot_value_listContext() *Pivot_value_listContext {
	var p = new(Pivot_value_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_pivot_value_list
	return p
}

func InitEmptyPivot_value_listContext(p *Pivot_value_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_pivot_value_list
}

func (*Pivot_value_listContext) IsPivot_value_listContext() {}

func NewPivot_value_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pivot_value_listContext {
	var p = new(Pivot_value_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_pivot_value_list

	return p
}

func (s *Pivot_value_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Pivot_value_listContext) AllPivot_value() []IPivot_valueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPivot_valueContext); ok {
			len++
		}
	}

	tst := make([]IPivot_valueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPivot_valueContext); ok {
			tst[i] = t.(IPivot_valueContext)
			i++
		}
	}

	return tst
}

func (s *Pivot_value_listContext) Pivot_value(i int) IPivot_valueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPivot_valueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPivot_valueContext)
}

func (s *Pivot_value_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Pivot_value_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Pivot_value_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pivot_value_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pivot_value_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPivot_value_list(s)
	}
}

func (s *Pivot_value_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPivot_value_list(s)
	}
}

func (s *Pivot_value_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPivot_value_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Pivot_value_list() (localctx IPivot_value_listContext) {
	localctx = NewPivot_value_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 368, GoogleSQLParserRULE_pivot_value_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2466)
		p.Pivot_value()
	}
	p.SetState(2471)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(2467)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2468)
			p.Pivot_value()
		}

		p.SetState(2473)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPivot_valueContext is an interface to support dynamic dispatch.
type IPivot_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	As_alias() IAs_aliasContext

	// IsPivot_valueContext differentiates from other interfaces.
	IsPivot_valueContext()
}

type Pivot_valueContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPivot_valueContext() *Pivot_valueContext {
	var p = new(Pivot_valueContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_pivot_value
	return p
}

func InitEmptyPivot_valueContext(p *Pivot_valueContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_pivot_value
}

func (*Pivot_valueContext) IsPivot_valueContext() {}

func NewPivot_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pivot_valueContext {
	var p = new(Pivot_valueContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_pivot_value

	return p
}

func (s *Pivot_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Pivot_valueContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Pivot_valueContext) As_alias() IAs_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_aliasContext)
}

func (s *Pivot_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pivot_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pivot_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPivot_value(s)
	}
}

func (s *Pivot_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPivot_value(s)
	}
}

func (s *Pivot_valueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPivot_value(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Pivot_value() (localctx IPivot_valueContext) {
	localctx = NewPivot_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 370, GoogleSQLParserRULE_pivot_value)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2474)
		p.expression(0)
	}
	p.SetState(2476)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64((_la-56)) & ^0x3f) == 0 && ((int64(1)<<(_la-56))&-6981105432269881343) != 0) || ((int64((_la-120)) & ^0x3f) == 0 && ((int64(1)<<(_la-120))&-1) != 0) || ((int64((_la-184)) & ^0x3f) == 0 && ((int64(1)<<(_la-184))&-1) != 0) || ((int64((_la-248)) & ^0x3f) == 0 && ((int64(1)<<(_la-248))&35184372088703) != 0) || _la == GoogleSQLParserIDENTIFIER {
		{
			p.SetState(2475)
			p.As_alias()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITvf_prefix_no_argsContext is an interface to support dynamic dispatch.
type ITvf_prefix_no_argsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Path_expression() IPath_expressionContext
	IF_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsTvf_prefix_no_argsContext differentiates from other interfaces.
	IsTvf_prefix_no_argsContext()
}

type Tvf_prefix_no_argsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTvf_prefix_no_argsContext() *Tvf_prefix_no_argsContext {
	var p = new(Tvf_prefix_no_argsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_tvf_prefix_no_args
	return p
}

func InitEmptyTvf_prefix_no_argsContext(p *Tvf_prefix_no_argsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_tvf_prefix_no_args
}

func (*Tvf_prefix_no_argsContext) IsTvf_prefix_no_argsContext() {}

func NewTvf_prefix_no_argsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tvf_prefix_no_argsContext {
	var p = new(Tvf_prefix_no_argsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_tvf_prefix_no_args

	return p
}

func (s *Tvf_prefix_no_argsContext) GetParser() antlr.Parser { return s.parser }

func (s *Tvf_prefix_no_argsContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Tvf_prefix_no_argsContext) IF_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIF_SYMBOL, 0)
}

func (s *Tvf_prefix_no_argsContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Tvf_prefix_no_argsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tvf_prefix_no_argsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tvf_prefix_no_argsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTvf_prefix_no_args(s)
	}
}

func (s *Tvf_prefix_no_argsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTvf_prefix_no_args(s)
	}
}

func (s *Tvf_prefix_no_argsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTvf_prefix_no_args(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Tvf_prefix_no_args() (localctx ITvf_prefix_no_argsContext) {
	localctx = NewTvf_prefix_no_argsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 372, GoogleSQLParserRULE_tvf_prefix_no_args)
	p.SetState(2481)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2478)
			p.Path_expression()
		}

	case GoogleSQLParserIF_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2479)
			p.Match(GoogleSQLParserIF_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2480)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJoin_typeContext is an interface to support dynamic dispatch.
type IJoin_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CROSS_SYMBOL() antlr.TerminalNode
	FULL_SYMBOL() antlr.TerminalNode
	Opt_outer() IOpt_outerContext
	INNER_SYMBOL() antlr.TerminalNode
	LEFT_SYMBOL() antlr.TerminalNode
	RIGHT_SYMBOL() antlr.TerminalNode

	// IsJoin_typeContext differentiates from other interfaces.
	IsJoin_typeContext()
}

type Join_typeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoin_typeContext() *Join_typeContext {
	var p = new(Join_typeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_join_type
	return p
}

func InitEmptyJoin_typeContext(p *Join_typeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_join_type
}

func (*Join_typeContext) IsJoin_typeContext() {}

func NewJoin_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Join_typeContext {
	var p = new(Join_typeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_join_type

	return p
}

func (s *Join_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Join_typeContext) CROSS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCROSS_SYMBOL, 0)
}

func (s *Join_typeContext) FULL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFULL_SYMBOL, 0)
}

func (s *Join_typeContext) Opt_outer() IOpt_outerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_outerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_outerContext)
}

func (s *Join_typeContext) INNER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINNER_SYMBOL, 0)
}

func (s *Join_typeContext) LEFT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLEFT_SYMBOL, 0)
}

func (s *Join_typeContext) RIGHT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRIGHT_SYMBOL, 0)
}

func (s *Join_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Join_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Join_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterJoin_type(s)
	}
}

func (s *Join_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitJoin_type(s)
	}
}

func (s *Join_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitJoin_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Join_type() (localctx IJoin_typeContext) {
	localctx = NewJoin_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 374, GoogleSQLParserRULE_join_type)
	var _la int

	p.SetState(2497)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserCROSS_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2483)
			p.Match(GoogleSQLParserCROSS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserFULL_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2484)
			p.Match(GoogleSQLParserFULL_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2486)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserOUTER_SYMBOL {
			{
				p.SetState(2485)
				p.Opt_outer()
			}

		}

	case GoogleSQLParserINNER_SYMBOL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2488)
			p.Match(GoogleSQLParserINNER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserLEFT_SYMBOL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2489)
			p.Match(GoogleSQLParserLEFT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2491)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserOUTER_SYMBOL {
			{
				p.SetState(2490)
				p.Opt_outer()
			}

		}

	case GoogleSQLParserRIGHT_SYMBOL:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2493)
			p.Match(GoogleSQLParserRIGHT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2495)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserOUTER_SYMBOL {
			{
				p.SetState(2494)
				p.Opt_outer()
			}

		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_naturalContext is an interface to support dynamic dispatch.
type IOpt_naturalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NATURAL_SYMBOL() antlr.TerminalNode

	// IsOpt_naturalContext differentiates from other interfaces.
	IsOpt_naturalContext()
}

type Opt_naturalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_naturalContext() *Opt_naturalContext {
	var p = new(Opt_naturalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_natural
	return p
}

func InitEmptyOpt_naturalContext(p *Opt_naturalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_natural
}

func (*Opt_naturalContext) IsOpt_naturalContext() {}

func NewOpt_naturalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_naturalContext {
	var p = new(Opt_naturalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_natural

	return p
}

func (s *Opt_naturalContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_naturalContext) NATURAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNATURAL_SYMBOL, 0)
}

func (s *Opt_naturalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_naturalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_naturalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_natural(s)
	}
}

func (s *Opt_naturalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_natural(s)
	}
}

func (s *Opt_naturalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_natural(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_natural() (localctx IOpt_naturalContext) {
	localctx = NewOpt_naturalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 376, GoogleSQLParserRULE_opt_natural)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2499)
		p.Match(GoogleSQLParserNATURAL_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOn_clauseContext is an interface to support dynamic dispatch.
type IOn_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ON_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsOn_clauseContext differentiates from other interfaces.
	IsOn_clauseContext()
}

type On_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOn_clauseContext() *On_clauseContext {
	var p = new(On_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_on_clause
	return p
}

func InitEmptyOn_clauseContext(p *On_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_on_clause
}

func (*On_clauseContext) IsOn_clauseContext() {}

func NewOn_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *On_clauseContext {
	var p = new(On_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_on_clause

	return p
}

func (s *On_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *On_clauseContext) ON_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserON_SYMBOL, 0)
}

func (s *On_clauseContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *On_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *On_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *On_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOn_clause(s)
	}
}

func (s *On_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOn_clause(s)
	}
}

func (s *On_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOn_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) On_clause() (localctx IOn_clauseContext) {
	localctx = NewOn_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 378, GoogleSQLParserRULE_on_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2501)
		p.Match(GoogleSQLParserON_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2502)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelect_listContext is an interface to support dynamic dispatch.
type ISelect_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllSelect_list_item() []ISelect_list_itemContext
	Select_list_item(i int) ISelect_list_itemContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsSelect_listContext differentiates from other interfaces.
	IsSelect_listContext()
}

type Select_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_listContext() *Select_listContext {
	var p = new(Select_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_list
	return p
}

func InitEmptySelect_listContext(p *Select_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_list
}

func (*Select_listContext) IsSelect_listContext() {}

func NewSelect_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_listContext {
	var p = new(Select_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_select_list

	return p
}

func (s *Select_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_listContext) AllSelect_list_item() []ISelect_list_itemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISelect_list_itemContext); ok {
			len++
		}
	}

	tst := make([]ISelect_list_itemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISelect_list_itemContext); ok {
			tst[i] = t.(ISelect_list_itemContext)
			i++
		}
	}

	return tst
}

func (s *Select_listContext) Select_list_item(i int) ISelect_list_itemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_list_itemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_list_itemContext)
}

func (s *Select_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Select_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Select_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSelect_list(s)
	}
}

func (s *Select_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSelect_list(s)
	}
}

func (s *Select_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSelect_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Select_list() (localctx ISelect_listContext) {
	localctx = NewSelect_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 380, GoogleSQLParserRULE_select_list)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2504)
		p.Select_list_item()
	}
	p.SetState(2509)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 263, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2505)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(2506)
				p.Select_list_item()
			}

		}
		p.SetState(2511)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 263, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(2513)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 264, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2512)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelect_list_itemContext is an interface to support dynamic dispatch.
type ISelect_list_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Select_column_expr() ISelect_column_exprContext
	Select_column_dot_star() ISelect_column_dot_starContext
	Select_column_star() ISelect_column_starContext

	// IsSelect_list_itemContext differentiates from other interfaces.
	IsSelect_list_itemContext()
}

type Select_list_itemContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_list_itemContext() *Select_list_itemContext {
	var p = new(Select_list_itemContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_list_item
	return p
}

func InitEmptySelect_list_itemContext(p *Select_list_itemContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_list_item
}

func (*Select_list_itemContext) IsSelect_list_itemContext() {}

func NewSelect_list_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_list_itemContext {
	var p = new(Select_list_itemContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_select_list_item

	return p
}

func (s *Select_list_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_list_itemContext) Select_column_expr() ISelect_column_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_column_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_column_exprContext)
}

func (s *Select_list_itemContext) Select_column_dot_star() ISelect_column_dot_starContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_column_dot_starContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_column_dot_starContext)
}

func (s *Select_list_itemContext) Select_column_star() ISelect_column_starContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_column_starContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_column_starContext)
}

func (s *Select_list_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_list_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_list_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSelect_list_item(s)
	}
}

func (s *Select_list_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSelect_list_item(s)
	}
}

func (s *Select_list_itemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSelect_list_item(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Select_list_item() (localctx ISelect_list_itemContext) {
	localctx = NewSelect_list_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 382, GoogleSQLParserRULE_select_list_item)
	p.SetState(2518)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 265, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2515)
			p.Select_column_expr()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2516)
			p.Select_column_dot_star()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2517)
			p.Select_column_star()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelect_column_starContext is an interface to support dynamic dispatch.
type ISelect_column_starContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MULTIPLY_OPERATOR() antlr.TerminalNode
	Star_modifiers() IStar_modifiersContext

	// IsSelect_column_starContext differentiates from other interfaces.
	IsSelect_column_starContext()
}

type Select_column_starContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_column_starContext() *Select_column_starContext {
	var p = new(Select_column_starContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_column_star
	return p
}

func InitEmptySelect_column_starContext(p *Select_column_starContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_column_star
}

func (*Select_column_starContext) IsSelect_column_starContext() {}

func NewSelect_column_starContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_column_starContext {
	var p = new(Select_column_starContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_select_column_star

	return p
}

func (s *Select_column_starContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_column_starContext) MULTIPLY_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMULTIPLY_OPERATOR, 0)
}

func (s *Select_column_starContext) Star_modifiers() IStar_modifiersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStar_modifiersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStar_modifiersContext)
}

func (s *Select_column_starContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_column_starContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_column_starContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSelect_column_star(s)
	}
}

func (s *Select_column_starContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSelect_column_star(s)
	}
}

func (s *Select_column_starContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSelect_column_star(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Select_column_star() (localctx ISelect_column_starContext) {
	localctx = NewSelect_column_starContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 384, GoogleSQLParserRULE_select_column_star)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2520)
		p.Match(GoogleSQLParserMULTIPLY_OPERATOR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2522)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 266, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2521)
			p.Star_modifiers()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelect_column_exprContext is an interface to support dynamic dispatch.
type ISelect_column_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	Select_column_expr_with_as_alias() ISelect_column_expr_with_as_aliasContext
	Identifier() IIdentifierContext

	// IsSelect_column_exprContext differentiates from other interfaces.
	IsSelect_column_exprContext()
}

type Select_column_exprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_column_exprContext() *Select_column_exprContext {
	var p = new(Select_column_exprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_column_expr
	return p
}

func InitEmptySelect_column_exprContext(p *Select_column_exprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_column_expr
}

func (*Select_column_exprContext) IsSelect_column_exprContext() {}

func NewSelect_column_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_column_exprContext {
	var p = new(Select_column_exprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_select_column_expr

	return p
}

func (s *Select_column_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_column_exprContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Select_column_exprContext) Select_column_expr_with_as_alias() ISelect_column_expr_with_as_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_column_expr_with_as_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_column_expr_with_as_aliasContext)
}

func (s *Select_column_exprContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Select_column_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_column_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_column_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSelect_column_expr(s)
	}
}

func (s *Select_column_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSelect_column_expr(s)
	}
}

func (s *Select_column_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSelect_column_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Select_column_expr() (localctx ISelect_column_exprContext) {
	localctx = NewSelect_column_exprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 386, GoogleSQLParserRULE_select_column_expr)
	p.SetState(2529)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 267, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2524)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2525)
			p.Select_column_expr_with_as_alias()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2526)
			p.expression(0)
		}
		{
			p.SetState(2527)
			p.Identifier()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelect_column_dot_starContext is an interface to support dynamic dispatch.
type ISelect_column_dot_starContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression_higher_prec_than_and() IExpression_higher_prec_than_andContext
	DOT_SYMBOL() antlr.TerminalNode
	MULTIPLY_OPERATOR() antlr.TerminalNode
	Star_modifiers() IStar_modifiersContext

	// IsSelect_column_dot_starContext differentiates from other interfaces.
	IsSelect_column_dot_starContext()
}

type Select_column_dot_starContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_column_dot_starContext() *Select_column_dot_starContext {
	var p = new(Select_column_dot_starContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_column_dot_star
	return p
}

func InitEmptySelect_column_dot_starContext(p *Select_column_dot_starContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_column_dot_star
}

func (*Select_column_dot_starContext) IsSelect_column_dot_starContext() {}

func NewSelect_column_dot_starContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_column_dot_starContext {
	var p = new(Select_column_dot_starContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_select_column_dot_star

	return p
}

func (s *Select_column_dot_starContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_column_dot_starContext) Expression_higher_prec_than_and() IExpression_higher_prec_than_andContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpression_higher_prec_than_andContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpression_higher_prec_than_andContext)
}

func (s *Select_column_dot_starContext) DOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDOT_SYMBOL, 0)
}

func (s *Select_column_dot_starContext) MULTIPLY_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMULTIPLY_OPERATOR, 0)
}

func (s *Select_column_dot_starContext) Star_modifiers() IStar_modifiersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStar_modifiersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStar_modifiersContext)
}

func (s *Select_column_dot_starContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_column_dot_starContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_column_dot_starContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSelect_column_dot_star(s)
	}
}

func (s *Select_column_dot_starContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSelect_column_dot_star(s)
	}
}

func (s *Select_column_dot_starContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSelect_column_dot_star(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Select_column_dot_star() (localctx ISelect_column_dot_starContext) {
	localctx = NewSelect_column_dot_starContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 388, GoogleSQLParserRULE_select_column_dot_star)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2531)
		p.expression_higher_prec_than_and(0)
	}
	{
		p.SetState(2532)
		p.Match(GoogleSQLParserDOT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2533)
		p.Match(GoogleSQLParserMULTIPLY_OPERATOR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2535)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 268, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2534)
			p.Star_modifiers()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStar_modifiersContext is an interface to support dynamic dispatch.
type IStar_modifiersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Star_except_list() IStar_except_listContext
	Star_replace_list() IStar_replace_listContext

	// IsStar_modifiersContext differentiates from other interfaces.
	IsStar_modifiersContext()
}

type Star_modifiersContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStar_modifiersContext() *Star_modifiersContext {
	var p = new(Star_modifiersContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_star_modifiers
	return p
}

func InitEmptyStar_modifiersContext(p *Star_modifiersContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_star_modifiers
}

func (*Star_modifiersContext) IsStar_modifiersContext() {}

func NewStar_modifiersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Star_modifiersContext {
	var p = new(Star_modifiersContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_star_modifiers

	return p
}

func (s *Star_modifiersContext) GetParser() antlr.Parser { return s.parser }

func (s *Star_modifiersContext) Star_except_list() IStar_except_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStar_except_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStar_except_listContext)
}

func (s *Star_modifiersContext) Star_replace_list() IStar_replace_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStar_replace_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStar_replace_listContext)
}

func (s *Star_modifiersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Star_modifiersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Star_modifiersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStar_modifiers(s)
	}
}

func (s *Star_modifiersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStar_modifiers(s)
	}
}

func (s *Star_modifiersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStar_modifiers(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Star_modifiers() (localctx IStar_modifiersContext) {
	localctx = NewStar_modifiersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 390, GoogleSQLParserRULE_star_modifiers)
	var _la int

	p.SetState(2542)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 270, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2537)
			p.Star_except_list()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(2539)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserEXCEPT_SYMBOL {
			{
				p.SetState(2538)
				p.Star_except_list()
			}

		}
		{
			p.SetState(2541)
			p.Star_replace_list()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStar_except_listContext is an interface to support dynamic dispatch.
type IStar_except_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EXCEPT_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	AllDOT_SYMBOL() []antlr.TerminalNode
	DOT_SYMBOL(i int) antlr.TerminalNode

	// IsStar_except_listContext differentiates from other interfaces.
	IsStar_except_listContext()
}

type Star_except_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStar_except_listContext() *Star_except_listContext {
	var p = new(Star_except_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_star_except_list
	return p
}

func InitEmptyStar_except_listContext(p *Star_except_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_star_except_list
}

func (*Star_except_listContext) IsStar_except_listContext() {}

func NewStar_except_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Star_except_listContext {
	var p = new(Star_except_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_star_except_list

	return p
}

func (s *Star_except_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Star_except_listContext) EXCEPT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXCEPT_SYMBOL, 0)
}

func (s *Star_except_listContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Star_except_listContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Star_except_listContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Star_except_listContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Star_except_listContext) AllDOT_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserDOT_SYMBOL)
}

func (s *Star_except_listContext) DOT_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDOT_SYMBOL, i)
}

func (s *Star_except_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Star_except_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Star_except_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStar_except_list(s)
	}
}

func (s *Star_except_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStar_except_list(s)
	}
}

func (s *Star_except_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStar_except_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Star_except_list() (localctx IStar_except_listContext) {
	localctx = NewStar_except_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 392, GoogleSQLParserRULE_star_except_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2544)
		p.Match(GoogleSQLParserEXCEPT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2545)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2546)
		p.Identifier()
	}
	p.SetState(2551)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserDOT_SYMBOL {
		{
			p.SetState(2547)
			p.Match(GoogleSQLParserDOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2548)
			p.Identifier()
		}

		p.SetState(2553)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2554)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStar_replace_listContext is an interface to support dynamic dispatch.
type IStar_replace_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	REPLACE_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllStar_replace_item() []IStar_replace_itemContext
	Star_replace_item(i int) IStar_replace_itemContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsStar_replace_listContext differentiates from other interfaces.
	IsStar_replace_listContext()
}

type Star_replace_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStar_replace_listContext() *Star_replace_listContext {
	var p = new(Star_replace_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_star_replace_list
	return p
}

func InitEmptyStar_replace_listContext(p *Star_replace_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_star_replace_list
}

func (*Star_replace_listContext) IsStar_replace_listContext() {}

func NewStar_replace_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Star_replace_listContext {
	var p = new(Star_replace_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_star_replace_list

	return p
}

func (s *Star_replace_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Star_replace_listContext) REPLACE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPLACE_SYMBOL, 0)
}

func (s *Star_replace_listContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Star_replace_listContext) AllStar_replace_item() []IStar_replace_itemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStar_replace_itemContext); ok {
			len++
		}
	}

	tst := make([]IStar_replace_itemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStar_replace_itemContext); ok {
			tst[i] = t.(IStar_replace_itemContext)
			i++
		}
	}

	return tst
}

func (s *Star_replace_listContext) Star_replace_item(i int) IStar_replace_itemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStar_replace_itemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStar_replace_itemContext)
}

func (s *Star_replace_listContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Star_replace_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Star_replace_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Star_replace_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Star_replace_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Star_replace_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStar_replace_list(s)
	}
}

func (s *Star_replace_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStar_replace_list(s)
	}
}

func (s *Star_replace_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStar_replace_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Star_replace_list() (localctx IStar_replace_listContext) {
	localctx = NewStar_replace_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 394, GoogleSQLParserRULE_star_replace_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2556)
		p.Match(GoogleSQLParserREPLACE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2557)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2558)
		p.Star_replace_item()
	}
	p.SetState(2563)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(2559)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2560)
			p.Star_replace_item()
		}

		p.SetState(2565)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2566)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStar_replace_itemContext is an interface to support dynamic dispatch.
type IStar_replace_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	AS_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext

	// IsStar_replace_itemContext differentiates from other interfaces.
	IsStar_replace_itemContext()
}

type Star_replace_itemContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStar_replace_itemContext() *Star_replace_itemContext {
	var p = new(Star_replace_itemContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_star_replace_item
	return p
}

func InitEmptyStar_replace_itemContext(p *Star_replace_itemContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_star_replace_item
}

func (*Star_replace_itemContext) IsStar_replace_itemContext() {}

func NewStar_replace_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Star_replace_itemContext {
	var p = new(Star_replace_itemContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_star_replace_item

	return p
}

func (s *Star_replace_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Star_replace_itemContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Star_replace_itemContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Star_replace_itemContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Star_replace_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Star_replace_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Star_replace_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStar_replace_item(s)
	}
}

func (s *Star_replace_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStar_replace_item(s)
	}
}

func (s *Star_replace_itemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStar_replace_item(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Star_replace_item() (localctx IStar_replace_itemContext) {
	localctx = NewStar_replace_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 396, GoogleSQLParserRULE_star_replace_item)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2568)
		p.expression(0)
	}
	{
		p.SetState(2569)
		p.Match(GoogleSQLParserAS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2570)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression_higher_prec_than_and() IExpression_higher_prec_than_andContext
	And_expression() IAnd_expressionContext
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	OR_SYMBOL() antlr.TerminalNode

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expression
	return p
}

func InitEmptyExpressionContext(p *ExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expression
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) Expression_higher_prec_than_and() IExpression_higher_prec_than_andContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpression_higher_prec_than_andContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpression_higher_prec_than_andContext)
}

func (s *ExpressionContext) And_expression() IAnd_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnd_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnd_expressionContext)
}

func (s *ExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *ExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionContext) OR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOR_SYMBOL, 0)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterExpression(s)
	}
}

func (s *ExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitExpression(s)
	}
}

func (s *ExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *GoogleSQLParser) expression(_p int) (localctx IExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 398
	p.EnterRecursionRule(localctx, 398, GoogleSQLParserRULE_expression, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2575)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 273, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2573)
			p.expression_higher_prec_than_and(0)
		}

	case 2:
		{
			p.SetState(2574)
			p.And_expression()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2582)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 274, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewExpressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression)
			p.SetState(2577)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				goto errorExit
			}
			{
				p.SetState(2578)
				p.Match(GoogleSQLParserOR_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(2579)
				p.expression(2)
			}

		}
		p.SetState(2584)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 274, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpression_higher_prec_than_andContext is an interface to support dynamic dispatch.
type IExpression_higher_prec_than_andContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Null_literal() INull_literalContext
	Boolean_literal() IBoolean_literalContext
	String_literal() IString_literalContext
	Bytes_literal() IBytes_literalContext
	Integer_literal() IInteger_literalContext
	Numeric_literal() INumeric_literalContext
	Bignumeric_literal() IBignumeric_literalContext
	Json_literal() IJson_literalContext
	Floating_point_literal() IFloating_point_literalContext
	Date_or_time_literal() IDate_or_time_literalContext
	Range_literal() IRange_literalContext
	Parameter_expression() IParameter_expressionContext
	System_variable_expression() ISystem_variable_expressionContext
	Array_constructor() IArray_constructorContext
	New_constructor() INew_constructorContext
	Braced_constructor() IBraced_constructorContext
	Braced_new_constructor() IBraced_new_constructorContext
	Struct_braced_constructor() IStruct_braced_constructorContext
	Case_expression() ICase_expressionContext
	Cast_expression() ICast_expressionContext
	Extract_expression() IExtract_expressionContext
	With_expression() IWith_expressionContext
	Replace_fields_expression() IReplace_fields_expressionContext
	Function_call_expression_with_clauses() IFunction_call_expression_with_clausesContext
	Interval_expression() IInterval_expressionContext
	Identifier() IIdentifierContext
	Struct_constructor() IStruct_constructorContext
	Expression_subquery_with_keyword() IExpression_subquery_with_keywordContext
	NOT_SYMBOL() antlr.TerminalNode
	AllExpression_higher_prec_than_and() []IExpression_higher_prec_than_andContext
	Expression_higher_prec_than_and(i int) IExpression_higher_prec_than_andContext
	Unary_operator() IUnary_operatorContext
	Parenthesized_expression_not_a_query() IParenthesized_expression_not_a_queryContext
	Parenthesized_query() IParenthesized_queryContext
	Like_operator() ILike_operatorContext
	Distinct_operator() IDistinct_operatorContext
	Between_operator() IBetween_operatorContext
	AND_SYMBOL() antlr.TerminalNode
	Comparative_operator() IComparative_operatorContext
	STROKE_SYMBOL() antlr.TerminalNode
	CIRCUMFLEX_SYMBOL() antlr.TerminalNode
	BIT_AND_SYMBOL() antlr.TerminalNode
	BOOL_OR_SYMBOL() antlr.TerminalNode
	Shift_operator() IShift_operatorContext
	Additive_operator() IAdditive_operatorContext
	Multiplicative_operator() IMultiplicative_operatorContext
	LS_BRACKET_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	RS_BRACKET_SYMBOL() antlr.TerminalNode
	DOT_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Any_some_all() IAny_some_allContext
	Unnest_expression() IUnnest_expressionContext
	Hint() IHintContext
	Parenthesized_anysomeall_list_in_rhs() IParenthesized_anysomeall_list_in_rhsContext
	In_operator() IIn_operatorContext
	Parenthesized_in_rhs() IParenthesized_in_rhsContext
	OR_SYMBOL() antlr.TerminalNode
	Is_operator() IIs_operatorContext
	UNKNOWN_SYMBOL() antlr.TerminalNode

	// IsExpression_higher_prec_than_andContext differentiates from other interfaces.
	IsExpression_higher_prec_than_andContext()
}

type Expression_higher_prec_than_andContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_higher_prec_than_andContext() *Expression_higher_prec_than_andContext {
	var p = new(Expression_higher_prec_than_andContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expression_higher_prec_than_and
	return p
}

func InitEmptyExpression_higher_prec_than_andContext(p *Expression_higher_prec_than_andContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expression_higher_prec_than_and
}

func (*Expression_higher_prec_than_andContext) IsExpression_higher_prec_than_andContext() {}

func NewExpression_higher_prec_than_andContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_higher_prec_than_andContext {
	var p = new(Expression_higher_prec_than_andContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_expression_higher_prec_than_and

	return p
}

func (s *Expression_higher_prec_than_andContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_higher_prec_than_andContext) Null_literal() INull_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INull_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INull_literalContext)
}

func (s *Expression_higher_prec_than_andContext) Boolean_literal() IBoolean_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBoolean_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBoolean_literalContext)
}

func (s *Expression_higher_prec_than_andContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Expression_higher_prec_than_andContext) Bytes_literal() IBytes_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBytes_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBytes_literalContext)
}

func (s *Expression_higher_prec_than_andContext) Integer_literal() IInteger_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInteger_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInteger_literalContext)
}

func (s *Expression_higher_prec_than_andContext) Numeric_literal() INumeric_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumeric_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumeric_literalContext)
}

func (s *Expression_higher_prec_than_andContext) Bignumeric_literal() IBignumeric_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBignumeric_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBignumeric_literalContext)
}

func (s *Expression_higher_prec_than_andContext) Json_literal() IJson_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJson_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJson_literalContext)
}

func (s *Expression_higher_prec_than_andContext) Floating_point_literal() IFloating_point_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFloating_point_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFloating_point_literalContext)
}

func (s *Expression_higher_prec_than_andContext) Date_or_time_literal() IDate_or_time_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDate_or_time_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDate_or_time_literalContext)
}

func (s *Expression_higher_prec_than_andContext) Range_literal() IRange_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRange_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRange_literalContext)
}

func (s *Expression_higher_prec_than_andContext) Parameter_expression() IParameter_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParameter_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParameter_expressionContext)
}

func (s *Expression_higher_prec_than_andContext) System_variable_expression() ISystem_variable_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISystem_variable_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISystem_variable_expressionContext)
}

func (s *Expression_higher_prec_than_andContext) Array_constructor() IArray_constructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArray_constructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArray_constructorContext)
}

func (s *Expression_higher_prec_than_andContext) New_constructor() INew_constructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INew_constructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INew_constructorContext)
}

func (s *Expression_higher_prec_than_andContext) Braced_constructor() IBraced_constructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBraced_constructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBraced_constructorContext)
}

func (s *Expression_higher_prec_than_andContext) Braced_new_constructor() IBraced_new_constructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBraced_new_constructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBraced_new_constructorContext)
}

func (s *Expression_higher_prec_than_andContext) Struct_braced_constructor() IStruct_braced_constructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_braced_constructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_braced_constructorContext)
}

func (s *Expression_higher_prec_than_andContext) Case_expression() ICase_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICase_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICase_expressionContext)
}

func (s *Expression_higher_prec_than_andContext) Cast_expression() ICast_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICast_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICast_expressionContext)
}

func (s *Expression_higher_prec_than_andContext) Extract_expression() IExtract_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExtract_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExtract_expressionContext)
}

func (s *Expression_higher_prec_than_andContext) With_expression() IWith_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_expressionContext)
}

func (s *Expression_higher_prec_than_andContext) Replace_fields_expression() IReplace_fields_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReplace_fields_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReplace_fields_expressionContext)
}

func (s *Expression_higher_prec_than_andContext) Function_call_expression_with_clauses() IFunction_call_expression_with_clausesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunction_call_expression_with_clausesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunction_call_expression_with_clausesContext)
}

func (s *Expression_higher_prec_than_andContext) Interval_expression() IInterval_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterval_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterval_expressionContext)
}

func (s *Expression_higher_prec_than_andContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Expression_higher_prec_than_andContext) Struct_constructor() IStruct_constructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_constructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_constructorContext)
}

func (s *Expression_higher_prec_than_andContext) Expression_subquery_with_keyword() IExpression_subquery_with_keywordContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpression_subquery_with_keywordContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpression_subquery_with_keywordContext)
}

func (s *Expression_higher_prec_than_andContext) NOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNOT_SYMBOL, 0)
}

func (s *Expression_higher_prec_than_andContext) AllExpression_higher_prec_than_and() []IExpression_higher_prec_than_andContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpression_higher_prec_than_andContext); ok {
			len++
		}
	}

	tst := make([]IExpression_higher_prec_than_andContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpression_higher_prec_than_andContext); ok {
			tst[i] = t.(IExpression_higher_prec_than_andContext)
			i++
		}
	}

	return tst
}

func (s *Expression_higher_prec_than_andContext) Expression_higher_prec_than_and(i int) IExpression_higher_prec_than_andContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpression_higher_prec_than_andContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpression_higher_prec_than_andContext)
}

func (s *Expression_higher_prec_than_andContext) Unary_operator() IUnary_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnary_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnary_operatorContext)
}

func (s *Expression_higher_prec_than_andContext) Parenthesized_expression_not_a_query() IParenthesized_expression_not_a_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesized_expression_not_a_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesized_expression_not_a_queryContext)
}

func (s *Expression_higher_prec_than_andContext) Parenthesized_query() IParenthesized_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesized_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesized_queryContext)
}

func (s *Expression_higher_prec_than_andContext) Like_operator() ILike_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_operatorContext)
}

func (s *Expression_higher_prec_than_andContext) Distinct_operator() IDistinct_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDistinct_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDistinct_operatorContext)
}

func (s *Expression_higher_prec_than_andContext) Between_operator() IBetween_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBetween_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBetween_operatorContext)
}

func (s *Expression_higher_prec_than_andContext) AND_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAND_SYMBOL, 0)
}

func (s *Expression_higher_prec_than_andContext) Comparative_operator() IComparative_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComparative_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComparative_operatorContext)
}

func (s *Expression_higher_prec_than_andContext) STROKE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTROKE_SYMBOL, 0)
}

func (s *Expression_higher_prec_than_andContext) CIRCUMFLEX_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCIRCUMFLEX_SYMBOL, 0)
}

func (s *Expression_higher_prec_than_andContext) BIT_AND_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBIT_AND_SYMBOL, 0)
}

func (s *Expression_higher_prec_than_andContext) BOOL_OR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBOOL_OR_SYMBOL, 0)
}

func (s *Expression_higher_prec_than_andContext) Shift_operator() IShift_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShift_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShift_operatorContext)
}

func (s *Expression_higher_prec_than_andContext) Additive_operator() IAdditive_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAdditive_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAdditive_operatorContext)
}

func (s *Expression_higher_prec_than_andContext) Multiplicative_operator() IMultiplicative_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMultiplicative_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMultiplicative_operatorContext)
}

func (s *Expression_higher_prec_than_andContext) LS_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLS_BRACKET_SYMBOL, 0)
}

func (s *Expression_higher_prec_than_andContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Expression_higher_prec_than_andContext) RS_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRS_BRACKET_SYMBOL, 0)
}

func (s *Expression_higher_prec_than_andContext) DOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDOT_SYMBOL, 0)
}

func (s *Expression_higher_prec_than_andContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Expression_higher_prec_than_andContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Expression_higher_prec_than_andContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Expression_higher_prec_than_andContext) Any_some_all() IAny_some_allContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_some_allContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_some_allContext)
}

func (s *Expression_higher_prec_than_andContext) Unnest_expression() IUnnest_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnnest_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnnest_expressionContext)
}

func (s *Expression_higher_prec_than_andContext) Hint() IHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHintContext)
}

func (s *Expression_higher_prec_than_andContext) Parenthesized_anysomeall_list_in_rhs() IParenthesized_anysomeall_list_in_rhsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesized_anysomeall_list_in_rhsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesized_anysomeall_list_in_rhsContext)
}

func (s *Expression_higher_prec_than_andContext) In_operator() IIn_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIn_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIn_operatorContext)
}

func (s *Expression_higher_prec_than_andContext) Parenthesized_in_rhs() IParenthesized_in_rhsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesized_in_rhsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesized_in_rhsContext)
}

func (s *Expression_higher_prec_than_andContext) OR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOR_SYMBOL, 0)
}

func (s *Expression_higher_prec_than_andContext) Is_operator() IIs_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIs_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIs_operatorContext)
}

func (s *Expression_higher_prec_than_andContext) UNKNOWN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNKNOWN_SYMBOL, 0)
}

func (s *Expression_higher_prec_than_andContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_higher_prec_than_andContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expression_higher_prec_than_andContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterExpression_higher_prec_than_and(s)
	}
}

func (s *Expression_higher_prec_than_andContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitExpression_higher_prec_than_and(s)
	}
}

func (s *Expression_higher_prec_than_andContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitExpression_higher_prec_than_and(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Expression_higher_prec_than_and() (localctx IExpression_higher_prec_than_andContext) {
	return p.expression_higher_prec_than_and(0)
}

func (p *GoogleSQLParser) expression_higher_prec_than_and(_p int) (localctx IExpression_higher_prec_than_andContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewExpression_higher_prec_than_andContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpression_higher_prec_than_andContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 400
	p.EnterRecursionRule(localctx, 400, GoogleSQLParserRULE_expression_higher_prec_than_and, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2621)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 275, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2586)
			p.Null_literal()
		}

	case 2:
		{
			p.SetState(2587)
			p.Boolean_literal()
		}

	case 3:
		{
			p.SetState(2588)
			p.string_literal(0)
		}

	case 4:
		{
			p.SetState(2589)
			p.bytes_literal(0)
		}

	case 5:
		{
			p.SetState(2590)
			p.Integer_literal()
		}

	case 6:
		{
			p.SetState(2591)
			p.Numeric_literal()
		}

	case 7:
		{
			p.SetState(2592)
			p.Bignumeric_literal()
		}

	case 8:
		{
			p.SetState(2593)
			p.Json_literal()
		}

	case 9:
		{
			p.SetState(2594)
			p.Floating_point_literal()
		}

	case 10:
		{
			p.SetState(2595)
			p.Date_or_time_literal()
		}

	case 11:
		{
			p.SetState(2596)
			p.Range_literal()
		}

	case 12:
		{
			p.SetState(2597)
			p.Parameter_expression()
		}

	case 13:
		{
			p.SetState(2598)
			p.System_variable_expression()
		}

	case 14:
		{
			p.SetState(2599)
			p.Array_constructor()
		}

	case 15:
		{
			p.SetState(2600)
			p.New_constructor()
		}

	case 16:
		{
			p.SetState(2601)
			p.Braced_constructor()
		}

	case 17:
		{
			p.SetState(2602)
			p.Braced_new_constructor()
		}

	case 18:
		{
			p.SetState(2603)
			p.Struct_braced_constructor()
		}

	case 19:
		{
			p.SetState(2604)
			p.Case_expression()
		}

	case 20:
		{
			p.SetState(2605)
			p.Cast_expression()
		}

	case 21:
		{
			p.SetState(2606)
			p.Extract_expression()
		}

	case 22:
		{
			p.SetState(2607)
			p.With_expression()
		}

	case 23:
		{
			p.SetState(2608)
			p.Replace_fields_expression()
		}

	case 24:
		{
			p.SetState(2609)
			p.Function_call_expression_with_clauses()
		}

	case 25:
		{
			p.SetState(2610)
			p.Interval_expression()
		}

	case 26:
		{
			p.SetState(2611)
			p.Identifier()
		}

	case 27:
		{
			p.SetState(2612)
			p.Struct_constructor()
		}

	case 28:
		{
			p.SetState(2613)
			p.Expression_subquery_with_keyword()
		}

	case 29:
		{
			p.SetState(2614)
			p.Match(GoogleSQLParserNOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2615)
			p.expression_higher_prec_than_and(23)
		}

	case 30:
		{
			p.SetState(2616)
			p.Unary_operator()
		}
		{
			p.SetState(2617)
			p.expression_higher_prec_than_and(3)
		}

	case 31:
		{
			p.SetState(2619)
			p.Parenthesized_expression_not_a_query()
		}

	case 32:
		{
			p.SetState(2620)
			p.Parenthesized_query()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2730)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 281, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2728)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 280, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(2623)

				if !(p.Precpred(p.GetParserRuleContext(), 20)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 20)", ""))
					goto errorExit
				}
				{
					p.SetState(2624)
					p.Like_operator()
				}
				{
					p.SetState(2625)
					p.expression_higher_prec_than_and(21)
				}

			case 2:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(2627)

				if !(p.Precpred(p.GetParserRuleContext(), 19)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 19)", ""))
					goto errorExit
				}
				{
					p.SetState(2628)
					p.Distinct_operator()
				}
				{
					p.SetState(2629)
					p.expression_higher_prec_than_and(20)
				}

			case 3:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(2631)

				if !(p.Precpred(p.GetParserRuleContext(), 16)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 16)", ""))
					goto errorExit
				}
				{
					p.SetState(2632)
					p.Between_operator()
				}
				{
					p.SetState(2633)
					p.expression_higher_prec_than_and(0)
				}
				{
					p.SetState(2634)
					p.Match(GoogleSQLParserAND_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2635)
					p.expression_higher_prec_than_and(17)
				}

			case 4:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(2637)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
					goto errorExit
				}
				{
					p.SetState(2638)
					p.Comparative_operator()
				}
				{
					p.SetState(2639)
					p.expression_higher_prec_than_and(12)
				}

			case 5:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(2641)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
					goto errorExit
				}
				{
					p.SetState(2642)
					p.Match(GoogleSQLParserSTROKE_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2643)
					p.expression_higher_prec_than_and(11)
				}

			case 6:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(2644)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
					goto errorExit
				}
				{
					p.SetState(2645)
					p.Match(GoogleSQLParserCIRCUMFLEX_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2646)
					p.expression_higher_prec_than_and(10)
				}

			case 7:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(2647)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
					goto errorExit
				}
				{
					p.SetState(2648)
					p.Match(GoogleSQLParserBIT_AND_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2649)
					p.expression_higher_prec_than_and(9)
				}

			case 8:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(2650)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
					goto errorExit
				}
				{
					p.SetState(2651)
					p.Match(GoogleSQLParserBOOL_OR_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2652)
					p.expression_higher_prec_than_and(8)
				}

			case 9:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(2653)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
					goto errorExit
				}
				{
					p.SetState(2654)
					p.Shift_operator()
				}
				{
					p.SetState(2655)
					p.expression_higher_prec_than_and(7)
				}

			case 10:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(2657)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
					goto errorExit
				}
				{
					p.SetState(2658)
					p.Additive_operator()
				}
				{
					p.SetState(2659)
					p.expression_higher_prec_than_and(6)
				}

			case 11:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(2661)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
					goto errorExit
				}
				{
					p.SetState(2662)
					p.Multiplicative_operator()
				}
				{
					p.SetState(2663)
					p.expression_higher_prec_than_and(5)
				}

			case 12:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(2665)

				if !(p.Precpred(p.GetParserRuleContext(), 26)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 26)", ""))
					goto errorExit
				}
				{
					p.SetState(2666)
					p.Match(GoogleSQLParserLS_BRACKET_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2667)
					p.expression(0)
				}
				{
					p.SetState(2668)
					p.Match(GoogleSQLParserRS_BRACKET_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 13:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(2670)

				if !(p.Precpred(p.GetParserRuleContext(), 25)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 25)", ""))
					goto errorExit
				}
				{
					p.SetState(2671)
					p.Match(GoogleSQLParserDOT_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2672)
					p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2673)
					p.Path_expression()
				}
				{
					p.SetState(2674)
					p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 14:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(2676)

				if !(p.Precpred(p.GetParserRuleContext(), 24)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 24)", ""))
					goto errorExit
				}
				{
					p.SetState(2677)
					p.Match(GoogleSQLParserDOT_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2678)
					p.Identifier()
				}

			case 15:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(2679)

				if !(p.Precpred(p.GetParserRuleContext(), 22)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 22)", ""))
					goto errorExit
				}
				{
					p.SetState(2680)
					p.Like_operator()
				}
				{
					p.SetState(2681)
					p.Any_some_all()
				}
				p.SetState(2683)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == GoogleSQLParserAT_SYMBOL {
					{
						p.SetState(2682)
						p.Hint()
					}

				}
				{
					p.SetState(2685)
					p.Unnest_expression()
				}

			case 16:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(2687)

				if !(p.Precpred(p.GetParserRuleContext(), 21)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 21)", ""))
					goto errorExit
				}
				{
					p.SetState(2688)
					p.Like_operator()
				}
				{
					p.SetState(2689)
					p.Any_some_all()
				}
				p.SetState(2691)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == GoogleSQLParserAT_SYMBOL {
					{
						p.SetState(2690)
						p.Hint()
					}

				}
				{
					p.SetState(2693)
					p.Parenthesized_anysomeall_list_in_rhs()
				}

			case 17:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(2695)

				if !(p.Precpred(p.GetParserRuleContext(), 18)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 18)", ""))
					goto errorExit
				}
				{
					p.SetState(2696)
					p.In_operator()
				}
				p.SetState(2698)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == GoogleSQLParserAT_SYMBOL {
					{
						p.SetState(2697)
						p.Hint()
					}

				}
				{
					p.SetState(2700)
					p.Unnest_expression()
				}

				if localctx.Hint() != nil {
					p.NotifyErrorListeners("Syntax error: HINTs cannot be specified on IN clause with UNNEST", nil, nil)
				}

			case 18:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(2703)

				if !(p.Precpred(p.GetParserRuleContext(), 17)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 17)", ""))
					goto errorExit
				}
				{
					p.SetState(2704)
					p.In_operator()
				}
				p.SetState(2706)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == GoogleSQLParserAT_SYMBOL {
					{
						p.SetState(2705)
						p.Hint()
					}

				}
				{
					p.SetState(2708)
					p.Parenthesized_in_rhs()
				}

			case 19:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(2710)

				if !(p.Precpred(p.GetParserRuleContext(), 15)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 15)", ""))
					goto errorExit
				}
				{
					p.SetState(2711)
					p.Between_operator()
				}
				{
					p.SetState(2712)
					p.expression_higher_prec_than_and(0)
				}
				{
					p.SetState(2713)
					p.Match(GoogleSQLParserOR_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.NotifyErrorListeners("Syntax error: Expression in BETWEEN must be parenthesized", nil, nil)

			case 20:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(2716)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
					goto errorExit
				}
				{
					p.SetState(2717)
					p.Is_operator()
				}
				{
					p.SetState(2718)
					p.Match(GoogleSQLParserUNKNOWN_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 21:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(2720)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
					goto errorExit
				}
				{
					p.SetState(2721)
					p.Is_operator()
				}
				{
					p.SetState(2722)
					p.Null_literal()
				}

			case 22:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(2724)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
					goto errorExit
				}
				{
					p.SetState(2725)
					p.Is_operator()
				}
				{
					p.SetState(2726)
					p.Boolean_literal()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(2732)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 281, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpression_maybe_parenthesized_not_a_queryContext is an interface to support dynamic dispatch.
type IExpression_maybe_parenthesized_not_a_queryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Parenthesized_expression_not_a_query() IParenthesized_expression_not_a_queryContext
	Null_literal() INull_literalContext
	Boolean_literal() IBoolean_literalContext
	String_literal() IString_literalContext
	Bytes_literal() IBytes_literalContext
	Integer_literal() IInteger_literalContext
	Numeric_literal() INumeric_literalContext
	Bignumeric_literal() IBignumeric_literalContext
	Json_literal() IJson_literalContext
	Floating_point_literal() IFloating_point_literalContext
	Date_or_time_literal() IDate_or_time_literalContext
	Range_literal() IRange_literalContext
	Parameter_expression() IParameter_expressionContext
	System_variable_expression() ISystem_variable_expressionContext
	Array_constructor() IArray_constructorContext
	New_constructor() INew_constructorContext
	Braced_constructor() IBraced_constructorContext
	Braced_new_constructor() IBraced_new_constructorContext
	Struct_braced_constructor() IStruct_braced_constructorContext
	Case_expression() ICase_expressionContext
	Cast_expression() ICast_expressionContext
	Extract_expression() IExtract_expressionContext
	With_expression() IWith_expressionContext
	Replace_fields_expression() IReplace_fields_expressionContext
	Function_call_expression_with_clauses() IFunction_call_expression_with_clausesContext
	Interval_expression() IInterval_expressionContext
	Identifier() IIdentifierContext
	Struct_constructor() IStruct_constructorContext
	Expression_subquery_with_keyword() IExpression_subquery_with_keywordContext
	AllExpression_higher_prec_than_and() []IExpression_higher_prec_than_andContext
	Expression_higher_prec_than_and(i int) IExpression_higher_prec_than_andContext
	LS_BRACKET_SYMBOL() antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	RS_BRACKET_SYMBOL() antlr.TerminalNode
	DOT_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	NOT_SYMBOL() antlr.TerminalNode
	Like_operator() ILike_operatorContext
	Any_some_all() IAny_some_allContext
	Unnest_expression() IUnnest_expressionContext
	Hint() IHintContext
	Parenthesized_anysomeall_list_in_rhs() IParenthesized_anysomeall_list_in_rhsContext
	Distinct_operator() IDistinct_operatorContext
	In_operator() IIn_operatorContext
	Parenthesized_in_rhs() IParenthesized_in_rhsContext
	Between_operator() IBetween_operatorContext
	AND_SYMBOL() antlr.TerminalNode
	OR_SYMBOL() antlr.TerminalNode
	Is_operator() IIs_operatorContext
	UNKNOWN_SYMBOL() antlr.TerminalNode
	Comparative_operator() IComparative_operatorContext
	STROKE_SYMBOL() antlr.TerminalNode
	CIRCUMFLEX_SYMBOL() antlr.TerminalNode
	BIT_AND_SYMBOL() antlr.TerminalNode
	BOOL_OR_SYMBOL() antlr.TerminalNode
	Shift_operator() IShift_operatorContext
	Additive_operator() IAdditive_operatorContext
	Multiplicative_operator() IMultiplicative_operatorContext
	Unary_operator() IUnary_operatorContext
	And_expression() IAnd_expressionContext

	// IsExpression_maybe_parenthesized_not_a_queryContext differentiates from other interfaces.
	IsExpression_maybe_parenthesized_not_a_queryContext()
}

type Expression_maybe_parenthesized_not_a_queryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_maybe_parenthesized_not_a_queryContext() *Expression_maybe_parenthesized_not_a_queryContext {
	var p = new(Expression_maybe_parenthesized_not_a_queryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expression_maybe_parenthesized_not_a_query
	return p
}

func InitEmptyExpression_maybe_parenthesized_not_a_queryContext(p *Expression_maybe_parenthesized_not_a_queryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expression_maybe_parenthesized_not_a_query
}

func (*Expression_maybe_parenthesized_not_a_queryContext) IsExpression_maybe_parenthesized_not_a_queryContext() {
}

func NewExpression_maybe_parenthesized_not_a_queryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_maybe_parenthesized_not_a_queryContext {
	var p = new(Expression_maybe_parenthesized_not_a_queryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_expression_maybe_parenthesized_not_a_query

	return p
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_maybe_parenthesized_not_a_queryContext) Parenthesized_expression_not_a_query() IParenthesized_expression_not_a_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesized_expression_not_a_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesized_expression_not_a_queryContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Null_literal() INull_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INull_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INull_literalContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Boolean_literal() IBoolean_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBoolean_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBoolean_literalContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Bytes_literal() IBytes_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBytes_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBytes_literalContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Integer_literal() IInteger_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInteger_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInteger_literalContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Numeric_literal() INumeric_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumeric_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumeric_literalContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Bignumeric_literal() IBignumeric_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBignumeric_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBignumeric_literalContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Json_literal() IJson_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJson_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJson_literalContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Floating_point_literal() IFloating_point_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFloating_point_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFloating_point_literalContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Date_or_time_literal() IDate_or_time_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDate_or_time_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDate_or_time_literalContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Range_literal() IRange_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRange_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRange_literalContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Parameter_expression() IParameter_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParameter_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParameter_expressionContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) System_variable_expression() ISystem_variable_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISystem_variable_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISystem_variable_expressionContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Array_constructor() IArray_constructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArray_constructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArray_constructorContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) New_constructor() INew_constructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INew_constructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INew_constructorContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Braced_constructor() IBraced_constructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBraced_constructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBraced_constructorContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Braced_new_constructor() IBraced_new_constructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBraced_new_constructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBraced_new_constructorContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Struct_braced_constructor() IStruct_braced_constructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_braced_constructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_braced_constructorContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Case_expression() ICase_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICase_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICase_expressionContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Cast_expression() ICast_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICast_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICast_expressionContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Extract_expression() IExtract_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExtract_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExtract_expressionContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) With_expression() IWith_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_expressionContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Replace_fields_expression() IReplace_fields_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReplace_fields_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReplace_fields_expressionContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Function_call_expression_with_clauses() IFunction_call_expression_with_clausesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunction_call_expression_with_clausesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunction_call_expression_with_clausesContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Interval_expression() IInterval_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterval_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterval_expressionContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Struct_constructor() IStruct_constructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_constructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_constructorContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Expression_subquery_with_keyword() IExpression_subquery_with_keywordContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpression_subquery_with_keywordContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpression_subquery_with_keywordContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) AllExpression_higher_prec_than_and() []IExpression_higher_prec_than_andContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpression_higher_prec_than_andContext); ok {
			len++
		}
	}

	tst := make([]IExpression_higher_prec_than_andContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpression_higher_prec_than_andContext); ok {
			tst[i] = t.(IExpression_higher_prec_than_andContext)
			i++
		}
	}

	return tst
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Expression_higher_prec_than_and(i int) IExpression_higher_prec_than_andContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpression_higher_prec_than_andContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpression_higher_prec_than_andContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) LS_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLS_BRACKET_SYMBOL, 0)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) RS_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRS_BRACKET_SYMBOL, 0)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) DOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDOT_SYMBOL, 0)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) NOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNOT_SYMBOL, 0)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Like_operator() ILike_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_operatorContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Any_some_all() IAny_some_allContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_some_allContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_some_allContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Unnest_expression() IUnnest_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnnest_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnnest_expressionContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Hint() IHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHintContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Parenthesized_anysomeall_list_in_rhs() IParenthesized_anysomeall_list_in_rhsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesized_anysomeall_list_in_rhsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesized_anysomeall_list_in_rhsContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Distinct_operator() IDistinct_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDistinct_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDistinct_operatorContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) In_operator() IIn_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIn_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIn_operatorContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Parenthesized_in_rhs() IParenthesized_in_rhsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesized_in_rhsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesized_in_rhsContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Between_operator() IBetween_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBetween_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBetween_operatorContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) AND_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAND_SYMBOL, 0)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) OR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOR_SYMBOL, 0)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Is_operator() IIs_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIs_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIs_operatorContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) UNKNOWN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNKNOWN_SYMBOL, 0)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Comparative_operator() IComparative_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComparative_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComparative_operatorContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) STROKE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTROKE_SYMBOL, 0)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) CIRCUMFLEX_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCIRCUMFLEX_SYMBOL, 0)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) BIT_AND_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBIT_AND_SYMBOL, 0)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) BOOL_OR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBOOL_OR_SYMBOL, 0)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Shift_operator() IShift_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShift_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShift_operatorContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Additive_operator() IAdditive_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAdditive_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAdditive_operatorContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Multiplicative_operator() IMultiplicative_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMultiplicative_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMultiplicative_operatorContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Unary_operator() IUnary_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnary_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnary_operatorContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) And_expression() IAnd_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnd_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnd_expressionContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterExpression_maybe_parenthesized_not_a_query(s)
	}
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitExpression_maybe_parenthesized_not_a_query(s)
	}
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitExpression_maybe_parenthesized_not_a_query(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Expression_maybe_parenthesized_not_a_query() (localctx IExpression_maybe_parenthesized_not_a_queryContext) {
	localctx = NewExpression_maybe_parenthesized_not_a_queryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 402, GoogleSQLParserRULE_expression_maybe_parenthesized_not_a_query)
	var _la int

	p.SetState(2882)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 286, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2733)
			p.Parenthesized_expression_not_a_query()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2734)
			p.Null_literal()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2735)
			p.Boolean_literal()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2736)
			p.string_literal(0)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2737)
			p.bytes_literal(0)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2738)
			p.Integer_literal()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2739)
			p.Numeric_literal()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2740)
			p.Bignumeric_literal()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2741)
			p.Json_literal()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(2742)
			p.Floating_point_literal()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(2743)
			p.Date_or_time_literal()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(2744)
			p.Range_literal()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(2745)
			p.Parameter_expression()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(2746)
			p.System_variable_expression()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(2747)
			p.Array_constructor()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(2748)
			p.New_constructor()
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(2749)
			p.Braced_constructor()
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(2750)
			p.Braced_new_constructor()
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(2751)
			p.Struct_braced_constructor()
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(2752)
			p.Case_expression()
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(2753)
			p.Cast_expression()
		}

	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(2754)
			p.Extract_expression()
		}

	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(2755)
			p.With_expression()
		}

	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(2756)
			p.Replace_fields_expression()
		}

	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(2757)
			p.Function_call_expression_with_clauses()
		}

	case 26:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(2758)
			p.Interval_expression()
		}

	case 27:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(2759)
			p.Identifier()
		}

	case 28:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(2760)
			p.Struct_constructor()
		}

	case 29:
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(2761)
			p.Expression_subquery_with_keyword()
		}

	case 30:
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(2762)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(2763)
			p.Match(GoogleSQLParserLS_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2764)
			p.expression(0)
		}
		{
			p.SetState(2765)
			p.Match(GoogleSQLParserRS_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 31:
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(2767)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(2768)
			p.Match(GoogleSQLParserDOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2769)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2770)
			p.Path_expression()
		}
		{
			p.SetState(2771)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 32:
		p.EnterOuterAlt(localctx, 32)
		{
			p.SetState(2773)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(2774)
			p.Match(GoogleSQLParserDOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2775)
			p.Identifier()
		}

	case 33:
		p.EnterOuterAlt(localctx, 33)
		{
			p.SetState(2777)
			p.Match(GoogleSQLParserNOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2778)
			p.expression_higher_prec_than_and(0)
		}

	case 34:
		p.EnterOuterAlt(localctx, 34)
		{
			p.SetState(2779)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(2780)
			p.Like_operator()
		}
		{
			p.SetState(2781)
			p.Any_some_all()
		}
		p.SetState(2783)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAT_SYMBOL {
			{
				p.SetState(2782)
				p.Hint()
			}

		}
		{
			p.SetState(2785)
			p.Unnest_expression()
		}

	case 35:
		p.EnterOuterAlt(localctx, 35)
		{
			p.SetState(2787)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(2788)
			p.Like_operator()
		}
		{
			p.SetState(2789)
			p.Any_some_all()
		}
		p.SetState(2791)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAT_SYMBOL {
			{
				p.SetState(2790)
				p.Hint()
			}

		}
		{
			p.SetState(2793)
			p.Parenthesized_anysomeall_list_in_rhs()
		}

	case 36:
		p.EnterOuterAlt(localctx, 36)
		{
			p.SetState(2795)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(2796)
			p.Like_operator()
		}
		{
			p.SetState(2797)
			p.expression_higher_prec_than_and(0)
		}

	case 37:
		p.EnterOuterAlt(localctx, 37)
		{
			p.SetState(2799)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(2800)
			p.Distinct_operator()
		}
		{
			p.SetState(2801)
			p.expression_higher_prec_than_and(0)
		}

	case 38:
		p.EnterOuterAlt(localctx, 38)
		{
			p.SetState(2803)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(2804)
			p.In_operator()
		}
		p.SetState(2806)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAT_SYMBOL {
			{
				p.SetState(2805)
				p.Hint()
			}

		}
		{
			p.SetState(2808)
			p.Unnest_expression()
		}

		if localctx.Hint() != nil {
			p.NotifyErrorListeners("Syntax error: HINTs cannot be specified on IN clause with UNNEST", nil, nil)
		}

	case 39:
		p.EnterOuterAlt(localctx, 39)
		{
			p.SetState(2811)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(2812)
			p.In_operator()
		}
		p.SetState(2814)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAT_SYMBOL {
			{
				p.SetState(2813)
				p.Hint()
			}

		}
		{
			p.SetState(2816)
			p.Parenthesized_in_rhs()
		}

	case 40:
		p.EnterOuterAlt(localctx, 40)
		{
			p.SetState(2818)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(2819)
			p.Between_operator()
		}
		{
			p.SetState(2820)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(2821)
			p.Match(GoogleSQLParserAND_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2822)
			p.expression_higher_prec_than_and(0)
		}

	case 41:
		p.EnterOuterAlt(localctx, 41)
		{
			p.SetState(2824)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(2825)
			p.Between_operator()
		}
		{
			p.SetState(2826)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(2827)
			p.Match(GoogleSQLParserOR_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.NotifyErrorListeners("Syntax error: Expression in BETWEEN must be parenthesized", nil, nil)

	case 42:
		p.EnterOuterAlt(localctx, 42)
		{
			p.SetState(2830)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(2831)
			p.Is_operator()
		}
		{
			p.SetState(2832)
			p.Match(GoogleSQLParserUNKNOWN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 43:
		p.EnterOuterAlt(localctx, 43)
		{
			p.SetState(2834)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(2835)
			p.Is_operator()
		}
		{
			p.SetState(2836)
			p.Null_literal()
		}

	case 44:
		p.EnterOuterAlt(localctx, 44)
		{
			p.SetState(2838)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(2839)
			p.Is_operator()
		}
		{
			p.SetState(2840)
			p.Boolean_literal()
		}

	case 45:
		p.EnterOuterAlt(localctx, 45)
		{
			p.SetState(2842)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(2843)
			p.Comparative_operator()
		}
		{
			p.SetState(2844)
			p.expression_higher_prec_than_and(0)
		}

	case 46:
		p.EnterOuterAlt(localctx, 46)
		{
			p.SetState(2846)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(2847)
			p.Match(GoogleSQLParserSTROKE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2848)
			p.expression_higher_prec_than_and(0)
		}

	case 47:
		p.EnterOuterAlt(localctx, 47)
		{
			p.SetState(2850)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(2851)
			p.Match(GoogleSQLParserCIRCUMFLEX_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2852)
			p.expression_higher_prec_than_and(0)
		}

	case 48:
		p.EnterOuterAlt(localctx, 48)
		{
			p.SetState(2854)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(2855)
			p.Match(GoogleSQLParserBIT_AND_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2856)
			p.expression_higher_prec_than_and(0)
		}

	case 49:
		p.EnterOuterAlt(localctx, 49)
		{
			p.SetState(2858)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(2859)
			p.Match(GoogleSQLParserBOOL_OR_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2860)
			p.expression_higher_prec_than_and(0)
		}

	case 50:
		p.EnterOuterAlt(localctx, 50)
		{
			p.SetState(2862)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(2863)
			p.Shift_operator()
		}
		{
			p.SetState(2864)
			p.expression_higher_prec_than_and(0)
		}

	case 51:
		p.EnterOuterAlt(localctx, 51)
		{
			p.SetState(2866)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(2867)
			p.Additive_operator()
		}
		{
			p.SetState(2868)
			p.expression_higher_prec_than_and(0)
		}

	case 52:
		p.EnterOuterAlt(localctx, 52)
		{
			p.SetState(2870)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(2871)
			p.Multiplicative_operator()
		}
		{
			p.SetState(2872)
			p.expression_higher_prec_than_and(0)
		}

	case 53:
		p.EnterOuterAlt(localctx, 53)
		{
			p.SetState(2874)
			p.Unary_operator()
		}
		{
			p.SetState(2875)
			p.expression_higher_prec_than_and(0)
		}

	case 54:
		p.EnterOuterAlt(localctx, 54)
		{
			p.SetState(2877)
			p.And_expression()
		}

	case 55:
		p.EnterOuterAlt(localctx, 55)
		{
			p.SetState(2878)
			p.expression(0)
		}
		{
			p.SetState(2879)
			p.Match(GoogleSQLParserOR_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2880)
			p.expression(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IParenthesized_in_rhsContext is an interface to support dynamic dispatch.
type IParenthesized_in_rhsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Parenthesized_query() IParenthesized_queryContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Expression_maybe_parenthesized_not_a_query() IExpression_maybe_parenthesized_not_a_queryContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	In_list_two_or_more_prefix() IIn_list_two_or_more_prefixContext

	// IsParenthesized_in_rhsContext differentiates from other interfaces.
	IsParenthesized_in_rhsContext()
}

type Parenthesized_in_rhsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParenthesized_in_rhsContext() *Parenthesized_in_rhsContext {
	var p = new(Parenthesized_in_rhsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_parenthesized_in_rhs
	return p
}

func InitEmptyParenthesized_in_rhsContext(p *Parenthesized_in_rhsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_parenthesized_in_rhs
}

func (*Parenthesized_in_rhsContext) IsParenthesized_in_rhsContext() {}

func NewParenthesized_in_rhsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parenthesized_in_rhsContext {
	var p = new(Parenthesized_in_rhsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_parenthesized_in_rhs

	return p
}

func (s *Parenthesized_in_rhsContext) GetParser() antlr.Parser { return s.parser }

func (s *Parenthesized_in_rhsContext) Parenthesized_query() IParenthesized_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesized_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesized_queryContext)
}

func (s *Parenthesized_in_rhsContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Parenthesized_in_rhsContext) Expression_maybe_parenthesized_not_a_query() IExpression_maybe_parenthesized_not_a_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpression_maybe_parenthesized_not_a_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpression_maybe_parenthesized_not_a_queryContext)
}

func (s *Parenthesized_in_rhsContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Parenthesized_in_rhsContext) In_list_two_or_more_prefix() IIn_list_two_or_more_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIn_list_two_or_more_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIn_list_two_or_more_prefixContext)
}

func (s *Parenthesized_in_rhsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parenthesized_in_rhsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Parenthesized_in_rhsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterParenthesized_in_rhs(s)
	}
}

func (s *Parenthesized_in_rhsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitParenthesized_in_rhs(s)
	}
}

func (s *Parenthesized_in_rhsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitParenthesized_in_rhs(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Parenthesized_in_rhs() (localctx IParenthesized_in_rhsContext) {
	localctx = NewParenthesized_in_rhsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 404, GoogleSQLParserRULE_parenthesized_in_rhs)
	p.SetState(2892)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 287, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2884)
			p.Parenthesized_query()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2885)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2886)
			p.Expression_maybe_parenthesized_not_a_query()
		}
		{
			p.SetState(2887)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2889)
			p.In_list_two_or_more_prefix()
		}
		{
			p.SetState(2890)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnary_operatorContext is an interface to support dynamic dispatch.
type IUnary_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PLUS_OPERATOR() antlr.TerminalNode
	MINUS_OPERATOR() antlr.TerminalNode
	BITWISE_NOT_OPERATOR() antlr.TerminalNode

	// IsUnary_operatorContext differentiates from other interfaces.
	IsUnary_operatorContext()
}

type Unary_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnary_operatorContext() *Unary_operatorContext {
	var p = new(Unary_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unary_operator
	return p
}

func InitEmptyUnary_operatorContext(p *Unary_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unary_operator
}

func (*Unary_operatorContext) IsUnary_operatorContext() {}

func NewUnary_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unary_operatorContext {
	var p = new(Unary_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_unary_operator

	return p
}

func (s *Unary_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Unary_operatorContext) PLUS_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPLUS_OPERATOR, 0)
}

func (s *Unary_operatorContext) MINUS_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMINUS_OPERATOR, 0)
}

func (s *Unary_operatorContext) BITWISE_NOT_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBITWISE_NOT_OPERATOR, 0)
}

func (s *Unary_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unary_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unary_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUnary_operator(s)
	}
}

func (s *Unary_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUnary_operator(s)
	}
}

func (s *Unary_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUnary_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Unary_operator() (localctx IUnary_operatorContext) {
	localctx = NewUnary_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 406, GoogleSQLParserRULE_unary_operator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2894)
		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&19456) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IComparative_operatorContext is an interface to support dynamic dispatch.
type IComparative_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EQUAL_OPERATOR() antlr.TerminalNode
	NOT_EQUAL_OPERATOR() antlr.TerminalNode
	NOT_EQUAL2_OPERATOR() antlr.TerminalNode
	LT_OPERATOR() antlr.TerminalNode
	LE_OPERATOR() antlr.TerminalNode
	GT_OPERATOR() antlr.TerminalNode
	GE_OPERATOR() antlr.TerminalNode

	// IsComparative_operatorContext differentiates from other interfaces.
	IsComparative_operatorContext()
}

type Comparative_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComparative_operatorContext() *Comparative_operatorContext {
	var p = new(Comparative_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_comparative_operator
	return p
}

func InitEmptyComparative_operatorContext(p *Comparative_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_comparative_operator
}

func (*Comparative_operatorContext) IsComparative_operatorContext() {}

func NewComparative_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Comparative_operatorContext {
	var p = new(Comparative_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_comparative_operator

	return p
}

func (s *Comparative_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Comparative_operatorContext) EQUAL_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEQUAL_OPERATOR, 0)
}

func (s *Comparative_operatorContext) NOT_EQUAL_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNOT_EQUAL_OPERATOR, 0)
}

func (s *Comparative_operatorContext) NOT_EQUAL2_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNOT_EQUAL2_OPERATOR, 0)
}

func (s *Comparative_operatorContext) LT_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLT_OPERATOR, 0)
}

func (s *Comparative_operatorContext) LE_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLE_OPERATOR, 0)
}

func (s *Comparative_operatorContext) GT_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGT_OPERATOR, 0)
}

func (s *Comparative_operatorContext) GE_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGE_OPERATOR, 0)
}

func (s *Comparative_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Comparative_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Comparative_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterComparative_operator(s)
	}
}

func (s *Comparative_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitComparative_operator(s)
	}
}

func (s *Comparative_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitComparative_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Comparative_operator() (localctx IComparative_operatorContext) {
	localctx = NewComparative_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 408, GoogleSQLParserRULE_comparative_operator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2896)
		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&254) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IShift_operatorContext is an interface to support dynamic dispatch.
type IShift_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	KL_OPERATOR() antlr.TerminalNode
	KR_OPERATOR() antlr.TerminalNode

	// IsShift_operatorContext differentiates from other interfaces.
	IsShift_operatorContext()
}

type Shift_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShift_operatorContext() *Shift_operatorContext {
	var p = new(Shift_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_shift_operator
	return p
}

func InitEmptyShift_operatorContext(p *Shift_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_shift_operator
}

func (*Shift_operatorContext) IsShift_operatorContext() {}

func NewShift_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Shift_operatorContext {
	var p = new(Shift_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_shift_operator

	return p
}

func (s *Shift_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Shift_operatorContext) KL_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserKL_OPERATOR, 0)
}

func (s *Shift_operatorContext) KR_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserKR_OPERATOR, 0)
}

func (s *Shift_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Shift_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Shift_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterShift_operator(s)
	}
}

func (s *Shift_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitShift_operator(s)
	}
}

func (s *Shift_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitShift_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Shift_operator() (localctx IShift_operatorContext) {
	localctx = NewShift_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 410, GoogleSQLParserRULE_shift_operator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2898)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserKL_OPERATOR || _la == GoogleSQLParserKR_OPERATOR) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAdditive_operatorContext is an interface to support dynamic dispatch.
type IAdditive_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PLUS_OPERATOR() antlr.TerminalNode
	MINUS_OPERATOR() antlr.TerminalNode

	// IsAdditive_operatorContext differentiates from other interfaces.
	IsAdditive_operatorContext()
}

type Additive_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAdditive_operatorContext() *Additive_operatorContext {
	var p = new(Additive_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_additive_operator
	return p
}

func InitEmptyAdditive_operatorContext(p *Additive_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_additive_operator
}

func (*Additive_operatorContext) IsAdditive_operatorContext() {}

func NewAdditive_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Additive_operatorContext {
	var p = new(Additive_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_additive_operator

	return p
}

func (s *Additive_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Additive_operatorContext) PLUS_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPLUS_OPERATOR, 0)
}

func (s *Additive_operatorContext) MINUS_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMINUS_OPERATOR, 0)
}

func (s *Additive_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Additive_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Additive_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAdditive_operator(s)
	}
}

func (s *Additive_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAdditive_operator(s)
	}
}

func (s *Additive_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAdditive_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Additive_operator() (localctx IAdditive_operatorContext) {
	localctx = NewAdditive_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 412, GoogleSQLParserRULE_additive_operator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2900)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserPLUS_OPERATOR || _la == GoogleSQLParserMINUS_OPERATOR) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMultiplicative_operatorContext is an interface to support dynamic dispatch.
type IMultiplicative_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MULTIPLY_OPERATOR() antlr.TerminalNode
	DIVIDE_OPERATOR() antlr.TerminalNode

	// IsMultiplicative_operatorContext differentiates from other interfaces.
	IsMultiplicative_operatorContext()
}

type Multiplicative_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMultiplicative_operatorContext() *Multiplicative_operatorContext {
	var p = new(Multiplicative_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_multiplicative_operator
	return p
}

func InitEmptyMultiplicative_operatorContext(p *Multiplicative_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_multiplicative_operator
}

func (*Multiplicative_operatorContext) IsMultiplicative_operatorContext() {}

func NewMultiplicative_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Multiplicative_operatorContext {
	var p = new(Multiplicative_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_multiplicative_operator

	return p
}

func (s *Multiplicative_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Multiplicative_operatorContext) MULTIPLY_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMULTIPLY_OPERATOR, 0)
}

func (s *Multiplicative_operatorContext) DIVIDE_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDIVIDE_OPERATOR, 0)
}

func (s *Multiplicative_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Multiplicative_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Multiplicative_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterMultiplicative_operator(s)
	}
}

func (s *Multiplicative_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitMultiplicative_operator(s)
	}
}

func (s *Multiplicative_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitMultiplicative_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Multiplicative_operator() (localctx IMultiplicative_operatorContext) {
	localctx = NewMultiplicative_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 414, GoogleSQLParserRULE_multiplicative_operator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2902)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserMULTIPLY_OPERATOR || _la == GoogleSQLParserDIVIDE_OPERATOR) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIs_operatorContext is an interface to support dynamic dispatch.
type IIs_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IS_SYMBOL() antlr.TerminalNode
	NOT_SYMBOL() antlr.TerminalNode

	// IsIs_operatorContext differentiates from other interfaces.
	IsIs_operatorContext()
}

type Is_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIs_operatorContext() *Is_operatorContext {
	var p = new(Is_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_is_operator
	return p
}

func InitEmptyIs_operatorContext(p *Is_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_is_operator
}

func (*Is_operatorContext) IsIs_operatorContext() {}

func NewIs_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Is_operatorContext {
	var p = new(Is_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_is_operator

	return p
}

func (s *Is_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Is_operatorContext) IS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIS_SYMBOL, 0)
}

func (s *Is_operatorContext) NOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNOT_SYMBOL, 0)
}

func (s *Is_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Is_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Is_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterIs_operator(s)
	}
}

func (s *Is_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitIs_operator(s)
	}
}

func (s *Is_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitIs_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Is_operator() (localctx IIs_operatorContext) {
	localctx = NewIs_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 416, GoogleSQLParserRULE_is_operator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2904)
		p.Match(GoogleSQLParserIS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2906)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserNOT_SYMBOL {
		{
			p.SetState(2905)
			p.Match(GoogleSQLParserNOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBetween_operatorContext is an interface to support dynamic dispatch.
type IBetween_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BETWEEN_SYMBOL() antlr.TerminalNode
	NOT_SYMBOL() antlr.TerminalNode

	// IsBetween_operatorContext differentiates from other interfaces.
	IsBetween_operatorContext()
}

type Between_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBetween_operatorContext() *Between_operatorContext {
	var p = new(Between_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_between_operator
	return p
}

func InitEmptyBetween_operatorContext(p *Between_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_between_operator
}

func (*Between_operatorContext) IsBetween_operatorContext() {}

func NewBetween_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Between_operatorContext {
	var p = new(Between_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_between_operator

	return p
}

func (s *Between_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Between_operatorContext) BETWEEN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBETWEEN_SYMBOL, 0)
}

func (s *Between_operatorContext) NOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNOT_SYMBOL, 0)
}

func (s *Between_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Between_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Between_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBetween_operator(s)
	}
}

func (s *Between_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBetween_operator(s)
	}
}

func (s *Between_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBetween_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Between_operator() (localctx IBetween_operatorContext) {
	localctx = NewBetween_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 418, GoogleSQLParserRULE_between_operator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2909)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserNOT_SYMBOL {
		{
			p.SetState(2908)
			p.Match(GoogleSQLParserNOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(2911)
		p.Match(GoogleSQLParserBETWEEN_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIn_operatorContext is an interface to support dynamic dispatch.
type IIn_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IN_SYMBOL() antlr.TerminalNode
	NOT_SYMBOL() antlr.TerminalNode

	// IsIn_operatorContext differentiates from other interfaces.
	IsIn_operatorContext()
}

type In_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIn_operatorContext() *In_operatorContext {
	var p = new(In_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_in_operator
	return p
}

func InitEmptyIn_operatorContext(p *In_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_in_operator
}

func (*In_operatorContext) IsIn_operatorContext() {}

func NewIn_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *In_operatorContext {
	var p = new(In_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_in_operator

	return p
}

func (s *In_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *In_operatorContext) IN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIN_SYMBOL, 0)
}

func (s *In_operatorContext) NOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNOT_SYMBOL, 0)
}

func (s *In_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *In_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *In_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterIn_operator(s)
	}
}

func (s *In_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitIn_operator(s)
	}
}

func (s *In_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitIn_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) In_operator() (localctx IIn_operatorContext) {
	localctx = NewIn_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 420, GoogleSQLParserRULE_in_operator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2914)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserNOT_SYMBOL {
		{
			p.SetState(2913)
			p.Match(GoogleSQLParserNOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(2916)
		p.Match(GoogleSQLParserIN_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDistinct_operatorContext is an interface to support dynamic dispatch.
type IDistinct_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IS_SYMBOL() antlr.TerminalNode
	DISTINCT_SYMBOL() antlr.TerminalNode
	FROM_SYMBOL() antlr.TerminalNode
	NOT_SYMBOL() antlr.TerminalNode

	// IsDistinct_operatorContext differentiates from other interfaces.
	IsDistinct_operatorContext()
}

type Distinct_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDistinct_operatorContext() *Distinct_operatorContext {
	var p = new(Distinct_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_distinct_operator
	return p
}

func InitEmptyDistinct_operatorContext(p *Distinct_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_distinct_operator
}

func (*Distinct_operatorContext) IsDistinct_operatorContext() {}

func NewDistinct_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Distinct_operatorContext {
	var p = new(Distinct_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_distinct_operator

	return p
}

func (s *Distinct_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Distinct_operatorContext) IS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIS_SYMBOL, 0)
}

func (s *Distinct_operatorContext) DISTINCT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDISTINCT_SYMBOL, 0)
}

func (s *Distinct_operatorContext) FROM_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFROM_SYMBOL, 0)
}

func (s *Distinct_operatorContext) NOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNOT_SYMBOL, 0)
}

func (s *Distinct_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Distinct_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Distinct_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterDistinct_operator(s)
	}
}

func (s *Distinct_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitDistinct_operator(s)
	}
}

func (s *Distinct_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitDistinct_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Distinct_operator() (localctx IDistinct_operatorContext) {
	localctx = NewDistinct_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 422, GoogleSQLParserRULE_distinct_operator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2918)
		p.Match(GoogleSQLParserIS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2920)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserNOT_SYMBOL {
		{
			p.SetState(2919)
			p.Match(GoogleSQLParserNOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(2922)
		p.Match(GoogleSQLParserDISTINCT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2923)
		p.Match(GoogleSQLParserFROM_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IParenthesized_queryContext is an interface to support dynamic dispatch.
type IParenthesized_queryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Query() IQueryContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsParenthesized_queryContext differentiates from other interfaces.
	IsParenthesized_queryContext()
}

type Parenthesized_queryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParenthesized_queryContext() *Parenthesized_queryContext {
	var p = new(Parenthesized_queryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_parenthesized_query
	return p
}

func InitEmptyParenthesized_queryContext(p *Parenthesized_queryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_parenthesized_query
}

func (*Parenthesized_queryContext) IsParenthesized_queryContext() {}

func NewParenthesized_queryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parenthesized_queryContext {
	var p = new(Parenthesized_queryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_parenthesized_query

	return p
}

func (s *Parenthesized_queryContext) GetParser() antlr.Parser { return s.parser }

func (s *Parenthesized_queryContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Parenthesized_queryContext) Query() IQueryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQueryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *Parenthesized_queryContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Parenthesized_queryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parenthesized_queryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Parenthesized_queryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterParenthesized_query(s)
	}
}

func (s *Parenthesized_queryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitParenthesized_query(s)
	}
}

func (s *Parenthesized_queryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitParenthesized_query(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Parenthesized_query() (localctx IParenthesized_queryContext) {
	localctx = NewParenthesized_queryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 424, GoogleSQLParserRULE_parenthesized_query)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2925)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2926)
		p.Query()
	}
	{
		p.SetState(2927)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IParenthesized_expression_not_a_queryContext is an interface to support dynamic dispatch.
type IParenthesized_expression_not_a_queryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Expression_maybe_parenthesized_not_a_query() IExpression_maybe_parenthesized_not_a_queryContext

	// IsParenthesized_expression_not_a_queryContext differentiates from other interfaces.
	IsParenthesized_expression_not_a_queryContext()
}

type Parenthesized_expression_not_a_queryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParenthesized_expression_not_a_queryContext() *Parenthesized_expression_not_a_queryContext {
	var p = new(Parenthesized_expression_not_a_queryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_parenthesized_expression_not_a_query
	return p
}

func InitEmptyParenthesized_expression_not_a_queryContext(p *Parenthesized_expression_not_a_queryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_parenthesized_expression_not_a_query
}

func (*Parenthesized_expression_not_a_queryContext) IsParenthesized_expression_not_a_queryContext() {}

func NewParenthesized_expression_not_a_queryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parenthesized_expression_not_a_queryContext {
	var p = new(Parenthesized_expression_not_a_queryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_parenthesized_expression_not_a_query

	return p
}

func (s *Parenthesized_expression_not_a_queryContext) GetParser() antlr.Parser { return s.parser }

func (s *Parenthesized_expression_not_a_queryContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Parenthesized_expression_not_a_queryContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Parenthesized_expression_not_a_queryContext) Expression_maybe_parenthesized_not_a_query() IExpression_maybe_parenthesized_not_a_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpression_maybe_parenthesized_not_a_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpression_maybe_parenthesized_not_a_queryContext)
}

func (s *Parenthesized_expression_not_a_queryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parenthesized_expression_not_a_queryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Parenthesized_expression_not_a_queryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterParenthesized_expression_not_a_query(s)
	}
}

func (s *Parenthesized_expression_not_a_queryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitParenthesized_expression_not_a_query(s)
	}
}

func (s *Parenthesized_expression_not_a_queryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitParenthesized_expression_not_a_query(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Parenthesized_expression_not_a_query() (localctx IParenthesized_expression_not_a_queryContext) {
	localctx = NewParenthesized_expression_not_a_queryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 426, GoogleSQLParserRULE_parenthesized_expression_not_a_query)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2929)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

	{
		p.SetState(2930)
		p.Expression_maybe_parenthesized_not_a_query()
	}

	{
		p.SetState(2931)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IParenthesized_anysomeall_list_in_rhsContext is an interface to support dynamic dispatch.
type IParenthesized_anysomeall_list_in_rhsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Parenthesized_query() IParenthesized_queryContext
	Parenthesized_expression_not_a_query() IParenthesized_expression_not_a_queryContext
	In_list_two_or_more_prefix() IIn_list_two_or_more_prefixContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsParenthesized_anysomeall_list_in_rhsContext differentiates from other interfaces.
	IsParenthesized_anysomeall_list_in_rhsContext()
}

type Parenthesized_anysomeall_list_in_rhsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParenthesized_anysomeall_list_in_rhsContext() *Parenthesized_anysomeall_list_in_rhsContext {
	var p = new(Parenthesized_anysomeall_list_in_rhsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_parenthesized_anysomeall_list_in_rhs
	return p
}

func InitEmptyParenthesized_anysomeall_list_in_rhsContext(p *Parenthesized_anysomeall_list_in_rhsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_parenthesized_anysomeall_list_in_rhs
}

func (*Parenthesized_anysomeall_list_in_rhsContext) IsParenthesized_anysomeall_list_in_rhsContext() {}

func NewParenthesized_anysomeall_list_in_rhsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parenthesized_anysomeall_list_in_rhsContext {
	var p = new(Parenthesized_anysomeall_list_in_rhsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_parenthesized_anysomeall_list_in_rhs

	return p
}

func (s *Parenthesized_anysomeall_list_in_rhsContext) GetParser() antlr.Parser { return s.parser }

func (s *Parenthesized_anysomeall_list_in_rhsContext) Parenthesized_query() IParenthesized_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesized_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesized_queryContext)
}

func (s *Parenthesized_anysomeall_list_in_rhsContext) Parenthesized_expression_not_a_query() IParenthesized_expression_not_a_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesized_expression_not_a_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesized_expression_not_a_queryContext)
}

func (s *Parenthesized_anysomeall_list_in_rhsContext) In_list_two_or_more_prefix() IIn_list_two_or_more_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIn_list_two_or_more_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIn_list_two_or_more_prefixContext)
}

func (s *Parenthesized_anysomeall_list_in_rhsContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Parenthesized_anysomeall_list_in_rhsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parenthesized_anysomeall_list_in_rhsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Parenthesized_anysomeall_list_in_rhsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterParenthesized_anysomeall_list_in_rhs(s)
	}
}

func (s *Parenthesized_anysomeall_list_in_rhsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitParenthesized_anysomeall_list_in_rhs(s)
	}
}

func (s *Parenthesized_anysomeall_list_in_rhsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitParenthesized_anysomeall_list_in_rhs(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Parenthesized_anysomeall_list_in_rhs() (localctx IParenthesized_anysomeall_list_in_rhsContext) {
	localctx = NewParenthesized_anysomeall_list_in_rhsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 428, GoogleSQLParserRULE_parenthesized_anysomeall_list_in_rhs)
	p.SetState(2938)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 292, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2933)
			p.Parenthesized_query()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2934)
			p.Parenthesized_expression_not_a_query()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2935)
			p.In_list_two_or_more_prefix()
		}
		{
			p.SetState(2936)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAnd_expressionContext is an interface to support dynamic dispatch.
type IAnd_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllExpression_higher_prec_than_and() []IExpression_higher_prec_than_andContext
	Expression_higher_prec_than_and(i int) IExpression_higher_prec_than_andContext
	AllAND_SYMBOL() []antlr.TerminalNode
	AND_SYMBOL(i int) antlr.TerminalNode

	// IsAnd_expressionContext differentiates from other interfaces.
	IsAnd_expressionContext()
}

type And_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnd_expressionContext() *And_expressionContext {
	var p = new(And_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_and_expression
	return p
}

func InitEmptyAnd_expressionContext(p *And_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_and_expression
}

func (*And_expressionContext) IsAnd_expressionContext() {}

func NewAnd_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *And_expressionContext {
	var p = new(And_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_and_expression

	return p
}

func (s *And_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *And_expressionContext) AllExpression_higher_prec_than_and() []IExpression_higher_prec_than_andContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpression_higher_prec_than_andContext); ok {
			len++
		}
	}

	tst := make([]IExpression_higher_prec_than_andContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpression_higher_prec_than_andContext); ok {
			tst[i] = t.(IExpression_higher_prec_than_andContext)
			i++
		}
	}

	return tst
}

func (s *And_expressionContext) Expression_higher_prec_than_and(i int) IExpression_higher_prec_than_andContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpression_higher_prec_than_andContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpression_higher_prec_than_andContext)
}

func (s *And_expressionContext) AllAND_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserAND_SYMBOL)
}

func (s *And_expressionContext) AND_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAND_SYMBOL, i)
}

func (s *And_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *And_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *And_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAnd_expression(s)
	}
}

func (s *And_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAnd_expression(s)
	}
}

func (s *And_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAnd_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) And_expression() (localctx IAnd_expressionContext) {
	localctx = NewAnd_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 430, GoogleSQLParserRULE_and_expression)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2940)
		p.expression_higher_prec_than_and(0)
	}
	{
		p.SetState(2941)
		p.Match(GoogleSQLParserAND_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2942)
		p.expression_higher_prec_than_and(0)
	}
	p.SetState(2947)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 293, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2943)
				p.Match(GoogleSQLParserAND_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(2944)
				p.expression_higher_prec_than_and(0)
			}

		}
		p.SetState(2949)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 293, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIn_list_two_or_more_prefixContext is an interface to support dynamic dispatch.
type IIn_list_two_or_more_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsIn_list_two_or_more_prefixContext differentiates from other interfaces.
	IsIn_list_two_or_more_prefixContext()
}

type In_list_two_or_more_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIn_list_two_or_more_prefixContext() *In_list_two_or_more_prefixContext {
	var p = new(In_list_two_or_more_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_in_list_two_or_more_prefix
	return p
}

func InitEmptyIn_list_two_or_more_prefixContext(p *In_list_two_or_more_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_in_list_two_or_more_prefix
}

func (*In_list_two_or_more_prefixContext) IsIn_list_two_or_more_prefixContext() {}

func NewIn_list_two_or_more_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *In_list_two_or_more_prefixContext {
	var p = new(In_list_two_or_more_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_in_list_two_or_more_prefix

	return p
}

func (s *In_list_two_or_more_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *In_list_two_or_more_prefixContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *In_list_two_or_more_prefixContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *In_list_two_or_more_prefixContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *In_list_two_or_more_prefixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *In_list_two_or_more_prefixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *In_list_two_or_more_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *In_list_two_or_more_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *In_list_two_or_more_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterIn_list_two_or_more_prefix(s)
	}
}

func (s *In_list_two_or_more_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitIn_list_two_or_more_prefix(s)
	}
}

func (s *In_list_two_or_more_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitIn_list_two_or_more_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) In_list_two_or_more_prefix() (localctx IIn_list_two_or_more_prefixContext) {
	localctx = NewIn_list_two_or_more_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 432, GoogleSQLParserRULE_in_list_two_or_more_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2950)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2951)
		p.expression(0)
	}
	{
		p.SetState(2952)
		p.Match(GoogleSQLParserCOMMA_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2953)
		p.expression(0)
	}
	p.SetState(2958)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(2954)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2955)
			p.expression(0)
		}

		p.SetState(2960)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAny_some_allContext is an interface to support dynamic dispatch.
type IAny_some_allContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ANY_SYMBOL() antlr.TerminalNode
	SOME_SYMBOL() antlr.TerminalNode
	ALL_SYMBOL() antlr.TerminalNode

	// IsAny_some_allContext differentiates from other interfaces.
	IsAny_some_allContext()
}

type Any_some_allContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAny_some_allContext() *Any_some_allContext {
	var p = new(Any_some_allContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_any_some_all
	return p
}

func InitEmptyAny_some_allContext(p *Any_some_allContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_any_some_all
}

func (*Any_some_allContext) IsAny_some_allContext() {}

func NewAny_some_allContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Any_some_allContext {
	var p = new(Any_some_allContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_any_some_all

	return p
}

func (s *Any_some_allContext) GetParser() antlr.Parser { return s.parser }

func (s *Any_some_allContext) ANY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserANY_SYMBOL, 0)
}

func (s *Any_some_allContext) SOME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSOME_SYMBOL, 0)
}

func (s *Any_some_allContext) ALL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserALL_SYMBOL, 0)
}

func (s *Any_some_allContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Any_some_allContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Any_some_allContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAny_some_all(s)
	}
}

func (s *Any_some_allContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAny_some_all(s)
	}
}

func (s *Any_some_allContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAny_some_all(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Any_some_all() (localctx IAny_some_allContext) {
	localctx = NewAny_some_allContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 434, GoogleSQLParserRULE_any_some_all)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2961)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserALL_SYMBOL || _la == GoogleSQLParserANY_SYMBOL || _la == GoogleSQLParserSOME_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILike_operatorContext is an interface to support dynamic dispatch.
type ILike_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LIKE_SYMBOL() antlr.TerminalNode
	NOT_SYMBOL() antlr.TerminalNode

	// IsLike_operatorContext differentiates from other interfaces.
	IsLike_operatorContext()
}

type Like_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLike_operatorContext() *Like_operatorContext {
	var p = new(Like_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_like_operator
	return p
}

func InitEmptyLike_operatorContext(p *Like_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_like_operator
}

func (*Like_operatorContext) IsLike_operatorContext() {}

func NewLike_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Like_operatorContext {
	var p = new(Like_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_like_operator

	return p
}

func (s *Like_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Like_operatorContext) LIKE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLIKE_SYMBOL, 0)
}

func (s *Like_operatorContext) NOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNOT_SYMBOL, 0)
}

func (s *Like_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Like_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Like_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterLike_operator(s)
	}
}

func (s *Like_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitLike_operator(s)
	}
}

func (s *Like_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitLike_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Like_operator() (localctx ILike_operatorContext) {
	localctx = NewLike_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 436, GoogleSQLParserRULE_like_operator)
	p.SetState(2966)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserLIKE_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2963)
			p.Match(GoogleSQLParserLIKE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserNOT_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2964)
			p.Match(GoogleSQLParserNOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2965)
			p.Match(GoogleSQLParserLIKE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpression_subquery_with_keywordContext is an interface to support dynamic dispatch.
type IExpression_subquery_with_keywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ARRAY_SYMBOL() antlr.TerminalNode
	Parenthesized_query() IParenthesized_queryContext
	EXISTS_SYMBOL() antlr.TerminalNode
	Hint() IHintContext

	// IsExpression_subquery_with_keywordContext differentiates from other interfaces.
	IsExpression_subquery_with_keywordContext()
}

type Expression_subquery_with_keywordContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_subquery_with_keywordContext() *Expression_subquery_with_keywordContext {
	var p = new(Expression_subquery_with_keywordContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expression_subquery_with_keyword
	return p
}

func InitEmptyExpression_subquery_with_keywordContext(p *Expression_subquery_with_keywordContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expression_subquery_with_keyword
}

func (*Expression_subquery_with_keywordContext) IsExpression_subquery_with_keywordContext() {}

func NewExpression_subquery_with_keywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_subquery_with_keywordContext {
	var p = new(Expression_subquery_with_keywordContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_expression_subquery_with_keyword

	return p
}

func (s *Expression_subquery_with_keywordContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_subquery_with_keywordContext) ARRAY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserARRAY_SYMBOL, 0)
}

func (s *Expression_subquery_with_keywordContext) Parenthesized_query() IParenthesized_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesized_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesized_queryContext)
}

func (s *Expression_subquery_with_keywordContext) EXISTS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXISTS_SYMBOL, 0)
}

func (s *Expression_subquery_with_keywordContext) Hint() IHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHintContext)
}

func (s *Expression_subquery_with_keywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_subquery_with_keywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expression_subquery_with_keywordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterExpression_subquery_with_keyword(s)
	}
}

func (s *Expression_subquery_with_keywordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitExpression_subquery_with_keyword(s)
	}
}

func (s *Expression_subquery_with_keywordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitExpression_subquery_with_keyword(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Expression_subquery_with_keyword() (localctx IExpression_subquery_with_keywordContext) {
	localctx = NewExpression_subquery_with_keywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 438, GoogleSQLParserRULE_expression_subquery_with_keyword)
	var _la int

	p.SetState(2975)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserARRAY_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2968)
			p.Match(GoogleSQLParserARRAY_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2969)
			p.Parenthesized_query()
		}

	case GoogleSQLParserEXISTS_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2970)
			p.Match(GoogleSQLParserEXISTS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2972)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAT_SYMBOL {
			{
				p.SetState(2971)
				p.Hint()
			}

		}
		{
			p.SetState(2974)
			p.Parenthesized_query()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStruct_constructorContext is an interface to support dynamic dispatch.
type IStruct_constructorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Struct_constructor_prefix_with_keyword() IStruct_constructor_prefix_with_keywordContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Struct_constructor_prefix_with_keyword_no_arg() IStruct_constructor_prefix_with_keyword_no_argContext
	Struct_constructor_prefix_without_keyword() IStruct_constructor_prefix_without_keywordContext

	// IsStruct_constructorContext differentiates from other interfaces.
	IsStruct_constructorContext()
}

type Struct_constructorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStruct_constructorContext() *Struct_constructorContext {
	var p = new(Struct_constructorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_constructor
	return p
}

func InitEmptyStruct_constructorContext(p *Struct_constructorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_constructor
}

func (*Struct_constructorContext) IsStruct_constructorContext() {}

func NewStruct_constructorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Struct_constructorContext {
	var p = new(Struct_constructorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_struct_constructor

	return p
}

func (s *Struct_constructorContext) GetParser() antlr.Parser { return s.parser }

func (s *Struct_constructorContext) Struct_constructor_prefix_with_keyword() IStruct_constructor_prefix_with_keywordContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_constructor_prefix_with_keywordContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_constructor_prefix_with_keywordContext)
}

func (s *Struct_constructorContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Struct_constructorContext) Struct_constructor_prefix_with_keyword_no_arg() IStruct_constructor_prefix_with_keyword_no_argContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_constructor_prefix_with_keyword_no_argContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_constructor_prefix_with_keyword_no_argContext)
}

func (s *Struct_constructorContext) Struct_constructor_prefix_without_keyword() IStruct_constructor_prefix_without_keywordContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_constructor_prefix_without_keywordContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_constructor_prefix_without_keywordContext)
}

func (s *Struct_constructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Struct_constructorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Struct_constructorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStruct_constructor(s)
	}
}

func (s *Struct_constructorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStruct_constructor(s)
	}
}

func (s *Struct_constructorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStruct_constructor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Struct_constructor() (localctx IStruct_constructorContext) {
	localctx = NewStruct_constructorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 440, GoogleSQLParserRULE_struct_constructor)
	p.SetState(2986)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 298, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2977)
			p.Struct_constructor_prefix_with_keyword()
		}
		{
			p.SetState(2978)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2980)
			p.Struct_constructor_prefix_with_keyword_no_arg()
		}
		{
			p.SetState(2981)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2983)
			p.Struct_constructor_prefix_without_keyword()
		}
		{
			p.SetState(2984)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStruct_constructor_prefix_with_keywordContext is an interface to support dynamic dispatch.
type IStruct_constructor_prefix_with_keywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Struct_constructor_prefix_with_keyword_no_arg() IStruct_constructor_prefix_with_keyword_no_argContext
	AllStruct_constructor_arg() []IStruct_constructor_argContext
	Struct_constructor_arg(i int) IStruct_constructor_argContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsStruct_constructor_prefix_with_keywordContext differentiates from other interfaces.
	IsStruct_constructor_prefix_with_keywordContext()
}

type Struct_constructor_prefix_with_keywordContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStruct_constructor_prefix_with_keywordContext() *Struct_constructor_prefix_with_keywordContext {
	var p = new(Struct_constructor_prefix_with_keywordContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_constructor_prefix_with_keyword
	return p
}

func InitEmptyStruct_constructor_prefix_with_keywordContext(p *Struct_constructor_prefix_with_keywordContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_constructor_prefix_with_keyword
}

func (*Struct_constructor_prefix_with_keywordContext) IsStruct_constructor_prefix_with_keywordContext() {
}

func NewStruct_constructor_prefix_with_keywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Struct_constructor_prefix_with_keywordContext {
	var p = new(Struct_constructor_prefix_with_keywordContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_struct_constructor_prefix_with_keyword

	return p
}

func (s *Struct_constructor_prefix_with_keywordContext) GetParser() antlr.Parser { return s.parser }

func (s *Struct_constructor_prefix_with_keywordContext) Struct_constructor_prefix_with_keyword_no_arg() IStruct_constructor_prefix_with_keyword_no_argContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_constructor_prefix_with_keyword_no_argContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_constructor_prefix_with_keyword_no_argContext)
}

func (s *Struct_constructor_prefix_with_keywordContext) AllStruct_constructor_arg() []IStruct_constructor_argContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStruct_constructor_argContext); ok {
			len++
		}
	}

	tst := make([]IStruct_constructor_argContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStruct_constructor_argContext); ok {
			tst[i] = t.(IStruct_constructor_argContext)
			i++
		}
	}

	return tst
}

func (s *Struct_constructor_prefix_with_keywordContext) Struct_constructor_arg(i int) IStruct_constructor_argContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_constructor_argContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_constructor_argContext)
}

func (s *Struct_constructor_prefix_with_keywordContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Struct_constructor_prefix_with_keywordContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Struct_constructor_prefix_with_keywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Struct_constructor_prefix_with_keywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Struct_constructor_prefix_with_keywordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStruct_constructor_prefix_with_keyword(s)
	}
}

func (s *Struct_constructor_prefix_with_keywordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStruct_constructor_prefix_with_keyword(s)
	}
}

func (s *Struct_constructor_prefix_with_keywordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStruct_constructor_prefix_with_keyword(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Struct_constructor_prefix_with_keyword() (localctx IStruct_constructor_prefix_with_keywordContext) {
	localctx = NewStruct_constructor_prefix_with_keywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 442, GoogleSQLParserRULE_struct_constructor_prefix_with_keyword)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2988)
		p.Struct_constructor_prefix_with_keyword_no_arg()
	}
	{
		p.SetState(2989)
		p.Struct_constructor_arg()
	}
	p.SetState(2994)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(2990)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2991)
			p.Struct_constructor_arg()
		}

		p.SetState(2996)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStruct_constructor_argContext is an interface to support dynamic dispatch.
type IStruct_constructor_argContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	Opt_as_alias_with_required_as() IOpt_as_alias_with_required_asContext

	// IsStruct_constructor_argContext differentiates from other interfaces.
	IsStruct_constructor_argContext()
}

type Struct_constructor_argContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStruct_constructor_argContext() *Struct_constructor_argContext {
	var p = new(Struct_constructor_argContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_constructor_arg
	return p
}

func InitEmptyStruct_constructor_argContext(p *Struct_constructor_argContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_constructor_arg
}

func (*Struct_constructor_argContext) IsStruct_constructor_argContext() {}

func NewStruct_constructor_argContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Struct_constructor_argContext {
	var p = new(Struct_constructor_argContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_struct_constructor_arg

	return p
}

func (s *Struct_constructor_argContext) GetParser() antlr.Parser { return s.parser }

func (s *Struct_constructor_argContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Struct_constructor_argContext) Opt_as_alias_with_required_as() IOpt_as_alias_with_required_asContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_as_alias_with_required_asContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_as_alias_with_required_asContext)
}

func (s *Struct_constructor_argContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Struct_constructor_argContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Struct_constructor_argContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStruct_constructor_arg(s)
	}
}

func (s *Struct_constructor_argContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStruct_constructor_arg(s)
	}
}

func (s *Struct_constructor_argContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStruct_constructor_arg(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Struct_constructor_arg() (localctx IStruct_constructor_argContext) {
	localctx = NewStruct_constructor_argContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 444, GoogleSQLParserRULE_struct_constructor_arg)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2997)
		p.expression(0)
	}
	p.SetState(2999)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAS_SYMBOL {
		{
			p.SetState(2998)
			p.Opt_as_alias_with_required_as()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStruct_constructor_prefix_without_keywordContext is an interface to support dynamic dispatch.
type IStruct_constructor_prefix_without_keywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsStruct_constructor_prefix_without_keywordContext differentiates from other interfaces.
	IsStruct_constructor_prefix_without_keywordContext()
}

type Struct_constructor_prefix_without_keywordContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStruct_constructor_prefix_without_keywordContext() *Struct_constructor_prefix_without_keywordContext {
	var p = new(Struct_constructor_prefix_without_keywordContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_constructor_prefix_without_keyword
	return p
}

func InitEmptyStruct_constructor_prefix_without_keywordContext(p *Struct_constructor_prefix_without_keywordContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_constructor_prefix_without_keyword
}

func (*Struct_constructor_prefix_without_keywordContext) IsStruct_constructor_prefix_without_keywordContext() {
}

func NewStruct_constructor_prefix_without_keywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Struct_constructor_prefix_without_keywordContext {
	var p = new(Struct_constructor_prefix_without_keywordContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_struct_constructor_prefix_without_keyword

	return p
}

func (s *Struct_constructor_prefix_without_keywordContext) GetParser() antlr.Parser { return s.parser }

func (s *Struct_constructor_prefix_without_keywordContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Struct_constructor_prefix_without_keywordContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *Struct_constructor_prefix_without_keywordContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Struct_constructor_prefix_without_keywordContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Struct_constructor_prefix_without_keywordContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Struct_constructor_prefix_without_keywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Struct_constructor_prefix_without_keywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Struct_constructor_prefix_without_keywordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStruct_constructor_prefix_without_keyword(s)
	}
}

func (s *Struct_constructor_prefix_without_keywordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStruct_constructor_prefix_without_keyword(s)
	}
}

func (s *Struct_constructor_prefix_without_keywordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStruct_constructor_prefix_without_keyword(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Struct_constructor_prefix_without_keyword() (localctx IStruct_constructor_prefix_without_keywordContext) {
	localctx = NewStruct_constructor_prefix_without_keywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 446, GoogleSQLParserRULE_struct_constructor_prefix_without_keyword)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3001)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3002)
		p.expression(0)
	}
	{
		p.SetState(3003)
		p.Match(GoogleSQLParserCOMMA_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3004)
		p.expression(0)
	}
	p.SetState(3009)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(3005)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3006)
			p.expression(0)
		}

		p.SetState(3011)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStruct_constructor_prefix_with_keyword_no_argContext is an interface to support dynamic dispatch.
type IStruct_constructor_prefix_with_keyword_no_argContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Struct_type() IStruct_typeContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	STRUCT_SYMBOL() antlr.TerminalNode

	// IsStruct_constructor_prefix_with_keyword_no_argContext differentiates from other interfaces.
	IsStruct_constructor_prefix_with_keyword_no_argContext()
}

type Struct_constructor_prefix_with_keyword_no_argContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStruct_constructor_prefix_with_keyword_no_argContext() *Struct_constructor_prefix_with_keyword_no_argContext {
	var p = new(Struct_constructor_prefix_with_keyword_no_argContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_constructor_prefix_with_keyword_no_arg
	return p
}

func InitEmptyStruct_constructor_prefix_with_keyword_no_argContext(p *Struct_constructor_prefix_with_keyword_no_argContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_constructor_prefix_with_keyword_no_arg
}

func (*Struct_constructor_prefix_with_keyword_no_argContext) IsStruct_constructor_prefix_with_keyword_no_argContext() {
}

func NewStruct_constructor_prefix_with_keyword_no_argContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Struct_constructor_prefix_with_keyword_no_argContext {
	var p = new(Struct_constructor_prefix_with_keyword_no_argContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_struct_constructor_prefix_with_keyword_no_arg

	return p
}

func (s *Struct_constructor_prefix_with_keyword_no_argContext) GetParser() antlr.Parser {
	return s.parser
}

func (s *Struct_constructor_prefix_with_keyword_no_argContext) Struct_type() IStruct_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_typeContext)
}

func (s *Struct_constructor_prefix_with_keyword_no_argContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Struct_constructor_prefix_with_keyword_no_argContext) STRUCT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTRUCT_SYMBOL, 0)
}

func (s *Struct_constructor_prefix_with_keyword_no_argContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Struct_constructor_prefix_with_keyword_no_argContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Struct_constructor_prefix_with_keyword_no_argContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStruct_constructor_prefix_with_keyword_no_arg(s)
	}
}

func (s *Struct_constructor_prefix_with_keyword_no_argContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStruct_constructor_prefix_with_keyword_no_arg(s)
	}
}

func (s *Struct_constructor_prefix_with_keyword_no_argContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStruct_constructor_prefix_with_keyword_no_arg(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Struct_constructor_prefix_with_keyword_no_arg() (localctx IStruct_constructor_prefix_with_keyword_no_argContext) {
	localctx = NewStruct_constructor_prefix_with_keyword_no_argContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 448, GoogleSQLParserRULE_struct_constructor_prefix_with_keyword_no_arg)
	p.SetState(3017)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 302, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3012)
			p.Struct_type()
		}
		{
			p.SetState(3013)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3015)
			p.Match(GoogleSQLParserSTRUCT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3016)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInterval_expressionContext is an interface to support dynamic dispatch.
type IInterval_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	INTERVAL_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	TO_SYMBOL() antlr.TerminalNode

	// IsInterval_expressionContext differentiates from other interfaces.
	IsInterval_expressionContext()
}

type Interval_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterval_expressionContext() *Interval_expressionContext {
	var p = new(Interval_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_interval_expression
	return p
}

func InitEmptyInterval_expressionContext(p *Interval_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_interval_expression
}

func (*Interval_expressionContext) IsInterval_expressionContext() {}

func NewInterval_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Interval_expressionContext {
	var p = new(Interval_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_interval_expression

	return p
}

func (s *Interval_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Interval_expressionContext) INTERVAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINTERVAL_SYMBOL, 0)
}

func (s *Interval_expressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Interval_expressionContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Interval_expressionContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Interval_expressionContext) TO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTO_SYMBOL, 0)
}

func (s *Interval_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Interval_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Interval_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterInterval_expression(s)
	}
}

func (s *Interval_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitInterval_expression(s)
	}
}

func (s *Interval_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitInterval_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Interval_expression() (localctx IInterval_expressionContext) {
	localctx = NewInterval_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 450, GoogleSQLParserRULE_interval_expression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3019)
		p.Match(GoogleSQLParserINTERVAL_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3020)
		p.expression(0)
	}
	{
		p.SetState(3021)
		p.Identifier()
	}
	p.SetState(3024)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 303, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3022)
			p.Match(GoogleSQLParserTO_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3023)
			p.Identifier()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunction_call_expression_with_clausesContext is an interface to support dynamic dispatch.
type IFunction_call_expression_with_clausesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Path_expression() IPath_expressionContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Function_call_expression_with_clauses_suffix() IFunction_call_expression_with_clauses_suffixContext
	DISTINCT_SYMBOL() antlr.TerminalNode
	Function_name_from_keyword() IFunction_name_from_keywordContext

	// IsFunction_call_expression_with_clausesContext differentiates from other interfaces.
	IsFunction_call_expression_with_clausesContext()
}

type Function_call_expression_with_clausesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_call_expression_with_clausesContext() *Function_call_expression_with_clausesContext {
	var p = new(Function_call_expression_with_clausesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_call_expression_with_clauses
	return p
}

func InitEmptyFunction_call_expression_with_clausesContext(p *Function_call_expression_with_clausesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_call_expression_with_clauses
}

func (*Function_call_expression_with_clausesContext) IsFunction_call_expression_with_clausesContext() {
}

func NewFunction_call_expression_with_clausesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_call_expression_with_clausesContext {
	var p = new(Function_call_expression_with_clausesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_function_call_expression_with_clauses

	return p
}

func (s *Function_call_expression_with_clausesContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_call_expression_with_clausesContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Function_call_expression_with_clausesContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Function_call_expression_with_clausesContext) Function_call_expression_with_clauses_suffix() IFunction_call_expression_with_clauses_suffixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunction_call_expression_with_clauses_suffixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunction_call_expression_with_clauses_suffixContext)
}

func (s *Function_call_expression_with_clausesContext) DISTINCT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDISTINCT_SYMBOL, 0)
}

func (s *Function_call_expression_with_clausesContext) Function_name_from_keyword() IFunction_name_from_keywordContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunction_name_from_keywordContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunction_name_from_keywordContext)
}

func (s *Function_call_expression_with_clausesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_call_expression_with_clausesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_call_expression_with_clausesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFunction_call_expression_with_clauses(s)
	}
}

func (s *Function_call_expression_with_clausesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFunction_call_expression_with_clauses(s)
	}
}

func (s *Function_call_expression_with_clausesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFunction_call_expression_with_clauses(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Function_call_expression_with_clauses() (localctx IFunction_call_expression_with_clausesContext) {
	localctx = NewFunction_call_expression_with_clausesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 452, GoogleSQLParserRULE_function_call_expression_with_clauses)
	var _la int

	p.SetState(3037)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3026)
			p.Path_expression()
		}
		{
			p.SetState(3027)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(3029)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserDISTINCT_SYMBOL {
			{
				p.SetState(3028)
				p.Match(GoogleSQLParserDISTINCT_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(3031)
			p.Function_call_expression_with_clauses_suffix()
		}

	case GoogleSQLParserLEFT_SYMBOL, GoogleSQLParserRIGHT_SYMBOL, GoogleSQLParserRANGE_SYMBOL, GoogleSQLParserCOLLATE_SYMBOL, GoogleSQLParserIF_SYMBOL, GoogleSQLParserGROUPING_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3033)
			p.Function_name_from_keyword()
		}
		{
			p.SetState(3034)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3035)
			p.Function_call_expression_with_clauses_suffix()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunction_call_expression_with_clauses_suffixContext is an interface to support dynamic dispatch.
type IFunction_call_expression_with_clauses_suffixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Hint() IHintContext
	With_group_rows() IWith_group_rowsContext
	Over_clause() IOver_clauseContext
	Opt_having_or_group_by_modifier() IOpt_having_or_group_by_modifierContext
	Order_by_clause() IOrder_by_clauseContext
	Limit_offset_clause() ILimit_offset_clauseContext
	Opt_null_handling_modifier() IOpt_null_handling_modifierContext
	Clamped_between_modifier() IClamped_between_modifierContext
	With_report_modifier() IWith_report_modifierContext
	AllFunction_call_argument() []IFunction_call_argumentContext
	Function_call_argument(i int) IFunction_call_argumentContext
	MULTIPLY_OPERATOR() antlr.TerminalNode
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsFunction_call_expression_with_clauses_suffixContext differentiates from other interfaces.
	IsFunction_call_expression_with_clauses_suffixContext()
}

type Function_call_expression_with_clauses_suffixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_call_expression_with_clauses_suffixContext() *Function_call_expression_with_clauses_suffixContext {
	var p = new(Function_call_expression_with_clauses_suffixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_call_expression_with_clauses_suffix
	return p
}

func InitEmptyFunction_call_expression_with_clauses_suffixContext(p *Function_call_expression_with_clauses_suffixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_call_expression_with_clauses_suffix
}

func (*Function_call_expression_with_clauses_suffixContext) IsFunction_call_expression_with_clauses_suffixContext() {
}

func NewFunction_call_expression_with_clauses_suffixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_call_expression_with_clauses_suffixContext {
	var p = new(Function_call_expression_with_clauses_suffixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_function_call_expression_with_clauses_suffix

	return p
}

func (s *Function_call_expression_with_clauses_suffixContext) GetParser() antlr.Parser {
	return s.parser
}

func (s *Function_call_expression_with_clauses_suffixContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Function_call_expression_with_clauses_suffixContext) Hint() IHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHintContext)
}

func (s *Function_call_expression_with_clauses_suffixContext) With_group_rows() IWith_group_rowsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_group_rowsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_group_rowsContext)
}

func (s *Function_call_expression_with_clauses_suffixContext) Over_clause() IOver_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOver_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOver_clauseContext)
}

func (s *Function_call_expression_with_clauses_suffixContext) Opt_having_or_group_by_modifier() IOpt_having_or_group_by_modifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_having_or_group_by_modifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_having_or_group_by_modifierContext)
}

func (s *Function_call_expression_with_clauses_suffixContext) Order_by_clause() IOrder_by_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrder_by_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrder_by_clauseContext)
}

func (s *Function_call_expression_with_clauses_suffixContext) Limit_offset_clause() ILimit_offset_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILimit_offset_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILimit_offset_clauseContext)
}

func (s *Function_call_expression_with_clauses_suffixContext) Opt_null_handling_modifier() IOpt_null_handling_modifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_null_handling_modifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_null_handling_modifierContext)
}

func (s *Function_call_expression_with_clauses_suffixContext) Clamped_between_modifier() IClamped_between_modifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClamped_between_modifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClamped_between_modifierContext)
}

func (s *Function_call_expression_with_clauses_suffixContext) With_report_modifier() IWith_report_modifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_report_modifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_report_modifierContext)
}

func (s *Function_call_expression_with_clauses_suffixContext) AllFunction_call_argument() []IFunction_call_argumentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFunction_call_argumentContext); ok {
			len++
		}
	}

	tst := make([]IFunction_call_argumentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFunction_call_argumentContext); ok {
			tst[i] = t.(IFunction_call_argumentContext)
			i++
		}
	}

	return tst
}

func (s *Function_call_expression_with_clauses_suffixContext) Function_call_argument(i int) IFunction_call_argumentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunction_call_argumentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunction_call_argumentContext)
}

func (s *Function_call_expression_with_clauses_suffixContext) MULTIPLY_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMULTIPLY_OPERATOR, 0)
}

func (s *Function_call_expression_with_clauses_suffixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Function_call_expression_with_clauses_suffixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Function_call_expression_with_clauses_suffixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_call_expression_with_clauses_suffixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_call_expression_with_clauses_suffixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFunction_call_expression_with_clauses_suffix(s)
	}
}

func (s *Function_call_expression_with_clauses_suffixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFunction_call_expression_with_clauses_suffix(s)
	}
}

func (s *Function_call_expression_with_clauses_suffixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFunction_call_expression_with_clauses_suffix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Function_call_expression_with_clauses_suffix() (localctx IFunction_call_expression_with_clauses_suffixContext) {
	localctx = NewFunction_call_expression_with_clauses_suffixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 454, GoogleSQLParserRULE_function_call_expression_with_clauses_suffix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3079)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserRR_BRACKET_SYMBOL, GoogleSQLParserLIMIT_SYMBOL, GoogleSQLParserORDER_SYMBOL, GoogleSQLParserHAVING_SYMBOL:
		p.SetState(3040)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserHAVING_SYMBOL {
			{
				p.SetState(3039)
				p.Opt_having_or_group_by_modifier()
			}

		}
		p.SetState(3043)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserORDER_SYMBOL {
			{
				p.SetState(3042)
				p.Order_by_clause()
			}

		}
		p.SetState(3046)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserLIMIT_SYMBOL {
			{
				p.SetState(3045)
				p.Limit_offset_clause()
			}

		}
		{
			p.SetState(3048)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserPLUS_OPERATOR, GoogleSQLParserMINUS_OPERATOR, GoogleSQLParserMULTIPLY_OPERATOR, GoogleSQLParserBITWISE_NOT_OPERATOR, GoogleSQLParserRC_BRACKET_SYMBOL, GoogleSQLParserLR_BRACKET_SYMBOL, GoogleSQLParserLS_BRACKET_SYMBOL, GoogleSQLParserQUESTION_SYMBOL, GoogleSQLParserAT_SYMBOL, GoogleSQLParserATAT_SYMBOL, GoogleSQLParserSTRING_LITERAL, GoogleSQLParserBYTES_LITERAL, GoogleSQLParserFLOATING_POINT_LITERAL, GoogleSQLParserINTEGER_LITERAL, GoogleSQLParserARRAY_SYMBOL, GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserLEFT_SYMBOL, GoogleSQLParserNULL_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserRIGHT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSELECT_SYMBOL, GoogleSQLParserSTRUCT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserWITH_SYMBOL, GoogleSQLParserTRUE_SYMBOL, GoogleSQLParserFALSE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserNOT_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserRANGE_SYMBOL, GoogleSQLParserINTERVAL_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserNEW_SYMBOL, GoogleSQLParserCASE_SYMBOL, GoogleSQLParserCAST_SYMBOL, GoogleSQLParserEXTRACT_SYMBOL, GoogleSQLParserCOLLATE_SYMBOL, GoogleSQLParserIF_SYMBOL, GoogleSQLParserGROUPING_SYMBOL, GoogleSQLParserEXISTS_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.SetState(3051)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case GoogleSQLParserPLUS_OPERATOR, GoogleSQLParserMINUS_OPERATOR, GoogleSQLParserBITWISE_NOT_OPERATOR, GoogleSQLParserRC_BRACKET_SYMBOL, GoogleSQLParserLR_BRACKET_SYMBOL, GoogleSQLParserLS_BRACKET_SYMBOL, GoogleSQLParserQUESTION_SYMBOL, GoogleSQLParserAT_SYMBOL, GoogleSQLParserATAT_SYMBOL, GoogleSQLParserSTRING_LITERAL, GoogleSQLParserBYTES_LITERAL, GoogleSQLParserFLOATING_POINT_LITERAL, GoogleSQLParserINTEGER_LITERAL, GoogleSQLParserARRAY_SYMBOL, GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserLEFT_SYMBOL, GoogleSQLParserNULL_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserRIGHT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSELECT_SYMBOL, GoogleSQLParserSTRUCT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserWITH_SYMBOL, GoogleSQLParserTRUE_SYMBOL, GoogleSQLParserFALSE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserNOT_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserRANGE_SYMBOL, GoogleSQLParserINTERVAL_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserNEW_SYMBOL, GoogleSQLParserCASE_SYMBOL, GoogleSQLParserCAST_SYMBOL, GoogleSQLParserEXTRACT_SYMBOL, GoogleSQLParserCOLLATE_SYMBOL, GoogleSQLParserIF_SYMBOL, GoogleSQLParserGROUPING_SYMBOL, GoogleSQLParserEXISTS_SYMBOL, GoogleSQLParserIDENTIFIER:
			{
				p.SetState(3049)
				p.Function_call_argument()
			}

		case GoogleSQLParserMULTIPLY_OPERATOR:
			{
				p.SetState(3050)
				p.Match(GoogleSQLParserMULTIPLY_OPERATOR)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}
		p.SetState(3057)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == GoogleSQLParserCOMMA_SYMBOL {
			{
				p.SetState(3053)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(3054)
				p.Function_call_argument()
			}

			p.SetState(3059)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

		p.SetState(3061)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIGNORE_SYMBOL || _la == GoogleSQLParserRESPECT_SYMBOL {
			{
				p.SetState(3060)
				p.Opt_null_handling_modifier()
			}

		}
		p.SetState(3064)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserHAVING_SYMBOL {
			{
				p.SetState(3063)
				p.Opt_having_or_group_by_modifier()
			}

		}
		p.SetState(3067)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserCLAMPED_SYMBOL {
			{
				p.SetState(3066)
				p.Clamped_between_modifier()
			}

		}
		p.SetState(3070)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserWITH_SYMBOL {
			{
				p.SetState(3069)
				p.With_report_modifier()
			}

		}
		p.SetState(3073)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserORDER_SYMBOL {
			{
				p.SetState(3072)
				p.Order_by_clause()
			}

		}
		p.SetState(3076)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserLIMIT_SYMBOL {
			{
				p.SetState(3075)
				p.Limit_offset_clause()
			}

		}
		{
			p.SetState(3078)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	p.SetState(3082)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 318, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3081)
			p.Hint()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(3085)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 319, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3084)
			p.With_group_rows()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(3088)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 320, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3087)
			p.Over_clause()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOver_clauseContext is an interface to support dynamic dispatch.
type IOver_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OVER_SYMBOL() antlr.TerminalNode
	Window_specification() IWindow_specificationContext

	// IsOver_clauseContext differentiates from other interfaces.
	IsOver_clauseContext()
}

type Over_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOver_clauseContext() *Over_clauseContext {
	var p = new(Over_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_over_clause
	return p
}

func InitEmptyOver_clauseContext(p *Over_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_over_clause
}

func (*Over_clauseContext) IsOver_clauseContext() {}

func NewOver_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Over_clauseContext {
	var p = new(Over_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_over_clause

	return p
}

func (s *Over_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Over_clauseContext) OVER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOVER_SYMBOL, 0)
}

func (s *Over_clauseContext) Window_specification() IWindow_specificationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindow_specificationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindow_specificationContext)
}

func (s *Over_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Over_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Over_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOver_clause(s)
	}
}

func (s *Over_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOver_clause(s)
	}
}

func (s *Over_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOver_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Over_clause() (localctx IOver_clauseContext) {
	localctx = NewOver_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 456, GoogleSQLParserRULE_over_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3090)
		p.Match(GoogleSQLParserOVER_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3091)
		p.Window_specification()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWindow_specificationContext is an interface to support dynamic dispatch.
type IWindow_specificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Partition_by_clause() IPartition_by_clauseContext
	Order_by_clause() IOrder_by_clauseContext
	Opt_window_frame_clause() IOpt_window_frame_clauseContext

	// IsWindow_specificationContext differentiates from other interfaces.
	IsWindow_specificationContext()
}

type Window_specificationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_specificationContext() *Window_specificationContext {
	var p = new(Window_specificationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_window_specification
	return p
}

func InitEmptyWindow_specificationContext(p *Window_specificationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_window_specification
}

func (*Window_specificationContext) IsWindow_specificationContext() {}

func NewWindow_specificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_specificationContext {
	var p = new(Window_specificationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_window_specification

	return p
}

func (s *Window_specificationContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_specificationContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Window_specificationContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Window_specificationContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Window_specificationContext) Partition_by_clause() IPartition_by_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartition_by_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartition_by_clauseContext)
}

func (s *Window_specificationContext) Order_by_clause() IOrder_by_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrder_by_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrder_by_clauseContext)
}

func (s *Window_specificationContext) Opt_window_frame_clause() IOpt_window_frame_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_window_frame_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_window_frame_clauseContext)
}

func (s *Window_specificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_specificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_specificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWindow_specification(s)
	}
}

func (s *Window_specificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWindow_specification(s)
	}
}

func (s *Window_specificationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWindow_specification(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Window_specification() (localctx IWindow_specificationContext) {
	localctx = NewWindow_specificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 458, GoogleSQLParserRULE_window_specification)
	var _la int

	p.SetState(3108)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3093)
			p.Identifier()
		}

	case GoogleSQLParserLR_BRACKET_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3094)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(3096)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64((_la-72)) & ^0x3f) == 0 && ((int64(1)<<(_la-72))&-106523215214079) != 0) || ((int64((_la-136)) & ^0x3f) == 0 && ((int64(1)<<(_la-136))&-1) != 0) || ((int64((_la-200)) & ^0x3f) == 0 && ((int64(1)<<(_la-200))&-36028797018963969) != 0) || ((int64((_la-264)) & ^0x3f) == 0 && ((int64(1)<<(_la-264))&536870911) != 0) || _la == GoogleSQLParserIDENTIFIER {
			{
				p.SetState(3095)
				p.Identifier()
			}

		}
		p.SetState(3099)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserPARTITION_SYMBOL {
			{
				p.SetState(3098)
				p.Partition_by_clause()
			}

		}
		p.SetState(3102)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserORDER_SYMBOL {
			{
				p.SetState(3101)
				p.Order_by_clause()
			}

		}
		p.SetState(3105)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserRANGE_SYMBOL || _la == GoogleSQLParserROWS_SYMBOL {
			{
				p.SetState(3104)
				p.Opt_window_frame_clause()
			}

		}
		{
			p.SetState(3107)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_window_frame_clauseContext is an interface to support dynamic dispatch.
type IOpt_window_frame_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Frame_unit() IFrame_unitContext
	BETWEEN_SYMBOL() antlr.TerminalNode
	AllWindow_frame_bound() []IWindow_frame_boundContext
	Window_frame_bound(i int) IWindow_frame_boundContext
	AND_SYMBOL() antlr.TerminalNode

	// IsOpt_window_frame_clauseContext differentiates from other interfaces.
	IsOpt_window_frame_clauseContext()
}

type Opt_window_frame_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_window_frame_clauseContext() *Opt_window_frame_clauseContext {
	var p = new(Opt_window_frame_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_window_frame_clause
	return p
}

func InitEmptyOpt_window_frame_clauseContext(p *Opt_window_frame_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_window_frame_clause
}

func (*Opt_window_frame_clauseContext) IsOpt_window_frame_clauseContext() {}

func NewOpt_window_frame_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_window_frame_clauseContext {
	var p = new(Opt_window_frame_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_window_frame_clause

	return p
}

func (s *Opt_window_frame_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_window_frame_clauseContext) Frame_unit() IFrame_unitContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrame_unitContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrame_unitContext)
}

func (s *Opt_window_frame_clauseContext) BETWEEN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBETWEEN_SYMBOL, 0)
}

func (s *Opt_window_frame_clauseContext) AllWindow_frame_bound() []IWindow_frame_boundContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWindow_frame_boundContext); ok {
			len++
		}
	}

	tst := make([]IWindow_frame_boundContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWindow_frame_boundContext); ok {
			tst[i] = t.(IWindow_frame_boundContext)
			i++
		}
	}

	return tst
}

func (s *Opt_window_frame_clauseContext) Window_frame_bound(i int) IWindow_frame_boundContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindow_frame_boundContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindow_frame_boundContext)
}

func (s *Opt_window_frame_clauseContext) AND_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAND_SYMBOL, 0)
}

func (s *Opt_window_frame_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_window_frame_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_window_frame_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_window_frame_clause(s)
	}
}

func (s *Opt_window_frame_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_window_frame_clause(s)
	}
}

func (s *Opt_window_frame_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_window_frame_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_window_frame_clause() (localctx IOpt_window_frame_clauseContext) {
	localctx = NewOpt_window_frame_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 460, GoogleSQLParserRULE_opt_window_frame_clause)
	p.SetState(3119)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 326, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3110)
			p.Frame_unit()
		}
		{
			p.SetState(3111)
			p.Match(GoogleSQLParserBETWEEN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3112)
			p.Window_frame_bound()
		}
		{
			p.SetState(3113)
			p.Match(GoogleSQLParserAND_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3114)
			p.Window_frame_bound()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3116)
			p.Frame_unit()
		}
		{
			p.SetState(3117)
			p.Window_frame_bound()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWindow_frame_boundContext is an interface to support dynamic dispatch.
type IWindow_frame_boundContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UNBOUNDED_SYMBOL() antlr.TerminalNode
	Preceding_or_following() IPreceding_or_followingContext
	CURRENT_SYMBOL() antlr.TerminalNode
	ROW_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsWindow_frame_boundContext differentiates from other interfaces.
	IsWindow_frame_boundContext()
}

type Window_frame_boundContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_frame_boundContext() *Window_frame_boundContext {
	var p = new(Window_frame_boundContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_window_frame_bound
	return p
}

func InitEmptyWindow_frame_boundContext(p *Window_frame_boundContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_window_frame_bound
}

func (*Window_frame_boundContext) IsWindow_frame_boundContext() {}

func NewWindow_frame_boundContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_frame_boundContext {
	var p = new(Window_frame_boundContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_window_frame_bound

	return p
}

func (s *Window_frame_boundContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_frame_boundContext) UNBOUNDED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNBOUNDED_SYMBOL, 0)
}

func (s *Window_frame_boundContext) Preceding_or_following() IPreceding_or_followingContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPreceding_or_followingContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPreceding_or_followingContext)
}

func (s *Window_frame_boundContext) CURRENT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCURRENT_SYMBOL, 0)
}

func (s *Window_frame_boundContext) ROW_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserROW_SYMBOL, 0)
}

func (s *Window_frame_boundContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Window_frame_boundContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_frame_boundContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_frame_boundContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWindow_frame_bound(s)
	}
}

func (s *Window_frame_boundContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWindow_frame_bound(s)
	}
}

func (s *Window_frame_boundContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWindow_frame_bound(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Window_frame_bound() (localctx IWindow_frame_boundContext) {
	localctx = NewWindow_frame_boundContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 462, GoogleSQLParserRULE_window_frame_bound)
	p.SetState(3128)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserUNBOUNDED_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3121)
			p.Match(GoogleSQLParserUNBOUNDED_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3122)
			p.Preceding_or_following()
		}

	case GoogleSQLParserCURRENT_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3123)
			p.Match(GoogleSQLParserCURRENT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3124)
			p.Match(GoogleSQLParserROW_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserPLUS_OPERATOR, GoogleSQLParserMINUS_OPERATOR, GoogleSQLParserBITWISE_NOT_OPERATOR, GoogleSQLParserRC_BRACKET_SYMBOL, GoogleSQLParserLR_BRACKET_SYMBOL, GoogleSQLParserLS_BRACKET_SYMBOL, GoogleSQLParserQUESTION_SYMBOL, GoogleSQLParserAT_SYMBOL, GoogleSQLParserATAT_SYMBOL, GoogleSQLParserSTRING_LITERAL, GoogleSQLParserBYTES_LITERAL, GoogleSQLParserFLOATING_POINT_LITERAL, GoogleSQLParserINTEGER_LITERAL, GoogleSQLParserARRAY_SYMBOL, GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserLEFT_SYMBOL, GoogleSQLParserNULL_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserRIGHT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSTRUCT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserWITH_SYMBOL, GoogleSQLParserTRUE_SYMBOL, GoogleSQLParserFALSE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserNOT_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserRANGE_SYMBOL, GoogleSQLParserINTERVAL_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserNEW_SYMBOL, GoogleSQLParserCASE_SYMBOL, GoogleSQLParserCAST_SYMBOL, GoogleSQLParserEXTRACT_SYMBOL, GoogleSQLParserCOLLATE_SYMBOL, GoogleSQLParserIF_SYMBOL, GoogleSQLParserGROUPING_SYMBOL, GoogleSQLParserEXISTS_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3125)
			p.expression(0)
		}
		{
			p.SetState(3126)
			p.Preceding_or_following()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPreceding_or_followingContext is an interface to support dynamic dispatch.
type IPreceding_or_followingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PRECEDING_SYMBOL() antlr.TerminalNode
	FOLLOWING_SYMBOL() antlr.TerminalNode

	// IsPreceding_or_followingContext differentiates from other interfaces.
	IsPreceding_or_followingContext()
}

type Preceding_or_followingContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPreceding_or_followingContext() *Preceding_or_followingContext {
	var p = new(Preceding_or_followingContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_preceding_or_following
	return p
}

func InitEmptyPreceding_or_followingContext(p *Preceding_or_followingContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_preceding_or_following
}

func (*Preceding_or_followingContext) IsPreceding_or_followingContext() {}

func NewPreceding_or_followingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Preceding_or_followingContext {
	var p = new(Preceding_or_followingContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_preceding_or_following

	return p
}

func (s *Preceding_or_followingContext) GetParser() antlr.Parser { return s.parser }

func (s *Preceding_or_followingContext) PRECEDING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPRECEDING_SYMBOL, 0)
}

func (s *Preceding_or_followingContext) FOLLOWING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFOLLOWING_SYMBOL, 0)
}

func (s *Preceding_or_followingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Preceding_or_followingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Preceding_or_followingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPreceding_or_following(s)
	}
}

func (s *Preceding_or_followingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPreceding_or_following(s)
	}
}

func (s *Preceding_or_followingContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPreceding_or_following(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Preceding_or_following() (localctx IPreceding_or_followingContext) {
	localctx = NewPreceding_or_followingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 464, GoogleSQLParserRULE_preceding_or_following)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3130)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserPRECEDING_SYMBOL || _la == GoogleSQLParserFOLLOWING_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFrame_unitContext is an interface to support dynamic dispatch.
type IFrame_unitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ROWS_SYMBOL() antlr.TerminalNode
	RANGE_SYMBOL() antlr.TerminalNode

	// IsFrame_unitContext differentiates from other interfaces.
	IsFrame_unitContext()
}

type Frame_unitContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrame_unitContext() *Frame_unitContext {
	var p = new(Frame_unitContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_frame_unit
	return p
}

func InitEmptyFrame_unitContext(p *Frame_unitContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_frame_unit
}

func (*Frame_unitContext) IsFrame_unitContext() {}

func NewFrame_unitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Frame_unitContext {
	var p = new(Frame_unitContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_frame_unit

	return p
}

func (s *Frame_unitContext) GetParser() antlr.Parser { return s.parser }

func (s *Frame_unitContext) ROWS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserROWS_SYMBOL, 0)
}

func (s *Frame_unitContext) RANGE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRANGE_SYMBOL, 0)
}

func (s *Frame_unitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Frame_unitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Frame_unitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFrame_unit(s)
	}
}

func (s *Frame_unitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFrame_unit(s)
	}
}

func (s *Frame_unitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFrame_unit(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Frame_unit() (localctx IFrame_unitContext) {
	localctx = NewFrame_unitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 466, GoogleSQLParserRULE_frame_unit)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3132)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserRANGE_SYMBOL || _la == GoogleSQLParserROWS_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPartition_by_clauseContext is an interface to support dynamic dispatch.
type IPartition_by_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Partition_by_clause_prefix() IPartition_by_clause_prefixContext

	// IsPartition_by_clauseContext differentiates from other interfaces.
	IsPartition_by_clauseContext()
}

type Partition_by_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartition_by_clauseContext() *Partition_by_clauseContext {
	var p = new(Partition_by_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_partition_by_clause
	return p
}

func InitEmptyPartition_by_clauseContext(p *Partition_by_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_partition_by_clause
}

func (*Partition_by_clauseContext) IsPartition_by_clauseContext() {}

func NewPartition_by_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Partition_by_clauseContext {
	var p = new(Partition_by_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_partition_by_clause

	return p
}

func (s *Partition_by_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Partition_by_clauseContext) Partition_by_clause_prefix() IPartition_by_clause_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartition_by_clause_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartition_by_clause_prefixContext)
}

func (s *Partition_by_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Partition_by_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Partition_by_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPartition_by_clause(s)
	}
}

func (s *Partition_by_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPartition_by_clause(s)
	}
}

func (s *Partition_by_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPartition_by_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Partition_by_clause() (localctx IPartition_by_clauseContext) {
	localctx = NewPartition_by_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 468, GoogleSQLParserRULE_partition_by_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3134)
		p.Partition_by_clause_prefix()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPartition_by_clause_prefixContext is an interface to support dynamic dispatch.
type IPartition_by_clause_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PARTITION_SYMBOL() antlr.TerminalNode
	BY_SYMBOL() antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	Hint() IHintContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsPartition_by_clause_prefixContext differentiates from other interfaces.
	IsPartition_by_clause_prefixContext()
}

type Partition_by_clause_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartition_by_clause_prefixContext() *Partition_by_clause_prefixContext {
	var p = new(Partition_by_clause_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_partition_by_clause_prefix
	return p
}

func InitEmptyPartition_by_clause_prefixContext(p *Partition_by_clause_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_partition_by_clause_prefix
}

func (*Partition_by_clause_prefixContext) IsPartition_by_clause_prefixContext() {}

func NewPartition_by_clause_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Partition_by_clause_prefixContext {
	var p = new(Partition_by_clause_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_partition_by_clause_prefix

	return p
}

func (s *Partition_by_clause_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Partition_by_clause_prefixContext) PARTITION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPARTITION_SYMBOL, 0)
}

func (s *Partition_by_clause_prefixContext) BY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBY_SYMBOL, 0)
}

func (s *Partition_by_clause_prefixContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *Partition_by_clause_prefixContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Partition_by_clause_prefixContext) Hint() IHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHintContext)
}

func (s *Partition_by_clause_prefixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Partition_by_clause_prefixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Partition_by_clause_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Partition_by_clause_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Partition_by_clause_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPartition_by_clause_prefix(s)
	}
}

func (s *Partition_by_clause_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPartition_by_clause_prefix(s)
	}
}

func (s *Partition_by_clause_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPartition_by_clause_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Partition_by_clause_prefix() (localctx IPartition_by_clause_prefixContext) {
	localctx = NewPartition_by_clause_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 470, GoogleSQLParserRULE_partition_by_clause_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3136)
		p.Match(GoogleSQLParserPARTITION_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(3138)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAT_SYMBOL {
		{
			p.SetState(3137)
			p.Hint()
		}

	}
	{
		p.SetState(3140)
		p.Match(GoogleSQLParserBY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3141)
		p.expression(0)
	}
	p.SetState(3146)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(3142)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3143)
			p.expression(0)
		}

		p.SetState(3148)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWith_group_rowsContext is an interface to support dynamic dispatch.
type IWith_group_rowsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WITH_SYMBOL() antlr.TerminalNode
	GROUP_SYMBOL() antlr.TerminalNode
	ROWS_SYMBOL() antlr.TerminalNode

	// IsWith_group_rowsContext differentiates from other interfaces.
	IsWith_group_rowsContext()
}

type With_group_rowsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_group_rowsContext() *With_group_rowsContext {
	var p = new(With_group_rowsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_group_rows
	return p
}

func InitEmptyWith_group_rowsContext(p *With_group_rowsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_group_rows
}

func (*With_group_rowsContext) IsWith_group_rowsContext() {}

func NewWith_group_rowsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_group_rowsContext {
	var p = new(With_group_rowsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_with_group_rows

	return p
}

func (s *With_group_rowsContext) GetParser() antlr.Parser { return s.parser }

func (s *With_group_rowsContext) WITH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWITH_SYMBOL, 0)
}

func (s *With_group_rowsContext) GROUP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGROUP_SYMBOL, 0)
}

func (s *With_group_rowsContext) ROWS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserROWS_SYMBOL, 0)
}

func (s *With_group_rowsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_group_rowsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_group_rowsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWith_group_rows(s)
	}
}

func (s *With_group_rowsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWith_group_rows(s)
	}
}

func (s *With_group_rowsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWith_group_rows(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) With_group_rows() (localctx IWith_group_rowsContext) {
	localctx = NewWith_group_rowsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 472, GoogleSQLParserRULE_with_group_rows)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3149)
		p.Match(GoogleSQLParserWITH_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3150)
		p.Match(GoogleSQLParserGROUP_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3151)
		p.Match(GoogleSQLParserROWS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWith_report_modifierContext is an interface to support dynamic dispatch.
type IWith_report_modifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WITH_SYMBOL() antlr.TerminalNode
	REPORT_SYMBOL() antlr.TerminalNode
	With_report_format() IWith_report_formatContext

	// IsWith_report_modifierContext differentiates from other interfaces.
	IsWith_report_modifierContext()
}

type With_report_modifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_report_modifierContext() *With_report_modifierContext {
	var p = new(With_report_modifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_report_modifier
	return p
}

func InitEmptyWith_report_modifierContext(p *With_report_modifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_report_modifier
}

func (*With_report_modifierContext) IsWith_report_modifierContext() {}

func NewWith_report_modifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_report_modifierContext {
	var p = new(With_report_modifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_with_report_modifier

	return p
}

func (s *With_report_modifierContext) GetParser() antlr.Parser { return s.parser }

func (s *With_report_modifierContext) WITH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWITH_SYMBOL, 0)
}

func (s *With_report_modifierContext) REPORT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPORT_SYMBOL, 0)
}

func (s *With_report_modifierContext) With_report_format() IWith_report_formatContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_report_formatContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_report_formatContext)
}

func (s *With_report_modifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_report_modifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_report_modifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWith_report_modifier(s)
	}
}

func (s *With_report_modifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWith_report_modifier(s)
	}
}

func (s *With_report_modifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWith_report_modifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) With_report_modifier() (localctx IWith_report_modifierContext) {
	localctx = NewWith_report_modifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 474, GoogleSQLParserRULE_with_report_modifier)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3153)
		p.Match(GoogleSQLParserWITH_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3154)
		p.Match(GoogleSQLParserREPORT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3155)
		p.With_report_format()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IClamped_between_modifierContext is an interface to support dynamic dispatch.
type IClamped_between_modifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CLAMPED_SYMBOL() antlr.TerminalNode
	Expression_higher_prec_than_and() IExpression_higher_prec_than_andContext
	AND_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsClamped_between_modifierContext differentiates from other interfaces.
	IsClamped_between_modifierContext()
}

type Clamped_between_modifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClamped_between_modifierContext() *Clamped_between_modifierContext {
	var p = new(Clamped_between_modifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_clamped_between_modifier
	return p
}

func InitEmptyClamped_between_modifierContext(p *Clamped_between_modifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_clamped_between_modifier
}

func (*Clamped_between_modifierContext) IsClamped_between_modifierContext() {}

func NewClamped_between_modifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Clamped_between_modifierContext {
	var p = new(Clamped_between_modifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_clamped_between_modifier

	return p
}

func (s *Clamped_between_modifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Clamped_between_modifierContext) CLAMPED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCLAMPED_SYMBOL, 0)
}

func (s *Clamped_between_modifierContext) Expression_higher_prec_than_and() IExpression_higher_prec_than_andContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpression_higher_prec_than_andContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpression_higher_prec_than_andContext)
}

func (s *Clamped_between_modifierContext) AND_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAND_SYMBOL, 0)
}

func (s *Clamped_between_modifierContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Clamped_between_modifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Clamped_between_modifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Clamped_between_modifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterClamped_between_modifier(s)
	}
}

func (s *Clamped_between_modifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitClamped_between_modifier(s)
	}
}

func (s *Clamped_between_modifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitClamped_between_modifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Clamped_between_modifier() (localctx IClamped_between_modifierContext) {
	localctx = NewClamped_between_modifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 476, GoogleSQLParserRULE_clamped_between_modifier)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3157)
		p.Match(GoogleSQLParserCLAMPED_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3158)
		p.expression_higher_prec_than_and(0)
	}
	{
		p.SetState(3159)
		p.Match(GoogleSQLParserAND_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3160)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWith_report_formatContext is an interface to support dynamic dispatch.
type IWith_report_formatContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Options_list() IOptions_listContext

	// IsWith_report_formatContext differentiates from other interfaces.
	IsWith_report_formatContext()
}

type With_report_formatContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_report_formatContext() *With_report_formatContext {
	var p = new(With_report_formatContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_report_format
	return p
}

func InitEmptyWith_report_formatContext(p *With_report_formatContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_report_format
}

func (*With_report_formatContext) IsWith_report_formatContext() {}

func NewWith_report_formatContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_report_formatContext {
	var p = new(With_report_formatContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_with_report_format

	return p
}

func (s *With_report_formatContext) GetParser() antlr.Parser { return s.parser }

func (s *With_report_formatContext) Options_list() IOptions_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOptions_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOptions_listContext)
}

func (s *With_report_formatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_report_formatContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_report_formatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWith_report_format(s)
	}
}

func (s *With_report_formatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWith_report_format(s)
	}
}

func (s *With_report_formatContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWith_report_format(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) With_report_format() (localctx IWith_report_formatContext) {
	localctx = NewWith_report_formatContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 478, GoogleSQLParserRULE_with_report_format)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3162)
		p.Options_list()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOptions_listContext is an interface to support dynamic dispatch.
type IOptions_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Options_list_prefix() IOptions_list_prefixContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsOptions_listContext differentiates from other interfaces.
	IsOptions_listContext()
}

type Options_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOptions_listContext() *Options_listContext {
	var p = new(Options_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_options_list
	return p
}

func InitEmptyOptions_listContext(p *Options_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_options_list
}

func (*Options_listContext) IsOptions_listContext() {}

func NewOptions_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Options_listContext {
	var p = new(Options_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_options_list

	return p
}

func (s *Options_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Options_listContext) Options_list_prefix() IOptions_list_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOptions_list_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOptions_list_prefixContext)
}

func (s *Options_listContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Options_listContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Options_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Options_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Options_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOptions_list(s)
	}
}

func (s *Options_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOptions_list(s)
	}
}

func (s *Options_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOptions_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Options_list() (localctx IOptions_listContext) {
	localctx = NewOptions_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 480, GoogleSQLParserRULE_options_list)
	p.SetState(3169)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 330, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3164)
			p.Options_list_prefix()
		}
		{
			p.SetState(3165)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3167)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3168)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOptions_list_prefixContext is an interface to support dynamic dispatch.
type IOptions_list_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllOptions_entry() []IOptions_entryContext
	Options_entry(i int) IOptions_entryContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsOptions_list_prefixContext differentiates from other interfaces.
	IsOptions_list_prefixContext()
}

type Options_list_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOptions_list_prefixContext() *Options_list_prefixContext {
	var p = new(Options_list_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_options_list_prefix
	return p
}

func InitEmptyOptions_list_prefixContext(p *Options_list_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_options_list_prefix
}

func (*Options_list_prefixContext) IsOptions_list_prefixContext() {}

func NewOptions_list_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Options_list_prefixContext {
	var p = new(Options_list_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_options_list_prefix

	return p
}

func (s *Options_list_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Options_list_prefixContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Options_list_prefixContext) AllOptions_entry() []IOptions_entryContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOptions_entryContext); ok {
			len++
		}
	}

	tst := make([]IOptions_entryContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOptions_entryContext); ok {
			tst[i] = t.(IOptions_entryContext)
			i++
		}
	}

	return tst
}

func (s *Options_list_prefixContext) Options_entry(i int) IOptions_entryContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOptions_entryContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOptions_entryContext)
}

func (s *Options_list_prefixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Options_list_prefixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Options_list_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Options_list_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Options_list_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOptions_list_prefix(s)
	}
}

func (s *Options_list_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOptions_list_prefix(s)
	}
}

func (s *Options_list_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOptions_list_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Options_list_prefix() (localctx IOptions_list_prefixContext) {
	localctx = NewOptions_list_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 482, GoogleSQLParserRULE_options_list_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3171)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3172)
		p.Options_entry()
	}
	p.SetState(3177)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(3173)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3174)
			p.Options_entry()
		}

		p.SetState(3179)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOptions_entryContext is an interface to support dynamic dispatch.
type IOptions_entryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier_in_hints() IIdentifier_in_hintsContext
	Options_assignment_operator() IOptions_assignment_operatorContext
	Expression_or_proto() IExpression_or_protoContext

	// IsOptions_entryContext differentiates from other interfaces.
	IsOptions_entryContext()
}

type Options_entryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOptions_entryContext() *Options_entryContext {
	var p = new(Options_entryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_options_entry
	return p
}

func InitEmptyOptions_entryContext(p *Options_entryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_options_entry
}

func (*Options_entryContext) IsOptions_entryContext() {}

func NewOptions_entryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Options_entryContext {
	var p = new(Options_entryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_options_entry

	return p
}

func (s *Options_entryContext) GetParser() antlr.Parser { return s.parser }

func (s *Options_entryContext) Identifier_in_hints() IIdentifier_in_hintsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifier_in_hintsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifier_in_hintsContext)
}

func (s *Options_entryContext) Options_assignment_operator() IOptions_assignment_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOptions_assignment_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOptions_assignment_operatorContext)
}

func (s *Options_entryContext) Expression_or_proto() IExpression_or_protoContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpression_or_protoContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpression_or_protoContext)
}

func (s *Options_entryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Options_entryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Options_entryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOptions_entry(s)
	}
}

func (s *Options_entryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOptions_entry(s)
	}
}

func (s *Options_entryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOptions_entry(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Options_entry() (localctx IOptions_entryContext) {
	localctx = NewOptions_entryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 484, GoogleSQLParserRULE_options_entry)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3180)
		p.Identifier_in_hints()
	}
	{
		p.SetState(3181)
		p.Options_assignment_operator()
	}
	{
		p.SetState(3182)
		p.Expression_or_proto()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpression_or_protoContext is an interface to support dynamic dispatch.
type IExpression_or_protoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PROTO_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsExpression_or_protoContext differentiates from other interfaces.
	IsExpression_or_protoContext()
}

type Expression_or_protoContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_or_protoContext() *Expression_or_protoContext {
	var p = new(Expression_or_protoContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expression_or_proto
	return p
}

func InitEmptyExpression_or_protoContext(p *Expression_or_protoContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expression_or_proto
}

func (*Expression_or_protoContext) IsExpression_or_protoContext() {}

func NewExpression_or_protoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_or_protoContext {
	var p = new(Expression_or_protoContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_expression_or_proto

	return p
}

func (s *Expression_or_protoContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_or_protoContext) PROTO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPROTO_SYMBOL, 0)
}

func (s *Expression_or_protoContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Expression_or_protoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_or_protoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expression_or_protoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterExpression_or_proto(s)
	}
}

func (s *Expression_or_protoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitExpression_or_proto(s)
	}
}

func (s *Expression_or_protoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitExpression_or_proto(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Expression_or_proto() (localctx IExpression_or_protoContext) {
	localctx = NewExpression_or_protoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 486, GoogleSQLParserRULE_expression_or_proto)
	p.SetState(3186)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserPROTO_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3184)
			p.Match(GoogleSQLParserPROTO_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserPLUS_OPERATOR, GoogleSQLParserMINUS_OPERATOR, GoogleSQLParserBITWISE_NOT_OPERATOR, GoogleSQLParserRC_BRACKET_SYMBOL, GoogleSQLParserLR_BRACKET_SYMBOL, GoogleSQLParserLS_BRACKET_SYMBOL, GoogleSQLParserQUESTION_SYMBOL, GoogleSQLParserAT_SYMBOL, GoogleSQLParserATAT_SYMBOL, GoogleSQLParserSTRING_LITERAL, GoogleSQLParserBYTES_LITERAL, GoogleSQLParserFLOATING_POINT_LITERAL, GoogleSQLParserINTEGER_LITERAL, GoogleSQLParserARRAY_SYMBOL, GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserLEFT_SYMBOL, GoogleSQLParserNULL_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserRIGHT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSTRUCT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserWITH_SYMBOL, GoogleSQLParserTRUE_SYMBOL, GoogleSQLParserFALSE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserNOT_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserRANGE_SYMBOL, GoogleSQLParserINTERVAL_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserNEW_SYMBOL, GoogleSQLParserCASE_SYMBOL, GoogleSQLParserCAST_SYMBOL, GoogleSQLParserEXTRACT_SYMBOL, GoogleSQLParserCOLLATE_SYMBOL, GoogleSQLParserIF_SYMBOL, GoogleSQLParserGROUPING_SYMBOL, GoogleSQLParserEXISTS_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3185)
			p.expression(0)
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOptions_assignment_operatorContext is an interface to support dynamic dispatch.
type IOptions_assignment_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EQUAL_OPERATOR() antlr.TerminalNode
	PLUS_EQUAL_SYMBOL() antlr.TerminalNode
	SUB_EQUAL_SYMBOL() antlr.TerminalNode

	// IsOptions_assignment_operatorContext differentiates from other interfaces.
	IsOptions_assignment_operatorContext()
}

type Options_assignment_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOptions_assignment_operatorContext() *Options_assignment_operatorContext {
	var p = new(Options_assignment_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_options_assignment_operator
	return p
}

func InitEmptyOptions_assignment_operatorContext(p *Options_assignment_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_options_assignment_operator
}

func (*Options_assignment_operatorContext) IsOptions_assignment_operatorContext() {}

func NewOptions_assignment_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Options_assignment_operatorContext {
	var p = new(Options_assignment_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_options_assignment_operator

	return p
}

func (s *Options_assignment_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Options_assignment_operatorContext) EQUAL_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEQUAL_OPERATOR, 0)
}

func (s *Options_assignment_operatorContext) PLUS_EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPLUS_EQUAL_SYMBOL, 0)
}

func (s *Options_assignment_operatorContext) SUB_EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSUB_EQUAL_SYMBOL, 0)
}

func (s *Options_assignment_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Options_assignment_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Options_assignment_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOptions_assignment_operator(s)
	}
}

func (s *Options_assignment_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOptions_assignment_operator(s)
	}
}

func (s *Options_assignment_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOptions_assignment_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Options_assignment_operator() (localctx IOptions_assignment_operatorContext) {
	localctx = NewOptions_assignment_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 488, GoogleSQLParserRULE_options_assignment_operator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3188)
		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&206158430210) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_null_handling_modifierContext is an interface to support dynamic dispatch.
type IOpt_null_handling_modifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IGNORE_SYMBOL() antlr.TerminalNode
	NULLS_SYMBOL() antlr.TerminalNode
	RESPECT_SYMBOL() antlr.TerminalNode

	// IsOpt_null_handling_modifierContext differentiates from other interfaces.
	IsOpt_null_handling_modifierContext()
}

type Opt_null_handling_modifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_null_handling_modifierContext() *Opt_null_handling_modifierContext {
	var p = new(Opt_null_handling_modifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_null_handling_modifier
	return p
}

func InitEmptyOpt_null_handling_modifierContext(p *Opt_null_handling_modifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_null_handling_modifier
}

func (*Opt_null_handling_modifierContext) IsOpt_null_handling_modifierContext() {}

func NewOpt_null_handling_modifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_null_handling_modifierContext {
	var p = new(Opt_null_handling_modifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_null_handling_modifier

	return p
}

func (s *Opt_null_handling_modifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_null_handling_modifierContext) IGNORE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIGNORE_SYMBOL, 0)
}

func (s *Opt_null_handling_modifierContext) NULLS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNULLS_SYMBOL, 0)
}

func (s *Opt_null_handling_modifierContext) RESPECT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRESPECT_SYMBOL, 0)
}

func (s *Opt_null_handling_modifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_null_handling_modifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_null_handling_modifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_null_handling_modifier(s)
	}
}

func (s *Opt_null_handling_modifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_null_handling_modifier(s)
	}
}

func (s *Opt_null_handling_modifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_null_handling_modifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_null_handling_modifier() (localctx IOpt_null_handling_modifierContext) {
	localctx = NewOpt_null_handling_modifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 490, GoogleSQLParserRULE_opt_null_handling_modifier)
	p.SetState(3194)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserIGNORE_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3190)
			p.Match(GoogleSQLParserIGNORE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3191)
			p.Match(GoogleSQLParserNULLS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserRESPECT_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3192)
			p.Match(GoogleSQLParserRESPECT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3193)
			p.Match(GoogleSQLParserNULLS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunction_call_argumentContext is an interface to support dynamic dispatch.
type IFunction_call_argumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	Opt_as_alias_with_required_as() IOpt_as_alias_with_required_asContext
	Named_argument() INamed_argumentContext
	Lambda_argument() ILambda_argumentContext
	Sequence_arg() ISequence_argContext
	SELECT_SYMBOL() antlr.TerminalNode

	// IsFunction_call_argumentContext differentiates from other interfaces.
	IsFunction_call_argumentContext()
}

type Function_call_argumentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_call_argumentContext() *Function_call_argumentContext {
	var p = new(Function_call_argumentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_call_argument
	return p
}

func InitEmptyFunction_call_argumentContext(p *Function_call_argumentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_call_argument
}

func (*Function_call_argumentContext) IsFunction_call_argumentContext() {}

func NewFunction_call_argumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_call_argumentContext {
	var p = new(Function_call_argumentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_function_call_argument

	return p
}

func (s *Function_call_argumentContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_call_argumentContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Function_call_argumentContext) Opt_as_alias_with_required_as() IOpt_as_alias_with_required_asContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_as_alias_with_required_asContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_as_alias_with_required_asContext)
}

func (s *Function_call_argumentContext) Named_argument() INamed_argumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamed_argumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamed_argumentContext)
}

func (s *Function_call_argumentContext) Lambda_argument() ILambda_argumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILambda_argumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILambda_argumentContext)
}

func (s *Function_call_argumentContext) Sequence_arg() ISequence_argContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISequence_argContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISequence_argContext)
}

func (s *Function_call_argumentContext) SELECT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSELECT_SYMBOL, 0)
}

func (s *Function_call_argumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_call_argumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_call_argumentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFunction_call_argument(s)
	}
}

func (s *Function_call_argumentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFunction_call_argument(s)
	}
}

func (s *Function_call_argumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFunction_call_argument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Function_call_argument() (localctx IFunction_call_argumentContext) {
	localctx = NewFunction_call_argumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 492, GoogleSQLParserRULE_function_call_argument)
	var _la int

	p.SetState(3205)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 335, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3196)
			p.expression(0)
		}
		p.SetState(3198)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAS_SYMBOL {
			{
				p.SetState(3197)
				p.Opt_as_alias_with_required_as()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3200)
			p.Named_argument()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3201)
			p.Lambda_argument()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3202)
			p.Sequence_arg()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3203)
			p.Match(GoogleSQLParserSELECT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Each function argument is an expression, not a query; to use a query as an expression, the query must be wrapped with additional parentheses to make it a scalar subquery expression", nil, nil)

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISequence_argContext is an interface to support dynamic dispatch.
type ISequence_argContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SEQUENCE_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext

	// IsSequence_argContext differentiates from other interfaces.
	IsSequence_argContext()
}

type Sequence_argContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySequence_argContext() *Sequence_argContext {
	var p = new(Sequence_argContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_sequence_arg
	return p
}

func InitEmptySequence_argContext(p *Sequence_argContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_sequence_arg
}

func (*Sequence_argContext) IsSequence_argContext() {}

func NewSequence_argContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sequence_argContext {
	var p = new(Sequence_argContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_sequence_arg

	return p
}

func (s *Sequence_argContext) GetParser() antlr.Parser { return s.parser }

func (s *Sequence_argContext) SEQUENCE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSEQUENCE_SYMBOL, 0)
}

func (s *Sequence_argContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Sequence_argContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sequence_argContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sequence_argContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSequence_arg(s)
	}
}

func (s *Sequence_argContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSequence_arg(s)
	}
}

func (s *Sequence_argContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSequence_arg(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Sequence_arg() (localctx ISequence_argContext) {
	localctx = NewSequence_argContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 494, GoogleSQLParserRULE_sequence_arg)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3207)
		p.Match(GoogleSQLParserSEQUENCE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3208)
		p.Path_expression()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INamed_argumentContext is an interface to support dynamic dispatch.
type INamed_argumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	EQUAL_GT_BRACKET_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	Lambda_argument() ILambda_argumentContext

	// IsNamed_argumentContext differentiates from other interfaces.
	IsNamed_argumentContext()
}

type Named_argumentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamed_argumentContext() *Named_argumentContext {
	var p = new(Named_argumentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_named_argument
	return p
}

func InitEmptyNamed_argumentContext(p *Named_argumentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_named_argument
}

func (*Named_argumentContext) IsNamed_argumentContext() {}

func NewNamed_argumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Named_argumentContext {
	var p = new(Named_argumentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_named_argument

	return p
}

func (s *Named_argumentContext) GetParser() antlr.Parser { return s.parser }

func (s *Named_argumentContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Named_argumentContext) EQUAL_GT_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEQUAL_GT_BRACKET_SYMBOL, 0)
}

func (s *Named_argumentContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Named_argumentContext) Lambda_argument() ILambda_argumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILambda_argumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILambda_argumentContext)
}

func (s *Named_argumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Named_argumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Named_argumentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterNamed_argument(s)
	}
}

func (s *Named_argumentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitNamed_argument(s)
	}
}

func (s *Named_argumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitNamed_argument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Named_argument() (localctx INamed_argumentContext) {
	localctx = NewNamed_argumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 496, GoogleSQLParserRULE_named_argument)
	p.SetState(3218)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 336, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3210)
			p.Identifier()
		}
		{
			p.SetState(3211)
			p.Match(GoogleSQLParserEQUAL_GT_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3212)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3214)
			p.Identifier()
		}
		{
			p.SetState(3215)
			p.Match(GoogleSQLParserEQUAL_GT_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3216)
			p.Lambda_argument()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILambda_argumentContext is an interface to support dynamic dispatch.
type ILambda_argumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Lambda_argument_list() ILambda_argument_listContext
	SUB_GT_BRACKET_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsLambda_argumentContext differentiates from other interfaces.
	IsLambda_argumentContext()
}

type Lambda_argumentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambda_argumentContext() *Lambda_argumentContext {
	var p = new(Lambda_argumentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_lambda_argument
	return p
}

func InitEmptyLambda_argumentContext(p *Lambda_argumentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_lambda_argument
}

func (*Lambda_argumentContext) IsLambda_argumentContext() {}

func NewLambda_argumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Lambda_argumentContext {
	var p = new(Lambda_argumentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_lambda_argument

	return p
}

func (s *Lambda_argumentContext) GetParser() antlr.Parser { return s.parser }

func (s *Lambda_argumentContext) Lambda_argument_list() ILambda_argument_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILambda_argument_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILambda_argument_listContext)
}

func (s *Lambda_argumentContext) SUB_GT_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSUB_GT_BRACKET_SYMBOL, 0)
}

func (s *Lambda_argumentContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Lambda_argumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Lambda_argumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Lambda_argumentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterLambda_argument(s)
	}
}

func (s *Lambda_argumentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitLambda_argument(s)
	}
}

func (s *Lambda_argumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitLambda_argument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Lambda_argument() (localctx ILambda_argumentContext) {
	localctx = NewLambda_argumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 498, GoogleSQLParserRULE_lambda_argument)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3220)
		p.Lambda_argument_list()
	}
	{
		p.SetState(3221)
		p.Match(GoogleSQLParserSUB_GT_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3222)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILambda_argument_listContext is an interface to support dynamic dispatch.
type ILambda_argument_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsLambda_argument_listContext differentiates from other interfaces.
	IsLambda_argument_listContext()
}

type Lambda_argument_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambda_argument_listContext() *Lambda_argument_listContext {
	var p = new(Lambda_argument_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_lambda_argument_list
	return p
}

func InitEmptyLambda_argument_listContext(p *Lambda_argument_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_lambda_argument_list
}

func (*Lambda_argument_listContext) IsLambda_argument_listContext() {}

func NewLambda_argument_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Lambda_argument_listContext {
	var p = new(Lambda_argument_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_lambda_argument_list

	return p
}

func (s *Lambda_argument_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Lambda_argument_listContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Lambda_argument_listContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Lambda_argument_listContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Lambda_argument_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Lambda_argument_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Lambda_argument_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterLambda_argument_list(s)
	}
}

func (s *Lambda_argument_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitLambda_argument_list(s)
	}
}

func (s *Lambda_argument_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitLambda_argument_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Lambda_argument_list() (localctx ILambda_argument_listContext) {
	localctx = NewLambda_argument_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 500, GoogleSQLParserRULE_lambda_argument_list)
	p.SetState(3227)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 337, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3224)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3225)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3226)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILimit_offset_clauseContext is an interface to support dynamic dispatch.
type ILimit_offset_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LIMIT_SYMBOL() antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	OFFSET_SYMBOL() antlr.TerminalNode

	// IsLimit_offset_clauseContext differentiates from other interfaces.
	IsLimit_offset_clauseContext()
}

type Limit_offset_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLimit_offset_clauseContext() *Limit_offset_clauseContext {
	var p = new(Limit_offset_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_limit_offset_clause
	return p
}

func InitEmptyLimit_offset_clauseContext(p *Limit_offset_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_limit_offset_clause
}

func (*Limit_offset_clauseContext) IsLimit_offset_clauseContext() {}

func NewLimit_offset_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Limit_offset_clauseContext {
	var p = new(Limit_offset_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_limit_offset_clause

	return p
}

func (s *Limit_offset_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Limit_offset_clauseContext) LIMIT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLIMIT_SYMBOL, 0)
}

func (s *Limit_offset_clauseContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *Limit_offset_clauseContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Limit_offset_clauseContext) OFFSET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOFFSET_SYMBOL, 0)
}

func (s *Limit_offset_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Limit_offset_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Limit_offset_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterLimit_offset_clause(s)
	}
}

func (s *Limit_offset_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitLimit_offset_clause(s)
	}
}

func (s *Limit_offset_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitLimit_offset_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Limit_offset_clause() (localctx ILimit_offset_clauseContext) {
	localctx = NewLimit_offset_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 502, GoogleSQLParserRULE_limit_offset_clause)
	p.SetState(3236)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 338, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3229)
			p.Match(GoogleSQLParserLIMIT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3230)
			p.expression(0)
		}
		{
			p.SetState(3231)
			p.Match(GoogleSQLParserOFFSET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3232)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3234)
			p.Match(GoogleSQLParserLIMIT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3235)
			p.expression(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_having_or_group_by_modifierContext is an interface to support dynamic dispatch.
type IOpt_having_or_group_by_modifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	HAVING_SYMBOL() antlr.TerminalNode
	MAX_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	MIN_SYMBOL() antlr.TerminalNode
	Group_by_clause_prefix() IGroup_by_clause_prefixContext

	// IsOpt_having_or_group_by_modifierContext differentiates from other interfaces.
	IsOpt_having_or_group_by_modifierContext()
}

type Opt_having_or_group_by_modifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_having_or_group_by_modifierContext() *Opt_having_or_group_by_modifierContext {
	var p = new(Opt_having_or_group_by_modifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_having_or_group_by_modifier
	return p
}

func InitEmptyOpt_having_or_group_by_modifierContext(p *Opt_having_or_group_by_modifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_having_or_group_by_modifier
}

func (*Opt_having_or_group_by_modifierContext) IsOpt_having_or_group_by_modifierContext() {}

func NewOpt_having_or_group_by_modifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_having_or_group_by_modifierContext {
	var p = new(Opt_having_or_group_by_modifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_having_or_group_by_modifier

	return p
}

func (s *Opt_having_or_group_by_modifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_having_or_group_by_modifierContext) HAVING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserHAVING_SYMBOL, 0)
}

func (s *Opt_having_or_group_by_modifierContext) MAX_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMAX_SYMBOL, 0)
}

func (s *Opt_having_or_group_by_modifierContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Opt_having_or_group_by_modifierContext) MIN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMIN_SYMBOL, 0)
}

func (s *Opt_having_or_group_by_modifierContext) Group_by_clause_prefix() IGroup_by_clause_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGroup_by_clause_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGroup_by_clause_prefixContext)
}

func (s *Opt_having_or_group_by_modifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_having_or_group_by_modifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_having_or_group_by_modifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_having_or_group_by_modifier(s)
	}
}

func (s *Opt_having_or_group_by_modifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_having_or_group_by_modifier(s)
	}
}

func (s *Opt_having_or_group_by_modifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_having_or_group_by_modifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_having_or_group_by_modifier() (localctx IOpt_having_or_group_by_modifierContext) {
	localctx = NewOpt_having_or_group_by_modifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 504, GoogleSQLParserRULE_opt_having_or_group_by_modifier)
	p.SetState(3246)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 339, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3238)
			p.Match(GoogleSQLParserHAVING_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3239)
			p.Match(GoogleSQLParserMAX_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3240)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3241)
			p.Match(GoogleSQLParserHAVING_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3242)
			p.Match(GoogleSQLParserMIN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3243)
			p.expression(0)
		}
		{
			p.SetState(3244)
			p.Group_by_clause_prefix()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGroup_by_clause_prefixContext is an interface to support dynamic dispatch.
type IGroup_by_clause_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Group_by_preamble() IGroup_by_preambleContext
	AllGrouping_item() []IGrouping_itemContext
	Grouping_item(i int) IGrouping_itemContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsGroup_by_clause_prefixContext differentiates from other interfaces.
	IsGroup_by_clause_prefixContext()
}

type Group_by_clause_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroup_by_clause_prefixContext() *Group_by_clause_prefixContext {
	var p = new(Group_by_clause_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_group_by_clause_prefix
	return p
}

func InitEmptyGroup_by_clause_prefixContext(p *Group_by_clause_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_group_by_clause_prefix
}

func (*Group_by_clause_prefixContext) IsGroup_by_clause_prefixContext() {}

func NewGroup_by_clause_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Group_by_clause_prefixContext {
	var p = new(Group_by_clause_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_group_by_clause_prefix

	return p
}

func (s *Group_by_clause_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Group_by_clause_prefixContext) Group_by_preamble() IGroup_by_preambleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGroup_by_preambleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGroup_by_preambleContext)
}

func (s *Group_by_clause_prefixContext) AllGrouping_item() []IGrouping_itemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IGrouping_itemContext); ok {
			len++
		}
	}

	tst := make([]IGrouping_itemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IGrouping_itemContext); ok {
			tst[i] = t.(IGrouping_itemContext)
			i++
		}
	}

	return tst
}

func (s *Group_by_clause_prefixContext) Grouping_item(i int) IGrouping_itemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGrouping_itemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGrouping_itemContext)
}

func (s *Group_by_clause_prefixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Group_by_clause_prefixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Group_by_clause_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Group_by_clause_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Group_by_clause_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGroup_by_clause_prefix(s)
	}
}

func (s *Group_by_clause_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGroup_by_clause_prefix(s)
	}
}

func (s *Group_by_clause_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGroup_by_clause_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Group_by_clause_prefix() (localctx IGroup_by_clause_prefixContext) {
	localctx = NewGroup_by_clause_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 506, GoogleSQLParserRULE_group_by_clause_prefix)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3248)
		p.Group_by_preamble()
	}
	{
		p.SetState(3249)
		p.Grouping_item()
	}
	p.SetState(3254)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 340, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(3250)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(3251)
				p.Grouping_item()
			}

		}
		p.SetState(3256)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 340, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGroup_by_preambleContext is an interface to support dynamic dispatch.
type IGroup_by_preambleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	GROUP_SYMBOL() antlr.TerminalNode
	BY_SYMBOL() antlr.TerminalNode
	Hint() IHintContext
	Opt_and_order() IOpt_and_orderContext

	// IsGroup_by_preambleContext differentiates from other interfaces.
	IsGroup_by_preambleContext()
}

type Group_by_preambleContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroup_by_preambleContext() *Group_by_preambleContext {
	var p = new(Group_by_preambleContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_group_by_preamble
	return p
}

func InitEmptyGroup_by_preambleContext(p *Group_by_preambleContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_group_by_preamble
}

func (*Group_by_preambleContext) IsGroup_by_preambleContext() {}

func NewGroup_by_preambleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Group_by_preambleContext {
	var p = new(Group_by_preambleContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_group_by_preamble

	return p
}

func (s *Group_by_preambleContext) GetParser() antlr.Parser { return s.parser }

func (s *Group_by_preambleContext) GROUP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGROUP_SYMBOL, 0)
}

func (s *Group_by_preambleContext) BY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBY_SYMBOL, 0)
}

func (s *Group_by_preambleContext) Hint() IHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHintContext)
}

func (s *Group_by_preambleContext) Opt_and_order() IOpt_and_orderContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_and_orderContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_and_orderContext)
}

func (s *Group_by_preambleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Group_by_preambleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Group_by_preambleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGroup_by_preamble(s)
	}
}

func (s *Group_by_preambleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGroup_by_preamble(s)
	}
}

func (s *Group_by_preambleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGroup_by_preamble(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Group_by_preamble() (localctx IGroup_by_preambleContext) {
	localctx = NewGroup_by_preambleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 508, GoogleSQLParserRULE_group_by_preamble)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3257)
		p.Match(GoogleSQLParserGROUP_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(3259)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAT_SYMBOL {
		{
			p.SetState(3258)
			p.Hint()
		}

	}
	p.SetState(3262)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAND_SYMBOL {
		{
			p.SetState(3261)
			p.Opt_and_order()
		}

	}
	{
		p.SetState(3264)
		p.Match(GoogleSQLParserBY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_and_orderContext is an interface to support dynamic dispatch.
type IOpt_and_orderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AND_SYMBOL() antlr.TerminalNode
	ORDER_SYMBOL() antlr.TerminalNode

	// IsOpt_and_orderContext differentiates from other interfaces.
	IsOpt_and_orderContext()
}

type Opt_and_orderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_and_orderContext() *Opt_and_orderContext {
	var p = new(Opt_and_orderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_and_order
	return p
}

func InitEmptyOpt_and_orderContext(p *Opt_and_orderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_and_order
}

func (*Opt_and_orderContext) IsOpt_and_orderContext() {}

func NewOpt_and_orderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_and_orderContext {
	var p = new(Opt_and_orderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_and_order

	return p
}

func (s *Opt_and_orderContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_and_orderContext) AND_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAND_SYMBOL, 0)
}

func (s *Opt_and_orderContext) ORDER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserORDER_SYMBOL, 0)
}

func (s *Opt_and_orderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_and_orderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_and_orderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_and_order(s)
	}
}

func (s *Opt_and_orderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_and_order(s)
	}
}

func (s *Opt_and_orderContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_and_order(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_and_order() (localctx IOpt_and_orderContext) {
	localctx = NewOpt_and_orderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 510, GoogleSQLParserRULE_opt_and_order)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3266)
		p.Match(GoogleSQLParserAND_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3267)
		p.Match(GoogleSQLParserORDER_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IHintContext is an interface to support dynamic dispatch.
type IHintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AT_SYMBOL() antlr.TerminalNode
	Integer_literal() IInteger_literalContext
	Hint_with_body() IHint_with_bodyContext

	// IsHintContext differentiates from other interfaces.
	IsHintContext()
}

type HintContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHintContext() *HintContext {
	var p = new(HintContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_hint
	return p
}

func InitEmptyHintContext(p *HintContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_hint
}

func (*HintContext) IsHintContext() {}

func NewHintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HintContext {
	var p = new(HintContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_hint

	return p
}

func (s *HintContext) GetParser() antlr.Parser { return s.parser }

func (s *HintContext) AT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAT_SYMBOL, 0)
}

func (s *HintContext) Integer_literal() IInteger_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInteger_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInteger_literalContext)
}

func (s *HintContext) Hint_with_body() IHint_with_bodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHint_with_bodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHint_with_bodyContext)
}

func (s *HintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterHint(s)
	}
}

func (s *HintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitHint(s)
	}
}

func (s *HintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitHint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Hint() (localctx IHintContext) {
	localctx = NewHintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 512, GoogleSQLParserRULE_hint)
	p.SetState(3272)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 343, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3269)
			p.Match(GoogleSQLParserAT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3270)
			p.Integer_literal()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3271)
			p.Hint_with_body()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IHint_with_bodyContext is an interface to support dynamic dispatch.
type IHint_with_bodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Hint_with_body_prefix() IHint_with_body_prefixContext
	RC_BRACKET_SYMBOL() antlr.TerminalNode

	// IsHint_with_bodyContext differentiates from other interfaces.
	IsHint_with_bodyContext()
}

type Hint_with_bodyContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHint_with_bodyContext() *Hint_with_bodyContext {
	var p = new(Hint_with_bodyContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_hint_with_body
	return p
}

func InitEmptyHint_with_bodyContext(p *Hint_with_bodyContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_hint_with_body
}

func (*Hint_with_bodyContext) IsHint_with_bodyContext() {}

func NewHint_with_bodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Hint_with_bodyContext {
	var p = new(Hint_with_bodyContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_hint_with_body

	return p
}

func (s *Hint_with_bodyContext) GetParser() antlr.Parser { return s.parser }

func (s *Hint_with_bodyContext) Hint_with_body_prefix() IHint_with_body_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHint_with_body_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHint_with_body_prefixContext)
}

func (s *Hint_with_bodyContext) RC_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRC_BRACKET_SYMBOL, 0)
}

func (s *Hint_with_bodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Hint_with_bodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Hint_with_bodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterHint_with_body(s)
	}
}

func (s *Hint_with_bodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitHint_with_body(s)
	}
}

func (s *Hint_with_bodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitHint_with_body(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Hint_with_body() (localctx IHint_with_bodyContext) {
	localctx = NewHint_with_bodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 514, GoogleSQLParserRULE_hint_with_body)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3274)
		p.Hint_with_body_prefix()
	}
	{
		p.SetState(3275)
		p.Match(GoogleSQLParserRC_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IHint_with_body_prefixContext is an interface to support dynamic dispatch.
type IHint_with_body_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllAT_SYMBOL() []antlr.TerminalNode
	AT_SYMBOL(i int) antlr.TerminalNode
	LC_BRACKET_SYMBOL() antlr.TerminalNode
	AllHint_entry() []IHint_entryContext
	Hint_entry(i int) IHint_entryContext
	Integer_literal() IInteger_literalContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsHint_with_body_prefixContext differentiates from other interfaces.
	IsHint_with_body_prefixContext()
}

type Hint_with_body_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHint_with_body_prefixContext() *Hint_with_body_prefixContext {
	var p = new(Hint_with_body_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_hint_with_body_prefix
	return p
}

func InitEmptyHint_with_body_prefixContext(p *Hint_with_body_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_hint_with_body_prefix
}

func (*Hint_with_body_prefixContext) IsHint_with_body_prefixContext() {}

func NewHint_with_body_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Hint_with_body_prefixContext {
	var p = new(Hint_with_body_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_hint_with_body_prefix

	return p
}

func (s *Hint_with_body_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Hint_with_body_prefixContext) AllAT_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserAT_SYMBOL)
}

func (s *Hint_with_body_prefixContext) AT_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAT_SYMBOL, i)
}

func (s *Hint_with_body_prefixContext) LC_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLC_BRACKET_SYMBOL, 0)
}

func (s *Hint_with_body_prefixContext) AllHint_entry() []IHint_entryContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IHint_entryContext); ok {
			len++
		}
	}

	tst := make([]IHint_entryContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IHint_entryContext); ok {
			tst[i] = t.(IHint_entryContext)
			i++
		}
	}

	return tst
}

func (s *Hint_with_body_prefixContext) Hint_entry(i int) IHint_entryContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHint_entryContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHint_entryContext)
}

func (s *Hint_with_body_prefixContext) Integer_literal() IInteger_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInteger_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInteger_literalContext)
}

func (s *Hint_with_body_prefixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Hint_with_body_prefixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Hint_with_body_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Hint_with_body_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Hint_with_body_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterHint_with_body_prefix(s)
	}
}

func (s *Hint_with_body_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitHint_with_body_prefix(s)
	}
}

func (s *Hint_with_body_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitHint_with_body_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Hint_with_body_prefix() (localctx IHint_with_body_prefixContext) {
	localctx = NewHint_with_body_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 516, GoogleSQLParserRULE_hint_with_body_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3277)
		p.Match(GoogleSQLParserAT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(3281)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserINTEGER_LITERAL {
		{
			p.SetState(3278)
			p.Integer_literal()
		}
		{
			p.SetState(3279)
			p.Match(GoogleSQLParserAT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(3283)
		p.Match(GoogleSQLParserLC_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3284)
		p.Hint_entry()
	}
	p.SetState(3289)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(3285)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3286)
			p.Hint_entry()
		}

		p.SetState(3291)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IHint_entryContext is an interface to support dynamic dispatch.
type IHint_entryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIdentifier_in_hints() []IIdentifier_in_hintsContext
	Identifier_in_hints(i int) IIdentifier_in_hintsContext
	EQUAL_OPERATOR() antlr.TerminalNode
	Expression() IExpressionContext
	DOT_SYMBOL() antlr.TerminalNode

	// IsHint_entryContext differentiates from other interfaces.
	IsHint_entryContext()
}

type Hint_entryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHint_entryContext() *Hint_entryContext {
	var p = new(Hint_entryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_hint_entry
	return p
}

func InitEmptyHint_entryContext(p *Hint_entryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_hint_entry
}

func (*Hint_entryContext) IsHint_entryContext() {}

func NewHint_entryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Hint_entryContext {
	var p = new(Hint_entryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_hint_entry

	return p
}

func (s *Hint_entryContext) GetParser() antlr.Parser { return s.parser }

func (s *Hint_entryContext) AllIdentifier_in_hints() []IIdentifier_in_hintsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifier_in_hintsContext); ok {
			len++
		}
	}

	tst := make([]IIdentifier_in_hintsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifier_in_hintsContext); ok {
			tst[i] = t.(IIdentifier_in_hintsContext)
			i++
		}
	}

	return tst
}

func (s *Hint_entryContext) Identifier_in_hints(i int) IIdentifier_in_hintsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifier_in_hintsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifier_in_hintsContext)
}

func (s *Hint_entryContext) EQUAL_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEQUAL_OPERATOR, 0)
}

func (s *Hint_entryContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Hint_entryContext) DOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDOT_SYMBOL, 0)
}

func (s *Hint_entryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Hint_entryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Hint_entryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterHint_entry(s)
	}
}

func (s *Hint_entryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitHint_entry(s)
	}
}

func (s *Hint_entryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitHint_entry(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Hint_entry() (localctx IHint_entryContext) {
	localctx = NewHint_entryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 518, GoogleSQLParserRULE_hint_entry)
	p.SetState(3302)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 346, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3292)
			p.Identifier_in_hints()
		}
		{
			p.SetState(3293)
			p.Match(GoogleSQLParserEQUAL_OPERATOR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3294)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3296)
			p.Identifier_in_hints()
		}
		{
			p.SetState(3297)
			p.Match(GoogleSQLParserDOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3298)
			p.Identifier_in_hints()
		}
		{
			p.SetState(3299)
			p.Match(GoogleSQLParserEQUAL_OPERATOR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3300)
			p.expression(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIdentifier_in_hintsContext is an interface to support dynamic dispatch.
type IIdentifier_in_hintsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	Extra_identifier_in_hints_name() IExtra_identifier_in_hints_nameContext

	// IsIdentifier_in_hintsContext differentiates from other interfaces.
	IsIdentifier_in_hintsContext()
}

type Identifier_in_hintsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifier_in_hintsContext() *Identifier_in_hintsContext {
	var p = new(Identifier_in_hintsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_identifier_in_hints
	return p
}

func InitEmptyIdentifier_in_hintsContext(p *Identifier_in_hintsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_identifier_in_hints
}

func (*Identifier_in_hintsContext) IsIdentifier_in_hintsContext() {}

func NewIdentifier_in_hintsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Identifier_in_hintsContext {
	var p = new(Identifier_in_hintsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_identifier_in_hints

	return p
}

func (s *Identifier_in_hintsContext) GetParser() antlr.Parser { return s.parser }

func (s *Identifier_in_hintsContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Identifier_in_hintsContext) Extra_identifier_in_hints_name() IExtra_identifier_in_hints_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExtra_identifier_in_hints_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExtra_identifier_in_hints_nameContext)
}

func (s *Identifier_in_hintsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Identifier_in_hintsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Identifier_in_hintsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterIdentifier_in_hints(s)
	}
}

func (s *Identifier_in_hintsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitIdentifier_in_hints(s)
	}
}

func (s *Identifier_in_hintsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitIdentifier_in_hints(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Identifier_in_hints() (localctx IIdentifier_in_hintsContext) {
	localctx = NewIdentifier_in_hintsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 520, GoogleSQLParserRULE_identifier_in_hints)
	p.SetState(3306)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3304)
			p.Identifier()
		}

	case GoogleSQLParserHASH_SYMBOL, GoogleSQLParserPROTO_SYMBOL, GoogleSQLParserPARTITION_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3305)
			p.Extra_identifier_in_hints_name()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExtra_identifier_in_hints_nameContext is an interface to support dynamic dispatch.
type IExtra_identifier_in_hints_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	HASH_SYMBOL() antlr.TerminalNode
	PROTO_SYMBOL() antlr.TerminalNode
	PARTITION_SYMBOL() antlr.TerminalNode

	// IsExtra_identifier_in_hints_nameContext differentiates from other interfaces.
	IsExtra_identifier_in_hints_nameContext()
}

type Extra_identifier_in_hints_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExtra_identifier_in_hints_nameContext() *Extra_identifier_in_hints_nameContext {
	var p = new(Extra_identifier_in_hints_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_extra_identifier_in_hints_name
	return p
}

func InitEmptyExtra_identifier_in_hints_nameContext(p *Extra_identifier_in_hints_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_extra_identifier_in_hints_name
}

func (*Extra_identifier_in_hints_nameContext) IsExtra_identifier_in_hints_nameContext() {}

func NewExtra_identifier_in_hints_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Extra_identifier_in_hints_nameContext {
	var p = new(Extra_identifier_in_hints_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_extra_identifier_in_hints_name

	return p
}

func (s *Extra_identifier_in_hints_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Extra_identifier_in_hints_nameContext) HASH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserHASH_SYMBOL, 0)
}

func (s *Extra_identifier_in_hints_nameContext) PROTO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPROTO_SYMBOL, 0)
}

func (s *Extra_identifier_in_hints_nameContext) PARTITION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPARTITION_SYMBOL, 0)
}

func (s *Extra_identifier_in_hints_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Extra_identifier_in_hints_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Extra_identifier_in_hints_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterExtra_identifier_in_hints_name(s)
	}
}

func (s *Extra_identifier_in_hints_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitExtra_identifier_in_hints_name(s)
	}
}

func (s *Extra_identifier_in_hints_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitExtra_identifier_in_hints_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Extra_identifier_in_hints_name() (localctx IExtra_identifier_in_hints_nameContext) {
	localctx = NewExtra_identifier_in_hints_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 522, GoogleSQLParserRULE_extra_identifier_in_hints_name)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3308)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-308)) & ^0x3f) == 0 && ((int64(1)<<(_la-308))&7) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGrouping_itemContext is an interface to support dynamic dispatch.
type IGrouping_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	Opt_as_alias_with_required_as() IOpt_as_alias_with_required_asContext
	Opt_grouping_item_order() IOpt_grouping_item_orderContext
	Rollup_list() IRollup_listContext
	Cube_list() ICube_listContext
	Grouping_set_list() IGrouping_set_listContext

	// IsGrouping_itemContext differentiates from other interfaces.
	IsGrouping_itemContext()
}

type Grouping_itemContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGrouping_itemContext() *Grouping_itemContext {
	var p = new(Grouping_itemContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_grouping_item
	return p
}

func InitEmptyGrouping_itemContext(p *Grouping_itemContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_grouping_item
}

func (*Grouping_itemContext) IsGrouping_itemContext() {}

func NewGrouping_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Grouping_itemContext {
	var p = new(Grouping_itemContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_grouping_item

	return p
}

func (s *Grouping_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Grouping_itemContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Grouping_itemContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Grouping_itemContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Grouping_itemContext) Opt_as_alias_with_required_as() IOpt_as_alias_with_required_asContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_as_alias_with_required_asContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_as_alias_with_required_asContext)
}

func (s *Grouping_itemContext) Opt_grouping_item_order() IOpt_grouping_item_orderContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_grouping_item_orderContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_grouping_item_orderContext)
}

func (s *Grouping_itemContext) Rollup_list() IRollup_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRollup_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRollup_listContext)
}

func (s *Grouping_itemContext) Cube_list() ICube_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICube_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICube_listContext)
}

func (s *Grouping_itemContext) Grouping_set_list() IGrouping_set_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGrouping_set_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGrouping_set_listContext)
}

func (s *Grouping_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Grouping_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Grouping_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGrouping_item(s)
	}
}

func (s *Grouping_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGrouping_item(s)
	}
}

func (s *Grouping_itemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGrouping_item(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Grouping_item() (localctx IGrouping_itemContext) {
	localctx = NewGrouping_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 524, GoogleSQLParserRULE_grouping_item)
	p.SetState(3328)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 350, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3310)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3311)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3312)
			p.expression(0)
		}
		p.SetState(3314)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 348, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3313)
				p.Opt_as_alias_with_required_as()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(3317)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 349, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3316)
				p.Opt_grouping_item_order()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3319)
			p.Rollup_list()
		}
		{
			p.SetState(3320)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3322)
			p.Cube_list()
		}
		{
			p.SetState(3323)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3325)
			p.Grouping_set_list()
		}
		{
			p.SetState(3326)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGrouping_set_listContext is an interface to support dynamic dispatch.
type IGrouping_set_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	GROUPING_SYMBOL() antlr.TerminalNode
	SETS_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllGrouping_set() []IGrouping_setContext
	Grouping_set(i int) IGrouping_setContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsGrouping_set_listContext differentiates from other interfaces.
	IsGrouping_set_listContext()
}

type Grouping_set_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGrouping_set_listContext() *Grouping_set_listContext {
	var p = new(Grouping_set_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_grouping_set_list
	return p
}

func InitEmptyGrouping_set_listContext(p *Grouping_set_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_grouping_set_list
}

func (*Grouping_set_listContext) IsGrouping_set_listContext() {}

func NewGrouping_set_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Grouping_set_listContext {
	var p = new(Grouping_set_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_grouping_set_list

	return p
}

func (s *Grouping_set_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Grouping_set_listContext) GROUPING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGROUPING_SYMBOL, 0)
}

func (s *Grouping_set_listContext) SETS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSETS_SYMBOL, 0)
}

func (s *Grouping_set_listContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Grouping_set_listContext) AllGrouping_set() []IGrouping_setContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IGrouping_setContext); ok {
			len++
		}
	}

	tst := make([]IGrouping_setContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IGrouping_setContext); ok {
			tst[i] = t.(IGrouping_setContext)
			i++
		}
	}

	return tst
}

func (s *Grouping_set_listContext) Grouping_set(i int) IGrouping_setContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGrouping_setContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGrouping_setContext)
}

func (s *Grouping_set_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Grouping_set_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Grouping_set_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Grouping_set_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Grouping_set_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGrouping_set_list(s)
	}
}

func (s *Grouping_set_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGrouping_set_list(s)
	}
}

func (s *Grouping_set_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGrouping_set_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Grouping_set_list() (localctx IGrouping_set_listContext) {
	localctx = NewGrouping_set_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 526, GoogleSQLParserRULE_grouping_set_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3330)
		p.Match(GoogleSQLParserGROUPING_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3331)
		p.Match(GoogleSQLParserSETS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3332)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3333)
		p.Grouping_set()
	}
	p.SetState(3338)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(3334)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3335)
			p.Grouping_set()
		}

		p.SetState(3340)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGrouping_setContext is an interface to support dynamic dispatch.
type IGrouping_setContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	Rollup_list() IRollup_listContext
	Cube_list() ICube_listContext

	// IsGrouping_setContext differentiates from other interfaces.
	IsGrouping_setContext()
}

type Grouping_setContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGrouping_setContext() *Grouping_setContext {
	var p = new(Grouping_setContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_grouping_set
	return p
}

func InitEmptyGrouping_setContext(p *Grouping_setContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_grouping_set
}

func (*Grouping_setContext) IsGrouping_setContext() {}

func NewGrouping_setContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Grouping_setContext {
	var p = new(Grouping_setContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_grouping_set

	return p
}

func (s *Grouping_setContext) GetParser() antlr.Parser { return s.parser }

func (s *Grouping_setContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Grouping_setContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Grouping_setContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Grouping_setContext) Rollup_list() IRollup_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRollup_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRollup_listContext)
}

func (s *Grouping_setContext) Cube_list() ICube_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICube_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICube_listContext)
}

func (s *Grouping_setContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Grouping_setContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Grouping_setContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGrouping_set(s)
	}
}

func (s *Grouping_setContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGrouping_set(s)
	}
}

func (s *Grouping_setContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGrouping_set(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Grouping_set() (localctx IGrouping_setContext) {
	localctx = NewGrouping_setContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 528, GoogleSQLParserRULE_grouping_set)
	p.SetState(3350)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 352, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3341)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3342)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3343)
			p.expression(0)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3344)
			p.Rollup_list()
		}
		{
			p.SetState(3345)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3347)
			p.Cube_list()
		}
		{
			p.SetState(3348)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICube_listContext is an interface to support dynamic dispatch.
type ICube_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CUBE_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext

	// IsCube_listContext differentiates from other interfaces.
	IsCube_listContext()
}

type Cube_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCube_listContext() *Cube_listContext {
	var p = new(Cube_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_cube_list
	return p
}

func InitEmptyCube_listContext(p *Cube_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_cube_list
}

func (*Cube_listContext) IsCube_listContext() {}

func NewCube_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cube_listContext {
	var p = new(Cube_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_cube_list

	return p
}

func (s *Cube_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Cube_listContext) CUBE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCUBE_SYMBOL, 0)
}

func (s *Cube_listContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Cube_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Cube_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Cube_listContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *Cube_listContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Cube_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cube_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cube_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCube_list(s)
	}
}

func (s *Cube_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCube_list(s)
	}
}

func (s *Cube_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCube_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Cube_list() (localctx ICube_listContext) {
	localctx = NewCube_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 530, GoogleSQLParserRULE_cube_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3352)
		p.Match(GoogleSQLParserCUBE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3353)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(3358)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(3354)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3355)
			p.expression(0)
		}

		p.SetState(3360)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRollup_listContext is an interface to support dynamic dispatch.
type IRollup_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ROLLUP_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsRollup_listContext differentiates from other interfaces.
	IsRollup_listContext()
}

type Rollup_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRollup_listContext() *Rollup_listContext {
	var p = new(Rollup_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_rollup_list
	return p
}

func InitEmptyRollup_listContext(p *Rollup_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_rollup_list
}

func (*Rollup_listContext) IsRollup_listContext() {}

func NewRollup_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rollup_listContext {
	var p = new(Rollup_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_rollup_list

	return p
}

func (s *Rollup_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Rollup_listContext) ROLLUP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserROLLUP_SYMBOL, 0)
}

func (s *Rollup_listContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Rollup_listContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *Rollup_listContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Rollup_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Rollup_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Rollup_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rollup_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Rollup_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRollup_list(s)
	}
}

func (s *Rollup_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRollup_list(s)
	}
}

func (s *Rollup_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRollup_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Rollup_list() (localctx IRollup_listContext) {
	localctx = NewRollup_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 532, GoogleSQLParserRULE_rollup_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3361)
		p.Match(GoogleSQLParserROLLUP_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3362)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3363)
		p.expression(0)
	}
	p.SetState(3368)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(3364)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3365)
			p.expression(0)
		}

		p.SetState(3370)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_as_alias_with_required_asContext is an interface to support dynamic dispatch.
type IOpt_as_alias_with_required_asContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AS_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext

	// IsOpt_as_alias_with_required_asContext differentiates from other interfaces.
	IsOpt_as_alias_with_required_asContext()
}

type Opt_as_alias_with_required_asContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_as_alias_with_required_asContext() *Opt_as_alias_with_required_asContext {
	var p = new(Opt_as_alias_with_required_asContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_as_alias_with_required_as
	return p
}

func InitEmptyOpt_as_alias_with_required_asContext(p *Opt_as_alias_with_required_asContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_as_alias_with_required_as
}

func (*Opt_as_alias_with_required_asContext) IsOpt_as_alias_with_required_asContext() {}

func NewOpt_as_alias_with_required_asContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_as_alias_with_required_asContext {
	var p = new(Opt_as_alias_with_required_asContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_as_alias_with_required_as

	return p
}

func (s *Opt_as_alias_with_required_asContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_as_alias_with_required_asContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Opt_as_alias_with_required_asContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Opt_as_alias_with_required_asContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_as_alias_with_required_asContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_as_alias_with_required_asContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_as_alias_with_required_as(s)
	}
}

func (s *Opt_as_alias_with_required_asContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_as_alias_with_required_as(s)
	}
}

func (s *Opt_as_alias_with_required_asContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_as_alias_with_required_as(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_as_alias_with_required_as() (localctx IOpt_as_alias_with_required_asContext) {
	localctx = NewOpt_as_alias_with_required_asContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 534, GoogleSQLParserRULE_opt_as_alias_with_required_as)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3371)
		p.Match(GoogleSQLParserAS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3372)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_grouping_item_orderContext is an interface to support dynamic dispatch.
type IOpt_grouping_item_orderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Opt_selection_item_order() IOpt_selection_item_orderContext
	Null_order() INull_orderContext

	// IsOpt_grouping_item_orderContext differentiates from other interfaces.
	IsOpt_grouping_item_orderContext()
}

type Opt_grouping_item_orderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_grouping_item_orderContext() *Opt_grouping_item_orderContext {
	var p = new(Opt_grouping_item_orderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_grouping_item_order
	return p
}

func InitEmptyOpt_grouping_item_orderContext(p *Opt_grouping_item_orderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_grouping_item_order
}

func (*Opt_grouping_item_orderContext) IsOpt_grouping_item_orderContext() {}

func NewOpt_grouping_item_orderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_grouping_item_orderContext {
	var p = new(Opt_grouping_item_orderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_grouping_item_order

	return p
}

func (s *Opt_grouping_item_orderContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_grouping_item_orderContext) Opt_selection_item_order() IOpt_selection_item_orderContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_selection_item_orderContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_selection_item_orderContext)
}

func (s *Opt_grouping_item_orderContext) Null_order() INull_orderContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INull_orderContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INull_orderContext)
}

func (s *Opt_grouping_item_orderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_grouping_item_orderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_grouping_item_orderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_grouping_item_order(s)
	}
}

func (s *Opt_grouping_item_orderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_grouping_item_order(s)
	}
}

func (s *Opt_grouping_item_orderContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_grouping_item_order(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_grouping_item_order() (localctx IOpt_grouping_item_orderContext) {
	localctx = NewOpt_grouping_item_orderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 536, GoogleSQLParserRULE_opt_grouping_item_order)
	p.SetState(3376)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserASC_SYMBOL, GoogleSQLParserDESC_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3374)
			p.Opt_selection_item_order()
		}

	case GoogleSQLParserNULLS_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3375)
			p.Null_order()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_selection_item_orderContext is an interface to support dynamic dispatch.
type IOpt_selection_item_orderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Asc_or_desc() IAsc_or_descContext
	Null_order() INull_orderContext

	// IsOpt_selection_item_orderContext differentiates from other interfaces.
	IsOpt_selection_item_orderContext()
}

type Opt_selection_item_orderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_selection_item_orderContext() *Opt_selection_item_orderContext {
	var p = new(Opt_selection_item_orderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_selection_item_order
	return p
}

func InitEmptyOpt_selection_item_orderContext(p *Opt_selection_item_orderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_selection_item_order
}

func (*Opt_selection_item_orderContext) IsOpt_selection_item_orderContext() {}

func NewOpt_selection_item_orderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_selection_item_orderContext {
	var p = new(Opt_selection_item_orderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_selection_item_order

	return p
}

func (s *Opt_selection_item_orderContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_selection_item_orderContext) Asc_or_desc() IAsc_or_descContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAsc_or_descContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAsc_or_descContext)
}

func (s *Opt_selection_item_orderContext) Null_order() INull_orderContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INull_orderContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INull_orderContext)
}

func (s *Opt_selection_item_orderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_selection_item_orderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_selection_item_orderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_selection_item_order(s)
	}
}

func (s *Opt_selection_item_orderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_selection_item_order(s)
	}
}

func (s *Opt_selection_item_orderContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_selection_item_order(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_selection_item_order() (localctx IOpt_selection_item_orderContext) {
	localctx = NewOpt_selection_item_orderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 538, GoogleSQLParserRULE_opt_selection_item_order)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3378)
		p.Asc_or_desc()
	}
	p.SetState(3380)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 356, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3379)
			p.Null_order()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAsc_or_descContext is an interface to support dynamic dispatch.
type IAsc_or_descContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ASC_SYMBOL() antlr.TerminalNode
	DESC_SYMBOL() antlr.TerminalNode

	// IsAsc_or_descContext differentiates from other interfaces.
	IsAsc_or_descContext()
}

type Asc_or_descContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsc_or_descContext() *Asc_or_descContext {
	var p = new(Asc_or_descContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_asc_or_desc
	return p
}

func InitEmptyAsc_or_descContext(p *Asc_or_descContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_asc_or_desc
}

func (*Asc_or_descContext) IsAsc_or_descContext() {}

func NewAsc_or_descContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Asc_or_descContext {
	var p = new(Asc_or_descContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_asc_or_desc

	return p
}

func (s *Asc_or_descContext) GetParser() antlr.Parser { return s.parser }

func (s *Asc_or_descContext) ASC_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserASC_SYMBOL, 0)
}

func (s *Asc_or_descContext) DESC_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDESC_SYMBOL, 0)
}

func (s *Asc_or_descContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Asc_or_descContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Asc_or_descContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAsc_or_desc(s)
	}
}

func (s *Asc_or_descContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAsc_or_desc(s)
	}
}

func (s *Asc_or_descContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAsc_or_desc(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Asc_or_desc() (localctx IAsc_or_descContext) {
	localctx = NewAsc_or_descContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 540, GoogleSQLParserRULE_asc_or_desc)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3382)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserASC_SYMBOL || _la == GoogleSQLParserDESC_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INull_orderContext is an interface to support dynamic dispatch.
type INull_orderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NULLS_SYMBOL() antlr.TerminalNode
	FIRST_SYMBOL() antlr.TerminalNode
	LAST_SYMBOL() antlr.TerminalNode

	// IsNull_orderContext differentiates from other interfaces.
	IsNull_orderContext()
}

type Null_orderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNull_orderContext() *Null_orderContext {
	var p = new(Null_orderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_null_order
	return p
}

func InitEmptyNull_orderContext(p *Null_orderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_null_order
}

func (*Null_orderContext) IsNull_orderContext() {}

func NewNull_orderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Null_orderContext {
	var p = new(Null_orderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_null_order

	return p
}

func (s *Null_orderContext) GetParser() antlr.Parser { return s.parser }

func (s *Null_orderContext) NULLS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNULLS_SYMBOL, 0)
}

func (s *Null_orderContext) FIRST_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFIRST_SYMBOL, 0)
}

func (s *Null_orderContext) LAST_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLAST_SYMBOL, 0)
}

func (s *Null_orderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Null_orderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Null_orderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterNull_order(s)
	}
}

func (s *Null_orderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitNull_order(s)
	}
}

func (s *Null_orderContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitNull_order(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Null_order() (localctx INull_orderContext) {
	localctx = NewNull_orderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 542, GoogleSQLParserRULE_null_order)
	p.SetState(3388)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 357, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3384)
			p.Match(GoogleSQLParserNULLS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3385)
			p.Match(GoogleSQLParserFIRST_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3386)
			p.Match(GoogleSQLParserNULLS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3387)
			p.Match(GoogleSQLParserLAST_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunction_name_from_keywordContext is an interface to support dynamic dispatch.
type IFunction_name_from_keywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IF_SYMBOL() antlr.TerminalNode
	GROUPING_SYMBOL() antlr.TerminalNode
	LEFT_SYMBOL() antlr.TerminalNode
	RIGHT_SYMBOL() antlr.TerminalNode
	COLLATE_SYMBOL() antlr.TerminalNode
	RANGE_SYMBOL() antlr.TerminalNode

	// IsFunction_name_from_keywordContext differentiates from other interfaces.
	IsFunction_name_from_keywordContext()
}

type Function_name_from_keywordContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_name_from_keywordContext() *Function_name_from_keywordContext {
	var p = new(Function_name_from_keywordContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_name_from_keyword
	return p
}

func InitEmptyFunction_name_from_keywordContext(p *Function_name_from_keywordContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_name_from_keyword
}

func (*Function_name_from_keywordContext) IsFunction_name_from_keywordContext() {}

func NewFunction_name_from_keywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_name_from_keywordContext {
	var p = new(Function_name_from_keywordContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_function_name_from_keyword

	return p
}

func (s *Function_name_from_keywordContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_name_from_keywordContext) IF_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIF_SYMBOL, 0)
}

func (s *Function_name_from_keywordContext) GROUPING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGROUPING_SYMBOL, 0)
}

func (s *Function_name_from_keywordContext) LEFT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLEFT_SYMBOL, 0)
}

func (s *Function_name_from_keywordContext) RIGHT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRIGHT_SYMBOL, 0)
}

func (s *Function_name_from_keywordContext) COLLATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOLLATE_SYMBOL, 0)
}

func (s *Function_name_from_keywordContext) RANGE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRANGE_SYMBOL, 0)
}

func (s *Function_name_from_keywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_name_from_keywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_name_from_keywordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFunction_name_from_keyword(s)
	}
}

func (s *Function_name_from_keywordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFunction_name_from_keyword(s)
	}
}

func (s *Function_name_from_keywordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFunction_name_from_keyword(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Function_name_from_keyword() (localctx IFunction_name_from_keywordContext) {
	localctx = NewFunction_name_from_keywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 544, GoogleSQLParserRULE_function_name_from_keyword)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3390)
		_la = p.GetTokenStream().LA(1)

		if !(((int64((_la-75)) & ^0x3f) == 0 && ((int64(1)<<(_la-75))&4398046527489) != 0) || ((int64((_la-301)) & ^0x3f) == 0 && ((int64(1)<<(_la-301))&7) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IReplace_fields_expressionContext is an interface to support dynamic dispatch.
type IReplace_fields_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Replace_fields_prefix() IReplace_fields_prefixContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsReplace_fields_expressionContext differentiates from other interfaces.
	IsReplace_fields_expressionContext()
}

type Replace_fields_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReplace_fields_expressionContext() *Replace_fields_expressionContext {
	var p = new(Replace_fields_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_replace_fields_expression
	return p
}

func InitEmptyReplace_fields_expressionContext(p *Replace_fields_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_replace_fields_expression
}

func (*Replace_fields_expressionContext) IsReplace_fields_expressionContext() {}

func NewReplace_fields_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Replace_fields_expressionContext {
	var p = new(Replace_fields_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_replace_fields_expression

	return p
}

func (s *Replace_fields_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Replace_fields_expressionContext) Replace_fields_prefix() IReplace_fields_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReplace_fields_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReplace_fields_prefixContext)
}

func (s *Replace_fields_expressionContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Replace_fields_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Replace_fields_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Replace_fields_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterReplace_fields_expression(s)
	}
}

func (s *Replace_fields_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitReplace_fields_expression(s)
	}
}

func (s *Replace_fields_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitReplace_fields_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Replace_fields_expression() (localctx IReplace_fields_expressionContext) {
	localctx = NewReplace_fields_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 546, GoogleSQLParserRULE_replace_fields_expression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3392)
		p.Replace_fields_prefix()
	}
	{
		p.SetState(3393)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IReplace_fields_prefixContext is an interface to support dynamic dispatch.
type IReplace_fields_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	REPLACE_FIELDS_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode
	AllReplace_fields_arg() []IReplace_fields_argContext
	Replace_fields_arg(i int) IReplace_fields_argContext

	// IsReplace_fields_prefixContext differentiates from other interfaces.
	IsReplace_fields_prefixContext()
}

type Replace_fields_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReplace_fields_prefixContext() *Replace_fields_prefixContext {
	var p = new(Replace_fields_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_replace_fields_prefix
	return p
}

func InitEmptyReplace_fields_prefixContext(p *Replace_fields_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_replace_fields_prefix
}

func (*Replace_fields_prefixContext) IsReplace_fields_prefixContext() {}

func NewReplace_fields_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Replace_fields_prefixContext {
	var p = new(Replace_fields_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_replace_fields_prefix

	return p
}

func (s *Replace_fields_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Replace_fields_prefixContext) REPLACE_FIELDS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPLACE_FIELDS_SYMBOL, 0)
}

func (s *Replace_fields_prefixContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Replace_fields_prefixContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Replace_fields_prefixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Replace_fields_prefixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Replace_fields_prefixContext) AllReplace_fields_arg() []IReplace_fields_argContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IReplace_fields_argContext); ok {
			len++
		}
	}

	tst := make([]IReplace_fields_argContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IReplace_fields_argContext); ok {
			tst[i] = t.(IReplace_fields_argContext)
			i++
		}
	}

	return tst
}

func (s *Replace_fields_prefixContext) Replace_fields_arg(i int) IReplace_fields_argContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReplace_fields_argContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReplace_fields_argContext)
}

func (s *Replace_fields_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Replace_fields_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Replace_fields_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterReplace_fields_prefix(s)
	}
}

func (s *Replace_fields_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitReplace_fields_prefix(s)
	}
}

func (s *Replace_fields_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitReplace_fields_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Replace_fields_prefix() (localctx IReplace_fields_prefixContext) {
	localctx = NewReplace_fields_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 548, GoogleSQLParserRULE_replace_fields_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3395)
		p.Match(GoogleSQLParserREPLACE_FIELDS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3396)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3397)
		p.expression(0)
	}
	{
		p.SetState(3398)
		p.Match(GoogleSQLParserCOMMA_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3399)
		p.Replace_fields_arg()
	}
	p.SetState(3404)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(3400)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3401)
			p.Replace_fields_arg()
		}

		p.SetState(3406)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IReplace_fields_argContext is an interface to support dynamic dispatch.
type IReplace_fields_argContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	AS_SYMBOL() antlr.TerminalNode
	Generalized_path_expression() IGeneralized_path_expressionContext
	Generalized_extension_path() IGeneralized_extension_pathContext

	// IsReplace_fields_argContext differentiates from other interfaces.
	IsReplace_fields_argContext()
}

type Replace_fields_argContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReplace_fields_argContext() *Replace_fields_argContext {
	var p = new(Replace_fields_argContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_replace_fields_arg
	return p
}

func InitEmptyReplace_fields_argContext(p *Replace_fields_argContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_replace_fields_arg
}

func (*Replace_fields_argContext) IsReplace_fields_argContext() {}

func NewReplace_fields_argContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Replace_fields_argContext {
	var p = new(Replace_fields_argContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_replace_fields_arg

	return p
}

func (s *Replace_fields_argContext) GetParser() antlr.Parser { return s.parser }

func (s *Replace_fields_argContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Replace_fields_argContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Replace_fields_argContext) Generalized_path_expression() IGeneralized_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGeneralized_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGeneralized_path_expressionContext)
}

func (s *Replace_fields_argContext) Generalized_extension_path() IGeneralized_extension_pathContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGeneralized_extension_pathContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGeneralized_extension_pathContext)
}

func (s *Replace_fields_argContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Replace_fields_argContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Replace_fields_argContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterReplace_fields_arg(s)
	}
}

func (s *Replace_fields_argContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitReplace_fields_arg(s)
	}
}

func (s *Replace_fields_argContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitReplace_fields_arg(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Replace_fields_arg() (localctx IReplace_fields_argContext) {
	localctx = NewReplace_fields_argContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 550, GoogleSQLParserRULE_replace_fields_arg)
	p.SetState(3415)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 359, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3407)
			p.expression(0)
		}
		{
			p.SetState(3408)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3409)
			p.generalized_path_expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3411)
			p.expression(0)
		}
		{
			p.SetState(3412)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3413)
			p.Generalized_extension_path()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGeneralized_path_expressionContext is an interface to support dynamic dispatch.
type IGeneralized_path_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	Generalized_path_expression() IGeneralized_path_expressionContext
	DOT_SYMBOL() antlr.TerminalNode
	Generalized_extension_path() IGeneralized_extension_pathContext
	LS_BRACKET_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	RS_BRACKET_SYMBOL() antlr.TerminalNode

	// IsGeneralized_path_expressionContext differentiates from other interfaces.
	IsGeneralized_path_expressionContext()
}

type Generalized_path_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGeneralized_path_expressionContext() *Generalized_path_expressionContext {
	var p = new(Generalized_path_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_generalized_path_expression
	return p
}

func InitEmptyGeneralized_path_expressionContext(p *Generalized_path_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_generalized_path_expression
}

func (*Generalized_path_expressionContext) IsGeneralized_path_expressionContext() {}

func NewGeneralized_path_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Generalized_path_expressionContext {
	var p = new(Generalized_path_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_generalized_path_expression

	return p
}

func (s *Generalized_path_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Generalized_path_expressionContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Generalized_path_expressionContext) Generalized_path_expression() IGeneralized_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGeneralized_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGeneralized_path_expressionContext)
}

func (s *Generalized_path_expressionContext) DOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDOT_SYMBOL, 0)
}

func (s *Generalized_path_expressionContext) Generalized_extension_path() IGeneralized_extension_pathContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGeneralized_extension_pathContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGeneralized_extension_pathContext)
}

func (s *Generalized_path_expressionContext) LS_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLS_BRACKET_SYMBOL, 0)
}

func (s *Generalized_path_expressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Generalized_path_expressionContext) RS_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRS_BRACKET_SYMBOL, 0)
}

func (s *Generalized_path_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Generalized_path_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Generalized_path_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGeneralized_path_expression(s)
	}
}

func (s *Generalized_path_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGeneralized_path_expression(s)
	}
}

func (s *Generalized_path_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGeneralized_path_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Generalized_path_expression() (localctx IGeneralized_path_expressionContext) {
	return p.generalized_path_expression(0)
}

func (p *GoogleSQLParser) generalized_path_expression(_p int) (localctx IGeneralized_path_expressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewGeneralized_path_expressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IGeneralized_path_expressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 552
	p.EnterRecursionRule(localctx, 552, GoogleSQLParserRULE_generalized_path_expression, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3418)
		p.Identifier()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3433)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 361, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(3431)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 360, p.GetParserRuleContext()) {
			case 1:
				localctx = NewGeneralized_path_expressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_generalized_path_expression)
				p.SetState(3420)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
					goto errorExit
				}
				{
					p.SetState(3421)
					p.Match(GoogleSQLParserDOT_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(3422)
					p.Generalized_extension_path()
				}

			case 2:
				localctx = NewGeneralized_path_expressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_generalized_path_expression)
				p.SetState(3423)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
					goto errorExit
				}
				{
					p.SetState(3424)
					p.Match(GoogleSQLParserDOT_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(3425)
					p.Identifier()
				}

			case 3:
				localctx = NewGeneralized_path_expressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_generalized_path_expression)
				p.SetState(3426)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
					goto errorExit
				}
				{
					p.SetState(3427)
					p.Match(GoogleSQLParserLS_BRACKET_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(3428)
					p.expression(0)
				}
				{
					p.SetState(3429)
					p.Match(GoogleSQLParserRS_BRACKET_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(3435)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 361, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGeneralized_extension_pathContext is an interface to support dynamic dispatch.
type IGeneralized_extension_pathContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	Generalized_path_expression() IGeneralized_path_expressionContext
	DOT_SYMBOL() antlr.TerminalNode
	Generalized_extension_path() IGeneralized_extension_pathContext
	LS_BRACKET_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	RS_BRACKET_SYMBOL() antlr.TerminalNode

	// IsGeneralized_extension_pathContext differentiates from other interfaces.
	IsGeneralized_extension_pathContext()
}

type Generalized_extension_pathContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGeneralized_extension_pathContext() *Generalized_extension_pathContext {
	var p = new(Generalized_extension_pathContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_generalized_extension_path
	return p
}

func InitEmptyGeneralized_extension_pathContext(p *Generalized_extension_pathContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_generalized_extension_path
}

func (*Generalized_extension_pathContext) IsGeneralized_extension_pathContext() {}

func NewGeneralized_extension_pathContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Generalized_extension_pathContext {
	var p = new(Generalized_extension_pathContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_generalized_extension_path

	return p
}

func (s *Generalized_extension_pathContext) GetParser() antlr.Parser { return s.parser }

func (s *Generalized_extension_pathContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Generalized_extension_pathContext) Generalized_path_expression() IGeneralized_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGeneralized_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGeneralized_path_expressionContext)
}

func (s *Generalized_extension_pathContext) DOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDOT_SYMBOL, 0)
}

func (s *Generalized_extension_pathContext) Generalized_extension_path() IGeneralized_extension_pathContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGeneralized_extension_pathContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGeneralized_extension_pathContext)
}

func (s *Generalized_extension_pathContext) LS_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLS_BRACKET_SYMBOL, 0)
}

func (s *Generalized_extension_pathContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Generalized_extension_pathContext) RS_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRS_BRACKET_SYMBOL, 0)
}

func (s *Generalized_extension_pathContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Generalized_extension_pathContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Generalized_extension_pathContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGeneralized_extension_path(s)
	}
}

func (s *Generalized_extension_pathContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGeneralized_extension_path(s)
	}
}

func (s *Generalized_extension_pathContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGeneralized_extension_path(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Generalized_extension_path() (localctx IGeneralized_extension_pathContext) {
	localctx = NewGeneralized_extension_pathContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 554, GoogleSQLParserRULE_generalized_extension_path)
	p.SetState(3450)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 362, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3436)
			p.Identifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3437)
			p.generalized_path_expression(0)
		}
		{
			p.SetState(3438)
			p.Match(GoogleSQLParserDOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3439)
			p.Generalized_extension_path()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3441)
			p.generalized_path_expression(0)
		}
		{
			p.SetState(3442)
			p.Match(GoogleSQLParserDOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3443)
			p.Identifier()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3445)
			p.generalized_path_expression(0)
		}
		{
			p.SetState(3446)
			p.Match(GoogleSQLParserLS_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3447)
			p.expression(0)
		}
		{
			p.SetState(3448)
			p.Match(GoogleSQLParserRS_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWith_expressionContext is an interface to support dynamic dispatch.
type IWith_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WITH_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	With_expression_variable_prefix() IWith_expression_variable_prefixContext
	COMMA_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsWith_expressionContext differentiates from other interfaces.
	IsWith_expressionContext()
}

type With_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_expressionContext() *With_expressionContext {
	var p = new(With_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_expression
	return p
}

func InitEmptyWith_expressionContext(p *With_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_expression
}

func (*With_expressionContext) IsWith_expressionContext() {}

func NewWith_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_expressionContext {
	var p = new(With_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_with_expression

	return p
}

func (s *With_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *With_expressionContext) WITH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWITH_SYMBOL, 0)
}

func (s *With_expressionContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *With_expressionContext) With_expression_variable_prefix() IWith_expression_variable_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_expression_variable_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_expression_variable_prefixContext)
}

func (s *With_expressionContext) COMMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, 0)
}

func (s *With_expressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *With_expressionContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *With_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWith_expression(s)
	}
}

func (s *With_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWith_expression(s)
	}
}

func (s *With_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWith_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) With_expression() (localctx IWith_expressionContext) {
	localctx = NewWith_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 556, GoogleSQLParserRULE_with_expression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3452)
		p.Match(GoogleSQLParserWITH_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3453)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3454)
		p.With_expression_variable_prefix()
	}
	{
		p.SetState(3455)
		p.Match(GoogleSQLParserCOMMA_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3456)
		p.expression(0)
	}
	{
		p.SetState(3457)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWith_expression_variable_prefixContext is an interface to support dynamic dispatch.
type IWith_expression_variable_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllWith_expression_variable() []IWith_expression_variableContext
	With_expression_variable(i int) IWith_expression_variableContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsWith_expression_variable_prefixContext differentiates from other interfaces.
	IsWith_expression_variable_prefixContext()
}

type With_expression_variable_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_expression_variable_prefixContext() *With_expression_variable_prefixContext {
	var p = new(With_expression_variable_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_expression_variable_prefix
	return p
}

func InitEmptyWith_expression_variable_prefixContext(p *With_expression_variable_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_expression_variable_prefix
}

func (*With_expression_variable_prefixContext) IsWith_expression_variable_prefixContext() {}

func NewWith_expression_variable_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_expression_variable_prefixContext {
	var p = new(With_expression_variable_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_with_expression_variable_prefix

	return p
}

func (s *With_expression_variable_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *With_expression_variable_prefixContext) AllWith_expression_variable() []IWith_expression_variableContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWith_expression_variableContext); ok {
			len++
		}
	}

	tst := make([]IWith_expression_variableContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWith_expression_variableContext); ok {
			tst[i] = t.(IWith_expression_variableContext)
			i++
		}
	}

	return tst
}

func (s *With_expression_variable_prefixContext) With_expression_variable(i int) IWith_expression_variableContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_expression_variableContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_expression_variableContext)
}

func (s *With_expression_variable_prefixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *With_expression_variable_prefixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *With_expression_variable_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_expression_variable_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_expression_variable_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWith_expression_variable_prefix(s)
	}
}

func (s *With_expression_variable_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWith_expression_variable_prefix(s)
	}
}

func (s *With_expression_variable_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWith_expression_variable_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) With_expression_variable_prefix() (localctx IWith_expression_variable_prefixContext) {
	localctx = NewWith_expression_variable_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 558, GoogleSQLParserRULE_with_expression_variable_prefix)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3459)
		p.With_expression_variable()
	}
	p.SetState(3464)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 363, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(3460)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(3461)
				p.With_expression_variable()
			}

		}
		p.SetState(3466)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 363, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWith_expression_variableContext is an interface to support dynamic dispatch.
type IWith_expression_variableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	AS_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsWith_expression_variableContext differentiates from other interfaces.
	IsWith_expression_variableContext()
}

type With_expression_variableContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_expression_variableContext() *With_expression_variableContext {
	var p = new(With_expression_variableContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_expression_variable
	return p
}

func InitEmptyWith_expression_variableContext(p *With_expression_variableContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_expression_variable
}

func (*With_expression_variableContext) IsWith_expression_variableContext() {}

func NewWith_expression_variableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_expression_variableContext {
	var p = new(With_expression_variableContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_with_expression_variable

	return p
}

func (s *With_expression_variableContext) GetParser() antlr.Parser { return s.parser }

func (s *With_expression_variableContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *With_expression_variableContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *With_expression_variableContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *With_expression_variableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_expression_variableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_expression_variableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWith_expression_variable(s)
	}
}

func (s *With_expression_variableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWith_expression_variable(s)
	}
}

func (s *With_expression_variableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWith_expression_variable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) With_expression_variable() (localctx IWith_expression_variableContext) {
	localctx = NewWith_expression_variableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 560, GoogleSQLParserRULE_with_expression_variable)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3467)
		p.Identifier()
	}
	{
		p.SetState(3468)
		p.Match(GoogleSQLParserAS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3469)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExtract_expressionContext is an interface to support dynamic dispatch.
type IExtract_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Extract_expression_base() IExtract_expression_baseContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	AT_SYMBOL() antlr.TerminalNode
	TIME_SYMBOL() antlr.TerminalNode
	ZONE_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsExtract_expressionContext differentiates from other interfaces.
	IsExtract_expressionContext()
}

type Extract_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExtract_expressionContext() *Extract_expressionContext {
	var p = new(Extract_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_extract_expression
	return p
}

func InitEmptyExtract_expressionContext(p *Extract_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_extract_expression
}

func (*Extract_expressionContext) IsExtract_expressionContext() {}

func NewExtract_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Extract_expressionContext {
	var p = new(Extract_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_extract_expression

	return p
}

func (s *Extract_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Extract_expressionContext) Extract_expression_base() IExtract_expression_baseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExtract_expression_baseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExtract_expression_baseContext)
}

func (s *Extract_expressionContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Extract_expressionContext) AT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAT_SYMBOL, 0)
}

func (s *Extract_expressionContext) TIME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTIME_SYMBOL, 0)
}

func (s *Extract_expressionContext) ZONE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserZONE_SYMBOL, 0)
}

func (s *Extract_expressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Extract_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Extract_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Extract_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterExtract_expression(s)
	}
}

func (s *Extract_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitExtract_expression(s)
	}
}

func (s *Extract_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitExtract_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Extract_expression() (localctx IExtract_expressionContext) {
	localctx = NewExtract_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 562, GoogleSQLParserRULE_extract_expression)
	p.SetState(3481)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 364, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3471)
			p.Extract_expression_base()
		}
		{
			p.SetState(3472)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3474)
			p.Extract_expression_base()
		}
		{
			p.SetState(3475)
			p.Match(GoogleSQLParserAT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3476)
			p.Match(GoogleSQLParserTIME_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3477)
			p.Match(GoogleSQLParserZONE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3478)
			p.expression(0)
		}
		{
			p.SetState(3479)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExtract_expression_baseContext is an interface to support dynamic dispatch.
type IExtract_expression_baseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EXTRACT_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	FROM_SYMBOL() antlr.TerminalNode

	// IsExtract_expression_baseContext differentiates from other interfaces.
	IsExtract_expression_baseContext()
}

type Extract_expression_baseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExtract_expression_baseContext() *Extract_expression_baseContext {
	var p = new(Extract_expression_baseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_extract_expression_base
	return p
}

func InitEmptyExtract_expression_baseContext(p *Extract_expression_baseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_extract_expression_base
}

func (*Extract_expression_baseContext) IsExtract_expression_baseContext() {}

func NewExtract_expression_baseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Extract_expression_baseContext {
	var p = new(Extract_expression_baseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_extract_expression_base

	return p
}

func (s *Extract_expression_baseContext) GetParser() antlr.Parser { return s.parser }

func (s *Extract_expression_baseContext) EXTRACT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXTRACT_SYMBOL, 0)
}

func (s *Extract_expression_baseContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Extract_expression_baseContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *Extract_expression_baseContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Extract_expression_baseContext) FROM_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFROM_SYMBOL, 0)
}

func (s *Extract_expression_baseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Extract_expression_baseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Extract_expression_baseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterExtract_expression_base(s)
	}
}

func (s *Extract_expression_baseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitExtract_expression_base(s)
	}
}

func (s *Extract_expression_baseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitExtract_expression_base(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Extract_expression_base() (localctx IExtract_expression_baseContext) {
	localctx = NewExtract_expression_baseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 564, GoogleSQLParserRULE_extract_expression_base)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3483)
		p.Match(GoogleSQLParserEXTRACT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3484)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3485)
		p.expression(0)
	}
	{
		p.SetState(3486)
		p.Match(GoogleSQLParserFROM_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3487)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_formatContext is an interface to support dynamic dispatch.
type IOpt_formatContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FORMAT_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	Opt_at_time_zone() IOpt_at_time_zoneContext

	// IsOpt_formatContext differentiates from other interfaces.
	IsOpt_formatContext()
}

type Opt_formatContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_formatContext() *Opt_formatContext {
	var p = new(Opt_formatContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_format
	return p
}

func InitEmptyOpt_formatContext(p *Opt_formatContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_format
}

func (*Opt_formatContext) IsOpt_formatContext() {}

func NewOpt_formatContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_formatContext {
	var p = new(Opt_formatContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_format

	return p
}

func (s *Opt_formatContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_formatContext) FORMAT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFORMAT_SYMBOL, 0)
}

func (s *Opt_formatContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Opt_formatContext) Opt_at_time_zone() IOpt_at_time_zoneContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_at_time_zoneContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_at_time_zoneContext)
}

func (s *Opt_formatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_formatContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_formatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_format(s)
	}
}

func (s *Opt_formatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_format(s)
	}
}

func (s *Opt_formatContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_format(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_format() (localctx IOpt_formatContext) {
	localctx = NewOpt_formatContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 566, GoogleSQLParserRULE_opt_format)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3489)
		p.Match(GoogleSQLParserFORMAT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3490)
		p.expression(0)
	}
	p.SetState(3492)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAT_SYMBOL {
		{
			p.SetState(3491)
			p.Opt_at_time_zone()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_at_time_zoneContext is an interface to support dynamic dispatch.
type IOpt_at_time_zoneContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AT_SYMBOL() antlr.TerminalNode
	TIME_SYMBOL() antlr.TerminalNode
	ZONE_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsOpt_at_time_zoneContext differentiates from other interfaces.
	IsOpt_at_time_zoneContext()
}

type Opt_at_time_zoneContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_at_time_zoneContext() *Opt_at_time_zoneContext {
	var p = new(Opt_at_time_zoneContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_at_time_zone
	return p
}

func InitEmptyOpt_at_time_zoneContext(p *Opt_at_time_zoneContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_at_time_zone
}

func (*Opt_at_time_zoneContext) IsOpt_at_time_zoneContext() {}

func NewOpt_at_time_zoneContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_at_time_zoneContext {
	var p = new(Opt_at_time_zoneContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_at_time_zone

	return p
}

func (s *Opt_at_time_zoneContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_at_time_zoneContext) AT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAT_SYMBOL, 0)
}

func (s *Opt_at_time_zoneContext) TIME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTIME_SYMBOL, 0)
}

func (s *Opt_at_time_zoneContext) ZONE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserZONE_SYMBOL, 0)
}

func (s *Opt_at_time_zoneContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Opt_at_time_zoneContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_at_time_zoneContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_at_time_zoneContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_at_time_zone(s)
	}
}

func (s *Opt_at_time_zoneContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_at_time_zone(s)
	}
}

func (s *Opt_at_time_zoneContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_at_time_zone(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_at_time_zone() (localctx IOpt_at_time_zoneContext) {
	localctx = NewOpt_at_time_zoneContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 568, GoogleSQLParserRULE_opt_at_time_zone)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3494)
		p.Match(GoogleSQLParserAT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3495)
		p.Match(GoogleSQLParserTIME_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3496)
		p.Match(GoogleSQLParserZONE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3497)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICast_expressionContext is an interface to support dynamic dispatch.
type ICast_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllCAST_SYMBOL() []antlr.TerminalNode
	CAST_SYMBOL(i int) antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AS_SYMBOL() antlr.TerminalNode
	Type_() ITypeContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Opt_format() IOpt_formatContext
	AllSAFE_CAST_SYMBOL() []antlr.TerminalNode
	SAFE_CAST_SYMBOL(i int) antlr.TerminalNode

	// IsCast_expressionContext differentiates from other interfaces.
	IsCast_expressionContext()
}

type Cast_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCast_expressionContext() *Cast_expressionContext {
	var p = new(Cast_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_cast_expression
	return p
}

func InitEmptyCast_expressionContext(p *Cast_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_cast_expression
}

func (*Cast_expressionContext) IsCast_expressionContext() {}

func NewCast_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cast_expressionContext {
	var p = new(Cast_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_cast_expression

	return p
}

func (s *Cast_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Cast_expressionContext) AllCAST_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCAST_SYMBOL)
}

func (s *Cast_expressionContext) CAST_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCAST_SYMBOL, i)
}

func (s *Cast_expressionContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Cast_expressionContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Cast_expressionContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Cast_expressionContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Cast_expressionContext) Opt_format() IOpt_formatContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_formatContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_formatContext)
}

func (s *Cast_expressionContext) AllSAFE_CAST_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserSAFE_CAST_SYMBOL)
}

func (s *Cast_expressionContext) SAFE_CAST_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSAFE_CAST_SYMBOL, i)
}

func (s *Cast_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cast_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cast_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCast_expression(s)
	}
}

func (s *Cast_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCast_expression(s)
	}
}

func (s *Cast_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCast_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Cast_expression() (localctx ICast_expressionContext) {
	localctx = NewCast_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 570, GoogleSQLParserRULE_cast_expression)
	var _la int

	p.SetState(3525)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 368, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3499)
			p.Match(GoogleSQLParserCAST_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3500)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3501)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3502)
			p.Type_()
		}
		p.SetState(3504)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserFORMAT_SYMBOL {
			{
				p.SetState(3503)
				p.Opt_format()
			}

		}
		{
			p.SetState(3506)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3508)
			p.Match(GoogleSQLParserCAST_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3509)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3510)
			p.Match(GoogleSQLParserCAST_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("The argument to CAST is an expression, not a query; to use a query as an expression, the query must be wrapped with additional parentheses to make it a scalar subquery expression", nil, nil)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3512)
			p.Match(GoogleSQLParserSAFE_CAST_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3513)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3514)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3515)
			p.Type_()
		}
		p.SetState(3517)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserFORMAT_SYMBOL {
			{
				p.SetState(3516)
				p.Opt_format()
			}

		}
		{
			p.SetState(3519)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3521)
			p.Match(GoogleSQLParserSAFE_CAST_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3522)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3523)
			p.Match(GoogleSQLParserSAFE_CAST_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("The argument to CAST is an expression, not a query; to use a query as an expression, the query must be wrapped with additional parentheses to make it a scalar subquery expression", nil, nil)

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICase_expressionContext is an interface to support dynamic dispatch.
type ICase_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Case_expression_prefix() ICase_expression_prefixContext
	END_SYMBOL() antlr.TerminalNode
	ELSE_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsCase_expressionContext differentiates from other interfaces.
	IsCase_expressionContext()
}

type Case_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCase_expressionContext() *Case_expressionContext {
	var p = new(Case_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_case_expression
	return p
}

func InitEmptyCase_expressionContext(p *Case_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_case_expression
}

func (*Case_expressionContext) IsCase_expressionContext() {}

func NewCase_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Case_expressionContext {
	var p = new(Case_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_case_expression

	return p
}

func (s *Case_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Case_expressionContext) Case_expression_prefix() ICase_expression_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICase_expression_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICase_expression_prefixContext)
}

func (s *Case_expressionContext) END_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEND_SYMBOL, 0)
}

func (s *Case_expressionContext) ELSE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserELSE_SYMBOL, 0)
}

func (s *Case_expressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Case_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Case_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCase_expression(s)
	}
}

func (s *Case_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCase_expression(s)
	}
}

func (s *Case_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCase_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Case_expression() (localctx ICase_expressionContext) {
	localctx = NewCase_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 572, GoogleSQLParserRULE_case_expression)
	p.SetState(3535)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 369, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3527)
			p.Case_expression_prefix()
		}
		{
			p.SetState(3528)
			p.Match(GoogleSQLParserEND_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3530)
			p.Case_expression_prefix()
		}
		{
			p.SetState(3531)
			p.Match(GoogleSQLParserELSE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3532)
			p.expression(0)
		}
		{
			p.SetState(3533)
			p.Match(GoogleSQLParserEND_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICase_expression_prefixContext is an interface to support dynamic dispatch.
type ICase_expression_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Case_no_value_expression_prefix() ICase_no_value_expression_prefixContext
	Case_value_expression_prefix() ICase_value_expression_prefixContext

	// IsCase_expression_prefixContext differentiates from other interfaces.
	IsCase_expression_prefixContext()
}

type Case_expression_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCase_expression_prefixContext() *Case_expression_prefixContext {
	var p = new(Case_expression_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_case_expression_prefix
	return p
}

func InitEmptyCase_expression_prefixContext(p *Case_expression_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_case_expression_prefix
}

func (*Case_expression_prefixContext) IsCase_expression_prefixContext() {}

func NewCase_expression_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Case_expression_prefixContext {
	var p = new(Case_expression_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_case_expression_prefix

	return p
}

func (s *Case_expression_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Case_expression_prefixContext) Case_no_value_expression_prefix() ICase_no_value_expression_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICase_no_value_expression_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICase_no_value_expression_prefixContext)
}

func (s *Case_expression_prefixContext) Case_value_expression_prefix() ICase_value_expression_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICase_value_expression_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICase_value_expression_prefixContext)
}

func (s *Case_expression_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_expression_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Case_expression_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCase_expression_prefix(s)
	}
}

func (s *Case_expression_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCase_expression_prefix(s)
	}
}

func (s *Case_expression_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCase_expression_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Case_expression_prefix() (localctx ICase_expression_prefixContext) {
	localctx = NewCase_expression_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 574, GoogleSQLParserRULE_case_expression_prefix)
	p.SetState(3539)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 370, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3537)
			p.Case_no_value_expression_prefix()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3538)
			p.Case_value_expression_prefix()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICase_value_expression_prefixContext is an interface to support dynamic dispatch.
type ICase_value_expression_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CASE_SYMBOL() antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	AllWHEN_SYMBOL() []antlr.TerminalNode
	WHEN_SYMBOL(i int) antlr.TerminalNode
	AllTHEN_SYMBOL() []antlr.TerminalNode
	THEN_SYMBOL(i int) antlr.TerminalNode

	// IsCase_value_expression_prefixContext differentiates from other interfaces.
	IsCase_value_expression_prefixContext()
}

type Case_value_expression_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCase_value_expression_prefixContext() *Case_value_expression_prefixContext {
	var p = new(Case_value_expression_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_case_value_expression_prefix
	return p
}

func InitEmptyCase_value_expression_prefixContext(p *Case_value_expression_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_case_value_expression_prefix
}

func (*Case_value_expression_prefixContext) IsCase_value_expression_prefixContext() {}

func NewCase_value_expression_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Case_value_expression_prefixContext {
	var p = new(Case_value_expression_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_case_value_expression_prefix

	return p
}

func (s *Case_value_expression_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Case_value_expression_prefixContext) CASE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCASE_SYMBOL, 0)
}

func (s *Case_value_expression_prefixContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *Case_value_expression_prefixContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Case_value_expression_prefixContext) AllWHEN_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserWHEN_SYMBOL)
}

func (s *Case_value_expression_prefixContext) WHEN_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWHEN_SYMBOL, i)
}

func (s *Case_value_expression_prefixContext) AllTHEN_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserTHEN_SYMBOL)
}

func (s *Case_value_expression_prefixContext) THEN_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTHEN_SYMBOL, i)
}

func (s *Case_value_expression_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_value_expression_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Case_value_expression_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCase_value_expression_prefix(s)
	}
}

func (s *Case_value_expression_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCase_value_expression_prefix(s)
	}
}

func (s *Case_value_expression_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCase_value_expression_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Case_value_expression_prefix() (localctx ICase_value_expression_prefixContext) {
	localctx = NewCase_value_expression_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 576, GoogleSQLParserRULE_case_value_expression_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3541)
		p.Match(GoogleSQLParserCASE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3542)
		p.expression(0)
	}
	p.SetState(3548)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == GoogleSQLParserWHEN_SYMBOL {
		{
			p.SetState(3543)
			p.Match(GoogleSQLParserWHEN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3544)
			p.expression(0)
		}
		{
			p.SetState(3545)
			p.Match(GoogleSQLParserTHEN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3546)
			p.expression(0)
		}

		p.SetState(3550)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICase_no_value_expression_prefixContext is an interface to support dynamic dispatch.
type ICase_no_value_expression_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CASE_SYMBOL() antlr.TerminalNode
	AllWHEN_SYMBOL() []antlr.TerminalNode
	WHEN_SYMBOL(i int) antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	AllTHEN_SYMBOL() []antlr.TerminalNode
	THEN_SYMBOL(i int) antlr.TerminalNode

	// IsCase_no_value_expression_prefixContext differentiates from other interfaces.
	IsCase_no_value_expression_prefixContext()
}

type Case_no_value_expression_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCase_no_value_expression_prefixContext() *Case_no_value_expression_prefixContext {
	var p = new(Case_no_value_expression_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_case_no_value_expression_prefix
	return p
}

func InitEmptyCase_no_value_expression_prefixContext(p *Case_no_value_expression_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_case_no_value_expression_prefix
}

func (*Case_no_value_expression_prefixContext) IsCase_no_value_expression_prefixContext() {}

func NewCase_no_value_expression_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Case_no_value_expression_prefixContext {
	var p = new(Case_no_value_expression_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_case_no_value_expression_prefix

	return p
}

func (s *Case_no_value_expression_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Case_no_value_expression_prefixContext) CASE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCASE_SYMBOL, 0)
}

func (s *Case_no_value_expression_prefixContext) AllWHEN_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserWHEN_SYMBOL)
}

func (s *Case_no_value_expression_prefixContext) WHEN_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWHEN_SYMBOL, i)
}

func (s *Case_no_value_expression_prefixContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *Case_no_value_expression_prefixContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Case_no_value_expression_prefixContext) AllTHEN_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserTHEN_SYMBOL)
}

func (s *Case_no_value_expression_prefixContext) THEN_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTHEN_SYMBOL, i)
}

func (s *Case_no_value_expression_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_no_value_expression_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Case_no_value_expression_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCase_no_value_expression_prefix(s)
	}
}

func (s *Case_no_value_expression_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCase_no_value_expression_prefix(s)
	}
}

func (s *Case_no_value_expression_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCase_no_value_expression_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Case_no_value_expression_prefix() (localctx ICase_no_value_expression_prefixContext) {
	localctx = NewCase_no_value_expression_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 578, GoogleSQLParserRULE_case_no_value_expression_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3552)
		p.Match(GoogleSQLParserCASE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(3558)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == GoogleSQLParserWHEN_SYMBOL {
		{
			p.SetState(3553)
			p.Match(GoogleSQLParserWHEN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3554)
			p.expression(0)
		}
		{
			p.SetState(3555)
			p.Match(GoogleSQLParserTHEN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3556)
			p.expression(0)
		}

		p.SetState(3560)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStruct_braced_constructorContext is an interface to support dynamic dispatch.
type IStruct_braced_constructorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetStype returns the stype rule contexts.
	GetStype() IStruct_typeContext

	// GetCtor returns the ctor rule contexts.
	GetCtor() IBraced_constructorContext

	// SetStype sets the stype rule contexts.
	SetStype(IStruct_typeContext)

	// SetCtor sets the ctor rule contexts.
	SetCtor(IBraced_constructorContext)

	// Getter signatures
	Struct_type() IStruct_typeContext
	Braced_constructor() IBraced_constructorContext
	STRUCT_SYMBOL() antlr.TerminalNode

	// IsStruct_braced_constructorContext differentiates from other interfaces.
	IsStruct_braced_constructorContext()
}

type Struct_braced_constructorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	stype  IStruct_typeContext
	ctor   IBraced_constructorContext
}

func NewEmptyStruct_braced_constructorContext() *Struct_braced_constructorContext {
	var p = new(Struct_braced_constructorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_braced_constructor
	return p
}

func InitEmptyStruct_braced_constructorContext(p *Struct_braced_constructorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_braced_constructor
}

func (*Struct_braced_constructorContext) IsStruct_braced_constructorContext() {}

func NewStruct_braced_constructorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Struct_braced_constructorContext {
	var p = new(Struct_braced_constructorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_struct_braced_constructor

	return p
}

func (s *Struct_braced_constructorContext) GetParser() antlr.Parser { return s.parser }

func (s *Struct_braced_constructorContext) GetStype() IStruct_typeContext { return s.stype }

func (s *Struct_braced_constructorContext) GetCtor() IBraced_constructorContext { return s.ctor }

func (s *Struct_braced_constructorContext) SetStype(v IStruct_typeContext) { s.stype = v }

func (s *Struct_braced_constructorContext) SetCtor(v IBraced_constructorContext) { s.ctor = v }

func (s *Struct_braced_constructorContext) Struct_type() IStruct_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_typeContext)
}

func (s *Struct_braced_constructorContext) Braced_constructor() IBraced_constructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBraced_constructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBraced_constructorContext)
}

func (s *Struct_braced_constructorContext) STRUCT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTRUCT_SYMBOL, 0)
}

func (s *Struct_braced_constructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Struct_braced_constructorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Struct_braced_constructorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStruct_braced_constructor(s)
	}
}

func (s *Struct_braced_constructorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStruct_braced_constructor(s)
	}
}

func (s *Struct_braced_constructorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStruct_braced_constructor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Struct_braced_constructor() (localctx IStruct_braced_constructorContext) {
	localctx = NewStruct_braced_constructorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 580, GoogleSQLParserRULE_struct_braced_constructor)
	p.SetState(3567)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 373, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3562)

			var _x = p.Struct_type()

			localctx.(*Struct_braced_constructorContext).stype = _x
		}
		{
			p.SetState(3563)

			var _x = p.Braced_constructor()

			localctx.(*Struct_braced_constructorContext).ctor = _x
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3565)
			p.Match(GoogleSQLParserSTRUCT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3566)

			var _x = p.Braced_constructor()

			localctx.(*Struct_braced_constructorContext).ctor = _x
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBraced_new_constructorContext is an interface to support dynamic dispatch.
type IBraced_new_constructorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NEW_SYMBOL() antlr.TerminalNode
	Type_name() IType_nameContext
	New_constructor() INew_constructorContext

	// IsBraced_new_constructorContext differentiates from other interfaces.
	IsBraced_new_constructorContext()
}

type Braced_new_constructorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBraced_new_constructorContext() *Braced_new_constructorContext {
	var p = new(Braced_new_constructorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_braced_new_constructor
	return p
}

func InitEmptyBraced_new_constructorContext(p *Braced_new_constructorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_braced_new_constructor
}

func (*Braced_new_constructorContext) IsBraced_new_constructorContext() {}

func NewBraced_new_constructorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Braced_new_constructorContext {
	var p = new(Braced_new_constructorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_braced_new_constructor

	return p
}

func (s *Braced_new_constructorContext) GetParser() antlr.Parser { return s.parser }

func (s *Braced_new_constructorContext) NEW_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNEW_SYMBOL, 0)
}

func (s *Braced_new_constructorContext) Type_name() IType_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_nameContext)
}

func (s *Braced_new_constructorContext) New_constructor() INew_constructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INew_constructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INew_constructorContext)
}

func (s *Braced_new_constructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Braced_new_constructorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Braced_new_constructorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBraced_new_constructor(s)
	}
}

func (s *Braced_new_constructorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBraced_new_constructor(s)
	}
}

func (s *Braced_new_constructorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBraced_new_constructor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Braced_new_constructor() (localctx IBraced_new_constructorContext) {
	localctx = NewBraced_new_constructorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 582, GoogleSQLParserRULE_braced_new_constructor)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3569)
		p.Match(GoogleSQLParserNEW_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3570)
		p.Type_name()
	}
	{
		p.SetState(3571)
		p.New_constructor()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBraced_constructorContext is an interface to support dynamic dispatch.
type IBraced_constructorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Braced_constructor_start() IBraced_constructor_startContext
	AllRC_BRACKET_SYMBOL() []antlr.TerminalNode
	RC_BRACKET_SYMBOL(i int) antlr.TerminalNode
	Braced_constructor_prefix() IBraced_constructor_prefixContext
	COMMA_SYMBOL() antlr.TerminalNode

	// IsBraced_constructorContext differentiates from other interfaces.
	IsBraced_constructorContext()
}

type Braced_constructorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBraced_constructorContext() *Braced_constructorContext {
	var p = new(Braced_constructorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor
	return p
}

func InitEmptyBraced_constructorContext(p *Braced_constructorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor
}

func (*Braced_constructorContext) IsBraced_constructorContext() {}

func NewBraced_constructorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Braced_constructorContext {
	var p = new(Braced_constructorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor

	return p
}

func (s *Braced_constructorContext) GetParser() antlr.Parser { return s.parser }

func (s *Braced_constructorContext) Braced_constructor_start() IBraced_constructor_startContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBraced_constructor_startContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBraced_constructor_startContext)
}

func (s *Braced_constructorContext) AllRC_BRACKET_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserRC_BRACKET_SYMBOL)
}

func (s *Braced_constructorContext) RC_BRACKET_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRC_BRACKET_SYMBOL, i)
}

func (s *Braced_constructorContext) Braced_constructor_prefix() IBraced_constructor_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBraced_constructor_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBraced_constructor_prefixContext)
}

func (s *Braced_constructorContext) COMMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, 0)
}

func (s *Braced_constructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Braced_constructorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Braced_constructorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBraced_constructor(s)
	}
}

func (s *Braced_constructorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBraced_constructor(s)
	}
}

func (s *Braced_constructorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBraced_constructor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Braced_constructor() (localctx IBraced_constructorContext) {
	localctx = NewBraced_constructorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 584, GoogleSQLParserRULE_braced_constructor)
	p.SetState(3581)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 374, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3573)
			p.Braced_constructor_start()
		}
		{
			p.SetState(3574)
			p.Match(GoogleSQLParserRC_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3576)
			p.braced_constructor_prefix(0)
		}
		{
			p.SetState(3577)
			p.Match(GoogleSQLParserRC_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3578)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3579)
			p.Match(GoogleSQLParserRC_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBraced_constructor_startContext is an interface to support dynamic dispatch.
type IBraced_constructor_startContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RC_BRACKET_SYMBOL() antlr.TerminalNode

	// IsBraced_constructor_startContext differentiates from other interfaces.
	IsBraced_constructor_startContext()
}

type Braced_constructor_startContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBraced_constructor_startContext() *Braced_constructor_startContext {
	var p = new(Braced_constructor_startContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_start
	return p
}

func InitEmptyBraced_constructor_startContext(p *Braced_constructor_startContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_start
}

func (*Braced_constructor_startContext) IsBraced_constructor_startContext() {}

func NewBraced_constructor_startContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Braced_constructor_startContext {
	var p = new(Braced_constructor_startContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_start

	return p
}

func (s *Braced_constructor_startContext) GetParser() antlr.Parser { return s.parser }

func (s *Braced_constructor_startContext) RC_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRC_BRACKET_SYMBOL, 0)
}

func (s *Braced_constructor_startContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Braced_constructor_startContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Braced_constructor_startContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBraced_constructor_start(s)
	}
}

func (s *Braced_constructor_startContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBraced_constructor_start(s)
	}
}

func (s *Braced_constructor_startContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBraced_constructor_start(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Braced_constructor_start() (localctx IBraced_constructor_startContext) {
	localctx = NewBraced_constructor_startContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 586, GoogleSQLParserRULE_braced_constructor_start)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3583)
		p.Match(GoogleSQLParserRC_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBraced_constructor_prefixContext is an interface to support dynamic dispatch.
type IBraced_constructor_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Braced_constructor_start() IBraced_constructor_startContext
	Braced_constructor_field() IBraced_constructor_fieldContext
	Braced_constructor_extension() IBraced_constructor_extensionContext
	Braced_constructor_prefix() IBraced_constructor_prefixContext
	COMMA_SYMBOL() antlr.TerminalNode

	// IsBraced_constructor_prefixContext differentiates from other interfaces.
	IsBraced_constructor_prefixContext()
}

type Braced_constructor_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBraced_constructor_prefixContext() *Braced_constructor_prefixContext {
	var p = new(Braced_constructor_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_prefix
	return p
}

func InitEmptyBraced_constructor_prefixContext(p *Braced_constructor_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_prefix
}

func (*Braced_constructor_prefixContext) IsBraced_constructor_prefixContext() {}

func NewBraced_constructor_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Braced_constructor_prefixContext {
	var p = new(Braced_constructor_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_prefix

	return p
}

func (s *Braced_constructor_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Braced_constructor_prefixContext) Braced_constructor_start() IBraced_constructor_startContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBraced_constructor_startContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBraced_constructor_startContext)
}

func (s *Braced_constructor_prefixContext) Braced_constructor_field() IBraced_constructor_fieldContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBraced_constructor_fieldContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBraced_constructor_fieldContext)
}

func (s *Braced_constructor_prefixContext) Braced_constructor_extension() IBraced_constructor_extensionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBraced_constructor_extensionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBraced_constructor_extensionContext)
}

func (s *Braced_constructor_prefixContext) Braced_constructor_prefix() IBraced_constructor_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBraced_constructor_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBraced_constructor_prefixContext)
}

func (s *Braced_constructor_prefixContext) COMMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, 0)
}

func (s *Braced_constructor_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Braced_constructor_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Braced_constructor_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBraced_constructor_prefix(s)
	}
}

func (s *Braced_constructor_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBraced_constructor_prefix(s)
	}
}

func (s *Braced_constructor_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBraced_constructor_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Braced_constructor_prefix() (localctx IBraced_constructor_prefixContext) {
	return p.braced_constructor_prefix(0)
}

func (p *GoogleSQLParser) braced_constructor_prefix(_p int) (localctx IBraced_constructor_prefixContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewBraced_constructor_prefixContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBraced_constructor_prefixContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 588
	p.EnterRecursionRule(localctx, 588, GoogleSQLParserRULE_braced_constructor_prefix, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3592)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 375, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3586)
			p.Braced_constructor_start()
		}
		{
			p.SetState(3587)
			p.Braced_constructor_field()
		}

	case 2:
		{
			p.SetState(3589)
			p.Braced_constructor_start()
		}
		{
			p.SetState(3590)
			p.Braced_constructor_extension()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3604)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 377, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(3602)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 376, p.GetParserRuleContext()) {
			case 1:
				localctx = NewBraced_constructor_prefixContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_braced_constructor_prefix)
				p.SetState(3594)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
					goto errorExit
				}
				{
					p.SetState(3595)
					p.Match(GoogleSQLParserCOMMA_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(3596)
					p.Braced_constructor_field()
				}

			case 2:
				localctx = NewBraced_constructor_prefixContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_braced_constructor_prefix)
				p.SetState(3597)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
					goto errorExit
				}
				{
					p.SetState(3598)
					p.Braced_constructor_field()
				}

			case 3:
				localctx = NewBraced_constructor_prefixContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_braced_constructor_prefix)
				p.SetState(3599)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
					goto errorExit
				}
				{
					p.SetState(3600)
					p.Match(GoogleSQLParserCOMMA_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(3601)
					p.Braced_constructor_extension()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(3606)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 377, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBraced_constructor_fieldContext is an interface to support dynamic dispatch.
type IBraced_constructor_fieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Braced_constructor_lhs() IBraced_constructor_lhsContext
	Braced_constructor_field_value() IBraced_constructor_field_valueContext

	// IsBraced_constructor_fieldContext differentiates from other interfaces.
	IsBraced_constructor_fieldContext()
}

type Braced_constructor_fieldContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBraced_constructor_fieldContext() *Braced_constructor_fieldContext {
	var p = new(Braced_constructor_fieldContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_field
	return p
}

func InitEmptyBraced_constructor_fieldContext(p *Braced_constructor_fieldContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_field
}

func (*Braced_constructor_fieldContext) IsBraced_constructor_fieldContext() {}

func NewBraced_constructor_fieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Braced_constructor_fieldContext {
	var p = new(Braced_constructor_fieldContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_field

	return p
}

func (s *Braced_constructor_fieldContext) GetParser() antlr.Parser { return s.parser }

func (s *Braced_constructor_fieldContext) Braced_constructor_lhs() IBraced_constructor_lhsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBraced_constructor_lhsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBraced_constructor_lhsContext)
}

func (s *Braced_constructor_fieldContext) Braced_constructor_field_value() IBraced_constructor_field_valueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBraced_constructor_field_valueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBraced_constructor_field_valueContext)
}

func (s *Braced_constructor_fieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Braced_constructor_fieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Braced_constructor_fieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBraced_constructor_field(s)
	}
}

func (s *Braced_constructor_fieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBraced_constructor_field(s)
	}
}

func (s *Braced_constructor_fieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBraced_constructor_field(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Braced_constructor_field() (localctx IBraced_constructor_fieldContext) {
	localctx = NewBraced_constructor_fieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 590, GoogleSQLParserRULE_braced_constructor_field)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3607)
		p.Braced_constructor_lhs()
	}
	{
		p.SetState(3608)
		p.Braced_constructor_field_value()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBraced_constructor_lhsContext is an interface to support dynamic dispatch.
type IBraced_constructor_lhsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Generalized_path_expression() IGeneralized_path_expressionContext

	// IsBraced_constructor_lhsContext differentiates from other interfaces.
	IsBraced_constructor_lhsContext()
}

type Braced_constructor_lhsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBraced_constructor_lhsContext() *Braced_constructor_lhsContext {
	var p = new(Braced_constructor_lhsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_lhs
	return p
}

func InitEmptyBraced_constructor_lhsContext(p *Braced_constructor_lhsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_lhs
}

func (*Braced_constructor_lhsContext) IsBraced_constructor_lhsContext() {}

func NewBraced_constructor_lhsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Braced_constructor_lhsContext {
	var p = new(Braced_constructor_lhsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_lhs

	return p
}

func (s *Braced_constructor_lhsContext) GetParser() antlr.Parser { return s.parser }

func (s *Braced_constructor_lhsContext) Generalized_path_expression() IGeneralized_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGeneralized_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGeneralized_path_expressionContext)
}

func (s *Braced_constructor_lhsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Braced_constructor_lhsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Braced_constructor_lhsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBraced_constructor_lhs(s)
	}
}

func (s *Braced_constructor_lhsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBraced_constructor_lhs(s)
	}
}

func (s *Braced_constructor_lhsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBraced_constructor_lhs(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Braced_constructor_lhs() (localctx IBraced_constructor_lhsContext) {
	localctx = NewBraced_constructor_lhsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 592, GoogleSQLParserRULE_braced_constructor_lhs)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3610)
		p.generalized_path_expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBraced_constructor_field_valueContext is an interface to support dynamic dispatch.
type IBraced_constructor_field_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	COLON_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	Braced_constructor() IBraced_constructorContext

	// IsBraced_constructor_field_valueContext differentiates from other interfaces.
	IsBraced_constructor_field_valueContext()
}

type Braced_constructor_field_valueContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBraced_constructor_field_valueContext() *Braced_constructor_field_valueContext {
	var p = new(Braced_constructor_field_valueContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_field_value
	return p
}

func InitEmptyBraced_constructor_field_valueContext(p *Braced_constructor_field_valueContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_field_value
}

func (*Braced_constructor_field_valueContext) IsBraced_constructor_field_valueContext() {}

func NewBraced_constructor_field_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Braced_constructor_field_valueContext {
	var p = new(Braced_constructor_field_valueContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_field_value

	return p
}

func (s *Braced_constructor_field_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Braced_constructor_field_valueContext) COLON_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOLON_SYMBOL, 0)
}

func (s *Braced_constructor_field_valueContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Braced_constructor_field_valueContext) Braced_constructor() IBraced_constructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBraced_constructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBraced_constructorContext)
}

func (s *Braced_constructor_field_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Braced_constructor_field_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Braced_constructor_field_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBraced_constructor_field_value(s)
	}
}

func (s *Braced_constructor_field_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBraced_constructor_field_value(s)
	}
}

func (s *Braced_constructor_field_valueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBraced_constructor_field_value(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Braced_constructor_field_value() (localctx IBraced_constructor_field_valueContext) {
	localctx = NewBraced_constructor_field_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 594, GoogleSQLParserRULE_braced_constructor_field_value)
	p.SetState(3615)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserCOLON_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3612)
			p.Match(GoogleSQLParserCOLON_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3613)
			p.expression(0)
		}

	case GoogleSQLParserRC_BRACKET_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3614)
			p.Braced_constructor()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBraced_constructor_extensionContext is an interface to support dynamic dispatch.
type IBraced_constructor_extensionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsBraced_constructor_extensionContext differentiates from other interfaces.
	IsBraced_constructor_extensionContext()
}

type Braced_constructor_extensionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBraced_constructor_extensionContext() *Braced_constructor_extensionContext {
	var p = new(Braced_constructor_extensionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_extension
	return p
}

func InitEmptyBraced_constructor_extensionContext(p *Braced_constructor_extensionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_extension
}

func (*Braced_constructor_extensionContext) IsBraced_constructor_extensionContext() {}

func NewBraced_constructor_extensionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Braced_constructor_extensionContext {
	var p = new(Braced_constructor_extensionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_extension

	return p
}

func (s *Braced_constructor_extensionContext) GetParser() antlr.Parser { return s.parser }

func (s *Braced_constructor_extensionContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Braced_constructor_extensionContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Braced_constructor_extensionContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Braced_constructor_extensionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Braced_constructor_extensionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Braced_constructor_extensionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBraced_constructor_extension(s)
	}
}

func (s *Braced_constructor_extensionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBraced_constructor_extension(s)
	}
}

func (s *Braced_constructor_extensionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBraced_constructor_extension(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Braced_constructor_extension() (localctx IBraced_constructor_extensionContext) {
	localctx = NewBraced_constructor_extensionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 596, GoogleSQLParserRULE_braced_constructor_extension)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3617)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3618)
		p.Path_expression()
	}
	{
		p.SetState(3619)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INew_constructorContext is an interface to support dynamic dispatch.
type INew_constructorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	New_constructor_prefix() INew_constructor_prefixContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	New_constructor_prefix_no_arg() INew_constructor_prefix_no_argContext

	// IsNew_constructorContext differentiates from other interfaces.
	IsNew_constructorContext()
}

type New_constructorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNew_constructorContext() *New_constructorContext {
	var p = new(New_constructorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_new_constructor
	return p
}

func InitEmptyNew_constructorContext(p *New_constructorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_new_constructor
}

func (*New_constructorContext) IsNew_constructorContext() {}

func NewNew_constructorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *New_constructorContext {
	var p = new(New_constructorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_new_constructor

	return p
}

func (s *New_constructorContext) GetParser() antlr.Parser { return s.parser }

func (s *New_constructorContext) New_constructor_prefix() INew_constructor_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INew_constructor_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INew_constructor_prefixContext)
}

func (s *New_constructorContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *New_constructorContext) New_constructor_prefix_no_arg() INew_constructor_prefix_no_argContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INew_constructor_prefix_no_argContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INew_constructor_prefix_no_argContext)
}

func (s *New_constructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *New_constructorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *New_constructorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterNew_constructor(s)
	}
}

func (s *New_constructorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitNew_constructor(s)
	}
}

func (s *New_constructorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitNew_constructor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) New_constructor() (localctx INew_constructorContext) {
	localctx = NewNew_constructorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 598, GoogleSQLParserRULE_new_constructor)
	p.SetState(3627)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 379, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3621)
			p.New_constructor_prefix()
		}
		{
			p.SetState(3622)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3624)
			p.New_constructor_prefix_no_arg()
		}
		{
			p.SetState(3625)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INew_constructor_prefixContext is an interface to support dynamic dispatch.
type INew_constructor_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	New_constructor_prefix_no_arg() INew_constructor_prefix_no_argContext
	AllNew_constructor_arg() []INew_constructor_argContext
	New_constructor_arg(i int) INew_constructor_argContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsNew_constructor_prefixContext differentiates from other interfaces.
	IsNew_constructor_prefixContext()
}

type New_constructor_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNew_constructor_prefixContext() *New_constructor_prefixContext {
	var p = new(New_constructor_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_new_constructor_prefix
	return p
}

func InitEmptyNew_constructor_prefixContext(p *New_constructor_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_new_constructor_prefix
}

func (*New_constructor_prefixContext) IsNew_constructor_prefixContext() {}

func NewNew_constructor_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *New_constructor_prefixContext {
	var p = new(New_constructor_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_new_constructor_prefix

	return p
}

func (s *New_constructor_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *New_constructor_prefixContext) New_constructor_prefix_no_arg() INew_constructor_prefix_no_argContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INew_constructor_prefix_no_argContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INew_constructor_prefix_no_argContext)
}

func (s *New_constructor_prefixContext) AllNew_constructor_arg() []INew_constructor_argContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INew_constructor_argContext); ok {
			len++
		}
	}

	tst := make([]INew_constructor_argContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INew_constructor_argContext); ok {
			tst[i] = t.(INew_constructor_argContext)
			i++
		}
	}

	return tst
}

func (s *New_constructor_prefixContext) New_constructor_arg(i int) INew_constructor_argContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INew_constructor_argContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INew_constructor_argContext)
}

func (s *New_constructor_prefixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *New_constructor_prefixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *New_constructor_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *New_constructor_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *New_constructor_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterNew_constructor_prefix(s)
	}
}

func (s *New_constructor_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitNew_constructor_prefix(s)
	}
}

func (s *New_constructor_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitNew_constructor_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) New_constructor_prefix() (localctx INew_constructor_prefixContext) {
	localctx = NewNew_constructor_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 600, GoogleSQLParserRULE_new_constructor_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3629)
		p.New_constructor_prefix_no_arg()
	}
	{
		p.SetState(3630)
		p.New_constructor_arg()
	}
	p.SetState(3635)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(3631)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3632)
			p.New_constructor_arg()
		}

		p.SetState(3637)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INew_constructor_prefix_no_argContext is an interface to support dynamic dispatch.
type INew_constructor_prefix_no_argContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NEW_SYMBOL() antlr.TerminalNode
	Type_name() IType_nameContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsNew_constructor_prefix_no_argContext differentiates from other interfaces.
	IsNew_constructor_prefix_no_argContext()
}

type New_constructor_prefix_no_argContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNew_constructor_prefix_no_argContext() *New_constructor_prefix_no_argContext {
	var p = new(New_constructor_prefix_no_argContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_new_constructor_prefix_no_arg
	return p
}

func InitEmptyNew_constructor_prefix_no_argContext(p *New_constructor_prefix_no_argContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_new_constructor_prefix_no_arg
}

func (*New_constructor_prefix_no_argContext) IsNew_constructor_prefix_no_argContext() {}

func NewNew_constructor_prefix_no_argContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *New_constructor_prefix_no_argContext {
	var p = new(New_constructor_prefix_no_argContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_new_constructor_prefix_no_arg

	return p
}

func (s *New_constructor_prefix_no_argContext) GetParser() antlr.Parser { return s.parser }

func (s *New_constructor_prefix_no_argContext) NEW_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNEW_SYMBOL, 0)
}

func (s *New_constructor_prefix_no_argContext) Type_name() IType_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_nameContext)
}

func (s *New_constructor_prefix_no_argContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *New_constructor_prefix_no_argContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *New_constructor_prefix_no_argContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *New_constructor_prefix_no_argContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterNew_constructor_prefix_no_arg(s)
	}
}

func (s *New_constructor_prefix_no_argContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitNew_constructor_prefix_no_arg(s)
	}
}

func (s *New_constructor_prefix_no_argContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitNew_constructor_prefix_no_arg(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) New_constructor_prefix_no_arg() (localctx INew_constructor_prefix_no_argContext) {
	localctx = NewNew_constructor_prefix_no_argContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 602, GoogleSQLParserRULE_new_constructor_prefix_no_arg)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3638)
		p.Match(GoogleSQLParserNEW_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3639)
		p.Type_name()
	}
	{
		p.SetState(3640)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INew_constructor_argContext is an interface to support dynamic dispatch.
type INew_constructor_argContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	AS_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsNew_constructor_argContext differentiates from other interfaces.
	IsNew_constructor_argContext()
}

type New_constructor_argContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNew_constructor_argContext() *New_constructor_argContext {
	var p = new(New_constructor_argContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_new_constructor_arg
	return p
}

func InitEmptyNew_constructor_argContext(p *New_constructor_argContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_new_constructor_arg
}

func (*New_constructor_argContext) IsNew_constructor_argContext() {}

func NewNew_constructor_argContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *New_constructor_argContext {
	var p = new(New_constructor_argContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_new_constructor_arg

	return p
}

func (s *New_constructor_argContext) GetParser() antlr.Parser { return s.parser }

func (s *New_constructor_argContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *New_constructor_argContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *New_constructor_argContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *New_constructor_argContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *New_constructor_argContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *New_constructor_argContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *New_constructor_argContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *New_constructor_argContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *New_constructor_argContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterNew_constructor_arg(s)
	}
}

func (s *New_constructor_argContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitNew_constructor_arg(s)
	}
}

func (s *New_constructor_argContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitNew_constructor_arg(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) New_constructor_arg() (localctx INew_constructor_argContext) {
	localctx = NewNew_constructor_argContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 604, GoogleSQLParserRULE_new_constructor_arg)
	p.SetState(3653)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 381, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3642)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3643)
			p.expression(0)
		}
		{
			p.SetState(3644)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3645)
			p.Identifier()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3647)
			p.expression(0)
		}
		{
			p.SetState(3648)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3649)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3650)
			p.Path_expression()
		}
		{
			p.SetState(3651)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArray_constructorContext is an interface to support dynamic dispatch.
type IArray_constructorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Array_constructor_prefix_no_expressions() IArray_constructor_prefix_no_expressionsContext
	RS_BRACKET_SYMBOL() antlr.TerminalNode
	Array_constructor_prefix() IArray_constructor_prefixContext

	// IsArray_constructorContext differentiates from other interfaces.
	IsArray_constructorContext()
}

type Array_constructorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArray_constructorContext() *Array_constructorContext {
	var p = new(Array_constructorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_array_constructor
	return p
}

func InitEmptyArray_constructorContext(p *Array_constructorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_array_constructor
}

func (*Array_constructorContext) IsArray_constructorContext() {}

func NewArray_constructorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_constructorContext {
	var p = new(Array_constructorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_array_constructor

	return p
}

func (s *Array_constructorContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_constructorContext) Array_constructor_prefix_no_expressions() IArray_constructor_prefix_no_expressionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArray_constructor_prefix_no_expressionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArray_constructor_prefix_no_expressionsContext)
}

func (s *Array_constructorContext) RS_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRS_BRACKET_SYMBOL, 0)
}

func (s *Array_constructorContext) Array_constructor_prefix() IArray_constructor_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArray_constructor_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArray_constructor_prefixContext)
}

func (s *Array_constructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_constructorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Array_constructorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterArray_constructor(s)
	}
}

func (s *Array_constructorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitArray_constructor(s)
	}
}

func (s *Array_constructorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitArray_constructor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Array_constructor() (localctx IArray_constructorContext) {
	localctx = NewArray_constructorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 606, GoogleSQLParserRULE_array_constructor)
	p.SetState(3661)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 382, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3655)
			p.Array_constructor_prefix_no_expressions()
		}
		{
			p.SetState(3656)
			p.Match(GoogleSQLParserRS_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3658)
			p.Array_constructor_prefix()
		}
		{
			p.SetState(3659)
			p.Match(GoogleSQLParserRS_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArray_constructor_prefixContext is an interface to support dynamic dispatch.
type IArray_constructor_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Array_constructor_prefix_no_expressions() IArray_constructor_prefix_no_expressionsContext
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsArray_constructor_prefixContext differentiates from other interfaces.
	IsArray_constructor_prefixContext()
}

type Array_constructor_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArray_constructor_prefixContext() *Array_constructor_prefixContext {
	var p = new(Array_constructor_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_array_constructor_prefix
	return p
}

func InitEmptyArray_constructor_prefixContext(p *Array_constructor_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_array_constructor_prefix
}

func (*Array_constructor_prefixContext) IsArray_constructor_prefixContext() {}

func NewArray_constructor_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_constructor_prefixContext {
	var p = new(Array_constructor_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_array_constructor_prefix

	return p
}

func (s *Array_constructor_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_constructor_prefixContext) Array_constructor_prefix_no_expressions() IArray_constructor_prefix_no_expressionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArray_constructor_prefix_no_expressionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArray_constructor_prefix_no_expressionsContext)
}

func (s *Array_constructor_prefixContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *Array_constructor_prefixContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Array_constructor_prefixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Array_constructor_prefixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Array_constructor_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_constructor_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Array_constructor_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterArray_constructor_prefix(s)
	}
}

func (s *Array_constructor_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitArray_constructor_prefix(s)
	}
}

func (s *Array_constructor_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitArray_constructor_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Array_constructor_prefix() (localctx IArray_constructor_prefixContext) {
	localctx = NewArray_constructor_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 608, GoogleSQLParserRULE_array_constructor_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3663)
		p.Array_constructor_prefix_no_expressions()
	}
	{
		p.SetState(3664)
		p.expression(0)
	}
	p.SetState(3669)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(3665)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3666)
			p.expression(0)
		}

		p.SetState(3671)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArray_constructor_prefix_no_expressionsContext is an interface to support dynamic dispatch.
type IArray_constructor_prefix_no_expressionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ARRAY_SYMBOL() antlr.TerminalNode
	LS_BRACKET_SYMBOL() antlr.TerminalNode
	Array_type() IArray_typeContext

	// IsArray_constructor_prefix_no_expressionsContext differentiates from other interfaces.
	IsArray_constructor_prefix_no_expressionsContext()
}

type Array_constructor_prefix_no_expressionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArray_constructor_prefix_no_expressionsContext() *Array_constructor_prefix_no_expressionsContext {
	var p = new(Array_constructor_prefix_no_expressionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_array_constructor_prefix_no_expressions
	return p
}

func InitEmptyArray_constructor_prefix_no_expressionsContext(p *Array_constructor_prefix_no_expressionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_array_constructor_prefix_no_expressions
}

func (*Array_constructor_prefix_no_expressionsContext) IsArray_constructor_prefix_no_expressionsContext() {
}

func NewArray_constructor_prefix_no_expressionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_constructor_prefix_no_expressionsContext {
	var p = new(Array_constructor_prefix_no_expressionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_array_constructor_prefix_no_expressions

	return p
}

func (s *Array_constructor_prefix_no_expressionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_constructor_prefix_no_expressionsContext) ARRAY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserARRAY_SYMBOL, 0)
}

func (s *Array_constructor_prefix_no_expressionsContext) LS_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLS_BRACKET_SYMBOL, 0)
}

func (s *Array_constructor_prefix_no_expressionsContext) Array_type() IArray_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArray_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArray_typeContext)
}

func (s *Array_constructor_prefix_no_expressionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_constructor_prefix_no_expressionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Array_constructor_prefix_no_expressionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterArray_constructor_prefix_no_expressions(s)
	}
}

func (s *Array_constructor_prefix_no_expressionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitArray_constructor_prefix_no_expressions(s)
	}
}

func (s *Array_constructor_prefix_no_expressionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitArray_constructor_prefix_no_expressions(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Array_constructor_prefix_no_expressions() (localctx IArray_constructor_prefix_no_expressionsContext) {
	localctx = NewArray_constructor_prefix_no_expressionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 610, GoogleSQLParserRULE_array_constructor_prefix_no_expressions)
	p.SetState(3678)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 384, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3672)
			p.Match(GoogleSQLParserARRAY_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3673)
			p.Match(GoogleSQLParserLS_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3674)
			p.Match(GoogleSQLParserLS_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3675)
			p.Array_type()
		}
		{
			p.SetState(3676)
			p.Match(GoogleSQLParserLS_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRange_literalContext is an interface to support dynamic dispatch.
type IRange_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Range_type() IRange_typeContext
	String_literal() IString_literalContext

	// IsRange_literalContext differentiates from other interfaces.
	IsRange_literalContext()
}

type Range_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRange_literalContext() *Range_literalContext {
	var p = new(Range_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_range_literal
	return p
}

func InitEmptyRange_literalContext(p *Range_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_range_literal
}

func (*Range_literalContext) IsRange_literalContext() {}

func NewRange_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Range_literalContext {
	var p = new(Range_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_range_literal

	return p
}

func (s *Range_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Range_literalContext) Range_type() IRange_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRange_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRange_typeContext)
}

func (s *Range_literalContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Range_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Range_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Range_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRange_literal(s)
	}
}

func (s *Range_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRange_literal(s)
	}
}

func (s *Range_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRange_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Range_literal() (localctx IRange_literalContext) {
	localctx = NewRange_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 612, GoogleSQLParserRULE_range_literal)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3680)
		p.Range_type()
	}
	{
		p.SetState(3681)
		p.string_literal(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRange_typeContext is an interface to support dynamic dispatch.
type IRange_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RANGE_SYMBOL() antlr.TerminalNode
	Template_type_open() ITemplate_type_openContext
	Type_() ITypeContext
	Template_type_close() ITemplate_type_closeContext

	// IsRange_typeContext differentiates from other interfaces.
	IsRange_typeContext()
}

type Range_typeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRange_typeContext() *Range_typeContext {
	var p = new(Range_typeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_range_type
	return p
}

func InitEmptyRange_typeContext(p *Range_typeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_range_type
}

func (*Range_typeContext) IsRange_typeContext() {}

func NewRange_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Range_typeContext {
	var p = new(Range_typeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_range_type

	return p
}

func (s *Range_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Range_typeContext) RANGE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRANGE_SYMBOL, 0)
}

func (s *Range_typeContext) Template_type_open() ITemplate_type_openContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_openContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_openContext)
}

func (s *Range_typeContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Range_typeContext) Template_type_close() ITemplate_type_closeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_closeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_closeContext)
}

func (s *Range_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Range_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Range_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRange_type(s)
	}
}

func (s *Range_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRange_type(s)
	}
}

func (s *Range_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRange_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Range_type() (localctx IRange_typeContext) {
	localctx = NewRange_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 614, GoogleSQLParserRULE_range_type)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3683)
		p.Match(GoogleSQLParserRANGE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3684)
		p.Template_type_open()
	}
	{
		p.SetState(3685)
		p.Type_()
	}
	{
		p.SetState(3686)
		p.Template_type_close()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeContext is an interface to support dynamic dispatch.
type ITypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Raw_type() IRaw_typeContext
	Opt_type_parameters() IOpt_type_parametersContext
	Collate_clause() ICollate_clauseContext

	// IsTypeContext differentiates from other interfaces.
	IsTypeContext()
}

type TypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeContext() *TypeContext {
	var p = new(TypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_type
	return p
}

func InitEmptyTypeContext(p *TypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_type
}

func (*TypeContext) IsTypeContext() {}

func NewTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeContext {
	var p = new(TypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_type

	return p
}

func (s *TypeContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeContext) Raw_type() IRaw_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRaw_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRaw_typeContext)
}

func (s *TypeContext) Opt_type_parameters() IOpt_type_parametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_type_parametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_type_parametersContext)
}

func (s *TypeContext) Collate_clause() ICollate_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollate_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollate_clauseContext)
}

func (s *TypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterType(s)
	}
}

func (s *TypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitType(s)
	}
}

func (s *TypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Type_() (localctx ITypeContext) {
	localctx = NewTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 616, GoogleSQLParserRULE_type)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3688)
		p.Raw_type()
	}
	p.SetState(3690)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserLR_BRACKET_SYMBOL {
		{
			p.SetState(3689)
			p.Opt_type_parameters()
		}

	}
	p.SetState(3693)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserCOLLATE_SYMBOL {
		{
			p.SetState(3692)
			p.Collate_clause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICollate_clauseContext is an interface to support dynamic dispatch.
type ICollate_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	COLLATE_SYMBOL() antlr.TerminalNode
	String_literal_or_parameter() IString_literal_or_parameterContext

	// IsCollate_clauseContext differentiates from other interfaces.
	IsCollate_clauseContext()
}

type Collate_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCollate_clauseContext() *Collate_clauseContext {
	var p = new(Collate_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_collate_clause
	return p
}

func InitEmptyCollate_clauseContext(p *Collate_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_collate_clause
}

func (*Collate_clauseContext) IsCollate_clauseContext() {}

func NewCollate_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Collate_clauseContext {
	var p = new(Collate_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_collate_clause

	return p
}

func (s *Collate_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Collate_clauseContext) COLLATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOLLATE_SYMBOL, 0)
}

func (s *Collate_clauseContext) String_literal_or_parameter() IString_literal_or_parameterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literal_or_parameterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literal_or_parameterContext)
}

func (s *Collate_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Collate_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Collate_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCollate_clause(s)
	}
}

func (s *Collate_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCollate_clause(s)
	}
}

func (s *Collate_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCollate_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Collate_clause() (localctx ICollate_clauseContext) {
	localctx = NewCollate_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 618, GoogleSQLParserRULE_collate_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3695)
		p.Match(GoogleSQLParserCOLLATE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3696)
		p.String_literal_or_parameter()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IString_literal_or_parameterContext is an interface to support dynamic dispatch.
type IString_literal_or_parameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	String_literal() IString_literalContext
	Parameter_expression() IParameter_expressionContext
	System_variable_expression() ISystem_variable_expressionContext

	// IsString_literal_or_parameterContext differentiates from other interfaces.
	IsString_literal_or_parameterContext()
}

type String_literal_or_parameterContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyString_literal_or_parameterContext() *String_literal_or_parameterContext {
	var p = new(String_literal_or_parameterContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_string_literal_or_parameter
	return p
}

func InitEmptyString_literal_or_parameterContext(p *String_literal_or_parameterContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_string_literal_or_parameter
}

func (*String_literal_or_parameterContext) IsString_literal_or_parameterContext() {}

func NewString_literal_or_parameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *String_literal_or_parameterContext {
	var p = new(String_literal_or_parameterContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_string_literal_or_parameter

	return p
}

func (s *String_literal_or_parameterContext) GetParser() antlr.Parser { return s.parser }

func (s *String_literal_or_parameterContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *String_literal_or_parameterContext) Parameter_expression() IParameter_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParameter_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParameter_expressionContext)
}

func (s *String_literal_or_parameterContext) System_variable_expression() ISystem_variable_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISystem_variable_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISystem_variable_expressionContext)
}

func (s *String_literal_or_parameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *String_literal_or_parameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *String_literal_or_parameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterString_literal_or_parameter(s)
	}
}

func (s *String_literal_or_parameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitString_literal_or_parameter(s)
	}
}

func (s *String_literal_or_parameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitString_literal_or_parameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) String_literal_or_parameter() (localctx IString_literal_or_parameterContext) {
	localctx = NewString_literal_or_parameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 620, GoogleSQLParserRULE_string_literal_or_parameter)
	p.SetState(3701)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3698)
			p.string_literal(0)
		}

	case GoogleSQLParserQUESTION_SYMBOL, GoogleSQLParserAT_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3699)
			p.Parameter_expression()
		}

	case GoogleSQLParserATAT_SYMBOL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3700)
			p.System_variable_expression()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISystem_variable_expressionContext is an interface to support dynamic dispatch.
type ISystem_variable_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ATAT_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext

	// IsSystem_variable_expressionContext differentiates from other interfaces.
	IsSystem_variable_expressionContext()
}

type System_variable_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySystem_variable_expressionContext() *System_variable_expressionContext {
	var p = new(System_variable_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_system_variable_expression
	return p
}

func InitEmptySystem_variable_expressionContext(p *System_variable_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_system_variable_expression
}

func (*System_variable_expressionContext) IsSystem_variable_expressionContext() {}

func NewSystem_variable_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *System_variable_expressionContext {
	var p = new(System_variable_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_system_variable_expression

	return p
}

func (s *System_variable_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *System_variable_expressionContext) ATAT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserATAT_SYMBOL, 0)
}

func (s *System_variable_expressionContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *System_variable_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *System_variable_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *System_variable_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSystem_variable_expression(s)
	}
}

func (s *System_variable_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSystem_variable_expression(s)
	}
}

func (s *System_variable_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSystem_variable_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) System_variable_expression() (localctx ISystem_variable_expressionContext) {
	localctx = NewSystem_variable_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 622, GoogleSQLParserRULE_system_variable_expression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3703)
		p.Match(GoogleSQLParserATAT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3704)
		p.Path_expression()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IParameter_expressionContext is an interface to support dynamic dispatch.
type IParameter_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Named_parameter_expression() INamed_parameter_expressionContext
	QUESTION_SYMBOL() antlr.TerminalNode

	// IsParameter_expressionContext differentiates from other interfaces.
	IsParameter_expressionContext()
}

type Parameter_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameter_expressionContext() *Parameter_expressionContext {
	var p = new(Parameter_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_parameter_expression
	return p
}

func InitEmptyParameter_expressionContext(p *Parameter_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_parameter_expression
}

func (*Parameter_expressionContext) IsParameter_expressionContext() {}

func NewParameter_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parameter_expressionContext {
	var p = new(Parameter_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_parameter_expression

	return p
}

func (s *Parameter_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Parameter_expressionContext) Named_parameter_expression() INamed_parameter_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamed_parameter_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamed_parameter_expressionContext)
}

func (s *Parameter_expressionContext) QUESTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserQUESTION_SYMBOL, 0)
}

func (s *Parameter_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parameter_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Parameter_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterParameter_expression(s)
	}
}

func (s *Parameter_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitParameter_expression(s)
	}
}

func (s *Parameter_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitParameter_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Parameter_expression() (localctx IParameter_expressionContext) {
	localctx = NewParameter_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 624, GoogleSQLParserRULE_parameter_expression)
	p.SetState(3708)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserAT_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3706)
			p.Named_parameter_expression()
		}

	case GoogleSQLParserQUESTION_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3707)
			p.Match(GoogleSQLParserQUESTION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INamed_parameter_expressionContext is an interface to support dynamic dispatch.
type INamed_parameter_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AT_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext

	// IsNamed_parameter_expressionContext differentiates from other interfaces.
	IsNamed_parameter_expressionContext()
}

type Named_parameter_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamed_parameter_expressionContext() *Named_parameter_expressionContext {
	var p = new(Named_parameter_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_named_parameter_expression
	return p
}

func InitEmptyNamed_parameter_expressionContext(p *Named_parameter_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_named_parameter_expression
}

func (*Named_parameter_expressionContext) IsNamed_parameter_expressionContext() {}

func NewNamed_parameter_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Named_parameter_expressionContext {
	var p = new(Named_parameter_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_named_parameter_expression

	return p
}

func (s *Named_parameter_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Named_parameter_expressionContext) AT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAT_SYMBOL, 0)
}

func (s *Named_parameter_expressionContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Named_parameter_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Named_parameter_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Named_parameter_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterNamed_parameter_expression(s)
	}
}

func (s *Named_parameter_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitNamed_parameter_expression(s)
	}
}

func (s *Named_parameter_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitNamed_parameter_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Named_parameter_expression() (localctx INamed_parameter_expressionContext) {
	localctx = NewNamed_parameter_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 626, GoogleSQLParserRULE_named_parameter_expression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3710)
		p.Match(GoogleSQLParserAT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3711)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_type_parametersContext is an interface to support dynamic dispatch.
type IOpt_type_parametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Type_parameters_prefix() IType_parameters_prefixContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	COMMA_SYMBOL() antlr.TerminalNode

	// IsOpt_type_parametersContext differentiates from other interfaces.
	IsOpt_type_parametersContext()
}

type Opt_type_parametersContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_type_parametersContext() *Opt_type_parametersContext {
	var p = new(Opt_type_parametersContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_type_parameters
	return p
}

func InitEmptyOpt_type_parametersContext(p *Opt_type_parametersContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_type_parameters
}

func (*Opt_type_parametersContext) IsOpt_type_parametersContext() {}

func NewOpt_type_parametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_type_parametersContext {
	var p = new(Opt_type_parametersContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_type_parameters

	return p
}

func (s *Opt_type_parametersContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_type_parametersContext) Type_parameters_prefix() IType_parameters_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_parameters_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_parameters_prefixContext)
}

func (s *Opt_type_parametersContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Opt_type_parametersContext) COMMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, 0)
}

func (s *Opt_type_parametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_type_parametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_type_parametersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_type_parameters(s)
	}
}

func (s *Opt_type_parametersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_type_parameters(s)
	}
}

func (s *Opt_type_parametersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_type_parameters(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_type_parameters() (localctx IOpt_type_parametersContext) {
	localctx = NewOpt_type_parametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 628, GoogleSQLParserRULE_opt_type_parameters)
	p.SetState(3721)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 389, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3713)
			p.Type_parameters_prefix()
		}
		{
			p.SetState(3714)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3716)
			p.Type_parameters_prefix()
		}
		{
			p.SetState(3717)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3718)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Syntax error: Trailing comma in type parameters list is not allowed.", nil, nil)

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IType_parameters_prefixContext is an interface to support dynamic dispatch.
type IType_parameters_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllType_parameter() []IType_parameterContext
	Type_parameter(i int) IType_parameterContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsType_parameters_prefixContext differentiates from other interfaces.
	IsType_parameters_prefixContext()
}

type Type_parameters_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_parameters_prefixContext() *Type_parameters_prefixContext {
	var p = new(Type_parameters_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_type_parameters_prefix
	return p
}

func InitEmptyType_parameters_prefixContext(p *Type_parameters_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_type_parameters_prefix
}

func (*Type_parameters_prefixContext) IsType_parameters_prefixContext() {}

func NewType_parameters_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_parameters_prefixContext {
	var p = new(Type_parameters_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_type_parameters_prefix

	return p
}

func (s *Type_parameters_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_parameters_prefixContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Type_parameters_prefixContext) AllType_parameter() []IType_parameterContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IType_parameterContext); ok {
			len++
		}
	}

	tst := make([]IType_parameterContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IType_parameterContext); ok {
			tst[i] = t.(IType_parameterContext)
			i++
		}
	}

	return tst
}

func (s *Type_parameters_prefixContext) Type_parameter(i int) IType_parameterContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_parameterContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_parameterContext)
}

func (s *Type_parameters_prefixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Type_parameters_prefixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Type_parameters_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_parameters_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_parameters_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterType_parameters_prefix(s)
	}
}

func (s *Type_parameters_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitType_parameters_prefix(s)
	}
}

func (s *Type_parameters_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitType_parameters_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Type_parameters_prefix() (localctx IType_parameters_prefixContext) {
	localctx = NewType_parameters_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 630, GoogleSQLParserRULE_type_parameters_prefix)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3723)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3724)
		p.Type_parameter()
	}
	p.SetState(3729)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 390, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(3725)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(3726)
				p.Type_parameter()
			}

		}
		p.SetState(3731)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 390, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IType_parameterContext is an interface to support dynamic dispatch.
type IType_parameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Integer_literal() IInteger_literalContext
	Boolean_literal() IBoolean_literalContext
	String_literal() IString_literalContext
	Bytes_literal() IBytes_literalContext
	Floating_point_literal() IFloating_point_literalContext
	MAX_SYMBOL() antlr.TerminalNode

	// IsType_parameterContext differentiates from other interfaces.
	IsType_parameterContext()
}

type Type_parameterContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_parameterContext() *Type_parameterContext {
	var p = new(Type_parameterContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_type_parameter
	return p
}

func InitEmptyType_parameterContext(p *Type_parameterContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_type_parameter
}

func (*Type_parameterContext) IsType_parameterContext() {}

func NewType_parameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_parameterContext {
	var p = new(Type_parameterContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_type_parameter

	return p
}

func (s *Type_parameterContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_parameterContext) Integer_literal() IInteger_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInteger_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInteger_literalContext)
}

func (s *Type_parameterContext) Boolean_literal() IBoolean_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBoolean_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBoolean_literalContext)
}

func (s *Type_parameterContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Type_parameterContext) Bytes_literal() IBytes_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBytes_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBytes_literalContext)
}

func (s *Type_parameterContext) Floating_point_literal() IFloating_point_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFloating_point_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFloating_point_literalContext)
}

func (s *Type_parameterContext) MAX_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMAX_SYMBOL, 0)
}

func (s *Type_parameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_parameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_parameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterType_parameter(s)
	}
}

func (s *Type_parameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitType_parameter(s)
	}
}

func (s *Type_parameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitType_parameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Type_parameter() (localctx IType_parameterContext) {
	localctx = NewType_parameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 632, GoogleSQLParserRULE_type_parameter)
	p.SetState(3738)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINTEGER_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3732)
			p.Integer_literal()
		}

	case GoogleSQLParserTRUE_SYMBOL, GoogleSQLParserFALSE_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3733)
			p.Boolean_literal()
		}

	case GoogleSQLParserSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3734)
			p.string_literal(0)
		}

	case GoogleSQLParserBYTES_LITERAL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3735)
			p.bytes_literal(0)
		}

	case GoogleSQLParserFLOATING_POINT_LITERAL:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3736)
			p.Floating_point_literal()
		}

	case GoogleSQLParserMAX_SYMBOL:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3737)
			p.Match(GoogleSQLParserMAX_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRaw_typeContext is an interface to support dynamic dispatch.
type IRaw_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Array_type() IArray_typeContext
	Struct_type() IStruct_typeContext
	Type_name() IType_nameContext
	Range_type() IRange_typeContext
	Function_type() IFunction_typeContext
	Map_type() IMap_typeContext

	// IsRaw_typeContext differentiates from other interfaces.
	IsRaw_typeContext()
}

type Raw_typeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRaw_typeContext() *Raw_typeContext {
	var p = new(Raw_typeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_raw_type
	return p
}

func InitEmptyRaw_typeContext(p *Raw_typeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_raw_type
}

func (*Raw_typeContext) IsRaw_typeContext() {}

func NewRaw_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Raw_typeContext {
	var p = new(Raw_typeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_raw_type

	return p
}

func (s *Raw_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Raw_typeContext) Array_type() IArray_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArray_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArray_typeContext)
}

func (s *Raw_typeContext) Struct_type() IStruct_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_typeContext)
}

func (s *Raw_typeContext) Type_name() IType_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_nameContext)
}

func (s *Raw_typeContext) Range_type() IRange_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRange_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRange_typeContext)
}

func (s *Raw_typeContext) Function_type() IFunction_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunction_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunction_typeContext)
}

func (s *Raw_typeContext) Map_type() IMap_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMap_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMap_typeContext)
}

func (s *Raw_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Raw_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Raw_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRaw_type(s)
	}
}

func (s *Raw_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRaw_type(s)
	}
}

func (s *Raw_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRaw_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Raw_type() (localctx IRaw_typeContext) {
	localctx = NewRaw_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 634, GoogleSQLParserRULE_raw_type)
	p.SetState(3746)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 392, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3740)
			p.Array_type()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3741)
			p.Struct_type()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3742)
			p.Type_name()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3743)
			p.Range_type()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3744)
			p.Function_type()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3745)
			p.Map_type()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMap_typeContext is an interface to support dynamic dispatch.
type IMap_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetKey_type returns the key_type rule contexts.
	GetKey_type() ITypeContext

	// GetValue_type returns the value_type rule contexts.
	GetValue_type() ITypeContext

	// SetKey_type sets the key_type rule contexts.
	SetKey_type(ITypeContext)

	// SetValue_type sets the value_type rule contexts.
	SetValue_type(ITypeContext)

	// Getter signatures
	MAP_SYMBOL() antlr.TerminalNode
	Template_type_open() ITemplate_type_openContext
	COMMA_SYMBOL() antlr.TerminalNode
	Template_type_close() ITemplate_type_closeContext
	AllType_() []ITypeContext
	Type_(i int) ITypeContext

	// IsMap_typeContext differentiates from other interfaces.
	IsMap_typeContext()
}

type Map_typeContext struct {
	antlr.BaseParserRuleContext
	parser     antlr.Parser
	key_type   ITypeContext
	value_type ITypeContext
}

func NewEmptyMap_typeContext() *Map_typeContext {
	var p = new(Map_typeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_map_type
	return p
}

func InitEmptyMap_typeContext(p *Map_typeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_map_type
}

func (*Map_typeContext) IsMap_typeContext() {}

func NewMap_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Map_typeContext {
	var p = new(Map_typeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_map_type

	return p
}

func (s *Map_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Map_typeContext) GetKey_type() ITypeContext { return s.key_type }

func (s *Map_typeContext) GetValue_type() ITypeContext { return s.value_type }

func (s *Map_typeContext) SetKey_type(v ITypeContext) { s.key_type = v }

func (s *Map_typeContext) SetValue_type(v ITypeContext) { s.value_type = v }

func (s *Map_typeContext) MAP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMAP_SYMBOL, 0)
}

func (s *Map_typeContext) Template_type_open() ITemplate_type_openContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_openContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_openContext)
}

func (s *Map_typeContext) COMMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, 0)
}

func (s *Map_typeContext) Template_type_close() ITemplate_type_closeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_closeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_closeContext)
}

func (s *Map_typeContext) AllType_() []ITypeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeContext); ok {
			len++
		}
	}

	tst := make([]ITypeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeContext); ok {
			tst[i] = t.(ITypeContext)
			i++
		}
	}

	return tst
}

func (s *Map_typeContext) Type_(i int) ITypeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Map_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Map_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Map_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterMap_type(s)
	}
}

func (s *Map_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitMap_type(s)
	}
}

func (s *Map_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitMap_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Map_type() (localctx IMap_typeContext) {
	localctx = NewMap_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 636, GoogleSQLParserRULE_map_type)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3748)
		p.Match(GoogleSQLParserMAP_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3749)
		p.Template_type_open()
	}
	{
		p.SetState(3750)

		var _x = p.Type_()

		localctx.(*Map_typeContext).key_type = _x
	}
	{
		p.SetState(3751)
		p.Match(GoogleSQLParserCOMMA_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3752)

		var _x = p.Type_()

		localctx.(*Map_typeContext).value_type = _x
	}
	{
		p.SetState(3753)
		p.Template_type_close()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunction_typeContext is an interface to support dynamic dispatch.
type IFunction_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetReturn_type returns the return_type rule contexts.
	GetReturn_type() ITypeContext

	// GetArg_type returns the arg_type rule contexts.
	GetArg_type() ITypeContext

	// GetArg_list returns the arg_list rule contexts.
	GetArg_list() IFunction_type_prefixContext

	// SetReturn_type sets the return_type rule contexts.
	SetReturn_type(ITypeContext)

	// SetArg_type sets the arg_type rule contexts.
	SetArg_type(ITypeContext)

	// SetArg_list sets the arg_list rule contexts.
	SetArg_list(IFunction_type_prefixContext)

	// Getter signatures
	FUNCTION_SYMBOL() antlr.TerminalNode
	Template_type_open() ITemplate_type_openContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	SUB_GT_BRACKET_SYMBOL() antlr.TerminalNode
	Template_type_close() ITemplate_type_closeContext
	AllType_() []ITypeContext
	Type_(i int) ITypeContext
	Function_type_prefix() IFunction_type_prefixContext

	// IsFunction_typeContext differentiates from other interfaces.
	IsFunction_typeContext()
}

type Function_typeContext struct {
	antlr.BaseParserRuleContext
	parser      antlr.Parser
	return_type ITypeContext
	arg_type    ITypeContext
	arg_list    IFunction_type_prefixContext
}

func NewEmptyFunction_typeContext() *Function_typeContext {
	var p = new(Function_typeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_type
	return p
}

func InitEmptyFunction_typeContext(p *Function_typeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_type
}

func (*Function_typeContext) IsFunction_typeContext() {}

func NewFunction_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_typeContext {
	var p = new(Function_typeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_function_type

	return p
}

func (s *Function_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_typeContext) GetReturn_type() ITypeContext { return s.return_type }

func (s *Function_typeContext) GetArg_type() ITypeContext { return s.arg_type }

func (s *Function_typeContext) GetArg_list() IFunction_type_prefixContext { return s.arg_list }

func (s *Function_typeContext) SetReturn_type(v ITypeContext) { s.return_type = v }

func (s *Function_typeContext) SetArg_type(v ITypeContext) { s.arg_type = v }

func (s *Function_typeContext) SetArg_list(v IFunction_type_prefixContext) { s.arg_list = v }

func (s *Function_typeContext) FUNCTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFUNCTION_SYMBOL, 0)
}

func (s *Function_typeContext) Template_type_open() ITemplate_type_openContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_openContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_openContext)
}

func (s *Function_typeContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Function_typeContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Function_typeContext) SUB_GT_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSUB_GT_BRACKET_SYMBOL, 0)
}

func (s *Function_typeContext) Template_type_close() ITemplate_type_closeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_closeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_closeContext)
}

func (s *Function_typeContext) AllType_() []ITypeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeContext); ok {
			len++
		}
	}

	tst := make([]ITypeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeContext); ok {
			tst[i] = t.(ITypeContext)
			i++
		}
	}

	return tst
}

func (s *Function_typeContext) Type_(i int) ITypeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Function_typeContext) Function_type_prefix() IFunction_type_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunction_type_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunction_type_prefixContext)
}

func (s *Function_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFunction_type(s)
	}
}

func (s *Function_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFunction_type(s)
	}
}

func (s *Function_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFunction_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Function_type() (localctx IFunction_typeContext) {
	localctx = NewFunction_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 638, GoogleSQLParserRULE_function_type)
	p.SetState(3776)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 393, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3755)
			p.Match(GoogleSQLParserFUNCTION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3756)
			p.Template_type_open()
		}
		{
			p.SetState(3757)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3758)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3759)
			p.Match(GoogleSQLParserSUB_GT_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3760)

			var _x = p.Type_()

			localctx.(*Function_typeContext).return_type = _x
		}
		{
			p.SetState(3761)
			p.Template_type_close()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3763)
			p.Match(GoogleSQLParserFUNCTION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3764)
			p.Template_type_open()
		}
		{
			p.SetState(3765)

			var _x = p.Type_()

			localctx.(*Function_typeContext).arg_type = _x
		}
		{
			p.SetState(3766)
			p.Match(GoogleSQLParserSUB_GT_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3767)

			var _x = p.Type_()

			localctx.(*Function_typeContext).return_type = _x
		}
		{
			p.SetState(3768)
			p.Template_type_close()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3770)

			var _x = p.Function_type_prefix()

			localctx.(*Function_typeContext).arg_list = _x
		}
		{
			p.SetState(3771)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3772)
			p.Match(GoogleSQLParserSUB_GT_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3773)

			var _x = p.Type_()

			localctx.(*Function_typeContext).return_type = _x
		}
		{
			p.SetState(3774)
			p.Template_type_close()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunction_type_prefixContext is an interface to support dynamic dispatch.
type IFunction_type_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FUNCTION_SYMBOL() antlr.TerminalNode
	Template_type_open() ITemplate_type_openContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllType_() []ITypeContext
	Type_(i int) ITypeContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsFunction_type_prefixContext differentiates from other interfaces.
	IsFunction_type_prefixContext()
}

type Function_type_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_type_prefixContext() *Function_type_prefixContext {
	var p = new(Function_type_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_type_prefix
	return p
}

func InitEmptyFunction_type_prefixContext(p *Function_type_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_type_prefix
}

func (*Function_type_prefixContext) IsFunction_type_prefixContext() {}

func NewFunction_type_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_type_prefixContext {
	var p = new(Function_type_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_function_type_prefix

	return p
}

func (s *Function_type_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_type_prefixContext) FUNCTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFUNCTION_SYMBOL, 0)
}

func (s *Function_type_prefixContext) Template_type_open() ITemplate_type_openContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_openContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_openContext)
}

func (s *Function_type_prefixContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Function_type_prefixContext) AllType_() []ITypeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeContext); ok {
			len++
		}
	}

	tst := make([]ITypeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeContext); ok {
			tst[i] = t.(ITypeContext)
			i++
		}
	}

	return tst
}

func (s *Function_type_prefixContext) Type_(i int) ITypeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Function_type_prefixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Function_type_prefixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Function_type_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_type_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_type_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFunction_type_prefix(s)
	}
}

func (s *Function_type_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFunction_type_prefix(s)
	}
}

func (s *Function_type_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFunction_type_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Function_type_prefix() (localctx IFunction_type_prefixContext) {
	localctx = NewFunction_type_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 640, GoogleSQLParserRULE_function_type_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3778)
		p.Match(GoogleSQLParserFUNCTION_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3779)
		p.Template_type_open()
	}
	{
		p.SetState(3780)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3781)
		p.Type_()
	}
	p.SetState(3786)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(3782)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3783)
			p.Type_()
		}

		p.SetState(3788)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IType_nameContext is an interface to support dynamic dispatch.
type IType_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Path_expression() IPath_expressionContext
	INTERVAL_SYMBOL() antlr.TerminalNode

	// IsType_nameContext differentiates from other interfaces.
	IsType_nameContext()
}

type Type_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_nameContext() *Type_nameContext {
	var p = new(Type_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_type_name
	return p
}

func InitEmptyType_nameContext(p *Type_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_type_name
}

func (*Type_nameContext) IsType_nameContext() {}

func NewType_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_nameContext {
	var p = new(Type_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_type_name

	return p
}

func (s *Type_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_nameContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Type_nameContext) INTERVAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINTERVAL_SYMBOL, 0)
}

func (s *Type_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterType_name(s)
	}
}

func (s *Type_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitType_name(s)
	}
}

func (s *Type_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitType_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Type_name() (localctx IType_nameContext) {
	localctx = NewType_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 642, GoogleSQLParserRULE_type_name)
	p.SetState(3791)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3789)
			p.Path_expression()
		}

	case GoogleSQLParserINTERVAL_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3790)
			p.Match(GoogleSQLParserINTERVAL_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPath_expressionContext is an interface to support dynamic dispatch.
type IPath_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	AllDOT_SYMBOL() []antlr.TerminalNode
	DOT_SYMBOL(i int) antlr.TerminalNode

	// IsPath_expressionContext differentiates from other interfaces.
	IsPath_expressionContext()
}

type Path_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPath_expressionContext() *Path_expressionContext {
	var p = new(Path_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_path_expression
	return p
}

func InitEmptyPath_expressionContext(p *Path_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_path_expression
}

func (*Path_expressionContext) IsPath_expressionContext() {}

func NewPath_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Path_expressionContext {
	var p = new(Path_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_path_expression

	return p
}

func (s *Path_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Path_expressionContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Path_expressionContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Path_expressionContext) AllDOT_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserDOT_SYMBOL)
}

func (s *Path_expressionContext) DOT_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDOT_SYMBOL, i)
}

func (s *Path_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Path_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Path_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPath_expression(s)
	}
}

func (s *Path_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPath_expression(s)
	}
}

func (s *Path_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPath_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Path_expression() (localctx IPath_expressionContext) {
	localctx = NewPath_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 644, GoogleSQLParserRULE_path_expression)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3793)
		p.Identifier()
	}
	p.SetState(3798)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 396, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(3794)
				p.Match(GoogleSQLParserDOT_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(3795)
				p.Identifier()
			}

		}
		p.SetState(3800)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 396, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIdentifierContext is an interface to support dynamic dispatch.
type IIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Token_identifier() IToken_identifierContext
	Keyword_as_identifier() IKeyword_as_identifierContext

	// IsIdentifierContext differentiates from other interfaces.
	IsIdentifierContext()
}

type IdentifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierContext() *IdentifierContext {
	var p = new(IdentifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_identifier
	return p
}

func InitEmptyIdentifierContext(p *IdentifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_identifier
}

func (*IdentifierContext) IsIdentifierContext() {}

func NewIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierContext {
	var p = new(IdentifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_identifier

	return p
}

func (s *IdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierContext) Token_identifier() IToken_identifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IToken_identifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IToken_identifierContext)
}

func (s *IdentifierContext) Keyword_as_identifier() IKeyword_as_identifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKeyword_as_identifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKeyword_as_identifierContext)
}

func (s *IdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterIdentifier(s)
	}
}

func (s *IdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitIdentifier(s)
	}
}

func (s *IdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Identifier() (localctx IIdentifierContext) {
	localctx = NewIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 646, GoogleSQLParserRULE_identifier)
	p.SetState(3803)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3801)
			p.Token_identifier()
		}

	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3802)
			p.Keyword_as_identifier()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IKeyword_as_identifierContext is an interface to support dynamic dispatch.
type IKeyword_as_identifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Common_keyword_as_identifier() ICommon_keyword_as_identifierContext
	SIMPLE_SYMBOL() antlr.TerminalNode

	// IsKeyword_as_identifierContext differentiates from other interfaces.
	IsKeyword_as_identifierContext()
}

type Keyword_as_identifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeyword_as_identifierContext() *Keyword_as_identifierContext {
	var p = new(Keyword_as_identifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_keyword_as_identifier
	return p
}

func InitEmptyKeyword_as_identifierContext(p *Keyword_as_identifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_keyword_as_identifier
}

func (*Keyword_as_identifierContext) IsKeyword_as_identifierContext() {}

func NewKeyword_as_identifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Keyword_as_identifierContext {
	var p = new(Keyword_as_identifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_keyword_as_identifier

	return p
}

func (s *Keyword_as_identifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Keyword_as_identifierContext) Common_keyword_as_identifier() ICommon_keyword_as_identifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICommon_keyword_as_identifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICommon_keyword_as_identifierContext)
}

func (s *Keyword_as_identifierContext) SIMPLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSIMPLE_SYMBOL, 0)
}

func (s *Keyword_as_identifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Keyword_as_identifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Keyword_as_identifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterKeyword_as_identifier(s)
	}
}

func (s *Keyword_as_identifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitKeyword_as_identifier(s)
	}
}

func (s *Keyword_as_identifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitKeyword_as_identifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Keyword_as_identifier() (localctx IKeyword_as_identifierContext) {
	localctx = NewKeyword_as_identifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 648, GoogleSQLParserRULE_keyword_as_identifier)
	p.SetState(3807)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3805)
			p.Common_keyword_as_identifier()
		}

	case GoogleSQLParserSIMPLE_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3806)
			p.Match(GoogleSQLParserSIMPLE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICommon_keyword_as_identifierContext is an interface to support dynamic dispatch.
type ICommon_keyword_as_identifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ABORT_SYMBOL() antlr.TerminalNode
	ACCESS_SYMBOL() antlr.TerminalNode
	ACTION_SYMBOL() antlr.TerminalNode
	AGGREGATE_SYMBOL() antlr.TerminalNode
	ADD_SYMBOL() antlr.TerminalNode
	ALTER_SYMBOL() antlr.TerminalNode
	ALWAYS_SYMBOL() antlr.TerminalNode
	ANALYZE_SYMBOL() antlr.TerminalNode
	APPROX_SYMBOL() antlr.TerminalNode
	ARE_SYMBOL() antlr.TerminalNode
	ASSERT_SYMBOL() antlr.TerminalNode
	BATCH_SYMBOL() antlr.TerminalNode
	BEGIN_SYMBOL() antlr.TerminalNode
	BIGDECIMAL_SYMBOL() antlr.TerminalNode
	BIGNUMERIC_SYMBOL() antlr.TerminalNode
	BREAK_SYMBOL() antlr.TerminalNode
	CALL_SYMBOL() antlr.TerminalNode
	CASCADE_SYMBOL() antlr.TerminalNode
	CHECK_SYMBOL() antlr.TerminalNode
	CLAMPED_SYMBOL() antlr.TerminalNode
	CLONE_SYMBOL() antlr.TerminalNode
	COPY_SYMBOL() antlr.TerminalNode
	CLUSTER_SYMBOL() antlr.TerminalNode
	COLUMN_SYMBOL() antlr.TerminalNode
	COLUMNS_SYMBOL() antlr.TerminalNode
	COMMIT_SYMBOL() antlr.TerminalNode
	CONNECTION_SYMBOL() antlr.TerminalNode
	CONSTANT_SYMBOL() antlr.TerminalNode
	CONSTRAINT_SYMBOL() antlr.TerminalNode
	CONTINUE_SYMBOL() antlr.TerminalNode
	CORRESPONDING_SYMBOL() antlr.TerminalNode
	CYCLE_SYMBOL() antlr.TerminalNode
	DATA_SYMBOL() antlr.TerminalNode
	DATABASE_SYMBOL() antlr.TerminalNode
	DATE_SYMBOL() antlr.TerminalNode
	DATETIME_SYMBOL() antlr.TerminalNode
	DECIMAL_SYMBOL() antlr.TerminalNode
	DECLARE_SYMBOL() antlr.TerminalNode
	DEFINER_SYMBOL() antlr.TerminalNode
	DELETE_SYMBOL() antlr.TerminalNode
	DELETION_SYMBOL() antlr.TerminalNode
	DEPTH_SYMBOL() antlr.TerminalNode
	DESCRIBE_SYMBOL() antlr.TerminalNode
	DETERMINISTIC_SYMBOL() antlr.TerminalNode
	DO_SYMBOL() antlr.TerminalNode
	DROP_SYMBOL() antlr.TerminalNode
	ELSEIF_SYMBOL() antlr.TerminalNode
	ENFORCED_SYMBOL() antlr.TerminalNode
	ERROR_SYMBOL() antlr.TerminalNode
	EXCEPTION_SYMBOL() antlr.TerminalNode
	EXECUTE_SYMBOL() antlr.TerminalNode
	EXPLAIN_SYMBOL() antlr.TerminalNode
	EXPORT_SYMBOL() antlr.TerminalNode
	EXTEND_SYMBOL() antlr.TerminalNode
	EXTERNAL_SYMBOL() antlr.TerminalNode
	FILES_SYMBOL() antlr.TerminalNode
	FILTER_SYMBOL() antlr.TerminalNode
	FILL_SYMBOL() antlr.TerminalNode
	FIRST_SYMBOL() antlr.TerminalNode
	FOREIGN_SYMBOL() antlr.TerminalNode
	FORMAT_SYMBOL() antlr.TerminalNode
	FUNCTION_SYMBOL() antlr.TerminalNode
	GENERATED_SYMBOL() antlr.TerminalNode
	GRANT_SYMBOL() antlr.TerminalNode
	GROUP_ROWS_SYMBOL() antlr.TerminalNode
	HIDDEN_SYMBOL() antlr.TerminalNode
	IDENTITY_SYMBOL() antlr.TerminalNode
	IMMEDIATE_SYMBOL() antlr.TerminalNode
	IMMUTABLE_SYMBOL() antlr.TerminalNode
	IMPORT_SYMBOL() antlr.TerminalNode
	INCLUDE_SYMBOL() antlr.TerminalNode
	INCREMENT_SYMBOL() antlr.TerminalNode
	INDEX_SYMBOL() antlr.TerminalNode
	INOUT_SYMBOL() antlr.TerminalNode
	INPUT_SYMBOL() antlr.TerminalNode
	INSERT_SYMBOL() antlr.TerminalNode
	INVOKER_SYMBOL() antlr.TerminalNode
	ISOLATION_SYMBOL() antlr.TerminalNode
	ITERATE_SYMBOL() antlr.TerminalNode
	JSON_SYMBOL() antlr.TerminalNode
	KEY_SYMBOL() antlr.TerminalNode
	LANGUAGE_SYMBOL() antlr.TerminalNode
	LAST_SYMBOL() antlr.TerminalNode
	LEAVE_SYMBOL() antlr.TerminalNode
	LEVEL_SYMBOL() antlr.TerminalNode
	LOAD_SYMBOL() antlr.TerminalNode
	LOOP_SYMBOL() antlr.TerminalNode
	MACRO_SYMBOL() antlr.TerminalNode
	MAP_SYMBOL() antlr.TerminalNode
	MATCH_SYMBOL() antlr.TerminalNode
	KW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL() antlr.TerminalNode
	MATCHED_SYMBOL() antlr.TerminalNode
	MATERIALIZED_SYMBOL() antlr.TerminalNode
	MAX_SYMBOL() antlr.TerminalNode
	MAXVALUE_SYMBOL() antlr.TerminalNode
	MEASURES_SYMBOL() antlr.TerminalNode
	MESSAGE_SYMBOL() antlr.TerminalNode
	METADATA_SYMBOL() antlr.TerminalNode
	MIN_SYMBOL() antlr.TerminalNode
	MINVALUE_SYMBOL() antlr.TerminalNode
	MODEL_SYMBOL() antlr.TerminalNode
	MODULE_SYMBOL() antlr.TerminalNode
	NUMERIC_SYMBOL() antlr.TerminalNode
	OFFSET_SYMBOL() antlr.TerminalNode
	ONLY_SYMBOL() antlr.TerminalNode
	OPTIONS_SYMBOL() antlr.TerminalNode
	OUT_SYMBOL() antlr.TerminalNode
	OUTPUT_SYMBOL() antlr.TerminalNode
	OVERWRITE_SYMBOL() antlr.TerminalNode
	PARTITIONS_SYMBOL() antlr.TerminalNode
	PATTERN_SYMBOL() antlr.TerminalNode
	PERCENT_SYMBOL() antlr.TerminalNode
	PIVOT_SYMBOL() antlr.TerminalNode
	POLICIES_SYMBOL() antlr.TerminalNode
	POLICY_SYMBOL() antlr.TerminalNode
	PRIMARY_SYMBOL() antlr.TerminalNode
	PRIVATE_SYMBOL() antlr.TerminalNode
	PRIVILEGE_SYMBOL() antlr.TerminalNode
	PRIVILEGES_SYMBOL() antlr.TerminalNode
	PROCEDURE_SYMBOL() antlr.TerminalNode
	PROJECT_SYMBOL() antlr.TerminalNode
	PUBLIC_SYMBOL() antlr.TerminalNode
	RAISE_SYMBOL() antlr.TerminalNode
	READ_SYMBOL() antlr.TerminalNode
	REFERENCES_SYMBOL() antlr.TerminalNode
	REMOTE_SYMBOL() antlr.TerminalNode
	REMOVE_SYMBOL() antlr.TerminalNode
	RENAME_SYMBOL() antlr.TerminalNode
	REPEAT_SYMBOL() antlr.TerminalNode
	REPEATABLE_SYMBOL() antlr.TerminalNode
	REPLACE_SYMBOL() antlr.TerminalNode
	REPLACE_FIELDS_SYMBOL() antlr.TerminalNode
	REPLICA_SYMBOL() antlr.TerminalNode
	REPORT_SYMBOL() antlr.TerminalNode
	RESTRICT_SYMBOL() antlr.TerminalNode
	RESTRICTION_SYMBOL() antlr.TerminalNode
	RETURNS_SYMBOL() antlr.TerminalNode
	RETURN_SYMBOL() antlr.TerminalNode
	REVOKE_SYMBOL() antlr.TerminalNode
	ROLLBACK_SYMBOL() antlr.TerminalNode
	ROW_SYMBOL() antlr.TerminalNode
	RUN_SYMBOL() antlr.TerminalNode
	SAFE_CAST_SYMBOL() antlr.TerminalNode
	SCHEMA_SYMBOL() antlr.TerminalNode
	SEARCH_SYMBOL() antlr.TerminalNode
	SECURITY_SYMBOL() antlr.TerminalNode
	SEQUENCE_SYMBOL() antlr.TerminalNode
	SETS_SYMBOL() antlr.TerminalNode
	SHOW_SYMBOL() antlr.TerminalNode
	SNAPSHOT_SYMBOL() antlr.TerminalNode
	SOURCE_SYMBOL() antlr.TerminalNode
	SQL_SYMBOL() antlr.TerminalNode
	STABLE_SYMBOL() antlr.TerminalNode
	START_SYMBOL() antlr.TerminalNode
	STATIC_DESCRIBE_SYMBOL() antlr.TerminalNode
	STORED_SYMBOL() antlr.TerminalNode
	STORING_SYMBOL() antlr.TerminalNode
	STRICT_SYMBOL() antlr.TerminalNode
	SYSTEM_SYMBOL() antlr.TerminalNode
	SYSTEM_TIME_SYMBOL() antlr.TerminalNode
	TABLE_SYMBOL() antlr.TerminalNode
	TABLES_SYMBOL() antlr.TerminalNode
	TARGET_SYMBOL() antlr.TerminalNode
	TEMP_SYMBOL() antlr.TerminalNode
	TEMPORARY_SYMBOL() antlr.TerminalNode
	TIME_SYMBOL() antlr.TerminalNode
	TIMESTAMP_SYMBOL() antlr.TerminalNode
	TRANSACTION_SYMBOL() antlr.TerminalNode
	TRANSFORM_SYMBOL() antlr.TerminalNode
	TRUNCATE_SYMBOL() antlr.TerminalNode
	TYPE_SYMBOL() antlr.TerminalNode
	UNDROP_SYMBOL() antlr.TerminalNode
	UNIQUE_SYMBOL() antlr.TerminalNode
	UNKNOWN_SYMBOL() antlr.TerminalNode
	UNPIVOT_SYMBOL() antlr.TerminalNode
	UNTIL_SYMBOL() antlr.TerminalNode
	UPDATE_SYMBOL() antlr.TerminalNode
	VALUE_SYMBOL() antlr.TerminalNode
	VALUES_SYMBOL() antlr.TerminalNode
	VECTOR_SYMBOL() antlr.TerminalNode
	VIEW_SYMBOL() antlr.TerminalNode
	VIEWS_SYMBOL() antlr.TerminalNode
	VOLATILE_SYMBOL() antlr.TerminalNode
	WEIGHT_SYMBOL() antlr.TerminalNode
	WHILE_SYMBOL() antlr.TerminalNode
	WRITE_SYMBOL() antlr.TerminalNode
	ZONE_SYMBOL() antlr.TerminalNode
	DESCRIPTOR_SYMBOL() antlr.TerminalNode
	INTERLEAVE_SYMBOL() antlr.TerminalNode
	NULL_FILTERED_SYMBOL() antlr.TerminalNode
	PARENT_SYMBOL() antlr.TerminalNode

	// IsCommon_keyword_as_identifierContext differentiates from other interfaces.
	IsCommon_keyword_as_identifierContext()
}

type Common_keyword_as_identifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCommon_keyword_as_identifierContext() *Common_keyword_as_identifierContext {
	var p = new(Common_keyword_as_identifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_common_keyword_as_identifier
	return p
}

func InitEmptyCommon_keyword_as_identifierContext(p *Common_keyword_as_identifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_common_keyword_as_identifier
}

func (*Common_keyword_as_identifierContext) IsCommon_keyword_as_identifierContext() {}

func NewCommon_keyword_as_identifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Common_keyword_as_identifierContext {
	var p = new(Common_keyword_as_identifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_common_keyword_as_identifier

	return p
}

func (s *Common_keyword_as_identifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Common_keyword_as_identifierContext) ABORT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserABORT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ACCESS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserACCESS_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ACTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserACTION_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) AGGREGATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAGGREGATE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ADD_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserADD_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ALTER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserALTER_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ALWAYS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserALWAYS_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ANALYZE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserANALYZE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) APPROX_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAPPROX_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ARE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserARE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ASSERT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserASSERT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) BATCH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBATCH_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) BEGIN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBEGIN_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) BIGDECIMAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBIGDECIMAL_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) BIGNUMERIC_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBIGNUMERIC_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) BREAK_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBREAK_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CALL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCALL_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CASCADE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCASCADE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CHECK_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCHECK_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CLAMPED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCLAMPED_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CLONE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCLONE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) COPY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOPY_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CLUSTER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCLUSTER_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) COLUMN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOLUMN_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) COLUMNS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOLUMNS_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) COMMIT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMIT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CONNECTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCONNECTION_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CONSTANT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCONSTANT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CONSTRAINT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCONSTRAINT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CONTINUE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCONTINUE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CORRESPONDING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCORRESPONDING_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CYCLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCYCLE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DATA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDATA_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DATABASE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDATABASE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDATE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DATETIME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDATETIME_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DECIMAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDECIMAL_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DECLARE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDECLARE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DEFINER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDEFINER_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DELETE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDELETE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DELETION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDELETION_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DEPTH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDEPTH_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DESCRIBE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDESCRIBE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DETERMINISTIC_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDETERMINISTIC_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDO_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DROP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDROP_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ELSEIF_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserELSEIF_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ENFORCED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserENFORCED_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ERROR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserERROR_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) EXCEPTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXCEPTION_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) EXECUTE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXECUTE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) EXPLAIN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXPLAIN_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) EXPORT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXPORT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) EXTEND_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXTEND_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) EXTERNAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXTERNAL_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) FILES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFILES_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) FILTER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFILTER_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) FILL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFILL_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) FIRST_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFIRST_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) FOREIGN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFOREIGN_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) FORMAT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFORMAT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) FUNCTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFUNCTION_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) GENERATED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGENERATED_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) GRANT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGRANT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) GROUP_ROWS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGROUP_ROWS_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) HIDDEN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserHIDDEN_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) IDENTITY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIDENTITY_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) IMMEDIATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIMMEDIATE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) IMMUTABLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIMMUTABLE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) IMPORT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIMPORT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) INCLUDE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINCLUDE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) INCREMENT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINCREMENT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) INDEX_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINDEX_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) INOUT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINOUT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) INPUT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINPUT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) INSERT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINSERT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) INVOKER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINVOKER_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ISOLATION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserISOLATION_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ITERATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserITERATE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) JSON_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserJSON_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) KEY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserKEY_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) LANGUAGE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLANGUAGE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) LAST_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLAST_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) LEAVE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLEAVE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) LEVEL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLEVEL_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) LOAD_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLOAD_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) LOOP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLOOP_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MACRO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMACRO_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MAP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMAP_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MATCH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMATCH_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) KW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MATCHED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMATCHED_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MATERIALIZED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMATERIALIZED_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MAX_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMAX_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MAXVALUE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMAXVALUE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MEASURES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMEASURES_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MESSAGE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMESSAGE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) METADATA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMETADATA_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MIN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMIN_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MINVALUE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMINVALUE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MODEL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMODEL_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MODULE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMODULE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) NUMERIC_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNUMERIC_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) OFFSET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOFFSET_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ONLY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserONLY_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) OPTIONS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOPTIONS_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) OUT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOUT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) OUTPUT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOUTPUT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) OVERWRITE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOVERWRITE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PARTITIONS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPARTITIONS_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PATTERN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPATTERN_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PERCENT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPERCENT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PIVOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPIVOT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) POLICIES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPOLICIES_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) POLICY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPOLICY_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PRIMARY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPRIMARY_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PRIVATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPRIVATE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PRIVILEGE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPRIVILEGE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PRIVILEGES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPRIVILEGES_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PROCEDURE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPROCEDURE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PROJECT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPROJECT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PUBLIC_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPUBLIC_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) RAISE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRAISE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) READ_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREAD_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) REFERENCES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREFERENCES_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) REMOTE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREMOTE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) REMOVE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREMOVE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) RENAME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRENAME_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) REPEAT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPEAT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) REPEATABLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPEATABLE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) REPLACE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPLACE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) REPLACE_FIELDS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPLACE_FIELDS_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) REPLICA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPLICA_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) REPORT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPORT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) RESTRICT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRESTRICT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) RESTRICTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRESTRICTION_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) RETURNS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRETURNS_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) RETURN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRETURN_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) REVOKE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREVOKE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ROLLBACK_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserROLLBACK_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ROW_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserROW_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) RUN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRUN_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SAFE_CAST_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSAFE_CAST_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SCHEMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSCHEMA_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SEARCH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSEARCH_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SECURITY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSECURITY_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SEQUENCE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSEQUENCE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SETS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSETS_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SHOW_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSHOW_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SNAPSHOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSNAPSHOT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SOURCE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSOURCE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SQL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSQL_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) STABLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTABLE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) START_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTART_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) STATIC_DESCRIBE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) STORED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTORED_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) STORING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTORING_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) STRICT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTRICT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SYSTEM_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSYSTEM_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SYSTEM_TIME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSYSTEM_TIME_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TABLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTABLE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TABLES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTABLES_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TARGET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTARGET_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TEMP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTEMP_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TEMPORARY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTEMPORARY_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TIME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTIME_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TIMESTAMP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTIMESTAMP_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TRANSACTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTRANSACTION_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TRANSFORM_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTRANSFORM_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TRUNCATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTRUNCATE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TYPE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTYPE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) UNDROP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNDROP_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) UNIQUE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNIQUE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) UNKNOWN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNKNOWN_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) UNPIVOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNPIVOT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) UNTIL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNTIL_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) UPDATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUPDATE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) VALUE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserVALUE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) VALUES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserVALUES_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) VECTOR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserVECTOR_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) VIEW_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserVIEW_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) VIEWS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserVIEWS_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) VOLATILE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserVOLATILE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) WEIGHT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWEIGHT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) WHILE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWHILE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) WRITE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWRITE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ZONE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserZONE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DESCRIPTOR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDESCRIPTOR_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) INTERLEAVE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINTERLEAVE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) NULL_FILTERED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNULL_FILTERED_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PARENT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPARENT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Common_keyword_as_identifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Common_keyword_as_identifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCommon_keyword_as_identifier(s)
	}
}

func (s *Common_keyword_as_identifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCommon_keyword_as_identifier(s)
	}
}

func (s *Common_keyword_as_identifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCommon_keyword_as_identifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Common_keyword_as_identifier() (localctx ICommon_keyword_as_identifierContext) {
	localctx = NewCommon_keyword_as_identifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 650, GoogleSQLParserRULE_common_keyword_as_identifier)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3809)
		_la = p.GetTokenStream().LA(1)

		if !(((int64((_la-72)) & ^0x3f) == 0 && ((int64(1)<<(_la-72))&-247260703569407) != 0) || ((int64((_la-136)) & ^0x3f) == 0 && ((int64(1)<<(_la-136))&-1) != 0) || ((int64((_la-200)) & ^0x3f) == 0 && ((int64(1)<<(_la-200))&-36028797018963969) != 0) || ((int64((_la-264)) & ^0x3f) == 0 && ((int64(1)<<(_la-264))&536870911) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IToken_identifierContext is an interface to support dynamic dispatch.
type IToken_identifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode

	// IsToken_identifierContext differentiates from other interfaces.
	IsToken_identifierContext()
}

type Token_identifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyToken_identifierContext() *Token_identifierContext {
	var p = new(Token_identifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_token_identifier
	return p
}

func InitEmptyToken_identifierContext(p *Token_identifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_token_identifier
}

func (*Token_identifierContext) IsToken_identifierContext() {}

func NewToken_identifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Token_identifierContext {
	var p = new(Token_identifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_token_identifier

	return p
}

func (s *Token_identifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Token_identifierContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIDENTIFIER, 0)
}

func (s *Token_identifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Token_identifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Token_identifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterToken_identifier(s)
	}
}

func (s *Token_identifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitToken_identifier(s)
	}
}

func (s *Token_identifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitToken_identifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Token_identifier() (localctx IToken_identifierContext) {
	localctx = NewToken_identifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 652, GoogleSQLParserRULE_token_identifier)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3811)
		p.Match(GoogleSQLParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStruct_typeContext is an interface to support dynamic dispatch.
type IStruct_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	STRUCT_SYMBOL() antlr.TerminalNode
	Template_type_open() ITemplate_type_openContext
	Template_type_close() ITemplate_type_closeContext
	Struct_type_prefix() IStruct_type_prefixContext

	// IsStruct_typeContext differentiates from other interfaces.
	IsStruct_typeContext()
}

type Struct_typeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStruct_typeContext() *Struct_typeContext {
	var p = new(Struct_typeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_type
	return p
}

func InitEmptyStruct_typeContext(p *Struct_typeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_type
}

func (*Struct_typeContext) IsStruct_typeContext() {}

func NewStruct_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Struct_typeContext {
	var p = new(Struct_typeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_struct_type

	return p
}

func (s *Struct_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Struct_typeContext) STRUCT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTRUCT_SYMBOL, 0)
}

func (s *Struct_typeContext) Template_type_open() ITemplate_type_openContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_openContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_openContext)
}

func (s *Struct_typeContext) Template_type_close() ITemplate_type_closeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_closeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_closeContext)
}

func (s *Struct_typeContext) Struct_type_prefix() IStruct_type_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_type_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_type_prefixContext)
}

func (s *Struct_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Struct_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Struct_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStruct_type(s)
	}
}

func (s *Struct_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStruct_type(s)
	}
}

func (s *Struct_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStruct_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Struct_type() (localctx IStruct_typeContext) {
	localctx = NewStruct_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 654, GoogleSQLParserRULE_struct_type)
	p.SetState(3820)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 399, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3813)
			p.Match(GoogleSQLParserSTRUCT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3814)
			p.Template_type_open()
		}
		{
			p.SetState(3815)
			p.Template_type_close()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3817)
			p.Struct_type_prefix()
		}
		{
			p.SetState(3818)
			p.Template_type_close()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStruct_type_prefixContext is an interface to support dynamic dispatch.
type IStruct_type_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	STRUCT_SYMBOL() antlr.TerminalNode
	Template_type_open() ITemplate_type_openContext
	AllStruct_field() []IStruct_fieldContext
	Struct_field(i int) IStruct_fieldContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsStruct_type_prefixContext differentiates from other interfaces.
	IsStruct_type_prefixContext()
}

type Struct_type_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStruct_type_prefixContext() *Struct_type_prefixContext {
	var p = new(Struct_type_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_type_prefix
	return p
}

func InitEmptyStruct_type_prefixContext(p *Struct_type_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_type_prefix
}

func (*Struct_type_prefixContext) IsStruct_type_prefixContext() {}

func NewStruct_type_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Struct_type_prefixContext {
	var p = new(Struct_type_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_struct_type_prefix

	return p
}

func (s *Struct_type_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Struct_type_prefixContext) STRUCT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTRUCT_SYMBOL, 0)
}

func (s *Struct_type_prefixContext) Template_type_open() ITemplate_type_openContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_openContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_openContext)
}

func (s *Struct_type_prefixContext) AllStruct_field() []IStruct_fieldContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStruct_fieldContext); ok {
			len++
		}
	}

	tst := make([]IStruct_fieldContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStruct_fieldContext); ok {
			tst[i] = t.(IStruct_fieldContext)
			i++
		}
	}

	return tst
}

func (s *Struct_type_prefixContext) Struct_field(i int) IStruct_fieldContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_fieldContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_fieldContext)
}

func (s *Struct_type_prefixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Struct_type_prefixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Struct_type_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Struct_type_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Struct_type_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStruct_type_prefix(s)
	}
}

func (s *Struct_type_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStruct_type_prefix(s)
	}
}

func (s *Struct_type_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStruct_type_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Struct_type_prefix() (localctx IStruct_type_prefixContext) {
	localctx = NewStruct_type_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 656, GoogleSQLParserRULE_struct_type_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3822)
		p.Match(GoogleSQLParserSTRUCT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3823)
		p.Template_type_open()
	}
	{
		p.SetState(3824)
		p.Struct_field()
	}
	p.SetState(3829)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(3825)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3826)
			p.Struct_field()
		}

		p.SetState(3831)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStruct_fieldContext is an interface to support dynamic dispatch.
type IStruct_fieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	Type_() ITypeContext

	// IsStruct_fieldContext differentiates from other interfaces.
	IsStruct_fieldContext()
}

type Struct_fieldContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStruct_fieldContext() *Struct_fieldContext {
	var p = new(Struct_fieldContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_field
	return p
}

func InitEmptyStruct_fieldContext(p *Struct_fieldContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_field
}

func (*Struct_fieldContext) IsStruct_fieldContext() {}

func NewStruct_fieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Struct_fieldContext {
	var p = new(Struct_fieldContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_struct_field

	return p
}

func (s *Struct_fieldContext) GetParser() antlr.Parser { return s.parser }

func (s *Struct_fieldContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Struct_fieldContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Struct_fieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Struct_fieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Struct_fieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStruct_field(s)
	}
}

func (s *Struct_fieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStruct_field(s)
	}
}

func (s *Struct_fieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStruct_field(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Struct_field() (localctx IStruct_fieldContext) {
	localctx = NewStruct_fieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 658, GoogleSQLParserRULE_struct_field)
	p.SetState(3836)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 401, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3832)
			p.Identifier()
		}
		{
			p.SetState(3833)
			p.Type_()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3835)
			p.Type_()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArray_typeContext is an interface to support dynamic dispatch.
type IArray_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ARRAY_SYMBOL() antlr.TerminalNode
	Template_type_open() ITemplate_type_openContext
	Type_() ITypeContext
	Template_type_close() ITemplate_type_closeContext

	// IsArray_typeContext differentiates from other interfaces.
	IsArray_typeContext()
}

type Array_typeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArray_typeContext() *Array_typeContext {
	var p = new(Array_typeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_array_type
	return p
}

func InitEmptyArray_typeContext(p *Array_typeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_array_type
}

func (*Array_typeContext) IsArray_typeContext() {}

func NewArray_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_typeContext {
	var p = new(Array_typeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_array_type

	return p
}

func (s *Array_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_typeContext) ARRAY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserARRAY_SYMBOL, 0)
}

func (s *Array_typeContext) Template_type_open() ITemplate_type_openContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_openContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_openContext)
}

func (s *Array_typeContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Array_typeContext) Template_type_close() ITemplate_type_closeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_closeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_closeContext)
}

func (s *Array_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Array_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterArray_type(s)
	}
}

func (s *Array_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitArray_type(s)
	}
}

func (s *Array_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitArray_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Array_type() (localctx IArray_typeContext) {
	localctx = NewArray_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 660, GoogleSQLParserRULE_array_type)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3838)
		p.Match(GoogleSQLParserARRAY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3839)
		p.Template_type_open()
	}
	{
		p.SetState(3840)
		p.Type_()
	}
	{
		p.SetState(3841)
		p.Template_type_close()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITemplate_type_openContext is an interface to support dynamic dispatch.
type ITemplate_type_openContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LT_OPERATOR() antlr.TerminalNode

	// IsTemplate_type_openContext differentiates from other interfaces.
	IsTemplate_type_openContext()
}

type Template_type_openContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplate_type_openContext() *Template_type_openContext {
	var p = new(Template_type_openContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_template_type_open
	return p
}

func InitEmptyTemplate_type_openContext(p *Template_type_openContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_template_type_open
}

func (*Template_type_openContext) IsTemplate_type_openContext() {}

func NewTemplate_type_openContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Template_type_openContext {
	var p = new(Template_type_openContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_template_type_open

	return p
}

func (s *Template_type_openContext) GetParser() antlr.Parser { return s.parser }

func (s *Template_type_openContext) LT_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLT_OPERATOR, 0)
}

func (s *Template_type_openContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Template_type_openContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Template_type_openContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTemplate_type_open(s)
	}
}

func (s *Template_type_openContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTemplate_type_open(s)
	}
}

func (s *Template_type_openContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTemplate_type_open(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Template_type_open() (localctx ITemplate_type_openContext) {
	localctx = NewTemplate_type_openContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 662, GoogleSQLParserRULE_template_type_open)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3843)
		p.Match(GoogleSQLParserLT_OPERATOR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITemplate_type_closeContext is an interface to support dynamic dispatch.
type ITemplate_type_closeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	GT_OPERATOR() antlr.TerminalNode

	// IsTemplate_type_closeContext differentiates from other interfaces.
	IsTemplate_type_closeContext()
}

type Template_type_closeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplate_type_closeContext() *Template_type_closeContext {
	var p = new(Template_type_closeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_template_type_close
	return p
}

func InitEmptyTemplate_type_closeContext(p *Template_type_closeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_template_type_close
}

func (*Template_type_closeContext) IsTemplate_type_closeContext() {}

func NewTemplate_type_closeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Template_type_closeContext {
	var p = new(Template_type_closeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_template_type_close

	return p
}

func (s *Template_type_closeContext) GetParser() antlr.Parser { return s.parser }

func (s *Template_type_closeContext) GT_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGT_OPERATOR, 0)
}

func (s *Template_type_closeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Template_type_closeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Template_type_closeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTemplate_type_close(s)
	}
}

func (s *Template_type_closeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTemplate_type_close(s)
	}
}

func (s *Template_type_closeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTemplate_type_close(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Template_type_close() (localctx ITemplate_type_closeContext) {
	localctx = NewTemplate_type_closeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 664, GoogleSQLParserRULE_template_type_close)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3845)
		p.Match(GoogleSQLParserGT_OPERATOR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDate_or_time_literalContext is an interface to support dynamic dispatch.
type IDate_or_time_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Date_or_time_literal_kind() IDate_or_time_literal_kindContext
	String_literal() IString_literalContext

	// IsDate_or_time_literalContext differentiates from other interfaces.
	IsDate_or_time_literalContext()
}

type Date_or_time_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDate_or_time_literalContext() *Date_or_time_literalContext {
	var p = new(Date_or_time_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_date_or_time_literal
	return p
}

func InitEmptyDate_or_time_literalContext(p *Date_or_time_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_date_or_time_literal
}

func (*Date_or_time_literalContext) IsDate_or_time_literalContext() {}

func NewDate_or_time_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Date_or_time_literalContext {
	var p = new(Date_or_time_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_date_or_time_literal

	return p
}

func (s *Date_or_time_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Date_or_time_literalContext) Date_or_time_literal_kind() IDate_or_time_literal_kindContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDate_or_time_literal_kindContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDate_or_time_literal_kindContext)
}

func (s *Date_or_time_literalContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Date_or_time_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Date_or_time_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Date_or_time_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterDate_or_time_literal(s)
	}
}

func (s *Date_or_time_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitDate_or_time_literal(s)
	}
}

func (s *Date_or_time_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitDate_or_time_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Date_or_time_literal() (localctx IDate_or_time_literalContext) {
	localctx = NewDate_or_time_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 666, GoogleSQLParserRULE_date_or_time_literal)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3847)
		p.Date_or_time_literal_kind()
	}
	{
		p.SetState(3848)
		p.string_literal(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDate_or_time_literal_kindContext is an interface to support dynamic dispatch.
type IDate_or_time_literal_kindContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DATE_SYMBOL() antlr.TerminalNode
	TIME_SYMBOL() antlr.TerminalNode
	DATETIME_SYMBOL() antlr.TerminalNode
	TIMESTAMP_SYMBOL() antlr.TerminalNode

	// IsDate_or_time_literal_kindContext differentiates from other interfaces.
	IsDate_or_time_literal_kindContext()
}

type Date_or_time_literal_kindContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDate_or_time_literal_kindContext() *Date_or_time_literal_kindContext {
	var p = new(Date_or_time_literal_kindContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_date_or_time_literal_kind
	return p
}

func InitEmptyDate_or_time_literal_kindContext(p *Date_or_time_literal_kindContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_date_or_time_literal_kind
}

func (*Date_or_time_literal_kindContext) IsDate_or_time_literal_kindContext() {}

func NewDate_or_time_literal_kindContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Date_or_time_literal_kindContext {
	var p = new(Date_or_time_literal_kindContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_date_or_time_literal_kind

	return p
}

func (s *Date_or_time_literal_kindContext) GetParser() antlr.Parser { return s.parser }

func (s *Date_or_time_literal_kindContext) DATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDATE_SYMBOL, 0)
}

func (s *Date_or_time_literal_kindContext) TIME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTIME_SYMBOL, 0)
}

func (s *Date_or_time_literal_kindContext) DATETIME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDATETIME_SYMBOL, 0)
}

func (s *Date_or_time_literal_kindContext) TIMESTAMP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTIMESTAMP_SYMBOL, 0)
}

func (s *Date_or_time_literal_kindContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Date_or_time_literal_kindContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Date_or_time_literal_kindContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterDate_or_time_literal_kind(s)
	}
}

func (s *Date_or_time_literal_kindContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitDate_or_time_literal_kind(s)
	}
}

func (s *Date_or_time_literal_kindContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitDate_or_time_literal_kind(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Date_or_time_literal_kind() (localctx IDate_or_time_literal_kindContext) {
	localctx = NewDate_or_time_literal_kindContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 668, GoogleSQLParserRULE_date_or_time_literal_kind)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3850)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-113)) & ^0x3f) == 0 && ((int64(1)<<(_la-113))&15) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFloating_point_literalContext is an interface to support dynamic dispatch.
type IFloating_point_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FLOATING_POINT_LITERAL() antlr.TerminalNode

	// IsFloating_point_literalContext differentiates from other interfaces.
	IsFloating_point_literalContext()
}

type Floating_point_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFloating_point_literalContext() *Floating_point_literalContext {
	var p = new(Floating_point_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_floating_point_literal
	return p
}

func InitEmptyFloating_point_literalContext(p *Floating_point_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_floating_point_literal
}

func (*Floating_point_literalContext) IsFloating_point_literalContext() {}

func NewFloating_point_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Floating_point_literalContext {
	var p = new(Floating_point_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_floating_point_literal

	return p
}

func (s *Floating_point_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Floating_point_literalContext) FLOATING_POINT_LITERAL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFLOATING_POINT_LITERAL, 0)
}

func (s *Floating_point_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Floating_point_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Floating_point_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFloating_point_literal(s)
	}
}

func (s *Floating_point_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFloating_point_literal(s)
	}
}

func (s *Floating_point_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFloating_point_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Floating_point_literal() (localctx IFloating_point_literalContext) {
	localctx = NewFloating_point_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 670, GoogleSQLParserRULE_floating_point_literal)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3852)
		p.Match(GoogleSQLParserFLOATING_POINT_LITERAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJson_literalContext is an interface to support dynamic dispatch.
type IJson_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	JSON_SYMBOL() antlr.TerminalNode
	String_literal() IString_literalContext

	// IsJson_literalContext differentiates from other interfaces.
	IsJson_literalContext()
}

type Json_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJson_literalContext() *Json_literalContext {
	var p = new(Json_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_json_literal
	return p
}

func InitEmptyJson_literalContext(p *Json_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_json_literal
}

func (*Json_literalContext) IsJson_literalContext() {}

func NewJson_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Json_literalContext {
	var p = new(Json_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_json_literal

	return p
}

func (s *Json_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Json_literalContext) JSON_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserJSON_SYMBOL, 0)
}

func (s *Json_literalContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Json_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Json_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Json_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterJson_literal(s)
	}
}

func (s *Json_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitJson_literal(s)
	}
}

func (s *Json_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitJson_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Json_literal() (localctx IJson_literalContext) {
	localctx = NewJson_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 672, GoogleSQLParserRULE_json_literal)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3854)
		p.Match(GoogleSQLParserJSON_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3855)
		p.string_literal(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBignumeric_literalContext is an interface to support dynamic dispatch.
type IBignumeric_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Bignumeric_literal_prefix() IBignumeric_literal_prefixContext
	String_literal() IString_literalContext

	// IsBignumeric_literalContext differentiates from other interfaces.
	IsBignumeric_literalContext()
}

type Bignumeric_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBignumeric_literalContext() *Bignumeric_literalContext {
	var p = new(Bignumeric_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_bignumeric_literal
	return p
}

func InitEmptyBignumeric_literalContext(p *Bignumeric_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_bignumeric_literal
}

func (*Bignumeric_literalContext) IsBignumeric_literalContext() {}

func NewBignumeric_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bignumeric_literalContext {
	var p = new(Bignumeric_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_bignumeric_literal

	return p
}

func (s *Bignumeric_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Bignumeric_literalContext) Bignumeric_literal_prefix() IBignumeric_literal_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBignumeric_literal_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBignumeric_literal_prefixContext)
}

func (s *Bignumeric_literalContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Bignumeric_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bignumeric_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bignumeric_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBignumeric_literal(s)
	}
}

func (s *Bignumeric_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBignumeric_literal(s)
	}
}

func (s *Bignumeric_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBignumeric_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Bignumeric_literal() (localctx IBignumeric_literalContext) {
	localctx = NewBignumeric_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 674, GoogleSQLParserRULE_bignumeric_literal)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3857)
		p.Bignumeric_literal_prefix()
	}
	{
		p.SetState(3858)
		p.string_literal(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBignumeric_literal_prefixContext is an interface to support dynamic dispatch.
type IBignumeric_literal_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BIGNUMERIC_SYMBOL() antlr.TerminalNode
	BIGDECIMAL_SYMBOL() antlr.TerminalNode

	// IsBignumeric_literal_prefixContext differentiates from other interfaces.
	IsBignumeric_literal_prefixContext()
}

type Bignumeric_literal_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBignumeric_literal_prefixContext() *Bignumeric_literal_prefixContext {
	var p = new(Bignumeric_literal_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_bignumeric_literal_prefix
	return p
}

func InitEmptyBignumeric_literal_prefixContext(p *Bignumeric_literal_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_bignumeric_literal_prefix
}

func (*Bignumeric_literal_prefixContext) IsBignumeric_literal_prefixContext() {}

func NewBignumeric_literal_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bignumeric_literal_prefixContext {
	var p = new(Bignumeric_literal_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_bignumeric_literal_prefix

	return p
}

func (s *Bignumeric_literal_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Bignumeric_literal_prefixContext) BIGNUMERIC_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBIGNUMERIC_SYMBOL, 0)
}

func (s *Bignumeric_literal_prefixContext) BIGDECIMAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBIGDECIMAL_SYMBOL, 0)
}

func (s *Bignumeric_literal_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bignumeric_literal_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bignumeric_literal_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBignumeric_literal_prefix(s)
	}
}

func (s *Bignumeric_literal_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBignumeric_literal_prefix(s)
	}
}

func (s *Bignumeric_literal_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBignumeric_literal_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Bignumeric_literal_prefix() (localctx IBignumeric_literal_prefixContext) {
	localctx = NewBignumeric_literal_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 676, GoogleSQLParserRULE_bignumeric_literal_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3860)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserBIGNUMERIC_SYMBOL || _la == GoogleSQLParserBIGDECIMAL_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INumeric_literalContext is an interface to support dynamic dispatch.
type INumeric_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Numeric_literal_prefix() INumeric_literal_prefixContext
	String_literal() IString_literalContext

	// IsNumeric_literalContext differentiates from other interfaces.
	IsNumeric_literalContext()
}

type Numeric_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumeric_literalContext() *Numeric_literalContext {
	var p = new(Numeric_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_numeric_literal
	return p
}

func InitEmptyNumeric_literalContext(p *Numeric_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_numeric_literal
}

func (*Numeric_literalContext) IsNumeric_literalContext() {}

func NewNumeric_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Numeric_literalContext {
	var p = new(Numeric_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_numeric_literal

	return p
}

func (s *Numeric_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Numeric_literalContext) Numeric_literal_prefix() INumeric_literal_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumeric_literal_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumeric_literal_prefixContext)
}

func (s *Numeric_literalContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Numeric_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Numeric_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Numeric_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterNumeric_literal(s)
	}
}

func (s *Numeric_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitNumeric_literal(s)
	}
}

func (s *Numeric_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitNumeric_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Numeric_literal() (localctx INumeric_literalContext) {
	localctx = NewNumeric_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 678, GoogleSQLParserRULE_numeric_literal)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3862)
		p.Numeric_literal_prefix()
	}
	{
		p.SetState(3863)
		p.string_literal(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INumeric_literal_prefixContext is an interface to support dynamic dispatch.
type INumeric_literal_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NUMERIC_SYMBOL() antlr.TerminalNode
	DECIMAL_SYMBOL() antlr.TerminalNode

	// IsNumeric_literal_prefixContext differentiates from other interfaces.
	IsNumeric_literal_prefixContext()
}

type Numeric_literal_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumeric_literal_prefixContext() *Numeric_literal_prefixContext {
	var p = new(Numeric_literal_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_numeric_literal_prefix
	return p
}

func InitEmptyNumeric_literal_prefixContext(p *Numeric_literal_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_numeric_literal_prefix
}

func (*Numeric_literal_prefixContext) IsNumeric_literal_prefixContext() {}

func NewNumeric_literal_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Numeric_literal_prefixContext {
	var p = new(Numeric_literal_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_numeric_literal_prefix

	return p
}

func (s *Numeric_literal_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Numeric_literal_prefixContext) NUMERIC_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNUMERIC_SYMBOL, 0)
}

func (s *Numeric_literal_prefixContext) DECIMAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDECIMAL_SYMBOL, 0)
}

func (s *Numeric_literal_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Numeric_literal_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Numeric_literal_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterNumeric_literal_prefix(s)
	}
}

func (s *Numeric_literal_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitNumeric_literal_prefix(s)
	}
}

func (s *Numeric_literal_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitNumeric_literal_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Numeric_literal_prefix() (localctx INumeric_literal_prefixContext) {
	localctx = NewNumeric_literal_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 680, GoogleSQLParserRULE_numeric_literal_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3865)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserNUMERIC_SYMBOL || _la == GoogleSQLParserDECIMAL_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInteger_literalContext is an interface to support dynamic dispatch.
type IInteger_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	INTEGER_LITERAL() antlr.TerminalNode

	// IsInteger_literalContext differentiates from other interfaces.
	IsInteger_literalContext()
}

type Integer_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInteger_literalContext() *Integer_literalContext {
	var p = new(Integer_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_integer_literal
	return p
}

func InitEmptyInteger_literalContext(p *Integer_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_integer_literal
}

func (*Integer_literalContext) IsInteger_literalContext() {}

func NewInteger_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Integer_literalContext {
	var p = new(Integer_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_integer_literal

	return p
}

func (s *Integer_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Integer_literalContext) INTEGER_LITERAL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINTEGER_LITERAL, 0)
}

func (s *Integer_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Integer_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Integer_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterInteger_literal(s)
	}
}

func (s *Integer_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitInteger_literal(s)
	}
}

func (s *Integer_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitInteger_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Integer_literal() (localctx IInteger_literalContext) {
	localctx = NewInteger_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 682, GoogleSQLParserRULE_integer_literal)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3867)
		p.Match(GoogleSQLParserINTEGER_LITERAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBytes_literalContext is an interface to support dynamic dispatch.
type IBytes_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Bytes_literal_component() IBytes_literal_componentContext
	Bytes_literal() IBytes_literalContext
	String_literal_component() IString_literal_componentContext

	// IsBytes_literalContext differentiates from other interfaces.
	IsBytes_literalContext()
}

type Bytes_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBytes_literalContext() *Bytes_literalContext {
	var p = new(Bytes_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_bytes_literal
	return p
}

func InitEmptyBytes_literalContext(p *Bytes_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_bytes_literal
}

func (*Bytes_literalContext) IsBytes_literalContext() {}

func NewBytes_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bytes_literalContext {
	var p = new(Bytes_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_bytes_literal

	return p
}

func (s *Bytes_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Bytes_literalContext) Bytes_literal_component() IBytes_literal_componentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBytes_literal_componentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBytes_literal_componentContext)
}

func (s *Bytes_literalContext) Bytes_literal() IBytes_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBytes_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBytes_literalContext)
}

func (s *Bytes_literalContext) String_literal_component() IString_literal_componentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literal_componentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literal_componentContext)
}

func (s *Bytes_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bytes_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bytes_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBytes_literal(s)
	}
}

func (s *Bytes_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBytes_literal(s)
	}
}

func (s *Bytes_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBytes_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Bytes_literal() (localctx IBytes_literalContext) {
	return p.bytes_literal(0)
}

func (p *GoogleSQLParser) bytes_literal(_p int) (localctx IBytes_literalContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewBytes_literalContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBytes_literalContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 684
	p.EnterRecursionRule(localctx, 684, GoogleSQLParserRULE_bytes_literal, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3870)
		p.Bytes_literal_component()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3882)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 403, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(3880)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 402, p.GetParserRuleContext()) {
			case 1:
				localctx = NewBytes_literalContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_bytes_literal)
				p.SetState(3872)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
					goto errorExit
				}
				{
					p.SetState(3873)
					p.Bytes_literal_component()
				}

				literalStopIndex, componentStartIndex := localctx.Bytes_literal().GetStop().GetStop(), localctx.Bytes_literal_component().GetStart().GetStart()
				if literalStopIndex+1 == componentStartIndex {
					p.NotifyErrorListeners("Syntax error: concatenated bytes literals must be separated by whitespace or comments.", nil, nil)
				}

			case 2:
				localctx = NewBytes_literalContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_bytes_literal)
				p.SetState(3876)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
					goto errorExit
				}
				{
					p.SetState(3877)
					p.String_literal_component()
				}
				p.NotifyErrorListeners("Syntax error: string and bytes literals cannot be concatenated.", nil,
					nil)

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(3884)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 403, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INull_literalContext is an interface to support dynamic dispatch.
type INull_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NULL_SYMBOL() antlr.TerminalNode

	// IsNull_literalContext differentiates from other interfaces.
	IsNull_literalContext()
}

type Null_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNull_literalContext() *Null_literalContext {
	var p = new(Null_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_null_literal
	return p
}

func InitEmptyNull_literalContext(p *Null_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_null_literal
}

func (*Null_literalContext) IsNull_literalContext() {}

func NewNull_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Null_literalContext {
	var p = new(Null_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_null_literal

	return p
}

func (s *Null_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Null_literalContext) NULL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNULL_SYMBOL, 0)
}

func (s *Null_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Null_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Null_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterNull_literal(s)
	}
}

func (s *Null_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitNull_literal(s)
	}
}

func (s *Null_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitNull_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Null_literal() (localctx INull_literalContext) {
	localctx = NewNull_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 686, GoogleSQLParserRULE_null_literal)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3885)
		p.Match(GoogleSQLParserNULL_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBoolean_literalContext is an interface to support dynamic dispatch.
type IBoolean_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TRUE_SYMBOL() antlr.TerminalNode
	FALSE_SYMBOL() antlr.TerminalNode

	// IsBoolean_literalContext differentiates from other interfaces.
	IsBoolean_literalContext()
}

type Boolean_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBoolean_literalContext() *Boolean_literalContext {
	var p = new(Boolean_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_boolean_literal
	return p
}

func InitEmptyBoolean_literalContext(p *Boolean_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_boolean_literal
}

func (*Boolean_literalContext) IsBoolean_literalContext() {}

func NewBoolean_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Boolean_literalContext {
	var p = new(Boolean_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_boolean_literal

	return p
}

func (s *Boolean_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Boolean_literalContext) TRUE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTRUE_SYMBOL, 0)
}

func (s *Boolean_literalContext) FALSE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFALSE_SYMBOL, 0)
}

func (s *Boolean_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Boolean_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Boolean_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBoolean_literal(s)
	}
}

func (s *Boolean_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBoolean_literal(s)
	}
}

func (s *Boolean_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBoolean_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Boolean_literal() (localctx IBoolean_literalContext) {
	localctx = NewBoolean_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 688, GoogleSQLParserRULE_boolean_literal)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3887)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserTRUE_SYMBOL || _la == GoogleSQLParserFALSE_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IString_literalContext is an interface to support dynamic dispatch.
type IString_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	String_literal_component() IString_literal_componentContext
	String_literal() IString_literalContext
	Bytes_literal_component() IBytes_literal_componentContext

	// IsString_literalContext differentiates from other interfaces.
	IsString_literalContext()
}

type String_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyString_literalContext() *String_literalContext {
	var p = new(String_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_string_literal
	return p
}

func InitEmptyString_literalContext(p *String_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_string_literal
}

func (*String_literalContext) IsString_literalContext() {}

func NewString_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *String_literalContext {
	var p = new(String_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_string_literal

	return p
}

func (s *String_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *String_literalContext) String_literal_component() IString_literal_componentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literal_componentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literal_componentContext)
}

func (s *String_literalContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *String_literalContext) Bytes_literal_component() IBytes_literal_componentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBytes_literal_componentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBytes_literal_componentContext)
}

func (s *String_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *String_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *String_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterString_literal(s)
	}
}

func (s *String_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitString_literal(s)
	}
}

func (s *String_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitString_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) String_literal() (localctx IString_literalContext) {
	return p.string_literal(0)
}

func (p *GoogleSQLParser) string_literal(_p int) (localctx IString_literalContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewString_literalContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IString_literalContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 690
	p.EnterRecursionRule(localctx, 690, GoogleSQLParserRULE_string_literal, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3890)
		p.String_literal_component()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3902)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 405, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(3900)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 404, p.GetParserRuleContext()) {
			case 1:
				localctx = NewString_literalContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_string_literal)
				p.SetState(3892)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
					goto errorExit
				}
				{
					p.SetState(3893)
					p.String_literal_component()
				}

				literalStopIndex, componentStartIndex := localctx.String_literal().GetStop().GetStop(), localctx.String_literal_component().GetStart().GetStart()
				if literalStopIndex+1 == componentStartIndex {
					p.NotifyErrorListeners("Syntax error: concatenated string literals must be separated by whitespace or comments.", nil, nil)
				}

			case 2:
				localctx = NewString_literalContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_string_literal)
				p.SetState(3896)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
					goto errorExit
				}
				{
					p.SetState(3897)
					p.Bytes_literal_component()
				}
				p.NotifyErrorListeners("Syntax error: string and bytes literals cannot be concatenated.", nil, nil)

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(3904)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 405, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IString_literal_componentContext is an interface to support dynamic dispatch.
type IString_literal_componentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	STRING_LITERAL() antlr.TerminalNode

	// IsString_literal_componentContext differentiates from other interfaces.
	IsString_literal_componentContext()
}

type String_literal_componentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyString_literal_componentContext() *String_literal_componentContext {
	var p = new(String_literal_componentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_string_literal_component
	return p
}

func InitEmptyString_literal_componentContext(p *String_literal_componentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_string_literal_component
}

func (*String_literal_componentContext) IsString_literal_componentContext() {}

func NewString_literal_componentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *String_literal_componentContext {
	var p = new(String_literal_componentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_string_literal_component

	return p
}

func (s *String_literal_componentContext) GetParser() antlr.Parser { return s.parser }

func (s *String_literal_componentContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTRING_LITERAL, 0)
}

func (s *String_literal_componentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *String_literal_componentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *String_literal_componentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterString_literal_component(s)
	}
}

func (s *String_literal_componentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitString_literal_component(s)
	}
}

func (s *String_literal_componentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitString_literal_component(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) String_literal_component() (localctx IString_literal_componentContext) {
	localctx = NewString_literal_componentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 692, GoogleSQLParserRULE_string_literal_component)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3905)
		p.Match(GoogleSQLParserSTRING_LITERAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBytes_literal_componentContext is an interface to support dynamic dispatch.
type IBytes_literal_componentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BYTES_LITERAL() antlr.TerminalNode

	// IsBytes_literal_componentContext differentiates from other interfaces.
	IsBytes_literal_componentContext()
}

type Bytes_literal_componentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBytes_literal_componentContext() *Bytes_literal_componentContext {
	var p = new(Bytes_literal_componentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_bytes_literal_component
	return p
}

func InitEmptyBytes_literal_componentContext(p *Bytes_literal_componentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_bytes_literal_component
}

func (*Bytes_literal_componentContext) IsBytes_literal_componentContext() {}

func NewBytes_literal_componentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bytes_literal_componentContext {
	var p = new(Bytes_literal_componentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_bytes_literal_component

	return p
}

func (s *Bytes_literal_componentContext) GetParser() antlr.Parser { return s.parser }

func (s *Bytes_literal_componentContext) BYTES_LITERAL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBYTES_LITERAL, 0)
}

func (s *Bytes_literal_componentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bytes_literal_componentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bytes_literal_componentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBytes_literal_component(s)
	}
}

func (s *Bytes_literal_componentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBytes_literal_component(s)
	}
}

func (s *Bytes_literal_componentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBytes_literal_component(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Bytes_literal_component() (localctx IBytes_literal_componentContext) {
	localctx = NewBytes_literal_componentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 694, GoogleSQLParserRULE_bytes_literal_component)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3907)
		p.Match(GoogleSQLParserBYTES_LITERAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

func (p *GoogleSQLParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 84:
		var t *Query_set_operation_prefixContext = nil
		if localctx != nil {
			t = localctx.(*Query_set_operation_prefixContext)
		}
		return p.Query_set_operation_prefix_Sempred(t, predIndex)

	case 120:
		var t *Table_primaryContext = nil
		if localctx != nil {
			t = localctx.(*Table_primaryContext)
		}
		return p.Table_primary_Sempred(t, predIndex)

	case 134:
		var t *Row_pattern_exprContext = nil
		if localctx != nil {
			t = localctx.(*Row_pattern_exprContext)
		}
		return p.Row_pattern_expr_Sempred(t, predIndex)

	case 135:
		var t *Row_pattern_concatenationContext = nil
		if localctx != nil {
			t = localctx.(*Row_pattern_concatenationContext)
		}
		return p.Row_pattern_concatenation_Sempred(t, predIndex)

	case 153:
		var t *Dashed_path_expressionContext = nil
		if localctx != nil {
			t = localctx.(*Dashed_path_expressionContext)
		}
		return p.Dashed_path_expression_Sempred(t, predIndex)

	case 154:
		var t *Dashed_identifierContext = nil
		if localctx != nil {
			t = localctx.(*Dashed_identifierContext)
		}
		return p.Dashed_identifier_Sempred(t, predIndex)

	case 155:
		var t *Slashed_identifierContext = nil
		if localctx != nil {
			t = localctx.(*Slashed_identifierContext)
		}
		return p.Slashed_identifier_Sempred(t, predIndex)

	case 175:
		var t *Unpivot_in_item_list_prefixContext = nil
		if localctx != nil {
			t = localctx.(*Unpivot_in_item_list_prefixContext)
		}
		return p.Unpivot_in_item_list_prefix_Sempred(t, predIndex)

	case 199:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	case 200:
		var t *Expression_higher_prec_than_andContext = nil
		if localctx != nil {
			t = localctx.(*Expression_higher_prec_than_andContext)
		}
		return p.Expression_higher_prec_than_and_Sempred(t, predIndex)

	case 276:
		var t *Generalized_path_expressionContext = nil
		if localctx != nil {
			t = localctx.(*Generalized_path_expressionContext)
		}
		return p.Generalized_path_expression_Sempred(t, predIndex)

	case 294:
		var t *Braced_constructor_prefixContext = nil
		if localctx != nil {
			t = localctx.(*Braced_constructor_prefixContext)
		}
		return p.Braced_constructor_prefix_Sempred(t, predIndex)

	case 342:
		var t *Bytes_literalContext = nil
		if localctx != nil {
			t = localctx.(*Bytes_literalContext)
		}
		return p.Bytes_literal_Sempred(t, predIndex)

	case 345:
		var t *String_literalContext = nil
		if localctx != nil {
			t = localctx.(*String_literalContext)
		}
		return p.String_literal_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *GoogleSQLParser) Query_set_operation_prefix_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) Table_primary_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) Row_pattern_expr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 3:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) Row_pattern_concatenation_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 4:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) Dashed_path_expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 5:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) Dashed_identifier_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 6:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) Slashed_identifier_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 9:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) Unpivot_in_item_list_prefix_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 11:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 12:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) Expression_higher_prec_than_and_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 13:
		return p.Precpred(p.GetParserRuleContext(), 20)

	case 14:
		return p.Precpred(p.GetParserRuleContext(), 19)

	case 15:
		return p.Precpred(p.GetParserRuleContext(), 16)

	case 16:
		return p.Precpred(p.GetParserRuleContext(), 11)

	case 17:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 18:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 19:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 20:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 21:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 22:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 23:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 24:
		return p.Precpred(p.GetParserRuleContext(), 26)

	case 25:
		return p.Precpred(p.GetParserRuleContext(), 25)

	case 26:
		return p.Precpred(p.GetParserRuleContext(), 24)

	case 27:
		return p.Precpred(p.GetParserRuleContext(), 22)

	case 28:
		return p.Precpred(p.GetParserRuleContext(), 21)

	case 29:
		return p.Precpred(p.GetParserRuleContext(), 18)

	case 30:
		return p.Precpred(p.GetParserRuleContext(), 17)

	case 31:
		return p.Precpred(p.GetParserRuleContext(), 15)

	case 32:
		return p.Precpred(p.GetParserRuleContext(), 14)

	case 33:
		return p.Precpred(p.GetParserRuleContext(), 13)

	case 34:
		return p.Precpred(p.GetParserRuleContext(), 12)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) Generalized_path_expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 35:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 36:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 37:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) Braced_constructor_prefix_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 38:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 39:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 40:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) Bytes_literal_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 41:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 42:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) String_literal_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 43:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 44:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
