// Code generated from GoogleSQLParser.g4 by ANTLR 4.13.2. DO NOT EDIT.

package parser // GoogleSQLParser
import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr4-go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type GoogleSQLParser struct {
	*antlr.BaseParser
}

var GoogleSQLParserParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func googlesqlparserParserInit() {
	staticData := &GoogleSQLParserParserStaticData
	staticData.LiteralNames = []string{
		"", "'='", "'!='", "'<>'", "'<'", "'<='", "'>'", "'>='", "'<<'", "'>>'",
		"'+'", "'-'", "'*'", "'/'", "'~'", "','", "'.'", "'{'", "'}'", "'('",
		"')'", "'['", "']'", "'|'", "':'", "';'", "'''", "'''''", "'\"'", "'\"\"\"'",
		"'`'", "'?'", "'@'", "'@@'", "'=>'", "'->'", "'+='", "'-='", "'|>'",
		"'^'", "'&'", "'||'", "", "", "", "", "", "", "", "", "", "", "", "",
		"'ARRAY'", "'ALL'", "'AS'", "'ASC'", "'BY'", "'CROSS'", "'JOIN'", "'DELTA'",
		"'DESC'", "'DIFFERENTIAL_PRIVACY'", "'DISTINCT'", "'EPSILON'", "'EXCEPT'",
		"'EXCLUDE'", "'FOR'", "'FROM'", "'FULL'", "'IN'", "'INCLUDE'", "'INNER'",
		"'INTERSECT'", "'LEFT'", "'LIMIT'", "'MAX_GROUPS_CONTRIBUTED'", "'NULL'",
		"'NULLS'", "'OF'", "'OFFSET'", "'ON'", "'OPTIONS'", "'ORDER'", "'OUTER'",
		"'PERCENT'", "'PIVOT'", "'PRIVACY_UNIT_COLUMN'", "'RIGHT'", "'RECURSIVE'",
		"'REPLACE'", "'UNPIVOT'", "'SELECT'", "'STRUCT'", "'SYSTEM'", "'SYSTEM_TIME'",
		"'TABLESAMPLE'", "'UNION'", "'UNNEST'", "'USING'", "'VALUE'", "'WITH'",
		"'TRUE'", "'FALSE'", "'NUMERIC'", "'DECIMAL'", "'BIGNUMERIC'", "'BIGDECIMAL'",
		"'NOT'", "'AND'", "'OR'", "'JSON'", "'DATE'", "'TIME'", "'DATETIME'",
		"'TIMESTAMP'", "'RANGE'", "'INTERVAL'", "'SIMPLE'", "'ABORT'", "'ACCESS'",
		"'ACTION'", "'AGGREGATE'", "'ADD'", "'ALTER'", "'ALWAYS'", "'ANALYZE'",
		"'APPROX'", "'ARE'", "'ASSERT'", "'BATCH'", "'BEGIN'", "'BREAK'", "'CALL'",
		"'CASCADE'", "'CHECK'", "'CLAMPED'", "'CLONE'", "'COPY'", "'CLUSTER'",
		"'COLUMN'", "'COLUMNS'", "'COMMIT'", "'CONNECTION'", "'CONSTANT'", "'CONSTRAINT'",
		"'CONTINUE'", "'CORRESPONDING'", "'CYCLE'", "'DATA'", "'DATABASE'",
		"'DECLARE'", "'DEFINER'", "'DELETE'", "'DELETION'", "'DEPTH'", "'DESCRIBE'",
		"'DETERMINISTIC'", "'DO'", "'DROP'", "'ELSEIF'", "'ENFORCED'", "'ERROR'",
		"'EXCEPTION'", "'EXECUTE'", "'EXPLAIN'", "'EXPORT'", "'EXTEND'", "'EXTERNAL'",
		"'FILES'", "'FILTER'", "'FILL'", "'FIRST'", "'FOREIGN'", "'FORMAT'",
		"'FUNCTION'", "'GENERATED'", "'GRANT'", "'GROUP_ROWS'", "'HIDDEN'",
		"'IDENTITY'", "'IMMEDIATE'", "'IMMUTABLE'", "'IMPORT'", "'INCREMENT'",
		"'INDEX'", "'INOUT'", "'INPUT'", "'INSERT'", "'INVOKER'", "'ISOLATION'",
		"'ITERATE'", "'KEY'", "'LANGUAGE'", "'LAST'", "'LEAVE'", "'LEVEL'",
		"'LOAD'", "'LOOP'", "'MACRO'", "'MAP'", "'MATCH'", "'KW_MATCH_RECOGNIZE_NONRESERVED'",
		"'MATCHED'", "'MATERIALIZED'", "'MAX'", "'MAXVALUE'", "'MEASURES'",
		"'MESSAGE'", "'METADATA'", "'MIN'", "'MINVALUE'", "'MODEL'", "'MODULE'",
		"'ONLY'", "'OUT'", "'OUTPUT'", "'OVERWRITE'", "'PARTITIONS'", "'PATTERN'",
		"'POLICIES'", "'POLICY'", "'PRIMARY'", "'PRIVATE'", "'PRIVILEGE'", "'PRIVILEGES'",
		"'PROCEDURE'", "'PROJECT'", "'PUBLIC'", "'RAISE'", "'READ'", "'REFERENCES'",
		"'REMOTE'", "'REMOVE'", "'RENAME'", "'REPEAT'", "'REPEATABLE'", "'REPLACE_FIELDS'",
		"'REPLICA'", "'REPORT'", "'RESTRICT'", "'RESTRICTION'", "'RETURNS'",
		"'RETURN'", "'REVOKE'", "'ROLLBACK'", "'ROW'", "'RUN'", "'SAFE_CAST'",
		"'SCHEMA'", "'SEARCH'", "'SECURITY'", "'SEQUENCE'", "'SETS'", "'SET'",
		"'SHOW'", "'SNAPSHOT'", "'SOURCE'", "'SQL'", "'STABLE'", "'START'",
		"'STATIC_DESCRIBE'", "'STORED'", "'STORING'", "'STRICT'", "'TABLE'",
		"'TABLES'", "'TARGET'", "'TEMP'", "'TEMPORARY'", "'TRANSACTION'", "'TRANSFORM'",
		"'TRUNCATE'", "'TYPE'", "'UNDROP'", "'UNIQUE'", "'UNKNOWN'", "'UNTIL'",
		"'UPDATE'", "'VALUES'", "'VECTOR'", "'VIEW'", "'VIEWS'", "'VOLATILE'",
		"'WEIGHT'", "'WHILE'", "'WRITE'", "'ZONE'", "'DESCRIPTOR'", "'INTERLEAVE'",
		"'NULL_FILTERED'", "'PARENT'", "'NEW'", "'END'", "'CASE'", "'WHEN'",
		"'THEN'", "'ELSE'", "'CAST'", "'EXTRACT'", "'COLLATE'", "'IF'", "'GROUPING'",
		"'HAVING'", "'GROUP'", "'ROLLUP'", "'CUBE'", "'HASH'", "'PROTO'", "'PARTITION'",
		"'IGNORE'", "'RESPECT'", "'ROWS'", "'OVER'", "'BETWEEN'", "'UNBOUNDED'",
		"'CURRENT'", "'PRECEDING'", "'FOLLOWING'", "'NATURAL'", "'QUALIFY'",
		"'DEFAULT'", "'SLASH'", "'MATCH_RECOGNIZE'", "'DEFINE'", "'LOOKUP'",
		"'WHERE'", "'WINDOW'", "'TO'", "'EXISTS'", "'ANY'", "'SOME'", "'LIKE'",
		"'IS'", "'NO'", "'INTO'", "'ASSERT_ROWS_MODIFIED'", "'CONFLICT'", "'NOTHING'",
		"'MERGE'", "'CREATE'", "'ENUM'", "'DESTINATION'", "'PROPERTY'", "'GRAPH'",
		"'NODE'", "'PROPERTIES'", "'LABEL'", "'EDGE'",
	}
	staticData.SymbolicNames = []string{
		"", "EQUAL_OPERATOR", "NOT_EQUAL_OPERATOR", "NOT_EQUAL2_OPERATOR", "LT_OPERATOR",
		"LE_OPERATOR", "GT_OPERATOR", "GE_OPERATOR", "KL_OPERATOR", "KR_OPERATOR",
		"PLUS_OPERATOR", "MINUS_OPERATOR", "MULTIPLY_OPERATOR", "DIVIDE_OPERATOR",
		"BITWISE_NOT_OPERATOR", "COMMA_SYMBOL", "DOT_SYMBOL", "LC_BRACKET_SYMBOL",
		"RC_BRACKET_SYMBOL", "LR_BRACKET_SYMBOL", "RR_BRACKET_SYMBOL", "LS_BRACKET_SYMBOL",
		"RS_BRACKET_SYMBOL", "STROKE_SYMBOL", "COLON_SYMBOL", "SEMI_SYMBOL",
		"SINGLE_QUOTE_SYMBOL", "SINGLE_QUOTE_3_SYMBOL", "DOUBLE_QUOTE_SYMBOL",
		"DOUBLE_QUOTE_3_SYMBOL", "BACKQUOTE_SYMBOL", "QUESTION_SYMBOL", "AT_SYMBOL",
		"ATAT_SYMBOL", "EQUAL_GT_BRACKET_SYMBOL", "SUB_GT_BRACKET_SYMBOL", "PLUS_EQUAL_SYMBOL",
		"SUB_EQUAL_SYMBOL", "PIPE_SYMBOL", "CIRCUMFLEX_SYMBOL", "BIT_AND_SYMBOL",
		"BOOL_OR_SYMBOL", "STRING_LITERAL", "BYTES_LITERAL", "UNCLOSED_STRING_LITERAL",
		"UNCLOSED_TRIPLE_QUOTED_STRING_LITERAL", "UNCLOSED_RAW_STRING_LITERAL",
		"UNCLOSED_TRIPLE_QUOTED_RAW_STRING_LITERAL", "UNCLOSED_BYTES_LITERAL",
		"UNCLOSED_TRIPLE_QUOTED_BYTES_LITERAL", "UNCLOSED_RAW_BYTES_LITERAL",
		"UNCLOSED_TRIPLE_QUOTED_RAW_BYTES_LITERAL", "FLOATING_POINT_LITERAL",
		"INTEGER_LITERAL", "ARRAY_SYMBOL", "ALL_SYMBOL", "AS_SYMBOL", "ASC_SYMBOL",
		"BY_SYMBOL", "CROSS_SYMBOL", "JOIN_SYMBOL", "DELTA_SYMBOL", "DESC_SYMBOL",
		"DIFFERENTIAL_PRIVACY_SYMBOL", "DISTINCT_SYMBOL", "EPSILON_SYMBOL",
		"EXCEPT_SYMBOL", "EXCLUDE_SYMBOL", "FOR_SYMBOL", "FROM_SYMBOL", "FULL_SYMBOL",
		"IN_SYMBOL", "INCLUDE_SYMBOL", "INNER_SYMBOL", "INTERSECT_SYMBOL", "LEFT_SYMBOL",
		"LIMIT_SYMBOL", "MAX_GROUPS_CONTRIBUTED_SYMBOL", "NULL_SYMBOL", "NULLS_SYMBOL",
		"OF_SYMBOL", "OFFSET_SYMBOL", "ON_SYMBOL", "OPTIONS_SYMBOL", "ORDER_SYMBOL",
		"OUTER_SYMBOL", "PERCENT_SYMBOL", "PIVOT_SYMBOL", "PRIVACY_UNIT_COLUMN_SYMBOL",
		"RIGHT_SYMBOL", "RECURSIVE_SYMBOL", "REPLACE_SYMBOL", "UNPIVOT_SYMBOL",
		"SELECT_SYMBOL", "STRUCT_SYMBOL", "SYSTEM_SYMBOL", "SYSTEM_TIME_SYMBOL",
		"TABLESAMPLE_SYMBOL", "UNION_SYMBOL", "UNNEST_SYMBOL", "USING_SYMBOL",
		"VALUE_SYMBOL", "WITH_SYMBOL", "TRUE_SYMBOL", "FALSE_SYMBOL", "NUMERIC_SYMBOL",
		"DECIMAL_SYMBOL", "BIGNUMERIC_SYMBOL", "BIGDECIMAL_SYMBOL", "NOT_SYMBOL",
		"AND_SYMBOL", "OR_SYMBOL", "JSON_SYMBOL", "DATE_SYMBOL", "TIME_SYMBOL",
		"DATETIME_SYMBOL", "TIMESTAMP_SYMBOL", "RANGE_SYMBOL", "INTERVAL_SYMBOL",
		"SIMPLE_SYMBOL", "ABORT_SYMBOL", "ACCESS_SYMBOL", "ACTION_SYMBOL", "AGGREGATE_SYMBOL",
		"ADD_SYMBOL", "ALTER_SYMBOL", "ALWAYS_SYMBOL", "ANALYZE_SYMBOL", "APPROX_SYMBOL",
		"ARE_SYMBOL", "ASSERT_SYMBOL", "BATCH_SYMBOL", "BEGIN_SYMBOL", "BREAK_SYMBOL",
		"CALL_SYMBOL", "CASCADE_SYMBOL", "CHECK_SYMBOL", "CLAMPED_SYMBOL", "CLONE_SYMBOL",
		"COPY_SYMBOL", "CLUSTER_SYMBOL", "COLUMN_SYMBOL", "COLUMNS_SYMBOL",
		"COMMIT_SYMBOL", "CONNECTION_SYMBOL", "CONSTANT_SYMBOL", "CONSTRAINT_SYMBOL",
		"CONTINUE_SYMBOL", "CORRESPONDING_SYMBOL", "CYCLE_SYMBOL", "DATA_SYMBOL",
		"DATABASE_SYMBOL", "DECLARE_SYMBOL", "DEFINER_SYMBOL", "DELETE_SYMBOL",
		"DELETION_SYMBOL", "DEPTH_SYMBOL", "DESCRIBE_SYMBOL", "DETERMINISTIC_SYMBOL",
		"DO_SYMBOL", "DROP_SYMBOL", "ELSEIF_SYMBOL", "ENFORCED_SYMBOL", "ERROR_SYMBOL",
		"EXCEPTION_SYMBOL", "EXECUTE_SYMBOL", "EXPLAIN_SYMBOL", "EXPORT_SYMBOL",
		"EXTEND_SYMBOL", "EXTERNAL_SYMBOL", "FILES_SYMBOL", "FILTER_SYMBOL",
		"FILL_SYMBOL", "FIRST_SYMBOL", "FOREIGN_SYMBOL", "FORMAT_SYMBOL", "FUNCTION_SYMBOL",
		"GENERATED_SYMBOL", "GRANT_SYMBOL", "GROUP_ROWS_SYMBOL", "HIDDEN_SYMBOL",
		"IDENTITY_SYMBOL", "IMMEDIATE_SYMBOL", "IMMUTABLE_SYMBOL", "IMPORT_SYMBOL",
		"INCREMENT_SYMBOL", "INDEX_SYMBOL", "INOUT_SYMBOL", "INPUT_SYMBOL",
		"INSERT_SYMBOL", "INVOKER_SYMBOL", "ISOLATION_SYMBOL", "ITERATE_SYMBOL",
		"KEY_SYMBOL", "LANGUAGE_SYMBOL", "LAST_SYMBOL", "LEAVE_SYMBOL", "LEVEL_SYMBOL",
		"LOAD_SYMBOL", "LOOP_SYMBOL", "MACRO_SYMBOL", "MAP_SYMBOL", "MATCH_SYMBOL",
		"KW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL", "MATCHED_SYMBOL", "MATERIALIZED_SYMBOL",
		"MAX_SYMBOL", "MAXVALUE_SYMBOL", "MEASURES_SYMBOL", "MESSAGE_SYMBOL",
		"METADATA_SYMBOL", "MIN_SYMBOL", "MINVALUE_SYMBOL", "MODEL_SYMBOL",
		"MODULE_SYMBOL", "ONLY_SYMBOL", "OUT_SYMBOL", "OUTPUT_SYMBOL", "OVERWRITE_SYMBOL",
		"PARTITIONS_SYMBOL", "PATTERN_SYMBOL", "POLICIES_SYMBOL", "POLICY_SYMBOL",
		"PRIMARY_SYMBOL", "PRIVATE_SYMBOL", "PRIVILEGE_SYMBOL", "PRIVILEGES_SYMBOL",
		"PROCEDURE_SYMBOL", "PROJECT_SYMBOL", "PUBLIC_SYMBOL", "RAISE_SYMBOL",
		"READ_SYMBOL", "REFERENCES_SYMBOL", "REMOTE_SYMBOL", "REMOVE_SYMBOL",
		"RENAME_SYMBOL", "REPEAT_SYMBOL", "REPEATABLE_SYMBOL", "REPLACE_FIELDS_SYMBOL",
		"REPLICA_SYMBOL", "REPORT_SYMBOL", "RESTRICT_SYMBOL", "RESTRICTION_SYMBOL",
		"RETURNS_SYMBOL", "RETURN_SYMBOL", "REVOKE_SYMBOL", "ROLLBACK_SYMBOL",
		"ROW_SYMBOL", "RUN_SYMBOL", "SAFE_CAST_SYMBOL", "SCHEMA_SYMBOL", "SEARCH_SYMBOL",
		"SECURITY_SYMBOL", "SEQUENCE_SYMBOL", "SETS_SYMBOL", "SET_SYMBOL", "SHOW_SYMBOL",
		"SNAPSHOT_SYMBOL", "SOURCE_SYMBOL", "SQL_SYMBOL", "STABLE_SYMBOL", "START_SYMBOL",
		"STATIC_DESCRIBE_SYMBOL", "STORED_SYMBOL", "STORING_SYMBOL", "STRICT_SYMBOL",
		"TABLE_SYMBOL", "TABLES_SYMBOL", "TARGET_SYMBOL", "TEMP_SYMBOL", "TEMPORARY_SYMBOL",
		"TRANSACTION_SYMBOL", "TRANSFORM_SYMBOL", "TRUNCATE_SYMBOL", "TYPE_SYMBOL",
		"UNDROP_SYMBOL", "UNIQUE_SYMBOL", "UNKNOWN_SYMBOL", "UNTIL_SYMBOL",
		"UPDATE_SYMBOL", "VALUES_SYMBOL", "VECTOR_SYMBOL", "VIEW_SYMBOL", "VIEWS_SYMBOL",
		"VOLATILE_SYMBOL", "WEIGHT_SYMBOL", "WHILE_SYMBOL", "WRITE_SYMBOL",
		"ZONE_SYMBOL", "DESCRIPTOR_SYMBOL", "INTERLEAVE_SYMBOL", "NULL_FILTERED_SYMBOL",
		"PARENT_SYMBOL", "NEW_SYMBOL", "END_SYMBOL", "CASE_SYMBOL", "WHEN_SYMBOL",
		"THEN_SYMBOL", "ELSE_SYMBOL", "CAST_SYMBOL", "EXTRACT_SYMBOL", "COLLATE_SYMBOL",
		"IF_SYMBOL", "GROUPING_SYMBOL", "HAVING_SYMBOL", "GROUP_SYMBOL", "ROLLUP_SYMBOL",
		"CUBE_SYMBOL", "HASH_SYMBOL", "PROTO_SYMBOL", "PARTITION_SYMBOL", "IGNORE_SYMBOL",
		"RESPECT_SYMBOL", "ROWS_SYMBOL", "OVER_SYMBOL", "BETWEEN_SYMBOL", "UNBOUNDED_SYMBOL",
		"CURRENT_SYMBOL", "PRECEDING_SYMBOL", "FOLLOWING_SYMBOL", "NATURAL_SYMBOL",
		"QUALIFY_SYMBOL", "DEFAULT_SYMBOL", "SLASH_SYMBOL", "MATCH_RECOGNIZE_SYMBOL",
		"DEFINE_SYMBOL", "LOOKUP_SYMBOL", "WHERE_SYMBOL", "WINDOW_SYMBOL", "TO_SYMBOL",
		"EXISTS_SYMBOL", "ANY_SYMBOL", "SOME_SYMBOL", "LIKE_SYMBOL", "IS_SYMBOL",
		"NO_SYMBOL", "INTO_SYMBOL", "ASSERT_ROWS_MODIFIED_SYMBOL", "CONFLICT_SYMBOL",
		"NOTHING_SYMBOL", "MERGE_SYMBOL", "CREATE_SYMBOL", "ENUM_SYMBOL", "DESTINATION_SYMBOL",
		"PROPERTY_SYMBOL", "GRAPH_SYMBOL", "NODE_SYMBOL", "PROPERTIES_SYMBOL",
		"LABEL_SYMBOL", "EDGE_SYMBOL", "IDENTIFIER", "UNCLOSED_ESCAPED_IDENTIFIER",
		"WHITESPACE", "COMMENT",
	}
	staticData.RuleNames = []string{
		"root", "stmts", "unterminated_sql_statement", "sql_statement_body",
		"export_metadata_statement", "export_model_statement", "export_data_statement",
		"export_data_no_query", "explain_statement", "execute_immediate", "opt_execute_into_clause",
		"opt_execute_using_clause", "execute_using_argument_list", "execute_using_argument",
		"describe_statement", "describe_info", "opt_from_path_expression", "describe_keyword",
		"define_table_statement", "create_entity_statement", "opt_generic_entity_body",
		"create_view_statement", "query_or_replica_source", "column_with_options_list",
		"column_with_options", "create_table_statement", "opt_ttl_clause", "opt_copy_table",
		"copy_data_source", "opt_clone_table", "opt_spanner_table_options",
		"opt_spanner_interleave_in_parent_clause", "spanner_primary_key", "create_table_function_statement",
		"opt_as_query_or_string", "unordered_language_options", "opt_function_parameters",
		"create_snapshot_statement", "create_external_schema_statement", "create_schema_statement",
		"create_property_graph_statement", "opt_edge_table_clause", "element_table_list",
		"element_table_definition", "opt_label_and_properties_clause", "label_and_properties_list",
		"label_and_properties", "properties_clause", "derived_property_list",
		"derived_property", "opt_except_column_list", "properties_all_columns",
		"opt_dest_node_table_clause", "opt_source_node_table_clause", "opt_key_clause",
		"create_model_statement", "opt_input_output_clause", "opt_transform_clause",
		"opt_as_query_or_aliased_query_list", "aliased_query_list", "as_query",
		"create_external_table_function_statement", "create_external_table_statement",
		"opt_default_collate_clause", "opt_like_path_expression", "create_row_access_policy_statement",
		"filter_using_clause", "create_row_access_policy_grant_to_clause", "create_privilege_restriction_statement",
		"restrict_to_clause", "possibly_empty_grantee_list", "create_index_statement",
		"opt_create_index_statement_suffix", "spanner_index_interleave_clause",
		"index_storing_list", "index_storing_expression_list", "index_order_by_and_options",
		"index_all_columns", "opt_with_column_options", "all_column_column_options",
		"column_ordering_and_options_expr", "index_unnest_expression_list",
		"unnest_expression_with_opt_alias_and_offset", "on_path_expression",
		"index_type", "opt_spanner_null_filtered", "create_procedure_statement",
		"begin_end_block_or_language_as_code", "begin_end_block", "opt_exception_handler",
		"statement_list", "unterminated_non_empty_statement_list", "unterminated_statement",
		"unterminated_script_statement", "label", "unterminated_unlabeled_script_statement",
		"for_in_statement", "repeat_statement", "until_clause", "loop_statement",
		"while_statement", "raise_statement", "return_statement", "continue_statement",
		"variable_declaration", "break_statement", "case_statement", "when_then_clauses",
		"if_statement", "elseif_clauses", "opt_else", "opt_as_code", "opt_external_security_clause",
		"external_security_clause_kind", "procedure_parameters", "procedure_parameter",
		"procedure_parameter_termination", "opt_procedure_parameter_mode", "create_function_statement",
		"opt_determinism_level", "opt_sql_security_clause", "sql_security_clause_kind",
		"as_sql_function_body_or_string", "sql_function_body", "unordered_options_body",
		"opt_language_or_remote_with_connection", "language", "remote_with_connection_clause",
		"with_connection_clause", "opt_function_returns", "opt_returns", "function_declaration",
		"function_parameters", "function_parameter", "opt_not_aggregate", "opt_default_expression",
		"type_or_tvf_schema", "tvf_schema", "tvf_schema_column", "templated_parameter_type",
		"templated_parameter_kind", "opt_aggregate", "create_database_statement",
		"create_connection_statement", "create_constant_statement", "opt_or_replace",
		"opt_create_scope", "run_batch_statement", "abort_batch_statement",
		"start_batch_statement", "rollback_statement", "commit_statement", "set_statement",
		"identifier_list", "begin_statement", "begin_transaction_keywords",
		"transaction_mode_list", "transaction_mode", "truncate_statement", "merge_statement",
		"merge_source", "merge_when_clause", "merge_action", "merge_insert_value_list_or_source_row",
		"by_target", "opt_and_expression", "statement_level_hint", "query_statement",
		"dml_statement", "update_statement", "delete_statement", "insert_statement",
		"on_conflict_clause", "opt_where_expression", "opt_conflict_target",
		"update_item_list", "update_item", "update_set_value", "nested_dml_statement",
		"insert_values_list_or_table_clause", "table_clause_unreversed", "table_clause_no_keyword",
		"opt_returning_clause", "opt_assert_rows_modified", "insert_values_or_query",
		"insert_values_list", "insert_values_row", "expression_or_default",
		"insert_statement_prefix", "maybe_dashed_generalized_path_expression",
		"opt_into", "opt_or_ignore_replace_update", "alter_statement", "analyze_statement",
		"assert_statement", "aux_load_data_statement", "clone_data_statement",
		"clone_data_source_list", "clone_data_source", "opt_external_table_with_clauses",
		"with_partition_columns_clause", "aux_load_data_from_files_options_list",
		"cluster_by_clause_prefix_no_hint", "load_data_partitions_clause", "maybe_dashed_path_expression_with_scope",
		"table_element_list", "table_element", "table_constraint_definition",
		"append_or_overwrite", "opt_description", "table_and_column_info_list",
		"table_and_column_info", "row_access_policy_alter_action_list", "row_access_policy_alter_action",
		"grant_to_clause", "grantee_list", "privilege_list", "privilege", "path_expression_list_with_parens",
		"privilege_name", "generic_entity_type", "generic_entity_type_unchecked",
		"schema_object_kind", "alter_action_list", "alter_action", "spanner_set_on_delete_action",
		"spanner_alter_column_action", "spanner_generated_or_default", "generic_sub_entity_type",
		"sub_entity_type_identifier", "fill_using_expression", "column_position",
		"table_column_definition", "column_attributes", "column_attribute",
		"primary_key_column_attribute", "foreign_key_column_attribute", "hidden_column_attribute",
		"opt_constraint_identity", "table_column_schema", "opt_column_info",
		"invalid_generated_column", "invalid_default_column", "default_column_info",
		"generated_column_info", "identity_column_info", "opt_start_with", "opt_increment_by",
		"opt_maxvalue", "opt_minvalue", "opt_cycle", "signed_numeric_literal",
		"stored_mode", "generated_mode", "column_schema_inner", "raw_column_schema_inner",
		"range_column_schema_inner", "struct_column_schema_inner", "struct_column_field",
		"simple_column_schema_inner", "array_column_schema_inner", "field_schema",
		"opt_field_attributes", "not_null_column_attribute", "primary_key_or_table_constraint_spec",
		"opt_if_not_exists", "primary_key_spec", "primary_key_element_list",
		"primary_key_element", "table_constraint_spec", "foreign_key_reference",
		"opt_foreign_key_action", "foreign_key_on_update", "foreign_key_on_delete",
		"foreign_key_action", "opt_foreign_key_match", "foreign_key_match_mode",
		"column_list", "opt_options_list", "constraint_enforcement", "generic_entity_body",
		"opt_if_exists", "table_or_table_function", "query", "query_without_pipe_operators",
		"bad_keyword_after_from_query", "bad_keyword_after_from_query_allows_parens",
		"with_clause_with_trailing_comma", "select_or_from_keyword", "query_primary_or_set_operation",
		"query_set_operation", "query_set_operation_prefix", "query_set_operation_item",
		"query_primary", "set_operation_metadata", "opt_column_match_suffix",
		"opt_strict", "all_or_distinct", "query_set_operation_type", "opt_corresponding_outer_mode",
		"opt_outer", "with_clause", "aliased_query", "opt_aliased_query_modifiers",
		"recursion_depth_modifier", "possibly_unbounded_int_literal_or_parameter",
		"int_literal_or_parameter", "order_by_clause", "order_by_clause_prefix",
		"ordering_expression", "select", "opt_clauses_following_from", "opt_clauses_following_where",
		"opt_clauses_following_group_by", "window_clause", "window_clause_prefix",
		"window_definition", "where_clause", "having_clause", "group_by_clause",
		"group_by_all", "select_clause", "opt_select_as_clause", "opt_select_with",
		"from_clause", "from_clause_contents", "from_clause_contents_suffix",
		"table_primary", "tvf_with_suffixes", "pivot_or_unpivot_clause_and_aliases",
		"as_alias", "sample_clause", "opt_sample_clause_suffix", "repeatable_clause",
		"possibly_cast_int_literal_or_parameter", "cast_int_literal_or_parameter",
		"sample_size", "sample_size_value", "sample_size_unit", "partition_by_clause_prefix_no_hint",
		"match_recognize_clause", "row_pattern_expr", "row_pattern_concatenation",
		"row_pattern_factor", "select_list_prefix_with_as_aliases", "select_column_expr_with_as_alias",
		"table_subquery", "join", "join_item", "on_or_using_clause_list", "on_or_using_clause",
		"using_clause", "join_hint", "table_path_expression", "opt_at_system_time",
		"opt_with_offset_and_alias", "opt_pivot_or_unpivot_clause_and_alias",
		"table_path_expression_base", "maybe_slashed_or_dashed_path_expression",
		"maybe_dashed_path_expression", "dashed_path_expression", "dashed_identifier",
		"slashed_identifier", "identifier_or_integer", "slashed_identifier_separator",
		"slashed_path_expression", "unnest_expression", "unnest_expression_prefix",
		"opt_array_zip_mode", "expression_with_opt_alias", "tvf_prefix", "tvf_argument",
		"connection_clause", "path_expression_or_default", "descriptor_argument",
		"descriptor_column_list", "descriptor_column", "table_clause", "model_clause",
		"qualify_clause_nonreserved", "unpivot_clause", "unpivot_in_item_list",
		"unpivot_in_item_list_prefix", "unpivot_in_item", "opt_as_string_or_integer",
		"path_expression_list_with_opt_parens", "path_expression_list", "unpivot_nulls_filter",
		"pivot_clause", "pivot_expression_list", "pivot_expression", "pivot_value_list",
		"pivot_value", "tvf_prefix_no_args", "join_type", "opt_natural", "on_clause",
		"select_list", "select_list_item", "select_column_star", "select_column_expr",
		"select_column_dot_star", "star_modifiers", "star_except_list", "star_replace_list",
		"star_replace_item", "expression", "expression_higher_prec_than_and",
		"expression_maybe_parenthesized_not_a_query", "parenthesized_in_rhs",
		"unary_operator", "comparative_operator", "shift_operator", "additive_operator",
		"multiplicative_operator", "is_operator", "between_operator", "in_operator",
		"distinct_operator", "parenthesized_query", "parenthesized_expression_not_a_query",
		"parenthesized_anysomeall_list_in_rhs", "and_expression", "in_list_two_or_more_prefix",
		"any_some_all", "like_operator", "expression_subquery_with_keyword",
		"struct_constructor", "struct_constructor_prefix_with_keyword", "struct_constructor_arg",
		"struct_constructor_prefix_without_keyword", "struct_constructor_prefix_with_keyword_no_arg",
		"interval_expression", "function_call_expression_with_clauses", "function_call_expression_with_clauses_suffix",
		"over_clause", "window_specification", "opt_window_frame_clause", "window_frame_bound",
		"preceding_or_following", "frame_unit", "partition_by_clause", "partition_by_clause_prefix",
		"with_group_rows", "with_report_modifier", "clamped_between_modifier",
		"with_report_format", "options_list", "options_list_prefix", "options_entry",
		"expression_or_proto", "options_assignment_operator", "opt_null_handling_modifier",
		"function_call_argument", "sequence_arg", "named_argument", "lambda_argument",
		"lambda_argument_list", "limit_offset_clause", "opt_having_or_group_by_modifier",
		"group_by_clause_prefix", "group_by_preamble", "opt_and_order", "hint",
		"hint_with_body", "hint_with_body_prefix", "hint_entry", "identifier_in_hints",
		"extra_identifier_in_hints_name", "grouping_item", "grouping_set_list",
		"grouping_set", "cube_list", "rollup_list", "opt_as_alias_with_required_as",
		"opt_grouping_item_order", "opt_selection_item_order", "asc_or_desc",
		"null_order", "function_name_from_keyword", "replace_fields_expression",
		"replace_fields_prefix", "replace_fields_arg", "generalized_path_expression",
		"generalized_extension_path", "with_expression", "with_expression_variable_prefix",
		"with_expression_variable", "extract_expression", "extract_expression_base",
		"opt_format", "opt_at_time_zone", "cast_expression", "case_expression",
		"case_expression_prefix", "case_value_expression_prefix", "case_no_value_expression_prefix",
		"struct_braced_constructor", "braced_new_constructor", "braced_constructor",
		"braced_constructor_start", "braced_constructor_prefix", "braced_constructor_field",
		"braced_constructor_lhs", "braced_constructor_field_value", "braced_constructor_extension",
		"new_constructor", "new_constructor_prefix", "new_constructor_prefix_no_arg",
		"new_constructor_arg", "array_constructor", "array_constructor_prefix",
		"array_constructor_prefix_no_expressions", "range_literal", "range_type",
		"type", "collate_clause", "string_literal_or_parameter", "system_variable_expression",
		"parameter_expression", "named_parameter_expression", "opt_type_parameters",
		"type_parameters_prefix", "type_parameter", "raw_type", "map_type",
		"function_type", "function_type_prefix", "type_name", "path_expression",
		"identifier", "keyword_as_identifier", "common_keyword_as_identifier",
		"token_identifier", "struct_type", "struct_type_prefix", "struct_field",
		"array_type", "template_type_open", "template_type_close", "date_or_time_literal",
		"date_or_time_literal_kind", "floating_point_literal", "json_literal",
		"bignumeric_literal", "bignumeric_literal_prefix", "numeric_literal",
		"numeric_literal_prefix", "integer_literal", "bytes_literal", "null_literal",
		"boolean_literal", "string_literal", "string_literal_component", "bytes_literal_component",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 353, 6243, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4,
		7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10,
		7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7,
		15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20,
		2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2,
		26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31,
		7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7,
		36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41,
		2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2,
		47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52,
		7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7,
		57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62,
		2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2,
		68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73,
		7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7,
		78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83,
		2, 84, 7, 84, 2, 85, 7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2,
		89, 7, 89, 2, 90, 7, 90, 2, 91, 7, 91, 2, 92, 7, 92, 2, 93, 7, 93, 2, 94,
		7, 94, 2, 95, 7, 95, 2, 96, 7, 96, 2, 97, 7, 97, 2, 98, 7, 98, 2, 99, 7,
		99, 2, 100, 7, 100, 2, 101, 7, 101, 2, 102, 7, 102, 2, 103, 7, 103, 2,
		104, 7, 104, 2, 105, 7, 105, 2, 106, 7, 106, 2, 107, 7, 107, 2, 108, 7,
		108, 2, 109, 7, 109, 2, 110, 7, 110, 2, 111, 7, 111, 2, 112, 7, 112, 2,
		113, 7, 113, 2, 114, 7, 114, 2, 115, 7, 115, 2, 116, 7, 116, 2, 117, 7,
		117, 2, 118, 7, 118, 2, 119, 7, 119, 2, 120, 7, 120, 2, 121, 7, 121, 2,
		122, 7, 122, 2, 123, 7, 123, 2, 124, 7, 124, 2, 125, 7, 125, 2, 126, 7,
		126, 2, 127, 7, 127, 2, 128, 7, 128, 2, 129, 7, 129, 2, 130, 7, 130, 2,
		131, 7, 131, 2, 132, 7, 132, 2, 133, 7, 133, 2, 134, 7, 134, 2, 135, 7,
		135, 2, 136, 7, 136, 2, 137, 7, 137, 2, 138, 7, 138, 2, 139, 7, 139, 2,
		140, 7, 140, 2, 141, 7, 141, 2, 142, 7, 142, 2, 143, 7, 143, 2, 144, 7,
		144, 2, 145, 7, 145, 2, 146, 7, 146, 2, 147, 7, 147, 2, 148, 7, 148, 2,
		149, 7, 149, 2, 150, 7, 150, 2, 151, 7, 151, 2, 152, 7, 152, 2, 153, 7,
		153, 2, 154, 7, 154, 2, 155, 7, 155, 2, 156, 7, 156, 2, 157, 7, 157, 2,
		158, 7, 158, 2, 159, 7, 159, 2, 160, 7, 160, 2, 161, 7, 161, 2, 162, 7,
		162, 2, 163, 7, 163, 2, 164, 7, 164, 2, 165, 7, 165, 2, 166, 7, 166, 2,
		167, 7, 167, 2, 168, 7, 168, 2, 169, 7, 169, 2, 170, 7, 170, 2, 171, 7,
		171, 2, 172, 7, 172, 2, 173, 7, 173, 2, 174, 7, 174, 2, 175, 7, 175, 2,
		176, 7, 176, 2, 177, 7, 177, 2, 178, 7, 178, 2, 179, 7, 179, 2, 180, 7,
		180, 2, 181, 7, 181, 2, 182, 7, 182, 2, 183, 7, 183, 2, 184, 7, 184, 2,
		185, 7, 185, 2, 186, 7, 186, 2, 187, 7, 187, 2, 188, 7, 188, 2, 189, 7,
		189, 2, 190, 7, 190, 2, 191, 7, 191, 2, 192, 7, 192, 2, 193, 7, 193, 2,
		194, 7, 194, 2, 195, 7, 195, 2, 196, 7, 196, 2, 197, 7, 197, 2, 198, 7,
		198, 2, 199, 7, 199, 2, 200, 7, 200, 2, 201, 7, 201, 2, 202, 7, 202, 2,
		203, 7, 203, 2, 204, 7, 204, 2, 205, 7, 205, 2, 206, 7, 206, 2, 207, 7,
		207, 2, 208, 7, 208, 2, 209, 7, 209, 2, 210, 7, 210, 2, 211, 7, 211, 2,
		212, 7, 212, 2, 213, 7, 213, 2, 214, 7, 214, 2, 215, 7, 215, 2, 216, 7,
		216, 2, 217, 7, 217, 2, 218, 7, 218, 2, 219, 7, 219, 2, 220, 7, 220, 2,
		221, 7, 221, 2, 222, 7, 222, 2, 223, 7, 223, 2, 224, 7, 224, 2, 225, 7,
		225, 2, 226, 7, 226, 2, 227, 7, 227, 2, 228, 7, 228, 2, 229, 7, 229, 2,
		230, 7, 230, 2, 231, 7, 231, 2, 232, 7, 232, 2, 233, 7, 233, 2, 234, 7,
		234, 2, 235, 7, 235, 2, 236, 7, 236, 2, 237, 7, 237, 2, 238, 7, 238, 2,
		239, 7, 239, 2, 240, 7, 240, 2, 241, 7, 241, 2, 242, 7, 242, 2, 243, 7,
		243, 2, 244, 7, 244, 2, 245, 7, 245, 2, 246, 7, 246, 2, 247, 7, 247, 2,
		248, 7, 248, 2, 249, 7, 249, 2, 250, 7, 250, 2, 251, 7, 251, 2, 252, 7,
		252, 2, 253, 7, 253, 2, 254, 7, 254, 2, 255, 7, 255, 2, 256, 7, 256, 2,
		257, 7, 257, 2, 258, 7, 258, 2, 259, 7, 259, 2, 260, 7, 260, 2, 261, 7,
		261, 2, 262, 7, 262, 2, 263, 7, 263, 2, 264, 7, 264, 2, 265, 7, 265, 2,
		266, 7, 266, 2, 267, 7, 267, 2, 268, 7, 268, 2, 269, 7, 269, 2, 270, 7,
		270, 2, 271, 7, 271, 2, 272, 7, 272, 2, 273, 7, 273, 2, 274, 7, 274, 2,
		275, 7, 275, 2, 276, 7, 276, 2, 277, 7, 277, 2, 278, 7, 278, 2, 279, 7,
		279, 2, 280, 7, 280, 2, 281, 7, 281, 2, 282, 7, 282, 2, 283, 7, 283, 2,
		284, 7, 284, 2, 285, 7, 285, 2, 286, 7, 286, 2, 287, 7, 287, 2, 288, 7,
		288, 2, 289, 7, 289, 2, 290, 7, 290, 2, 291, 7, 291, 2, 292, 7, 292, 2,
		293, 7, 293, 2, 294, 7, 294, 2, 295, 7, 295, 2, 296, 7, 296, 2, 297, 7,
		297, 2, 298, 7, 298, 2, 299, 7, 299, 2, 300, 7, 300, 2, 301, 7, 301, 2,
		302, 7, 302, 2, 303, 7, 303, 2, 304, 7, 304, 2, 305, 7, 305, 2, 306, 7,
		306, 2, 307, 7, 307, 2, 308, 7, 308, 2, 309, 7, 309, 2, 310, 7, 310, 2,
		311, 7, 311, 2, 312, 7, 312, 2, 313, 7, 313, 2, 314, 7, 314, 2, 315, 7,
		315, 2, 316, 7, 316, 2, 317, 7, 317, 2, 318, 7, 318, 2, 319, 7, 319, 2,
		320, 7, 320, 2, 321, 7, 321, 2, 322, 7, 322, 2, 323, 7, 323, 2, 324, 7,
		324, 2, 325, 7, 325, 2, 326, 7, 326, 2, 327, 7, 327, 2, 328, 7, 328, 2,
		329, 7, 329, 2, 330, 7, 330, 2, 331, 7, 331, 2, 332, 7, 332, 2, 333, 7,
		333, 2, 334, 7, 334, 2, 335, 7, 335, 2, 336, 7, 336, 2, 337, 7, 337, 2,
		338, 7, 338, 2, 339, 7, 339, 2, 340, 7, 340, 2, 341, 7, 341, 2, 342, 7,
		342, 2, 343, 7, 343, 2, 344, 7, 344, 2, 345, 7, 345, 2, 346, 7, 346, 2,
		347, 7, 347, 2, 348, 7, 348, 2, 349, 7, 349, 2, 350, 7, 350, 2, 351, 7,
		351, 2, 352, 7, 352, 2, 353, 7, 353, 2, 354, 7, 354, 2, 355, 7, 355, 2,
		356, 7, 356, 2, 357, 7, 357, 2, 358, 7, 358, 2, 359, 7, 359, 2, 360, 7,
		360, 2, 361, 7, 361, 2, 362, 7, 362, 2, 363, 7, 363, 2, 364, 7, 364, 2,
		365, 7, 365, 2, 366, 7, 366, 2, 367, 7, 367, 2, 368, 7, 368, 2, 369, 7,
		369, 2, 370, 7, 370, 2, 371, 7, 371, 2, 372, 7, 372, 2, 373, 7, 373, 2,
		374, 7, 374, 2, 375, 7, 375, 2, 376, 7, 376, 2, 377, 7, 377, 2, 378, 7,
		378, 2, 379, 7, 379, 2, 380, 7, 380, 2, 381, 7, 381, 2, 382, 7, 382, 2,
		383, 7, 383, 2, 384, 7, 384, 2, 385, 7, 385, 2, 386, 7, 386, 2, 387, 7,
		387, 2, 388, 7, 388, 2, 389, 7, 389, 2, 390, 7, 390, 2, 391, 7, 391, 2,
		392, 7, 392, 2, 393, 7, 393, 2, 394, 7, 394, 2, 395, 7, 395, 2, 396, 7,
		396, 2, 397, 7, 397, 2, 398, 7, 398, 2, 399, 7, 399, 2, 400, 7, 400, 2,
		401, 7, 401, 2, 402, 7, 402, 2, 403, 7, 403, 2, 404, 7, 404, 2, 405, 7,
		405, 2, 406, 7, 406, 2, 407, 7, 407, 2, 408, 7, 408, 2, 409, 7, 409, 2,
		410, 7, 410, 2, 411, 7, 411, 2, 412, 7, 412, 2, 413, 7, 413, 2, 414, 7,
		414, 2, 415, 7, 415, 2, 416, 7, 416, 2, 417, 7, 417, 2, 418, 7, 418, 2,
		419, 7, 419, 2, 420, 7, 420, 2, 421, 7, 421, 2, 422, 7, 422, 2, 423, 7,
		423, 2, 424, 7, 424, 2, 425, 7, 425, 2, 426, 7, 426, 2, 427, 7, 427, 2,
		428, 7, 428, 2, 429, 7, 429, 2, 430, 7, 430, 2, 431, 7, 431, 2, 432, 7,
		432, 2, 433, 7, 433, 2, 434, 7, 434, 2, 435, 7, 435, 2, 436, 7, 436, 2,
		437, 7, 437, 2, 438, 7, 438, 2, 439, 7, 439, 2, 440, 7, 440, 2, 441, 7,
		441, 2, 442, 7, 442, 2, 443, 7, 443, 2, 444, 7, 444, 2, 445, 7, 445, 2,
		446, 7, 446, 2, 447, 7, 447, 2, 448, 7, 448, 2, 449, 7, 449, 2, 450, 7,
		450, 2, 451, 7, 451, 2, 452, 7, 452, 2, 453, 7, 453, 2, 454, 7, 454, 2,
		455, 7, 455, 2, 456, 7, 456, 2, 457, 7, 457, 2, 458, 7, 458, 2, 459, 7,
		459, 2, 460, 7, 460, 2, 461, 7, 461, 2, 462, 7, 462, 2, 463, 7, 463, 2,
		464, 7, 464, 2, 465, 7, 465, 2, 466, 7, 466, 2, 467, 7, 467, 2, 468, 7,
		468, 2, 469, 7, 469, 2, 470, 7, 470, 2, 471, 7, 471, 2, 472, 7, 472, 2,
		473, 7, 473, 2, 474, 7, 474, 2, 475, 7, 475, 2, 476, 7, 476, 2, 477, 7,
		477, 2, 478, 7, 478, 2, 479, 7, 479, 2, 480, 7, 480, 2, 481, 7, 481, 2,
		482, 7, 482, 2, 483, 7, 483, 2, 484, 7, 484, 2, 485, 7, 485, 2, 486, 7,
		486, 2, 487, 7, 487, 2, 488, 7, 488, 2, 489, 7, 489, 2, 490, 7, 490, 2,
		491, 7, 491, 2, 492, 7, 492, 2, 493, 7, 493, 2, 494, 7, 494, 2, 495, 7,
		495, 2, 496, 7, 496, 2, 497, 7, 497, 2, 498, 7, 498, 2, 499, 7, 499, 2,
		500, 7, 500, 2, 501, 7, 501, 2, 502, 7, 502, 2, 503, 7, 503, 2, 504, 7,
		504, 2, 505, 7, 505, 2, 506, 7, 506, 2, 507, 7, 507, 2, 508, 7, 508, 2,
		509, 7, 509, 2, 510, 7, 510, 2, 511, 7, 511, 2, 512, 7, 512, 2, 513, 7,
		513, 2, 514, 7, 514, 2, 515, 7, 515, 2, 516, 7, 516, 2, 517, 7, 517, 2,
		518, 7, 518, 2, 519, 7, 519, 2, 520, 7, 520, 2, 521, 7, 521, 2, 522, 7,
		522, 2, 523, 7, 523, 2, 524, 7, 524, 2, 525, 7, 525, 2, 526, 7, 526, 2,
		527, 7, 527, 2, 528, 7, 528, 2, 529, 7, 529, 2, 530, 7, 530, 2, 531, 7,
		531, 2, 532, 7, 532, 2, 533, 7, 533, 2, 534, 7, 534, 2, 535, 7, 535, 2,
		536, 7, 536, 2, 537, 7, 537, 2, 538, 7, 538, 2, 539, 7, 539, 2, 540, 7,
		540, 2, 541, 7, 541, 2, 542, 7, 542, 2, 543, 7, 543, 2, 544, 7, 544, 2,
		545, 7, 545, 2, 546, 7, 546, 2, 547, 7, 547, 2, 548, 7, 548, 2, 549, 7,
		549, 2, 550, 7, 550, 2, 551, 7, 551, 2, 552, 7, 552, 2, 553, 7, 553, 2,
		554, 7, 554, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 5, 1, 1117, 8, 1, 10,
		1, 12, 1, 1120, 9, 1, 1, 1, 3, 1, 1123, 8, 1, 1, 2, 3, 2, 1126, 8, 2, 1,
		2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 1137, 8, 2, 1,
		3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1,
		3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1,
		3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1,
		3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 3, 3, 1181, 8, 3, 1, 4, 1, 4, 1, 4, 1,
		4, 1, 4, 1, 4, 3, 4, 1189, 8, 4, 1, 4, 3, 4, 1192, 8, 4, 1, 5, 1, 5, 1,
		5, 1, 5, 3, 5, 1198, 8, 5, 1, 5, 3, 5, 1201, 8, 5, 1, 6, 1, 6, 1, 6, 1,
		7, 1, 7, 1, 7, 3, 7, 1209, 8, 7, 1, 7, 3, 7, 1212, 8, 7, 1, 8, 1, 8, 1,
		8, 1, 9, 1, 9, 1, 9, 1, 9, 3, 9, 1221, 8, 9, 1, 9, 3, 9, 1224, 8, 9, 1,
		10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 1, 12, 1, 12, 1, 12, 5, 12, 1235,
		8, 12, 10, 12, 12, 12, 1238, 9, 12, 1, 13, 1, 13, 1, 13, 3, 13, 1243, 8,
		13, 1, 14, 1, 14, 1, 14, 1, 15, 3, 15, 1249, 8, 15, 1, 15, 1, 15, 3, 15,
		1253, 8, 15, 1, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 1,
		18, 3, 18, 1264, 8, 18, 1, 19, 1, 19, 3, 19, 1268, 8, 19, 1, 19, 1, 19,
		3, 19, 1272, 8, 19, 1, 19, 1, 19, 3, 19, 1276, 8, 19, 1, 19, 3, 19, 1279,
		8, 19, 1, 20, 1, 20, 1, 20, 1, 21, 1, 21, 3, 21, 1286, 8, 21, 1, 21, 3,
		21, 1289, 8, 21, 1, 21, 3, 21, 1292, 8, 21, 1, 21, 1, 21, 3, 21, 1296,
		8, 21, 1, 21, 1, 21, 3, 21, 1300, 8, 21, 1, 21, 3, 21, 1303, 8, 21, 1,
		21, 3, 21, 1306, 8, 21, 1, 21, 1, 21, 1, 21, 1, 21, 3, 21, 1312, 8, 21,
		1, 21, 1, 21, 3, 21, 1316, 8, 21, 1, 21, 1, 21, 3, 21, 1320, 8, 21, 1,
		21, 1, 21, 3, 21, 1324, 8, 21, 1, 21, 3, 21, 1327, 8, 21, 1, 21, 3, 21,
		1330, 8, 21, 1, 21, 3, 21, 1333, 8, 21, 1, 21, 3, 21, 1336, 8, 21, 1, 21,
		1, 21, 1, 21, 1, 21, 1, 21, 3, 21, 1343, 8, 21, 1, 21, 1, 21, 3, 21, 1347,
		8, 21, 1, 21, 1, 21, 3, 21, 1351, 8, 21, 1, 21, 1, 21, 3, 21, 1355, 8,
		21, 1, 21, 3, 21, 1358, 8, 21, 1, 21, 3, 21, 1361, 8, 21, 1, 21, 1, 21,
		3, 21, 1365, 8, 21, 1, 22, 1, 22, 1, 22, 1, 22, 3, 22, 1371, 8, 22, 1,
		23, 1, 23, 1, 23, 1, 23, 5, 23, 1377, 8, 23, 10, 23, 12, 23, 1380, 9, 23,
		1, 23, 1, 23, 1, 24, 1, 24, 3, 24, 1386, 8, 24, 1, 25, 1, 25, 3, 25, 1390,
		8, 25, 1, 25, 3, 25, 1393, 8, 25, 1, 25, 1, 25, 3, 25, 1397, 8, 25, 1,
		25, 1, 25, 3, 25, 1401, 8, 25, 1, 25, 3, 25, 1404, 8, 25, 1, 25, 3, 25,
		1407, 8, 25, 1, 25, 3, 25, 1410, 8, 25, 1, 25, 3, 25, 1413, 8, 25, 1, 25,
		3, 25, 1416, 8, 25, 1, 25, 3, 25, 1419, 8, 25, 1, 25, 3, 25, 1422, 8, 25,
		1, 25, 3, 25, 1425, 8, 25, 1, 25, 3, 25, 1428, 8, 25, 1, 25, 3, 25, 1431,
		8, 25, 1, 25, 3, 25, 1434, 8, 25, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1,
		26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 28, 1, 28, 3, 28, 1448, 8, 28, 1, 28,
		3, 28, 1451, 8, 28, 1, 29, 1, 29, 1, 29, 1, 30, 1, 30, 3, 30, 1458, 8,
		30, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 32, 1, 32, 1, 32,
		1, 32, 1, 33, 1, 33, 3, 33, 1473, 8, 33, 1, 33, 3, 33, 1476, 8, 33, 1,
		33, 1, 33, 1, 33, 3, 33, 1481, 8, 33, 1, 33, 1, 33, 3, 33, 1485, 8, 33,
		1, 33, 3, 33, 1488, 8, 33, 1, 33, 3, 33, 1491, 8, 33, 1, 33, 3, 33, 1494,
		8, 33, 1, 33, 3, 33, 1497, 8, 33, 1, 33, 1, 33, 1, 34, 1, 34, 1, 34, 3,
		34, 1504, 8, 34, 1, 35, 1, 35, 3, 35, 1508, 8, 35, 1, 35, 1, 35, 3, 35,
		1512, 8, 35, 3, 35, 1514, 8, 35, 1, 36, 1, 36, 1, 36, 1, 36, 5, 36, 1520,
		8, 36, 10, 36, 12, 36, 1523, 9, 36, 3, 36, 1525, 8, 36, 1, 36, 1, 36, 1,
		37, 1, 37, 3, 37, 1531, 8, 37, 1, 37, 1, 37, 1, 37, 3, 37, 1536, 8, 37,
		1, 37, 3, 37, 1539, 8, 37, 1, 37, 1, 37, 1, 37, 1, 37, 3, 37, 1545, 8,
		37, 1, 38, 1, 38, 3, 38, 1549, 8, 38, 1, 38, 3, 38, 1552, 8, 38, 1, 38,
		1, 38, 1, 38, 3, 38, 1557, 8, 38, 1, 38, 1, 38, 3, 38, 1561, 8, 38, 1,
		38, 1, 38, 1, 39, 1, 39, 3, 39, 1567, 8, 39, 1, 39, 1, 39, 3, 39, 1571,
		8, 39, 1, 39, 1, 39, 3, 39, 1575, 8, 39, 1, 39, 3, 39, 1578, 8, 39, 1,
		40, 1, 40, 3, 40, 1582, 8, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 3, 40,
		1589, 8, 40, 1, 40, 1, 40, 1, 40, 1, 40, 3, 40, 1595, 8, 40, 1, 41, 1,
		41, 1, 41, 1, 41, 1, 42, 1, 42, 1, 42, 1, 42, 5, 42, 1605, 8, 42, 10, 42,
		12, 42, 1608, 9, 42, 1, 42, 3, 42, 1611, 8, 42, 1, 42, 1, 42, 1, 43, 1,
		43, 3, 43, 1617, 8, 43, 1, 43, 3, 43, 1620, 8, 43, 1, 43, 3, 43, 1623,
		8, 43, 1, 43, 3, 43, 1626, 8, 43, 1, 43, 3, 43, 1629, 8, 43, 1, 44, 1,
		44, 3, 44, 1633, 8, 44, 1, 45, 4, 45, 1636, 8, 45, 11, 45, 12, 45, 1637,
		1, 46, 3, 46, 1641, 8, 46, 1, 46, 1, 46, 1, 46, 3, 46, 1646, 8, 46, 1,
		47, 1, 47, 1, 47, 1, 47, 3, 47, 1652, 8, 47, 1, 47, 1, 47, 1, 47, 1, 47,
		1, 47, 3, 47, 1659, 8, 47, 1, 48, 1, 48, 1, 48, 5, 48, 1664, 8, 48, 10,
		48, 12, 48, 1667, 9, 48, 1, 49, 1, 49, 3, 49, 1671, 8, 49, 1, 50, 1, 50,
		1, 50, 1, 51, 1, 51, 3, 51, 1678, 8, 51, 1, 51, 1, 51, 1, 51, 1, 52, 1,
		52, 1, 52, 1, 52, 1, 52, 1, 52, 3, 52, 1689, 8, 52, 1, 53, 1, 53, 1, 53,
		1, 53, 1, 53, 1, 53, 3, 53, 1697, 8, 53, 1, 54, 1, 54, 1, 54, 1, 55, 1,
		55, 3, 55, 1704, 8, 55, 1, 55, 3, 55, 1707, 8, 55, 1, 55, 1, 55, 3, 55,
		1711, 8, 55, 1, 55, 1, 55, 3, 55, 1715, 8, 55, 1, 55, 3, 55, 1718, 8, 55,
		1, 55, 3, 55, 1721, 8, 55, 1, 55, 3, 55, 1724, 8, 55, 1, 55, 3, 55, 1727,
		8, 55, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 57, 1, 57, 1, 57, 1, 57, 1,
		57, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 3, 58, 1745, 8, 58, 1, 59,
		1, 59, 1, 59, 5, 59, 1750, 8, 59, 10, 59, 12, 59, 1753, 9, 59, 1, 60, 1,
		60, 1, 60, 1, 61, 1, 61, 3, 61, 1760, 8, 61, 1, 61, 3, 61, 1763, 8, 61,
		1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 62, 1, 62, 3, 62, 1772, 8, 62, 1,
		62, 3, 62, 1775, 8, 62, 1, 62, 1, 62, 1, 62, 3, 62, 1780, 8, 62, 1, 62,
		1, 62, 3, 62, 1784, 8, 62, 1, 62, 3, 62, 1787, 8, 62, 1, 62, 3, 62, 1790,
		8, 62, 1, 62, 3, 62, 1793, 8, 62, 1, 62, 3, 62, 1796, 8, 62, 1, 63, 1,
		63, 1, 63, 1, 64, 1, 64, 1, 64, 1, 65, 1, 65, 3, 65, 1806, 8, 65, 1, 65,
		1, 65, 3, 65, 1810, 8, 65, 1, 65, 1, 65, 3, 65, 1814, 8, 65, 1, 65, 3,
		65, 1817, 8, 65, 1, 65, 1, 65, 1, 65, 3, 65, 1822, 8, 65, 1, 65, 1, 65,
		1, 66, 3, 66, 1827, 8, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 67, 1,
		67, 1, 67, 3, 67, 1837, 8, 67, 1, 68, 1, 68, 3, 68, 1841, 8, 68, 1, 68,
		1, 68, 1, 68, 3, 68, 1846, 8, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1,
		68, 3, 68, 1854, 8, 68, 1, 69, 1, 69, 1, 69, 1, 69, 1, 70, 1, 70, 1, 70,
		1, 70, 5, 70, 1864, 8, 70, 10, 70, 12, 70, 1867, 9, 70, 3, 70, 1869, 8,
		70, 1, 70, 1, 70, 1, 71, 1, 71, 3, 71, 1875, 8, 71, 1, 71, 3, 71, 1878,
		8, 71, 1, 71, 3, 71, 1881, 8, 71, 1, 71, 3, 71, 1884, 8, 71, 1, 71, 1,
		71, 3, 71, 1888, 8, 71, 1, 71, 1, 71, 1, 71, 3, 71, 1893, 8, 71, 1, 71,
		3, 71, 1896, 8, 71, 1, 71, 1, 71, 3, 71, 1900, 8, 71, 1, 71, 3, 71, 1903,
		8, 71, 1, 72, 1, 72, 3, 72, 1907, 8, 72, 1, 72, 3, 72, 1910, 8, 72, 1,
		72, 1, 72, 3, 72, 1914, 8, 72, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 74,
		1, 74, 1, 74, 1, 75, 1, 75, 1, 75, 1, 75, 5, 75, 1928, 8, 75, 10, 75, 12,
		75, 1931, 9, 75, 1, 75, 1, 75, 1, 76, 1, 76, 1, 76, 1, 76, 5, 76, 1939,
		8, 76, 10, 76, 12, 76, 1942, 9, 76, 1, 76, 1, 76, 1, 76, 3, 76, 1947, 8,
		76, 1, 77, 1, 77, 1, 77, 1, 77, 3, 77, 1953, 8, 77, 1, 77, 1, 77, 1, 78,
		1, 78, 1, 78, 1, 78, 1, 78, 1, 79, 1, 79, 1, 79, 1, 79, 5, 79, 1966, 8,
		79, 10, 79, 12, 79, 1969, 9, 79, 1, 79, 1, 79, 1, 80, 1, 80, 3, 80, 1975,
		8, 80, 1, 80, 3, 80, 1978, 8, 80, 1, 80, 3, 80, 1981, 8, 80, 1, 80, 3,
		80, 1984, 8, 80, 1, 81, 4, 81, 1987, 8, 81, 11, 81, 12, 81, 1988, 1, 82,
		1, 82, 3, 82, 1993, 8, 82, 1, 82, 3, 82, 1996, 8, 82, 1, 83, 1, 83, 1,
		83, 1, 84, 1, 84, 1, 85, 1, 85, 1, 86, 1, 86, 3, 86, 2007, 8, 86, 1, 86,
		3, 86, 2010, 8, 86, 1, 86, 1, 86, 3, 86, 2014, 8, 86, 1, 86, 1, 86, 1,
		86, 3, 86, 2019, 8, 86, 1, 86, 3, 86, 2022, 8, 86, 1, 86, 3, 86, 2025,
		8, 86, 1, 86, 1, 86, 1, 87, 1, 87, 1, 87, 1, 87, 3, 87, 2033, 8, 87, 3,
		87, 2035, 8, 87, 1, 88, 1, 88, 3, 88, 2039, 8, 88, 1, 88, 3, 88, 2042,
		8, 88, 1, 88, 1, 88, 1, 89, 1, 89, 1, 89, 1, 89, 1, 89, 1, 89, 1, 90, 1,
		90, 1, 90, 1, 91, 1, 91, 1, 91, 5, 91, 2058, 8, 91, 10, 91, 12, 91, 2061,
		9, 91, 1, 92, 1, 92, 3, 92, 2065, 8, 92, 1, 93, 1, 93, 1, 93, 1, 93, 1,
		93, 1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 3, 93, 2079, 8, 93,
		3, 93, 2081, 8, 93, 1, 94, 1, 94, 1, 95, 1, 95, 1, 95, 1, 95, 1, 95, 3,
		95, 2090, 8, 95, 1, 96, 1, 96, 1, 96, 1, 96, 1, 96, 1, 96, 3, 96, 2098,
		8, 96, 1, 96, 1, 96, 1, 96, 1, 97, 1, 97, 3, 97, 2105, 8, 97, 1, 97, 1,
		97, 1, 97, 1, 97, 1, 98, 1, 98, 1, 98, 1, 99, 1, 99, 3, 99, 2116, 8, 99,
		1, 99, 1, 99, 1, 99, 1, 100, 1, 100, 1, 100, 1, 100, 3, 100, 2125, 8, 100,
		1, 100, 1, 100, 1, 100, 1, 101, 1, 101, 1, 101, 1, 101, 1, 101, 1, 101,
		3, 101, 2136, 8, 101, 1, 102, 1, 102, 1, 103, 1, 103, 3, 103, 2142, 8,
		103, 1, 103, 1, 103, 3, 103, 2146, 8, 103, 3, 103, 2148, 8, 103, 1, 104,
		1, 104, 1, 104, 1, 104, 3, 104, 2154, 8, 104, 1, 104, 1, 104, 1, 104, 1,
		104, 1, 104, 3, 104, 2161, 8, 104, 1, 105, 1, 105, 3, 105, 2165, 8, 105,
		1, 105, 1, 105, 3, 105, 2169, 8, 105, 3, 105, 2171, 8, 105, 1, 106, 1,
		106, 3, 106, 2175, 8, 106, 1, 106, 1, 106, 3, 106, 2179, 8, 106, 1, 106,
		1, 106, 1, 106, 1, 107, 1, 107, 1, 107, 1, 107, 3, 107, 2188, 8, 107, 4,
		107, 2190, 8, 107, 11, 107, 12, 107, 2191, 1, 108, 1, 108, 1, 108, 1, 108,
		3, 108, 2198, 8, 108, 1, 108, 3, 108, 2201, 8, 108, 1, 108, 3, 108, 2204,
		8, 108, 1, 108, 1, 108, 1, 108, 1, 109, 1, 109, 1, 109, 1, 109, 3, 109,
		2213, 8, 109, 4, 109, 2215, 8, 109, 11, 109, 12, 109, 2216, 1, 110, 1,
		110, 3, 110, 2221, 8, 110, 1, 111, 1, 111, 1, 111, 1, 112, 1, 112, 1, 112,
		1, 112, 1, 113, 1, 113, 1, 114, 1, 114, 1, 114, 1, 114, 5, 114, 2236, 8,
		114, 10, 114, 12, 114, 2239, 9, 114, 3, 114, 2241, 8, 114, 1, 114, 1, 114,
		1, 115, 3, 115, 2246, 8, 115, 1, 115, 1, 115, 1, 115, 1, 115, 3, 115, 2252,
		8, 115, 1, 115, 1, 115, 1, 115, 1, 115, 3, 115, 2258, 8, 115, 1, 116, 1,
		116, 1, 117, 1, 117, 1, 118, 1, 118, 3, 118, 2266, 8, 118, 1, 118, 3, 118,
		2269, 8, 118, 1, 118, 3, 118, 2272, 8, 118, 1, 118, 1, 118, 3, 118, 2276,
		8, 118, 1, 118, 1, 118, 3, 118, 2280, 8, 118, 1, 118, 3, 118, 2283, 8,
		118, 1, 118, 3, 118, 2286, 8, 118, 1, 118, 3, 118, 2289, 8, 118, 1, 118,
		3, 118, 2292, 8, 118, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 3,
		119, 2300, 8, 119, 1, 120, 1, 120, 1, 120, 1, 120, 1, 121, 1, 121, 1, 122,
		1, 122, 1, 122, 1, 122, 3, 122, 2312, 8, 122, 1, 123, 1, 123, 1, 123, 1,
		123, 1, 123, 1, 123, 1, 123, 3, 123, 2321, 8, 123, 1, 124, 1, 124, 3, 124,
		2325, 8, 124, 1, 124, 1, 124, 3, 124, 2329, 8, 124, 3, 124, 2331, 8, 124,
		1, 125, 1, 125, 1, 125, 3, 125, 2336, 8, 125, 1, 125, 1, 125, 3, 125, 2340,
		8, 125, 3, 125, 2342, 8, 125, 1, 126, 1, 126, 1, 126, 1, 127, 1, 127, 3,
		127, 2349, 8, 127, 1, 127, 3, 127, 2352, 8, 127, 1, 128, 1, 128, 1, 128,
		1, 129, 1, 129, 1, 130, 1, 130, 1, 130, 1, 131, 1, 131, 1, 131, 1, 132,
		1, 132, 1, 132, 1, 132, 5, 132, 2369, 8, 132, 10, 132, 12, 132, 2372, 9,
		132, 3, 132, 2374, 8, 132, 1, 132, 1, 132, 1, 133, 1, 133, 1, 133, 3, 133,
		2381, 8, 133, 1, 133, 3, 133, 2384, 8, 133, 1, 133, 3, 133, 2387, 8, 133,
		1, 133, 1, 133, 3, 133, 2391, 8, 133, 1, 133, 3, 133, 2394, 8, 133, 3,
		133, 2396, 8, 133, 1, 134, 1, 134, 1, 134, 1, 135, 1, 135, 1, 135, 1, 136,
		1, 136, 1, 136, 3, 136, 2407, 8, 136, 1, 137, 1, 137, 1, 137, 1, 137, 1,
		137, 5, 137, 2414, 8, 137, 10, 137, 12, 137, 2417, 9, 137, 1, 137, 1, 137,
		1, 138, 1, 138, 1, 138, 1, 138, 3, 138, 2425, 8, 138, 1, 139, 1, 139, 1,
		139, 1, 140, 1, 140, 1, 140, 1, 140, 1, 140, 3, 140, 2435, 8, 140, 1, 141,
		1, 141, 1, 142, 1, 142, 1, 142, 1, 142, 3, 142, 2443, 8, 142, 1, 143, 1,
		143, 3, 143, 2447, 8, 143, 1, 143, 1, 143, 3, 143, 2451, 8, 143, 1, 143,
		1, 143, 3, 143, 2455, 8, 143, 1, 144, 1, 144, 3, 144, 2459, 8, 144, 1,
		144, 3, 144, 2462, 8, 144, 1, 144, 1, 144, 3, 144, 2466, 8, 144, 1, 144,
		1, 144, 1, 144, 1, 144, 1, 145, 1, 145, 1, 145, 1, 146, 1, 146, 1, 147,
		1, 147, 1, 147, 1, 148, 1, 148, 1, 148, 1, 149, 1, 149, 1, 149, 3, 149,
		2486, 8, 149, 1, 150, 1, 150, 3, 150, 2490, 8, 150, 1, 151, 1, 151, 3,
		151, 2494, 8, 151, 1, 152, 1, 152, 1, 152, 1, 152, 1, 152, 1, 152, 1, 152,
		1, 152, 1, 152, 1, 152, 1, 152, 1, 152, 1, 152, 1, 152, 1, 152, 1, 152,
		1, 152, 1, 152, 1, 152, 1, 152, 1, 152, 1, 152, 1, 152, 1, 152, 1, 152,
		1, 152, 1, 152, 1, 152, 1, 152, 1, 152, 1, 152, 1, 152, 3, 152, 2528, 8,
		152, 1, 153, 1, 153, 1, 153, 5, 153, 2533, 8, 153, 10, 153, 12, 153, 2536,
		9, 153, 1, 154, 1, 154, 3, 154, 2540, 8, 154, 1, 155, 1, 155, 1, 155, 1,
		155, 3, 155, 2546, 8, 155, 3, 155, 2548, 8, 155, 1, 156, 1, 156, 1, 156,
		5, 156, 2553, 8, 156, 10, 156, 12, 156, 2556, 9, 156, 1, 157, 1, 157, 1,
		157, 1, 157, 1, 157, 1, 157, 1, 157, 1, 157, 1, 157, 1, 157, 1, 157, 1,
		157, 3, 157, 2570, 8, 157, 1, 158, 1, 158, 1, 158, 1, 158, 3, 158, 2576,
		8, 158, 1, 159, 1, 159, 3, 159, 2580, 8, 159, 1, 159, 1, 159, 3, 159, 2584,
		8, 159, 1, 159, 1, 159, 1, 159, 1, 159, 1, 159, 4, 159, 2591, 8, 159, 11,
		159, 12, 159, 2592, 1, 160, 1, 160, 3, 160, 2597, 8, 160, 1, 161, 1, 161,
		1, 161, 3, 161, 2602, 8, 161, 1, 161, 1, 161, 1, 161, 1, 161, 1, 161, 1,
		161, 3, 161, 2610, 8, 161, 1, 161, 3, 161, 2613, 8, 161, 1, 161, 1, 161,
		1, 161, 1, 161, 1, 161, 1, 161, 1, 161, 1, 161, 3, 161, 2623, 8, 161, 1,
		161, 1, 161, 3, 161, 2627, 8, 161, 1, 162, 1, 162, 3, 162, 2631, 8, 162,
		1, 162, 1, 162, 1, 162, 1, 162, 1, 162, 3, 162, 2638, 8, 162, 1, 163, 1,
		163, 1, 163, 3, 163, 2643, 8, 163, 1, 164, 1, 164, 1, 164, 1, 165, 1, 165,
		1, 165, 1, 166, 1, 166, 1, 167, 1, 167, 1, 168, 1, 168, 1, 168, 3, 168,
		2658, 8, 168, 1, 169, 1, 169, 1, 169, 3, 169, 2663, 8, 169, 1, 169, 3,
		169, 2666, 8, 169, 1, 169, 3, 169, 2669, 8, 169, 1, 169, 1, 169, 1, 169,
		3, 169, 2674, 8, 169, 1, 169, 3, 169, 2677, 8, 169, 1, 169, 3, 169, 2680,
		8, 169, 1, 169, 3, 169, 2683, 8, 169, 1, 170, 1, 170, 3, 170, 2687, 8,
		170, 1, 170, 1, 170, 3, 170, 2691, 8, 170, 1, 170, 3, 170, 2694, 8, 170,
		1, 170, 3, 170, 2697, 8, 170, 1, 170, 3, 170, 2700, 8, 170, 1, 170, 3,
		170, 2703, 8, 170, 1, 170, 3, 170, 2706, 8, 170, 1, 171, 1, 171, 3, 171,
		2710, 8, 171, 1, 171, 1, 171, 3, 171, 2714, 8, 171, 1, 171, 3, 171, 2717,
		8, 171, 1, 171, 1, 171, 3, 171, 2721, 8, 171, 1, 171, 1, 171, 1, 171, 3,
		171, 2726, 8, 171, 1, 171, 3, 171, 2729, 8, 171, 1, 171, 1, 171, 3, 171,
		2733, 8, 171, 1, 171, 1, 171, 1, 171, 1, 171, 1, 171, 3, 171, 2740, 8,
		171, 1, 171, 3, 171, 2743, 8, 171, 3, 171, 2745, 8, 171, 1, 172, 1, 172,
		1, 172, 3, 172, 2750, 8, 172, 1, 172, 1, 172, 1, 172, 1, 172, 1, 172, 3,
		172, 2757, 8, 172, 1, 172, 1, 172, 1, 172, 1, 172, 1, 172, 3, 172, 2764,
		8, 172, 3, 172, 2766, 8, 172, 1, 173, 1, 173, 1, 173, 1, 174, 1, 174, 1,
		174, 1, 174, 1, 174, 3, 174, 2776, 8, 174, 1, 175, 1, 175, 1, 175, 5, 175,
		2781, 8, 175, 10, 175, 12, 175, 2784, 9, 175, 1, 176, 1, 176, 3, 176, 2788,
		8, 176, 1, 177, 1, 177, 1, 177, 1, 177, 1, 178, 1, 178, 1, 178, 1, 178,
		1, 179, 1, 179, 3, 179, 2800, 8, 179, 1, 180, 1, 180, 1, 180, 1, 181, 1,
		181, 3, 181, 2807, 8, 181, 1, 181, 1, 181, 3, 181, 2811, 8, 181, 3, 181,
		2813, 8, 181, 1, 182, 1, 182, 1, 182, 1, 182, 1, 182, 1, 182, 1, 182, 1,
		182, 1, 182, 1, 182, 1, 182, 1, 182, 1, 182, 1, 182, 1, 182, 1, 182, 3,
		182, 2831, 8, 182, 1, 183, 1, 183, 1, 183, 1, 184, 1, 184, 3, 184, 2838,
		8, 184, 1, 185, 1, 185, 1, 185, 1, 185, 5, 185, 2844, 8, 185, 10, 185,
		12, 185, 2847, 9, 185, 1, 186, 1, 186, 1, 186, 1, 186, 5, 186, 2853, 8,
		186, 10, 186, 12, 186, 2856, 9, 186, 1, 186, 1, 186, 1, 187, 1, 187, 3,
		187, 2862, 8, 187, 1, 188, 1, 188, 3, 188, 2866, 8, 188, 1, 188, 3, 188,
		2869, 8, 188, 1, 188, 1, 188, 3, 188, 2873, 8, 188, 1, 189, 1, 189, 3,
		189, 2877, 8, 189, 1, 190, 1, 190, 1, 191, 1, 191, 1, 191, 1, 191, 1, 191,
		1, 191, 1, 191, 1, 191, 1, 191, 3, 191, 2890, 8, 191, 1, 192, 1, 192, 1,
		192, 3, 192, 2895, 8, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192,
		3, 192, 2903, 8, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192, 3,
		192, 2911, 8, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192, 3, 192,
		2919, 8, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192, 3, 192, 2927,
		8, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192,
		1, 192, 1, 192, 1, 192, 3, 192, 2940, 8, 192, 1, 192, 1, 192, 1, 192, 1,
		192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1, 192, 1,
		192, 1, 192, 3, 192, 2956, 8, 192, 1, 193, 1, 193, 3, 193, 2960, 8, 193,
		1, 193, 3, 193, 2963, 8, 193, 1, 194, 1, 194, 1, 194, 3, 194, 2968, 8,
		194, 1, 195, 1, 195, 1, 195, 1, 195, 1, 195, 3, 195, 2975, 8, 195, 1, 195,
		3, 195, 2978, 8, 195, 1, 195, 3, 195, 2981, 8, 195, 1, 195, 3, 195, 2984,
		8, 195, 1, 195, 3, 195, 2987, 8, 195, 1, 195, 3, 195, 2990, 8, 195, 1,
		195, 1, 195, 3, 195, 2994, 8, 195, 1, 196, 1, 196, 1, 196, 1, 196, 1, 196,
		1, 196, 1, 196, 1, 197, 1, 197, 1, 197, 1, 197, 5, 197, 3007, 8, 197, 10,
		197, 12, 197, 3010, 9, 197, 1, 198, 1, 198, 3, 198, 3014, 8, 198, 1, 198,
		3, 198, 3017, 8, 198, 1, 199, 1, 199, 1, 199, 1, 199, 1, 199, 3, 199, 3024,
		8, 199, 1, 200, 1, 200, 1, 200, 1, 200, 3, 200, 3030, 8, 200, 1, 201, 1,
		201, 1, 201, 1, 201, 1, 202, 1, 202, 1, 202, 1, 202, 1, 202, 5, 202, 3041,
		8, 202, 10, 202, 12, 202, 3044, 9, 202, 1, 203, 3, 203, 3047, 8, 203, 1,
		203, 1, 203, 1, 203, 1, 203, 1, 203, 1, 204, 1, 204, 1, 204, 1, 204, 1,
		204, 1, 204, 1, 204, 3, 204, 3061, 8, 204, 1, 205, 1, 205, 1, 205, 1, 205,
		5, 205, 3067, 8, 205, 10, 205, 12, 205, 3070, 9, 205, 1, 205, 3, 205, 3073,
		8, 205, 3, 205, 3075, 8, 205, 1, 205, 1, 205, 1, 206, 1, 206, 3, 206, 3081,
		8, 206, 1, 207, 1, 207, 1, 207, 1, 207, 1, 207, 1, 207, 3, 207, 3089, 8,
		207, 1, 208, 1, 208, 1, 209, 1, 209, 1, 209, 1, 210, 1, 210, 1, 210, 5,
		210, 3099, 8, 210, 10, 210, 12, 210, 3102, 9, 210, 1, 211, 1, 211, 3, 211,
		3106, 8, 211, 1, 212, 1, 212, 1, 212, 5, 212, 3111, 8, 212, 10, 212, 12,
		212, 3114, 9, 212, 1, 213, 1, 213, 1, 213, 1, 213, 1, 213, 1, 213, 1, 213,
		1, 213, 1, 213, 1, 213, 1, 213, 1, 213, 1, 213, 1, 213, 1, 213, 1, 213,
		1, 213, 1, 213, 1, 213, 3, 213, 3135, 8, 213, 1, 214, 1, 214, 1, 214, 1,
		214, 1, 214, 1, 214, 1, 215, 1, 215, 1, 215, 5, 215, 3146, 8, 215, 10,
		215, 12, 215, 3149, 9, 215, 1, 216, 1, 216, 1, 216, 5, 216, 3154, 8, 216,
		10, 216, 12, 216, 3157, 9, 216, 1, 217, 1, 217, 3, 217, 3161, 8, 217, 1,
		218, 1, 218, 1, 218, 1, 218, 1, 219, 1, 219, 3, 219, 3169, 8, 219, 1, 220,
		1, 220, 1, 221, 1, 221, 1, 222, 1, 222, 1, 222, 1, 222, 1, 222, 1, 222,
		1, 222, 1, 222, 1, 222, 1, 222, 1, 222, 1, 222, 1, 222, 1, 222, 1, 222,
		1, 222, 1, 222, 1, 222, 1, 222, 3, 222, 3194, 8, 222, 1, 223, 1, 223, 1,
		223, 5, 223, 3199, 8, 223, 10, 223, 12, 223, 3202, 9, 223, 1, 224, 1, 224,
		1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224,
		1, 224, 1, 224, 3, 224, 3217, 8, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1,
		224, 1, 224, 3, 224, 3225, 8, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224,
		3, 224, 3232, 8, 224, 1, 224, 1, 224, 1, 224, 3, 224, 3237, 8, 224, 1,
		224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 3, 224, 3245, 8, 224, 1, 224,
		1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 3, 224, 3255, 8,
		224, 1, 224, 1, 224, 3, 224, 3259, 8, 224, 1, 224, 3, 224, 3262, 8, 224,
		1, 224, 1, 224, 1, 224, 3, 224, 3267, 8, 224, 1, 224, 1, 224, 1, 224, 1,
		224, 3, 224, 3273, 8, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224,
		1, 224, 3, 224, 3282, 8, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1,
		224, 1, 224, 1, 224, 1, 224, 3, 224, 3293, 8, 224, 1, 224, 1, 224, 1, 224,
		1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 3, 224, 3303, 8, 224, 1, 224, 1,
		224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 3, 224, 3313, 8, 224,
		1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 3, 224, 3322, 8,
		224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 3,
		224, 3332, 8, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224,
		1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 3, 224,
		3349, 8, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1,
		224, 1, 224, 3, 224, 3360, 8, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224,
		1, 224, 1, 224, 1, 224, 1, 224, 3, 224, 3371, 8, 224, 1, 224, 1, 224, 1,
		224, 3, 224, 3376, 8, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224,
		3, 224, 3384, 8, 224, 1, 224, 1, 224, 1, 224, 1, 224, 1, 224, 3, 224, 3391,
		8, 224, 1, 224, 1, 224, 1, 224, 1, 224, 3, 224, 3397, 8, 224, 1, 225, 1,
		225, 1, 225, 1, 225, 1, 225, 1, 226, 1, 226, 1, 226, 3, 226, 3407, 8, 226,
		1, 226, 1, 226, 1, 226, 3, 226, 3412, 8, 226, 1, 226, 3, 226, 3415, 8,
		226, 1, 226, 3, 226, 3418, 8, 226, 1, 227, 1, 227, 1, 227, 1, 227, 1, 227,
		1, 227, 1, 228, 1, 228, 1, 229, 1, 229, 1, 230, 1, 230, 1, 230, 1, 230,
		1, 231, 1, 231, 1, 231, 1, 231, 3, 231, 3438, 8, 231, 1, 232, 1, 232, 1,
		232, 3, 232, 3443, 8, 232, 1, 232, 3, 232, 3446, 8, 232, 1, 233, 4, 233,
		3449, 8, 233, 11, 233, 12, 233, 3450, 1, 233, 3, 233, 3454, 8, 233, 1,
		234, 1, 234, 1, 234, 1, 234, 3, 234, 3460, 8, 234, 1, 235, 1, 235, 1, 235,
		1, 236, 3, 236, 3466, 8, 236, 1, 236, 1, 236, 1, 237, 1, 237, 1, 238, 1,
		238, 1, 238, 1, 239, 1, 239, 3, 239, 3477, 8, 239, 1, 239, 3, 239, 3480,
		8, 239, 1, 239, 3, 239, 3483, 8, 239, 1, 240, 1, 240, 3, 240, 3487, 8,
		240, 1, 240, 1, 240, 1, 240, 1, 240, 3, 240, 3493, 8, 240, 1, 240, 1, 240,
		3, 240, 3497, 8, 240, 1, 241, 1, 241, 1, 242, 1, 242, 1, 243, 1, 243, 1,
		243, 1, 244, 1, 244, 1, 244, 1, 244, 1, 244, 3, 244, 3511, 8, 244, 1, 244,
		1, 244, 1, 244, 3, 244, 3516, 8, 244, 1, 245, 1, 245, 1, 245, 3, 245, 3521,
		8, 245, 1, 245, 3, 245, 3524, 8, 245, 1, 245, 3, 245, 3527, 8, 245, 1,
		245, 3, 245, 3530, 8, 245, 1, 245, 3, 245, 3533, 8, 245, 1, 245, 1, 245,
		1, 246, 1, 246, 1, 246, 1, 246, 1, 247, 1, 247, 1, 247, 1, 247, 1, 248,
		1, 248, 1, 248, 1, 249, 1, 249, 1, 249, 1, 250, 1, 250, 1, 250, 3, 250,
		3554, 8, 250, 1, 251, 1, 251, 1, 251, 1, 251, 1, 251, 1, 251, 1, 251, 1,
		251, 3, 251, 3564, 8, 251, 1, 252, 1, 252, 1, 252, 3, 252, 3569, 8, 252,
		1, 253, 1, 253, 1, 253, 1, 253, 1, 253, 1, 253, 1, 253, 1, 253, 1, 253,
		1, 253, 3, 253, 3581, 8, 253, 1, 254, 1, 254, 3, 254, 3585, 8, 254, 1,
		255, 1, 255, 1, 255, 1, 255, 3, 255, 3591, 8, 255, 1, 256, 1, 256, 1, 256,
		1, 256, 1, 256, 1, 257, 1, 257, 1, 257, 1, 257, 1, 257, 5, 257, 3603, 8,
		257, 10, 257, 12, 257, 3606, 9, 257, 3, 257, 3608, 8, 257, 1, 257, 1, 257,
		1, 258, 1, 258, 3, 258, 3614, 8, 258, 1, 258, 3, 258, 3617, 8, 258, 1,
		258, 1, 258, 1, 258, 3, 258, 3622, 8, 258, 1, 259, 1, 259, 3, 259, 3626,
		8, 259, 1, 260, 1, 260, 1, 260, 1, 260, 1, 260, 1, 261, 1, 261, 3, 261,
		3635, 8, 261, 1, 261, 3, 261, 3638, 8, 261, 1, 261, 3, 261, 3641, 8, 261,
		1, 262, 1, 262, 1, 263, 1, 263, 1, 263, 1, 264, 1, 264, 3, 264, 3650, 8,
		264, 1, 265, 1, 265, 1, 265, 1, 265, 1, 266, 1, 266, 1, 266, 1, 266, 3,
		266, 3660, 8, 266, 1, 266, 3, 266, 3663, 8, 266, 1, 267, 1, 267, 1, 267,
		1, 267, 5, 267, 3669, 8, 267, 10, 267, 12, 267, 3672, 9, 267, 3, 267, 3674,
		8, 267, 1, 267, 1, 267, 1, 268, 1, 268, 3, 268, 3680, 8, 268, 1, 268, 3,
		268, 3683, 8, 268, 1, 269, 1, 269, 1, 269, 1, 269, 1, 269, 3, 269, 3690,
		8, 269, 1, 269, 3, 269, 3693, 8, 269, 1, 269, 1, 269, 1, 269, 1, 269, 1,
		269, 3, 269, 3700, 8, 269, 1, 269, 3, 269, 3703, 8, 269, 3, 269, 3705,
		8, 269, 1, 270, 1, 270, 1, 270, 1, 270, 3, 270, 3711, 8, 270, 1, 270, 3,
		270, 3714, 8, 270, 1, 271, 1, 271, 3, 271, 3718, 8, 271, 1, 271, 1, 271,
		3, 271, 3722, 8, 271, 3, 271, 3724, 8, 271, 1, 272, 1, 272, 1, 272, 1,
		272, 1, 273, 1, 273, 1, 273, 1, 273, 1, 274, 1, 274, 1, 274, 1, 274, 1,
		274, 1, 274, 3, 274, 3740, 8, 274, 1, 275, 1, 275, 1, 275, 1, 276, 1, 276,
		1, 276, 1, 276, 3, 276, 3749, 8, 276, 1, 277, 1, 277, 1, 277, 1, 277, 5,
		277, 3755, 8, 277, 10, 277, 12, 277, 3758, 9, 277, 1, 277, 1, 277, 1, 278,
		1, 278, 1, 278, 1, 279, 3, 279, 3766, 8, 279, 1, 279, 1, 279, 1, 280, 1,
		280, 3, 280, 3772, 8, 280, 1, 281, 1, 281, 1, 281, 1, 282, 1, 282, 3, 282,
		3779, 8, 282, 1, 283, 1, 283, 1, 284, 1, 284, 1, 284, 3, 284, 3786, 8,
		284, 1, 284, 3, 284, 3789, 8, 284, 1, 284, 1, 284, 1, 284, 1, 284, 1, 284,
		1, 284, 1, 284, 1, 284, 1, 284, 1, 284, 3, 284, 3801, 8, 284, 1, 284, 3,
		284, 3804, 8, 284, 1, 284, 3, 284, 3807, 8, 284, 1, 284, 1, 284, 1, 284,
		1, 284, 3, 284, 3813, 8, 284, 1, 284, 1, 284, 1, 284, 1, 284, 1, 284, 3,
		284, 3820, 8, 284, 1, 284, 1, 284, 1, 284, 1, 284, 3, 284, 3826, 8, 284,
		1, 285, 1, 285, 1, 286, 1, 286, 1, 287, 1, 287, 1, 287, 1, 288, 1, 288,
		1, 289, 1, 289, 3, 289, 3839, 8, 289, 1, 290, 1, 290, 1, 291, 1, 291, 1,
		291, 4, 291, 3846, 8, 291, 11, 291, 12, 291, 3847, 1, 291, 1, 291, 1, 291,
		1, 291, 1, 291, 3, 291, 3855, 8, 291, 1, 291, 1, 291, 1, 291, 1, 291, 1,
		291, 5, 291, 3862, 8, 291, 10, 291, 12, 291, 3865, 9, 291, 1, 292, 1, 292,
		1, 292, 1, 293, 1, 293, 1, 293, 3, 293, 3873, 8, 293, 3, 293, 3875, 8,
		293, 1, 294, 3, 294, 3878, 8, 294, 1, 294, 1, 294, 3, 294, 3882, 8, 294,
		1, 294, 1, 294, 3, 294, 3886, 8, 294, 1, 294, 3, 294, 3889, 8, 294, 1,
		295, 1, 295, 1, 295, 3, 295, 3894, 8, 295, 1, 296, 1, 296, 1, 297, 1, 297,
		1, 298, 1, 298, 1, 299, 1, 299, 3, 299, 3904, 8, 299, 1, 299, 1, 299, 1,
		299, 3, 299, 3909, 8, 299, 3, 299, 3911, 8, 299, 1, 300, 1, 300, 1, 301,
		1, 301, 3, 301, 3917, 8, 301, 1, 301, 1, 301, 1, 301, 5, 301, 3922, 8,
		301, 10, 301, 12, 301, 3925, 9, 301, 1, 302, 1, 302, 1, 302, 1, 302, 3,
		302, 3931, 8, 302, 1, 303, 1, 303, 1, 304, 1, 304, 1, 304, 3, 304, 3938,
		8, 304, 1, 304, 1, 304, 1, 304, 3, 304, 3943, 8, 304, 1, 304, 1, 304, 1,
		304, 1, 304, 1, 304, 1, 304, 1, 304, 1, 304, 3, 304, 3953, 8, 304, 1, 304,
		1, 304, 3, 304, 3957, 8, 304, 1, 305, 1, 305, 3, 305, 3961, 8, 305, 1,
		306, 1, 306, 1, 306, 3, 306, 3966, 8, 306, 1, 307, 1, 307, 1, 308, 1, 308,
		3, 308, 3972, 8, 308, 1, 308, 1, 308, 1, 308, 1, 308, 5, 308, 3978, 8,
		308, 10, 308, 12, 308, 3981, 9, 308, 1, 309, 1, 309, 3, 309, 3985, 8, 309,
		1, 309, 3, 309, 3988, 8, 309, 1, 309, 3, 309, 3991, 8, 309, 1, 310, 1,
		310, 3, 310, 3995, 8, 310, 1, 310, 3, 310, 3998, 8, 310, 1, 311, 1, 311,
		3, 311, 4002, 8, 311, 1, 311, 3, 311, 4005, 8, 311, 1, 311, 3, 311, 4008,
		8, 311, 1, 311, 3, 311, 4011, 8, 311, 1, 311, 3, 311, 4014, 8, 311, 1,
		312, 1, 312, 3, 312, 4018, 8, 312, 1, 312, 3, 312, 4021, 8, 312, 1, 312,
		3, 312, 4024, 8, 312, 1, 312, 3, 312, 4027, 8, 312, 1, 313, 1, 313, 3,
		313, 4031, 8, 313, 1, 313, 3, 313, 4034, 8, 313, 1, 313, 1, 313, 3, 313,
		4038, 8, 313, 1, 313, 3, 313, 4041, 8, 313, 1, 314, 1, 314, 1, 315, 1,
		315, 1, 315, 1, 315, 5, 315, 4049, 8, 315, 10, 315, 12, 315, 4052, 9, 315,
		1, 316, 1, 316, 1, 316, 1, 316, 1, 317, 1, 317, 1, 317, 1, 318, 1, 318,
		1, 318, 1, 319, 1, 319, 3, 319, 4066, 8, 319, 1, 320, 1, 320, 1, 320, 1,
		321, 1, 321, 3, 321, 4073, 8, 321, 1, 321, 3, 321, 4076, 8, 321, 1, 321,
		3, 321, 4079, 8, 321, 1, 321, 3, 321, 4082, 8, 321, 1, 321, 1, 321, 1,
		321, 3, 321, 4087, 8, 321, 1, 321, 3, 321, 4090, 8, 321, 1, 321, 3, 321,
		4093, 8, 321, 1, 321, 3, 321, 4096, 8, 321, 1, 321, 1, 321, 3, 321, 4100,
		8, 321, 1, 322, 1, 322, 1, 322, 1, 322, 3, 322, 4106, 8, 322, 1, 323, 1,
		323, 1, 323, 1, 323, 1, 323, 1, 323, 1, 323, 3, 323, 4115, 8, 323, 1, 324,
		1, 324, 1, 324, 1, 325, 1, 325, 5, 325, 4122, 8, 325, 10, 325, 12, 325,
		4125, 9, 325, 1, 325, 1, 325, 1, 325, 1, 325, 1, 325, 1, 325, 3, 325, 4133,
		8, 325, 1, 326, 1, 326, 1, 326, 3, 326, 4138, 8, 326, 1, 326, 3, 326, 4141,
		8, 326, 1, 326, 3, 326, 4144, 8, 326, 1, 326, 1, 326, 3, 326, 4148, 8,
		326, 1, 326, 1, 326, 3, 326, 4152, 8, 326, 3, 326, 4154, 8, 326, 1, 327,
		1, 327, 1, 327, 1, 327, 1, 327, 1, 327, 1, 327, 1, 327, 3, 327, 4164, 8,
		327, 1, 327, 1, 327, 1, 327, 1, 327, 5, 327, 4170, 8, 327, 10, 327, 12,
		327, 4173, 9, 327, 1, 328, 1, 328, 1, 328, 3, 328, 4178, 8, 328, 1, 328,
		3, 328, 4181, 8, 328, 1, 328, 1, 328, 1, 328, 3, 328, 4186, 8, 328, 1,
		328, 3, 328, 4189, 8, 328, 3, 328, 4191, 8, 328, 1, 329, 1, 329, 1, 329,
		1, 329, 1, 329, 1, 329, 1, 329, 3, 329, 4200, 8, 329, 1, 329, 1, 329, 1,
		329, 1, 329, 3, 329, 4206, 8, 329, 1, 329, 1, 329, 1, 329, 1, 329, 1, 329,
		1, 329, 1, 329, 1, 329, 1, 329, 1, 329, 1, 329, 1, 329, 1, 329, 1, 329,
		1, 329, 1, 329, 1, 329, 1, 329, 1, 329, 3, 329, 4227, 8, 329, 1, 329, 1,
		329, 3, 329, 4231, 8, 329, 1, 329, 1, 329, 1, 329, 3, 329, 4236, 8, 329,
		1, 330, 3, 330, 4239, 8, 330, 1, 330, 1, 330, 1, 331, 1, 331, 1, 331, 1,
		331, 1, 331, 1, 331, 1, 331, 1, 332, 1, 332, 1, 332, 1, 332, 3, 332, 4254,
		8, 332, 1, 332, 1, 332, 1, 332, 1, 332, 3, 332, 4260, 8, 332, 1, 332, 1,
		332, 1, 332, 1, 332, 1, 332, 3, 332, 4267, 8, 332, 3, 332, 4269, 8, 332,
		1, 333, 1, 333, 1, 333, 1, 333, 1, 333, 1, 334, 1, 334, 3, 334, 4278, 8,
		334, 1, 335, 1, 335, 1, 335, 1, 335, 1, 335, 1, 335, 3, 335, 4286, 8, 335,
		1, 335, 1, 335, 1, 336, 1, 336, 1, 336, 3, 336, 4293, 8, 336, 1, 337, 1,
		337, 3, 337, 4297, 8, 337, 1, 338, 1, 338, 1, 339, 1, 339, 1, 339, 1, 339,
		1, 339, 5, 339, 4306, 8, 339, 10, 339, 12, 339, 4309, 9, 339, 1, 340, 1,
		340, 1, 340, 3, 340, 4314, 8, 340, 1, 340, 1, 340, 1, 340, 1, 340, 1, 340,
		1, 340, 1, 340, 1, 340, 1, 340, 1, 340, 1, 340, 3, 340, 4327, 8, 340, 1,
		341, 1, 341, 1, 341, 1, 341, 1, 341, 1, 341, 5, 341, 4335, 8, 341, 10,
		341, 12, 341, 4338, 9, 341, 1, 342, 1, 342, 1, 342, 1, 342, 1, 342, 5,
		342, 4345, 8, 342, 10, 342, 12, 342, 4348, 9, 342, 1, 343, 1, 343, 1, 343,
		1, 343, 1, 343, 3, 343, 4355, 8, 343, 1, 344, 1, 344, 1, 344, 5, 344, 4360,
		8, 344, 10, 344, 12, 344, 4363, 9, 344, 1, 345, 1, 345, 1, 345, 1, 345,
		1, 346, 1, 346, 3, 346, 4371, 8, 346, 1, 347, 1, 347, 5, 347, 4375, 8,
		347, 10, 347, 12, 347, 4378, 9, 347, 1, 348, 3, 348, 4381, 8, 348, 1, 348,
		3, 348, 4384, 8, 348, 1, 348, 3, 348, 4387, 8, 348, 1, 348, 1, 348, 3,
		348, 4391, 8, 348, 1, 348, 1, 348, 3, 348, 4395, 8, 348, 1, 349, 4, 349,
		4398, 8, 349, 11, 349, 12, 349, 4399, 1, 350, 1, 350, 3, 350, 4404, 8,
		350, 1, 351, 1, 351, 1, 351, 1, 351, 1, 351, 5, 351, 4411, 8, 351, 10,
		351, 12, 351, 4414, 9, 351, 1, 351, 1, 351, 1, 352, 1, 352, 1, 353, 1,
		353, 3, 353, 4422, 8, 353, 1, 353, 3, 353, 4425, 8, 353, 1, 353, 3, 353,
		4428, 8, 353, 1, 353, 3, 353, 4431, 8, 353, 1, 354, 1, 354, 1, 354, 1,
		354, 1, 354, 1, 354, 1, 354, 1, 354, 1, 354, 1, 354, 1, 354, 3, 354, 4444,
		8, 354, 1, 355, 1, 355, 1, 355, 3, 355, 4449, 8, 355, 1, 356, 1, 356, 1,
		356, 1, 356, 1, 356, 1, 356, 1, 356, 3, 356, 4458, 8, 356, 1, 356, 1, 356,
		1, 356, 1, 356, 3, 356, 4464, 8, 356, 1, 356, 1, 356, 1, 356, 1, 356, 1,
		356, 1, 356, 1, 356, 1, 356, 3, 356, 4474, 8, 356, 1, 356, 1, 356, 1, 356,
		3, 356, 4479, 8, 356, 1, 356, 1, 356, 1, 356, 1, 356, 1, 356, 1, 356, 3,
		356, 4487, 8, 356, 1, 356, 1, 356, 3, 356, 4491, 8, 356, 1, 356, 1, 356,
		1, 356, 3, 356, 4496, 8, 356, 1, 357, 1, 357, 1, 357, 1, 357, 1, 357, 1,
		357, 1, 357, 1, 357, 1, 357, 1, 357, 1, 357, 1, 357, 1, 357, 1, 357, 1,
		357, 1, 357, 1, 357, 1, 357, 1, 357, 1, 357, 3, 357, 4518, 8, 357, 1, 358,
		1, 358, 3, 358, 4522, 8, 358, 1, 359, 1, 359, 3, 359, 4526, 8, 359, 1,
		360, 1, 360, 1, 360, 1, 360, 1, 360, 1, 360, 5, 360, 4534, 8, 360, 10,
		360, 12, 360, 4537, 9, 360, 1, 361, 1, 361, 1, 361, 1, 361, 1, 361, 1,
		361, 1, 361, 1, 361, 1, 361, 1, 361, 1, 361, 1, 361, 1, 361, 1, 361, 3,
		361, 4553, 8, 361, 1, 361, 1, 361, 1, 361, 1, 361, 1, 361, 1, 361, 1, 361,
		1, 361, 1, 361, 1, 361, 1, 361, 5, 361, 4566, 8, 361, 10, 361, 12, 361,
		4569, 9, 361, 1, 362, 1, 362, 1, 362, 1, 362, 1, 362, 1, 362, 1, 362, 1,
		362, 1, 362, 1, 362, 1, 362, 1, 362, 1, 362, 1, 362, 5, 362, 4585, 8, 362,
		10, 362, 12, 362, 4588, 9, 362, 1, 363, 1, 363, 3, 363, 4592, 8, 363, 1,
		364, 1, 364, 1, 364, 1, 364, 1, 365, 1, 365, 1, 365, 1, 365, 1, 365, 1,
		365, 3, 365, 4604, 8, 365, 1, 366, 1, 366, 3, 366, 4608, 8, 366, 1, 366,
		1, 366, 1, 366, 1, 366, 1, 366, 1, 366, 3, 366, 4616, 8, 366, 1, 367, 1,
		367, 1, 367, 1, 367, 1, 367, 5, 367, 4623, 8, 367, 10, 367, 12, 367, 4626,
		9, 367, 1, 368, 1, 368, 1, 368, 1, 369, 1, 369, 3, 369, 4633, 8, 369, 1,
		370, 1, 370, 1, 370, 1, 370, 5, 370, 4639, 8, 370, 10, 370, 12, 370, 4642,
		9, 370, 1, 371, 1, 371, 1, 371, 1, 371, 1, 371, 1, 371, 1, 371, 1, 371,
		1, 371, 1, 371, 1, 371, 1, 371, 1, 371, 1, 371, 1, 371, 1, 371, 1, 371,
		1, 371, 1, 371, 1, 371, 1, 371, 1, 371, 1, 371, 1, 371, 1, 371, 1, 371,
		1, 371, 1, 371, 1, 371, 1, 371, 3, 371, 4674, 8, 371, 1, 372, 1, 372, 1,
		372, 1, 373, 1, 373, 3, 373, 4681, 8, 373, 1, 374, 1, 374, 1, 374, 1, 374,
		1, 374, 1, 375, 1, 375, 1, 375, 5, 375, 4691, 8, 375, 10, 375, 12, 375,
		4694, 9, 375, 1, 376, 1, 376, 1, 377, 1, 377, 1, 377, 1, 377, 3, 377, 4702,
		8, 377, 1, 378, 1, 378, 1, 378, 1, 379, 1, 379, 1, 379, 1, 380, 1, 380,
		3, 380, 4712, 8, 380, 1, 380, 1, 380, 1, 380, 1, 380, 1, 380, 1, 380, 1,
		380, 1, 380, 1, 381, 1, 381, 1, 381, 1, 382, 1, 382, 1, 382, 1, 382, 1,
		382, 1, 382, 1, 382, 5, 382, 4732, 8, 382, 10, 382, 12, 382, 4735, 9, 382,
		1, 383, 1, 383, 3, 383, 4739, 8, 383, 1, 384, 3, 384, 4742, 8, 384, 1,
		384, 1, 384, 3, 384, 4746, 8, 384, 1, 384, 3, 384, 4749, 8, 384, 1, 385,
		1, 385, 1, 385, 1, 385, 1, 385, 3, 385, 4756, 8, 385, 1, 386, 1, 386, 1,
		386, 5, 386, 4761, 8, 386, 10, 386, 12, 386, 4764, 9, 386, 1, 387, 1, 387,
		1, 387, 1, 387, 3, 387, 4770, 8, 387, 1, 388, 1, 388, 1, 388, 1, 388, 1,
		388, 1, 388, 1, 388, 1, 388, 1, 388, 1, 388, 1, 388, 1, 389, 1, 389, 1,
		389, 5, 389, 4786, 8, 389, 10, 389, 12, 389, 4789, 9, 389, 1, 390, 1, 390,
		3, 390, 4793, 8, 390, 1, 391, 1, 391, 1, 391, 5, 391, 4798, 8, 391, 10,
		391, 12, 391, 4801, 9, 391, 1, 392, 1, 392, 3, 392, 4805, 8, 392, 1, 393,
		1, 393, 1, 393, 3, 393, 4810, 8, 393, 1, 394, 1, 394, 1, 394, 3, 394, 4815,
		8, 394, 1, 394, 1, 394, 1, 394, 3, 394, 4820, 8, 394, 1, 394, 1, 394, 3,
		394, 4824, 8, 394, 3, 394, 4826, 8, 394, 1, 395, 1, 395, 1, 396, 1, 396,
		1, 396, 1, 397, 1, 397, 1, 397, 5, 397, 4836, 8, 397, 10, 397, 12, 397,
		4839, 9, 397, 1, 397, 3, 397, 4842, 8, 397, 1, 398, 1, 398, 1, 398, 3,
		398, 4847, 8, 398, 1, 399, 1, 399, 3, 399, 4851, 8, 399, 1, 400, 1, 400,
		1, 400, 1, 400, 1, 400, 3, 400, 4858, 8, 400, 1, 401, 1, 401, 1, 401, 1,
		401, 3, 401, 4864, 8, 401, 1, 402, 1, 402, 3, 402, 4868, 8, 402, 1, 402,
		3, 402, 4871, 8, 402, 1, 403, 1, 403, 1, 403, 1, 403, 1, 403, 5, 403, 4878,
		8, 403, 10, 403, 12, 403, 4881, 9, 403, 1, 403, 1, 403, 1, 404, 1, 404,
		1, 404, 1, 404, 1, 404, 5, 404, 4890, 8, 404, 10, 404, 12, 404, 4893, 9,
		404, 1, 404, 1, 404, 1, 405, 1, 405, 1, 405, 1, 405, 1, 406, 1, 406, 1,
		406, 3, 406, 4904, 8, 406, 1, 406, 1, 406, 1, 406, 5, 406, 4909, 8, 406,
		10, 406, 12, 406, 4912, 9, 406, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407,
		1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407,
		1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407,
		1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407,
		1, 407, 1, 407, 1, 407, 1, 407, 3, 407, 4950, 8, 407, 1, 407, 1, 407, 1,
		407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1,
		407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1,
		407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1,
		407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1,
		407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1,
		407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1,
		407, 1, 407, 1, 407, 1, 407, 3, 407, 5012, 8, 407, 1, 407, 1, 407, 1, 407,
		1, 407, 1, 407, 1, 407, 3, 407, 5020, 8, 407, 1, 407, 1, 407, 1, 407, 1,
		407, 1, 407, 3, 407, 5027, 8, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407,
		1, 407, 3, 407, 5035, 8, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1,
		407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 1,
		407, 1, 407, 1, 407, 1, 407, 1, 407, 1, 407, 5, 407, 5057, 8, 407, 10,
		407, 12, 407, 5060, 9, 407, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1,
		408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1,
		408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1,
		408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1,
		408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1,
		408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 3,
		408, 5112, 8, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 3, 408,
		5120, 8, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1,
		408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 3, 408, 5135, 8, 408, 1, 408,
		1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 3, 408, 5143, 8, 408, 1, 408, 1,
		408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1,
		408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1,
		408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1,
		408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1,
		408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1,
		408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1,
		408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1, 408, 1,
		408, 1, 408, 3, 408, 5211, 8, 408, 1, 409, 1, 409, 1, 409, 1, 409, 1, 409,
		1, 409, 1, 409, 1, 409, 3, 409, 5221, 8, 409, 1, 410, 1, 410, 1, 411, 1,
		411, 1, 412, 1, 412, 1, 413, 1, 413, 1, 414, 1, 414, 1, 415, 1, 415, 3,
		415, 5235, 8, 415, 1, 416, 3, 416, 5238, 8, 416, 1, 416, 1, 416, 1, 417,
		3, 417, 5243, 8, 417, 1, 417, 1, 417, 1, 418, 1, 418, 3, 418, 5249, 8,
		418, 1, 418, 1, 418, 1, 418, 1, 419, 1, 419, 1, 419, 1, 419, 1, 420, 1,
		420, 1, 420, 1, 420, 1, 421, 1, 421, 1, 421, 1, 421, 1, 421, 3, 421, 5267,
		8, 421, 1, 422, 1, 422, 1, 422, 1, 422, 1, 422, 5, 422, 5274, 8, 422, 10,
		422, 12, 422, 5277, 9, 422, 1, 423, 1, 423, 1, 423, 1, 423, 1, 423, 1,
		423, 5, 423, 5285, 8, 423, 10, 423, 12, 423, 5288, 9, 423, 1, 424, 1, 424,
		1, 425, 1, 425, 1, 425, 3, 425, 5295, 8, 425, 1, 426, 1, 426, 1, 426, 1,
		426, 3, 426, 5301, 8, 426, 1, 426, 3, 426, 5304, 8, 426, 1, 427, 1, 427,
		1, 427, 1, 427, 1, 427, 1, 427, 1, 427, 1, 427, 1, 427, 3, 427, 5315, 8,
		427, 1, 428, 1, 428, 1, 428, 1, 428, 5, 428, 5321, 8, 428, 10, 428, 12,
		428, 5324, 9, 428, 1, 429, 1, 429, 3, 429, 5328, 8, 429, 1, 430, 1, 430,
		1, 430, 1, 430, 1, 430, 1, 430, 5, 430, 5336, 8, 430, 10, 430, 12, 430,
		5339, 9, 430, 1, 431, 1, 431, 1, 431, 1, 431, 1, 431, 3, 431, 5346, 8,
		431, 1, 432, 1, 432, 1, 432, 1, 432, 1, 432, 3, 432, 5353, 8, 432, 1, 433,
		1, 433, 1, 433, 3, 433, 5358, 8, 433, 1, 433, 1, 433, 1, 433, 1, 433, 1,
		433, 1, 433, 3, 433, 5366, 8, 433, 1, 434, 3, 434, 5369, 8, 434, 1, 434,
		3, 434, 5372, 8, 434, 1, 434, 3, 434, 5375, 8, 434, 1, 434, 1, 434, 1,
		434, 3, 434, 5380, 8, 434, 1, 434, 1, 434, 5, 434, 5384, 8, 434, 10, 434,
		12, 434, 5387, 9, 434, 1, 434, 3, 434, 5390, 8, 434, 1, 434, 3, 434, 5393,
		8, 434, 1, 434, 3, 434, 5396, 8, 434, 1, 434, 3, 434, 5399, 8, 434, 1,
		434, 3, 434, 5402, 8, 434, 1, 434, 3, 434, 5405, 8, 434, 1, 434, 3, 434,
		5408, 8, 434, 1, 434, 3, 434, 5411, 8, 434, 1, 434, 3, 434, 5414, 8, 434,
		1, 434, 3, 434, 5417, 8, 434, 1, 435, 1, 435, 1, 435, 1, 436, 1, 436, 1,
		436, 3, 436, 5425, 8, 436, 1, 436, 3, 436, 5428, 8, 436, 1, 436, 3, 436,
		5431, 8, 436, 1, 436, 3, 436, 5434, 8, 436, 1, 436, 3, 436, 5437, 8, 436,
		1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437, 1, 437,
		3, 437, 5448, 8, 437, 1, 438, 1, 438, 1, 438, 1, 438, 1, 438, 1, 438, 1,
		438, 3, 438, 5457, 8, 438, 1, 439, 1, 439, 1, 440, 1, 440, 1, 441, 1, 441,
		1, 442, 1, 442, 3, 442, 5467, 8, 442, 1, 442, 1, 442, 1, 442, 1, 442, 5,
		442, 5473, 8, 442, 10, 442, 12, 442, 5476, 9, 442, 1, 443, 1, 443, 1, 443,
		1, 443, 1, 444, 1, 444, 1, 444, 1, 444, 1, 445, 1, 445, 1, 445, 1, 445,
		1, 445, 1, 446, 1, 446, 1, 447, 1, 447, 1, 447, 1, 447, 1, 447, 3, 447,
		5498, 8, 447, 1, 448, 1, 448, 1, 448, 1, 448, 5, 448, 5504, 8, 448, 10,
		448, 12, 448, 5507, 9, 448, 1, 449, 1, 449, 1, 449, 1, 449, 1, 450, 1,
		450, 3, 450, 5515, 8, 450, 1, 451, 1, 451, 1, 452, 1, 452, 1, 452, 1, 452,
		3, 452, 5523, 8, 452, 1, 453, 1, 453, 3, 453, 5527, 8, 453, 1, 453, 1,
		453, 1, 453, 1, 453, 1, 453, 3, 453, 5534, 8, 453, 1, 454, 1, 454, 1, 454,
		1, 455, 1, 455, 1, 455, 1, 455, 1, 455, 1, 455, 1, 455, 1, 455, 3, 455,
		5547, 8, 455, 1, 456, 1, 456, 1, 456, 1, 456, 1, 457, 1, 457, 1, 457, 3,
		457, 5556, 8, 457, 1, 458, 1, 458, 1, 458, 1, 458, 1, 458, 1, 458, 1, 458,
		3, 458, 5565, 8, 458, 1, 459, 1, 459, 1, 459, 1, 459, 1, 459, 1, 459, 1,
		459, 1, 459, 3, 459, 5575, 8, 459, 1, 460, 1, 460, 1, 460, 1, 460, 5, 460,
		5581, 8, 460, 10, 460, 12, 460, 5584, 9, 460, 1, 461, 1, 461, 3, 461, 5588,
		8, 461, 1, 461, 3, 461, 5591, 8, 461, 1, 461, 1, 461, 1, 462, 1, 462, 1,
		462, 1, 463, 1, 463, 1, 463, 3, 463, 5601, 8, 463, 1, 464, 1, 464, 1, 464,
		1, 465, 1, 465, 1, 465, 1, 465, 3, 465, 5610, 8, 465, 1, 465, 1, 465, 1,
		465, 1, 465, 5, 465, 5616, 8, 465, 10, 465, 12, 465, 5619, 9, 465, 1, 466,
		1, 466, 1, 466, 1, 466, 1, 466, 1, 466, 1, 466, 1, 466, 1, 466, 1, 466,
		3, 466, 5631, 8, 466, 1, 467, 1, 467, 3, 467, 5635, 8, 467, 1, 468, 1,
		468, 1, 469, 1, 469, 1, 469, 1, 469, 3, 469, 5643, 8, 469, 1, 469, 3, 469,
		5646, 8, 469, 1, 469, 1, 469, 1, 469, 1, 469, 1, 469, 1, 469, 1, 469, 1,
		469, 1, 469, 3, 469, 5657, 8, 469, 1, 470, 1, 470, 1, 470, 1, 470, 1, 470,
		1, 470, 5, 470, 5665, 8, 470, 10, 470, 12, 470, 5668, 9, 470, 1, 471, 1,
		471, 1, 471, 1, 471, 1, 471, 1, 471, 1, 471, 1, 471, 1, 471, 3, 471, 5679,
		8, 471, 1, 472, 1, 472, 1, 472, 1, 472, 5, 472, 5685, 8, 472, 10, 472,
		12, 472, 5688, 9, 472, 1, 473, 1, 473, 1, 473, 1, 473, 1, 473, 5, 473,
		5695, 8, 473, 10, 473, 12, 473, 5698, 9, 473, 1, 474, 1, 474, 1, 474, 1,
		475, 1, 475, 3, 475, 5705, 8, 475, 1, 476, 1, 476, 3, 476, 5709, 8, 476,
		1, 477, 1, 477, 1, 478, 1, 478, 1, 478, 1, 478, 3, 478, 5717, 8, 478, 1,
		479, 1, 479, 1, 480, 1, 480, 1, 480, 1, 481, 1, 481, 1, 481, 1, 481, 1,
		481, 1, 481, 1, 481, 5, 481, 5731, 8, 481, 10, 481, 12, 481, 5734, 9, 481,
		1, 482, 1, 482, 1, 482, 1, 482, 1, 482, 1, 482, 1, 482, 1, 482, 3, 482,
		5744, 8, 482, 1, 483, 1, 483, 1, 483, 1, 483, 1, 483, 1, 483, 1, 483, 1,
		483, 1, 483, 1, 483, 1, 483, 1, 483, 1, 483, 1, 483, 5, 483, 5760, 8, 483,
		10, 483, 12, 483, 5763, 9, 483, 1, 484, 1, 484, 1, 484, 1, 484, 1, 484,
		1, 484, 1, 484, 1, 484, 1, 484, 1, 484, 1, 484, 1, 484, 1, 484, 1, 484,
		5, 484, 5779, 8, 484, 10, 484, 12, 484, 5782, 9, 484, 1, 485, 1, 485, 1,
		485, 1, 485, 1, 485, 1, 485, 1, 485, 1, 486, 1, 486, 1, 486, 5, 486, 5794,
		8, 486, 10, 486, 12, 486, 5797, 9, 486, 1, 487, 1, 487, 1, 487, 1, 487,
		1, 488, 1, 488, 1, 488, 1, 488, 1, 488, 1, 488, 1, 488, 1, 488, 1, 488,
		1, 488, 3, 488, 5813, 8, 488, 1, 489, 1, 489, 1, 489, 1, 489, 1, 489, 1,
		489, 1, 490, 1, 490, 1, 490, 3, 490, 5824, 8, 490, 1, 491, 1, 491, 1, 491,
		1, 491, 1, 491, 1, 492, 1, 492, 1, 492, 1, 492, 1, 492, 1, 492, 3, 492,
		5837, 8, 492, 1, 492, 1, 492, 1, 492, 1, 492, 1, 492, 1, 492, 1, 492, 1,
		492, 1, 492, 1, 492, 1, 492, 1, 492, 3, 492, 5851, 8, 492, 1, 492, 1, 492,
		1, 492, 1, 492, 1, 492, 1, 492, 3, 492, 5859, 8, 492, 1, 493, 1, 493, 1,
		493, 1, 493, 1, 493, 1, 493, 1, 493, 1, 493, 3, 493, 5869, 8, 493, 1, 494,
		1, 494, 3, 494, 5873, 8, 494, 1, 495, 1, 495, 1, 495, 1, 495, 1, 495, 1,
		495, 1, 495, 4, 495, 5882, 8, 495, 11, 495, 12, 495, 5883, 1, 496, 1, 496,
		1, 496, 1, 496, 1, 496, 1, 496, 4, 496, 5892, 8, 496, 11, 496, 12, 496,
		5893, 1, 497, 1, 497, 1, 497, 1, 497, 1, 497, 3, 497, 5901, 8, 497, 1,
		498, 1, 498, 1, 498, 1, 498, 1, 499, 1, 499, 1, 499, 1, 499, 1, 499, 1,
		499, 1, 499, 1, 499, 3, 499, 5915, 8, 499, 1, 500, 1, 500, 1, 501, 1, 501,
		1, 501, 1, 501, 1, 501, 1, 501, 1, 501, 3, 501, 5926, 8, 501, 1, 501, 1,
		501, 1, 501, 1, 501, 1, 501, 1, 501, 1, 501, 1, 501, 5, 501, 5936, 8, 501,
		10, 501, 12, 501, 5939, 9, 501, 1, 502, 1, 502, 1, 502, 1, 503, 1, 503,
		1, 504, 1, 504, 1, 504, 3, 504, 5949, 8, 504, 1, 505, 1, 505, 1, 505, 1,
		505, 1, 506, 1, 506, 1, 506, 1, 506, 1, 506, 1, 506, 3, 506, 5961, 8, 506,
		1, 507, 1, 507, 1, 507, 1, 507, 5, 507, 5967, 8, 507, 10, 507, 12, 507,
		5970, 9, 507, 1, 508, 1, 508, 1, 508, 1, 508, 1, 509, 1, 509, 1, 509, 1,
		509, 1, 509, 1, 509, 1, 509, 1, 509, 1, 509, 1, 509, 1, 509, 3, 509, 5987,
		8, 509, 1, 510, 1, 510, 1, 510, 1, 510, 1, 510, 1, 510, 3, 510, 5995, 8,
		510, 1, 511, 1, 511, 1, 511, 1, 511, 5, 511, 6001, 8, 511, 10, 511, 12,
		511, 6004, 9, 511, 1, 512, 1, 512, 1, 512, 1, 512, 1, 512, 1, 512, 3, 512,
		6012, 8, 512, 1, 513, 1, 513, 1, 513, 1, 514, 1, 514, 1, 514, 1, 514, 1,
		514, 1, 515, 1, 515, 3, 515, 6024, 8, 515, 1, 515, 3, 515, 6027, 8, 515,
		1, 516, 1, 516, 1, 516, 1, 517, 1, 517, 1, 517, 3, 517, 6035, 8, 517, 1,
		518, 1, 518, 1, 518, 1, 519, 1, 519, 3, 519, 6042, 8, 519, 1, 520, 1, 520,
		1, 520, 1, 521, 1, 521, 1, 521, 1, 521, 1, 521, 1, 521, 1, 521, 1, 521,
		3, 521, 6055, 8, 521, 1, 522, 1, 522, 1, 522, 1, 522, 5, 522, 6061, 8,
		522, 10, 522, 12, 522, 6064, 9, 522, 1, 523, 1, 523, 1, 523, 1, 523, 1,
		523, 1, 523, 3, 523, 6072, 8, 523, 1, 524, 1, 524, 1, 524, 1, 524, 1, 524,
		1, 524, 3, 524, 6080, 8, 524, 1, 525, 1, 525, 1, 525, 1, 525, 1, 525, 1,
		525, 1, 525, 1, 526, 1, 526, 1, 526, 1, 526, 1, 526, 1, 526, 1, 526, 1,
		526, 1, 526, 1, 526, 1, 526, 1, 526, 1, 526, 1, 526, 1, 526, 1, 526, 1,
		526, 1, 526, 1, 526, 1, 526, 1, 526, 3, 526, 6110, 8, 526, 1, 527, 1, 527,
		1, 527, 1, 527, 1, 527, 1, 527, 5, 527, 6118, 8, 527, 10, 527, 12, 527,
		6121, 9, 527, 1, 528, 1, 528, 3, 528, 6125, 8, 528, 1, 529, 1, 529, 1,
		529, 5, 529, 6130, 8, 529, 10, 529, 12, 529, 6133, 9, 529, 1, 530, 1, 530,
		3, 530, 6137, 8, 530, 1, 531, 1, 531, 3, 531, 6141, 8, 531, 1, 532, 1,
		532, 1, 533, 1, 533, 1, 534, 1, 534, 1, 534, 1, 534, 1, 534, 1, 534, 1,
		534, 3, 534, 6154, 8, 534, 1, 535, 1, 535, 1, 535, 1, 535, 1, 535, 5, 535,
		6161, 8, 535, 10, 535, 12, 535, 6164, 9, 535, 1, 536, 1, 536, 1, 536, 1,
		536, 3, 536, 6170, 8, 536, 1, 537, 1, 537, 1, 537, 1, 537, 1, 537, 1, 538,
		1, 538, 1, 539, 1, 539, 1, 540, 1, 540, 1, 540, 1, 541, 1, 541, 1, 542,
		1, 542, 1, 543, 1, 543, 1, 543, 1, 544, 1, 544, 1, 544, 1, 545, 1, 545,
		1, 546, 1, 546, 1, 546, 1, 547, 1, 547, 1, 548, 1, 548, 1, 549, 1, 549,
		1, 549, 1, 549, 1, 549, 1, 549, 1, 549, 1, 549, 1, 549, 1, 549, 1, 549,
		5, 549, 6214, 8, 549, 10, 549, 12, 549, 6217, 9, 549, 1, 550, 1, 550, 1,
		551, 1, 551, 1, 552, 1, 552, 1, 552, 1, 552, 1, 552, 1, 552, 1, 552, 1,
		552, 1, 552, 1, 552, 1, 552, 5, 552, 6234, 8, 552, 10, 552, 12, 552, 6237,
		9, 552, 1, 553, 1, 553, 1, 554, 1, 554, 1, 554, 0, 15, 582, 654, 682, 684,
		720, 722, 724, 764, 812, 814, 966, 968, 1002, 1098, 1104, 555, 0, 2, 4,
		6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42,
		44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78,
		80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112,
		114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142,
		144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172,
		174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202,
		204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232,
		234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262,
		264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292,
		294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322,
		324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352,
		354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382,
		384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412,
		414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442,
		444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472,
		474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502,
		504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532,
		534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562,
		564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592,
		594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622,
		624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652,
		654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682,
		684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712,
		714, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742,
		744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 768, 770, 772,
		774, 776, 778, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802,
		804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832,
		834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862,
		864, 866, 868, 870, 872, 874, 876, 878, 880, 882, 884, 886, 888, 890, 892,
		894, 896, 898, 900, 902, 904, 906, 908, 910, 912, 914, 916, 918, 920, 922,
		924, 926, 928, 930, 932, 934, 936, 938, 940, 942, 944, 946, 948, 950, 952,
		954, 956, 958, 960, 962, 964, 966, 968, 970, 972, 974, 976, 978, 980, 982,
		984, 986, 988, 990, 992, 994, 996, 998, 1000, 1002, 1004, 1006, 1008, 1010,
		1012, 1014, 1016, 1018, 1020, 1022, 1024, 1026, 1028, 1030, 1032, 1034,
		1036, 1038, 1040, 1042, 1044, 1046, 1048, 1050, 1052, 1054, 1056, 1058,
		1060, 1062, 1064, 1066, 1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082,
		1084, 1086, 1088, 1090, 1092, 1094, 1096, 1098, 1100, 1102, 1104, 1106,
		1108, 0, 33, 2, 0, 62, 62, 157, 157, 2, 0, 251, 251, 281, 281, 2, 0, 153,
		153, 190, 190, 2, 0, 15, 15, 20, 20, 3, 0, 71, 71, 187, 187, 216, 216,
		3, 0, 224, 224, 229, 229, 269, 270, 2, 0, 218, 218, 336, 336, 2, 0, 228,
		228, 350, 350, 2, 0, 239, 239, 350, 350, 3, 0, 93, 93, 305, 305, 327, 327,
		5, 0, 66, 66, 74, 74, 76, 76, 84, 84, 98, 98, 2, 0, 69, 69, 93, 93, 2,
		0, 55, 55, 64, 64, 3, 0, 66, 66, 74, 74, 98, 98, 2, 0, 86, 86, 313, 313,
		2, 0, 308, 308, 326, 326, 2, 0, 10, 11, 14, 14, 1, 0, 1, 7, 1, 0, 8, 9,
		1, 0, 10, 11, 1, 0, 12, 13, 2, 0, 55, 55, 331, 332, 1, 0, 318, 319, 2,
		0, 117, 117, 313, 313, 2, 0, 1, 1, 36, 37, 1, 0, 308, 310, 2, 0, 57, 57,
		62, 62, 4, 0, 75, 75, 89, 89, 117, 117, 301, 303, 13, 0, 72, 72, 81, 81,
		83, 83, 86, 87, 91, 92, 95, 96, 101, 101, 105, 108, 112, 116, 120, 254,
		256, 292, 338, 338, 343, 349, 1, 0, 113, 116, 1, 0, 107, 108, 1, 0, 105,
		106, 1, 0, 103, 104, 6760, 0, 1110, 1, 0, 0, 0, 2, 1113, 1, 0, 0, 0, 4,
		1136, 1, 0, 0, 0, 6, 1180, 1, 0, 0, 0, 8, 1182, 1, 0, 0, 0, 10, 1193, 1,
		0, 0, 0, 12, 1202, 1, 0, 0, 0, 14, 1205, 1, 0, 0, 0, 16, 1213, 1, 0, 0,
		0, 18, 1216, 1, 0, 0, 0, 20, 1225, 1, 0, 0, 0, 22, 1228, 1, 0, 0, 0, 24,
		1231, 1, 0, 0, 0, 26, 1239, 1, 0, 0, 0, 28, 1244, 1, 0, 0, 0, 30, 1248,
		1, 0, 0, 0, 32, 1254, 1, 0, 0, 0, 34, 1257, 1, 0, 0, 0, 36, 1259, 1, 0,
		0, 0, 38, 1265, 1, 0, 0, 0, 40, 1280, 1, 0, 0, 0, 42, 1364, 1, 0, 0, 0,
		44, 1370, 1, 0, 0, 0, 46, 1372, 1, 0, 0, 0, 48, 1383, 1, 0, 0, 0, 50, 1387,
		1, 0, 0, 0, 52, 1435, 1, 0, 0, 0, 54, 1442, 1, 0, 0, 0, 56, 1445, 1, 0,
		0, 0, 58, 1452, 1, 0, 0, 0, 60, 1455, 1, 0, 0, 0, 62, 1459, 1, 0, 0, 0,
		64, 1466, 1, 0, 0, 0, 66, 1470, 1, 0, 0, 0, 68, 1503, 1, 0, 0, 0, 70, 1513,
		1, 0, 0, 0, 72, 1515, 1, 0, 0, 0, 74, 1528, 1, 0, 0, 0, 76, 1546, 1, 0,
		0, 0, 78, 1564, 1, 0, 0, 0, 80, 1579, 1, 0, 0, 0, 82, 1596, 1, 0, 0, 0,
		84, 1600, 1, 0, 0, 0, 86, 1614, 1, 0, 0, 0, 88, 1632, 1, 0, 0, 0, 90, 1635,
		1, 0, 0, 0, 92, 1640, 1, 0, 0, 0, 94, 1658, 1, 0, 0, 0, 96, 1660, 1, 0,
		0, 0, 98, 1668, 1, 0, 0, 0, 100, 1672, 1, 0, 0, 0, 102, 1675, 1, 0, 0,
		0, 104, 1682, 1, 0, 0, 0, 106, 1690, 1, 0, 0, 0, 108, 1698, 1, 0, 0, 0,
		110, 1701, 1, 0, 0, 0, 112, 1728, 1, 0, 0, 0, 114, 1733, 1, 0, 0, 0, 116,
		1744, 1, 0, 0, 0, 118, 1746, 1, 0, 0, 0, 120, 1754, 1, 0, 0, 0, 122, 1757,
		1, 0, 0, 0, 124, 1769, 1, 0, 0, 0, 126, 1797, 1, 0, 0, 0, 128, 1800, 1,
		0, 0, 0, 130, 1803, 1, 0, 0, 0, 132, 1826, 1, 0, 0, 0, 134, 1836, 1, 0,
		0, 0, 136, 1838, 1, 0, 0, 0, 138, 1855, 1, 0, 0, 0, 140, 1859, 1, 0, 0,
		0, 142, 1872, 1, 0, 0, 0, 144, 1913, 1, 0, 0, 0, 146, 1915, 1, 0, 0, 0,
		148, 1920, 1, 0, 0, 0, 150, 1923, 1, 0, 0, 0, 152, 1946, 1, 0, 0, 0, 154,
		1948, 1, 0, 0, 0, 156, 1956, 1, 0, 0, 0, 158, 1961, 1, 0, 0, 0, 160, 1972,
		1, 0, 0, 0, 162, 1986, 1, 0, 0, 0, 164, 1990, 1, 0, 0, 0, 166, 1997, 1,
		0, 0, 0, 168, 2000, 1, 0, 0, 0, 170, 2002, 1, 0, 0, 0, 172, 2004, 1, 0,
		0, 0, 174, 2034, 1, 0, 0, 0, 176, 2036, 1, 0, 0, 0, 178, 2045, 1, 0, 0,
		0, 180, 2051, 1, 0, 0, 0, 182, 2054, 1, 0, 0, 0, 184, 2064, 1, 0, 0, 0,
		186, 2080, 1, 0, 0, 0, 188, 2082, 1, 0, 0, 0, 190, 2089, 1, 0, 0, 0, 192,
		2091, 1, 0, 0, 0, 194, 2102, 1, 0, 0, 0, 196, 2110, 1, 0, 0, 0, 198, 2113,
		1, 0, 0, 0, 200, 2120, 1, 0, 0, 0, 202, 2135, 1, 0, 0, 0, 204, 2137, 1,
		0, 0, 0, 206, 2147, 1, 0, 0, 0, 208, 2160, 1, 0, 0, 0, 210, 2170, 1, 0,
		0, 0, 212, 2172, 1, 0, 0, 0, 214, 2189, 1, 0, 0, 0, 216, 2193, 1, 0, 0,
		0, 218, 2214, 1, 0, 0, 0, 220, 2218, 1, 0, 0, 0, 222, 2222, 1, 0, 0, 0,
		224, 2225, 1, 0, 0, 0, 226, 2229, 1, 0, 0, 0, 228, 2231, 1, 0, 0, 0, 230,
		2257, 1, 0, 0, 0, 232, 2259, 1, 0, 0, 0, 234, 2261, 1, 0, 0, 0, 236, 2263,
		1, 0, 0, 0, 238, 2299, 1, 0, 0, 0, 240, 2301, 1, 0, 0, 0, 242, 2305, 1,
		0, 0, 0, 244, 2311, 1, 0, 0, 0, 246, 2320, 1, 0, 0, 0, 248, 2330, 1, 0,
		0, 0, 250, 2341, 1, 0, 0, 0, 252, 2343, 1, 0, 0, 0, 254, 2351, 1, 0, 0,
		0, 256, 2353, 1, 0, 0, 0, 258, 2356, 1, 0, 0, 0, 260, 2358, 1, 0, 0, 0,
		262, 2361, 1, 0, 0, 0, 264, 2364, 1, 0, 0, 0, 266, 2395, 1, 0, 0, 0, 268,
		2397, 1, 0, 0, 0, 270, 2400, 1, 0, 0, 0, 272, 2406, 1, 0, 0, 0, 274, 2408,
		1, 0, 0, 0, 276, 2424, 1, 0, 0, 0, 278, 2426, 1, 0, 0, 0, 280, 2434, 1,
		0, 0, 0, 282, 2436, 1, 0, 0, 0, 284, 2438, 1, 0, 0, 0, 286, 2444, 1, 0,
		0, 0, 288, 2456, 1, 0, 0, 0, 290, 2471, 1, 0, 0, 0, 292, 2474, 1, 0, 0,
		0, 294, 2476, 1, 0, 0, 0, 296, 2479, 1, 0, 0, 0, 298, 2482, 1, 0, 0, 0,
		300, 2487, 1, 0, 0, 0, 302, 2491, 1, 0, 0, 0, 304, 2527, 1, 0, 0, 0, 306,
		2529, 1, 0, 0, 0, 308, 2537, 1, 0, 0, 0, 310, 2547, 1, 0, 0, 0, 312, 2549,
		1, 0, 0, 0, 314, 2569, 1, 0, 0, 0, 316, 2571, 1, 0, 0, 0, 318, 2577, 1,
		0, 0, 0, 320, 2596, 1, 0, 0, 0, 322, 2626, 1, 0, 0, 0, 324, 2637, 1, 0,
		0, 0, 326, 2642, 1, 0, 0, 0, 328, 2644, 1, 0, 0, 0, 330, 2647, 1, 0, 0,
		0, 332, 2650, 1, 0, 0, 0, 334, 2652, 1, 0, 0, 0, 336, 2657, 1, 0, 0, 0,
		338, 2659, 1, 0, 0, 0, 340, 2684, 1, 0, 0, 0, 342, 2744, 1, 0, 0, 0, 344,
		2765, 1, 0, 0, 0, 346, 2767, 1, 0, 0, 0, 348, 2775, 1, 0, 0, 0, 350, 2777,
		1, 0, 0, 0, 352, 2787, 1, 0, 0, 0, 354, 2789, 1, 0, 0, 0, 356, 2793, 1,
		0, 0, 0, 358, 2799, 1, 0, 0, 0, 360, 2801, 1, 0, 0, 0, 362, 2812, 1, 0,
		0, 0, 364, 2830, 1, 0, 0, 0, 366, 2832, 1, 0, 0, 0, 368, 2837, 1, 0, 0,
		0, 370, 2839, 1, 0, 0, 0, 372, 2848, 1, 0, 0, 0, 374, 2861, 1, 0, 0, 0,
		376, 2863, 1, 0, 0, 0, 378, 2876, 1, 0, 0, 0, 380, 2878, 1, 0, 0, 0, 382,
		2889, 1, 0, 0, 0, 384, 2955, 1, 0, 0, 0, 386, 2957, 1, 0, 0, 0, 388, 2964,
		1, 0, 0, 0, 390, 2969, 1, 0, 0, 0, 392, 2995, 1, 0, 0, 0, 394, 3002, 1,
		0, 0, 0, 396, 3011, 1, 0, 0, 0, 398, 3023, 1, 0, 0, 0, 400, 3025, 1, 0,
		0, 0, 402, 3031, 1, 0, 0, 0, 404, 3035, 1, 0, 0, 0, 406, 3046, 1, 0, 0,
		0, 408, 3060, 1, 0, 0, 0, 410, 3062, 1, 0, 0, 0, 412, 3080, 1, 0, 0, 0,
		414, 3088, 1, 0, 0, 0, 416, 3090, 1, 0, 0, 0, 418, 3092, 1, 0, 0, 0, 420,
		3095, 1, 0, 0, 0, 422, 3103, 1, 0, 0, 0, 424, 3107, 1, 0, 0, 0, 426, 3134,
		1, 0, 0, 0, 428, 3136, 1, 0, 0, 0, 430, 3142, 1, 0, 0, 0, 432, 3150, 1,
		0, 0, 0, 434, 3158, 1, 0, 0, 0, 436, 3162, 1, 0, 0, 0, 438, 3168, 1, 0,
		0, 0, 440, 3170, 1, 0, 0, 0, 442, 3172, 1, 0, 0, 0, 444, 3193, 1, 0, 0,
		0, 446, 3195, 1, 0, 0, 0, 448, 3396, 1, 0, 0, 0, 450, 3398, 1, 0, 0, 0,
		452, 3403, 1, 0, 0, 0, 454, 3419, 1, 0, 0, 0, 456, 3425, 1, 0, 0, 0, 458,
		3427, 1, 0, 0, 0, 460, 3429, 1, 0, 0, 0, 462, 3437, 1, 0, 0, 0, 464, 3439,
		1, 0, 0, 0, 466, 3448, 1, 0, 0, 0, 468, 3459, 1, 0, 0, 0, 470, 3461, 1,
		0, 0, 0, 472, 3465, 1, 0, 0, 0, 474, 3469, 1, 0, 0, 0, 476, 3471, 1, 0,
		0, 0, 478, 3482, 1, 0, 0, 0, 480, 3496, 1, 0, 0, 0, 482, 3498, 1, 0, 0,
		0, 484, 3500, 1, 0, 0, 0, 486, 3502, 1, 0, 0, 0, 488, 3515, 1, 0, 0, 0,
		490, 3517, 1, 0, 0, 0, 492, 3536, 1, 0, 0, 0, 494, 3540, 1, 0, 0, 0, 496,
		3544, 1, 0, 0, 0, 498, 3547, 1, 0, 0, 0, 500, 3553, 1, 0, 0, 0, 502, 3563,
		1, 0, 0, 0, 504, 3568, 1, 0, 0, 0, 506, 3580, 1, 0, 0, 0, 508, 3582, 1,
		0, 0, 0, 510, 3590, 1, 0, 0, 0, 512, 3592, 1, 0, 0, 0, 514, 3597, 1, 0,
		0, 0, 516, 3621, 1, 0, 0, 0, 518, 3625, 1, 0, 0, 0, 520, 3627, 1, 0, 0,
		0, 522, 3632, 1, 0, 0, 0, 524, 3642, 1, 0, 0, 0, 526, 3644, 1, 0, 0, 0,
		528, 3649, 1, 0, 0, 0, 530, 3651, 1, 0, 0, 0, 532, 3655, 1, 0, 0, 0, 534,
		3664, 1, 0, 0, 0, 536, 3677, 1, 0, 0, 0, 538, 3704, 1, 0, 0, 0, 540, 3706,
		1, 0, 0, 0, 542, 3723, 1, 0, 0, 0, 544, 3725, 1, 0, 0, 0, 546, 3729, 1,
		0, 0, 0, 548, 3739, 1, 0, 0, 0, 550, 3741, 1, 0, 0, 0, 552, 3748, 1, 0,
		0, 0, 554, 3750, 1, 0, 0, 0, 556, 3761, 1, 0, 0, 0, 558, 3765, 1, 0, 0,
		0, 560, 3771, 1, 0, 0, 0, 562, 3773, 1, 0, 0, 0, 564, 3776, 1, 0, 0, 0,
		566, 3780, 1, 0, 0, 0, 568, 3825, 1, 0, 0, 0, 570, 3827, 1, 0, 0, 0, 572,
		3829, 1, 0, 0, 0, 574, 3831, 1, 0, 0, 0, 576, 3834, 1, 0, 0, 0, 578, 3838,
		1, 0, 0, 0, 580, 3840, 1, 0, 0, 0, 582, 3854, 1, 0, 0, 0, 584, 3866, 1,
		0, 0, 0, 586, 3874, 1, 0, 0, 0, 588, 3877, 1, 0, 0, 0, 590, 3893, 1, 0,
		0, 0, 592, 3895, 1, 0, 0, 0, 594, 3897, 1, 0, 0, 0, 596, 3899, 1, 0, 0,
		0, 598, 3910, 1, 0, 0, 0, 600, 3912, 1, 0, 0, 0, 602, 3914, 1, 0, 0, 0,
		604, 3926, 1, 0, 0, 0, 606, 3932, 1, 0, 0, 0, 608, 3956, 1, 0, 0, 0, 610,
		3960, 1, 0, 0, 0, 612, 3965, 1, 0, 0, 0, 614, 3967, 1, 0, 0, 0, 616, 3969,
		1, 0, 0, 0, 618, 3982, 1, 0, 0, 0, 620, 3992, 1, 0, 0, 0, 622, 4013, 1,
		0, 0, 0, 624, 4026, 1, 0, 0, 0, 626, 4040, 1, 0, 0, 0, 628, 4042, 1, 0,
		0, 0, 630, 4044, 1, 0, 0, 0, 632, 4053, 1, 0, 0, 0, 634, 4057, 1, 0, 0,
		0, 636, 4060, 1, 0, 0, 0, 638, 4065, 1, 0, 0, 0, 640, 4067, 1, 0, 0, 0,
		642, 4099, 1, 0, 0, 0, 644, 4105, 1, 0, 0, 0, 646, 4114, 1, 0, 0, 0, 648,
		4116, 1, 0, 0, 0, 650, 4132, 1, 0, 0, 0, 652, 4153, 1, 0, 0, 0, 654, 4163,
		1, 0, 0, 0, 656, 4190, 1, 0, 0, 0, 658, 4235, 1, 0, 0, 0, 660, 4238, 1,
		0, 0, 0, 662, 4242, 1, 0, 0, 0, 664, 4268, 1, 0, 0, 0, 666, 4270, 1, 0,
		0, 0, 668, 4277, 1, 0, 0, 0, 670, 4279, 1, 0, 0, 0, 672, 4289, 1, 0, 0,
		0, 674, 4296, 1, 0, 0, 0, 676, 4298, 1, 0, 0, 0, 678, 4300, 1, 0, 0, 0,
		680, 4310, 1, 0, 0, 0, 682, 4328, 1, 0, 0, 0, 684, 4339, 1, 0, 0, 0, 686,
		4354, 1, 0, 0, 0, 688, 4356, 1, 0, 0, 0, 690, 4364, 1, 0, 0, 0, 692, 4368,
		1, 0, 0, 0, 694, 4372, 1, 0, 0, 0, 696, 4380, 1, 0, 0, 0, 698, 4397, 1,
		0, 0, 0, 700, 4403, 1, 0, 0, 0, 702, 4405, 1, 0, 0, 0, 704, 4417, 1, 0,
		0, 0, 706, 4419, 1, 0, 0, 0, 708, 4443, 1, 0, 0, 0, 710, 4445, 1, 0, 0,
		0, 712, 4495, 1, 0, 0, 0, 714, 4517, 1, 0, 0, 0, 716, 4521, 1, 0, 0, 0,
		718, 4525, 1, 0, 0, 0, 720, 4527, 1, 0, 0, 0, 722, 4552, 1, 0, 0, 0, 724,
		4570, 1, 0, 0, 0, 726, 4591, 1, 0, 0, 0, 728, 4593, 1, 0, 0, 0, 730, 4603,
		1, 0, 0, 0, 732, 4615, 1, 0, 0, 0, 734, 4617, 1, 0, 0, 0, 736, 4627, 1,
		0, 0, 0, 738, 4630, 1, 0, 0, 0, 740, 4634, 1, 0, 0, 0, 742, 4673, 1, 0,
		0, 0, 744, 4675, 1, 0, 0, 0, 746, 4680, 1, 0, 0, 0, 748, 4682, 1, 0, 0,
		0, 750, 4687, 1, 0, 0, 0, 752, 4695, 1, 0, 0, 0, 754, 4701, 1, 0, 0, 0,
		756, 4703, 1, 0, 0, 0, 758, 4706, 1, 0, 0, 0, 760, 4709, 1, 0, 0, 0, 762,
		4721, 1, 0, 0, 0, 764, 4724, 1, 0, 0, 0, 766, 4736, 1, 0, 0, 0, 768, 4748,
		1, 0, 0, 0, 770, 4755, 1, 0, 0, 0, 772, 4757, 1, 0, 0, 0, 774, 4769, 1,
		0, 0, 0, 776, 4771, 1, 0, 0, 0, 778, 4782, 1, 0, 0, 0, 780, 4790, 1, 0,
		0, 0, 782, 4794, 1, 0, 0, 0, 784, 4802, 1, 0, 0, 0, 786, 4809, 1, 0, 0,
		0, 788, 4825, 1, 0, 0, 0, 790, 4827, 1, 0, 0, 0, 792, 4829, 1, 0, 0, 0,
		794, 4832, 1, 0, 0, 0, 796, 4846, 1, 0, 0, 0, 798, 4848, 1, 0, 0, 0, 800,
		4857, 1, 0, 0, 0, 802, 4859, 1, 0, 0, 0, 804, 4870, 1, 0, 0, 0, 806, 4872,
		1, 0, 0, 0, 808, 4884, 1, 0, 0, 0, 810, 4896, 1, 0, 0, 0, 812, 4903, 1,
		0, 0, 0, 814, 4949, 1, 0, 0, 0, 816, 5210, 1, 0, 0, 0, 818, 5220, 1, 0,
		0, 0, 820, 5222, 1, 0, 0, 0, 822, 5224, 1, 0, 0, 0, 824, 5226, 1, 0, 0,
		0, 826, 5228, 1, 0, 0, 0, 828, 5230, 1, 0, 0, 0, 830, 5232, 1, 0, 0, 0,
		832, 5237, 1, 0, 0, 0, 834, 5242, 1, 0, 0, 0, 836, 5246, 1, 0, 0, 0, 838,
		5253, 1, 0, 0, 0, 840, 5257, 1, 0, 0, 0, 842, 5266, 1, 0, 0, 0, 844, 5268,
		1, 0, 0, 0, 846, 5278, 1, 0, 0, 0, 848, 5289, 1, 0, 0, 0, 850, 5294, 1,
		0, 0, 0, 852, 5303, 1, 0, 0, 0, 854, 5314, 1, 0, 0, 0, 856, 5316, 1, 0,
		0, 0, 858, 5325, 1, 0, 0, 0, 860, 5329, 1, 0, 0, 0, 862, 5345, 1, 0, 0,
		0, 864, 5347, 1, 0, 0, 0, 866, 5365, 1, 0, 0, 0, 868, 5407, 1, 0, 0, 0,
		870, 5418, 1, 0, 0, 0, 872, 5436, 1, 0, 0, 0, 874, 5447, 1, 0, 0, 0, 876,
		5456, 1, 0, 0, 0, 878, 5458, 1, 0, 0, 0, 880, 5460, 1, 0, 0, 0, 882, 5462,
		1, 0, 0, 0, 884, 5464, 1, 0, 0, 0, 886, 5477, 1, 0, 0, 0, 888, 5481, 1,
		0, 0, 0, 890, 5485, 1, 0, 0, 0, 892, 5490, 1, 0, 0, 0, 894, 5497, 1, 0,
		0, 0, 896, 5499, 1, 0, 0, 0, 898, 5508, 1, 0, 0, 0, 900, 5514, 1, 0, 0,
		0, 902, 5516, 1, 0, 0, 0, 904, 5522, 1, 0, 0, 0, 906, 5533, 1, 0, 0, 0,
		908, 5535, 1, 0, 0, 0, 910, 5546, 1, 0, 0, 0, 912, 5548, 1, 0, 0, 0, 914,
		5555, 1, 0, 0, 0, 916, 5564, 1, 0, 0, 0, 918, 5574, 1, 0, 0, 0, 920, 5576,
		1, 0, 0, 0, 922, 5585, 1, 0, 0, 0, 924, 5594, 1, 0, 0, 0, 926, 5600, 1,
		0, 0, 0, 928, 5602, 1, 0, 0, 0, 930, 5605, 1, 0, 0, 0, 932, 5630, 1, 0,
		0, 0, 934, 5634, 1, 0, 0, 0, 936, 5636, 1, 0, 0, 0, 938, 5656, 1, 0, 0,
		0, 940, 5658, 1, 0, 0, 0, 942, 5678, 1, 0, 0, 0, 944, 5680, 1, 0, 0, 0,
		946, 5689, 1, 0, 0, 0, 948, 5699, 1, 0, 0, 0, 950, 5704, 1, 0, 0, 0, 952,
		5706, 1, 0, 0, 0, 954, 5710, 1, 0, 0, 0, 956, 5716, 1, 0, 0, 0, 958, 5718,
		1, 0, 0, 0, 960, 5720, 1, 0, 0, 0, 962, 5723, 1, 0, 0, 0, 964, 5743, 1,
		0, 0, 0, 966, 5745, 1, 0, 0, 0, 968, 5764, 1, 0, 0, 0, 970, 5783, 1, 0,
		0, 0, 972, 5790, 1, 0, 0, 0, 974, 5798, 1, 0, 0, 0, 976, 5812, 1, 0, 0,
		0, 978, 5814, 1, 0, 0, 0, 980, 5820, 1, 0, 0, 0, 982, 5825, 1, 0, 0, 0,
		984, 5858, 1, 0, 0, 0, 986, 5868, 1, 0, 0, 0, 988, 5872, 1, 0, 0, 0, 990,
		5874, 1, 0, 0, 0, 992, 5885, 1, 0, 0, 0, 994, 5900, 1, 0, 0, 0, 996, 5902,
		1, 0, 0, 0, 998, 5914, 1, 0, 0, 0, 1000, 5916, 1, 0, 0, 0, 1002, 5925,
		1, 0, 0, 0, 1004, 5940, 1, 0, 0, 0, 1006, 5943, 1, 0, 0, 0, 1008, 5948,
		1, 0, 0, 0, 1010, 5950, 1, 0, 0, 0, 1012, 5960, 1, 0, 0, 0, 1014, 5962,
		1, 0, 0, 0, 1016, 5971, 1, 0, 0, 0, 1018, 5986, 1, 0, 0, 0, 1020, 5994,
		1, 0, 0, 0, 1022, 5996, 1, 0, 0, 0, 1024, 6011, 1, 0, 0, 0, 1026, 6013,
		1, 0, 0, 0, 1028, 6016, 1, 0, 0, 0, 1030, 6021, 1, 0, 0, 0, 1032, 6028,
		1, 0, 0, 0, 1034, 6034, 1, 0, 0, 0, 1036, 6036, 1, 0, 0, 0, 1038, 6041,
		1, 0, 0, 0, 1040, 6043, 1, 0, 0, 0, 1042, 6054, 1, 0, 0, 0, 1044, 6056,
		1, 0, 0, 0, 1046, 6071, 1, 0, 0, 0, 1048, 6079, 1, 0, 0, 0, 1050, 6081,
		1, 0, 0, 0, 1052, 6109, 1, 0, 0, 0, 1054, 6111, 1, 0, 0, 0, 1056, 6124,
		1, 0, 0, 0, 1058, 6126, 1, 0, 0, 0, 1060, 6136, 1, 0, 0, 0, 1062, 6140,
		1, 0, 0, 0, 1064, 6142, 1, 0, 0, 0, 1066, 6144, 1, 0, 0, 0, 1068, 6153,
		1, 0, 0, 0, 1070, 6155, 1, 0, 0, 0, 1072, 6169, 1, 0, 0, 0, 1074, 6171,
		1, 0, 0, 0, 1076, 6176, 1, 0, 0, 0, 1078, 6178, 1, 0, 0, 0, 1080, 6180,
		1, 0, 0, 0, 1082, 6183, 1, 0, 0, 0, 1084, 6185, 1, 0, 0, 0, 1086, 6187,
		1, 0, 0, 0, 1088, 6190, 1, 0, 0, 0, 1090, 6193, 1, 0, 0, 0, 1092, 6195,
		1, 0, 0, 0, 1094, 6198, 1, 0, 0, 0, 1096, 6200, 1, 0, 0, 0, 1098, 6202,
		1, 0, 0, 0, 1100, 6218, 1, 0, 0, 0, 1102, 6220, 1, 0, 0, 0, 1104, 6222,
		1, 0, 0, 0, 1106, 6238, 1, 0, 0, 0, 1108, 6240, 1, 0, 0, 0, 1110, 1111,
		3, 2, 1, 0, 1111, 1112, 5, 0, 0, 1, 1112, 1, 1, 0, 0, 0, 1113, 1118, 3,
		4, 2, 0, 1114, 1115, 5, 25, 0, 0, 1115, 1117, 3, 4, 2, 0, 1116, 1114, 1,
		0, 0, 0, 1117, 1120, 1, 0, 0, 0, 1118, 1116, 1, 0, 0, 0, 1118, 1119, 1,
		0, 0, 0, 1119, 1122, 1, 0, 0, 0, 1120, 1118, 1, 0, 0, 0, 1121, 1123, 5,
		25, 0, 0, 1122, 1121, 1, 0, 0, 0, 1122, 1123, 1, 0, 0, 0, 1123, 3, 1, 0,
		0, 0, 1124, 1126, 3, 332, 166, 0, 1125, 1124, 1, 0, 0, 0, 1125, 1126, 1,
		0, 0, 0, 1126, 1127, 1, 0, 0, 0, 1127, 1137, 3, 6, 3, 0, 1128, 1129, 5,
		325, 0, 0, 1129, 1130, 5, 200, 0, 0, 1130, 1137, 6, 2, -1, 0, 1131, 1132,
		3, 332, 166, 0, 1132, 1133, 5, 325, 0, 0, 1133, 1134, 5, 200, 0, 0, 1134,
		1135, 6, 2, -1, 0, 1135, 1137, 1, 0, 0, 0, 1136, 1125, 1, 0, 0, 0, 1136,
		1128, 1, 0, 0, 0, 1136, 1131, 1, 0, 0, 0, 1137, 5, 1, 0, 0, 0, 1138, 1181,
		3, 334, 167, 0, 1139, 1181, 3, 384, 192, 0, 1140, 1181, 3, 386, 193, 0,
		1141, 1181, 3, 388, 194, 0, 1142, 1181, 3, 390, 195, 0, 1143, 1181, 3,
		392, 196, 0, 1144, 1181, 3, 336, 168, 0, 1145, 1181, 3, 318, 159, 0, 1146,
		1181, 3, 316, 158, 0, 1147, 1181, 3, 308, 154, 0, 1148, 1181, 3, 304, 152,
		0, 1149, 1181, 3, 302, 151, 0, 1150, 1181, 3, 298, 149, 0, 1151, 1181,
		3, 294, 147, 0, 1152, 1181, 3, 296, 148, 0, 1153, 1181, 3, 288, 144, 0,
		1154, 1181, 3, 286, 143, 0, 1155, 1181, 3, 284, 142, 0, 1156, 1181, 3,
		236, 118, 0, 1157, 1181, 3, 172, 86, 0, 1158, 1181, 3, 142, 71, 0, 1159,
		1181, 3, 136, 68, 0, 1160, 1181, 3, 130, 65, 0, 1161, 1181, 3, 124, 62,
		0, 1162, 1181, 3, 122, 61, 0, 1163, 1181, 3, 110, 55, 0, 1164, 1181, 3,
		80, 40, 0, 1165, 1181, 3, 78, 39, 0, 1166, 1181, 3, 76, 38, 0, 1167, 1181,
		3, 74, 37, 0, 1168, 1181, 3, 66, 33, 0, 1169, 1181, 3, 50, 25, 0, 1170,
		1181, 3, 42, 21, 0, 1171, 1181, 3, 38, 19, 0, 1172, 1181, 3, 36, 18, 0,
		1173, 1181, 3, 28, 14, 0, 1174, 1181, 3, 18, 9, 0, 1175, 1181, 3, 16, 8,
		0, 1176, 1181, 3, 12, 6, 0, 1177, 1181, 3, 10, 5, 0, 1178, 1181, 3, 8,
		4, 0, 1179, 1181, 3, 300, 150, 0, 1180, 1138, 1, 0, 0, 0, 1180, 1139, 1,
		0, 0, 0, 1180, 1140, 1, 0, 0, 0, 1180, 1141, 1, 0, 0, 0, 1180, 1142, 1,
		0, 0, 0, 1180, 1143, 1, 0, 0, 0, 1180, 1144, 1, 0, 0, 0, 1180, 1145, 1,
		0, 0, 0, 1180, 1146, 1, 0, 0, 0, 1180, 1147, 1, 0, 0, 0, 1180, 1148, 1,
		0, 0, 0, 1180, 1149, 1, 0, 0, 0, 1180, 1150, 1, 0, 0, 0, 1180, 1151, 1,
		0, 0, 0, 1180, 1152, 1, 0, 0, 0, 1180, 1153, 1, 0, 0, 0, 1180, 1154, 1,
		0, 0, 0, 1180, 1155, 1, 0, 0, 0, 1180, 1156, 1, 0, 0, 0, 1180, 1157, 1,
		0, 0, 0, 1180, 1158, 1, 0, 0, 0, 1180, 1159, 1, 0, 0, 0, 1180, 1160, 1,
		0, 0, 0, 1180, 1161, 1, 0, 0, 0, 1180, 1162, 1, 0, 0, 0, 1180, 1163, 1,
		0, 0, 0, 1180, 1164, 1, 0, 0, 0, 1180, 1165, 1, 0, 0, 0, 1180, 1166, 1,
		0, 0, 0, 1180, 1167, 1, 0, 0, 0, 1180, 1168, 1, 0, 0, 0, 1180, 1169, 1,
		0, 0, 0, 1180, 1170, 1, 0, 0, 0, 1180, 1171, 1, 0, 0, 0, 1180, 1172, 1,
		0, 0, 0, 1180, 1173, 1, 0, 0, 0, 1180, 1174, 1, 0, 0, 0, 1180, 1175, 1,
		0, 0, 0, 1180, 1176, 1, 0, 0, 0, 1180, 1177, 1, 0, 0, 0, 1180, 1178, 1,
		0, 0, 0, 1180, 1179, 1, 0, 0, 0, 1181, 7, 1, 0, 0, 0, 1182, 1183, 5, 167,
		0, 0, 1183, 1184, 3, 564, 282, 0, 1184, 1185, 5, 210, 0, 0, 1185, 1186,
		5, 69, 0, 0, 1186, 1188, 3, 718, 359, 0, 1187, 1189, 3, 256, 128, 0, 1188,
		1187, 1, 0, 0, 0, 1188, 1189, 1, 0, 0, 0, 1189, 1191, 1, 0, 0, 0, 1190,
		1192, 3, 556, 278, 0, 1191, 1190, 1, 0, 0, 0, 1191, 1192, 1, 0, 0, 0, 1192,
		9, 1, 0, 0, 0, 1193, 1194, 5, 167, 0, 0, 1194, 1195, 5, 213, 0, 0, 1195,
		1197, 3, 1058, 529, 0, 1196, 1198, 3, 256, 128, 0, 1197, 1196, 1, 0, 0,
		0, 1197, 1198, 1, 0, 0, 0, 1198, 1200, 1, 0, 0, 0, 1199, 1201, 3, 556,
		278, 0, 1200, 1199, 1, 0, 0, 0, 1200, 1201, 1, 0, 0, 0, 1201, 11, 1, 0,
		0, 0, 1202, 1203, 3, 14, 7, 0, 1203, 1204, 3, 120, 60, 0, 1204, 13, 1,
		0, 0, 0, 1205, 1206, 5, 167, 0, 0, 1206, 1208, 5, 150, 0, 0, 1207, 1209,
		3, 256, 128, 0, 1208, 1207, 1, 0, 0, 0, 1208, 1209, 1, 0, 0, 0, 1209, 1211,
		1, 0, 0, 0, 1210, 1212, 3, 556, 278, 0, 1211, 1210, 1, 0, 0, 0, 1211, 1212,
		1, 0, 0, 0, 1212, 15, 1, 0, 0, 0, 1213, 1214, 5, 166, 0, 0, 1214, 1215,
		3, 4, 2, 0, 1215, 17, 1, 0, 0, 0, 1216, 1217, 5, 165, 0, 0, 1217, 1218,
		5, 182, 0, 0, 1218, 1220, 3, 812, 406, 0, 1219, 1221, 3, 20, 10, 0, 1220,
		1219, 1, 0, 0, 0, 1220, 1221, 1, 0, 0, 0, 1221, 1223, 1, 0, 0, 0, 1222,
		1224, 3, 22, 11, 0, 1223, 1222, 1, 0, 0, 0, 1223, 1224, 1, 0, 0, 0, 1224,
		19, 1, 0, 0, 0, 1225, 1226, 5, 336, 0, 0, 1226, 1227, 3, 306, 153, 0, 1227,
		21, 1, 0, 0, 0, 1228, 1229, 5, 100, 0, 0, 1229, 1230, 3, 24, 12, 0, 1230,
		23, 1, 0, 0, 0, 1231, 1236, 3, 26, 13, 0, 1232, 1233, 5, 15, 0, 0, 1233,
		1235, 3, 26, 13, 0, 1234, 1232, 1, 0, 0, 0, 1235, 1238, 1, 0, 0, 0, 1236,
		1234, 1, 0, 0, 0, 1236, 1237, 1, 0, 0, 0, 1237, 25, 1, 0, 0, 0, 1238, 1236,
		1, 0, 0, 0, 1239, 1242, 3, 812, 406, 0, 1240, 1241, 5, 56, 0, 0, 1241,
		1243, 3, 1060, 530, 0, 1242, 1240, 1, 0, 0, 0, 1242, 1243, 1, 0, 0, 0,
		1243, 27, 1, 0, 0, 0, 1244, 1245, 3, 34, 17, 0, 1245, 1246, 3, 30, 15,
		0, 1246, 29, 1, 0, 0, 0, 1247, 1249, 3, 1060, 530, 0, 1248, 1247, 1, 0,
		0, 0, 1248, 1249, 1, 0, 0, 0, 1249, 1250, 1, 0, 0, 0, 1250, 1252, 3, 716,
		358, 0, 1251, 1253, 3, 32, 16, 0, 1252, 1251, 1, 0, 0, 0, 1252, 1253, 1,
		0, 0, 0, 1253, 31, 1, 0, 0, 0, 1254, 1255, 5, 69, 0, 0, 1255, 1256, 3,
		716, 358, 0, 1256, 33, 1, 0, 0, 0, 1257, 1258, 7, 0, 0, 0, 1258, 35, 1,
		0, 0, 0, 1259, 1260, 5, 325, 0, 0, 1260, 1261, 5, 266, 0, 0, 1261, 1263,
		3, 1058, 529, 0, 1262, 1264, 3, 894, 447, 0, 1263, 1262, 1, 0, 0, 0, 1263,
		1264, 1, 0, 0, 0, 1264, 37, 1, 0, 0, 0, 1265, 1267, 5, 341, 0, 0, 1266,
		1268, 3, 290, 145, 0, 1267, 1266, 1, 0, 0, 0, 1267, 1268, 1, 0, 0, 0, 1268,
		1269, 1, 0, 0, 0, 1269, 1271, 3, 440, 220, 0, 1270, 1272, 3, 530, 265,
		0, 1271, 1270, 1, 0, 0, 0, 1271, 1272, 1, 0, 0, 0, 1272, 1273, 1, 0, 0,
		0, 1273, 1275, 3, 1058, 529, 0, 1274, 1276, 3, 556, 278, 0, 1275, 1274,
		1, 0, 0, 0, 1275, 1276, 1, 0, 0, 0, 1276, 1278, 1, 0, 0, 0, 1277, 1279,
		3, 40, 20, 0, 1278, 1277, 1, 0, 0, 0, 1278, 1279, 1, 0, 0, 0, 1279, 39,
		1, 0, 0, 0, 1280, 1281, 5, 56, 0, 0, 1281, 1282, 3, 560, 280, 0, 1282,
		41, 1, 0, 0, 0, 1283, 1285, 5, 341, 0, 0, 1284, 1286, 3, 290, 145, 0, 1285,
		1284, 1, 0, 0, 0, 1285, 1286, 1, 0, 0, 0, 1286, 1288, 1, 0, 0, 0, 1287,
		1289, 3, 292, 146, 0, 1288, 1287, 1, 0, 0, 0, 1288, 1289, 1, 0, 0, 0, 1289,
		1291, 1, 0, 0, 0, 1290, 1292, 5, 90, 0, 0, 1291, 1290, 1, 0, 0, 0, 1291,
		1292, 1, 0, 0, 0, 1292, 1293, 1, 0, 0, 0, 1293, 1295, 5, 282, 0, 0, 1294,
		1296, 3, 530, 265, 0, 1295, 1294, 1, 0, 0, 0, 1295, 1296, 1, 0, 0, 0, 1296,
		1297, 1, 0, 0, 0, 1297, 1299, 3, 718, 359, 0, 1298, 1300, 3, 46, 23, 0,
		1299, 1298, 1, 0, 0, 0, 1299, 1300, 1, 0, 0, 0, 1300, 1302, 1, 0, 0, 0,
		1301, 1303, 3, 240, 120, 0, 1302, 1301, 1, 0, 0, 0, 1302, 1303, 1, 0, 0,
		0, 1303, 1305, 1, 0, 0, 0, 1304, 1306, 3, 556, 278, 0, 1305, 1304, 1, 0,
		0, 0, 1305, 1306, 1, 0, 0, 0, 1306, 1307, 1, 0, 0, 0, 1307, 1308, 3, 120,
		60, 0, 1308, 1365, 1, 0, 0, 0, 1309, 1311, 5, 341, 0, 0, 1310, 1312, 3,
		290, 145, 0, 1311, 1310, 1, 0, 0, 0, 1311, 1312, 1, 0, 0, 0, 1312, 1313,
		1, 0, 0, 0, 1313, 1315, 5, 205, 0, 0, 1314, 1316, 5, 90, 0, 0, 1315, 1314,
		1, 0, 0, 0, 1315, 1316, 1, 0, 0, 0, 1316, 1317, 1, 0, 0, 0, 1317, 1319,
		5, 282, 0, 0, 1318, 1320, 3, 530, 265, 0, 1319, 1318, 1, 0, 0, 0, 1319,
		1320, 1, 0, 0, 0, 1320, 1321, 1, 0, 0, 0, 1321, 1323, 3, 718, 359, 0, 1322,
		1324, 3, 46, 23, 0, 1323, 1322, 1, 0, 0, 0, 1323, 1324, 1, 0, 0, 0, 1324,
		1326, 1, 0, 0, 0, 1325, 1327, 3, 240, 120, 0, 1326, 1325, 1, 0, 0, 0, 1326,
		1327, 1, 0, 0, 0, 1327, 1329, 1, 0, 0, 0, 1328, 1330, 3, 678, 339, 0, 1329,
		1328, 1, 0, 0, 0, 1329, 1330, 1, 0, 0, 0, 1330, 1332, 1, 0, 0, 0, 1331,
		1333, 3, 404, 202, 0, 1332, 1331, 1, 0, 0, 0, 1332, 1333, 1, 0, 0, 0, 1333,
		1335, 1, 0, 0, 0, 1334, 1336, 3, 556, 278, 0, 1335, 1334, 1, 0, 0, 0, 1335,
		1336, 1, 0, 0, 0, 1336, 1337, 1, 0, 0, 0, 1337, 1338, 5, 56, 0, 0, 1338,
		1339, 3, 44, 22, 0, 1339, 1365, 1, 0, 0, 0, 1340, 1342, 5, 341, 0, 0, 1341,
		1343, 3, 290, 145, 0, 1342, 1341, 1, 0, 0, 0, 1342, 1343, 1, 0, 0, 0, 1343,
		1344, 1, 0, 0, 0, 1344, 1346, 5, 128, 0, 0, 1345, 1347, 5, 90, 0, 0, 1346,
		1345, 1, 0, 0, 0, 1346, 1347, 1, 0, 0, 0, 1347, 1348, 1, 0, 0, 0, 1348,
		1350, 5, 282, 0, 0, 1349, 1351, 3, 530, 265, 0, 1350, 1349, 1, 0, 0, 0,
		1350, 1351, 1, 0, 0, 0, 1351, 1352, 1, 0, 0, 0, 1352, 1354, 3, 718, 359,
		0, 1353, 1355, 3, 46, 23, 0, 1354, 1353, 1, 0, 0, 0, 1354, 1355, 1, 0,
		0, 0, 1355, 1357, 1, 0, 0, 0, 1356, 1358, 3, 240, 120, 0, 1357, 1356, 1,
		0, 0, 0, 1357, 1358, 1, 0, 0, 0, 1358, 1360, 1, 0, 0, 0, 1359, 1361, 3,
		556, 278, 0, 1360, 1359, 1, 0, 0, 0, 1360, 1361, 1, 0, 0, 0, 1361, 1362,
		1, 0, 0, 0, 1362, 1363, 3, 120, 60, 0, 1363, 1365, 1, 0, 0, 0, 1364, 1283,
		1, 0, 0, 0, 1364, 1309, 1, 0, 0, 0, 1364, 1340, 1, 0, 0, 0, 1365, 43, 1,
		0, 0, 0, 1366, 1371, 3, 566, 283, 0, 1367, 1368, 5, 239, 0, 0, 1368, 1369,
		5, 80, 0, 0, 1369, 1371, 3, 718, 359, 0, 1370, 1366, 1, 0, 0, 0, 1370,
		1367, 1, 0, 0, 0, 1371, 45, 1, 0, 0, 0, 1372, 1373, 5, 19, 0, 0, 1373,
		1378, 3, 48, 24, 0, 1374, 1375, 5, 15, 0, 0, 1375, 1377, 3, 48, 24, 0,
		1376, 1374, 1, 0, 0, 0, 1377, 1380, 1, 0, 0, 0, 1378, 1376, 1, 0, 0, 0,
		1378, 1379, 1, 0, 0, 0, 1379, 1381, 1, 0, 0, 0, 1380, 1378, 1, 0, 0, 0,
		1381, 1382, 5, 20, 0, 0, 1382, 47, 1, 0, 0, 0, 1383, 1385, 3, 1060, 530,
		0, 1384, 1386, 3, 556, 278, 0, 1385, 1384, 1, 0, 0, 0, 1385, 1386, 1, 0,
		0, 0, 1386, 49, 1, 0, 0, 0, 1387, 1389, 5, 341, 0, 0, 1388, 1390, 3, 290,
		145, 0, 1389, 1388, 1, 0, 0, 0, 1389, 1390, 1, 0, 0, 0, 1390, 1392, 1,
		0, 0, 0, 1391, 1393, 3, 292, 146, 0, 1392, 1391, 1, 0, 0, 0, 1392, 1393,
		1, 0, 0, 0, 1393, 1394, 1, 0, 0, 0, 1394, 1396, 5, 266, 0, 0, 1395, 1397,
		3, 530, 265, 0, 1396, 1395, 1, 0, 0, 0, 1396, 1397, 1, 0, 0, 0, 1397, 1398,
		1, 0, 0, 0, 1398, 1400, 3, 718, 359, 0, 1399, 1401, 3, 410, 205, 0, 1400,
		1399, 1, 0, 0, 0, 1400, 1401, 1, 0, 0, 0, 1401, 1403, 1, 0, 0, 0, 1402,
		1404, 3, 60, 30, 0, 1403, 1402, 1, 0, 0, 0, 1403, 1404, 1, 0, 0, 0, 1404,
		1406, 1, 0, 0, 0, 1405, 1407, 3, 128, 64, 0, 1406, 1405, 1, 0, 0, 0, 1406,
		1407, 1, 0, 0, 0, 1407, 1409, 1, 0, 0, 0, 1408, 1410, 3, 58, 29, 0, 1409,
		1408, 1, 0, 0, 0, 1409, 1410, 1, 0, 0, 0, 1410, 1412, 1, 0, 0, 0, 1411,
		1413, 3, 54, 27, 0, 1412, 1411, 1, 0, 0, 0, 1412, 1413, 1, 0, 0, 0, 1413,
		1415, 1, 0, 0, 0, 1414, 1416, 3, 126, 63, 0, 1415, 1414, 1, 0, 0, 0, 1415,
		1416, 1, 0, 0, 0, 1416, 1418, 1, 0, 0, 0, 1417, 1419, 3, 678, 339, 0, 1418,
		1417, 1, 0, 0, 0, 1418, 1419, 1, 0, 0, 0, 1419, 1421, 1, 0, 0, 0, 1420,
		1422, 3, 404, 202, 0, 1421, 1420, 1, 0, 0, 0, 1421, 1422, 1, 0, 0, 0, 1422,
		1424, 1, 0, 0, 0, 1423, 1425, 3, 52, 26, 0, 1424, 1423, 1, 0, 0, 0, 1424,
		1425, 1, 0, 0, 0, 1425, 1427, 1, 0, 0, 0, 1426, 1428, 3, 256, 128, 0, 1427,
		1426, 1, 0, 0, 0, 1427, 1428, 1, 0, 0, 0, 1428, 1430, 1, 0, 0, 0, 1429,
		1431, 3, 556, 278, 0, 1430, 1429, 1, 0, 0, 0, 1430, 1431, 1, 0, 0, 0, 1431,
		1433, 1, 0, 0, 0, 1432, 1434, 3, 120, 60, 0, 1433, 1432, 1, 0, 0, 0, 1433,
		1434, 1, 0, 0, 0, 1434, 51, 1, 0, 0, 0, 1435, 1436, 5, 247, 0, 0, 1436,
		1437, 5, 155, 0, 0, 1437, 1438, 5, 222, 0, 0, 1438, 1439, 5, 19, 0, 0,
		1439, 1440, 3, 812, 406, 0, 1440, 1441, 5, 20, 0, 0, 1441, 53, 1, 0, 0,
		0, 1442, 1443, 5, 139, 0, 0, 1443, 1444, 3, 56, 28, 0, 1444, 55, 1, 0,
		0, 0, 1445, 1447, 3, 718, 359, 0, 1446, 1448, 3, 708, 354, 0, 1447, 1446,
		1, 0, 0, 0, 1447, 1448, 1, 0, 0, 0, 1448, 1450, 1, 0, 0, 0, 1449, 1451,
		3, 634, 317, 0, 1450, 1449, 1, 0, 0, 0, 1450, 1451, 1, 0, 0, 0, 1451, 57,
		1, 0, 0, 0, 1452, 1453, 5, 138, 0, 0, 1453, 1454, 3, 396, 198, 0, 1454,
		59, 1, 0, 0, 0, 1455, 1457, 3, 64, 32, 0, 1456, 1458, 3, 62, 31, 0, 1457,
		1456, 1, 0, 0, 0, 1457, 1458, 1, 0, 0, 0, 1458, 61, 1, 0, 0, 0, 1459, 1460,
		5, 15, 0, 0, 1460, 1461, 5, 290, 0, 0, 1461, 1462, 5, 71, 0, 0, 1462, 1463,
		5, 292, 0, 0, 1463, 1464, 3, 718, 359, 0, 1464, 1465, 3, 546, 273, 0, 1465,
		63, 1, 0, 0, 0, 1466, 1467, 5, 223, 0, 0, 1467, 1468, 5, 193, 0, 0, 1468,
		1469, 3, 534, 267, 0, 1469, 65, 1, 0, 0, 0, 1470, 1472, 5, 341, 0, 0, 1471,
		1473, 3, 290, 145, 0, 1472, 1471, 1, 0, 0, 0, 1472, 1473, 1, 0, 0, 0, 1473,
		1475, 1, 0, 0, 0, 1474, 1476, 3, 292, 146, 0, 1475, 1474, 1, 0, 0, 0, 1475,
		1476, 1, 0, 0, 0, 1476, 1477, 1, 0, 0, 0, 1477, 1478, 5, 266, 0, 0, 1478,
		1480, 5, 176, 0, 0, 1479, 1481, 3, 530, 265, 0, 1480, 1479, 1, 0, 0, 0,
		1480, 1481, 1, 0, 0, 0, 1481, 1482, 1, 0, 0, 0, 1482, 1484, 3, 1058, 529,
		0, 1483, 1485, 3, 72, 36, 0, 1484, 1483, 1, 0, 0, 0, 1484, 1485, 1, 0,
		0, 0, 1485, 1487, 1, 0, 0, 0, 1486, 1488, 3, 260, 130, 0, 1487, 1486, 1,
		0, 0, 0, 1487, 1488, 1, 0, 0, 0, 1488, 1490, 1, 0, 0, 0, 1489, 1491, 3,
		240, 120, 0, 1490, 1489, 1, 0, 0, 0, 1490, 1491, 1, 0, 0, 0, 1491, 1493,
		1, 0, 0, 0, 1492, 1494, 3, 70, 35, 0, 1493, 1492, 1, 0, 0, 0, 1493, 1494,
		1, 0, 0, 0, 1494, 1496, 1, 0, 0, 0, 1495, 1497, 3, 68, 34, 0, 1496, 1495,
		1, 0, 0, 0, 1496, 1497, 1, 0, 0, 0, 1497, 1498, 1, 0, 0, 0, 1498, 1499,
		6, 33, -1, 0, 1499, 67, 1, 0, 0, 0, 1500, 1504, 3, 120, 60, 0, 1501, 1502,
		5, 56, 0, 0, 1502, 1504, 3, 1104, 552, 0, 1503, 1500, 1, 0, 0, 0, 1503,
		1501, 1, 0, 0, 0, 1504, 69, 1, 0, 0, 0, 1505, 1507, 3, 252, 126, 0, 1506,
		1508, 3, 556, 278, 0, 1507, 1506, 1, 0, 0, 0, 1507, 1508, 1, 0, 0, 0, 1508,
		1514, 1, 0, 0, 0, 1509, 1511, 3, 556, 278, 0, 1510, 1512, 3, 252, 126,
		0, 1511, 1510, 1, 0, 0, 0, 1511, 1512, 1, 0, 0, 0, 1512, 1514, 1, 0, 0,
		0, 1513, 1505, 1, 0, 0, 0, 1513, 1509, 1, 0, 0, 0, 1514, 71, 1, 0, 0, 0,
		1515, 1524, 5, 19, 0, 0, 1516, 1521, 3, 266, 133, 0, 1517, 1518, 5, 15,
		0, 0, 1518, 1520, 3, 266, 133, 0, 1519, 1517, 1, 0, 0, 0, 1520, 1523, 1,
		0, 0, 0, 1521, 1519, 1, 0, 0, 0, 1521, 1522, 1, 0, 0, 0, 1522, 1525, 1,
		0, 0, 0, 1523, 1521, 1, 0, 0, 0, 1524, 1516, 1, 0, 0, 0, 1524, 1525, 1,
		0, 0, 0, 1525, 1526, 1, 0, 0, 0, 1526, 1527, 5, 20, 0, 0, 1527, 73, 1,
		0, 0, 0, 1528, 1530, 5, 341, 0, 0, 1529, 1531, 3, 290, 145, 0, 1530, 1529,
		1, 0, 0, 0, 1530, 1531, 1, 0, 0, 0, 1531, 1532, 1, 0, 0, 0, 1532, 1535,
		5, 257, 0, 0, 1533, 1536, 5, 266, 0, 0, 1534, 1536, 3, 444, 222, 0, 1535,
		1533, 1, 0, 0, 0, 1535, 1534, 1, 0, 0, 0, 1536, 1538, 1, 0, 0, 0, 1537,
		1539, 3, 530, 265, 0, 1538, 1537, 1, 0, 0, 0, 1538, 1539, 1, 0, 0, 0, 1539,
		1540, 1, 0, 0, 0, 1540, 1541, 3, 718, 359, 0, 1541, 1542, 5, 138, 0, 0,
		1542, 1544, 3, 396, 198, 0, 1543, 1545, 3, 556, 278, 0, 1544, 1543, 1,
		0, 0, 0, 1544, 1545, 1, 0, 0, 0, 1545, 75, 1, 0, 0, 0, 1546, 1548, 5, 341,
		0, 0, 1547, 1549, 3, 290, 145, 0, 1548, 1547, 1, 0, 0, 0, 1548, 1549, 1,
		0, 0, 0, 1549, 1551, 1, 0, 0, 0, 1550, 1552, 3, 292, 146, 0, 1551, 1550,
		1, 0, 0, 0, 1551, 1552, 1, 0, 0, 0, 1552, 1553, 1, 0, 0, 0, 1553, 1554,
		5, 169, 0, 0, 1554, 1556, 5, 250, 0, 0, 1555, 1557, 3, 530, 265, 0, 1556,
		1555, 1, 0, 0, 0, 1556, 1557, 1, 0, 0, 0, 1557, 1558, 1, 0, 0, 0, 1558,
		1560, 3, 1058, 529, 0, 1559, 1561, 3, 256, 128, 0, 1560, 1559, 1, 0, 0,
		0, 1560, 1561, 1, 0, 0, 0, 1561, 1562, 1, 0, 0, 0, 1562, 1563, 3, 556,
		278, 0, 1563, 77, 1, 0, 0, 0, 1564, 1566, 5, 341, 0, 0, 1565, 1567, 3,
		290, 145, 0, 1566, 1565, 1, 0, 0, 0, 1566, 1567, 1, 0, 0, 0, 1567, 1568,
		1, 0, 0, 0, 1568, 1570, 5, 250, 0, 0, 1569, 1571, 3, 530, 265, 0, 1570,
		1569, 1, 0, 0, 0, 1570, 1571, 1, 0, 0, 0, 1571, 1572, 1, 0, 0, 0, 1572,
		1574, 3, 1058, 529, 0, 1573, 1575, 3, 126, 63, 0, 1574, 1573, 1, 0, 0,
		0, 1574, 1575, 1, 0, 0, 0, 1575, 1577, 1, 0, 0, 0, 1576, 1578, 3, 556,
		278, 0, 1577, 1576, 1, 0, 0, 0, 1577, 1578, 1, 0, 0, 0, 1578, 79, 1, 0,
		0, 0, 1579, 1581, 5, 341, 0, 0, 1580, 1582, 3, 290, 145, 0, 1581, 1580,
		1, 0, 0, 0, 1581, 1582, 1, 0, 0, 0, 1582, 1583, 1, 0, 0, 0, 1583, 1584,
		5, 344, 0, 0, 1584, 1585, 5, 345, 0, 0, 1585, 1586, 3, 530, 265, 0, 1586,
		1588, 3, 1058, 529, 0, 1587, 1589, 3, 556, 278, 0, 1588, 1587, 1, 0, 0,
		0, 1588, 1589, 1, 0, 0, 0, 1589, 1590, 1, 0, 0, 0, 1590, 1591, 5, 346,
		0, 0, 1591, 1592, 5, 267, 0, 0, 1592, 1594, 3, 84, 42, 0, 1593, 1595, 3,
		82, 41, 0, 1594, 1593, 1, 0, 0, 0, 1594, 1595, 1, 0, 0, 0, 1595, 81, 1,
		0, 0, 0, 1596, 1597, 5, 349, 0, 0, 1597, 1598, 5, 267, 0, 0, 1598, 1599,
		3, 84, 42, 0, 1599, 83, 1, 0, 0, 0, 1600, 1601, 5, 19, 0, 0, 1601, 1606,
		3, 86, 43, 0, 1602, 1603, 5, 15, 0, 0, 1603, 1605, 3, 86, 43, 0, 1604,
		1602, 1, 0, 0, 0, 1605, 1608, 1, 0, 0, 0, 1606, 1604, 1, 0, 0, 0, 1606,
		1607, 1, 0, 0, 0, 1607, 1610, 1, 0, 0, 0, 1608, 1606, 1, 0, 0, 0, 1609,
		1611, 5, 15, 0, 0, 1610, 1609, 1, 0, 0, 0, 1610, 1611, 1, 0, 0, 0, 1611,
		1612, 1, 0, 0, 0, 1612, 1613, 5, 20, 0, 0, 1613, 85, 1, 0, 0, 0, 1614,
		1616, 3, 1058, 529, 0, 1615, 1617, 3, 948, 474, 0, 1616, 1615, 1, 0, 0,
		0, 1616, 1617, 1, 0, 0, 0, 1617, 1619, 1, 0, 0, 0, 1618, 1620, 3, 108,
		54, 0, 1619, 1618, 1, 0, 0, 0, 1619, 1620, 1, 0, 0, 0, 1620, 1622, 1, 0,
		0, 0, 1621, 1623, 3, 106, 53, 0, 1622, 1621, 1, 0, 0, 0, 1622, 1623, 1,
		0, 0, 0, 1623, 1625, 1, 0, 0, 0, 1624, 1626, 3, 104, 52, 0, 1625, 1624,
		1, 0, 0, 0, 1625, 1626, 1, 0, 0, 0, 1626, 1628, 1, 0, 0, 0, 1627, 1629,
		3, 88, 44, 0, 1628, 1627, 1, 0, 0, 0, 1628, 1629, 1, 0, 0, 0, 1629, 87,
		1, 0, 0, 0, 1630, 1633, 3, 94, 47, 0, 1631, 1633, 3, 90, 45, 0, 1632, 1630,
		1, 0, 0, 0, 1632, 1631, 1, 0, 0, 0, 1633, 89, 1, 0, 0, 0, 1634, 1636, 3,
		92, 46, 0, 1635, 1634, 1, 0, 0, 0, 1636, 1637, 1, 0, 0, 0, 1637, 1635,
		1, 0, 0, 0, 1637, 1638, 1, 0, 0, 0, 1638, 91, 1, 0, 0, 0, 1639, 1641, 5,
		322, 0, 0, 1640, 1639, 1, 0, 0, 0, 1640, 1641, 1, 0, 0, 0, 1641, 1642,
		1, 0, 0, 0, 1642, 1643, 5, 348, 0, 0, 1643, 1645, 3, 1060, 530, 0, 1644,
		1646, 3, 94, 47, 0, 1645, 1644, 1, 0, 0, 0, 1645, 1646, 1, 0, 0, 0, 1646,
		93, 1, 0, 0, 0, 1647, 1648, 5, 335, 0, 0, 1648, 1659, 5, 347, 0, 0, 1649,
		1651, 3, 102, 51, 0, 1650, 1652, 3, 100, 50, 0, 1651, 1650, 1, 0, 0, 0,
		1651, 1652, 1, 0, 0, 0, 1652, 1659, 1, 0, 0, 0, 1653, 1654, 5, 347, 0,
		0, 1654, 1655, 5, 19, 0, 0, 1655, 1656, 3, 96, 48, 0, 1656, 1657, 5, 20,
		0, 0, 1657, 1659, 1, 0, 0, 0, 1658, 1647, 1, 0, 0, 0, 1658, 1649, 1, 0,
		0, 0, 1658, 1653, 1, 0, 0, 0, 1659, 95, 1, 0, 0, 0, 1660, 1665, 3, 98,
		49, 0, 1661, 1662, 5, 15, 0, 0, 1662, 1664, 3, 98, 49, 0, 1663, 1661, 1,
		0, 0, 0, 1664, 1667, 1, 0, 0, 0, 1665, 1663, 1, 0, 0, 0, 1665, 1666, 1,
		0, 0, 0, 1666, 97, 1, 0, 0, 0, 1667, 1665, 1, 0, 0, 0, 1668, 1670, 3, 812,
		406, 0, 1669, 1671, 3, 948, 474, 0, 1670, 1669, 1, 0, 0, 0, 1670, 1671,
		1, 0, 0, 0, 1671, 99, 1, 0, 0, 0, 1672, 1673, 5, 66, 0, 0, 1673, 1674,
		3, 554, 277, 0, 1674, 101, 1, 0, 0, 0, 1675, 1677, 5, 347, 0, 0, 1676,
		1678, 5, 129, 0, 0, 1677, 1676, 1, 0, 0, 0, 1677, 1678, 1, 0, 0, 0, 1678,
		1679, 1, 0, 0, 0, 1679, 1680, 5, 55, 0, 0, 1680, 1681, 5, 142, 0, 0, 1681,
		103, 1, 0, 0, 0, 1682, 1683, 5, 343, 0, 0, 1683, 1684, 5, 193, 0, 0, 1684,
		1685, 3, 554, 277, 0, 1685, 1686, 5, 232, 0, 0, 1686, 1688, 3, 1060, 530,
		0, 1687, 1689, 3, 554, 277, 0, 1688, 1687, 1, 0, 0, 0, 1688, 1689, 1, 0,
		0, 0, 1689, 105, 1, 0, 0, 0, 1690, 1691, 5, 258, 0, 0, 1691, 1692, 5, 193,
		0, 0, 1692, 1693, 3, 554, 277, 0, 1693, 1694, 5, 232, 0, 0, 1694, 1696,
		3, 1060, 530, 0, 1695, 1697, 3, 554, 277, 0, 1696, 1695, 1, 0, 0, 0, 1696,
		1697, 1, 0, 0, 0, 1697, 107, 1, 0, 0, 0, 1698, 1699, 5, 193, 0, 0, 1699,
		1700, 3, 554, 277, 0, 1700, 109, 1, 0, 0, 0, 1701, 1703, 5, 341, 0, 0,
		1702, 1704, 3, 290, 145, 0, 1703, 1702, 1, 0, 0, 0, 1703, 1704, 1, 0, 0,
		0, 1704, 1706, 1, 0, 0, 0, 1705, 1707, 3, 292, 146, 0, 1706, 1705, 1, 0,
		0, 0, 1706, 1707, 1, 0, 0, 0, 1707, 1708, 1, 0, 0, 0, 1708, 1710, 5, 213,
		0, 0, 1709, 1711, 3, 530, 265, 0, 1710, 1709, 1, 0, 0, 0, 1710, 1711, 1,
		0, 0, 0, 1711, 1712, 1, 0, 0, 0, 1712, 1714, 3, 1058, 529, 0, 1713, 1715,
		3, 112, 56, 0, 1714, 1713, 1, 0, 0, 0, 1714, 1715, 1, 0, 0, 0, 1715, 1717,
		1, 0, 0, 0, 1716, 1718, 3, 114, 57, 0, 1717, 1716, 1, 0, 0, 0, 1717, 1718,
		1, 0, 0, 0, 1718, 1720, 1, 0, 0, 0, 1719, 1721, 3, 254, 127, 0, 1720, 1719,
		1, 0, 0, 0, 1720, 1721, 1, 0, 0, 0, 1721, 1723, 1, 0, 0, 0, 1722, 1724,
		3, 556, 278, 0, 1723, 1722, 1, 0, 0, 0, 1723, 1724, 1, 0, 0, 0, 1724, 1726,
		1, 0, 0, 0, 1725, 1727, 3, 116, 58, 0, 1726, 1725, 1, 0, 0, 0, 1726, 1727,
		1, 0, 0, 0, 1727, 111, 1, 0, 0, 0, 1728, 1729, 5, 188, 0, 0, 1729, 1730,
		3, 410, 205, 0, 1730, 1731, 5, 217, 0, 0, 1731, 1732, 3, 410, 205, 0, 1732,
		113, 1, 0, 0, 0, 1733, 1734, 5, 272, 0, 0, 1734, 1735, 5, 19, 0, 0, 1735,
		1736, 3, 794, 397, 0, 1736, 1737, 5, 20, 0, 0, 1737, 115, 1, 0, 0, 0, 1738,
		1745, 3, 120, 60, 0, 1739, 1740, 5, 56, 0, 0, 1740, 1741, 5, 19, 0, 0,
		1741, 1742, 3, 118, 59, 0, 1742, 1743, 5, 20, 0, 0, 1743, 1745, 1, 0, 0,
		0, 1744, 1738, 1, 0, 0, 0, 1744, 1739, 1, 0, 0, 0, 1745, 117, 1, 0, 0,
		0, 1746, 1751, 3, 604, 302, 0, 1747, 1748, 5, 15, 0, 0, 1748, 1750, 3,
		604, 302, 0, 1749, 1747, 1, 0, 0, 0, 1750, 1753, 1, 0, 0, 0, 1751, 1749,
		1, 0, 0, 0, 1751, 1752, 1, 0, 0, 0, 1752, 119, 1, 0, 0, 0, 1753, 1751,
		1, 0, 0, 0, 1754, 1755, 5, 56, 0, 0, 1755, 1756, 3, 566, 283, 0, 1756,
		121, 1, 0, 0, 0, 1757, 1759, 5, 341, 0, 0, 1758, 1760, 3, 290, 145, 0,
		1759, 1758, 1, 0, 0, 0, 1759, 1760, 1, 0, 0, 0, 1760, 1762, 1, 0, 0, 0,
		1761, 1763, 3, 292, 146, 0, 1762, 1761, 1, 0, 0, 0, 1762, 1763, 1, 0, 0,
		0, 1763, 1764, 1, 0, 0, 0, 1764, 1765, 5, 169, 0, 0, 1765, 1766, 5, 266,
		0, 0, 1766, 1767, 5, 176, 0, 0, 1767, 1768, 6, 61, -1, 0, 1768, 123, 1,
		0, 0, 0, 1769, 1771, 5, 341, 0, 0, 1770, 1772, 3, 290, 145, 0, 1771, 1770,
		1, 0, 0, 0, 1771, 1772, 1, 0, 0, 0, 1772, 1774, 1, 0, 0, 0, 1773, 1775,
		3, 292, 146, 0, 1774, 1773, 1, 0, 0, 0, 1774, 1775, 1, 0, 0, 0, 1775, 1776,
		1, 0, 0, 0, 1776, 1777, 5, 169, 0, 0, 1777, 1779, 5, 266, 0, 0, 1778, 1780,
		3, 530, 265, 0, 1779, 1778, 1, 0, 0, 0, 1779, 1780, 1, 0, 0, 0, 1780, 1781,
		1, 0, 0, 0, 1781, 1783, 3, 718, 359, 0, 1782, 1784, 3, 410, 205, 0, 1783,
		1782, 1, 0, 0, 0, 1783, 1784, 1, 0, 0, 0, 1784, 1786, 1, 0, 0, 0, 1785,
		1787, 3, 128, 64, 0, 1786, 1785, 1, 0, 0, 0, 1786, 1787, 1, 0, 0, 0, 1787,
		1789, 1, 0, 0, 0, 1788, 1790, 3, 126, 63, 0, 1789, 1788, 1, 0, 0, 0, 1789,
		1790, 1, 0, 0, 0, 1790, 1792, 1, 0, 0, 0, 1791, 1793, 3, 398, 199, 0, 1792,
		1791, 1, 0, 0, 0, 1792, 1793, 1, 0, 0, 0, 1793, 1795, 1, 0, 0, 0, 1794,
		1796, 3, 556, 278, 0, 1795, 1794, 1, 0, 0, 0, 1795, 1796, 1, 0, 0, 0, 1796,
		125, 1, 0, 0, 0, 1797, 1798, 5, 322, 0, 0, 1798, 1799, 3, 1032, 516, 0,
		1799, 127, 1, 0, 0, 0, 1800, 1801, 5, 333, 0, 0, 1801, 1802, 3, 718, 359,
		0, 1802, 129, 1, 0, 0, 0, 1803, 1805, 5, 341, 0, 0, 1804, 1806, 3, 290,
		145, 0, 1805, 1804, 1, 0, 0, 0, 1805, 1806, 1, 0, 0, 0, 1806, 1807, 1,
		0, 0, 0, 1807, 1809, 5, 247, 0, 0, 1808, 1810, 5, 121, 0, 0, 1809, 1808,
		1, 0, 0, 0, 1809, 1810, 1, 0, 0, 0, 1810, 1811, 1, 0, 0, 0, 1811, 1813,
		5, 222, 0, 0, 1812, 1814, 3, 530, 265, 0, 1813, 1812, 1, 0, 0, 0, 1813,
		1814, 1, 0, 0, 0, 1814, 1816, 1, 0, 0, 0, 1815, 1817, 3, 1060, 530, 0,
		1816, 1815, 1, 0, 0, 0, 1816, 1817, 1, 0, 0, 0, 1817, 1818, 1, 0, 0, 0,
		1818, 1819, 5, 82, 0, 0, 1819, 1821, 3, 1058, 529, 0, 1820, 1822, 3, 134,
		67, 0, 1821, 1820, 1, 0, 0, 0, 1821, 1822, 1, 0, 0, 0, 1822, 1823, 1, 0,
		0, 0, 1823, 1824, 3, 132, 66, 0, 1824, 131, 1, 0, 0, 0, 1825, 1827, 5,
		171, 0, 0, 1826, 1825, 1, 0, 0, 0, 1826, 1827, 1, 0, 0, 0, 1827, 1828,
		1, 0, 0, 0, 1828, 1829, 5, 100, 0, 0, 1829, 1830, 5, 19, 0, 0, 1830, 1831,
		3, 812, 406, 0, 1831, 1832, 5, 20, 0, 0, 1832, 133, 1, 0, 0, 0, 1833, 1837,
		3, 428, 214, 0, 1834, 1835, 5, 329, 0, 0, 1835, 1837, 3, 430, 215, 0, 1836,
		1833, 1, 0, 0, 0, 1836, 1834, 1, 0, 0, 0, 1837, 135, 1, 0, 0, 0, 1838,
		1840, 5, 341, 0, 0, 1839, 1841, 3, 290, 145, 0, 1840, 1839, 1, 0, 0, 0,
		1840, 1841, 1, 0, 0, 0, 1841, 1842, 1, 0, 0, 0, 1842, 1843, 5, 225, 0,
		0, 1843, 1845, 5, 242, 0, 0, 1844, 1846, 3, 530, 265, 0, 1845, 1844, 1,
		0, 0, 0, 1845, 1846, 1, 0, 0, 0, 1846, 1847, 1, 0, 0, 0, 1847, 1848, 5,
		82, 0, 0, 1848, 1849, 3, 432, 216, 0, 1849, 1850, 5, 82, 0, 0, 1850, 1851,
		3, 1060, 530, 0, 1851, 1853, 3, 1058, 529, 0, 1852, 1854, 3, 138, 69, 0,
		1853, 1852, 1, 0, 0, 0, 1853, 1854, 1, 0, 0, 0, 1854, 137, 1, 0, 0, 0,
		1855, 1856, 5, 241, 0, 0, 1856, 1857, 5, 329, 0, 0, 1857, 1858, 3, 140,
		70, 0, 1858, 139, 1, 0, 0, 0, 1859, 1868, 5, 19, 0, 0, 1860, 1865, 3, 1034,
		517, 0, 1861, 1862, 5, 15, 0, 0, 1862, 1864, 3, 1034, 517, 0, 1863, 1861,
		1, 0, 0, 0, 1864, 1867, 1, 0, 0, 0, 1865, 1863, 1, 0, 0, 0, 1865, 1866,
		1, 0, 0, 0, 1866, 1869, 1, 0, 0, 0, 1867, 1865, 1, 0, 0, 0, 1868, 1860,
		1, 0, 0, 0, 1868, 1869, 1, 0, 0, 0, 1869, 1870, 1, 0, 0, 0, 1870, 1871,
		5, 20, 0, 0, 1871, 141, 1, 0, 0, 0, 1872, 1874, 5, 341, 0, 0, 1873, 1875,
		3, 290, 145, 0, 1874, 1873, 1, 0, 0, 0, 1874, 1875, 1, 0, 0, 0, 1875, 1877,
		1, 0, 0, 0, 1876, 1878, 5, 276, 0, 0, 1877, 1876, 1, 0, 0, 0, 1877, 1878,
		1, 0, 0, 0, 1878, 1880, 1, 0, 0, 0, 1879, 1881, 3, 170, 85, 0, 1880, 1879,
		1, 0, 0, 0, 1880, 1881, 1, 0, 0, 0, 1881, 1883, 1, 0, 0, 0, 1882, 1884,
		3, 168, 84, 0, 1883, 1882, 1, 0, 0, 0, 1883, 1884, 1, 0, 0, 0, 1884, 1885,
		1, 0, 0, 0, 1885, 1887, 5, 186, 0, 0, 1886, 1888, 3, 530, 265, 0, 1887,
		1886, 1, 0, 0, 0, 1887, 1888, 1, 0, 0, 0, 1888, 1889, 1, 0, 0, 0, 1889,
		1890, 3, 1058, 529, 0, 1890, 1892, 3, 166, 83, 0, 1891, 1893, 3, 660, 330,
		0, 1892, 1891, 1, 0, 0, 0, 1892, 1893, 1, 0, 0, 0, 1893, 1895, 1, 0, 0,
		0, 1894, 1896, 3, 162, 81, 0, 1895, 1894, 1, 0, 0, 0, 1895, 1896, 1, 0,
		0, 0, 1896, 1897, 1, 0, 0, 0, 1897, 1899, 3, 152, 76, 0, 1898, 1900, 3,
		148, 74, 0, 1899, 1898, 1, 0, 0, 0, 1899, 1900, 1, 0, 0, 0, 1900, 1902,
		1, 0, 0, 0, 1901, 1903, 3, 144, 72, 0, 1902, 1901, 1, 0, 0, 0, 1902, 1903,
		1, 0, 0, 0, 1903, 143, 1, 0, 0, 0, 1904, 1906, 3, 678, 339, 0, 1905, 1907,
		3, 556, 278, 0, 1906, 1905, 1, 0, 0, 0, 1906, 1907, 1, 0, 0, 0, 1907, 1914,
		1, 0, 0, 0, 1908, 1910, 3, 556, 278, 0, 1909, 1908, 1, 0, 0, 0, 1909, 1910,
		1, 0, 0, 0, 1910, 1911, 1, 0, 0, 0, 1911, 1914, 3, 146, 73, 0, 1912, 1914,
		3, 556, 278, 0, 1913, 1904, 1, 0, 0, 0, 1913, 1909, 1, 0, 0, 0, 1913, 1912,
		1, 0, 0, 0, 1914, 145, 1, 0, 0, 0, 1915, 1916, 5, 15, 0, 0, 1916, 1917,
		5, 290, 0, 0, 1917, 1918, 5, 71, 0, 0, 1918, 1919, 3, 718, 359, 0, 1919,
		147, 1, 0, 0, 0, 1920, 1921, 5, 264, 0, 0, 1921, 1922, 3, 150, 75, 0, 1922,
		149, 1, 0, 0, 0, 1923, 1924, 5, 19, 0, 0, 1924, 1929, 3, 812, 406, 0, 1925,
		1926, 5, 15, 0, 0, 1926, 1928, 3, 812, 406, 0, 1927, 1925, 1, 0, 0, 0,
		1928, 1931, 1, 0, 0, 0, 1929, 1927, 1, 0, 0, 0, 1929, 1930, 1, 0, 0, 0,
		1930, 1932, 1, 0, 0, 0, 1931, 1929, 1, 0, 0, 0, 1932, 1933, 5, 20, 0, 0,
		1933, 151, 1, 0, 0, 0, 1934, 1935, 5, 19, 0, 0, 1935, 1940, 3, 160, 80,
		0, 1936, 1937, 5, 15, 0, 0, 1937, 1939, 3, 160, 80, 0, 1938, 1936, 1, 0,
		0, 0, 1939, 1942, 1, 0, 0, 0, 1940, 1938, 1, 0, 0, 0, 1940, 1941, 1, 0,
		0, 0, 1941, 1943, 1, 0, 0, 0, 1942, 1940, 1, 0, 0, 0, 1943, 1944, 5, 20,
		0, 0, 1944, 1947, 1, 0, 0, 0, 1945, 1947, 3, 154, 77, 0, 1946, 1934, 1,
		0, 0, 0, 1946, 1945, 1, 0, 0, 0, 1947, 153, 1, 0, 0, 0, 1948, 1949, 5,
		19, 0, 0, 1949, 1950, 5, 55, 0, 0, 1950, 1952, 5, 142, 0, 0, 1951, 1953,
		3, 156, 78, 0, 1952, 1951, 1, 0, 0, 0, 1952, 1953, 1, 0, 0, 0, 1953, 1954,
		1, 0, 0, 0, 1954, 1955, 5, 20, 0, 0, 1955, 155, 1, 0, 0, 0, 1956, 1957,
		5, 102, 0, 0, 1957, 1958, 5, 141, 0, 0, 1958, 1959, 5, 83, 0, 0, 1959,
		1960, 3, 158, 79, 0, 1960, 157, 1, 0, 0, 0, 1961, 1962, 5, 19, 0, 0, 1962,
		1967, 3, 160, 80, 0, 1963, 1964, 5, 15, 0, 0, 1964, 1966, 3, 160, 80, 0,
		1965, 1963, 1, 0, 0, 0, 1966, 1969, 1, 0, 0, 0, 1967, 1965, 1, 0, 0, 0,
		1967, 1968, 1, 0, 0, 0, 1968, 1970, 1, 0, 0, 0, 1969, 1967, 1, 0, 0, 0,
		1970, 1971, 5, 20, 0, 0, 1971, 159, 1, 0, 0, 0, 1972, 1974, 3, 812, 406,
		0, 1973, 1975, 3, 1032, 516, 0, 1974, 1973, 1, 0, 0, 0, 1974, 1975, 1,
		0, 0, 0, 1975, 1977, 1, 0, 0, 0, 1976, 1978, 3, 954, 477, 0, 1977, 1976,
		1, 0, 0, 0, 1977, 1978, 1, 0, 0, 0, 1978, 1980, 1, 0, 0, 0, 1979, 1981,
		3, 956, 478, 0, 1980, 1979, 1, 0, 0, 0, 1980, 1981, 1, 0, 0, 0, 1981, 1983,
		1, 0, 0, 0, 1982, 1984, 3, 556, 278, 0, 1983, 1982, 1, 0, 0, 0, 1983, 1984,
		1, 0, 0, 0, 1984, 161, 1, 0, 0, 0, 1985, 1987, 3, 164, 82, 0, 1986, 1985,
		1, 0, 0, 0, 1987, 1988, 1, 0, 0, 0, 1988, 1986, 1, 0, 0, 0, 1988, 1989,
		1, 0, 0, 0, 1989, 163, 1, 0, 0, 0, 1990, 1992, 3, 732, 366, 0, 1991, 1993,
		3, 660, 330, 0, 1992, 1991, 1, 0, 0, 0, 1992, 1993, 1, 0, 0, 0, 1993, 1995,
		1, 0, 0, 0, 1994, 1996, 3, 710, 355, 0, 1995, 1994, 1, 0, 0, 0, 1995, 1996,
		1, 0, 0, 0, 1996, 165, 1, 0, 0, 0, 1997, 1998, 5, 82, 0, 0, 1998, 1999,
		3, 1058, 529, 0, 1999, 167, 1, 0, 0, 0, 2000, 2001, 7, 1, 0, 0, 2001, 169,
		1, 0, 0, 0, 2002, 2003, 5, 291, 0, 0, 2003, 171, 1, 0, 0, 0, 2004, 2006,
		5, 341, 0, 0, 2005, 2007, 3, 290, 145, 0, 2006, 2005, 1, 0, 0, 0, 2006,
		2007, 1, 0, 0, 0, 2007, 2009, 1, 0, 0, 0, 2008, 2010, 3, 292, 146, 0, 2009,
		2008, 1, 0, 0, 0, 2009, 2010, 1, 0, 0, 0, 2010, 2011, 1, 0, 0, 0, 2011,
		2013, 5, 227, 0, 0, 2012, 2014, 3, 530, 265, 0, 2013, 2012, 1, 0, 0, 0,
		2013, 2014, 1, 0, 0, 0, 2014, 2015, 1, 0, 0, 0, 2015, 2016, 3, 1058, 529,
		0, 2016, 2018, 3, 228, 114, 0, 2017, 2019, 3, 224, 112, 0, 2018, 2017,
		1, 0, 0, 0, 2018, 2019, 1, 0, 0, 0, 2019, 2021, 1, 0, 0, 0, 2020, 2022,
		3, 256, 128, 0, 2021, 2020, 1, 0, 0, 0, 2021, 2022, 1, 0, 0, 0, 2022, 2024,
		1, 0, 0, 0, 2023, 2025, 3, 556, 278, 0, 2024, 2023, 1, 0, 0, 0, 2024, 2025,
		1, 0, 0, 0, 2025, 2026, 1, 0, 0, 0, 2026, 2027, 3, 174, 87, 0, 2027, 173,
		1, 0, 0, 0, 2028, 2035, 3, 176, 88, 0, 2029, 2030, 5, 194, 0, 0, 2030,
		2032, 3, 1060, 530, 0, 2031, 2033, 3, 222, 111, 0, 2032, 2031, 1, 0, 0,
		0, 2032, 2033, 1, 0, 0, 0, 2033, 2035, 1, 0, 0, 0, 2034, 2028, 1, 0, 0,
		0, 2034, 2029, 1, 0, 0, 0, 2035, 175, 1, 0, 0, 0, 2036, 2038, 5, 132, 0,
		0, 2037, 2039, 3, 180, 90, 0, 2038, 2037, 1, 0, 0, 0, 2038, 2039, 1, 0,
		0, 0, 2039, 2041, 1, 0, 0, 0, 2040, 2042, 3, 178, 89, 0, 2041, 2040, 1,
		0, 0, 0, 2041, 2042, 1, 0, 0, 0, 2042, 2043, 1, 0, 0, 0, 2043, 2044, 5,
		294, 0, 0, 2044, 177, 1, 0, 0, 0, 2045, 2046, 5, 164, 0, 0, 2046, 2047,
		5, 296, 0, 0, 2047, 2048, 5, 163, 0, 0, 2048, 2049, 5, 297, 0, 0, 2049,
		2050, 3, 180, 90, 0, 2050, 179, 1, 0, 0, 0, 2051, 2052, 3, 182, 91, 0,
		2052, 2053, 5, 25, 0, 0, 2053, 181, 1, 0, 0, 0, 2054, 2059, 3, 184, 92,
		0, 2055, 2056, 5, 25, 0, 0, 2056, 2058, 3, 184, 92, 0, 2057, 2055, 1, 0,
		0, 0, 2058, 2061, 1, 0, 0, 0, 2059, 2057, 1, 0, 0, 0, 2059, 2060, 1, 0,
		0, 0, 2060, 183, 1, 0, 0, 0, 2061, 2059, 1, 0, 0, 0, 2062, 2065, 3, 4,
		2, 0, 2063, 2065, 3, 186, 93, 0, 2064, 2062, 1, 0, 0, 0, 2064, 2063, 1,
		0, 0, 0, 2065, 185, 1, 0, 0, 0, 2066, 2081, 3, 216, 108, 0, 2067, 2081,
		3, 212, 106, 0, 2068, 2081, 3, 208, 104, 0, 2069, 2081, 3, 210, 105, 0,
		2070, 2081, 3, 206, 103, 0, 2071, 2081, 3, 204, 102, 0, 2072, 2081, 3,
		202, 101, 0, 2073, 2081, 3, 190, 95, 0, 2074, 2075, 3, 188, 94, 0, 2075,
		2076, 5, 24, 0, 0, 2076, 2078, 3, 190, 95, 0, 2077, 2079, 3, 1060, 530,
		0, 2078, 2077, 1, 0, 0, 0, 2078, 2079, 1, 0, 0, 0, 2079, 2081, 1, 0, 0,
		0, 2080, 2066, 1, 0, 0, 0, 2080, 2067, 1, 0, 0, 0, 2080, 2068, 1, 0, 0,
		0, 2080, 2069, 1, 0, 0, 0, 2080, 2070, 1, 0, 0, 0, 2080, 2071, 1, 0, 0,
		0, 2080, 2072, 1, 0, 0, 0, 2080, 2073, 1, 0, 0, 0, 2080, 2074, 1, 0, 0,
		0, 2081, 187, 1, 0, 0, 0, 2082, 2083, 3, 1060, 530, 0, 2083, 189, 1, 0,
		0, 0, 2084, 2090, 3, 176, 88, 0, 2085, 2090, 3, 200, 100, 0, 2086, 2090,
		3, 198, 99, 0, 2087, 2090, 3, 194, 97, 0, 2088, 2090, 3, 192, 96, 0, 2089,
		2084, 1, 0, 0, 0, 2089, 2085, 1, 0, 0, 0, 2089, 2086, 1, 0, 0, 0, 2089,
		2087, 1, 0, 0, 0, 2089, 2088, 1, 0, 0, 0, 2090, 191, 1, 0, 0, 0, 2091,
		2092, 5, 68, 0, 0, 2092, 2093, 3, 1060, 530, 0, 2093, 2094, 5, 71, 0, 0,
		2094, 2095, 3, 838, 419, 0, 2095, 2097, 5, 159, 0, 0, 2096, 2098, 3, 180,
		90, 0, 2097, 2096, 1, 0, 0, 0, 2097, 2098, 1, 0, 0, 0, 2098, 2099, 1, 0,
		0, 0, 2099, 2100, 5, 294, 0, 0, 2100, 2101, 5, 68, 0, 0, 2101, 193, 1,
		0, 0, 0, 2102, 2104, 5, 236, 0, 0, 2103, 2105, 3, 180, 90, 0, 2104, 2103,
		1, 0, 0, 0, 2104, 2105, 1, 0, 0, 0, 2105, 2106, 1, 0, 0, 0, 2106, 2107,
		3, 196, 98, 0, 2107, 2108, 5, 294, 0, 0, 2108, 2109, 5, 236, 0, 0, 2109,
		195, 1, 0, 0, 0, 2110, 2111, 5, 278, 0, 0, 2111, 2112, 3, 812, 406, 0,
		2112, 197, 1, 0, 0, 0, 2113, 2115, 5, 199, 0, 0, 2114, 2116, 3, 180, 90,
		0, 2115, 2114, 1, 0, 0, 0, 2115, 2116, 1, 0, 0, 0, 2116, 2117, 1, 0, 0,
		0, 2117, 2118, 5, 294, 0, 0, 2118, 2119, 5, 199, 0, 0, 2119, 199, 1, 0,
		0, 0, 2120, 2121, 5, 286, 0, 0, 2121, 2122, 3, 812, 406, 0, 2122, 2124,
		5, 159, 0, 0, 2123, 2125, 3, 180, 90, 0, 2124, 2123, 1, 0, 0, 0, 2124,
		2125, 1, 0, 0, 0, 2125, 2126, 1, 0, 0, 0, 2126, 2127, 5, 294, 0, 0, 2127,
		2128, 5, 286, 0, 0, 2128, 201, 1, 0, 0, 0, 2129, 2136, 5, 230, 0, 0, 2130,
		2131, 5, 230, 0, 0, 2131, 2132, 5, 100, 0, 0, 2132, 2133, 5, 209, 0, 0,
		2133, 2134, 5, 1, 0, 0, 2134, 2136, 3, 812, 406, 0, 2135, 2129, 1, 0, 0,
		0, 2135, 2130, 1, 0, 0, 0, 2136, 203, 1, 0, 0, 0, 2137, 2138, 5, 244, 0,
		0, 2138, 205, 1, 0, 0, 0, 2139, 2141, 5, 147, 0, 0, 2140, 2142, 3, 1060,
		530, 0, 2141, 2140, 1, 0, 0, 0, 2141, 2142, 1, 0, 0, 0, 2142, 2148, 1,
		0, 0, 0, 2143, 2145, 5, 192, 0, 0, 2144, 2146, 3, 1060, 530, 0, 2145, 2144,
		1, 0, 0, 0, 2145, 2146, 1, 0, 0, 0, 2146, 2148, 1, 0, 0, 0, 2147, 2139,
		1, 0, 0, 0, 2147, 2143, 1, 0, 0, 0, 2148, 207, 1, 0, 0, 0, 2149, 2150,
		5, 152, 0, 0, 2150, 2151, 3, 306, 153, 0, 2151, 2153, 3, 1030, 515, 0,
		2152, 2154, 3, 270, 135, 0, 2153, 2152, 1, 0, 0, 0, 2153, 2154, 1, 0, 0,
		0, 2154, 2161, 1, 0, 0, 0, 2155, 2156, 5, 152, 0, 0, 2156, 2157, 3, 306,
		153, 0, 2157, 2158, 5, 322, 0, 0, 2158, 2159, 3, 812, 406, 0, 2159, 2161,
		1, 0, 0, 0, 2160, 2149, 1, 0, 0, 0, 2160, 2155, 1, 0, 0, 0, 2161, 209,
		1, 0, 0, 0, 2162, 2164, 5, 133, 0, 0, 2163, 2165, 3, 1060, 530, 0, 2164,
		2163, 1, 0, 0, 0, 2164, 2165, 1, 0, 0, 0, 2165, 2171, 1, 0, 0, 0, 2166,
		2168, 5, 196, 0, 0, 2167, 2169, 3, 1060, 530, 0, 2168, 2167, 1, 0, 0, 0,
		2168, 2169, 1, 0, 0, 0, 2169, 2171, 1, 0, 0, 0, 2170, 2162, 1, 0, 0, 0,
		2170, 2166, 1, 0, 0, 0, 2171, 211, 1, 0, 0, 0, 2172, 2174, 5, 295, 0, 0,
		2173, 2175, 3, 812, 406, 0, 2174, 2173, 1, 0, 0, 0, 2174, 2175, 1, 0, 0,
		0, 2175, 2176, 1, 0, 0, 0, 2176, 2178, 3, 214, 107, 0, 2177, 2179, 3, 220,
		110, 0, 2178, 2177, 1, 0, 0, 0, 2178, 2179, 1, 0, 0, 0, 2179, 2180, 1,
		0, 0, 0, 2180, 2181, 5, 294, 0, 0, 2181, 2182, 5, 295, 0, 0, 2182, 213,
		1, 0, 0, 0, 2183, 2184, 5, 296, 0, 0, 2184, 2185, 3, 812, 406, 0, 2185,
		2187, 5, 297, 0, 0, 2186, 2188, 3, 180, 90, 0, 2187, 2186, 1, 0, 0, 0,
		2187, 2188, 1, 0, 0, 0, 2188, 2190, 1, 0, 0, 0, 2189, 2183, 1, 0, 0, 0,
		2190, 2191, 1, 0, 0, 0, 2191, 2189, 1, 0, 0, 0, 2191, 2192, 1, 0, 0, 0,
		2192, 215, 1, 0, 0, 0, 2193, 2194, 5, 302, 0, 0, 2194, 2195, 3, 812, 406,
		0, 2195, 2197, 5, 297, 0, 0, 2196, 2198, 3, 180, 90, 0, 2197, 2196, 1,
		0, 0, 0, 2197, 2198, 1, 0, 0, 0, 2198, 2200, 1, 0, 0, 0, 2199, 2201, 3,
		218, 109, 0, 2200, 2199, 1, 0, 0, 0, 2200, 2201, 1, 0, 0, 0, 2201, 2203,
		1, 0, 0, 0, 2202, 2204, 3, 220, 110, 0, 2203, 2202, 1, 0, 0, 0, 2203, 2204,
		1, 0, 0, 0, 2204, 2205, 1, 0, 0, 0, 2205, 2206, 5, 294, 0, 0, 2206, 2207,
		5, 302, 0, 0, 2207, 217, 1, 0, 0, 0, 2208, 2209, 5, 161, 0, 0, 2209, 2210,
		3, 812, 406, 0, 2210, 2212, 5, 297, 0, 0, 2211, 2213, 3, 180, 90, 0, 2212,
		2211, 1, 0, 0, 0, 2212, 2213, 1, 0, 0, 0, 2213, 2215, 1, 0, 0, 0, 2214,
		2208, 1, 0, 0, 0, 2215, 2216, 1, 0, 0, 0, 2216, 2214, 1, 0, 0, 0, 2216,
		2217, 1, 0, 0, 0, 2217, 219, 1, 0, 0, 0, 2218, 2220, 5, 298, 0, 0, 2219,
		2221, 3, 180, 90, 0, 2220, 2219, 1, 0, 0, 0, 2220, 2221, 1, 0, 0, 0, 2221,
		221, 1, 0, 0, 0, 2222, 2223, 5, 56, 0, 0, 2223, 2224, 3, 1104, 552, 0,
		2224, 223, 1, 0, 0, 0, 2225, 2226, 5, 169, 0, 0, 2226, 2227, 5, 252, 0,
		0, 2227, 2228, 3, 226, 113, 0, 2228, 225, 1, 0, 0, 0, 2229, 2230, 7, 2,
		0, 0, 2230, 227, 1, 0, 0, 0, 2231, 2240, 5, 19, 0, 0, 2232, 2237, 3, 230,
		115, 0, 2233, 2234, 5, 15, 0, 0, 2234, 2236, 3, 230, 115, 0, 2235, 2233,
		1, 0, 0, 0, 2236, 2239, 1, 0, 0, 0, 2237, 2235, 1, 0, 0, 0, 2237, 2238,
		1, 0, 0, 0, 2238, 2241, 1, 0, 0, 0, 2239, 2237, 1, 0, 0, 0, 2240, 2232,
		1, 0, 0, 0, 2240, 2241, 1, 0, 0, 0, 2241, 2242, 1, 0, 0, 0, 2242, 2243,
		5, 20, 0, 0, 2243, 229, 1, 0, 0, 0, 2244, 2246, 3, 234, 117, 0, 2245, 2244,
		1, 0, 0, 0, 2245, 2246, 1, 0, 0, 0, 2246, 2247, 1, 0, 0, 0, 2247, 2248,
		3, 1060, 530, 0, 2248, 2249, 3, 272, 136, 0, 2249, 2258, 1, 0, 0, 0, 2250,
		2252, 3, 234, 117, 0, 2251, 2250, 1, 0, 0, 0, 2251, 2252, 1, 0, 0, 0, 2252,
		2253, 1, 0, 0, 0, 2253, 2254, 3, 1060, 530, 0, 2254, 2255, 3, 232, 116,
		0, 2255, 2256, 6, 115, -1, 0, 2256, 2258, 1, 0, 0, 0, 2257, 2245, 1, 0,
		0, 0, 2257, 2251, 1, 0, 0, 0, 2258, 231, 1, 0, 0, 0, 2259, 2260, 7, 3,
		0, 0, 2260, 233, 1, 0, 0, 0, 2261, 2262, 7, 4, 0, 0, 2262, 235, 1, 0, 0,
		0, 2263, 2265, 5, 341, 0, 0, 2264, 2266, 3, 290, 145, 0, 2265, 2264, 1,
		0, 0, 0, 2265, 2266, 1, 0, 0, 0, 2266, 2268, 1, 0, 0, 0, 2267, 2269, 3,
		292, 146, 0, 2268, 2267, 1, 0, 0, 0, 2268, 2269, 1, 0, 0, 0, 2269, 2271,
		1, 0, 0, 0, 2270, 2272, 3, 282, 141, 0, 2271, 2270, 1, 0, 0, 0, 2271, 2272,
		1, 0, 0, 0, 2272, 2273, 1, 0, 0, 0, 2273, 2275, 5, 176, 0, 0, 2274, 2276,
		3, 530, 265, 0, 2275, 2274, 1, 0, 0, 0, 2275, 2276, 1, 0, 0, 0, 2276, 2277,
		1, 0, 0, 0, 2277, 2279, 3, 262, 131, 0, 2278, 2280, 3, 258, 129, 0, 2279,
		2278, 1, 0, 0, 0, 2279, 2280, 1, 0, 0, 0, 2280, 2282, 1, 0, 0, 0, 2281,
		2283, 3, 240, 120, 0, 2282, 2281, 1, 0, 0, 0, 2282, 2283, 1, 0, 0, 0, 2283,
		2285, 1, 0, 0, 0, 2284, 2286, 3, 238, 119, 0, 2285, 2284, 1, 0, 0, 0, 2285,
		2286, 1, 0, 0, 0, 2286, 2288, 1, 0, 0, 0, 2287, 2289, 3, 250, 125, 0, 2288,
		2287, 1, 0, 0, 0, 2288, 2289, 1, 0, 0, 0, 2289, 2291, 1, 0, 0, 0, 2290,
		2292, 3, 248, 124, 0, 2291, 2290, 1, 0, 0, 0, 2291, 2292, 1, 0, 0, 0, 2292,
		237, 1, 0, 0, 0, 2293, 2300, 5, 158, 0, 0, 2294, 2295, 5, 109, 0, 0, 2295,
		2300, 5, 158, 0, 0, 2296, 2300, 5, 183, 0, 0, 2297, 2300, 5, 260, 0, 0,
		2298, 2300, 5, 284, 0, 0, 2299, 2293, 1, 0, 0, 0, 2299, 2294, 1, 0, 0,
		0, 2299, 2296, 1, 0, 0, 0, 2299, 2297, 1, 0, 0, 0, 2299, 2298, 1, 0, 0,
		0, 2300, 239, 1, 0, 0, 0, 2301, 2302, 5, 259, 0, 0, 2302, 2303, 5, 252,
		0, 0, 2303, 2304, 3, 242, 121, 0, 2304, 241, 1, 0, 0, 0, 2305, 2306, 7,
		2, 0, 0, 2306, 243, 1, 0, 0, 0, 2307, 2308, 5, 56, 0, 0, 2308, 2312, 3,
		246, 123, 0, 2309, 2310, 5, 56, 0, 0, 2310, 2312, 3, 1104, 552, 0, 2311,
		2307, 1, 0, 0, 0, 2311, 2309, 1, 0, 0, 0, 2312, 245, 1, 0, 0, 0, 2313,
		2314, 5, 19, 0, 0, 2314, 2315, 3, 812, 406, 0, 2315, 2316, 5, 20, 0, 0,
		2316, 2321, 1, 0, 0, 0, 2317, 2318, 5, 19, 0, 0, 2318, 2319, 5, 93, 0,
		0, 2319, 2321, 6, 123, -1, 0, 2320, 2313, 1, 0, 0, 0, 2320, 2317, 1, 0,
		0, 0, 2321, 247, 1, 0, 0, 0, 2322, 2324, 3, 556, 278, 0, 2323, 2325, 3,
		244, 122, 0, 2324, 2323, 1, 0, 0, 0, 2324, 2325, 1, 0, 0, 0, 2325, 2331,
		1, 0, 0, 0, 2326, 2328, 3, 244, 122, 0, 2327, 2329, 3, 556, 278, 0, 2328,
		2327, 1, 0, 0, 0, 2328, 2329, 1, 0, 0, 0, 2329, 2331, 1, 0, 0, 0, 2330,
		2322, 1, 0, 0, 0, 2330, 2326, 1, 0, 0, 0, 2331, 249, 1, 0, 0, 0, 2332,
		2333, 5, 194, 0, 0, 2333, 2335, 3, 1060, 530, 0, 2334, 2336, 3, 254, 127,
		0, 2335, 2334, 1, 0, 0, 0, 2335, 2336, 1, 0, 0, 0, 2336, 2342, 1, 0, 0,
		0, 2337, 2339, 3, 254, 127, 0, 2338, 2340, 3, 252, 126, 0, 2339, 2338,
		1, 0, 0, 0, 2339, 2340, 1, 0, 0, 0, 2340, 2342, 1, 0, 0, 0, 2341, 2332,
		1, 0, 0, 0, 2341, 2337, 1, 0, 0, 0, 2342, 251, 1, 0, 0, 0, 2343, 2344,
		5, 194, 0, 0, 2344, 2345, 3, 1060, 530, 0, 2345, 253, 1, 0, 0, 0, 2346,
		2348, 5, 233, 0, 0, 2347, 2349, 3, 256, 128, 0, 2348, 2347, 1, 0, 0, 0,
		2348, 2349, 1, 0, 0, 0, 2349, 2352, 1, 0, 0, 0, 2350, 2352, 3, 256, 128,
		0, 2351, 2346, 1, 0, 0, 0, 2351, 2350, 1, 0, 0, 0, 2352, 255, 1, 0, 0,
		0, 2353, 2354, 5, 102, 0, 0, 2354, 2355, 3, 744, 372, 0, 2355, 257, 1,
		0, 0, 0, 2356, 2357, 3, 260, 130, 0, 2357, 259, 1, 0, 0, 0, 2358, 2359,
		5, 243, 0, 0, 2359, 2360, 3, 272, 136, 0, 2360, 261, 1, 0, 0, 0, 2361,
		2362, 3, 1058, 529, 0, 2362, 2363, 3, 264, 132, 0, 2363, 263, 1, 0, 0,
		0, 2364, 2373, 5, 19, 0, 0, 2365, 2370, 3, 266, 133, 0, 2366, 2367, 5,
		15, 0, 0, 2367, 2369, 3, 266, 133, 0, 2368, 2366, 1, 0, 0, 0, 2369, 2372,
		1, 0, 0, 0, 2370, 2368, 1, 0, 0, 0, 2370, 2371, 1, 0, 0, 0, 2371, 2374,
		1, 0, 0, 0, 2372, 2370, 1, 0, 0, 0, 2373, 2365, 1, 0, 0, 0, 2373, 2374,
		1, 0, 0, 0, 2374, 2375, 1, 0, 0, 0, 2375, 2376, 5, 20, 0, 0, 2376, 265,
		1, 0, 0, 0, 2377, 2378, 3, 1060, 530, 0, 2378, 2380, 3, 272, 136, 0, 2379,
		2381, 3, 948, 474, 0, 2380, 2379, 1, 0, 0, 0, 2380, 2381, 1, 0, 0, 0, 2381,
		2383, 1, 0, 0, 0, 2382, 2384, 3, 270, 135, 0, 2383, 2382, 1, 0, 0, 0, 2383,
		2384, 1, 0, 0, 0, 2384, 2386, 1, 0, 0, 0, 2385, 2387, 3, 268, 134, 0, 2386,
		2385, 1, 0, 0, 0, 2386, 2387, 1, 0, 0, 0, 2387, 2396, 1, 0, 0, 0, 2388,
		2390, 3, 272, 136, 0, 2389, 2391, 3, 948, 474, 0, 2390, 2389, 1, 0, 0,
		0, 2390, 2391, 1, 0, 0, 0, 2391, 2393, 1, 0, 0, 0, 2392, 2394, 3, 268,
		134, 0, 2393, 2392, 1, 0, 0, 0, 2393, 2394, 1, 0, 0, 0, 2394, 2396, 1,
		0, 0, 0, 2395, 2377, 1, 0, 0, 0, 2395, 2388, 1, 0, 0, 0, 2396, 267, 1,
		0, 0, 0, 2397, 2398, 5, 109, 0, 0, 2398, 2399, 5, 123, 0, 0, 2399, 269,
		1, 0, 0, 0, 2400, 2401, 5, 322, 0, 0, 2401, 2402, 3, 812, 406, 0, 2402,
		271, 1, 0, 0, 0, 2403, 2407, 3, 1030, 515, 0, 2404, 2407, 3, 278, 139,
		0, 2405, 2407, 3, 274, 137, 0, 2406, 2403, 1, 0, 0, 0, 2406, 2404, 1, 0,
		0, 0, 2406, 2405, 1, 0, 0, 0, 2407, 273, 1, 0, 0, 0, 2408, 2409, 5, 266,
		0, 0, 2409, 2410, 3, 1076, 538, 0, 2410, 2415, 3, 276, 138, 0, 2411, 2412,
		5, 15, 0, 0, 2412, 2414, 3, 276, 138, 0, 2413, 2411, 1, 0, 0, 0, 2414,
		2417, 1, 0, 0, 0, 2415, 2413, 1, 0, 0, 0, 2415, 2416, 1, 0, 0, 0, 2416,
		2418, 1, 0, 0, 0, 2417, 2415, 1, 0, 0, 0, 2418, 2419, 3, 1078, 539, 0,
		2419, 275, 1, 0, 0, 0, 2420, 2421, 3, 1060, 530, 0, 2421, 2422, 3, 1030,
		515, 0, 2422, 2425, 1, 0, 0, 0, 2423, 2425, 3, 1030, 515, 0, 2424, 2420,
		1, 0, 0, 0, 2424, 2423, 1, 0, 0, 0, 2425, 277, 1, 0, 0, 0, 2426, 2427,
		5, 331, 0, 0, 2427, 2428, 3, 280, 140, 0, 2428, 279, 1, 0, 0, 0, 2429,
		2435, 5, 309, 0, 0, 2430, 2435, 5, 342, 0, 0, 2431, 2435, 5, 94, 0, 0,
		2432, 2435, 5, 54, 0, 0, 2433, 2435, 3, 1060, 530, 0, 2434, 2429, 1, 0,
		0, 0, 2434, 2430, 1, 0, 0, 0, 2434, 2431, 1, 0, 0, 0, 2434, 2432, 1, 0,
		0, 0, 2434, 2433, 1, 0, 0, 0, 2435, 281, 1, 0, 0, 0, 2436, 2437, 5, 123,
		0, 0, 2437, 283, 1, 0, 0, 0, 2438, 2439, 5, 341, 0, 0, 2439, 2440, 5, 151,
		0, 0, 2440, 2442, 3, 1058, 529, 0, 2441, 2443, 3, 556, 278, 0, 2442, 2441,
		1, 0, 0, 0, 2442, 2443, 1, 0, 0, 0, 2443, 285, 1, 0, 0, 0, 2444, 2446,
		5, 341, 0, 0, 2445, 2447, 3, 290, 145, 0, 2446, 2445, 1, 0, 0, 0, 2446,
		2447, 1, 0, 0, 0, 2447, 2448, 1, 0, 0, 0, 2448, 2450, 5, 144, 0, 0, 2449,
		2451, 3, 530, 265, 0, 2450, 2449, 1, 0, 0, 0, 2450, 2451, 1, 0, 0, 0, 2451,
		2452, 1, 0, 0, 0, 2452, 2454, 3, 1058, 529, 0, 2453, 2455, 3, 556, 278,
		0, 2454, 2453, 1, 0, 0, 0, 2454, 2455, 1, 0, 0, 0, 2455, 287, 1, 0, 0,
		0, 2456, 2458, 5, 341, 0, 0, 2457, 2459, 3, 290, 145, 0, 2458, 2457, 1,
		0, 0, 0, 2458, 2459, 1, 0, 0, 0, 2459, 2461, 1, 0, 0, 0, 2460, 2462, 3,
		292, 146, 0, 2461, 2460, 1, 0, 0, 0, 2461, 2462, 1, 0, 0, 0, 2462, 2463,
		1, 0, 0, 0, 2463, 2465, 5, 145, 0, 0, 2464, 2466, 3, 530, 265, 0, 2465,
		2464, 1, 0, 0, 0, 2465, 2466, 1, 0, 0, 0, 2466, 2467, 1, 0, 0, 0, 2467,
		2468, 3, 1058, 529, 0, 2468, 2469, 5, 1, 0, 0, 2469, 2470, 3, 812, 406,
		0, 2470, 289, 1, 0, 0, 0, 2471, 2472, 5, 111, 0, 0, 2472, 2473, 5, 91,
		0, 0, 2473, 291, 1, 0, 0, 0, 2474, 2475, 7, 5, 0, 0, 2475, 293, 1, 0, 0,
		0, 2476, 2477, 5, 248, 0, 0, 2477, 2478, 5, 131, 0, 0, 2478, 295, 1, 0,
		0, 0, 2479, 2480, 5, 120, 0, 0, 2480, 2481, 5, 131, 0, 0, 2481, 297, 1,
		0, 0, 0, 2482, 2483, 5, 261, 0, 0, 2483, 2485, 5, 131, 0, 0, 2484, 2486,
		3, 1060, 530, 0, 2485, 2484, 1, 0, 0, 0, 2485, 2486, 1, 0, 0, 0, 2486,
		299, 1, 0, 0, 0, 2487, 2489, 5, 246, 0, 0, 2488, 2490, 5, 271, 0, 0, 2489,
		2488, 1, 0, 0, 0, 2489, 2490, 1, 0, 0, 0, 2490, 301, 1, 0, 0, 0, 2491,
		2493, 5, 143, 0, 0, 2492, 2494, 5, 271, 0, 0, 2493, 2492, 1, 0, 0, 0, 2493,
		2494, 1, 0, 0, 0, 2494, 303, 1, 0, 0, 0, 2495, 2496, 5, 255, 0, 0, 2496,
		2497, 5, 271, 0, 0, 2497, 2528, 3, 312, 156, 0, 2498, 2499, 5, 255, 0,
		0, 2499, 2500, 3, 1060, 530, 0, 2500, 2501, 5, 1, 0, 0, 2501, 2502, 3,
		812, 406, 0, 2502, 2528, 1, 0, 0, 0, 2503, 2504, 5, 255, 0, 0, 2504, 2505,
		3, 1040, 520, 0, 2505, 2506, 5, 1, 0, 0, 2506, 2507, 3, 812, 406, 0, 2507,
		2528, 1, 0, 0, 0, 2508, 2509, 5, 255, 0, 0, 2509, 2510, 3, 1036, 518, 0,
		2510, 2511, 5, 1, 0, 0, 2511, 2512, 3, 812, 406, 0, 2512, 2528, 1, 0, 0,
		0, 2513, 2514, 5, 255, 0, 0, 2514, 2515, 5, 19, 0, 0, 2515, 2516, 3, 306,
		153, 0, 2516, 2517, 5, 20, 0, 0, 2517, 2518, 5, 1, 0, 0, 2518, 2519, 3,
		812, 406, 0, 2519, 2528, 1, 0, 0, 0, 2520, 2521, 5, 255, 0, 0, 2521, 2522,
		3, 1060, 530, 0, 2522, 2523, 5, 15, 0, 0, 2523, 2524, 3, 1060, 530, 0,
		2524, 2525, 5, 1, 0, 0, 2525, 2526, 6, 152, -1, 0, 2526, 2528, 1, 0, 0,
		0, 2527, 2495, 1, 0, 0, 0, 2527, 2498, 1, 0, 0, 0, 2527, 2503, 1, 0, 0,
		0, 2527, 2508, 1, 0, 0, 0, 2527, 2513, 1, 0, 0, 0, 2527, 2520, 1, 0, 0,
		0, 2528, 305, 1, 0, 0, 0, 2529, 2534, 3, 1060, 530, 0, 2530, 2531, 5, 15,
		0, 0, 2531, 2533, 3, 1060, 530, 0, 2532, 2530, 1, 0, 0, 0, 2533, 2536,
		1, 0, 0, 0, 2534, 2532, 1, 0, 0, 0, 2534, 2535, 1, 0, 0, 0, 2535, 307,
		1, 0, 0, 0, 2536, 2534, 1, 0, 0, 0, 2537, 2539, 3, 310, 155, 0, 2538, 2540,
		3, 312, 156, 0, 2539, 2538, 1, 0, 0, 0, 2539, 2540, 1, 0, 0, 0, 2540, 309,
		1, 0, 0, 0, 2541, 2542, 5, 261, 0, 0, 2542, 2548, 5, 271, 0, 0, 2543, 2545,
		5, 132, 0, 0, 2544, 2546, 5, 271, 0, 0, 2545, 2544, 1, 0, 0, 0, 2545, 2546,
		1, 0, 0, 0, 2546, 2548, 1, 0, 0, 0, 2547, 2541, 1, 0, 0, 0, 2547, 2543,
		1, 0, 0, 0, 2548, 311, 1, 0, 0, 0, 2549, 2554, 3, 314, 157, 0, 2550, 2551,
		5, 15, 0, 0, 2551, 2553, 3, 314, 157, 0, 2552, 2550, 1, 0, 0, 0, 2553,
		2556, 1, 0, 0, 0, 2554, 2552, 1, 0, 0, 0, 2554, 2555, 1, 0, 0, 0, 2555,
		313, 1, 0, 0, 0, 2556, 2554, 1, 0, 0, 0, 2557, 2558, 5, 231, 0, 0, 2558,
		2570, 5, 215, 0, 0, 2559, 2560, 5, 231, 0, 0, 2560, 2570, 5, 287, 0, 0,
		2561, 2562, 5, 191, 0, 0, 2562, 2563, 5, 197, 0, 0, 2563, 2570, 3, 1060,
		530, 0, 2564, 2565, 5, 191, 0, 0, 2565, 2566, 5, 197, 0, 0, 2566, 2567,
		3, 1060, 530, 0, 2567, 2568, 3, 1060, 530, 0, 2568, 2570, 1, 0, 0, 0, 2569,
		2557, 1, 0, 0, 0, 2569, 2559, 1, 0, 0, 0, 2569, 2561, 1, 0, 0, 0, 2569,
		2564, 1, 0, 0, 0, 2570, 315, 1, 0, 0, 0, 2571, 2572, 5, 273, 0, 0, 2572,
		2573, 5, 266, 0, 0, 2573, 2575, 3, 718, 359, 0, 2574, 2576, 3, 346, 173,
		0, 2575, 2574, 1, 0, 0, 0, 2575, 2576, 1, 0, 0, 0, 2576, 317, 1, 0, 0,
		0, 2577, 2579, 5, 340, 0, 0, 2578, 2580, 5, 336, 0, 0, 2579, 2578, 1, 0,
		0, 0, 2579, 2580, 1, 0, 0, 0, 2580, 2581, 1, 0, 0, 0, 2581, 2583, 3, 718,
		359, 0, 2582, 2584, 3, 660, 330, 0, 2583, 2582, 1, 0, 0, 0, 2583, 2584,
		1, 0, 0, 0, 2584, 2585, 1, 0, 0, 0, 2585, 2586, 5, 100, 0, 0, 2586, 2587,
		3, 320, 160, 0, 2587, 2588, 5, 82, 0, 0, 2588, 2590, 3, 812, 406, 0, 2589,
		2591, 3, 322, 161, 0, 2590, 2589, 1, 0, 0, 0, 2591, 2592, 1, 0, 0, 0, 2592,
		2590, 1, 0, 0, 0, 2592, 2593, 1, 0, 0, 0, 2593, 319, 1, 0, 0, 0, 2594,
		2597, 3, 706, 353, 0, 2595, 2597, 3, 692, 346, 0, 2596, 2594, 1, 0, 0,
		0, 2596, 2595, 1, 0, 0, 0, 2597, 321, 1, 0, 0, 0, 2598, 2599, 5, 296, 0,
		0, 2599, 2601, 5, 204, 0, 0, 2600, 2602, 3, 330, 165, 0, 2601, 2600, 1,
		0, 0, 0, 2601, 2602, 1, 0, 0, 0, 2602, 2603, 1, 0, 0, 0, 2603, 2604, 5,
		297, 0, 0, 2604, 2627, 3, 324, 162, 0, 2605, 2606, 5, 296, 0, 0, 2606,
		2607, 5, 109, 0, 0, 2607, 2609, 5, 204, 0, 0, 2608, 2610, 3, 328, 164,
		0, 2609, 2608, 1, 0, 0, 0, 2609, 2610, 1, 0, 0, 0, 2610, 2612, 1, 0, 0,
		0, 2611, 2613, 3, 330, 165, 0, 2612, 2611, 1, 0, 0, 0, 2612, 2613, 1, 0,
		0, 0, 2613, 2614, 1, 0, 0, 0, 2614, 2615, 5, 297, 0, 0, 2615, 2627, 3,
		324, 162, 0, 2616, 2617, 5, 296, 0, 0, 2617, 2618, 5, 109, 0, 0, 2618,
		2619, 5, 204, 0, 0, 2619, 2620, 5, 58, 0, 0, 2620, 2622, 5, 258, 0, 0,
		2621, 2623, 3, 330, 165, 0, 2622, 2621, 1, 0, 0, 0, 2622, 2623, 1, 0, 0,
		0, 2623, 2624, 1, 0, 0, 0, 2624, 2625, 5, 297, 0, 0, 2625, 2627, 3, 324,
		162, 0, 2626, 2598, 1, 0, 0, 0, 2626, 2605, 1, 0, 0, 0, 2626, 2616, 1,
		0, 0, 0, 2627, 323, 1, 0, 0, 0, 2628, 2630, 5, 189, 0, 0, 2629, 2631, 3,
		554, 277, 0, 2630, 2629, 1, 0, 0, 0, 2630, 2631, 1, 0, 0, 0, 2631, 2632,
		1, 0, 0, 0, 2632, 2638, 3, 326, 163, 0, 2633, 2634, 5, 279, 0, 0, 2634,
		2635, 5, 255, 0, 0, 2635, 2638, 3, 350, 175, 0, 2636, 2638, 5, 154, 0,
		0, 2637, 2628, 1, 0, 0, 0, 2637, 2633, 1, 0, 0, 0, 2637, 2636, 1, 0, 0,
		0, 2638, 325, 1, 0, 0, 0, 2639, 2640, 5, 280, 0, 0, 2640, 2643, 3, 372,
		186, 0, 2641, 2643, 5, 247, 0, 0, 2642, 2639, 1, 0, 0, 0, 2642, 2641, 1,
		0, 0, 0, 2643, 327, 1, 0, 0, 0, 2644, 2645, 5, 58, 0, 0, 2645, 2646, 5,
		268, 0, 0, 2646, 329, 1, 0, 0, 0, 2647, 2648, 5, 110, 0, 0, 2648, 2649,
		3, 812, 406, 0, 2649, 331, 1, 0, 0, 0, 2650, 2651, 3, 926, 463, 0, 2651,
		333, 1, 0, 0, 0, 2652, 2653, 3, 566, 283, 0, 2653, 335, 1, 0, 0, 0, 2654,
		2658, 3, 342, 171, 0, 2655, 2658, 3, 340, 170, 0, 2656, 2658, 3, 338, 169,
		0, 2657, 2654, 1, 0, 0, 0, 2657, 2655, 1, 0, 0, 0, 2657, 2656, 1, 0, 0,
		0, 2658, 337, 1, 0, 0, 0, 2659, 2660, 5, 279, 0, 0, 2660, 2662, 3, 378,
		189, 0, 2661, 2663, 3, 926, 463, 0, 2662, 2661, 1, 0, 0, 0, 2662, 2663,
		1, 0, 0, 0, 2663, 2665, 1, 0, 0, 0, 2664, 2666, 3, 660, 330, 0, 2665, 2664,
		1, 0, 0, 0, 2665, 2666, 1, 0, 0, 0, 2666, 2668, 1, 0, 0, 0, 2667, 2669,
		3, 710, 355, 0, 2668, 2667, 1, 0, 0, 0, 2668, 2669, 1, 0, 0, 0, 2669, 2670,
		1, 0, 0, 0, 2670, 2671, 5, 255, 0, 0, 2671, 2673, 3, 350, 175, 0, 2672,
		2674, 3, 648, 324, 0, 2673, 2672, 1, 0, 0, 0, 2673, 2674, 1, 0, 0, 0, 2674,
		2676, 1, 0, 0, 0, 2675, 2677, 3, 346, 173, 0, 2676, 2675, 1, 0, 0, 0, 2676,
		2677, 1, 0, 0, 0, 2677, 2679, 1, 0, 0, 0, 2678, 2680, 3, 366, 183, 0, 2679,
		2678, 1, 0, 0, 0, 2679, 2680, 1, 0, 0, 0, 2680, 2682, 1, 0, 0, 0, 2681,
		2683, 3, 364, 182, 0, 2682, 2681, 1, 0, 0, 0, 2682, 2683, 1, 0, 0, 0, 2683,
		339, 1, 0, 0, 0, 2684, 2686, 5, 154, 0, 0, 2685, 2687, 5, 69, 0, 0, 2686,
		2685, 1, 0, 0, 0, 2686, 2687, 1, 0, 0, 0, 2687, 2688, 1, 0, 0, 0, 2688,
		2690, 3, 378, 189, 0, 2689, 2691, 3, 926, 463, 0, 2690, 2689, 1, 0, 0,
		0, 2690, 2691, 1, 0, 0, 0, 2691, 2693, 1, 0, 0, 0, 2692, 2694, 3, 660,
		330, 0, 2693, 2692, 1, 0, 0, 0, 2693, 2694, 1, 0, 0, 0, 2694, 2696, 1,
		0, 0, 0, 2695, 2697, 3, 710, 355, 0, 2696, 2695, 1, 0, 0, 0, 2696, 2697,
		1, 0, 0, 0, 2697, 2699, 1, 0, 0, 0, 2698, 2700, 3, 346, 173, 0, 2699, 2698,
		1, 0, 0, 0, 2699, 2700, 1, 0, 0, 0, 2700, 2702, 1, 0, 0, 0, 2701, 2703,
		3, 366, 183, 0, 2702, 2701, 1, 0, 0, 0, 2702, 2703, 1, 0, 0, 0, 2703, 2705,
		1, 0, 0, 0, 2704, 2706, 3, 364, 182, 0, 2705, 2704, 1, 0, 0, 0, 2705, 2706,
		1, 0, 0, 0, 2706, 341, 1, 0, 0, 0, 2707, 2709, 3, 376, 188, 0, 2708, 2710,
		3, 554, 277, 0, 2709, 2708, 1, 0, 0, 0, 2709, 2710, 1, 0, 0, 0, 2710, 2711,
		1, 0, 0, 0, 2711, 2713, 3, 368, 184, 0, 2712, 2714, 3, 366, 183, 0, 2713,
		2712, 1, 0, 0, 0, 2713, 2714, 1, 0, 0, 0, 2714, 2716, 1, 0, 0, 0, 2715,
		2717, 3, 364, 182, 0, 2716, 2715, 1, 0, 0, 0, 2716, 2717, 1, 0, 0, 0, 2717,
		2745, 1, 0, 0, 0, 2718, 2720, 3, 376, 188, 0, 2719, 2721, 3, 554, 277,
		0, 2720, 2719, 1, 0, 0, 0, 2720, 2721, 1, 0, 0, 0, 2721, 2722, 1, 0, 0,
		0, 2722, 2723, 3, 358, 179, 0, 2723, 2725, 3, 344, 172, 0, 2724, 2726,
		3, 366, 183, 0, 2725, 2724, 1, 0, 0, 0, 2725, 2726, 1, 0, 0, 0, 2726, 2728,
		1, 0, 0, 0, 2727, 2729, 3, 364, 182, 0, 2728, 2727, 1, 0, 0, 0, 2728, 2729,
		1, 0, 0, 0, 2729, 2745, 1, 0, 0, 0, 2730, 2732, 3, 376, 188, 0, 2731, 2733,
		3, 554, 277, 0, 2732, 2731, 1, 0, 0, 0, 2732, 2733, 1, 0, 0, 0, 2733, 2734,
		1, 0, 0, 0, 2734, 2735, 5, 19, 0, 0, 2735, 2736, 3, 566, 283, 0, 2736,
		2737, 5, 20, 0, 0, 2737, 2739, 3, 344, 172, 0, 2738, 2740, 3, 366, 183,
		0, 2739, 2738, 1, 0, 0, 0, 2739, 2740, 1, 0, 0, 0, 2740, 2742, 1, 0, 0,
		0, 2741, 2743, 3, 364, 182, 0, 2742, 2741, 1, 0, 0, 0, 2742, 2743, 1, 0,
		0, 0, 2743, 2745, 1, 0, 0, 0, 2744, 2707, 1, 0, 0, 0, 2744, 2718, 1, 0,
		0, 0, 2744, 2730, 1, 0, 0, 0, 2745, 343, 1, 0, 0, 0, 2746, 2747, 5, 82,
		0, 0, 2747, 2749, 5, 338, 0, 0, 2748, 2750, 3, 348, 174, 0, 2749, 2748,
		1, 0, 0, 0, 2749, 2750, 1, 0, 0, 0, 2750, 2751, 1, 0, 0, 0, 2751, 2752,
		5, 159, 0, 0, 2752, 2766, 5, 339, 0, 0, 2753, 2754, 5, 82, 0, 0, 2754,
		2756, 5, 338, 0, 0, 2755, 2757, 3, 348, 174, 0, 2756, 2755, 1, 0, 0, 0,
		2756, 2757, 1, 0, 0, 0, 2757, 2758, 1, 0, 0, 0, 2758, 2759, 5, 159, 0,
		0, 2759, 2760, 5, 279, 0, 0, 2760, 2761, 5, 255, 0, 0, 2761, 2763, 3, 350,
		175, 0, 2762, 2764, 3, 346, 173, 0, 2763, 2762, 1, 0, 0, 0, 2763, 2764,
		1, 0, 0, 0, 2764, 2766, 1, 0, 0, 0, 2765, 2746, 1, 0, 0, 0, 2765, 2753,
		1, 0, 0, 0, 2766, 345, 1, 0, 0, 0, 2767, 2768, 5, 327, 0, 0, 2768, 2769,
		3, 812, 406, 0, 2769, 347, 1, 0, 0, 0, 2770, 2776, 3, 554, 277, 0, 2771,
		2772, 5, 82, 0, 0, 2772, 2773, 5, 276, 0, 0, 2773, 2774, 5, 146, 0, 0,
		2774, 2776, 3, 1060, 530, 0, 2775, 2770, 1, 0, 0, 0, 2775, 2771, 1, 0,
		0, 0, 2776, 349, 1, 0, 0, 0, 2777, 2782, 3, 352, 176, 0, 2778, 2779, 5,
		15, 0, 0, 2779, 2781, 3, 352, 176, 0, 2780, 2778, 1, 0, 0, 0, 2781, 2784,
		1, 0, 0, 0, 2782, 2780, 1, 0, 0, 0, 2782, 2783, 1, 0, 0, 0, 2783, 351,
		1, 0, 0, 0, 2784, 2782, 1, 0, 0, 0, 2785, 2788, 3, 354, 177, 0, 2786, 2788,
		3, 356, 178, 0, 2787, 2785, 1, 0, 0, 0, 2787, 2786, 1, 0, 0, 0, 2788, 353,
		1, 0, 0, 0, 2789, 2790, 3, 966, 483, 0, 2790, 2791, 5, 1, 0, 0, 2791, 2792,
		3, 374, 187, 0, 2792, 355, 1, 0, 0, 0, 2793, 2794, 5, 19, 0, 0, 2794, 2795,
		3, 336, 168, 0, 2795, 2796, 5, 20, 0, 0, 2796, 357, 1, 0, 0, 0, 2797, 2800,
		3, 370, 185, 0, 2798, 2800, 3, 360, 180, 0, 2799, 2797, 1, 0, 0, 0, 2799,
		2798, 1, 0, 0, 0, 2800, 359, 1, 0, 0, 0, 2801, 2802, 5, 266, 0, 0, 2802,
		2803, 3, 362, 181, 0, 2803, 361, 1, 0, 0, 0, 2804, 2806, 3, 1058, 529,
		0, 2805, 2807, 3, 634, 317, 0, 2806, 2805, 1, 0, 0, 0, 2806, 2807, 1, 0,
		0, 0, 2807, 2813, 1, 0, 0, 0, 2808, 2810, 3, 656, 328, 0, 2809, 2811, 3,
		634, 317, 0, 2810, 2809, 1, 0, 0, 0, 2810, 2811, 1, 0, 0, 0, 2811, 2813,
		1, 0, 0, 0, 2812, 2804, 1, 0, 0, 0, 2812, 2808, 1, 0, 0, 0, 2813, 363,
		1, 0, 0, 0, 2814, 2815, 5, 297, 0, 0, 2815, 2816, 5, 244, 0, 0, 2816, 2831,
		3, 794, 397, 0, 2817, 2818, 5, 297, 0, 0, 2818, 2819, 5, 244, 0, 0, 2819,
		2820, 5, 102, 0, 0, 2820, 2821, 5, 122, 0, 0, 2821, 2831, 3, 794, 397,
		0, 2822, 2823, 5, 297, 0, 0, 2823, 2824, 5, 244, 0, 0, 2824, 2825, 5, 102,
		0, 0, 2825, 2826, 5, 122, 0, 0, 2826, 2827, 5, 56, 0, 0, 2827, 2828, 3,
		1060, 530, 0, 2828, 2829, 3, 794, 397, 0, 2829, 2831, 1, 0, 0, 0, 2830,
		2814, 1, 0, 0, 0, 2830, 2817, 1, 0, 0, 0, 2830, 2822, 1, 0, 0, 0, 2831,
		365, 1, 0, 0, 0, 2832, 2833, 5, 337, 0, 0, 2833, 2834, 3, 668, 334, 0,
		2834, 367, 1, 0, 0, 0, 2835, 2838, 3, 370, 185, 0, 2836, 2838, 3, 566,
		283, 0, 2837, 2835, 1, 0, 0, 0, 2837, 2836, 1, 0, 0, 0, 2838, 369, 1, 0,
		0, 0, 2839, 2840, 5, 280, 0, 0, 2840, 2845, 3, 372, 186, 0, 2841, 2842,
		5, 15, 0, 0, 2842, 2844, 3, 372, 186, 0, 2843, 2841, 1, 0, 0, 0, 2844,
		2847, 1, 0, 0, 0, 2845, 2843, 1, 0, 0, 0, 2845, 2846, 1, 0, 0, 0, 2846,
		371, 1, 0, 0, 0, 2847, 2845, 1, 0, 0, 0, 2848, 2849, 5, 19, 0, 0, 2849,
		2854, 3, 374, 187, 0, 2850, 2851, 5, 15, 0, 0, 2851, 2853, 3, 374, 187,
		0, 2852, 2850, 1, 0, 0, 0, 2853, 2856, 1, 0, 0, 0, 2854, 2852, 1, 0, 0,
		0, 2854, 2855, 1, 0, 0, 0, 2855, 2857, 1, 0, 0, 0, 2856, 2854, 1, 0, 0,
		0, 2857, 2858, 5, 20, 0, 0, 2858, 373, 1, 0, 0, 0, 2859, 2862, 3, 812,
		406, 0, 2860, 2862, 5, 322, 0, 0, 2861, 2859, 1, 0, 0, 0, 2861, 2860, 1,
		0, 0, 0, 2862, 375, 1, 0, 0, 0, 2863, 2865, 5, 189, 0, 0, 2864, 2866, 3,
		382, 191, 0, 2865, 2864, 1, 0, 0, 0, 2865, 2866, 1, 0, 0, 0, 2866, 2868,
		1, 0, 0, 0, 2867, 2869, 3, 380, 190, 0, 2868, 2867, 1, 0, 0, 0, 2868, 2869,
		1, 0, 0, 0, 2869, 2870, 1, 0, 0, 0, 2870, 2872, 3, 378, 189, 0, 2871, 2873,
		3, 926, 463, 0, 2872, 2871, 1, 0, 0, 0, 2872, 2873, 1, 0, 0, 0, 2873, 377,
		1, 0, 0, 0, 2874, 2877, 3, 966, 483, 0, 2875, 2877, 3, 720, 360, 0, 2876,
		2874, 1, 0, 0, 0, 2876, 2875, 1, 0, 0, 0, 2877, 379, 1, 0, 0, 0, 2878,
		2879, 5, 336, 0, 0, 2879, 381, 1, 0, 0, 0, 2880, 2881, 5, 111, 0, 0, 2881,
		2890, 5, 311, 0, 0, 2882, 2890, 5, 311, 0, 0, 2883, 2884, 5, 111, 0, 0,
		2884, 2890, 5, 91, 0, 0, 2885, 2890, 5, 91, 0, 0, 2886, 2887, 5, 111, 0,
		0, 2887, 2890, 5, 279, 0, 0, 2888, 2890, 5, 279, 0, 0, 2889, 2880, 1, 0,
		0, 0, 2889, 2882, 1, 0, 0, 0, 2889, 2883, 1, 0, 0, 0, 2889, 2885, 1, 0,
		0, 0, 2889, 2886, 1, 0, 0, 0, 2889, 2888, 1, 0, 0, 0, 2890, 383, 1, 0,
		0, 0, 2891, 2892, 5, 125, 0, 0, 2892, 2894, 3, 564, 282, 0, 2893, 2895,
		3, 562, 281, 0, 2894, 2893, 1, 0, 0, 0, 2894, 2895, 1, 0, 0, 0, 2895, 2896,
		1, 0, 0, 0, 2896, 2897, 3, 718, 359, 0, 2897, 2898, 3, 446, 223, 0, 2898,
		2956, 1, 0, 0, 0, 2899, 2900, 5, 125, 0, 0, 2900, 2902, 3, 444, 222, 0,
		2901, 2903, 3, 562, 281, 0, 2902, 2901, 1, 0, 0, 0, 2902, 2903, 1, 0, 0,
		0, 2903, 2904, 1, 0, 0, 0, 2904, 2905, 3, 1058, 529, 0, 2905, 2906, 3,
		446, 223, 0, 2906, 2956, 1, 0, 0, 0, 2907, 2908, 5, 125, 0, 0, 2908, 2910,
		3, 440, 220, 0, 2909, 2911, 3, 562, 281, 0, 2910, 2909, 1, 0, 0, 0, 2910,
		2911, 1, 0, 0, 0, 2911, 2912, 1, 0, 0, 0, 2912, 2913, 3, 1058, 529, 0,
		2913, 2914, 3, 446, 223, 0, 2914, 2956, 1, 0, 0, 0, 2915, 2916, 5, 125,
		0, 0, 2916, 2918, 3, 440, 220, 0, 2917, 2919, 3, 562, 281, 0, 2918, 2917,
		1, 0, 0, 0, 2918, 2919, 1, 0, 0, 0, 2919, 2920, 1, 0, 0, 0, 2920, 2921,
		3, 446, 223, 0, 2921, 2956, 1, 0, 0, 0, 2922, 2923, 5, 125, 0, 0, 2923,
		2924, 5, 225, 0, 0, 2924, 2926, 5, 242, 0, 0, 2925, 2927, 3, 562, 281,
		0, 2926, 2925, 1, 0, 0, 0, 2926, 2927, 1, 0, 0, 0, 2927, 2928, 1, 0, 0,
		0, 2928, 2929, 5, 82, 0, 0, 2929, 2930, 3, 432, 216, 0, 2930, 2931, 5,
		82, 0, 0, 2931, 2932, 3, 1060, 530, 0, 2932, 2933, 3, 1058, 529, 0, 2933,
		2956, 1, 0, 0, 0, 2934, 2935, 5, 125, 0, 0, 2935, 2936, 5, 247, 0, 0, 2936,
		2937, 5, 121, 0, 0, 2937, 2939, 5, 222, 0, 0, 2938, 2940, 3, 562, 281,
		0, 2939, 2938, 1, 0, 0, 0, 2939, 2940, 1, 0, 0, 0, 2940, 2941, 1, 0, 0,
		0, 2941, 2942, 3, 1060, 530, 0, 2942, 2943, 5, 82, 0, 0, 2943, 2944, 3,
		1058, 529, 0, 2944, 2945, 3, 424, 212, 0, 2945, 2956, 1, 0, 0, 0, 2946,
		2947, 5, 125, 0, 0, 2947, 2948, 5, 55, 0, 0, 2948, 2949, 5, 247, 0, 0,
		2949, 2950, 5, 121, 0, 0, 2950, 2951, 5, 221, 0, 0, 2951, 2952, 5, 82,
		0, 0, 2952, 2953, 3, 1058, 529, 0, 2953, 2954, 3, 426, 213, 0, 2954, 2956,
		1, 0, 0, 0, 2955, 2891, 1, 0, 0, 0, 2955, 2899, 1, 0, 0, 0, 2955, 2907,
		1, 0, 0, 0, 2955, 2915, 1, 0, 0, 0, 2955, 2922, 1, 0, 0, 0, 2955, 2934,
		1, 0, 0, 0, 2955, 2946, 1, 0, 0, 0, 2956, 385, 1, 0, 0, 0, 2957, 2959,
		5, 127, 0, 0, 2958, 2960, 3, 556, 278, 0, 2959, 2958, 1, 0, 0, 0, 2959,
		2960, 1, 0, 0, 0, 2960, 2962, 1, 0, 0, 0, 2961, 2963, 3, 420, 210, 0, 2962,
		2961, 1, 0, 0, 0, 2962, 2963, 1, 0, 0, 0, 2963, 387, 1, 0, 0, 0, 2964,
		2965, 5, 130, 0, 0, 2965, 2967, 3, 812, 406, 0, 2966, 2968, 3, 418, 209,
		0, 2967, 2966, 1, 0, 0, 0, 2967, 2968, 1, 0, 0, 0, 2968, 389, 1, 0, 0,
		0, 2969, 2970, 5, 198, 0, 0, 2970, 2971, 5, 150, 0, 0, 2971, 2972, 3, 416,
		208, 0, 2972, 2974, 3, 408, 204, 0, 2973, 2975, 3, 410, 205, 0, 2974, 2973,
		1, 0, 0, 0, 2974, 2975, 1, 0, 0, 0, 2975, 2977, 1, 0, 0, 0, 2976, 2978,
		3, 406, 203, 0, 2977, 2976, 1, 0, 0, 0, 2977, 2978, 1, 0, 0, 0, 2978, 2980,
		1, 0, 0, 0, 2979, 2981, 3, 1032, 516, 0, 2980, 2979, 1, 0, 0, 0, 2980,
		2981, 1, 0, 0, 0, 2981, 2983, 1, 0, 0, 0, 2982, 2984, 3, 678, 339, 0, 2983,
		2982, 1, 0, 0, 0, 2983, 2984, 1, 0, 0, 0, 2984, 2986, 1, 0, 0, 0, 2985,
		2987, 3, 404, 202, 0, 2986, 2985, 1, 0, 0, 0, 2986, 2987, 1, 0, 0, 0, 2987,
		2989, 1, 0, 0, 0, 2988, 2990, 3, 556, 278, 0, 2989, 2988, 1, 0, 0, 0, 2989,
		2990, 1, 0, 0, 0, 2990, 2991, 1, 0, 0, 0, 2991, 2993, 3, 402, 201, 0, 2992,
		2994, 3, 398, 199, 0, 2993, 2992, 1, 0, 0, 0, 2993, 2994, 1, 0, 0, 0, 2994,
		391, 1, 0, 0, 0, 2995, 2996, 5, 138, 0, 0, 2996, 2997, 5, 150, 0, 0, 2997,
		2998, 5, 336, 0, 0, 2998, 2999, 3, 718, 359, 0, 2999, 3000, 5, 69, 0, 0,
		3000, 3001, 3, 394, 197, 0, 3001, 393, 1, 0, 0, 0, 3002, 3008, 3, 396,
		198, 0, 3003, 3004, 5, 98, 0, 0, 3004, 3005, 5, 55, 0, 0, 3005, 3007, 3,
		396, 198, 0, 3006, 3003, 1, 0, 0, 0, 3007, 3010, 1, 0, 0, 0, 3008, 3006,
		1, 0, 0, 0, 3008, 3009, 1, 0, 0, 0, 3009, 395, 1, 0, 0, 0, 3010, 3008,
		1, 0, 0, 0, 3011, 3013, 3, 718, 359, 0, 3012, 3014, 3, 708, 354, 0, 3013,
		3012, 1, 0, 0, 0, 3013, 3014, 1, 0, 0, 0, 3014, 3016, 1, 0, 0, 0, 3015,
		3017, 3, 634, 317, 0, 3016, 3015, 1, 0, 0, 0, 3016, 3017, 1, 0, 0, 0, 3017,
		397, 1, 0, 0, 0, 3018, 3019, 3, 400, 200, 0, 3019, 3020, 3, 256, 128, 0,
		3020, 3024, 1, 0, 0, 0, 3021, 3024, 3, 400, 200, 0, 3022, 3024, 3, 256,
		128, 0, 3023, 3018, 1, 0, 0, 0, 3023, 3021, 1, 0, 0, 0, 3023, 3022, 1,
		0, 0, 0, 3024, 399, 1, 0, 0, 0, 3025, 3026, 5, 102, 0, 0, 3026, 3027, 5,
		310, 0, 0, 3027, 3029, 5, 142, 0, 0, 3028, 3030, 3, 410, 205, 0, 3029,
		3028, 1, 0, 0, 0, 3029, 3030, 1, 0, 0, 0, 3030, 401, 1, 0, 0, 0, 3031,
		3032, 5, 69, 0, 0, 3032, 3033, 5, 170, 0, 0, 3033, 3034, 3, 894, 447, 0,
		3034, 403, 1, 0, 0, 0, 3035, 3036, 5, 140, 0, 0, 3036, 3037, 5, 58, 0,
		0, 3037, 3042, 3, 812, 406, 0, 3038, 3039, 5, 15, 0, 0, 3039, 3041, 3,
		812, 406, 0, 3040, 3038, 1, 0, 0, 0, 3041, 3044, 1, 0, 0, 0, 3042, 3040,
		1, 0, 0, 0, 3042, 3043, 1, 0, 0, 0, 3043, 405, 1, 0, 0, 0, 3044, 3042,
		1, 0, 0, 0, 3045, 3047, 5, 218, 0, 0, 3046, 3045, 1, 0, 0, 0, 3046, 3047,
		1, 0, 0, 0, 3047, 3048, 1, 0, 0, 0, 3048, 3049, 5, 219, 0, 0, 3049, 3050,
		5, 19, 0, 0, 3050, 3051, 3, 812, 406, 0, 3051, 3052, 5, 20, 0, 0, 3052,
		407, 1, 0, 0, 0, 3053, 3054, 5, 269, 0, 0, 3054, 3055, 5, 266, 0, 0, 3055,
		3061, 3, 718, 359, 0, 3056, 3057, 5, 270, 0, 0, 3057, 3058, 5, 266, 0,
		0, 3058, 3061, 3, 718, 359, 0, 3059, 3061, 3, 718, 359, 0, 3060, 3053,
		1, 0, 0, 0, 3060, 3056, 1, 0, 0, 0, 3060, 3059, 1, 0, 0, 0, 3061, 409,
		1, 0, 0, 0, 3062, 3074, 5, 19, 0, 0, 3063, 3068, 3, 412, 206, 0, 3064,
		3065, 5, 15, 0, 0, 3065, 3067, 3, 412, 206, 0, 3066, 3064, 1, 0, 0, 0,
		3067, 3070, 1, 0, 0, 0, 3068, 3066, 1, 0, 0, 0, 3068, 3069, 1, 0, 0, 0,
		3069, 3072, 1, 0, 0, 0, 3070, 3068, 1, 0, 0, 0, 3071, 3073, 5, 15, 0, 0,
		3072, 3071, 1, 0, 0, 0, 3072, 3073, 1, 0, 0, 0, 3073, 3075, 1, 0, 0, 0,
		3074, 3063, 1, 0, 0, 0, 3074, 3075, 1, 0, 0, 0, 3075, 3076, 1, 0, 0, 0,
		3076, 3077, 5, 20, 0, 0, 3077, 411, 1, 0, 0, 0, 3078, 3081, 3, 464, 232,
		0, 3079, 3081, 3, 414, 207, 0, 3080, 3078, 1, 0, 0, 0, 3080, 3079, 1, 0,
		0, 0, 3081, 413, 1, 0, 0, 0, 3082, 3089, 3, 532, 266, 0, 3083, 3089, 3,
		538, 269, 0, 3084, 3085, 3, 1060, 530, 0, 3085, 3086, 3, 1060, 530, 0,
		3086, 3087, 3, 538, 269, 0, 3087, 3089, 1, 0, 0, 0, 3088, 3082, 1, 0, 0,
		0, 3088, 3083, 1, 0, 0, 0, 3088, 3084, 1, 0, 0, 0, 3089, 415, 1, 0, 0,
		0, 3090, 3091, 7, 6, 0, 0, 3091, 417, 1, 0, 0, 0, 3092, 3093, 5, 56, 0,
		0, 3093, 3094, 3, 1104, 552, 0, 3094, 419, 1, 0, 0, 0, 3095, 3100, 3, 422,
		211, 0, 3096, 3097, 5, 15, 0, 0, 3097, 3099, 3, 422, 211, 0, 3098, 3096,
		1, 0, 0, 0, 3099, 3102, 1, 0, 0, 0, 3100, 3098, 1, 0, 0, 0, 3100, 3101,
		1, 0, 0, 0, 3101, 421, 1, 0, 0, 0, 3102, 3100, 1, 0, 0, 0, 3103, 3105,
		3, 718, 359, 0, 3104, 3106, 3, 554, 277, 0, 3105, 3104, 1, 0, 0, 0, 3105,
		3106, 1, 0, 0, 0, 3106, 423, 1, 0, 0, 0, 3107, 3112, 3, 426, 213, 0, 3108,
		3109, 5, 15, 0, 0, 3109, 3111, 3, 426, 213, 0, 3110, 3108, 1, 0, 0, 0,
		3111, 3114, 1, 0, 0, 0, 3112, 3110, 1, 0, 0, 0, 3112, 3113, 1, 0, 0, 0,
		3113, 425, 1, 0, 0, 0, 3114, 3112, 1, 0, 0, 0, 3115, 3135, 3, 428, 214,
		0, 3116, 3117, 5, 171, 0, 0, 3117, 3118, 5, 100, 0, 0, 3118, 3119, 5, 19,
		0, 0, 3119, 3120, 3, 812, 406, 0, 3120, 3121, 5, 20, 0, 0, 3121, 3135,
		1, 0, 0, 0, 3122, 3123, 5, 245, 0, 0, 3123, 3124, 5, 69, 0, 0, 3124, 3125,
		5, 19, 0, 0, 3125, 3126, 3, 430, 215, 0, 3126, 3127, 5, 20, 0, 0, 3127,
		3135, 1, 0, 0, 0, 3128, 3129, 5, 245, 0, 0, 3129, 3130, 5, 69, 0, 0, 3130,
		3135, 5, 55, 0, 0, 3131, 3132, 5, 235, 0, 0, 3132, 3133, 5, 329, 0, 0,
		3133, 3135, 3, 1060, 530, 0, 3134, 3115, 1, 0, 0, 0, 3134, 3116, 1, 0,
		0, 0, 3134, 3122, 1, 0, 0, 0, 3134, 3128, 1, 0, 0, 0, 3134, 3131, 1, 0,
		0, 0, 3135, 427, 1, 0, 0, 0, 3136, 3137, 5, 178, 0, 0, 3137, 3138, 5, 329,
		0, 0, 3138, 3139, 5, 19, 0, 0, 3139, 3140, 3, 430, 215, 0, 3140, 3141,
		5, 20, 0, 0, 3141, 429, 1, 0, 0, 0, 3142, 3147, 3, 1034, 517, 0, 3143,
		3144, 5, 15, 0, 0, 3144, 3146, 3, 1034, 517, 0, 3145, 3143, 1, 0, 0, 0,
		3146, 3149, 1, 0, 0, 0, 3147, 3145, 1, 0, 0, 0, 3147, 3148, 1, 0, 0, 0,
		3148, 431, 1, 0, 0, 0, 3149, 3147, 1, 0, 0, 0, 3150, 3155, 3, 434, 217,
		0, 3151, 3152, 5, 15, 0, 0, 3152, 3154, 3, 434, 217, 0, 3153, 3151, 1,
		0, 0, 0, 3154, 3157, 1, 0, 0, 0, 3155, 3153, 1, 0, 0, 0, 3155, 3156, 1,
		0, 0, 0, 3156, 433, 1, 0, 0, 0, 3157, 3155, 1, 0, 0, 0, 3158, 3160, 3,
		438, 219, 0, 3159, 3161, 3, 436, 218, 0, 3160, 3159, 1, 0, 0, 0, 3160,
		3161, 1, 0, 0, 0, 3161, 435, 1, 0, 0, 0, 3162, 3163, 5, 19, 0, 0, 3163,
		3164, 3, 772, 386, 0, 3164, 3165, 5, 20, 0, 0, 3165, 437, 1, 0, 0, 0, 3166,
		3169, 3, 1060, 530, 0, 3167, 3169, 5, 93, 0, 0, 3168, 3166, 1, 0, 0, 0,
		3168, 3167, 1, 0, 0, 0, 3169, 439, 1, 0, 0, 0, 3170, 3171, 3, 442, 221,
		0, 3171, 441, 1, 0, 0, 0, 3172, 3173, 7, 7, 0, 0, 3173, 443, 1, 0, 0, 0,
		3174, 3175, 5, 123, 0, 0, 3175, 3194, 5, 176, 0, 0, 3176, 3177, 5, 128,
		0, 0, 3177, 3194, 5, 282, 0, 0, 3178, 3194, 5, 144, 0, 0, 3179, 3194, 5,
		145, 0, 0, 3180, 3194, 5, 151, 0, 0, 3181, 3182, 5, 169, 0, 0, 3182, 3194,
		3, 564, 282, 0, 3183, 3184, 5, 169, 0, 0, 3184, 3194, 5, 250, 0, 0, 3185,
		3194, 5, 176, 0, 0, 3186, 3194, 5, 186, 0, 0, 3187, 3188, 5, 205, 0, 0,
		3188, 3194, 5, 282, 0, 0, 3189, 3194, 5, 213, 0, 0, 3190, 3194, 5, 227,
		0, 0, 3191, 3194, 5, 250, 0, 0, 3192, 3194, 5, 282, 0, 0, 3193, 3174, 1,
		0, 0, 0, 3193, 3176, 1, 0, 0, 0, 3193, 3178, 1, 0, 0, 0, 3193, 3179, 1,
		0, 0, 0, 3193, 3180, 1, 0, 0, 0, 3193, 3181, 1, 0, 0, 0, 3193, 3183, 1,
		0, 0, 0, 3193, 3185, 1, 0, 0, 0, 3193, 3186, 1, 0, 0, 0, 3193, 3187, 1,
		0, 0, 0, 3193, 3189, 1, 0, 0, 0, 3193, 3190, 1, 0, 0, 0, 3193, 3191, 1,
		0, 0, 0, 3193, 3192, 1, 0, 0, 0, 3194, 445, 1, 0, 0, 0, 3195, 3200, 3,
		448, 224, 0, 3196, 3197, 5, 15, 0, 0, 3197, 3199, 3, 448, 224, 0, 3198,
		3196, 1, 0, 0, 0, 3199, 3202, 1, 0, 0, 0, 3200, 3198, 1, 0, 0, 0, 3200,
		3201, 1, 0, 0, 0, 3201, 447, 1, 0, 0, 0, 3202, 3200, 1, 0, 0, 0, 3203,
		3204, 5, 255, 0, 0, 3204, 3205, 5, 83, 0, 0, 3205, 3397, 3, 894, 447, 0,
		3206, 3207, 5, 255, 0, 0, 3207, 3208, 5, 56, 0, 0, 3208, 3397, 3, 560,
		280, 0, 3209, 3210, 5, 124, 0, 0, 3210, 3397, 3, 538, 269, 0, 3211, 3212,
		5, 124, 0, 0, 3212, 3397, 3, 532, 266, 0, 3213, 3214, 5, 124, 0, 0, 3214,
		3216, 5, 146, 0, 0, 3215, 3217, 3, 530, 265, 0, 3216, 3215, 1, 0, 0, 0,
		3216, 3217, 1, 0, 0, 0, 3217, 3218, 1, 0, 0, 0, 3218, 3219, 3, 1060, 530,
		0, 3219, 3220, 3, 528, 264, 0, 3220, 3397, 1, 0, 0, 0, 3221, 3222, 5, 160,
		0, 0, 3222, 3224, 5, 146, 0, 0, 3223, 3225, 3, 562, 281, 0, 3224, 3223,
		1, 0, 0, 0, 3224, 3225, 1, 0, 0, 0, 3225, 3226, 1, 0, 0, 0, 3226, 3397,
		3, 1060, 530, 0, 3227, 3228, 5, 160, 0, 0, 3228, 3229, 5, 223, 0, 0, 3229,
		3231, 5, 193, 0, 0, 3230, 3232, 3, 562, 281, 0, 3231, 3230, 1, 0, 0, 0,
		3231, 3232, 1, 0, 0, 0, 3232, 3397, 1, 0, 0, 0, 3233, 3234, 5, 125, 0,
		0, 3234, 3236, 5, 146, 0, 0, 3235, 3237, 3, 562, 281, 0, 3236, 3235, 1,
		0, 0, 0, 3236, 3237, 1, 0, 0, 0, 3237, 3238, 1, 0, 0, 0, 3238, 3239, 3,
		1060, 530, 0, 3239, 3240, 3, 558, 279, 0, 3240, 3397, 1, 0, 0, 0, 3241,
		3242, 5, 125, 0, 0, 3242, 3244, 5, 146, 0, 0, 3243, 3245, 3, 562, 281,
		0, 3244, 3243, 1, 0, 0, 0, 3244, 3245, 1, 0, 0, 0, 3245, 3246, 1, 0, 0,
		0, 3246, 3247, 3, 1060, 530, 0, 3247, 3248, 5, 255, 0, 0, 3248, 3249, 5,
		83, 0, 0, 3249, 3250, 3, 894, 447, 0, 3250, 3397, 1, 0, 0, 0, 3251, 3252,
		5, 124, 0, 0, 3252, 3254, 5, 141, 0, 0, 3253, 3255, 3, 530, 265, 0, 3254,
		3253, 1, 0, 0, 0, 3254, 3255, 1, 0, 0, 0, 3255, 3256, 1, 0, 0, 0, 3256,
		3258, 3, 464, 232, 0, 3257, 3259, 3, 462, 231, 0, 3258, 3257, 1, 0, 0,
		0, 3258, 3259, 1, 0, 0, 0, 3259, 3261, 1, 0, 0, 0, 3260, 3262, 3, 460,
		230, 0, 3261, 3260, 1, 0, 0, 0, 3261, 3262, 1, 0, 0, 0, 3262, 3397, 1,
		0, 0, 0, 3263, 3264, 5, 160, 0, 0, 3264, 3266, 5, 141, 0, 0, 3265, 3267,
		3, 562, 281, 0, 3266, 3265, 1, 0, 0, 0, 3266, 3267, 1, 0, 0, 0, 3267, 3268,
		1, 0, 0, 0, 3268, 3397, 3, 1060, 530, 0, 3269, 3270, 5, 235, 0, 0, 3270,
		3272, 5, 141, 0, 0, 3271, 3273, 3, 562, 281, 0, 3272, 3271, 1, 0, 0, 0,
		3272, 3273, 1, 0, 0, 0, 3273, 3274, 1, 0, 0, 0, 3274, 3275, 3, 1060, 530,
		0, 3275, 3276, 5, 329, 0, 0, 3276, 3277, 3, 1060, 530, 0, 3277, 3397, 1,
		0, 0, 0, 3278, 3279, 5, 125, 0, 0, 3279, 3281, 5, 141, 0, 0, 3280, 3282,
		3, 562, 281, 0, 3281, 3280, 1, 0, 0, 0, 3281, 3282, 1, 0, 0, 0, 3282, 3283,
		1, 0, 0, 0, 3283, 3284, 3, 1060, 530, 0, 3284, 3285, 5, 255, 0, 0, 3285,
		3286, 5, 150, 0, 0, 3286, 3287, 5, 274, 0, 0, 3287, 3288, 3, 522, 261,
		0, 3288, 3397, 1, 0, 0, 0, 3289, 3290, 5, 125, 0, 0, 3290, 3292, 5, 141,
		0, 0, 3291, 3293, 3, 562, 281, 0, 3292, 3291, 1, 0, 0, 0, 3292, 3293, 1,
		0, 0, 0, 3293, 3294, 1, 0, 0, 0, 3294, 3295, 3, 1060, 530, 0, 3295, 3296,
		5, 255, 0, 0, 3296, 3297, 5, 83, 0, 0, 3297, 3298, 3, 894, 447, 0, 3298,
		3397, 1, 0, 0, 0, 3299, 3300, 5, 125, 0, 0, 3300, 3302, 5, 141, 0, 0, 3301,
		3303, 3, 562, 281, 0, 3302, 3301, 1, 0, 0, 0, 3302, 3303, 1, 0, 0, 0, 3303,
		3304, 1, 0, 0, 0, 3304, 3305, 3, 1060, 530, 0, 3305, 3306, 5, 255, 0, 0,
		3306, 3307, 5, 322, 0, 0, 3307, 3308, 3, 812, 406, 0, 3308, 3397, 1, 0,
		0, 0, 3309, 3310, 5, 125, 0, 0, 3310, 3312, 5, 141, 0, 0, 3311, 3313, 3,
		562, 281, 0, 3312, 3311, 1, 0, 0, 0, 3312, 3313, 1, 0, 0, 0, 3313, 3314,
		1, 0, 0, 0, 3314, 3315, 3, 1060, 530, 0, 3315, 3316, 5, 160, 0, 0, 3316,
		3317, 5, 322, 0, 0, 3317, 3397, 1, 0, 0, 0, 3318, 3319, 5, 125, 0, 0, 3319,
		3321, 5, 141, 0, 0, 3320, 3322, 3, 562, 281, 0, 3321, 3320, 1, 0, 0, 0,
		3321, 3322, 1, 0, 0, 0, 3322, 3323, 1, 0, 0, 0, 3323, 3324, 3, 1060, 530,
		0, 3324, 3325, 5, 160, 0, 0, 3325, 3326, 5, 109, 0, 0, 3326, 3327, 5, 78,
		0, 0, 3327, 3397, 1, 0, 0, 0, 3328, 3329, 5, 125, 0, 0, 3329, 3331, 5,
		141, 0, 0, 3330, 3332, 3, 562, 281, 0, 3331, 3330, 1, 0, 0, 0, 3331, 3332,
		1, 0, 0, 0, 3332, 3333, 1, 0, 0, 0, 3333, 3334, 3, 1060, 530, 0, 3334,
		3335, 5, 160, 0, 0, 3335, 3336, 5, 177, 0, 0, 3336, 3397, 1, 0, 0, 0, 3337,
		3338, 5, 235, 0, 0, 3338, 3339, 5, 329, 0, 0, 3339, 3397, 3, 1058, 529,
		0, 3340, 3341, 5, 255, 0, 0, 3341, 3342, 5, 322, 0, 0, 3342, 3397, 3, 1032,
		516, 0, 3343, 3344, 5, 124, 0, 0, 3344, 3345, 5, 247, 0, 0, 3345, 3346,
		5, 155, 0, 0, 3346, 3348, 5, 222, 0, 0, 3347, 3349, 3, 530, 265, 0, 3348,
		3347, 1, 0, 0, 0, 3348, 3349, 1, 0, 0, 0, 3349, 3350, 1, 0, 0, 0, 3350,
		3351, 5, 19, 0, 0, 3351, 3352, 3, 812, 406, 0, 3352, 3353, 5, 20, 0, 0,
		3353, 3397, 1, 0, 0, 0, 3354, 3355, 5, 91, 0, 0, 3355, 3356, 5, 247, 0,
		0, 3356, 3357, 5, 155, 0, 0, 3357, 3359, 5, 222, 0, 0, 3358, 3360, 3, 562,
		281, 0, 3359, 3358, 1, 0, 0, 0, 3359, 3360, 1, 0, 0, 0, 3360, 3361, 1,
		0, 0, 0, 3361, 3362, 5, 19, 0, 0, 3362, 3363, 3, 812, 406, 0, 3363, 3364,
		5, 20, 0, 0, 3364, 3397, 1, 0, 0, 0, 3365, 3366, 5, 160, 0, 0, 3366, 3367,
		5, 247, 0, 0, 3367, 3368, 5, 155, 0, 0, 3368, 3370, 5, 222, 0, 0, 3369,
		3371, 3, 562, 281, 0, 3370, 3369, 1, 0, 0, 0, 3370, 3371, 1, 0, 0, 0, 3371,
		3397, 1, 0, 0, 0, 3372, 3373, 5, 125, 0, 0, 3373, 3375, 3, 456, 228, 0,
		3374, 3376, 3, 562, 281, 0, 3375, 3374, 1, 0, 0, 0, 3375, 3376, 1, 0, 0,
		0, 3376, 3377, 1, 0, 0, 0, 3377, 3378, 3, 1060, 530, 0, 3378, 3379, 3,
		448, 224, 0, 3379, 3397, 1, 0, 0, 0, 3380, 3381, 5, 124, 0, 0, 3381, 3383,
		3, 456, 228, 0, 3382, 3384, 3, 530, 265, 0, 3383, 3382, 1, 0, 0, 0, 3383,
		3384, 1, 0, 0, 0, 3384, 3385, 1, 0, 0, 0, 3385, 3386, 3, 1060, 530, 0,
		3386, 3397, 1, 0, 0, 0, 3387, 3388, 5, 160, 0, 0, 3388, 3390, 3, 456, 228,
		0, 3389, 3391, 3, 562, 281, 0, 3390, 3389, 1, 0, 0, 0, 3390, 3391, 1, 0,
		0, 0, 3391, 3392, 1, 0, 0, 0, 3392, 3393, 3, 1060, 530, 0, 3393, 3397,
		1, 0, 0, 0, 3394, 3397, 3, 452, 226, 0, 3395, 3397, 3, 450, 225, 0, 3396,
		3203, 1, 0, 0, 0, 3396, 3206, 1, 0, 0, 0, 3396, 3209, 1, 0, 0, 0, 3396,
		3211, 1, 0, 0, 0, 3396, 3213, 1, 0, 0, 0, 3396, 3221, 1, 0, 0, 0, 3396,
		3227, 1, 0, 0, 0, 3396, 3233, 1, 0, 0, 0, 3396, 3241, 1, 0, 0, 0, 3396,
		3251, 1, 0, 0, 0, 3396, 3263, 1, 0, 0, 0, 3396, 3269, 1, 0, 0, 0, 3396,
		3278, 1, 0, 0, 0, 3396, 3289, 1, 0, 0, 0, 3396, 3299, 1, 0, 0, 0, 3396,
		3309, 1, 0, 0, 0, 3396, 3318, 1, 0, 0, 0, 3396, 3328, 1, 0, 0, 0, 3396,
		3337, 1, 0, 0, 0, 3396, 3340, 1, 0, 0, 0, 3396, 3343, 1, 0, 0, 0, 3396,
		3354, 1, 0, 0, 0, 3396, 3365, 1, 0, 0, 0, 3396, 3372, 1, 0, 0, 0, 3396,
		3380, 1, 0, 0, 0, 3396, 3387, 1, 0, 0, 0, 3396, 3394, 1, 0, 0, 0, 3396,
		3395, 1, 0, 0, 0, 3397, 449, 1, 0, 0, 0, 3398, 3399, 5, 255, 0, 0, 3399,
		3400, 5, 82, 0, 0, 3400, 3401, 5, 154, 0, 0, 3401, 3402, 3, 548, 274, 0,
		3402, 451, 1, 0, 0, 0, 3403, 3404, 5, 125, 0, 0, 3404, 3406, 5, 141, 0,
		0, 3405, 3407, 3, 562, 281, 0, 3406, 3405, 1, 0, 0, 0, 3406, 3407, 1, 0,
		0, 0, 3407, 3408, 1, 0, 0, 0, 3408, 3409, 3, 1060, 530, 0, 3409, 3411,
		3, 508, 254, 0, 3410, 3412, 3, 526, 263, 0, 3411, 3410, 1, 0, 0, 0, 3411,
		3412, 1, 0, 0, 0, 3412, 3414, 1, 0, 0, 0, 3413, 3415, 3, 454, 227, 0, 3414,
		3413, 1, 0, 0, 0, 3414, 3415, 1, 0, 0, 0, 3415, 3417, 1, 0, 0, 0, 3416,
		3418, 3, 556, 278, 0, 3417, 3416, 1, 0, 0, 0, 3417, 3418, 1, 0, 0, 0, 3418,
		453, 1, 0, 0, 0, 3419, 3420, 5, 56, 0, 0, 3420, 3421, 5, 19, 0, 0, 3421,
		3422, 3, 812, 406, 0, 3422, 3423, 5, 20, 0, 0, 3423, 3424, 5, 263, 0, 0,
		3424, 455, 1, 0, 0, 0, 3425, 3426, 3, 458, 229, 0, 3426, 457, 1, 0, 0,
		0, 3427, 3428, 7, 8, 0, 0, 3428, 459, 1, 0, 0, 0, 3429, 3430, 5, 172, 0,
		0, 3430, 3431, 5, 100, 0, 0, 3431, 3432, 3, 812, 406, 0, 3432, 461, 1,
		0, 0, 0, 3433, 3434, 5, 318, 0, 0, 3434, 3438, 3, 1060, 530, 0, 3435, 3436,
		5, 319, 0, 0, 3436, 3438, 3, 1060, 530, 0, 3437, 3433, 1, 0, 0, 0, 3437,
		3435, 1, 0, 0, 0, 3438, 463, 1, 0, 0, 0, 3439, 3440, 3, 1060, 530, 0, 3440,
		3442, 3, 478, 239, 0, 3441, 3443, 3, 466, 233, 0, 3442, 3441, 1, 0, 0,
		0, 3442, 3443, 1, 0, 0, 0, 3443, 3445, 1, 0, 0, 0, 3444, 3446, 3, 556,
		278, 0, 3445, 3444, 1, 0, 0, 0, 3445, 3446, 1, 0, 0, 0, 3446, 465, 1, 0,
		0, 0, 3447, 3449, 3, 468, 234, 0, 3448, 3447, 1, 0, 0, 0, 3449, 3450, 1,
		0, 0, 0, 3450, 3448, 1, 0, 0, 0, 3450, 3451, 1, 0, 0, 0, 3451, 3453, 1,
		0, 0, 0, 3452, 3454, 3, 558, 279, 0, 3453, 3452, 1, 0, 0, 0, 3453, 3454,
		1, 0, 0, 0, 3454, 467, 1, 0, 0, 0, 3455, 3460, 3, 470, 235, 0, 3456, 3460,
		3, 472, 236, 0, 3457, 3460, 3, 474, 237, 0, 3458, 3460, 3, 526, 263, 0,
		3459, 3455, 1, 0, 0, 0, 3459, 3456, 1, 0, 0, 0, 3459, 3457, 1, 0, 0, 0,
		3459, 3458, 1, 0, 0, 0, 3460, 469, 1, 0, 0, 0, 3461, 3462, 5, 223, 0, 0,
		3462, 3463, 5, 193, 0, 0, 3463, 471, 1, 0, 0, 0, 3464, 3466, 3, 476, 238,
		0, 3465, 3464, 1, 0, 0, 0, 3465, 3466, 1, 0, 0, 0, 3466, 3467, 1, 0, 0,
		0, 3467, 3468, 3, 540, 270, 0, 3468, 473, 1, 0, 0, 0, 3469, 3470, 5, 180,
		0, 0, 3470, 475, 1, 0, 0, 0, 3471, 3472, 5, 146, 0, 0, 3472, 3473, 3, 1060,
		530, 0, 3473, 477, 1, 0, 0, 0, 3474, 3476, 3, 508, 254, 0, 3475, 3477,
		3, 1032, 516, 0, 3476, 3475, 1, 0, 0, 0, 3476, 3477, 1, 0, 0, 0, 3477,
		3479, 1, 0, 0, 0, 3478, 3480, 3, 480, 240, 0, 3479, 3478, 1, 0, 0, 0, 3479,
		3480, 1, 0, 0, 0, 3480, 3483, 1, 0, 0, 0, 3481, 3483, 3, 488, 244, 0, 3482,
		3474, 1, 0, 0, 0, 3482, 3481, 1, 0, 0, 0, 3483, 479, 1, 0, 0, 0, 3484,
		3486, 3, 488, 244, 0, 3485, 3487, 3, 484, 242, 0, 3486, 3485, 1, 0, 0,
		0, 3486, 3487, 1, 0, 0, 0, 3487, 3488, 1, 0, 0, 0, 3488, 3489, 6, 240,
		-1, 0, 3489, 3497, 1, 0, 0, 0, 3490, 3492, 3, 486, 243, 0, 3491, 3493,
		3, 482, 241, 0, 3492, 3491, 1, 0, 0, 0, 3492, 3493, 1, 0, 0, 0, 3493, 3494,
		1, 0, 0, 0, 3494, 3495, 6, 240, -1, 0, 3495, 3497, 1, 0, 0, 0, 3496, 3484,
		1, 0, 0, 0, 3496, 3490, 1, 0, 0, 0, 3497, 481, 1, 0, 0, 0, 3498, 3499,
		3, 488, 244, 0, 3499, 483, 1, 0, 0, 0, 3500, 3501, 3, 486, 243, 0, 3501,
		485, 1, 0, 0, 0, 3502, 3503, 5, 322, 0, 0, 3503, 3504, 3, 812, 406, 0,
		3504, 487, 1, 0, 0, 0, 3505, 3506, 3, 506, 253, 0, 3506, 3507, 5, 19, 0,
		0, 3507, 3508, 3, 812, 406, 0, 3508, 3510, 5, 20, 0, 0, 3509, 3511, 3,
		504, 252, 0, 3510, 3509, 1, 0, 0, 0, 3510, 3511, 1, 0, 0, 0, 3511, 3516,
		1, 0, 0, 0, 3512, 3513, 3, 506, 253, 0, 3513, 3514, 3, 490, 245, 0, 3514,
		3516, 1, 0, 0, 0, 3515, 3505, 1, 0, 0, 0, 3515, 3512, 1, 0, 0, 0, 3516,
		489, 1, 0, 0, 0, 3517, 3518, 5, 181, 0, 0, 3518, 3520, 5, 19, 0, 0, 3519,
		3521, 3, 492, 246, 0, 3520, 3519, 1, 0, 0, 0, 3520, 3521, 1, 0, 0, 0, 3521,
		3523, 1, 0, 0, 0, 3522, 3524, 3, 494, 247, 0, 3523, 3522, 1, 0, 0, 0, 3523,
		3524, 1, 0, 0, 0, 3524, 3526, 1, 0, 0, 0, 3525, 3527, 3, 496, 248, 0, 3526,
		3525, 1, 0, 0, 0, 3526, 3527, 1, 0, 0, 0, 3527, 3529, 1, 0, 0, 0, 3528,
		3530, 3, 498, 249, 0, 3529, 3528, 1, 0, 0, 0, 3529, 3530, 1, 0, 0, 0, 3530,
		3532, 1, 0, 0, 0, 3531, 3533, 3, 500, 250, 0, 3532, 3531, 1, 0, 0, 0, 3532,
		3533, 1, 0, 0, 0, 3533, 3534, 1, 0, 0, 0, 3534, 3535, 5, 20, 0, 0, 3535,
		491, 1, 0, 0, 0, 3536, 3537, 5, 261, 0, 0, 3537, 3538, 5, 102, 0, 0, 3538,
		3539, 3, 502, 251, 0, 3539, 493, 1, 0, 0, 0, 3540, 3541, 5, 185, 0, 0,
		3541, 3542, 5, 58, 0, 0, 3542, 3543, 3, 502, 251, 0, 3543, 495, 1, 0, 0,
		0, 3544, 3545, 5, 207, 0, 0, 3545, 3546, 3, 502, 251, 0, 3546, 497, 1,
		0, 0, 0, 3547, 3548, 5, 212, 0, 0, 3548, 3549, 3, 502, 251, 0, 3549, 499,
		1, 0, 0, 0, 3550, 3554, 5, 149, 0, 0, 3551, 3552, 5, 335, 0, 0, 3552, 3554,
		5, 149, 0, 0, 3553, 3550, 1, 0, 0, 0, 3553, 3551, 1, 0, 0, 0, 3554, 501,
		1, 0, 0, 0, 3555, 3564, 3, 1096, 548, 0, 3556, 3564, 3, 1092, 546, 0, 3557,
		3564, 3, 1088, 544, 0, 3558, 3564, 3, 1084, 542, 0, 3559, 3560, 5, 11,
		0, 0, 3560, 3564, 3, 1096, 548, 0, 3561, 3562, 5, 11, 0, 0, 3562, 3564,
		3, 1084, 542, 0, 3563, 3555, 1, 0, 0, 0, 3563, 3556, 1, 0, 0, 0, 3563,
		3557, 1, 0, 0, 0, 3563, 3558, 1, 0, 0, 0, 3563, 3559, 1, 0, 0, 0, 3563,
		3561, 1, 0, 0, 0, 3564, 503, 1, 0, 0, 0, 3565, 3566, 5, 263, 0, 0, 3566,
		3569, 5, 284, 0, 0, 3567, 3569, 5, 263, 0, 0, 3568, 3565, 1, 0, 0, 0, 3568,
		3567, 1, 0, 0, 0, 3569, 505, 1, 0, 0, 0, 3570, 3571, 5, 177, 0, 0, 3571,
		3581, 5, 56, 0, 0, 3572, 3573, 5, 177, 0, 0, 3573, 3574, 5, 126, 0, 0,
		3574, 3581, 5, 56, 0, 0, 3575, 3576, 5, 177, 0, 0, 3576, 3577, 5, 58, 0,
		0, 3577, 3578, 5, 322, 0, 0, 3578, 3581, 5, 56, 0, 0, 3579, 3581, 5, 56,
		0, 0, 3580, 3570, 1, 0, 0, 0, 3580, 3572, 1, 0, 0, 0, 3580, 3575, 1, 0,
		0, 0, 3580, 3579, 1, 0, 0, 0, 3581, 507, 1, 0, 0, 0, 3582, 3584, 3, 510,
		255, 0, 3583, 3585, 3, 1042, 521, 0, 3584, 3583, 1, 0, 0, 0, 3584, 3585,
		1, 0, 0, 0, 3585, 509, 1, 0, 0, 0, 3586, 3591, 3, 518, 259, 0, 3587, 3591,
		3, 520, 260, 0, 3588, 3591, 3, 514, 257, 0, 3589, 3591, 3, 512, 256, 0,
		3590, 3586, 1, 0, 0, 0, 3590, 3587, 1, 0, 0, 0, 3590, 3588, 1, 0, 0, 0,
		3590, 3589, 1, 0, 0, 0, 3591, 511, 1, 0, 0, 0, 3592, 3593, 5, 117, 0, 0,
		3593, 3594, 3, 1076, 538, 0, 3594, 3595, 3, 522, 261, 0, 3595, 3596, 3,
		1078, 539, 0, 3596, 513, 1, 0, 0, 0, 3597, 3598, 5, 94, 0, 0, 3598, 3607,
		3, 1076, 538, 0, 3599, 3604, 3, 516, 258, 0, 3600, 3601, 5, 15, 0, 0, 3601,
		3603, 3, 516, 258, 0, 3602, 3600, 1, 0, 0, 0, 3603, 3606, 1, 0, 0, 0, 3604,
		3602, 1, 0, 0, 0, 3604, 3605, 1, 0, 0, 0, 3605, 3608, 1, 0, 0, 0, 3606,
		3604, 1, 0, 0, 0, 3607, 3599, 1, 0, 0, 0, 3607, 3608, 1, 0, 0, 0, 3608,
		3609, 1, 0, 0, 0, 3609, 3610, 3, 1078, 539, 0, 3610, 515, 1, 0, 0, 0, 3611,
		3613, 3, 508, 254, 0, 3612, 3614, 3, 1032, 516, 0, 3613, 3612, 1, 0, 0,
		0, 3613, 3614, 1, 0, 0, 0, 3614, 3616, 1, 0, 0, 0, 3615, 3617, 3, 524,
		262, 0, 3616, 3615, 1, 0, 0, 0, 3616, 3617, 1, 0, 0, 0, 3617, 3622, 1,
		0, 0, 0, 3618, 3619, 3, 1060, 530, 0, 3619, 3620, 3, 522, 261, 0, 3620,
		3622, 1, 0, 0, 0, 3621, 3611, 1, 0, 0, 0, 3621, 3618, 1, 0, 0, 0, 3622,
		517, 1, 0, 0, 0, 3623, 3626, 3, 1058, 529, 0, 3624, 3626, 5, 118, 0, 0,
		3625, 3623, 1, 0, 0, 0, 3625, 3624, 1, 0, 0, 0, 3626, 519, 1, 0, 0, 0,
		3627, 3628, 5, 54, 0, 0, 3628, 3629, 3, 1076, 538, 0, 3629, 3630, 3, 522,
		261, 0, 3630, 3631, 3, 1078, 539, 0, 3631, 521, 1, 0, 0, 0, 3632, 3634,
		3, 508, 254, 0, 3633, 3635, 3, 1032, 516, 0, 3634, 3633, 1, 0, 0, 0, 3634,
		3635, 1, 0, 0, 0, 3635, 3637, 1, 0, 0, 0, 3636, 3638, 3, 524, 262, 0, 3637,
		3636, 1, 0, 0, 0, 3637, 3638, 1, 0, 0, 0, 3638, 3640, 1, 0, 0, 0, 3639,
		3641, 3, 556, 278, 0, 3640, 3639, 1, 0, 0, 0, 3640, 3641, 1, 0, 0, 0, 3641,
		523, 1, 0, 0, 0, 3642, 3643, 3, 526, 263, 0, 3643, 525, 1, 0, 0, 0, 3644,
		3645, 5, 109, 0, 0, 3645, 3646, 5, 78, 0, 0, 3646, 527, 1, 0, 0, 0, 3647,
		3650, 3, 532, 266, 0, 3648, 3650, 3, 538, 269, 0, 3649, 3647, 1, 0, 0,
		0, 3649, 3648, 1, 0, 0, 0, 3650, 529, 1, 0, 0, 0, 3651, 3652, 5, 302, 0,
		0, 3652, 3653, 5, 109, 0, 0, 3653, 3654, 5, 330, 0, 0, 3654, 531, 1, 0,
		0, 0, 3655, 3656, 5, 223, 0, 0, 3656, 3657, 5, 193, 0, 0, 3657, 3659, 3,
		534, 267, 0, 3658, 3660, 3, 558, 279, 0, 3659, 3658, 1, 0, 0, 0, 3659,
		3660, 1, 0, 0, 0, 3660, 3662, 1, 0, 0, 0, 3661, 3663, 3, 556, 278, 0, 3662,
		3661, 1, 0, 0, 0, 3662, 3663, 1, 0, 0, 0, 3663, 533, 1, 0, 0, 0, 3664,
		3673, 5, 19, 0, 0, 3665, 3670, 3, 536, 268, 0, 3666, 3667, 5, 15, 0, 0,
		3667, 3669, 3, 536, 268, 0, 3668, 3666, 1, 0, 0, 0, 3669, 3672, 1, 0, 0,
		0, 3670, 3668, 1, 0, 0, 0, 3670, 3671, 1, 0, 0, 0, 3671, 3674, 1, 0, 0,
		0, 3672, 3670, 1, 0, 0, 0, 3673, 3665, 1, 0, 0, 0, 3673, 3674, 1, 0, 0,
		0, 3674, 3675, 1, 0, 0, 0, 3675, 3676, 5, 20, 0, 0, 3676, 535, 1, 0, 0,
		0, 3677, 3679, 3, 1060, 530, 0, 3678, 3680, 3, 954, 477, 0, 3679, 3678,
		1, 0, 0, 0, 3679, 3680, 1, 0, 0, 0, 3680, 3682, 1, 0, 0, 0, 3681, 3683,
		3, 956, 478, 0, 3682, 3681, 1, 0, 0, 0, 3682, 3683, 1, 0, 0, 0, 3683, 537,
		1, 0, 0, 0, 3684, 3685, 5, 136, 0, 0, 3685, 3686, 5, 19, 0, 0, 3686, 3687,
		3, 812, 406, 0, 3687, 3689, 5, 20, 0, 0, 3688, 3690, 3, 558, 279, 0, 3689,
		3688, 1, 0, 0, 0, 3689, 3690, 1, 0, 0, 0, 3690, 3692, 1, 0, 0, 0, 3691,
		3693, 3, 556, 278, 0, 3692, 3691, 1, 0, 0, 0, 3692, 3693, 1, 0, 0, 0, 3693,
		3705, 1, 0, 0, 0, 3694, 3695, 5, 174, 0, 0, 3695, 3696, 5, 193, 0, 0, 3696,
		3697, 3, 554, 277, 0, 3697, 3699, 3, 540, 270, 0, 3698, 3700, 3, 558, 279,
		0, 3699, 3698, 1, 0, 0, 0, 3699, 3700, 1, 0, 0, 0, 3700, 3702, 1, 0, 0,
		0, 3701, 3703, 3, 556, 278, 0, 3702, 3701, 1, 0, 0, 0, 3702, 3703, 1, 0,
		0, 0, 3703, 3705, 1, 0, 0, 0, 3704, 3684, 1, 0, 0, 0, 3704, 3694, 1, 0,
		0, 0, 3705, 539, 1, 0, 0, 0, 3706, 3707, 5, 232, 0, 0, 3707, 3708, 3, 1058,
		529, 0, 3708, 3710, 3, 554, 277, 0, 3709, 3711, 3, 550, 275, 0, 3710, 3709,
		1, 0, 0, 0, 3710, 3711, 1, 0, 0, 0, 3711, 3713, 1, 0, 0, 0, 3712, 3714,
		3, 542, 271, 0, 3713, 3712, 1, 0, 0, 0, 3713, 3714, 1, 0, 0, 0, 3714, 541,
		1, 0, 0, 0, 3715, 3717, 3, 544, 272, 0, 3716, 3718, 3, 546, 273, 0, 3717,
		3716, 1, 0, 0, 0, 3717, 3718, 1, 0, 0, 0, 3718, 3724, 1, 0, 0, 0, 3719,
		3721, 3, 546, 273, 0, 3720, 3722, 3, 544, 272, 0, 3721, 3720, 1, 0, 0,
		0, 3721, 3722, 1, 0, 0, 0, 3722, 3724, 1, 0, 0, 0, 3723, 3715, 1, 0, 0,
		0, 3723, 3719, 1, 0, 0, 0, 3724, 543, 1, 0, 0, 0, 3725, 3726, 5, 82, 0,
		0, 3726, 3727, 5, 279, 0, 0, 3727, 3728, 3, 548, 274, 0, 3728, 545, 1,
		0, 0, 0, 3729, 3730, 5, 82, 0, 0, 3730, 3731, 5, 154, 0, 0, 3731, 3732,
		3, 548, 274, 0, 3732, 547, 1, 0, 0, 0, 3733, 3734, 5, 335, 0, 0, 3734,
		3740, 5, 122, 0, 0, 3735, 3740, 5, 241, 0, 0, 3736, 3740, 5, 135, 0, 0,
		3737, 3738, 5, 255, 0, 0, 3738, 3740, 5, 78, 0, 0, 3739, 3733, 1, 0, 0,
		0, 3739, 3735, 1, 0, 0, 0, 3739, 3736, 1, 0, 0, 0, 3739, 3737, 1, 0, 0,
		0, 3740, 549, 1, 0, 0, 0, 3741, 3742, 5, 202, 0, 0, 3742, 3743, 3, 552,
		276, 0, 3743, 551, 1, 0, 0, 0, 3744, 3749, 5, 119, 0, 0, 3745, 3749, 5,
		70, 0, 0, 3746, 3747, 5, 109, 0, 0, 3747, 3749, 5, 64, 0, 0, 3748, 3744,
		1, 0, 0, 0, 3748, 3745, 1, 0, 0, 0, 3748, 3746, 1, 0, 0, 0, 3749, 553,
		1, 0, 0, 0, 3750, 3751, 5, 19, 0, 0, 3751, 3756, 3, 1060, 530, 0, 3752,
		3753, 5, 15, 0, 0, 3753, 3755, 3, 1060, 530, 0, 3754, 3752, 1, 0, 0, 0,
		3755, 3758, 1, 0, 0, 0, 3756, 3754, 1, 0, 0, 0, 3756, 3757, 1, 0, 0, 0,
		3757, 3759, 1, 0, 0, 0, 3758, 3756, 1, 0, 0, 0, 3759, 3760, 5, 20, 0, 0,
		3760, 555, 1, 0, 0, 0, 3761, 3762, 5, 83, 0, 0, 3762, 3763, 3, 894, 447,
		0, 3763, 557, 1, 0, 0, 0, 3764, 3766, 5, 109, 0, 0, 3765, 3764, 1, 0, 0,
		0, 3765, 3766, 1, 0, 0, 0, 3766, 3767, 1, 0, 0, 0, 3767, 3768, 5, 162,
		0, 0, 3768, 559, 1, 0, 0, 0, 3769, 3772, 3, 1086, 543, 0, 3770, 3772, 3,
		1104, 552, 0, 3771, 3769, 1, 0, 0, 0, 3771, 3770, 1, 0, 0, 0, 3772, 561,
		1, 0, 0, 0, 3773, 3774, 5, 302, 0, 0, 3774, 3775, 5, 330, 0, 0, 3775, 563,
		1, 0, 0, 0, 3776, 3778, 5, 266, 0, 0, 3777, 3779, 5, 176, 0, 0, 3778, 3777,
		1, 0, 0, 0, 3778, 3779, 1, 0, 0, 0, 3779, 565, 1, 0, 0, 0, 3780, 3781,
		3, 568, 284, 0, 3781, 567, 1, 0, 0, 0, 3782, 3783, 3, 602, 301, 0, 3783,
		3785, 3, 578, 289, 0, 3784, 3786, 3, 614, 307, 0, 3785, 3784, 1, 0, 0,
		0, 3785, 3786, 1, 0, 0, 0, 3786, 3788, 1, 0, 0, 0, 3787, 3789, 3, 916,
		458, 0, 3788, 3787, 1, 0, 0, 0, 3788, 3789, 1, 0, 0, 0, 3789, 3826, 1,
		0, 0, 0, 3790, 3791, 3, 574, 287, 0, 3791, 3792, 3, 576, 288, 0, 3792,
		3793, 6, 284, -1, 0, 3793, 3826, 1, 0, 0, 0, 3794, 3795, 3, 602, 301, 0,
		3795, 3796, 5, 38, 0, 0, 3796, 3797, 6, 284, -1, 0, 3797, 3826, 1, 0, 0,
		0, 3798, 3800, 3, 578, 289, 0, 3799, 3801, 3, 614, 307, 0, 3800, 3799,
		1, 0, 0, 0, 3800, 3801, 1, 0, 0, 0, 3801, 3803, 1, 0, 0, 0, 3802, 3804,
		3, 916, 458, 0, 3803, 3802, 1, 0, 0, 0, 3803, 3804, 1, 0, 0, 0, 3804, 3826,
		1, 0, 0, 0, 3805, 3807, 3, 602, 301, 0, 3806, 3805, 1, 0, 0, 0, 3806, 3807,
		1, 0, 0, 0, 3807, 3808, 1, 0, 0, 0, 3808, 3809, 3, 648, 324, 0, 3809, 3810,
		6, 284, -1, 0, 3810, 3826, 1, 0, 0, 0, 3811, 3813, 3, 602, 301, 0, 3812,
		3811, 1, 0, 0, 0, 3812, 3813, 1, 0, 0, 0, 3813, 3814, 1, 0, 0, 0, 3814,
		3815, 3, 648, 324, 0, 3815, 3816, 3, 570, 285, 0, 3816, 3817, 6, 284, -1,
		0, 3817, 3826, 1, 0, 0, 0, 3818, 3820, 3, 602, 301, 0, 3819, 3818, 1, 0,
		0, 0, 3819, 3820, 1, 0, 0, 0, 3820, 3821, 1, 0, 0, 0, 3821, 3822, 3, 648,
		324, 0, 3822, 3823, 3, 572, 286, 0, 3823, 3824, 6, 284, -1, 0, 3824, 3826,
		1, 0, 0, 0, 3825, 3782, 1, 0, 0, 0, 3825, 3790, 1, 0, 0, 0, 3825, 3794,
		1, 0, 0, 0, 3825, 3798, 1, 0, 0, 0, 3825, 3806, 1, 0, 0, 0, 3825, 3812,
		1, 0, 0, 0, 3825, 3819, 1, 0, 0, 0, 3826, 569, 1, 0, 0, 0, 3827, 3828,
		7, 9, 0, 0, 3828, 571, 1, 0, 0, 0, 3829, 3830, 7, 10, 0, 0, 3830, 573,
		1, 0, 0, 0, 3831, 3832, 3, 602, 301, 0, 3832, 3833, 5, 15, 0, 0, 3833,
		575, 1, 0, 0, 0, 3834, 3835, 7, 11, 0, 0, 3835, 577, 1, 0, 0, 0, 3836,
		3839, 3, 586, 293, 0, 3837, 3839, 3, 580, 290, 0, 3838, 3836, 1, 0, 0,
		0, 3838, 3837, 1, 0, 0, 0, 3839, 579, 1, 0, 0, 0, 3840, 3841, 3, 582, 291,
		0, 3841, 581, 1, 0, 0, 0, 3842, 3843, 6, 291, -1, 0, 3843, 3845, 3, 586,
		293, 0, 3844, 3846, 3, 584, 292, 0, 3845, 3844, 1, 0, 0, 0, 3846, 3847,
		1, 0, 0, 0, 3847, 3845, 1, 0, 0, 0, 3847, 3848, 1, 0, 0, 0, 3848, 3855,
		1, 0, 0, 0, 3849, 3850, 3, 586, 293, 0, 3850, 3851, 3, 588, 294, 0, 3851,
		3852, 5, 69, 0, 0, 3852, 3853, 6, 291, -1, 0, 3853, 3855, 1, 0, 0, 0, 3854,
		3842, 1, 0, 0, 0, 3854, 3849, 1, 0, 0, 0, 3855, 3863, 1, 0, 0, 0, 3856,
		3857, 10, 1, 0, 0, 3857, 3858, 3, 588, 294, 0, 3858, 3859, 5, 69, 0, 0,
		3859, 3860, 6, 291, -1, 0, 3860, 3862, 1, 0, 0, 0, 3861, 3856, 1, 0, 0,
		0, 3862, 3865, 1, 0, 0, 0, 3863, 3861, 1, 0, 0, 0, 3863, 3864, 1, 0, 0,
		0, 3864, 583, 1, 0, 0, 0, 3865, 3863, 1, 0, 0, 0, 3866, 3867, 3, 588, 294,
		0, 3867, 3868, 3, 586, 293, 0, 3868, 585, 1, 0, 0, 0, 3869, 3875, 3, 620,
		310, 0, 3870, 3872, 3, 838, 419, 0, 3871, 3873, 3, 948, 474, 0, 3872, 3871,
		1, 0, 0, 0, 3872, 3873, 1, 0, 0, 0, 3873, 3875, 1, 0, 0, 0, 3874, 3869,
		1, 0, 0, 0, 3874, 3870, 1, 0, 0, 0, 3875, 587, 1, 0, 0, 0, 3876, 3878,
		3, 598, 299, 0, 3877, 3876, 1, 0, 0, 0, 3877, 3878, 1, 0, 0, 0, 3878, 3879,
		1, 0, 0, 0, 3879, 3881, 3, 596, 298, 0, 3880, 3882, 3, 926, 463, 0, 3881,
		3880, 1, 0, 0, 0, 3881, 3882, 1, 0, 0, 0, 3882, 3883, 1, 0, 0, 0, 3883,
		3885, 3, 594, 297, 0, 3884, 3886, 3, 592, 296, 0, 3885, 3884, 1, 0, 0,
		0, 3885, 3886, 1, 0, 0, 0, 3886, 3888, 1, 0, 0, 0, 3887, 3889, 3, 590,
		295, 0, 3888, 3887, 1, 0, 0, 0, 3888, 3889, 1, 0, 0, 0, 3889, 589, 1, 0,
		0, 0, 3890, 3894, 5, 148, 0, 0, 3891, 3892, 5, 148, 0, 0, 3892, 3894, 5,
		58, 0, 0, 3893, 3890, 1, 0, 0, 0, 3893, 3891, 1, 0, 0, 0, 3894, 591, 1,
		0, 0, 0, 3895, 3896, 5, 265, 0, 0, 3896, 593, 1, 0, 0, 0, 3897, 3898, 7,
		12, 0, 0, 3898, 595, 1, 0, 0, 0, 3899, 3900, 7, 13, 0, 0, 3900, 597, 1,
		0, 0, 0, 3901, 3903, 5, 70, 0, 0, 3902, 3904, 3, 600, 300, 0, 3903, 3902,
		1, 0, 0, 0, 3903, 3904, 1, 0, 0, 0, 3904, 3911, 1, 0, 0, 0, 3905, 3911,
		5, 85, 0, 0, 3906, 3908, 5, 75, 0, 0, 3907, 3909, 3, 600, 300, 0, 3908,
		3907, 1, 0, 0, 0, 3908, 3909, 1, 0, 0, 0, 3909, 3911, 1, 0, 0, 0, 3910,
		3901, 1, 0, 0, 0, 3910, 3905, 1, 0, 0, 0, 3910, 3906, 1, 0, 0, 0, 3911,
		599, 1, 0, 0, 0, 3912, 3913, 5, 85, 0, 0, 3913, 601, 1, 0, 0, 0, 3914,
		3916, 5, 102, 0, 0, 3915, 3917, 5, 90, 0, 0, 3916, 3915, 1, 0, 0, 0, 3916,
		3917, 1, 0, 0, 0, 3917, 3918, 1, 0, 0, 0, 3918, 3923, 3, 604, 302, 0, 3919,
		3920, 5, 15, 0, 0, 3920, 3922, 3, 604, 302, 0, 3921, 3919, 1, 0, 0, 0,
		3922, 3925, 1, 0, 0, 0, 3923, 3921, 1, 0, 0, 0, 3923, 3924, 1, 0, 0, 0,
		3924, 603, 1, 0, 0, 0, 3925, 3923, 1, 0, 0, 0, 3926, 3927, 3, 1060, 530,
		0, 3927, 3928, 5, 56, 0, 0, 3928, 3930, 3, 838, 419, 0, 3929, 3931, 3,
		606, 303, 0, 3930, 3929, 1, 0, 0, 0, 3930, 3931, 1, 0, 0, 0, 3931, 605,
		1, 0, 0, 0, 3932, 3933, 3, 608, 304, 0, 3933, 607, 1, 0, 0, 0, 3934, 3935,
		5, 102, 0, 0, 3935, 3937, 5, 156, 0, 0, 3936, 3938, 3, 948, 474, 0, 3937,
		3936, 1, 0, 0, 0, 3937, 3938, 1, 0, 0, 0, 3938, 3957, 1, 0, 0, 0, 3939,
		3940, 5, 102, 0, 0, 3940, 3942, 5, 156, 0, 0, 3941, 3943, 3, 948, 474,
		0, 3942, 3941, 1, 0, 0, 0, 3942, 3943, 1, 0, 0, 0, 3943, 3944, 1, 0, 0,
		0, 3944, 3945, 5, 315, 0, 0, 3945, 3946, 3, 610, 305, 0, 3946, 3947, 5,
		110, 0, 0, 3947, 3948, 3, 610, 305, 0, 3948, 3957, 1, 0, 0, 0, 3949, 3950,
		5, 102, 0, 0, 3950, 3952, 5, 156, 0, 0, 3951, 3953, 3, 948, 474, 0, 3952,
		3951, 1, 0, 0, 0, 3952, 3953, 1, 0, 0, 0, 3953, 3954, 1, 0, 0, 0, 3954,
		3955, 5, 206, 0, 0, 3955, 3957, 3, 610, 305, 0, 3956, 3934, 1, 0, 0, 0,
		3956, 3939, 1, 0, 0, 0, 3956, 3949, 1, 0, 0, 0, 3957, 609, 1, 0, 0, 0,
		3958, 3961, 3, 612, 306, 0, 3959, 3961, 5, 316, 0, 0, 3960, 3958, 1, 0,
		0, 0, 3960, 3959, 1, 0, 0, 0, 3961, 611, 1, 0, 0, 0, 3962, 3966, 3, 1096,
		548, 0, 3963, 3966, 3, 1038, 519, 0, 3964, 3966, 3, 1036, 518, 0, 3965,
		3962, 1, 0, 0, 0, 3965, 3963, 1, 0, 0, 0, 3965, 3964, 1, 0, 0, 0, 3966,
		613, 1, 0, 0, 0, 3967, 3968, 3, 616, 308, 0, 3968, 615, 1, 0, 0, 0, 3969,
		3971, 5, 84, 0, 0, 3970, 3972, 3, 926, 463, 0, 3971, 3970, 1, 0, 0, 0,
		3971, 3972, 1, 0, 0, 0, 3972, 3973, 1, 0, 0, 0, 3973, 3974, 5, 58, 0, 0,
		3974, 3979, 3, 618, 309, 0, 3975, 3976, 5, 15, 0, 0, 3976, 3978, 3, 618,
		309, 0, 3977, 3975, 1, 0, 0, 0, 3978, 3981, 1, 0, 0, 0, 3979, 3977, 1,
		0, 0, 0, 3979, 3980, 1, 0, 0, 0, 3980, 617, 1, 0, 0, 0, 3981, 3979, 1,
		0, 0, 0, 3982, 3984, 3, 812, 406, 0, 3983, 3985, 3, 1032, 516, 0, 3984,
		3983, 1, 0, 0, 0, 3984, 3985, 1, 0, 0, 0, 3985, 3987, 1, 0, 0, 0, 3986,
		3988, 3, 954, 477, 0, 3987, 3986, 1, 0, 0, 0, 3987, 3988, 1, 0, 0, 0, 3988,
		3990, 1, 0, 0, 0, 3989, 3991, 3, 956, 478, 0, 3990, 3989, 1, 0, 0, 0, 3990,
		3991, 1, 0, 0, 0, 3991, 619, 1, 0, 0, 0, 3992, 3994, 3, 642, 321, 0, 3993,
		3995, 3, 648, 324, 0, 3994, 3993, 1, 0, 0, 0, 3994, 3995, 1, 0, 0, 0, 3995,
		3997, 1, 0, 0, 0, 3996, 3998, 3, 622, 311, 0, 3997, 3996, 1, 0, 0, 0, 3997,
		3998, 1, 0, 0, 0, 3998, 621, 1, 0, 0, 0, 3999, 4001, 3, 634, 317, 0, 4000,
		4002, 3, 638, 319, 0, 4001, 4000, 1, 0, 0, 0, 4001, 4002, 1, 0, 0, 0, 4002,
		4004, 1, 0, 0, 0, 4003, 4005, 3, 636, 318, 0, 4004, 4003, 1, 0, 0, 0, 4004,
		4005, 1, 0, 0, 0, 4005, 4007, 1, 0, 0, 0, 4006, 4008, 3, 758, 379, 0, 4007,
		4006, 1, 0, 0, 0, 4007, 4008, 1, 0, 0, 0, 4008, 4010, 1, 0, 0, 0, 4009,
		4011, 3, 628, 314, 0, 4010, 4009, 1, 0, 0, 0, 4010, 4011, 1, 0, 0, 0, 4011,
		4014, 1, 0, 0, 0, 4012, 4014, 3, 624, 312, 0, 4013, 3999, 1, 0, 0, 0, 4013,
		4012, 1, 0, 0, 0, 4014, 623, 1, 0, 0, 0, 4015, 4017, 3, 638, 319, 0, 4016,
		4018, 3, 636, 318, 0, 4017, 4016, 1, 0, 0, 0, 4017, 4018, 1, 0, 0, 0, 4018,
		4020, 1, 0, 0, 0, 4019, 4021, 3, 758, 379, 0, 4020, 4019, 1, 0, 0, 0, 4020,
		4021, 1, 0, 0, 0, 4021, 4023, 1, 0, 0, 0, 4022, 4024, 3, 628, 314, 0, 4023,
		4022, 1, 0, 0, 0, 4023, 4024, 1, 0, 0, 0, 4024, 4027, 1, 0, 0, 0, 4025,
		4027, 3, 626, 313, 0, 4026, 4015, 1, 0, 0, 0, 4026, 4025, 1, 0, 0, 0, 4027,
		625, 1, 0, 0, 0, 4028, 4030, 3, 636, 318, 0, 4029, 4031, 3, 758, 379, 0,
		4030, 4029, 1, 0, 0, 0, 4030, 4031, 1, 0, 0, 0, 4031, 4033, 1, 0, 0, 0,
		4032, 4034, 3, 628, 314, 0, 4033, 4032, 1, 0, 0, 0, 4033, 4034, 1, 0, 0,
		0, 4034, 4041, 1, 0, 0, 0, 4035, 4037, 3, 758, 379, 0, 4036, 4038, 3, 628,
		314, 0, 4037, 4036, 1, 0, 0, 0, 4037, 4038, 1, 0, 0, 0, 4038, 4041, 1,
		0, 0, 0, 4039, 4041, 3, 628, 314, 0, 4040, 4028, 1, 0, 0, 0, 4040, 4035,
		1, 0, 0, 0, 4040, 4039, 1, 0, 0, 0, 4041, 627, 1, 0, 0, 0, 4042, 4043,
		3, 630, 315, 0, 4043, 629, 1, 0, 0, 0, 4044, 4045, 5, 328, 0, 0, 4045,
		4050, 3, 632, 316, 0, 4046, 4047, 5, 15, 0, 0, 4047, 4049, 3, 632, 316,
		0, 4048, 4046, 1, 0, 0, 0, 4049, 4052, 1, 0, 0, 0, 4050, 4048, 1, 0, 0,
		0, 4050, 4051, 1, 0, 0, 0, 4051, 631, 1, 0, 0, 0, 4052, 4050, 1, 0, 0,
		0, 4053, 4054, 3, 1060, 530, 0, 4054, 4055, 5, 56, 0, 0, 4055, 4056, 3,
		872, 436, 0, 4056, 633, 1, 0, 0, 0, 4057, 4058, 5, 327, 0, 0, 4058, 4059,
		3, 812, 406, 0, 4059, 635, 1, 0, 0, 0, 4060, 4061, 5, 304, 0, 0, 4061,
		4062, 3, 812, 406, 0, 4062, 637, 1, 0, 0, 0, 4063, 4066, 3, 640, 320, 0,
		4064, 4066, 3, 920, 460, 0, 4065, 4063, 1, 0, 0, 0, 4065, 4064, 1, 0, 0,
		0, 4066, 639, 1, 0, 0, 0, 4067, 4068, 3, 922, 461, 0, 4068, 4069, 5, 55,
		0, 0, 4069, 641, 1, 0, 0, 0, 4070, 4072, 5, 93, 0, 0, 4071, 4073, 3, 926,
		463, 0, 4072, 4071, 1, 0, 0, 0, 4072, 4073, 1, 0, 0, 0, 4073, 4075, 1,
		0, 0, 0, 4074, 4076, 3, 646, 323, 0, 4075, 4074, 1, 0, 0, 0, 4075, 4076,
		1, 0, 0, 0, 4076, 4078, 1, 0, 0, 0, 4077, 4079, 3, 594, 297, 0, 4078, 4077,
		1, 0, 0, 0, 4078, 4079, 1, 0, 0, 0, 4079, 4081, 1, 0, 0, 0, 4080, 4082,
		3, 644, 322, 0, 4081, 4080, 1, 0, 0, 0, 4081, 4082, 1, 0, 0, 0, 4082, 4083,
		1, 0, 0, 0, 4083, 4100, 3, 794, 397, 0, 4084, 4086, 5, 93, 0, 0, 4085,
		4087, 3, 926, 463, 0, 4086, 4085, 1, 0, 0, 0, 4086, 4087, 1, 0, 0, 0, 4087,
		4089, 1, 0, 0, 0, 4088, 4090, 3, 646, 323, 0, 4089, 4088, 1, 0, 0, 0, 4089,
		4090, 1, 0, 0, 0, 4090, 4092, 1, 0, 0, 0, 4091, 4093, 3, 594, 297, 0, 4092,
		4091, 1, 0, 0, 0, 4092, 4093, 1, 0, 0, 0, 4093, 4095, 1, 0, 0, 0, 4094,
		4096, 3, 644, 322, 0, 4095, 4094, 1, 0, 0, 0, 4095, 4096, 1, 0, 0, 0, 4096,
		4097, 1, 0, 0, 0, 4097, 4098, 5, 69, 0, 0, 4098, 4100, 6, 321, -1, 0, 4099,
		4070, 1, 0, 0, 0, 4099, 4084, 1, 0, 0, 0, 4100, 643, 1, 0, 0, 0, 4101,
		4102, 5, 56, 0, 0, 4102, 4106, 5, 94, 0, 0, 4103, 4104, 5, 56, 0, 0, 4104,
		4106, 3, 1058, 529, 0, 4105, 4101, 1, 0, 0, 0, 4105, 4103, 1, 0, 0, 0,
		4106, 645, 1, 0, 0, 0, 4107, 4108, 5, 102, 0, 0, 4108, 4115, 3, 1060, 530,
		0, 4109, 4110, 5, 102, 0, 0, 4110, 4111, 3, 1060, 530, 0, 4111, 4112, 5,
		83, 0, 0, 4112, 4113, 3, 894, 447, 0, 4113, 4115, 1, 0, 0, 0, 4114, 4107,
		1, 0, 0, 0, 4114, 4109, 1, 0, 0, 0, 4115, 647, 1, 0, 0, 0, 4116, 4117,
		5, 69, 0, 0, 4117, 4118, 3, 650, 325, 0, 4118, 649, 1, 0, 0, 0, 4119, 4123,
		3, 654, 327, 0, 4120, 4122, 3, 652, 326, 0, 4121, 4120, 1, 0, 0, 0, 4122,
		4125, 1, 0, 0, 0, 4123, 4121, 1, 0, 0, 0, 4123, 4124, 1, 0, 0, 0, 4124,
		4133, 1, 0, 0, 0, 4125, 4123, 1, 0, 0, 0, 4126, 4127, 5, 32, 0, 0, 4127,
		4133, 6, 325, -1, 0, 4128, 4129, 5, 31, 0, 0, 4129, 4133, 6, 325, -1, 0,
		4130, 4131, 5, 33, 0, 0, 4131, 4133, 6, 325, -1, 0, 4132, 4119, 1, 0, 0,
		0, 4132, 4126, 1, 0, 0, 0, 4132, 4128, 1, 0, 0, 0, 4132, 4130, 1, 0, 0,
		0, 4133, 651, 1, 0, 0, 0, 4134, 4135, 5, 15, 0, 0, 4135, 4154, 3, 654,
		327, 0, 4136, 4138, 3, 790, 395, 0, 4137, 4136, 1, 0, 0, 0, 4137, 4138,
		1, 0, 0, 0, 4138, 4140, 1, 0, 0, 0, 4139, 4141, 3, 788, 394, 0, 4140, 4139,
		1, 0, 0, 0, 4140, 4141, 1, 0, 0, 0, 4141, 4143, 1, 0, 0, 0, 4142, 4144,
		3, 704, 352, 0, 4143, 4142, 1, 0, 0, 0, 4143, 4144, 1, 0, 0, 0, 4144, 4145,
		1, 0, 0, 0, 4145, 4147, 5, 60, 0, 0, 4146, 4148, 3, 926, 463, 0, 4147,
		4146, 1, 0, 0, 0, 4147, 4148, 1, 0, 0, 0, 4148, 4149, 1, 0, 0, 0, 4149,
		4151, 3, 654, 327, 0, 4150, 4152, 3, 698, 349, 0, 4151, 4150, 1, 0, 0,
		0, 4151, 4152, 1, 0, 0, 0, 4152, 4154, 1, 0, 0, 0, 4153, 4134, 1, 0, 0,
		0, 4153, 4137, 1, 0, 0, 0, 4154, 653, 1, 0, 0, 0, 4155, 4156, 6, 327, -1,
		0, 4156, 4164, 3, 656, 328, 0, 4157, 4164, 3, 706, 353, 0, 4158, 4159,
		5, 19, 0, 0, 4159, 4160, 3, 694, 347, 0, 4160, 4161, 5, 20, 0, 0, 4161,
		4164, 1, 0, 0, 0, 4162, 4164, 3, 692, 346, 0, 4163, 4155, 1, 0, 0, 0, 4163,
		4157, 1, 0, 0, 0, 4163, 4158, 1, 0, 0, 0, 4163, 4162, 1, 0, 0, 0, 4164,
		4171, 1, 0, 0, 0, 4165, 4166, 10, 2, 0, 0, 4166, 4170, 3, 680, 340, 0,
		4167, 4168, 10, 1, 0, 0, 4168, 4170, 3, 662, 331, 0, 4169, 4165, 1, 0,
		0, 0, 4169, 4167, 1, 0, 0, 0, 4170, 4173, 1, 0, 0, 0, 4171, 4169, 1, 0,
		0, 0, 4171, 4172, 1, 0, 0, 0, 4172, 655, 1, 0, 0, 0, 4173, 4171, 1, 0,
		0, 0, 4174, 4175, 3, 786, 393, 0, 4175, 4177, 5, 20, 0, 0, 4176, 4178,
		3, 926, 463, 0, 4177, 4176, 1, 0, 0, 0, 4177, 4178, 1, 0, 0, 0, 4178, 4180,
		1, 0, 0, 0, 4179, 4181, 3, 658, 329, 0, 4180, 4179, 1, 0, 0, 0, 4180, 4181,
		1, 0, 0, 0, 4181, 4191, 1, 0, 0, 0, 4182, 4183, 3, 740, 370, 0, 4183, 4185,
		5, 20, 0, 0, 4184, 4186, 3, 926, 463, 0, 4185, 4184, 1, 0, 0, 0, 4185,
		4186, 1, 0, 0, 0, 4186, 4188, 1, 0, 0, 0, 4187, 4189, 3, 658, 329, 0, 4188,
		4187, 1, 0, 0, 0, 4188, 4189, 1, 0, 0, 0, 4189, 4191, 1, 0, 0, 0, 4190,
		4174, 1, 0, 0, 0, 4190, 4182, 1, 0, 0, 0, 4191, 657, 1, 0, 0, 0, 4192,
		4193, 5, 56, 0, 0, 4193, 4236, 3, 1060, 530, 0, 4194, 4236, 3, 1060, 530,
		0, 4195, 4196, 5, 56, 0, 0, 4196, 4197, 3, 1060, 530, 0, 4197, 4199, 3,
		776, 388, 0, 4198, 4200, 3, 660, 330, 0, 4199, 4198, 1, 0, 0, 0, 4199,
		4200, 1, 0, 0, 0, 4200, 4236, 1, 0, 0, 0, 4201, 4202, 5, 56, 0, 0, 4202,
		4203, 3, 1060, 530, 0, 4203, 4205, 3, 760, 380, 0, 4204, 4206, 3, 660,
		330, 0, 4205, 4204, 1, 0, 0, 0, 4205, 4206, 1, 0, 0, 0, 4206, 4236, 1,
		0, 0, 0, 4207, 4208, 5, 56, 0, 0, 4208, 4209, 3, 1060, 530, 0, 4209, 4210,
		3, 758, 379, 0, 4210, 4211, 6, 329, -1, 0, 4211, 4236, 1, 0, 0, 0, 4212,
		4213, 3, 1060, 530, 0, 4213, 4214, 3, 776, 388, 0, 4214, 4215, 3, 660,
		330, 0, 4215, 4236, 1, 0, 0, 0, 4216, 4217, 3, 1060, 530, 0, 4217, 4218,
		3, 760, 380, 0, 4218, 4219, 3, 660, 330, 0, 4219, 4236, 1, 0, 0, 0, 4220,
		4221, 3, 1060, 530, 0, 4221, 4222, 3, 758, 379, 0, 4222, 4223, 6, 329,
		-1, 0, 4223, 4236, 1, 0, 0, 0, 4224, 4226, 3, 776, 388, 0, 4225, 4227,
		3, 660, 330, 0, 4226, 4225, 1, 0, 0, 0, 4226, 4227, 1, 0, 0, 0, 4227, 4236,
		1, 0, 0, 0, 4228, 4230, 3, 760, 380, 0, 4229, 4231, 3, 660, 330, 0, 4230,
		4229, 1, 0, 0, 0, 4230, 4231, 1, 0, 0, 0, 4231, 4236, 1, 0, 0, 0, 4232,
		4233, 3, 758, 379, 0, 4233, 4234, 6, 329, -1, 0, 4234, 4236, 1, 0, 0, 0,
		4235, 4192, 1, 0, 0, 0, 4235, 4194, 1, 0, 0, 0, 4235, 4195, 1, 0, 0, 0,
		4235, 4201, 1, 0, 0, 0, 4235, 4207, 1, 0, 0, 0, 4235, 4212, 1, 0, 0, 0,
		4235, 4216, 1, 0, 0, 0, 4235, 4220, 1, 0, 0, 0, 4235, 4224, 1, 0, 0, 0,
		4235, 4228, 1, 0, 0, 0, 4235, 4232, 1, 0, 0, 0, 4236, 659, 1, 0, 0, 0,
		4237, 4239, 5, 56, 0, 0, 4238, 4237, 1, 0, 0, 0, 4238, 4239, 1, 0, 0, 0,
		4239, 4240, 1, 0, 0, 0, 4240, 4241, 3, 1060, 530, 0, 4241, 661, 1, 0, 0,
		0, 4242, 4243, 5, 97, 0, 0, 4243, 4244, 3, 1060, 530, 0, 4244, 4245, 5,
		19, 0, 0, 4245, 4246, 3, 672, 336, 0, 4246, 4247, 5, 20, 0, 0, 4247, 4248,
		3, 664, 332, 0, 4248, 663, 1, 0, 0, 0, 4249, 4269, 3, 666, 333, 0, 4250,
		4251, 5, 102, 0, 0, 4251, 4253, 5, 285, 0, 0, 4252, 4254, 3, 666, 333,
		0, 4253, 4252, 1, 0, 0, 0, 4253, 4254, 1, 0, 0, 0, 4254, 4269, 1, 0, 0,
		0, 4255, 4256, 5, 102, 0, 0, 4256, 4257, 5, 285, 0, 0, 4257, 4259, 3, 1060,
		530, 0, 4258, 4260, 3, 666, 333, 0, 4259, 4258, 1, 0, 0, 0, 4259, 4260,
		1, 0, 0, 0, 4260, 4269, 1, 0, 0, 0, 4261, 4262, 5, 102, 0, 0, 4262, 4263,
		5, 285, 0, 0, 4263, 4264, 5, 56, 0, 0, 4264, 4266, 3, 1060, 530, 0, 4265,
		4267, 3, 666, 333, 0, 4266, 4265, 1, 0, 0, 0, 4266, 4267, 1, 0, 0, 0, 4267,
		4269, 1, 0, 0, 0, 4268, 4249, 1, 0, 0, 0, 4268, 4250, 1, 0, 0, 0, 4268,
		4255, 1, 0, 0, 0, 4268, 4261, 1, 0, 0, 0, 4269, 665, 1, 0, 0, 0, 4270,
		4271, 5, 237, 0, 0, 4271, 4272, 5, 19, 0, 0, 4272, 4273, 3, 668, 334, 0,
		4273, 4274, 5, 20, 0, 0, 4274, 667, 1, 0, 0, 0, 4275, 4278, 3, 670, 335,
		0, 4276, 4278, 3, 612, 306, 0, 4277, 4275, 1, 0, 0, 0, 4277, 4276, 1, 0,
		0, 0, 4278, 669, 1, 0, 0, 0, 4279, 4280, 5, 299, 0, 0, 4280, 4281, 5, 19,
		0, 0, 4281, 4282, 3, 612, 306, 0, 4282, 4283, 5, 56, 0, 0, 4283, 4285,
		3, 1030, 515, 0, 4284, 4286, 3, 980, 490, 0, 4285, 4284, 1, 0, 0, 0, 4285,
		4286, 1, 0, 0, 0, 4286, 4287, 1, 0, 0, 0, 4287, 4288, 5, 20, 0, 0, 4288,
		671, 1, 0, 0, 0, 4289, 4290, 3, 674, 337, 0, 4290, 4292, 3, 676, 338, 0,
		4291, 4293, 3, 678, 339, 0, 4292, 4291, 1, 0, 0, 0, 4292, 4293, 1, 0, 0,
		0, 4293, 673, 1, 0, 0, 0, 4294, 4297, 3, 668, 334, 0, 4295, 4297, 3, 1084,
		542, 0, 4296, 4294, 1, 0, 0, 0, 4296, 4295, 1, 0, 0, 0, 4297, 675, 1, 0,
		0, 0, 4298, 4299, 7, 14, 0, 0, 4299, 677, 1, 0, 0, 0, 4300, 4301, 5, 310,
		0, 0, 4301, 4302, 5, 58, 0, 0, 4302, 4307, 3, 812, 406, 0, 4303, 4304,
		5, 15, 0, 0, 4304, 4306, 3, 812, 406, 0, 4305, 4303, 1, 0, 0, 0, 4306,
		4309, 1, 0, 0, 0, 4307, 4305, 1, 0, 0, 0, 4307, 4308, 1, 0, 0, 0, 4308,
		679, 1, 0, 0, 0, 4309, 4307, 1, 0, 0, 0, 4310, 4311, 5, 324, 0, 0, 4311,
		4313, 5, 19, 0, 0, 4312, 4314, 3, 884, 442, 0, 4313, 4312, 1, 0, 0, 0,
		4313, 4314, 1, 0, 0, 0, 4314, 4315, 1, 0, 0, 0, 4315, 4316, 3, 614, 307,
		0, 4316, 4317, 5, 208, 0, 0, 4317, 4318, 3, 688, 344, 0, 4318, 4319, 5,
		220, 0, 0, 4319, 4320, 5, 19, 0, 0, 4320, 4321, 3, 682, 341, 0, 4321, 4322,
		5, 20, 0, 0, 4322, 4323, 5, 325, 0, 0, 4323, 4324, 3, 972, 486, 0, 4324,
		4326, 5, 20, 0, 0, 4325, 4327, 3, 660, 330, 0, 4326, 4325, 1, 0, 0, 0,
		4326, 4327, 1, 0, 0, 0, 4327, 681, 1, 0, 0, 0, 4328, 4329, 6, 341, -1,
		0, 4329, 4330, 3, 684, 342, 0, 4330, 4336, 1, 0, 0, 0, 4331, 4332, 10,
		1, 0, 0, 4332, 4333, 5, 23, 0, 0, 4333, 4335, 3, 684, 342, 0, 4334, 4331,
		1, 0, 0, 0, 4335, 4338, 1, 0, 0, 0, 4336, 4334, 1, 0, 0, 0, 4336, 4337,
		1, 0, 0, 0, 4337, 683, 1, 0, 0, 0, 4338, 4336, 1, 0, 0, 0, 4339, 4340,
		6, 342, -1, 0, 4340, 4341, 3, 686, 343, 0, 4341, 4346, 1, 0, 0, 0, 4342,
		4343, 10, 1, 0, 0, 4343, 4345, 3, 686, 343, 0, 4344, 4342, 1, 0, 0, 0,
		4345, 4348, 1, 0, 0, 0, 4346, 4344, 1, 0, 0, 0, 4346, 4347, 1, 0, 0, 0,
		4347, 685, 1, 0, 0, 0, 4348, 4346, 1, 0, 0, 0, 4349, 4355, 3, 1060, 530,
		0, 4350, 4351, 5, 19, 0, 0, 4351, 4352, 3, 682, 341, 0, 4352, 4353, 5,
		20, 0, 0, 4353, 4355, 1, 0, 0, 0, 4354, 4349, 1, 0, 0, 0, 4354, 4350, 1,
		0, 0, 0, 4355, 687, 1, 0, 0, 0, 4356, 4361, 3, 690, 345, 0, 4357, 4358,
		5, 15, 0, 0, 4358, 4360, 3, 690, 345, 0, 4359, 4357, 1, 0, 0, 0, 4360,
		4363, 1, 0, 0, 0, 4361, 4359, 1, 0, 0, 0, 4361, 4362, 1, 0, 0, 0, 4362,
		689, 1, 0, 0, 0, 4363, 4361, 1, 0, 0, 0, 4364, 4365, 3, 812, 406, 0, 4365,
		4366, 5, 56, 0, 0, 4366, 4367, 3, 1060, 530, 0, 4367, 691, 1, 0, 0, 0,
		4368, 4370, 3, 838, 419, 0, 4369, 4371, 3, 712, 356, 0, 4370, 4369, 1,
		0, 0, 0, 4370, 4371, 1, 0, 0, 0, 4371, 693, 1, 0, 0, 0, 4372, 4376, 3,
		654, 327, 0, 4373, 4375, 3, 696, 348, 0, 4374, 4373, 1, 0, 0, 0, 4375,
		4378, 1, 0, 0, 0, 4376, 4374, 1, 0, 0, 0, 4376, 4377, 1, 0, 0, 0, 4377,
		695, 1, 0, 0, 0, 4378, 4376, 1, 0, 0, 0, 4379, 4381, 3, 790, 395, 0, 4380,
		4379, 1, 0, 0, 0, 4380, 4381, 1, 0, 0, 0, 4381, 4383, 1, 0, 0, 0, 4382,
		4384, 3, 788, 394, 0, 4383, 4382, 1, 0, 0, 0, 4383, 4384, 1, 0, 0, 0, 4384,
		4386, 1, 0, 0, 0, 4385, 4387, 3, 704, 352, 0, 4386, 4385, 1, 0, 0, 0, 4386,
		4387, 1, 0, 0, 0, 4387, 4388, 1, 0, 0, 0, 4388, 4390, 5, 60, 0, 0, 4389,
		4391, 3, 926, 463, 0, 4390, 4389, 1, 0, 0, 0, 4390, 4391, 1, 0, 0, 0, 4391,
		4392, 1, 0, 0, 0, 4392, 4394, 3, 654, 327, 0, 4393, 4395, 3, 698, 349,
		0, 4394, 4393, 1, 0, 0, 0, 4394, 4395, 1, 0, 0, 0, 4395, 697, 1, 0, 0,
		0, 4396, 4398, 3, 700, 350, 0, 4397, 4396, 1, 0, 0, 0, 4398, 4399, 1, 0,
		0, 0, 4399, 4397, 1, 0, 0, 0, 4399, 4400, 1, 0, 0, 0, 4400, 699, 1, 0,
		0, 0, 4401, 4404, 3, 792, 396, 0, 4402, 4404, 3, 702, 351, 0, 4403, 4401,
		1, 0, 0, 0, 4403, 4402, 1, 0, 0, 0, 4404, 701, 1, 0, 0, 0, 4405, 4406,
		5, 100, 0, 0, 4406, 4407, 5, 19, 0, 0, 4407, 4412, 3, 1060, 530, 0, 4408,
		4409, 5, 16, 0, 0, 4409, 4411, 3, 1060, 530, 0, 4410, 4408, 1, 0, 0, 0,
		4411, 4414, 1, 0, 0, 0, 4412, 4410, 1, 0, 0, 0, 4412, 4413, 1, 0, 0, 0,
		4413, 4415, 1, 0, 0, 0, 4414, 4412, 1, 0, 0, 0, 4415, 4416, 5, 20, 0, 0,
		4416, 703, 1, 0, 0, 0, 4417, 4418, 7, 15, 0, 0, 4418, 705, 1, 0, 0, 0,
		4419, 4421, 3, 714, 357, 0, 4420, 4422, 3, 926, 463, 0, 4421, 4420, 1,
		0, 0, 0, 4421, 4422, 1, 0, 0, 0, 4422, 4424, 1, 0, 0, 0, 4423, 4425, 3,
		712, 356, 0, 4424, 4423, 1, 0, 0, 0, 4424, 4425, 1, 0, 0, 0, 4425, 4427,
		1, 0, 0, 0, 4426, 4428, 3, 710, 355, 0, 4427, 4426, 1, 0, 0, 0, 4427, 4428,
		1, 0, 0, 0, 4428, 4430, 1, 0, 0, 0, 4429, 4431, 3, 708, 354, 0, 4430, 4429,
		1, 0, 0, 0, 4430, 4431, 1, 0, 0, 0, 4431, 707, 1, 0, 0, 0, 4432, 4433,
		5, 68, 0, 0, 4433, 4434, 5, 95, 0, 0, 4434, 4435, 5, 114, 0, 0, 4435, 4436,
		5, 56, 0, 0, 4436, 4437, 5, 80, 0, 0, 4437, 4444, 3, 812, 406, 0, 4438,
		4439, 5, 68, 0, 0, 4439, 4440, 5, 96, 0, 0, 4440, 4441, 5, 56, 0, 0, 4441,
		4442, 5, 80, 0, 0, 4442, 4444, 3, 812, 406, 0, 4443, 4432, 1, 0, 0, 0,
		4443, 4438, 1, 0, 0, 0, 4444, 709, 1, 0, 0, 0, 4445, 4446, 5, 102, 0, 0,
		4446, 4448, 5, 81, 0, 0, 4447, 4449, 3, 660, 330, 0, 4448, 4447, 1, 0,
		0, 0, 4448, 4449, 1, 0, 0, 0, 4449, 711, 1, 0, 0, 0, 4450, 4451, 5, 56,
		0, 0, 4451, 4496, 3, 1060, 530, 0, 4452, 4496, 3, 1060, 530, 0, 4453, 4454,
		5, 56, 0, 0, 4454, 4455, 3, 1060, 530, 0, 4455, 4457, 3, 776, 388, 0, 4456,
		4458, 3, 660, 330, 0, 4457, 4456, 1, 0, 0, 0, 4457, 4458, 1, 0, 0, 0, 4458,
		4496, 1, 0, 0, 0, 4459, 4460, 5, 56, 0, 0, 4460, 4461, 3, 1060, 530, 0,
		4461, 4463, 3, 760, 380, 0, 4462, 4464, 3, 660, 330, 0, 4463, 4462, 1,
		0, 0, 0, 4463, 4464, 1, 0, 0, 0, 4464, 4496, 1, 0, 0, 0, 4465, 4466, 5,
		56, 0, 0, 4466, 4467, 3, 1060, 530, 0, 4467, 4468, 3, 758, 379, 0, 4468,
		4469, 6, 356, -1, 0, 4469, 4496, 1, 0, 0, 0, 4470, 4471, 3, 1060, 530,
		0, 4471, 4473, 3, 776, 388, 0, 4472, 4474, 3, 660, 330, 0, 4473, 4472,
		1, 0, 0, 0, 4473, 4474, 1, 0, 0, 0, 4474, 4496, 1, 0, 0, 0, 4475, 4476,
		3, 1060, 530, 0, 4476, 4478, 3, 760, 380, 0, 4477, 4479, 3, 660, 330, 0,
		4478, 4477, 1, 0, 0, 0, 4478, 4479, 1, 0, 0, 0, 4479, 4496, 1, 0, 0, 0,
		4480, 4481, 3, 1060, 530, 0, 4481, 4482, 3, 758, 379, 0, 4482, 4483, 6,
		356, -1, 0, 4483, 4496, 1, 0, 0, 0, 4484, 4486, 3, 776, 388, 0, 4485, 4487,
		3, 660, 330, 0, 4486, 4485, 1, 0, 0, 0, 4486, 4487, 1, 0, 0, 0, 4487, 4496,
		1, 0, 0, 0, 4488, 4490, 3, 760, 380, 0, 4489, 4491, 3, 660, 330, 0, 4490,
		4489, 1, 0, 0, 0, 4490, 4491, 1, 0, 0, 0, 4491, 4496, 1, 0, 0, 0, 4492,
		4493, 3, 758, 379, 0, 4493, 4494, 6, 356, -1, 0, 4494, 4496, 1, 0, 0, 0,
		4495, 4450, 1, 0, 0, 0, 4495, 4452, 1, 0, 0, 0, 4495, 4453, 1, 0, 0, 0,
		4495, 4459, 1, 0, 0, 0, 4495, 4465, 1, 0, 0, 0, 4495, 4470, 1, 0, 0, 0,
		4495, 4475, 1, 0, 0, 0, 4495, 4480, 1, 0, 0, 0, 4495, 4484, 1, 0, 0, 0,
		4495, 4488, 1, 0, 0, 0, 4495, 4492, 1, 0, 0, 0, 4496, 713, 1, 0, 0, 0,
		4497, 4518, 3, 732, 366, 0, 4498, 4518, 3, 716, 358, 0, 4499, 4500, 3,
		1058, 529, 0, 4500, 4501, 5, 21, 0, 0, 4501, 4502, 6, 357, -1, 0, 4502,
		4518, 1, 0, 0, 0, 4503, 4504, 3, 1058, 529, 0, 4504, 4505, 5, 16, 0, 0,
		4505, 4506, 5, 19, 0, 0, 4506, 4507, 6, 357, -1, 0, 4507, 4518, 1, 0, 0,
		0, 4508, 4509, 3, 732, 366, 0, 4509, 4510, 5, 21, 0, 0, 4510, 4511, 6,
		357, -1, 0, 4511, 4518, 1, 0, 0, 0, 4512, 4513, 3, 732, 366, 0, 4513, 4514,
		5, 16, 0, 0, 4514, 4515, 5, 19, 0, 0, 4515, 4516, 6, 357, -1, 0, 4516,
		4518, 1, 0, 0, 0, 4517, 4497, 1, 0, 0, 0, 4517, 4498, 1, 0, 0, 0, 4517,
		4499, 1, 0, 0, 0, 4517, 4503, 1, 0, 0, 0, 4517, 4508, 1, 0, 0, 0, 4517,
		4512, 1, 0, 0, 0, 4518, 715, 1, 0, 0, 0, 4519, 4522, 3, 718, 359, 0, 4520,
		4522, 3, 730, 365, 0, 4521, 4519, 1, 0, 0, 0, 4521, 4520, 1, 0, 0, 0, 4522,
		717, 1, 0, 0, 0, 4523, 4526, 3, 1058, 529, 0, 4524, 4526, 3, 720, 360,
		0, 4525, 4523, 1, 0, 0, 0, 4525, 4524, 1, 0, 0, 0, 4526, 719, 1, 0, 0,
		0, 4527, 4528, 6, 360, -1, 0, 4528, 4529, 3, 722, 361, 0, 4529, 4535, 1,
		0, 0, 0, 4530, 4531, 10, 1, 0, 0, 4531, 4532, 5, 16, 0, 0, 4532, 4534,
		3, 1060, 530, 0, 4533, 4530, 1, 0, 0, 0, 4534, 4537, 1, 0, 0, 0, 4535,
		4533, 1, 0, 0, 0, 4535, 4536, 1, 0, 0, 0, 4536, 721, 1, 0, 0, 0, 4537,
		4535, 1, 0, 0, 0, 4538, 4539, 6, 361, -1, 0, 4539, 4540, 3, 1060, 530,
		0, 4540, 4541, 5, 11, 0, 0, 4541, 4542, 3, 1060, 530, 0, 4542, 4553, 1,
		0, 0, 0, 4543, 4544, 3, 1060, 530, 0, 4544, 4545, 5, 11, 0, 0, 4545, 4546,
		5, 53, 0, 0, 4546, 4553, 1, 0, 0, 0, 4547, 4548, 3, 1060, 530, 0, 4548,
		4549, 5, 11, 0, 0, 4549, 4550, 3, 1084, 542, 0, 4550, 4551, 3, 1060, 530,
		0, 4551, 4553, 1, 0, 0, 0, 4552, 4538, 1, 0, 0, 0, 4552, 4543, 1, 0, 0,
		0, 4552, 4547, 1, 0, 0, 0, 4553, 4567, 1, 0, 0, 0, 4554, 4555, 10, 5, 0,
		0, 4555, 4556, 5, 11, 0, 0, 4556, 4566, 3, 722, 361, 6, 4557, 4558, 10,
		3, 0, 0, 4558, 4559, 5, 11, 0, 0, 4559, 4566, 5, 53, 0, 0, 4560, 4561,
		10, 1, 0, 0, 4561, 4562, 5, 11, 0, 0, 4562, 4563, 3, 1084, 542, 0, 4563,
		4564, 3, 1060, 530, 0, 4564, 4566, 1, 0, 0, 0, 4565, 4554, 1, 0, 0, 0,
		4565, 4557, 1, 0, 0, 0, 4565, 4560, 1, 0, 0, 0, 4566, 4569, 1, 0, 0, 0,
		4567, 4565, 1, 0, 0, 0, 4567, 4568, 1, 0, 0, 0, 4568, 723, 1, 0, 0, 0,
		4569, 4567, 1, 0, 0, 0, 4570, 4571, 6, 362, -1, 0, 4571, 4572, 5, 323,
		0, 0, 4572, 4573, 3, 726, 363, 0, 4573, 4586, 1, 0, 0, 0, 4574, 4575, 10,
		2, 0, 0, 4575, 4576, 3, 728, 364, 0, 4576, 4577, 3, 726, 363, 0, 4577,
		4585, 1, 0, 0, 0, 4578, 4579, 10, 1, 0, 0, 4579, 4580, 3, 728, 364, 0,
		4580, 4581, 3, 1084, 542, 0, 4581, 4582, 3, 728, 364, 0, 4582, 4583, 3,
		726, 363, 0, 4583, 4585, 1, 0, 0, 0, 4584, 4574, 1, 0, 0, 0, 4584, 4578,
		1, 0, 0, 0, 4585, 4588, 1, 0, 0, 0, 4586, 4584, 1, 0, 0, 0, 4586, 4587,
		1, 0, 0, 0, 4587, 725, 1, 0, 0, 0, 4588, 4586, 1, 0, 0, 0, 4589, 4592,
		3, 1060, 530, 0, 4590, 4592, 5, 53, 0, 0, 4591, 4589, 1, 0, 0, 0, 4591,
		4590, 1, 0, 0, 0, 4592, 727, 1, 0, 0, 0, 4593, 4594, 5, 11, 0, 0, 4594,
		4595, 5, 323, 0, 0, 4595, 4596, 5, 24, 0, 0, 4596, 729, 1, 0, 0, 0, 4597,
		4604, 3, 724, 362, 0, 4598, 4599, 3, 724, 362, 0, 4599, 4600, 3, 728, 364,
		0, 4600, 4601, 3, 1084, 542, 0, 4601, 4602, 3, 1060, 530, 0, 4602, 4604,
		1, 0, 0, 0, 4603, 4597, 1, 0, 0, 0, 4603, 4598, 1, 0, 0, 0, 4604, 731,
		1, 0, 0, 0, 4605, 4607, 3, 734, 367, 0, 4606, 4608, 3, 736, 368, 0, 4607,
		4606, 1, 0, 0, 0, 4607, 4608, 1, 0, 0, 0, 4608, 4609, 1, 0, 0, 0, 4609,
		4610, 5, 20, 0, 0, 4610, 4616, 1, 0, 0, 0, 4611, 4612, 5, 99, 0, 0, 4612,
		4613, 5, 19, 0, 0, 4613, 4614, 5, 93, 0, 0, 4614, 4616, 6, 366, -1, 0,
		4615, 4605, 1, 0, 0, 0, 4615, 4611, 1, 0, 0, 0, 4616, 733, 1, 0, 0, 0,
		4617, 4618, 5, 99, 0, 0, 4618, 4619, 5, 19, 0, 0, 4619, 4624, 3, 738, 369,
		0, 4620, 4621, 5, 15, 0, 0, 4621, 4623, 3, 738, 369, 0, 4622, 4620, 1,
		0, 0, 0, 4623, 4626, 1, 0, 0, 0, 4624, 4622, 1, 0, 0, 0, 4624, 4625, 1,
		0, 0, 0, 4625, 735, 1, 0, 0, 0, 4626, 4624, 1, 0, 0, 0, 4627, 4628, 5,
		15, 0, 0, 4628, 4629, 3, 910, 455, 0, 4629, 737, 1, 0, 0, 0, 4630, 4632,
		3, 812, 406, 0, 4631, 4633, 3, 948, 474, 0, 4632, 4631, 1, 0, 0, 0, 4632,
		4633, 1, 0, 0, 0, 4633, 739, 1, 0, 0, 0, 4634, 4635, 3, 786, 393, 0, 4635,
		4640, 3, 742, 371, 0, 4636, 4637, 5, 15, 0, 0, 4637, 4639, 3, 742, 371,
		0, 4638, 4636, 1, 0, 0, 0, 4639, 4642, 1, 0, 0, 0, 4640, 4638, 1, 0, 0,
		0, 4640, 4641, 1, 0, 0, 0, 4641, 741, 1, 0, 0, 0, 4642, 4640, 1, 0, 0,
		0, 4643, 4674, 3, 812, 406, 0, 4644, 4674, 3, 748, 374, 0, 4645, 4674,
		3, 754, 377, 0, 4646, 4674, 3, 756, 378, 0, 4647, 4674, 3, 744, 372, 0,
		4648, 4674, 3, 910, 455, 0, 4649, 4650, 5, 19, 0, 0, 4650, 4651, 3, 754,
		377, 0, 4651, 4652, 5, 20, 0, 0, 4652, 4653, 6, 371, -1, 0, 4653, 4674,
		1, 0, 0, 0, 4654, 4655, 5, 19, 0, 0, 4655, 4656, 3, 756, 378, 0, 4656,
		4657, 5, 20, 0, 0, 4657, 4658, 6, 371, -1, 0, 4658, 4674, 1, 0, 0, 0, 4659,
		4660, 5, 19, 0, 0, 4660, 4661, 3, 744, 372, 0, 4661, 4662, 5, 20, 0, 0,
		4662, 4663, 6, 371, -1, 0, 4663, 4674, 1, 0, 0, 0, 4664, 4665, 5, 19, 0,
		0, 4665, 4666, 3, 910, 455, 0, 4666, 4667, 5, 20, 0, 0, 4667, 4668, 6,
		371, -1, 0, 4668, 4674, 1, 0, 0, 0, 4669, 4670, 5, 93, 0, 0, 4670, 4674,
		6, 371, -1, 0, 4671, 4672, 5, 102, 0, 0, 4672, 4674, 6, 371, -1, 0, 4673,
		4643, 1, 0, 0, 0, 4673, 4644, 1, 0, 0, 0, 4673, 4645, 1, 0, 0, 0, 4673,
		4646, 1, 0, 0, 0, 4673, 4647, 1, 0, 0, 0, 4673, 4648, 1, 0, 0, 0, 4673,
		4649, 1, 0, 0, 0, 4673, 4654, 1, 0, 0, 0, 4673, 4659, 1, 0, 0, 0, 4673,
		4664, 1, 0, 0, 0, 4673, 4669, 1, 0, 0, 0, 4673, 4671, 1, 0, 0, 0, 4674,
		743, 1, 0, 0, 0, 4675, 4676, 5, 144, 0, 0, 4676, 4677, 3, 746, 373, 0,
		4677, 745, 1, 0, 0, 0, 4678, 4681, 3, 1058, 529, 0, 4679, 4681, 5, 322,
		0, 0, 4680, 4678, 1, 0, 0, 0, 4680, 4679, 1, 0, 0, 0, 4681, 747, 1, 0,
		0, 0, 4682, 4683, 5, 289, 0, 0, 4683, 4684, 5, 19, 0, 0, 4684, 4685, 3,
		750, 375, 0, 4685, 4686, 5, 20, 0, 0, 4686, 749, 1, 0, 0, 0, 4687, 4692,
		3, 752, 376, 0, 4688, 4689, 5, 15, 0, 0, 4689, 4691, 3, 752, 376, 0, 4690,
		4688, 1, 0, 0, 0, 4691, 4694, 1, 0, 0, 0, 4692, 4690, 1, 0, 0, 0, 4692,
		4693, 1, 0, 0, 0, 4693, 751, 1, 0, 0, 0, 4694, 4692, 1, 0, 0, 0, 4695,
		4696, 3, 1060, 530, 0, 4696, 753, 1, 0, 0, 0, 4697, 4698, 5, 266, 0, 0,
		4698, 4702, 3, 656, 328, 0, 4699, 4700, 5, 266, 0, 0, 4700, 4702, 3, 1058,
		529, 0, 4701, 4697, 1, 0, 0, 0, 4701, 4699, 1, 0, 0, 0, 4702, 755, 1, 0,
		0, 0, 4703, 4704, 5, 213, 0, 0, 4704, 4705, 3, 1058, 529, 0, 4705, 757,
		1, 0, 0, 0, 4706, 4707, 5, 321, 0, 0, 4707, 4708, 3, 812, 406, 0, 4708,
		759, 1, 0, 0, 0, 4709, 4711, 5, 92, 0, 0, 4710, 4712, 3, 774, 387, 0, 4711,
		4710, 1, 0, 0, 0, 4711, 4712, 1, 0, 0, 0, 4712, 4713, 1, 0, 0, 0, 4713,
		4714, 5, 19, 0, 0, 4714, 4715, 3, 770, 385, 0, 4715, 4716, 5, 68, 0, 0,
		4716, 4717, 3, 1058, 529, 0, 4717, 4718, 5, 71, 0, 0, 4718, 4719, 3, 762,
		381, 0, 4719, 4720, 5, 20, 0, 0, 4720, 761, 1, 0, 0, 0, 4721, 4722, 3,
		764, 382, 0, 4722, 4723, 5, 20, 0, 0, 4723, 763, 1, 0, 0, 0, 4724, 4725,
		6, 382, -1, 0, 4725, 4726, 5, 19, 0, 0, 4726, 4727, 3, 766, 383, 0, 4727,
		4733, 1, 0, 0, 0, 4728, 4729, 10, 1, 0, 0, 4729, 4730, 5, 15, 0, 0, 4730,
		4732, 3, 766, 383, 0, 4731, 4728, 1, 0, 0, 0, 4732, 4735, 1, 0, 0, 0, 4733,
		4731, 1, 0, 0, 0, 4733, 4734, 1, 0, 0, 0, 4734, 765, 1, 0, 0, 0, 4735,
		4733, 1, 0, 0, 0, 4736, 4738, 3, 770, 385, 0, 4737, 4739, 3, 768, 384,
		0, 4738, 4737, 1, 0, 0, 0, 4738, 4739, 1, 0, 0, 0, 4739, 767, 1, 0, 0,
		0, 4740, 4742, 5, 56, 0, 0, 4741, 4740, 1, 0, 0, 0, 4741, 4742, 1, 0, 0,
		0, 4742, 4743, 1, 0, 0, 0, 4743, 4749, 3, 1104, 552, 0, 4744, 4746, 5,
		56, 0, 0, 4745, 4744, 1, 0, 0, 0, 4745, 4746, 1, 0, 0, 0, 4746, 4747, 1,
		0, 0, 0, 4747, 4749, 3, 1096, 548, 0, 4748, 4741, 1, 0, 0, 0, 4748, 4745,
		1, 0, 0, 0, 4749, 769, 1, 0, 0, 0, 4750, 4751, 5, 19, 0, 0, 4751, 4752,
		3, 772, 386, 0, 4752, 4753, 5, 20, 0, 0, 4753, 4756, 1, 0, 0, 0, 4754,
		4756, 3, 772, 386, 0, 4755, 4750, 1, 0, 0, 0, 4755, 4754, 1, 0, 0, 0, 4756,
		771, 1, 0, 0, 0, 4757, 4762, 3, 1058, 529, 0, 4758, 4759, 5, 15, 0, 0,
		4759, 4761, 3, 1058, 529, 0, 4760, 4758, 1, 0, 0, 0, 4761, 4764, 1, 0,
		0, 0, 4762, 4760, 1, 0, 0, 0, 4762, 4763, 1, 0, 0, 0, 4763, 773, 1, 0,
		0, 0, 4764, 4762, 1, 0, 0, 0, 4765, 4766, 5, 67, 0, 0, 4766, 4770, 5, 79,
		0, 0, 4767, 4768, 5, 72, 0, 0, 4768, 4770, 5, 79, 0, 0, 4769, 4765, 1,
		0, 0, 0, 4769, 4767, 1, 0, 0, 0, 4770, 775, 1, 0, 0, 0, 4771, 4772, 5,
		87, 0, 0, 4772, 4773, 5, 19, 0, 0, 4773, 4774, 3, 778, 389, 0, 4774, 4775,
		5, 68, 0, 0, 4775, 4776, 3, 814, 407, 0, 4776, 4777, 5, 71, 0, 0, 4777,
		4778, 5, 19, 0, 0, 4778, 4779, 3, 782, 391, 0, 4779, 4780, 5, 20, 0, 0,
		4780, 4781, 5, 20, 0, 0, 4781, 777, 1, 0, 0, 0, 4782, 4787, 3, 780, 390,
		0, 4783, 4784, 5, 15, 0, 0, 4784, 4786, 3, 780, 390, 0, 4785, 4783, 1,
		0, 0, 0, 4786, 4789, 1, 0, 0, 0, 4787, 4785, 1, 0, 0, 0, 4787, 4788, 1,
		0, 0, 0, 4788, 779, 1, 0, 0, 0, 4789, 4787, 1, 0, 0, 0, 4790, 4792, 3,
		812, 406, 0, 4791, 4793, 3, 660, 330, 0, 4792, 4791, 1, 0, 0, 0, 4792,
		4793, 1, 0, 0, 0, 4793, 781, 1, 0, 0, 0, 4794, 4799, 3, 784, 392, 0, 4795,
		4796, 5, 15, 0, 0, 4796, 4798, 3, 784, 392, 0, 4797, 4795, 1, 0, 0, 0,
		4798, 4801, 1, 0, 0, 0, 4799, 4797, 1, 0, 0, 0, 4799, 4800, 1, 0, 0, 0,
		4800, 783, 1, 0, 0, 0, 4801, 4799, 1, 0, 0, 0, 4802, 4804, 3, 812, 406,
		0, 4803, 4805, 3, 660, 330, 0, 4804, 4803, 1, 0, 0, 0, 4804, 4805, 1, 0,
		0, 0, 4805, 785, 1, 0, 0, 0, 4806, 4810, 3, 1058, 529, 0, 4807, 4808, 5,
		302, 0, 0, 4808, 4810, 5, 19, 0, 0, 4809, 4806, 1, 0, 0, 0, 4809, 4807,
		1, 0, 0, 0, 4810, 787, 1, 0, 0, 0, 4811, 4826, 5, 59, 0, 0, 4812, 4814,
		5, 70, 0, 0, 4813, 4815, 3, 600, 300, 0, 4814, 4813, 1, 0, 0, 0, 4814,
		4815, 1, 0, 0, 0, 4815, 4826, 1, 0, 0, 0, 4816, 4826, 5, 73, 0, 0, 4817,
		4819, 5, 75, 0, 0, 4818, 4820, 3, 600, 300, 0, 4819, 4818, 1, 0, 0, 0,
		4819, 4820, 1, 0, 0, 0, 4820, 4826, 1, 0, 0, 0, 4821, 4823, 5, 89, 0, 0,
		4822, 4824, 3, 600, 300, 0, 4823, 4822, 1, 0, 0, 0, 4823, 4824, 1, 0, 0,
		0, 4824, 4826, 1, 0, 0, 0, 4825, 4811, 1, 0, 0, 0, 4825, 4812, 1, 0, 0,
		0, 4825, 4816, 1, 0, 0, 0, 4825, 4817, 1, 0, 0, 0, 4825, 4821, 1, 0, 0,
		0, 4826, 789, 1, 0, 0, 0, 4827, 4828, 5, 320, 0, 0, 4828, 791, 1, 0, 0,
		0, 4829, 4830, 5, 82, 0, 0, 4830, 4831, 3, 812, 406, 0, 4831, 793, 1, 0,
		0, 0, 4832, 4837, 3, 796, 398, 0, 4833, 4834, 5, 15, 0, 0, 4834, 4836,
		3, 796, 398, 0, 4835, 4833, 1, 0, 0, 0, 4836, 4839, 1, 0, 0, 0, 4837, 4835,
		1, 0, 0, 0, 4837, 4838, 1, 0, 0, 0, 4838, 4841, 1, 0, 0, 0, 4839, 4837,
		1, 0, 0, 0, 4840, 4842, 5, 15, 0, 0, 4841, 4840, 1, 0, 0, 0, 4841, 4842,
		1, 0, 0, 0, 4842, 795, 1, 0, 0, 0, 4843, 4847, 3, 800, 400, 0, 4844, 4847,
		3, 802, 401, 0, 4845, 4847, 3, 798, 399, 0, 4846, 4843, 1, 0, 0, 0, 4846,
		4844, 1, 0, 0, 0, 4846, 4845, 1, 0, 0, 0, 4847, 797, 1, 0, 0, 0, 4848,
		4850, 5, 12, 0, 0, 4849, 4851, 3, 804, 402, 0, 4850, 4849, 1, 0, 0, 0,
		4850, 4851, 1, 0, 0, 0, 4851, 799, 1, 0, 0, 0, 4852, 4858, 3, 812, 406,
		0, 4853, 4858, 3, 690, 345, 0, 4854, 4855, 3, 812, 406, 0, 4855, 4856,
		3, 1060, 530, 0, 4856, 4858, 1, 0, 0, 0, 4857, 4852, 1, 0, 0, 0, 4857,
		4853, 1, 0, 0, 0, 4857, 4854, 1, 0, 0, 0, 4858, 801, 1, 0, 0, 0, 4859,
		4860, 3, 814, 407, 0, 4860, 4861, 5, 16, 0, 0, 4861, 4863, 5, 12, 0, 0,
		4862, 4864, 3, 804, 402, 0, 4863, 4862, 1, 0, 0, 0, 4863, 4864, 1, 0, 0,
		0, 4864, 803, 1, 0, 0, 0, 4865, 4871, 3, 806, 403, 0, 4866, 4868, 3, 806,
		403, 0, 4867, 4866, 1, 0, 0, 0, 4867, 4868, 1, 0, 0, 0, 4868, 4869, 1,
		0, 0, 0, 4869, 4871, 3, 808, 404, 0, 4870, 4865, 1, 0, 0, 0, 4870, 4867,
		1, 0, 0, 0, 4871, 805, 1, 0, 0, 0, 4872, 4873, 5, 66, 0, 0, 4873, 4874,
		5, 19, 0, 0, 4874, 4879, 3, 1060, 530, 0, 4875, 4876, 5, 15, 0, 0, 4876,
		4878, 3, 1060, 530, 0, 4877, 4875, 1, 0, 0, 0, 4878, 4881, 1, 0, 0, 0,
		4879, 4877, 1, 0, 0, 0, 4879, 4880, 1, 0, 0, 0, 4880, 4882, 1, 0, 0, 0,
		4881, 4879, 1, 0, 0, 0, 4882, 4883, 5, 20, 0, 0, 4883, 807, 1, 0, 0, 0,
		4884, 4885, 5, 91, 0, 0, 4885, 4886, 5, 19, 0, 0, 4886, 4891, 3, 810, 405,
		0, 4887, 4888, 5, 15, 0, 0, 4888, 4890, 3, 810, 405, 0, 4889, 4887, 1,
		0, 0, 0, 4890, 4893, 1, 0, 0, 0, 4891, 4889, 1, 0, 0, 0, 4891, 4892, 1,
		0, 0, 0, 4892, 4894, 1, 0, 0, 0, 4893, 4891, 1, 0, 0, 0, 4894, 4895, 5,
		20, 0, 0, 4895, 809, 1, 0, 0, 0, 4896, 4897, 3, 812, 406, 0, 4897, 4898,
		5, 56, 0, 0, 4898, 4899, 3, 1060, 530, 0, 4899, 811, 1, 0, 0, 0, 4900,
		4901, 6, 406, -1, 0, 4901, 4904, 3, 814, 407, 0, 4902, 4904, 3, 844, 422,
		0, 4903, 4900, 1, 0, 0, 0, 4903, 4902, 1, 0, 0, 0, 4904, 4910, 1, 0, 0,
		0, 4905, 4906, 10, 1, 0, 0, 4906, 4907, 5, 111, 0, 0, 4907, 4909, 3, 812,
		406, 2, 4908, 4905, 1, 0, 0, 0, 4909, 4912, 1, 0, 0, 0, 4910, 4908, 1,
		0, 0, 0, 4910, 4911, 1, 0, 0, 0, 4911, 813, 1, 0, 0, 0, 4912, 4910, 1,
		0, 0, 0, 4913, 4914, 6, 407, -1, 0, 4914, 4950, 3, 1100, 550, 0, 4915,
		4950, 3, 1102, 551, 0, 4916, 4950, 3, 1104, 552, 0, 4917, 4950, 3, 1098,
		549, 0, 4918, 4950, 3, 1096, 548, 0, 4919, 4950, 3, 1092, 546, 0, 4920,
		4950, 3, 1088, 544, 0, 4921, 4950, 3, 1086, 543, 0, 4922, 4950, 3, 1084,
		542, 0, 4923, 4950, 3, 1080, 540, 0, 4924, 4950, 3, 1026, 513, 0, 4925,
		4950, 3, 1038, 519, 0, 4926, 4950, 3, 1036, 518, 0, 4927, 4950, 3, 1020,
		510, 0, 4928, 4950, 3, 1012, 506, 0, 4929, 4950, 3, 998, 499, 0, 4930,
		4950, 3, 996, 498, 0, 4931, 4950, 3, 994, 497, 0, 4932, 4950, 3, 986, 493,
		0, 4933, 4950, 3, 984, 492, 0, 4934, 4950, 3, 976, 488, 0, 4935, 4950,
		3, 970, 485, 0, 4936, 4950, 3, 960, 480, 0, 4937, 4950, 3, 866, 433, 0,
		4938, 4950, 3, 864, 432, 0, 4939, 4950, 3, 1060, 530, 0, 4940, 4950, 3,
		854, 427, 0, 4941, 4950, 3, 852, 426, 0, 4942, 4943, 5, 109, 0, 0, 4943,
		4950, 3, 814, 407, 23, 4944, 4945, 3, 820, 410, 0, 4945, 4946, 3, 814,
		407, 3, 4946, 4950, 1, 0, 0, 0, 4947, 4950, 3, 840, 420, 0, 4948, 4950,
		3, 838, 419, 0, 4949, 4913, 1, 0, 0, 0, 4949, 4915, 1, 0, 0, 0, 4949, 4916,
		1, 0, 0, 0, 4949, 4917, 1, 0, 0, 0, 4949, 4918, 1, 0, 0, 0, 4949, 4919,
		1, 0, 0, 0, 4949, 4920, 1, 0, 0, 0, 4949, 4921, 1, 0, 0, 0, 4949, 4922,
		1, 0, 0, 0, 4949, 4923, 1, 0, 0, 0, 4949, 4924, 1, 0, 0, 0, 4949, 4925,
		1, 0, 0, 0, 4949, 4926, 1, 0, 0, 0, 4949, 4927, 1, 0, 0, 0, 4949, 4928,
		1, 0, 0, 0, 4949, 4929, 1, 0, 0, 0, 4949, 4930, 1, 0, 0, 0, 4949, 4931,
		1, 0, 0, 0, 4949, 4932, 1, 0, 0, 0, 4949, 4933, 1, 0, 0, 0, 4949, 4934,
		1, 0, 0, 0, 4949, 4935, 1, 0, 0, 0, 4949, 4936, 1, 0, 0, 0, 4949, 4937,
		1, 0, 0, 0, 4949, 4938, 1, 0, 0, 0, 4949, 4939, 1, 0, 0, 0, 4949, 4940,
		1, 0, 0, 0, 4949, 4941, 1, 0, 0, 0, 4949, 4942, 1, 0, 0, 0, 4949, 4944,
		1, 0, 0, 0, 4949, 4947, 1, 0, 0, 0, 4949, 4948, 1, 0, 0, 0, 4950, 5058,
		1, 0, 0, 0, 4951, 4952, 10, 20, 0, 0, 4952, 4953, 3, 850, 425, 0, 4953,
		4954, 3, 814, 407, 21, 4954, 5057, 1, 0, 0, 0, 4955, 4956, 10, 19, 0, 0,
		4956, 4957, 3, 836, 418, 0, 4957, 4958, 3, 814, 407, 20, 4958, 5057, 1,
		0, 0, 0, 4959, 4960, 10, 16, 0, 0, 4960, 4961, 3, 832, 416, 0, 4961, 4962,
		3, 814, 407, 0, 4962, 4963, 5, 110, 0, 0, 4963, 4964, 3, 814, 407, 17,
		4964, 5057, 1, 0, 0, 0, 4965, 4966, 10, 11, 0, 0, 4966, 4967, 3, 822, 411,
		0, 4967, 4968, 3, 814, 407, 12, 4968, 5057, 1, 0, 0, 0, 4969, 4970, 10,
		10, 0, 0, 4970, 4971, 5, 23, 0, 0, 4971, 5057, 3, 814, 407, 11, 4972, 4973,
		10, 9, 0, 0, 4973, 4974, 5, 39, 0, 0, 4974, 5057, 3, 814, 407, 10, 4975,
		4976, 10, 8, 0, 0, 4976, 4977, 5, 40, 0, 0, 4977, 5057, 3, 814, 407, 9,
		4978, 4979, 10, 7, 0, 0, 4979, 4980, 5, 41, 0, 0, 4980, 5057, 3, 814, 407,
		8, 4981, 4982, 10, 6, 0, 0, 4982, 4983, 3, 824, 412, 0, 4983, 4984, 3,
		814, 407, 7, 4984, 5057, 1, 0, 0, 0, 4985, 4986, 10, 5, 0, 0, 4986, 4987,
		3, 826, 413, 0, 4987, 4988, 3, 814, 407, 6, 4988, 5057, 1, 0, 0, 0, 4989,
		4990, 10, 4, 0, 0, 4990, 4991, 3, 828, 414, 0, 4991, 4992, 3, 814, 407,
		5, 4992, 5057, 1, 0, 0, 0, 4993, 4994, 10, 26, 0, 0, 4994, 4995, 5, 21,
		0, 0, 4995, 4996, 3, 812, 406, 0, 4996, 4997, 5, 22, 0, 0, 4997, 5057,
		1, 0, 0, 0, 4998, 4999, 10, 25, 0, 0, 4999, 5000, 5, 16, 0, 0, 5000, 5001,
		5, 19, 0, 0, 5001, 5002, 3, 1058, 529, 0, 5002, 5003, 5, 20, 0, 0, 5003,
		5057, 1, 0, 0, 0, 5004, 5005, 10, 24, 0, 0, 5005, 5006, 5, 16, 0, 0, 5006,
		5057, 3, 1060, 530, 0, 5007, 5008, 10, 22, 0, 0, 5008, 5009, 3, 850, 425,
		0, 5009, 5011, 3, 848, 424, 0, 5010, 5012, 3, 926, 463, 0, 5011, 5010,
		1, 0, 0, 0, 5011, 5012, 1, 0, 0, 0, 5012, 5013, 1, 0, 0, 0, 5013, 5014,
		3, 732, 366, 0, 5014, 5057, 1, 0, 0, 0, 5015, 5016, 10, 21, 0, 0, 5016,
		5017, 3, 850, 425, 0, 5017, 5019, 3, 848, 424, 0, 5018, 5020, 3, 926, 463,
		0, 5019, 5018, 1, 0, 0, 0, 5019, 5020, 1, 0, 0, 0, 5020, 5021, 1, 0, 0,
		0, 5021, 5022, 3, 842, 421, 0, 5022, 5057, 1, 0, 0, 0, 5023, 5024, 10,
		18, 0, 0, 5024, 5026, 3, 834, 417, 0, 5025, 5027, 3, 926, 463, 0, 5026,
		5025, 1, 0, 0, 0, 5026, 5027, 1, 0, 0, 0, 5027, 5028, 1, 0, 0, 0, 5028,
		5029, 3, 732, 366, 0, 5029, 5030, 6, 407, -1, 0, 5030, 5057, 1, 0, 0, 0,
		5031, 5032, 10, 17, 0, 0, 5032, 5034, 3, 834, 417, 0, 5033, 5035, 3, 926,
		463, 0, 5034, 5033, 1, 0, 0, 0, 5034, 5035, 1, 0, 0, 0, 5035, 5036, 1,
		0, 0, 0, 5036, 5037, 3, 818, 409, 0, 5037, 5057, 1, 0, 0, 0, 5038, 5039,
		10, 15, 0, 0, 5039, 5040, 3, 832, 416, 0, 5040, 5041, 3, 814, 407, 0, 5041,
		5042, 5, 111, 0, 0, 5042, 5043, 6, 407, -1, 0, 5043, 5057, 1, 0, 0, 0,
		5044, 5045, 10, 14, 0, 0, 5045, 5046, 3, 830, 415, 0, 5046, 5047, 5, 277,
		0, 0, 5047, 5057, 1, 0, 0, 0, 5048, 5049, 10, 13, 0, 0, 5049, 5050, 3,
		830, 415, 0, 5050, 5051, 3, 1100, 550, 0, 5051, 5057, 1, 0, 0, 0, 5052,
		5053, 10, 12, 0, 0, 5053, 5054, 3, 830, 415, 0, 5054, 5055, 3, 1102, 551,
		0, 5055, 5057, 1, 0, 0, 0, 5056, 4951, 1, 0, 0, 0, 5056, 4955, 1, 0, 0,
		0, 5056, 4959, 1, 0, 0, 0, 5056, 4965, 1, 0, 0, 0, 5056, 4969, 1, 0, 0,
		0, 5056, 4972, 1, 0, 0, 0, 5056, 4975, 1, 0, 0, 0, 5056, 4978, 1, 0, 0,
		0, 5056, 4981, 1, 0, 0, 0, 5056, 4985, 1, 0, 0, 0, 5056, 4989, 1, 0, 0,
		0, 5056, 4993, 1, 0, 0, 0, 5056, 4998, 1, 0, 0, 0, 5056, 5004, 1, 0, 0,
		0, 5056, 5007, 1, 0, 0, 0, 5056, 5015, 1, 0, 0, 0, 5056, 5023, 1, 0, 0,
		0, 5056, 5031, 1, 0, 0, 0, 5056, 5038, 1, 0, 0, 0, 5056, 5044, 1, 0, 0,
		0, 5056, 5048, 1, 0, 0, 0, 5056, 5052, 1, 0, 0, 0, 5057, 5060, 1, 0, 0,
		0, 5058, 5056, 1, 0, 0, 0, 5058, 5059, 1, 0, 0, 0, 5059, 815, 1, 0, 0,
		0, 5060, 5058, 1, 0, 0, 0, 5061, 5211, 3, 840, 420, 0, 5062, 5211, 3, 1100,
		550, 0, 5063, 5211, 3, 1102, 551, 0, 5064, 5211, 3, 1104, 552, 0, 5065,
		5211, 3, 1098, 549, 0, 5066, 5211, 3, 1096, 548, 0, 5067, 5211, 3, 1092,
		546, 0, 5068, 5211, 3, 1088, 544, 0, 5069, 5211, 3, 1086, 543, 0, 5070,
		5211, 3, 1084, 542, 0, 5071, 5211, 3, 1080, 540, 0, 5072, 5211, 3, 1026,
		513, 0, 5073, 5211, 3, 1038, 519, 0, 5074, 5211, 3, 1036, 518, 0, 5075,
		5211, 3, 1020, 510, 0, 5076, 5211, 3, 1012, 506, 0, 5077, 5211, 3, 998,
		499, 0, 5078, 5211, 3, 996, 498, 0, 5079, 5211, 3, 994, 497, 0, 5080, 5211,
		3, 986, 493, 0, 5081, 5211, 3, 984, 492, 0, 5082, 5211, 3, 976, 488, 0,
		5083, 5211, 3, 970, 485, 0, 5084, 5211, 3, 960, 480, 0, 5085, 5211, 3,
		866, 433, 0, 5086, 5211, 3, 864, 432, 0, 5087, 5211, 3, 1060, 530, 0, 5088,
		5211, 3, 854, 427, 0, 5089, 5211, 3, 852, 426, 0, 5090, 5091, 3, 814, 407,
		0, 5091, 5092, 5, 21, 0, 0, 5092, 5093, 3, 812, 406, 0, 5093, 5094, 5,
		22, 0, 0, 5094, 5211, 1, 0, 0, 0, 5095, 5096, 3, 814, 407, 0, 5096, 5097,
		5, 16, 0, 0, 5097, 5098, 5, 19, 0, 0, 5098, 5099, 3, 1058, 529, 0, 5099,
		5100, 5, 20, 0, 0, 5100, 5211, 1, 0, 0, 0, 5101, 5102, 3, 814, 407, 0,
		5102, 5103, 5, 16, 0, 0, 5103, 5104, 3, 1060, 530, 0, 5104, 5211, 1, 0,
		0, 0, 5105, 5106, 5, 109, 0, 0, 5106, 5211, 3, 814, 407, 0, 5107, 5108,
		3, 814, 407, 0, 5108, 5109, 3, 850, 425, 0, 5109, 5111, 3, 848, 424, 0,
		5110, 5112, 3, 926, 463, 0, 5111, 5110, 1, 0, 0, 0, 5111, 5112, 1, 0, 0,
		0, 5112, 5113, 1, 0, 0, 0, 5113, 5114, 3, 732, 366, 0, 5114, 5211, 1, 0,
		0, 0, 5115, 5116, 3, 814, 407, 0, 5116, 5117, 3, 850, 425, 0, 5117, 5119,
		3, 848, 424, 0, 5118, 5120, 3, 926, 463, 0, 5119, 5118, 1, 0, 0, 0, 5119,
		5120, 1, 0, 0, 0, 5120, 5121, 1, 0, 0, 0, 5121, 5122, 3, 842, 421, 0, 5122,
		5211, 1, 0, 0, 0, 5123, 5124, 3, 814, 407, 0, 5124, 5125, 3, 850, 425,
		0, 5125, 5126, 3, 814, 407, 0, 5126, 5211, 1, 0, 0, 0, 5127, 5128, 3, 814,
		407, 0, 5128, 5129, 3, 836, 418, 0, 5129, 5130, 3, 814, 407, 0, 5130, 5211,
		1, 0, 0, 0, 5131, 5132, 3, 814, 407, 0, 5132, 5134, 3, 834, 417, 0, 5133,
		5135, 3, 926, 463, 0, 5134, 5133, 1, 0, 0, 0, 5134, 5135, 1, 0, 0, 0, 5135,
		5136, 1, 0, 0, 0, 5136, 5137, 3, 732, 366, 0, 5137, 5138, 6, 408, -1, 0,
		5138, 5211, 1, 0, 0, 0, 5139, 5140, 3, 814, 407, 0, 5140, 5142, 3, 834,
		417, 0, 5141, 5143, 3, 926, 463, 0, 5142, 5141, 1, 0, 0, 0, 5142, 5143,
		1, 0, 0, 0, 5143, 5144, 1, 0, 0, 0, 5144, 5145, 3, 818, 409, 0, 5145, 5211,
		1, 0, 0, 0, 5146, 5147, 3, 814, 407, 0, 5147, 5148, 3, 832, 416, 0, 5148,
		5149, 3, 814, 407, 0, 5149, 5150, 5, 110, 0, 0, 5150, 5151, 3, 814, 407,
		0, 5151, 5211, 1, 0, 0, 0, 5152, 5153, 3, 814, 407, 0, 5153, 5154, 3, 832,
		416, 0, 5154, 5155, 3, 814, 407, 0, 5155, 5156, 5, 111, 0, 0, 5156, 5157,
		6, 408, -1, 0, 5157, 5211, 1, 0, 0, 0, 5158, 5159, 3, 814, 407, 0, 5159,
		5160, 3, 830, 415, 0, 5160, 5161, 5, 277, 0, 0, 5161, 5211, 1, 0, 0, 0,
		5162, 5163, 3, 814, 407, 0, 5163, 5164, 3, 830, 415, 0, 5164, 5165, 3,
		1100, 550, 0, 5165, 5211, 1, 0, 0, 0, 5166, 5167, 3, 814, 407, 0, 5167,
		5168, 3, 830, 415, 0, 5168, 5169, 3, 1102, 551, 0, 5169, 5211, 1, 0, 0,
		0, 5170, 5171, 3, 814, 407, 0, 5171, 5172, 3, 822, 411, 0, 5172, 5173,
		3, 814, 407, 0, 5173, 5211, 1, 0, 0, 0, 5174, 5175, 3, 814, 407, 0, 5175,
		5176, 5, 23, 0, 0, 5176, 5177, 3, 814, 407, 0, 5177, 5211, 1, 0, 0, 0,
		5178, 5179, 3, 814, 407, 0, 5179, 5180, 5, 39, 0, 0, 5180, 5181, 3, 814,
		407, 0, 5181, 5211, 1, 0, 0, 0, 5182, 5183, 3, 814, 407, 0, 5183, 5184,
		5, 40, 0, 0, 5184, 5185, 3, 814, 407, 0, 5185, 5211, 1, 0, 0, 0, 5186,
		5187, 3, 814, 407, 0, 5187, 5188, 5, 41, 0, 0, 5188, 5189, 3, 814, 407,
		0, 5189, 5211, 1, 0, 0, 0, 5190, 5191, 3, 814, 407, 0, 5191, 5192, 3, 824,
		412, 0, 5192, 5193, 3, 814, 407, 0, 5193, 5211, 1, 0, 0, 0, 5194, 5195,
		3, 814, 407, 0, 5195, 5196, 3, 826, 413, 0, 5196, 5197, 3, 814, 407, 0,
		5197, 5211, 1, 0, 0, 0, 5198, 5199, 3, 814, 407, 0, 5199, 5200, 3, 828,
		414, 0, 5200, 5201, 3, 814, 407, 0, 5201, 5211, 1, 0, 0, 0, 5202, 5203,
		3, 820, 410, 0, 5203, 5204, 3, 814, 407, 0, 5204, 5211, 1, 0, 0, 0, 5205,
		5211, 3, 844, 422, 0, 5206, 5207, 3, 812, 406, 0, 5207, 5208, 5, 111, 0,
		0, 5208, 5209, 3, 812, 406, 0, 5209, 5211, 1, 0, 0, 0, 5210, 5061, 1, 0,
		0, 0, 5210, 5062, 1, 0, 0, 0, 5210, 5063, 1, 0, 0, 0, 5210, 5064, 1, 0,
		0, 0, 5210, 5065, 1, 0, 0, 0, 5210, 5066, 1, 0, 0, 0, 5210, 5067, 1, 0,
		0, 0, 5210, 5068, 1, 0, 0, 0, 5210, 5069, 1, 0, 0, 0, 5210, 5070, 1, 0,
		0, 0, 5210, 5071, 1, 0, 0, 0, 5210, 5072, 1, 0, 0, 0, 5210, 5073, 1, 0,
		0, 0, 5210, 5074, 1, 0, 0, 0, 5210, 5075, 1, 0, 0, 0, 5210, 5076, 1, 0,
		0, 0, 5210, 5077, 1, 0, 0, 0, 5210, 5078, 1, 0, 0, 0, 5210, 5079, 1, 0,
		0, 0, 5210, 5080, 1, 0, 0, 0, 5210, 5081, 1, 0, 0, 0, 5210, 5082, 1, 0,
		0, 0, 5210, 5083, 1, 0, 0, 0, 5210, 5084, 1, 0, 0, 0, 5210, 5085, 1, 0,
		0, 0, 5210, 5086, 1, 0, 0, 0, 5210, 5087, 1, 0, 0, 0, 5210, 5088, 1, 0,
		0, 0, 5210, 5089, 1, 0, 0, 0, 5210, 5090, 1, 0, 0, 0, 5210, 5095, 1, 0,
		0, 0, 5210, 5101, 1, 0, 0, 0, 5210, 5105, 1, 0, 0, 0, 5210, 5107, 1, 0,
		0, 0, 5210, 5115, 1, 0, 0, 0, 5210, 5123, 1, 0, 0, 0, 5210, 5127, 1, 0,
		0, 0, 5210, 5131, 1, 0, 0, 0, 5210, 5139, 1, 0, 0, 0, 5210, 5146, 1, 0,
		0, 0, 5210, 5152, 1, 0, 0, 0, 5210, 5158, 1, 0, 0, 0, 5210, 5162, 1, 0,
		0, 0, 5210, 5166, 1, 0, 0, 0, 5210, 5170, 1, 0, 0, 0, 5210, 5174, 1, 0,
		0, 0, 5210, 5178, 1, 0, 0, 0, 5210, 5182, 1, 0, 0, 0, 5210, 5186, 1, 0,
		0, 0, 5210, 5190, 1, 0, 0, 0, 5210, 5194, 1, 0, 0, 0, 5210, 5198, 1, 0,
		0, 0, 5210, 5202, 1, 0, 0, 0, 5210, 5205, 1, 0, 0, 0, 5210, 5206, 1, 0,
		0, 0, 5211, 817, 1, 0, 0, 0, 5212, 5221, 3, 838, 419, 0, 5213, 5214, 5,
		19, 0, 0, 5214, 5215, 3, 816, 408, 0, 5215, 5216, 5, 20, 0, 0, 5216, 5221,
		1, 0, 0, 0, 5217, 5218, 3, 846, 423, 0, 5218, 5219, 5, 20, 0, 0, 5219,
		5221, 1, 0, 0, 0, 5220, 5212, 1, 0, 0, 0, 5220, 5213, 1, 0, 0, 0, 5220,
		5217, 1, 0, 0, 0, 5221, 819, 1, 0, 0, 0, 5222, 5223, 7, 16, 0, 0, 5223,
		821, 1, 0, 0, 0, 5224, 5225, 7, 17, 0, 0, 5225, 823, 1, 0, 0, 0, 5226,
		5227, 7, 18, 0, 0, 5227, 825, 1, 0, 0, 0, 5228, 5229, 7, 19, 0, 0, 5229,
		827, 1, 0, 0, 0, 5230, 5231, 7, 20, 0, 0, 5231, 829, 1, 0, 0, 0, 5232,
		5234, 5, 334, 0, 0, 5233, 5235, 5, 109, 0, 0, 5234, 5233, 1, 0, 0, 0, 5234,
		5235, 1, 0, 0, 0, 5235, 831, 1, 0, 0, 0, 5236, 5238, 5, 109, 0, 0, 5237,
		5236, 1, 0, 0, 0, 5237, 5238, 1, 0, 0, 0, 5238, 5239, 1, 0, 0, 0, 5239,
		5240, 5, 315, 0, 0, 5240, 833, 1, 0, 0, 0, 5241, 5243, 5, 109, 0, 0, 5242,
		5241, 1, 0, 0, 0, 5242, 5243, 1, 0, 0, 0, 5243, 5244, 1, 0, 0, 0, 5244,
		5245, 5, 71, 0, 0, 5245, 835, 1, 0, 0, 0, 5246, 5248, 5, 334, 0, 0, 5247,
		5249, 5, 109, 0, 0, 5248, 5247, 1, 0, 0, 0, 5248, 5249, 1, 0, 0, 0, 5249,
		5250, 1, 0, 0, 0, 5250, 5251, 5, 64, 0, 0, 5251, 5252, 5, 69, 0, 0, 5252,
		837, 1, 0, 0, 0, 5253, 5254, 5, 19, 0, 0, 5254, 5255, 3, 566, 283, 0, 5255,
		5256, 5, 20, 0, 0, 5256, 839, 1, 0, 0, 0, 5257, 5258, 5, 19, 0, 0, 5258,
		5259, 3, 816, 408, 0, 5259, 5260, 5, 20, 0, 0, 5260, 841, 1, 0, 0, 0, 5261,
		5267, 3, 838, 419, 0, 5262, 5267, 3, 840, 420, 0, 5263, 5264, 3, 846, 423,
		0, 5264, 5265, 5, 20, 0, 0, 5265, 5267, 1, 0, 0, 0, 5266, 5261, 1, 0, 0,
		0, 5266, 5262, 1, 0, 0, 0, 5266, 5263, 1, 0, 0, 0, 5267, 843, 1, 0, 0,
		0, 5268, 5269, 3, 814, 407, 0, 5269, 5270, 5, 110, 0, 0, 5270, 5275, 3,
		814, 407, 0, 5271, 5272, 5, 110, 0, 0, 5272, 5274, 3, 814, 407, 0, 5273,
		5271, 1, 0, 0, 0, 5274, 5277, 1, 0, 0, 0, 5275, 5273, 1, 0, 0, 0, 5275,
		5276, 1, 0, 0, 0, 5276, 845, 1, 0, 0, 0, 5277, 5275, 1, 0, 0, 0, 5278,
		5279, 5, 19, 0, 0, 5279, 5280, 3, 812, 406, 0, 5280, 5281, 5, 15, 0, 0,
		5281, 5286, 3, 812, 406, 0, 5282, 5283, 5, 15, 0, 0, 5283, 5285, 3, 812,
		406, 0, 5284, 5282, 1, 0, 0, 0, 5285, 5288, 1, 0, 0, 0, 5286, 5284, 1,
		0, 0, 0, 5286, 5287, 1, 0, 0, 0, 5287, 847, 1, 0, 0, 0, 5288, 5286, 1,
		0, 0, 0, 5289, 5290, 7, 21, 0, 0, 5290, 849, 1, 0, 0, 0, 5291, 5295, 5,
		333, 0, 0, 5292, 5293, 5, 109, 0, 0, 5293, 5295, 5, 333, 0, 0, 5294, 5291,
		1, 0, 0, 0, 5294, 5292, 1, 0, 0, 0, 5295, 851, 1, 0, 0, 0, 5296, 5297,
		5, 54, 0, 0, 5297, 5304, 3, 838, 419, 0, 5298, 5300, 5, 330, 0, 0, 5299,
		5301, 3, 926, 463, 0, 5300, 5299, 1, 0, 0, 0, 5300, 5301, 1, 0, 0, 0, 5301,
		5302, 1, 0, 0, 0, 5302, 5304, 3, 838, 419, 0, 5303, 5296, 1, 0, 0, 0, 5303,
		5298, 1, 0, 0, 0, 5304, 853, 1, 0, 0, 0, 5305, 5306, 3, 856, 428, 0, 5306,
		5307, 5, 20, 0, 0, 5307, 5315, 1, 0, 0, 0, 5308, 5309, 3, 862, 431, 0,
		5309, 5310, 5, 20, 0, 0, 5310, 5315, 1, 0, 0, 0, 5311, 5312, 3, 860, 430,
		0, 5312, 5313, 5, 20, 0, 0, 5313, 5315, 1, 0, 0, 0, 5314, 5305, 1, 0, 0,
		0, 5314, 5308, 1, 0, 0, 0, 5314, 5311, 1, 0, 0, 0, 5315, 855, 1, 0, 0,
		0, 5316, 5317, 3, 862, 431, 0, 5317, 5322, 3, 858, 429, 0, 5318, 5319,
		5, 15, 0, 0, 5319, 5321, 3, 858, 429, 0, 5320, 5318, 1, 0, 0, 0, 5321,
		5324, 1, 0, 0, 0, 5322, 5320, 1, 0, 0, 0, 5322, 5323, 1, 0, 0, 0, 5323,
		857, 1, 0, 0, 0, 5324, 5322, 1, 0, 0, 0, 5325, 5327, 3, 812, 406, 0, 5326,
		5328, 3, 948, 474, 0, 5327, 5326, 1, 0, 0, 0, 5327, 5328, 1, 0, 0, 0, 5328,
		859, 1, 0, 0, 0, 5329, 5330, 5, 19, 0, 0, 5330, 5331, 3, 812, 406, 0, 5331,
		5332, 5, 15, 0, 0, 5332, 5337, 3, 812, 406, 0, 5333, 5334, 5, 15, 0, 0,
		5334, 5336, 3, 812, 406, 0, 5335, 5333, 1, 0, 0, 0, 5336, 5339, 1, 0, 0,
		0, 5337, 5335, 1, 0, 0, 0, 5337, 5338, 1, 0, 0, 0, 5338, 861, 1, 0, 0,
		0, 5339, 5337, 1, 0, 0, 0, 5340, 5341, 3, 1068, 534, 0, 5341, 5342, 5,
		19, 0, 0, 5342, 5346, 1, 0, 0, 0, 5343, 5344, 5, 94, 0, 0, 5344, 5346,
		5, 19, 0, 0, 5345, 5340, 1, 0, 0, 0, 5345, 5343, 1, 0, 0, 0, 5346, 863,
		1, 0, 0, 0, 5347, 5348, 5, 118, 0, 0, 5348, 5349, 3, 812, 406, 0, 5349,
		5352, 3, 1060, 530, 0, 5350, 5351, 5, 329, 0, 0, 5351, 5353, 3, 1060, 530,
		0, 5352, 5350, 1, 0, 0, 0, 5352, 5353, 1, 0, 0, 0, 5353, 865, 1, 0, 0,
		0, 5354, 5355, 3, 1058, 529, 0, 5355, 5357, 5, 19, 0, 0, 5356, 5358, 5,
		64, 0, 0, 5357, 5356, 1, 0, 0, 0, 5357, 5358, 1, 0, 0, 0, 5358, 5359, 1,
		0, 0, 0, 5359, 5360, 3, 868, 434, 0, 5360, 5366, 1, 0, 0, 0, 5361, 5362,
		3, 958, 479, 0, 5362, 5363, 5, 19, 0, 0, 5363, 5364, 3, 868, 434, 0, 5364,
		5366, 1, 0, 0, 0, 5365, 5354, 1, 0, 0, 0, 5365, 5361, 1, 0, 0, 0, 5366,
		867, 1, 0, 0, 0, 5367, 5369, 3, 918, 459, 0, 5368, 5367, 1, 0, 0, 0, 5368,
		5369, 1, 0, 0, 0, 5369, 5371, 1, 0, 0, 0, 5370, 5372, 3, 614, 307, 0, 5371,
		5370, 1, 0, 0, 0, 5371, 5372, 1, 0, 0, 0, 5372, 5374, 1, 0, 0, 0, 5373,
		5375, 3, 916, 458, 0, 5374, 5373, 1, 0, 0, 0, 5374, 5375, 1, 0, 0, 0, 5375,
		5376, 1, 0, 0, 0, 5376, 5408, 5, 20, 0, 0, 5377, 5380, 3, 906, 453, 0,
		5378, 5380, 5, 12, 0, 0, 5379, 5377, 1, 0, 0, 0, 5379, 5378, 1, 0, 0, 0,
		5380, 5385, 1, 0, 0, 0, 5381, 5382, 5, 15, 0, 0, 5382, 5384, 3, 906, 453,
		0, 5383, 5381, 1, 0, 0, 0, 5384, 5387, 1, 0, 0, 0, 5385, 5383, 1, 0, 0,
		0, 5385, 5386, 1, 0, 0, 0, 5386, 5389, 1, 0, 0, 0, 5387, 5385, 1, 0, 0,
		0, 5388, 5390, 3, 904, 452, 0, 5389, 5388, 1, 0, 0, 0, 5389, 5390, 1, 0,
		0, 0, 5390, 5392, 1, 0, 0, 0, 5391, 5393, 3, 918, 459, 0, 5392, 5391, 1,
		0, 0, 0, 5392, 5393, 1, 0, 0, 0, 5393, 5395, 1, 0, 0, 0, 5394, 5396, 3,
		890, 445, 0, 5395, 5394, 1, 0, 0, 0, 5395, 5396, 1, 0, 0, 0, 5396, 5398,
		1, 0, 0, 0, 5397, 5399, 3, 888, 444, 0, 5398, 5397, 1, 0, 0, 0, 5398, 5399,
		1, 0, 0, 0, 5399, 5401, 1, 0, 0, 0, 5400, 5402, 3, 614, 307, 0, 5401, 5400,
		1, 0, 0, 0, 5401, 5402, 1, 0, 0, 0, 5402, 5404, 1, 0, 0, 0, 5403, 5405,
		3, 916, 458, 0, 5404, 5403, 1, 0, 0, 0, 5404, 5405, 1, 0, 0, 0, 5405, 5406,
		1, 0, 0, 0, 5406, 5408, 5, 20, 0, 0, 5407, 5368, 1, 0, 0, 0, 5407, 5379,
		1, 0, 0, 0, 5408, 5410, 1, 0, 0, 0, 5409, 5411, 3, 926, 463, 0, 5410, 5409,
		1, 0, 0, 0, 5410, 5411, 1, 0, 0, 0, 5411, 5413, 1, 0, 0, 0, 5412, 5414,
		3, 886, 443, 0, 5413, 5412, 1, 0, 0, 0, 5413, 5414, 1, 0, 0, 0, 5414, 5416,
		1, 0, 0, 0, 5415, 5417, 3, 870, 435, 0, 5416, 5415, 1, 0, 0, 0, 5416, 5417,
		1, 0, 0, 0, 5417, 869, 1, 0, 0, 0, 5418, 5419, 5, 314, 0, 0, 5419, 5420,
		3, 872, 436, 0, 5420, 871, 1, 0, 0, 0, 5421, 5437, 3, 1060, 530, 0, 5422,
		5424, 5, 19, 0, 0, 5423, 5425, 3, 1060, 530, 0, 5424, 5423, 1, 0, 0, 0,
		5424, 5425, 1, 0, 0, 0, 5425, 5427, 1, 0, 0, 0, 5426, 5428, 3, 882, 441,
		0, 5427, 5426, 1, 0, 0, 0, 5427, 5428, 1, 0, 0, 0, 5428, 5430, 1, 0, 0,
		0, 5429, 5431, 3, 614, 307, 0, 5430, 5429, 1, 0, 0, 0, 5430, 5431, 1, 0,
		0, 0, 5431, 5433, 1, 0, 0, 0, 5432, 5434, 3, 874, 437, 0, 5433, 5432, 1,
		0, 0, 0, 5433, 5434, 1, 0, 0, 0, 5434, 5435, 1, 0, 0, 0, 5435, 5437, 5,
		20, 0, 0, 5436, 5421, 1, 0, 0, 0, 5436, 5422, 1, 0, 0, 0, 5437, 873, 1,
		0, 0, 0, 5438, 5439, 3, 880, 440, 0, 5439, 5440, 5, 315, 0, 0, 5440, 5441,
		3, 876, 438, 0, 5441, 5442, 5, 110, 0, 0, 5442, 5443, 3, 876, 438, 0, 5443,
		5448, 1, 0, 0, 0, 5444, 5445, 3, 880, 440, 0, 5445, 5446, 3, 876, 438,
		0, 5446, 5448, 1, 0, 0, 0, 5447, 5438, 1, 0, 0, 0, 5447, 5444, 1, 0, 0,
		0, 5448, 875, 1, 0, 0, 0, 5449, 5450, 5, 316, 0, 0, 5450, 5457, 3, 878,
		439, 0, 5451, 5452, 5, 317, 0, 0, 5452, 5457, 5, 247, 0, 0, 5453, 5454,
		3, 812, 406, 0, 5454, 5455, 3, 878, 439, 0, 5455, 5457, 1, 0, 0, 0, 5456,
		5449, 1, 0, 0, 0, 5456, 5451, 1, 0, 0, 0, 5456, 5453, 1, 0, 0, 0, 5457,
		877, 1, 0, 0, 0, 5458, 5459, 7, 22, 0, 0, 5459, 879, 1, 0, 0, 0, 5460,
		5461, 7, 23, 0, 0, 5461, 881, 1, 0, 0, 0, 5462, 5463, 3, 884, 442, 0, 5463,
		883, 1, 0, 0, 0, 5464, 5466, 5, 310, 0, 0, 5465, 5467, 3, 926, 463, 0,
		5466, 5465, 1, 0, 0, 0, 5466, 5467, 1, 0, 0, 0, 5467, 5468, 1, 0, 0, 0,
		5468, 5469, 5, 58, 0, 0, 5469, 5474, 3, 812, 406, 0, 5470, 5471, 5, 15,
		0, 0, 5471, 5473, 3, 812, 406, 0, 5472, 5470, 1, 0, 0, 0, 5473, 5476, 1,
		0, 0, 0, 5474, 5472, 1, 0, 0, 0, 5474, 5475, 1, 0, 0, 0, 5475, 885, 1,
		0, 0, 0, 5476, 5474, 1, 0, 0, 0, 5477, 5478, 5, 102, 0, 0, 5478, 5479,
		5, 305, 0, 0, 5479, 5480, 5, 313, 0, 0, 5480, 887, 1, 0, 0, 0, 5481, 5482,
		5, 102, 0, 0, 5482, 5483, 5, 240, 0, 0, 5483, 5484, 3, 892, 446, 0, 5484,
		889, 1, 0, 0, 0, 5485, 5486, 5, 137, 0, 0, 5486, 5487, 3, 814, 407, 0,
		5487, 5488, 5, 110, 0, 0, 5488, 5489, 3, 812, 406, 0, 5489, 891, 1, 0,
		0, 0, 5490, 5491, 3, 894, 447, 0, 5491, 893, 1, 0, 0, 0, 5492, 5493, 3,
		896, 448, 0, 5493, 5494, 5, 20, 0, 0, 5494, 5498, 1, 0, 0, 0, 5495, 5496,
		5, 19, 0, 0, 5496, 5498, 5, 20, 0, 0, 5497, 5492, 1, 0, 0, 0, 5497, 5495,
		1, 0, 0, 0, 5498, 895, 1, 0, 0, 0, 5499, 5500, 5, 19, 0, 0, 5500, 5505,
		3, 898, 449, 0, 5501, 5502, 5, 15, 0, 0, 5502, 5504, 3, 898, 449, 0, 5503,
		5501, 1, 0, 0, 0, 5504, 5507, 1, 0, 0, 0, 5505, 5503, 1, 0, 0, 0, 5505,
		5506, 1, 0, 0, 0, 5506, 897, 1, 0, 0, 0, 5507, 5505, 1, 0, 0, 0, 5508,
		5509, 3, 934, 467, 0, 5509, 5510, 3, 902, 451, 0, 5510, 5511, 3, 900, 450,
		0, 5511, 899, 1, 0, 0, 0, 5512, 5515, 5, 309, 0, 0, 5513, 5515, 3, 812,
		406, 0, 5514, 5512, 1, 0, 0, 0, 5514, 5513, 1, 0, 0, 0, 5515, 901, 1, 0,
		0, 0, 5516, 5517, 7, 24, 0, 0, 5517, 903, 1, 0, 0, 0, 5518, 5519, 5, 311,
		0, 0, 5519, 5523, 5, 79, 0, 0, 5520, 5521, 5, 312, 0, 0, 5521, 5523, 5,
		79, 0, 0, 5522, 5518, 1, 0, 0, 0, 5522, 5520, 1, 0, 0, 0, 5523, 905, 1,
		0, 0, 0, 5524, 5526, 3, 812, 406, 0, 5525, 5527, 3, 948, 474, 0, 5526,
		5525, 1, 0, 0, 0, 5526, 5527, 1, 0, 0, 0, 5527, 5534, 1, 0, 0, 0, 5528,
		5534, 3, 910, 455, 0, 5529, 5534, 3, 912, 456, 0, 5530, 5534, 3, 908, 454,
		0, 5531, 5532, 5, 93, 0, 0, 5532, 5534, 6, 453, -1, 0, 5533, 5524, 1, 0,
		0, 0, 5533, 5528, 1, 0, 0, 0, 5533, 5529, 1, 0, 0, 0, 5533, 5530, 1, 0,
		0, 0, 5533, 5531, 1, 0, 0, 0, 5534, 907, 1, 0, 0, 0, 5535, 5536, 5, 253,
		0, 0, 5536, 5537, 3, 1058, 529, 0, 5537, 909, 1, 0, 0, 0, 5538, 5539, 3,
		1060, 530, 0, 5539, 5540, 5, 34, 0, 0, 5540, 5541, 3, 812, 406, 0, 5541,
		5547, 1, 0, 0, 0, 5542, 5543, 3, 1060, 530, 0, 5543, 5544, 5, 34, 0, 0,
		5544, 5545, 3, 912, 456, 0, 5545, 5547, 1, 0, 0, 0, 5546, 5538, 1, 0, 0,
		0, 5546, 5542, 1, 0, 0, 0, 5547, 911, 1, 0, 0, 0, 5548, 5549, 3, 914, 457,
		0, 5549, 5550, 5, 35, 0, 0, 5550, 5551, 3, 812, 406, 0, 5551, 913, 1, 0,
		0, 0, 5552, 5556, 3, 812, 406, 0, 5553, 5554, 5, 19, 0, 0, 5554, 5556,
		5, 20, 0, 0, 5555, 5552, 1, 0, 0, 0, 5555, 5553, 1, 0, 0, 0, 5556, 915,
		1, 0, 0, 0, 5557, 5558, 5, 76, 0, 0, 5558, 5559, 3, 812, 406, 0, 5559,
		5560, 5, 81, 0, 0, 5560, 5561, 3, 812, 406, 0, 5561, 5565, 1, 0, 0, 0,
		5562, 5563, 5, 76, 0, 0, 5563, 5565, 3, 812, 406, 0, 5564, 5557, 1, 0,
		0, 0, 5564, 5562, 1, 0, 0, 0, 5565, 917, 1, 0, 0, 0, 5566, 5567, 5, 304,
		0, 0, 5567, 5568, 5, 206, 0, 0, 5568, 5575, 3, 812, 406, 0, 5569, 5570,
		5, 304, 0, 0, 5570, 5571, 5, 211, 0, 0, 5571, 5572, 3, 812, 406, 0, 5572,
		5573, 3, 920, 460, 0, 5573, 5575, 1, 0, 0, 0, 5574, 5566, 1, 0, 0, 0, 5574,
		5569, 1, 0, 0, 0, 5575, 919, 1, 0, 0, 0, 5576, 5577, 3, 922, 461, 0, 5577,
		5582, 3, 938, 469, 0, 5578, 5579, 5, 15, 0, 0, 5579, 5581, 3, 938, 469,
		0, 5580, 5578, 1, 0, 0, 0, 5581, 5584, 1, 0, 0, 0, 5582, 5580, 1, 0, 0,
		0, 5582, 5583, 1, 0, 0, 0, 5583, 921, 1, 0, 0, 0, 5584, 5582, 1, 0, 0,
		0, 5585, 5587, 5, 305, 0, 0, 5586, 5588, 3, 926, 463, 0, 5587, 5586, 1,
		0, 0, 0, 5587, 5588, 1, 0, 0, 0, 5588, 5590, 1, 0, 0, 0, 5589, 5591, 3,
		924, 462, 0, 5590, 5589, 1, 0, 0, 0, 5590, 5591, 1, 0, 0, 0, 5591, 5592,
		1, 0, 0, 0, 5592, 5593, 5, 58, 0, 0, 5593, 923, 1, 0, 0, 0, 5594, 5595,
		5, 110, 0, 0, 5595, 5596, 5, 84, 0, 0, 5596, 925, 1, 0, 0, 0, 5597, 5598,
		5, 32, 0, 0, 5598, 5601, 3, 1096, 548, 0, 5599, 5601, 3, 928, 464, 0, 5600,
		5597, 1, 0, 0, 0, 5600, 5599, 1, 0, 0, 0, 5601, 927, 1, 0, 0, 0, 5602,
		5603, 3, 930, 465, 0, 5603, 5604, 5, 18, 0, 0, 5604, 929, 1, 0, 0, 0, 5605,
		5609, 5, 32, 0, 0, 5606, 5607, 3, 1096, 548, 0, 5607, 5608, 5, 32, 0, 0,
		5608, 5610, 1, 0, 0, 0, 5609, 5606, 1, 0, 0, 0, 5609, 5610, 1, 0, 0, 0,
		5610, 5611, 1, 0, 0, 0, 5611, 5612, 5, 17, 0, 0, 5612, 5617, 3, 932, 466,
		0, 5613, 5614, 5, 15, 0, 0, 5614, 5616, 3, 932, 466, 0, 5615, 5613, 1,
		0, 0, 0, 5616, 5619, 1, 0, 0, 0, 5617, 5615, 1, 0, 0, 0, 5617, 5618, 1,
		0, 0, 0, 5618, 931, 1, 0, 0, 0, 5619, 5617, 1, 0, 0, 0, 5620, 5621, 3,
		934, 467, 0, 5621, 5622, 5, 1, 0, 0, 5622, 5623, 3, 812, 406, 0, 5623,
		5631, 1, 0, 0, 0, 5624, 5625, 3, 934, 467, 0, 5625, 5626, 5, 16, 0, 0,
		5626, 5627, 3, 934, 467, 0, 5627, 5628, 5, 1, 0, 0, 5628, 5629, 3, 812,
		406, 0, 5629, 5631, 1, 0, 0, 0, 5630, 5620, 1, 0, 0, 0, 5630, 5624, 1,
		0, 0, 0, 5631, 933, 1, 0, 0, 0, 5632, 5635, 3, 1060, 530, 0, 5633, 5635,
		3, 936, 468, 0, 5634, 5632, 1, 0, 0, 0, 5634, 5633, 1, 0, 0, 0, 5635, 935,
		1, 0, 0, 0, 5636, 5637, 7, 25, 0, 0, 5637, 937, 1, 0, 0, 0, 5638, 5639,
		5, 19, 0, 0, 5639, 5657, 5, 20, 0, 0, 5640, 5642, 3, 812, 406, 0, 5641,
		5643, 3, 948, 474, 0, 5642, 5641, 1, 0, 0, 0, 5642, 5643, 1, 0, 0, 0, 5643,
		5645, 1, 0, 0, 0, 5644, 5646, 3, 950, 475, 0, 5645, 5644, 1, 0, 0, 0, 5645,
		5646, 1, 0, 0, 0, 5646, 5657, 1, 0, 0, 0, 5647, 5648, 3, 946, 473, 0, 5648,
		5649, 5, 20, 0, 0, 5649, 5657, 1, 0, 0, 0, 5650, 5651, 3, 944, 472, 0,
		5651, 5652, 5, 20, 0, 0, 5652, 5657, 1, 0, 0, 0, 5653, 5654, 3, 940, 470,
		0, 5654, 5655, 5, 20, 0, 0, 5655, 5657, 1, 0, 0, 0, 5656, 5638, 1, 0, 0,
		0, 5656, 5640, 1, 0, 0, 0, 5656, 5647, 1, 0, 0, 0, 5656, 5650, 1, 0, 0,
		0, 5656, 5653, 1, 0, 0, 0, 5657, 939, 1, 0, 0, 0, 5658, 5659, 5, 303, 0,
		0, 5659, 5660, 5, 254, 0, 0, 5660, 5661, 5, 19, 0, 0, 5661, 5666, 3, 942,
		471, 0, 5662, 5663, 5, 15, 0, 0, 5663, 5665, 3, 942, 471, 0, 5664, 5662,
		1, 0, 0, 0, 5665, 5668, 1, 0, 0, 0, 5666, 5664, 1, 0, 0, 0, 5666, 5667,
		1, 0, 0, 0, 5667, 941, 1, 0, 0, 0, 5668, 5666, 1, 0, 0, 0, 5669, 5670,
		5, 19, 0, 0, 5670, 5679, 5, 20, 0, 0, 5671, 5679, 3, 812, 406, 0, 5672,
		5673, 3, 946, 473, 0, 5673, 5674, 5, 20, 0, 0, 5674, 5679, 1, 0, 0, 0,
		5675, 5676, 3, 944, 472, 0, 5676, 5677, 5, 20, 0, 0, 5677, 5679, 1, 0,
		0, 0, 5678, 5669, 1, 0, 0, 0, 5678, 5671, 1, 0, 0, 0, 5678, 5672, 1, 0,
		0, 0, 5678, 5675, 1, 0, 0, 0, 5679, 943, 1, 0, 0, 0, 5680, 5681, 5, 307,
		0, 0, 5681, 5686, 5, 19, 0, 0, 5682, 5683, 5, 15, 0, 0, 5683, 5685, 3,
		812, 406, 0, 5684, 5682, 1, 0, 0, 0, 5685, 5688, 1, 0, 0, 0, 5686, 5684,
		1, 0, 0, 0, 5686, 5687, 1, 0, 0, 0, 5687, 945, 1, 0, 0, 0, 5688, 5686,
		1, 0, 0, 0, 5689, 5690, 5, 306, 0, 0, 5690, 5691, 5, 19, 0, 0, 5691, 5696,
		3, 812, 406, 0, 5692, 5693, 5, 15, 0, 0, 5693, 5695, 3, 812, 406, 0, 5694,
		5692, 1, 0, 0, 0, 5695, 5698, 1, 0, 0, 0, 5696, 5694, 1, 0, 0, 0, 5696,
		5697, 1, 0, 0, 0, 5697, 947, 1, 0, 0, 0, 5698, 5696, 1, 0, 0, 0, 5699,
		5700, 5, 56, 0, 0, 5700, 5701, 3, 1060, 530, 0, 5701, 949, 1, 0, 0, 0,
		5702, 5705, 3, 952, 476, 0, 5703, 5705, 3, 956, 478, 0, 5704, 5702, 1,
		0, 0, 0, 5704, 5703, 1, 0, 0, 0, 5705, 951, 1, 0, 0, 0, 5706, 5708, 3,
		954, 477, 0, 5707, 5709, 3, 956, 478, 0, 5708, 5707, 1, 0, 0, 0, 5708,
		5709, 1, 0, 0, 0, 5709, 953, 1, 0, 0, 0, 5710, 5711, 7, 26, 0, 0, 5711,
		955, 1, 0, 0, 0, 5712, 5713, 5, 79, 0, 0, 5713, 5717, 5, 173, 0, 0, 5714,
		5715, 5, 79, 0, 0, 5715, 5717, 5, 195, 0, 0, 5716, 5712, 1, 0, 0, 0, 5716,
		5714, 1, 0, 0, 0, 5717, 957, 1, 0, 0, 0, 5718, 5719, 7, 27, 0, 0, 5719,
		959, 1, 0, 0, 0, 5720, 5721, 3, 962, 481, 0, 5721, 5722, 5, 20, 0, 0, 5722,
		961, 1, 0, 0, 0, 5723, 5724, 5, 238, 0, 0, 5724, 5725, 5, 19, 0, 0, 5725,
		5726, 3, 812, 406, 0, 5726, 5727, 5, 15, 0, 0, 5727, 5732, 3, 964, 482,
		0, 5728, 5729, 5, 15, 0, 0, 5729, 5731, 3, 964, 482, 0, 5730, 5728, 1,
		0, 0, 0, 5731, 5734, 1, 0, 0, 0, 5732, 5730, 1, 0, 0, 0, 5732, 5733, 1,
		0, 0, 0, 5733, 963, 1, 0, 0, 0, 5734, 5732, 1, 0, 0, 0, 5735, 5736, 3,
		812, 406, 0, 5736, 5737, 5, 56, 0, 0, 5737, 5738, 3, 966, 483, 0, 5738,
		5744, 1, 0, 0, 0, 5739, 5740, 3, 812, 406, 0, 5740, 5741, 5, 56, 0, 0,
		5741, 5742, 3, 968, 484, 0, 5742, 5744, 1, 0, 0, 0, 5743, 5735, 1, 0, 0,
		0, 5743, 5739, 1, 0, 0, 0, 5744, 965, 1, 0, 0, 0, 5745, 5746, 6, 483, -1,
		0, 5746, 5747, 3, 1060, 530, 0, 5747, 5761, 1, 0, 0, 0, 5748, 5749, 10,
		3, 0, 0, 5749, 5750, 5, 16, 0, 0, 5750, 5760, 3, 968, 484, 0, 5751, 5752,
		10, 2, 0, 0, 5752, 5753, 5, 16, 0, 0, 5753, 5760, 3, 1060, 530, 0, 5754,
		5755, 10, 1, 0, 0, 5755, 5756, 5, 21, 0, 0, 5756, 5757, 3, 812, 406, 0,
		5757, 5758, 5, 22, 0, 0, 5758, 5760, 1, 0, 0, 0, 5759, 5748, 1, 0, 0, 0,
		5759, 5751, 1, 0, 0, 0, 5759, 5754, 1, 0, 0, 0, 5760, 5763, 1, 0, 0, 0,
		5761, 5759, 1, 0, 0, 0, 5761, 5762, 1, 0, 0, 0, 5762, 967, 1, 0, 0, 0,
		5763, 5761, 1, 0, 0, 0, 5764, 5765, 6, 484, -1, 0, 5765, 5766, 5, 19, 0,
		0, 5766, 5767, 3, 1058, 529, 0, 5767, 5768, 5, 20, 0, 0, 5768, 5780, 1,
		0, 0, 0, 5769, 5770, 10, 2, 0, 0, 5770, 5771, 5, 16, 0, 0, 5771, 5772,
		5, 19, 0, 0, 5772, 5773, 3, 1058, 529, 0, 5773, 5774, 5, 20, 0, 0, 5774,
		5779, 1, 0, 0, 0, 5775, 5776, 10, 1, 0, 0, 5776, 5777, 5, 16, 0, 0, 5777,
		5779, 3, 1060, 530, 0, 5778, 5769, 1, 0, 0, 0, 5778, 5775, 1, 0, 0, 0,
		5779, 5782, 1, 0, 0, 0, 5780, 5778, 1, 0, 0, 0, 5780, 5781, 1, 0, 0, 0,
		5781, 969, 1, 0, 0, 0, 5782, 5780, 1, 0, 0, 0, 5783, 5784, 5, 102, 0, 0,
		5784, 5785, 5, 19, 0, 0, 5785, 5786, 3, 972, 486, 0, 5786, 5787, 5, 15,
		0, 0, 5787, 5788, 3, 812, 406, 0, 5788, 5789, 5, 20, 0, 0, 5789, 971, 1,
		0, 0, 0, 5790, 5795, 3, 974, 487, 0, 5791, 5792, 5, 15, 0, 0, 5792, 5794,
		3, 974, 487, 0, 5793, 5791, 1, 0, 0, 0, 5794, 5797, 1, 0, 0, 0, 5795, 5793,
		1, 0, 0, 0, 5795, 5796, 1, 0, 0, 0, 5796, 973, 1, 0, 0, 0, 5797, 5795,
		1, 0, 0, 0, 5798, 5799, 3, 1060, 530, 0, 5799, 5800, 5, 56, 0, 0, 5800,
		5801, 3, 812, 406, 0, 5801, 975, 1, 0, 0, 0, 5802, 5803, 3, 978, 489, 0,
		5803, 5804, 5, 20, 0, 0, 5804, 5813, 1, 0, 0, 0, 5805, 5806, 3, 978, 489,
		0, 5806, 5807, 5, 32, 0, 0, 5807, 5808, 5, 114, 0, 0, 5808, 5809, 5, 288,
		0, 0, 5809, 5810, 3, 812, 406, 0, 5810, 5811, 5, 20, 0, 0, 5811, 5813,
		1, 0, 0, 0, 5812, 5802, 1, 0, 0, 0, 5812, 5805, 1, 0, 0, 0, 5813, 977,
		1, 0, 0, 0, 5814, 5815, 5, 300, 0, 0, 5815, 5816, 5, 19, 0, 0, 5816, 5817,
		3, 812, 406, 0, 5817, 5818, 5, 69, 0, 0, 5818, 5819, 3, 812, 406, 0, 5819,
		979, 1, 0, 0, 0, 5820, 5821, 5, 175, 0, 0, 5821, 5823, 3, 812, 406, 0,
		5822, 5824, 3, 982, 491, 0, 5823, 5822, 1, 0, 0, 0, 5823, 5824, 1, 0, 0,
		0, 5824, 981, 1, 0, 0, 0, 5825, 5826, 5, 32, 0, 0, 5826, 5827, 5, 114,
		0, 0, 5827, 5828, 5, 288, 0, 0, 5828, 5829, 3, 812, 406, 0, 5829, 983,
		1, 0, 0, 0, 5830, 5831, 5, 299, 0, 0, 5831, 5832, 5, 19, 0, 0, 5832, 5833,
		3, 812, 406, 0, 5833, 5834, 5, 56, 0, 0, 5834, 5836, 3, 1030, 515, 0, 5835,
		5837, 3, 980, 490, 0, 5836, 5835, 1, 0, 0, 0, 5836, 5837, 1, 0, 0, 0, 5837,
		5838, 1, 0, 0, 0, 5838, 5839, 5, 20, 0, 0, 5839, 5859, 1, 0, 0, 0, 5840,
		5841, 5, 299, 0, 0, 5841, 5842, 5, 19, 0, 0, 5842, 5843, 5, 299, 0, 0,
		5843, 5859, 6, 492, -1, 0, 5844, 5845, 5, 249, 0, 0, 5845, 5846, 5, 19,
		0, 0, 5846, 5847, 3, 812, 406, 0, 5847, 5848, 5, 56, 0, 0, 5848, 5850,
		3, 1030, 515, 0, 5849, 5851, 3, 980, 490, 0, 5850, 5849, 1, 0, 0, 0, 5850,
		5851, 1, 0, 0, 0, 5851, 5852, 1, 0, 0, 0, 5852, 5853, 5, 20, 0, 0, 5853,
		5859, 1, 0, 0, 0, 5854, 5855, 5, 249, 0, 0, 5855, 5856, 5, 19, 0, 0, 5856,
		5857, 5, 249, 0, 0, 5857, 5859, 6, 492, -1, 0, 5858, 5830, 1, 0, 0, 0,
		5858, 5840, 1, 0, 0, 0, 5858, 5844, 1, 0, 0, 0, 5858, 5854, 1, 0, 0, 0,
		5859, 985, 1, 0, 0, 0, 5860, 5861, 3, 988, 494, 0, 5861, 5862, 5, 294,
		0, 0, 5862, 5869, 1, 0, 0, 0, 5863, 5864, 3, 988, 494, 0, 5864, 5865, 5,
		298, 0, 0, 5865, 5866, 3, 812, 406, 0, 5866, 5867, 5, 294, 0, 0, 5867,
		5869, 1, 0, 0, 0, 5868, 5860, 1, 0, 0, 0, 5868, 5863, 1, 0, 0, 0, 5869,
		987, 1, 0, 0, 0, 5870, 5873, 3, 992, 496, 0, 5871, 5873, 3, 990, 495, 0,
		5872, 5870, 1, 0, 0, 0, 5872, 5871, 1, 0, 0, 0, 5873, 989, 1, 0, 0, 0,
		5874, 5875, 5, 295, 0, 0, 5875, 5881, 3, 812, 406, 0, 5876, 5877, 5, 296,
		0, 0, 5877, 5878, 3, 812, 406, 0, 5878, 5879, 5, 297, 0, 0, 5879, 5880,
		3, 812, 406, 0, 5880, 5882, 1, 0, 0, 0, 5881, 5876, 1, 0, 0, 0, 5882, 5883,
		1, 0, 0, 0, 5883, 5881, 1, 0, 0, 0, 5883, 5884, 1, 0, 0, 0, 5884, 991,
		1, 0, 0, 0, 5885, 5891, 5, 295, 0, 0, 5886, 5887, 5, 296, 0, 0, 5887, 5888,
		3, 812, 406, 0, 5888, 5889, 5, 297, 0, 0, 5889, 5890, 3, 812, 406, 0, 5890,
		5892, 1, 0, 0, 0, 5891, 5886, 1, 0, 0, 0, 5892, 5893, 1, 0, 0, 0, 5893,
		5891, 1, 0, 0, 0, 5893, 5894, 1, 0, 0, 0, 5894, 993, 1, 0, 0, 0, 5895,
		5896, 3, 1068, 534, 0, 5896, 5897, 3, 998, 499, 0, 5897, 5901, 1, 0, 0,
		0, 5898, 5899, 5, 94, 0, 0, 5899, 5901, 3, 998, 499, 0, 5900, 5895, 1,
		0, 0, 0, 5900, 5898, 1, 0, 0, 0, 5901, 995, 1, 0, 0, 0, 5902, 5903, 5,
		293, 0, 0, 5903, 5904, 3, 1056, 528, 0, 5904, 5905, 3, 1012, 506, 0, 5905,
		997, 1, 0, 0, 0, 5906, 5907, 3, 1000, 500, 0, 5907, 5908, 5, 18, 0, 0,
		5908, 5915, 1, 0, 0, 0, 5909, 5910, 3, 1002, 501, 0, 5910, 5911, 5, 18,
		0, 0, 5911, 5912, 5, 15, 0, 0, 5912, 5913, 5, 18, 0, 0, 5913, 5915, 1,
		0, 0, 0, 5914, 5906, 1, 0, 0, 0, 5914, 5909, 1, 0, 0, 0, 5915, 999, 1,
		0, 0, 0, 5916, 5917, 5, 18, 0, 0, 5917, 1001, 1, 0, 0, 0, 5918, 5919, 6,
		501, -1, 0, 5919, 5920, 3, 1000, 500, 0, 5920, 5921, 3, 1004, 502, 0, 5921,
		5926, 1, 0, 0, 0, 5922, 5923, 3, 1000, 500, 0, 5923, 5924, 3, 1010, 505,
		0, 5924, 5926, 1, 0, 0, 0, 5925, 5918, 1, 0, 0, 0, 5925, 5922, 1, 0, 0,
		0, 5926, 5937, 1, 0, 0, 0, 5927, 5928, 10, 3, 0, 0, 5928, 5929, 5, 15,
		0, 0, 5929, 5936, 3, 1004, 502, 0, 5930, 5931, 10, 2, 0, 0, 5931, 5936,
		3, 1004, 502, 0, 5932, 5933, 10, 1, 0, 0, 5933, 5934, 5, 15, 0, 0, 5934,
		5936, 3, 1010, 505, 0, 5935, 5927, 1, 0, 0, 0, 5935, 5930, 1, 0, 0, 0,
		5935, 5932, 1, 0, 0, 0, 5936, 5939, 1, 0, 0, 0, 5937, 5935, 1, 0, 0, 0,
		5937, 5938, 1, 0, 0, 0, 5938, 1003, 1, 0, 0, 0, 5939, 5937, 1, 0, 0, 0,
		5940, 5941, 3, 1006, 503, 0, 5941, 5942, 3, 1008, 504, 0, 5942, 1005, 1,
		0, 0, 0, 5943, 5944, 3, 966, 483, 0, 5944, 1007, 1, 0, 0, 0, 5945, 5946,
		5, 24, 0, 0, 5946, 5949, 3, 812, 406, 0, 5947, 5949, 3, 998, 499, 0, 5948,
		5945, 1, 0, 0, 0, 5948, 5947, 1, 0, 0, 0, 5949, 1009, 1, 0, 0, 0, 5950,
		5951, 5, 19, 0, 0, 5951, 5952, 3, 1058, 529, 0, 5952, 5953, 5, 20, 0, 0,
		5953, 1011, 1, 0, 0, 0, 5954, 5955, 3, 1014, 507, 0, 5955, 5956, 5, 20,
		0, 0, 5956, 5961, 1, 0, 0, 0, 5957, 5958, 3, 1016, 508, 0, 5958, 5959,
		5, 20, 0, 0, 5959, 5961, 1, 0, 0, 0, 5960, 5954, 1, 0, 0, 0, 5960, 5957,
		1, 0, 0, 0, 5961, 1013, 1, 0, 0, 0, 5962, 5963, 3, 1016, 508, 0, 5963,
		5968, 3, 1018, 509, 0, 5964, 5965, 5, 15, 0, 0, 5965, 5967, 3, 1018, 509,
		0, 5966, 5964, 1, 0, 0, 0, 5967, 5970, 1, 0, 0, 0, 5968, 5966, 1, 0, 0,
		0, 5968, 5969, 1, 0, 0, 0, 5969, 1015, 1, 0, 0, 0, 5970, 5968, 1, 0, 0,
		0, 5971, 5972, 5, 293, 0, 0, 5972, 5973, 3, 1056, 528, 0, 5973, 5974, 5,
		19, 0, 0, 5974, 1017, 1, 0, 0, 0, 5975, 5987, 3, 812, 406, 0, 5976, 5977,
		3, 812, 406, 0, 5977, 5978, 5, 56, 0, 0, 5978, 5979, 3, 1060, 530, 0, 5979,
		5987, 1, 0, 0, 0, 5980, 5981, 3, 812, 406, 0, 5981, 5982, 5, 56, 0, 0,
		5982, 5983, 5, 19, 0, 0, 5983, 5984, 3, 1058, 529, 0, 5984, 5985, 5, 20,
		0, 0, 5985, 5987, 1, 0, 0, 0, 5986, 5975, 1, 0, 0, 0, 5986, 5976, 1, 0,
		0, 0, 5986, 5980, 1, 0, 0, 0, 5987, 1019, 1, 0, 0, 0, 5988, 5989, 3, 1024,
		512, 0, 5989, 5990, 5, 22, 0, 0, 5990, 5995, 1, 0, 0, 0, 5991, 5992, 3,
		1022, 511, 0, 5992, 5993, 5, 22, 0, 0, 5993, 5995, 1, 0, 0, 0, 5994, 5988,
		1, 0, 0, 0, 5994, 5991, 1, 0, 0, 0, 5995, 1021, 1, 0, 0, 0, 5996, 5997,
		3, 1024, 512, 0, 5997, 6002, 3, 812, 406, 0, 5998, 5999, 5, 15, 0, 0, 5999,
		6001, 3, 812, 406, 0, 6000, 5998, 1, 0, 0, 0, 6001, 6004, 1, 0, 0, 0, 6002,
		6000, 1, 0, 0, 0, 6002, 6003, 1, 0, 0, 0, 6003, 1023, 1, 0, 0, 0, 6004,
		6002, 1, 0, 0, 0, 6005, 6006, 5, 54, 0, 0, 6006, 6012, 5, 21, 0, 0, 6007,
		6012, 5, 21, 0, 0, 6008, 6009, 3, 1074, 537, 0, 6009, 6010, 5, 21, 0, 0,
		6010, 6012, 1, 0, 0, 0, 6011, 6005, 1, 0, 0, 0, 6011, 6007, 1, 0, 0, 0,
		6011, 6008, 1, 0, 0, 0, 6012, 1025, 1, 0, 0, 0, 6013, 6014, 3, 1028, 514,
		0, 6014, 6015, 3, 1104, 552, 0, 6015, 1027, 1, 0, 0, 0, 6016, 6017, 5,
		117, 0, 0, 6017, 6018, 3, 1076, 538, 0, 6018, 6019, 3, 1030, 515, 0, 6019,
		6020, 3, 1078, 539, 0, 6020, 1029, 1, 0, 0, 0, 6021, 6023, 3, 1048, 524,
		0, 6022, 6024, 3, 1042, 521, 0, 6023, 6022, 1, 0, 0, 0, 6023, 6024, 1,
		0, 0, 0, 6024, 6026, 1, 0, 0, 0, 6025, 6027, 3, 1032, 516, 0, 6026, 6025,
		1, 0, 0, 0, 6026, 6027, 1, 0, 0, 0, 6027, 1031, 1, 0, 0, 0, 6028, 6029,
		5, 301, 0, 0, 6029, 6030, 3, 1034, 517, 0, 6030, 1033, 1, 0, 0, 0, 6031,
		6035, 3, 1104, 552, 0, 6032, 6035, 3, 1038, 519, 0, 6033, 6035, 3, 1036,
		518, 0, 6034, 6031, 1, 0, 0, 0, 6034, 6032, 1, 0, 0, 0, 6034, 6033, 1,
		0, 0, 0, 6035, 1035, 1, 0, 0, 0, 6036, 6037, 5, 33, 0, 0, 6037, 6038, 3,
		1058, 529, 0, 6038, 1037, 1, 0, 0, 0, 6039, 6042, 3, 1040, 520, 0, 6040,
		6042, 5, 31, 0, 0, 6041, 6039, 1, 0, 0, 0, 6041, 6040, 1, 0, 0, 0, 6042,
		1039, 1, 0, 0, 0, 6043, 6044, 5, 32, 0, 0, 6044, 6045, 3, 1060, 530, 0,
		6045, 1041, 1, 0, 0, 0, 6046, 6047, 3, 1044, 522, 0, 6047, 6048, 5, 20,
		0, 0, 6048, 6055, 1, 0, 0, 0, 6049, 6050, 3, 1044, 522, 0, 6050, 6051,
		5, 15, 0, 0, 6051, 6052, 5, 20, 0, 0, 6052, 6053, 6, 521, -1, 0, 6053,
		6055, 1, 0, 0, 0, 6054, 6046, 1, 0, 0, 0, 6054, 6049, 1, 0, 0, 0, 6055,
		1043, 1, 0, 0, 0, 6056, 6057, 5, 19, 0, 0, 6057, 6062, 3, 1046, 523, 0,
		6058, 6059, 5, 15, 0, 0, 6059, 6061, 3, 1046, 523, 0, 6060, 6058, 1, 0,
		0, 0, 6061, 6064, 1, 0, 0, 0, 6062, 6060, 1, 0, 0, 0, 6062, 6063, 1, 0,
		0, 0, 6063, 1045, 1, 0, 0, 0, 6064, 6062, 1, 0, 0, 0, 6065, 6072, 3, 1096,
		548, 0, 6066, 6072, 3, 1102, 551, 0, 6067, 6072, 3, 1104, 552, 0, 6068,
		6072, 3, 1098, 549, 0, 6069, 6072, 3, 1084, 542, 0, 6070, 6072, 5, 206,
		0, 0, 6071, 6065, 1, 0, 0, 0, 6071, 6066, 1, 0, 0, 0, 6071, 6067, 1, 0,
		0, 0, 6071, 6068, 1, 0, 0, 0, 6071, 6069, 1, 0, 0, 0, 6071, 6070, 1, 0,
		0, 0, 6072, 1047, 1, 0, 0, 0, 6073, 6080, 3, 1074, 537, 0, 6074, 6080,
		3, 1068, 534, 0, 6075, 6080, 3, 1056, 528, 0, 6076, 6080, 3, 1028, 514,
		0, 6077, 6080, 3, 1052, 526, 0, 6078, 6080, 3, 1050, 525, 0, 6079, 6073,
		1, 0, 0, 0, 6079, 6074, 1, 0, 0, 0, 6079, 6075, 1, 0, 0, 0, 6079, 6076,
		1, 0, 0, 0, 6079, 6077, 1, 0, 0, 0, 6079, 6078, 1, 0, 0, 0, 6080, 1049,
		1, 0, 0, 0, 6081, 6082, 5, 201, 0, 0, 6082, 6083, 3, 1076, 538, 0, 6083,
		6084, 3, 1030, 515, 0, 6084, 6085, 5, 15, 0, 0, 6085, 6086, 3, 1030, 515,
		0, 6086, 6087, 3, 1078, 539, 0, 6087, 1051, 1, 0, 0, 0, 6088, 6089, 5,
		176, 0, 0, 6089, 6090, 3, 1076, 538, 0, 6090, 6091, 5, 19, 0, 0, 6091,
		6092, 5, 20, 0, 0, 6092, 6093, 5, 35, 0, 0, 6093, 6094, 3, 1030, 515, 0,
		6094, 6095, 3, 1078, 539, 0, 6095, 6110, 1, 0, 0, 0, 6096, 6097, 5, 176,
		0, 0, 6097, 6098, 3, 1076, 538, 0, 6098, 6099, 3, 1030, 515, 0, 6099, 6100,
		5, 35, 0, 0, 6100, 6101, 3, 1030, 515, 0, 6101, 6102, 3, 1078, 539, 0,
		6102, 6110, 1, 0, 0, 0, 6103, 6104, 3, 1054, 527, 0, 6104, 6105, 5, 20,
		0, 0, 6105, 6106, 5, 35, 0, 0, 6106, 6107, 3, 1030, 515, 0, 6107, 6108,
		3, 1078, 539, 0, 6108, 6110, 1, 0, 0, 0, 6109, 6088, 1, 0, 0, 0, 6109,
		6096, 1, 0, 0, 0, 6109, 6103, 1, 0, 0, 0, 6110, 1053, 1, 0, 0, 0, 6111,
		6112, 5, 176, 0, 0, 6112, 6113, 3, 1076, 538, 0, 6113, 6114, 5, 19, 0,
		0, 6114, 6119, 3, 1030, 515, 0, 6115, 6116, 5, 15, 0, 0, 6116, 6118, 3,
		1030, 515, 0, 6117, 6115, 1, 0, 0, 0, 6118, 6121, 1, 0, 0, 0, 6119, 6117,
		1, 0, 0, 0, 6119, 6120, 1, 0, 0, 0, 6120, 1055, 1, 0, 0, 0, 6121, 6119,
		1, 0, 0, 0, 6122, 6125, 3, 1058, 529, 0, 6123, 6125, 5, 118, 0, 0, 6124,
		6122, 1, 0, 0, 0, 6124, 6123, 1, 0, 0, 0, 6125, 1057, 1, 0, 0, 0, 6126,
		6131, 3, 1060, 530, 0, 6127, 6128, 5, 16, 0, 0, 6128, 6130, 3, 1060, 530,
		0, 6129, 6127, 1, 0, 0, 0, 6130, 6133, 1, 0, 0, 0, 6131, 6129, 1, 0, 0,
		0, 6131, 6132, 1, 0, 0, 0, 6132, 1059, 1, 0, 0, 0, 6133, 6131, 1, 0, 0,
		0, 6134, 6137, 3, 1066, 533, 0, 6135, 6137, 3, 1062, 531, 0, 6136, 6134,
		1, 0, 0, 0, 6136, 6135, 1, 0, 0, 0, 6137, 1061, 1, 0, 0, 0, 6138, 6141,
		3, 1064, 532, 0, 6139, 6141, 5, 119, 0, 0, 6140, 6138, 1, 0, 0, 0, 6140,
		6139, 1, 0, 0, 0, 6141, 1063, 1, 0, 0, 0, 6142, 6143, 7, 28, 0, 0, 6143,
		1065, 1, 0, 0, 0, 6144, 6145, 5, 350, 0, 0, 6145, 1067, 1, 0, 0, 0, 6146,
		6147, 5, 94, 0, 0, 6147, 6148, 3, 1076, 538, 0, 6148, 6149, 3, 1078, 539,
		0, 6149, 6154, 1, 0, 0, 0, 6150, 6151, 3, 1070, 535, 0, 6151, 6152, 3,
		1078, 539, 0, 6152, 6154, 1, 0, 0, 0, 6153, 6146, 1, 0, 0, 0, 6153, 6150,
		1, 0, 0, 0, 6154, 1069, 1, 0, 0, 0, 6155, 6156, 5, 94, 0, 0, 6156, 6157,
		3, 1076, 538, 0, 6157, 6162, 3, 1072, 536, 0, 6158, 6159, 5, 15, 0, 0,
		6159, 6161, 3, 1072, 536, 0, 6160, 6158, 1, 0, 0, 0, 6161, 6164, 1, 0,
		0, 0, 6162, 6160, 1, 0, 0, 0, 6162, 6163, 1, 0, 0, 0, 6163, 1071, 1, 0,
		0, 0, 6164, 6162, 1, 0, 0, 0, 6165, 6166, 3, 1060, 530, 0, 6166, 6167,
		3, 1030, 515, 0, 6167, 6170, 1, 0, 0, 0, 6168, 6170, 3, 1030, 515, 0, 6169,
		6165, 1, 0, 0, 0, 6169, 6168, 1, 0, 0, 0, 6170, 1073, 1, 0, 0, 0, 6171,
		6172, 5, 54, 0, 0, 6172, 6173, 3, 1076, 538, 0, 6173, 6174, 3, 1030, 515,
		0, 6174, 6175, 3, 1078, 539, 0, 6175, 1075, 1, 0, 0, 0, 6176, 6177, 5,
		4, 0, 0, 6177, 1077, 1, 0, 0, 0, 6178, 6179, 5, 6, 0, 0, 6179, 1079, 1,
		0, 0, 0, 6180, 6181, 3, 1082, 541, 0, 6181, 6182, 3, 1104, 552, 0, 6182,
		1081, 1, 0, 0, 0, 6183, 6184, 7, 29, 0, 0, 6184, 1083, 1, 0, 0, 0, 6185,
		6186, 5, 52, 0, 0, 6186, 1085, 1, 0, 0, 0, 6187, 6188, 5, 112, 0, 0, 6188,
		6189, 3, 1104, 552, 0, 6189, 1087, 1, 0, 0, 0, 6190, 6191, 3, 1090, 545,
		0, 6191, 6192, 3, 1104, 552, 0, 6192, 1089, 1, 0, 0, 0, 6193, 6194, 7,
		30, 0, 0, 6194, 1091, 1, 0, 0, 0, 6195, 6196, 3, 1094, 547, 0, 6196, 6197,
		3, 1104, 552, 0, 6197, 1093, 1, 0, 0, 0, 6198, 6199, 7, 31, 0, 0, 6199,
		1095, 1, 0, 0, 0, 6200, 6201, 5, 53, 0, 0, 6201, 1097, 1, 0, 0, 0, 6202,
		6203, 6, 549, -1, 0, 6203, 6204, 3, 1108, 554, 0, 6204, 6215, 1, 0, 0,
		0, 6205, 6206, 10, 2, 0, 0, 6206, 6207, 3, 1108, 554, 0, 6207, 6208, 6,
		549, -1, 0, 6208, 6214, 1, 0, 0, 0, 6209, 6210, 10, 1, 0, 0, 6210, 6211,
		3, 1106, 553, 0, 6211, 6212, 6, 549, -1, 0, 6212, 6214, 1, 0, 0, 0, 6213,
		6205, 1, 0, 0, 0, 6213, 6209, 1, 0, 0, 0, 6214, 6217, 1, 0, 0, 0, 6215,
		6213, 1, 0, 0, 0, 6215, 6216, 1, 0, 0, 0, 6216, 1099, 1, 0, 0, 0, 6217,
		6215, 1, 0, 0, 0, 6218, 6219, 5, 78, 0, 0, 6219, 1101, 1, 0, 0, 0, 6220,
		6221, 7, 32, 0, 0, 6221, 1103, 1, 0, 0, 0, 6222, 6223, 6, 552, -1, 0, 6223,
		6224, 3, 1106, 553, 0, 6224, 6235, 1, 0, 0, 0, 6225, 6226, 10, 2, 0, 0,
		6226, 6227, 3, 1106, 553, 0, 6227, 6228, 6, 552, -1, 0, 6228, 6234, 1,
		0, 0, 0, 6229, 6230, 10, 1, 0, 0, 6230, 6231, 3, 1108, 554, 0, 6231, 6232,
		6, 552, -1, 0, 6232, 6234, 1, 0, 0, 0, 6233, 6225, 1, 0, 0, 0, 6233, 6229,
		1, 0, 0, 0, 6234, 6237, 1, 0, 0, 0, 6235, 6233, 1, 0, 0, 0, 6235, 6236,
		1, 0, 0, 0, 6236, 1105, 1, 0, 0, 0, 6237, 6235, 1, 0, 0, 0, 6238, 6239,
		5, 42, 0, 0, 6239, 1107, 1, 0, 0, 0, 6240, 6241, 5, 43, 0, 0, 6241, 1109,
		1, 0, 0, 0, 750, 1118, 1122, 1125, 1136, 1180, 1188, 1191, 1197, 1200,
		1208, 1211, 1220, 1223, 1236, 1242, 1248, 1252, 1263, 1267, 1271, 1275,
		1278, 1285, 1288, 1291, 1295, 1299, 1302, 1305, 1311, 1315, 1319, 1323,
		1326, 1329, 1332, 1335, 1342, 1346, 1350, 1354, 1357, 1360, 1364, 1370,
		1378, 1385, 1389, 1392, 1396, 1400, 1403, 1406, 1409, 1412, 1415, 1418,
		1421, 1424, 1427, 1430, 1433, 1447, 1450, 1457, 1472, 1475, 1480, 1484,
		1487, 1490, 1493, 1496, 1503, 1507, 1511, 1513, 1521, 1524, 1530, 1535,
		1538, 1544, 1548, 1551, 1556, 1560, 1566, 1570, 1574, 1577, 1581, 1588,
		1594, 1606, 1610, 1616, 1619, 1622, 1625, 1628, 1632, 1637, 1640, 1645,
		1651, 1658, 1665, 1670, 1677, 1688, 1696, 1703, 1706, 1710, 1714, 1717,
		1720, 1723, 1726, 1744, 1751, 1759, 1762, 1771, 1774, 1779, 1783, 1786,
		1789, 1792, 1795, 1805, 1809, 1813, 1816, 1821, 1826, 1836, 1840, 1845,
		1853, 1865, 1868, 1874, 1877, 1880, 1883, 1887, 1892, 1895, 1899, 1902,
		1906, 1909, 1913, 1929, 1940, 1946, 1952, 1967, 1974, 1977, 1980, 1983,
		1988, 1992, 1995, 2006, 2009, 2013, 2018, 2021, 2024, 2032, 2034, 2038,
		2041, 2059, 2064, 2078, 2080, 2089, 2097, 2104, 2115, 2124, 2135, 2141,
		2145, 2147, 2153, 2160, 2164, 2168, 2170, 2174, 2178, 2187, 2191, 2197,
		2200, 2203, 2212, 2216, 2220, 2237, 2240, 2245, 2251, 2257, 2265, 2268,
		2271, 2275, 2279, 2282, 2285, 2288, 2291, 2299, 2311, 2320, 2324, 2328,
		2330, 2335, 2339, 2341, 2348, 2351, 2370, 2373, 2380, 2383, 2386, 2390,
		2393, 2395, 2406, 2415, 2424, 2434, 2442, 2446, 2450, 2454, 2458, 2461,
		2465, 2485, 2489, 2493, 2527, 2534, 2539, 2545, 2547, 2554, 2569, 2575,
		2579, 2583, 2592, 2596, 2601, 2609, 2612, 2622, 2626, 2630, 2637, 2642,
		2657, 2662, 2665, 2668, 2673, 2676, 2679, 2682, 2686, 2690, 2693, 2696,
		2699, 2702, 2705, 2709, 2713, 2716, 2720, 2725, 2728, 2732, 2739, 2742,
		2744, 2749, 2756, 2763, 2765, 2775, 2782, 2787, 2799, 2806, 2810, 2812,
		2830, 2837, 2845, 2854, 2861, 2865, 2868, 2872, 2876, 2889, 2894, 2902,
		2910, 2918, 2926, 2939, 2955, 2959, 2962, 2967, 2974, 2977, 2980, 2983,
		2986, 2989, 2993, 3008, 3013, 3016, 3023, 3029, 3042, 3046, 3060, 3068,
		3072, 3074, 3080, 3088, 3100, 3105, 3112, 3134, 3147, 3155, 3160, 3168,
		3193, 3200, 3216, 3224, 3231, 3236, 3244, 3254, 3258, 3261, 3266, 3272,
		3281, 3292, 3302, 3312, 3321, 3331, 3348, 3359, 3370, 3375, 3383, 3390,
		3396, 3406, 3411, 3414, 3417, 3437, 3442, 3445, 3450, 3453, 3459, 3465,
		3476, 3479, 3482, 3486, 3492, 3496, 3510, 3515, 3520, 3523, 3526, 3529,
		3532, 3553, 3563, 3568, 3580, 3584, 3590, 3604, 3607, 3613, 3616, 3621,
		3625, 3634, 3637, 3640, 3649, 3659, 3662, 3670, 3673, 3679, 3682, 3689,
		3692, 3699, 3702, 3704, 3710, 3713, 3717, 3721, 3723, 3739, 3748, 3756,
		3765, 3771, 3778, 3785, 3788, 3800, 3803, 3806, 3812, 3819, 3825, 3838,
		3847, 3854, 3863, 3872, 3874, 3877, 3881, 3885, 3888, 3893, 3903, 3908,
		3910, 3916, 3923, 3930, 3937, 3942, 3952, 3956, 3960, 3965, 3971, 3979,
		3984, 3987, 3990, 3994, 3997, 4001, 4004, 4007, 4010, 4013, 4017, 4020,
		4023, 4026, 4030, 4033, 4037, 4040, 4050, 4065, 4072, 4075, 4078, 4081,
		4086, 4089, 4092, 4095, 4099, 4105, 4114, 4123, 4132, 4137, 4140, 4143,
		4147, 4151, 4153, 4163, 4169, 4171, 4177, 4180, 4185, 4188, 4190, 4199,
		4205, 4226, 4230, 4235, 4238, 4253, 4259, 4266, 4268, 4277, 4285, 4292,
		4296, 4307, 4313, 4326, 4336, 4346, 4354, 4361, 4370, 4376, 4380, 4383,
		4386, 4390, 4394, 4399, 4403, 4412, 4421, 4424, 4427, 4430, 4443, 4448,
		4457, 4463, 4473, 4478, 4486, 4490, 4495, 4517, 4521, 4525, 4535, 4552,
		4565, 4567, 4584, 4586, 4591, 4603, 4607, 4615, 4624, 4632, 4640, 4673,
		4680, 4692, 4701, 4711, 4733, 4738, 4741, 4745, 4748, 4755, 4762, 4769,
		4787, 4792, 4799, 4804, 4809, 4814, 4819, 4823, 4825, 4837, 4841, 4846,
		4850, 4857, 4863, 4867, 4870, 4879, 4891, 4903, 4910, 4949, 5011, 5019,
		5026, 5034, 5056, 5058, 5111, 5119, 5134, 5142, 5210, 5220, 5234, 5237,
		5242, 5248, 5266, 5275, 5286, 5294, 5300, 5303, 5314, 5322, 5327, 5337,
		5345, 5352, 5357, 5365, 5368, 5371, 5374, 5379, 5385, 5389, 5392, 5395,
		5398, 5401, 5404, 5407, 5410, 5413, 5416, 5424, 5427, 5430, 5433, 5436,
		5447, 5456, 5466, 5474, 5497, 5505, 5514, 5522, 5526, 5533, 5546, 5555,
		5564, 5574, 5582, 5587, 5590, 5600, 5609, 5617, 5630, 5634, 5642, 5645,
		5656, 5666, 5678, 5686, 5696, 5704, 5708, 5716, 5732, 5743, 5759, 5761,
		5778, 5780, 5795, 5812, 5823, 5836, 5850, 5858, 5868, 5872, 5883, 5893,
		5900, 5914, 5925, 5935, 5937, 5948, 5960, 5968, 5986, 5994, 6002, 6011,
		6023, 6026, 6034, 6041, 6054, 6062, 6071, 6079, 6109, 6119, 6124, 6131,
		6136, 6140, 6153, 6162, 6169, 6213, 6215, 6233, 6235,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// GoogleSQLParserInit initializes any static state used to implement GoogleSQLParser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewGoogleSQLParser(). You can call this function if you wish to initialize the static state ahead
// of time.
func GoogleSQLParserInit() {
	staticData := &GoogleSQLParserParserStaticData
	staticData.once.Do(googlesqlparserParserInit)
}

// NewGoogleSQLParser produces a new parser instance for the optional input antlr.TokenStream.
func NewGoogleSQLParser(input antlr.TokenStream) *GoogleSQLParser {
	GoogleSQLParserInit()
	this := new(GoogleSQLParser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &GoogleSQLParserParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	this.RuleNames = staticData.RuleNames
	this.LiteralNames = staticData.LiteralNames
	this.SymbolicNames = staticData.SymbolicNames
	this.GrammarFileName = "GoogleSQLParser.g4"

	return this
}

// GoogleSQLParser tokens.
const (
	GoogleSQLParserEOF                                       = antlr.TokenEOF
	GoogleSQLParserEQUAL_OPERATOR                            = 1
	GoogleSQLParserNOT_EQUAL_OPERATOR                        = 2
	GoogleSQLParserNOT_EQUAL2_OPERATOR                       = 3
	GoogleSQLParserLT_OPERATOR                               = 4
	GoogleSQLParserLE_OPERATOR                               = 5
	GoogleSQLParserGT_OPERATOR                               = 6
	GoogleSQLParserGE_OPERATOR                               = 7
	GoogleSQLParserKL_OPERATOR                               = 8
	GoogleSQLParserKR_OPERATOR                               = 9
	GoogleSQLParserPLUS_OPERATOR                             = 10
	GoogleSQLParserMINUS_OPERATOR                            = 11
	GoogleSQLParserMULTIPLY_OPERATOR                         = 12
	GoogleSQLParserDIVIDE_OPERATOR                           = 13
	GoogleSQLParserBITWISE_NOT_OPERATOR                      = 14
	GoogleSQLParserCOMMA_SYMBOL                              = 15
	GoogleSQLParserDOT_SYMBOL                                = 16
	GoogleSQLParserLC_BRACKET_SYMBOL                         = 17
	GoogleSQLParserRC_BRACKET_SYMBOL                         = 18
	GoogleSQLParserLR_BRACKET_SYMBOL                         = 19
	GoogleSQLParserRR_BRACKET_SYMBOL                         = 20
	GoogleSQLParserLS_BRACKET_SYMBOL                         = 21
	GoogleSQLParserRS_BRACKET_SYMBOL                         = 22
	GoogleSQLParserSTROKE_SYMBOL                             = 23
	GoogleSQLParserCOLON_SYMBOL                              = 24
	GoogleSQLParserSEMI_SYMBOL                               = 25
	GoogleSQLParserSINGLE_QUOTE_SYMBOL                       = 26
	GoogleSQLParserSINGLE_QUOTE_3_SYMBOL                     = 27
	GoogleSQLParserDOUBLE_QUOTE_SYMBOL                       = 28
	GoogleSQLParserDOUBLE_QUOTE_3_SYMBOL                     = 29
	GoogleSQLParserBACKQUOTE_SYMBOL                          = 30
	GoogleSQLParserQUESTION_SYMBOL                           = 31
	GoogleSQLParserAT_SYMBOL                                 = 32
	GoogleSQLParserATAT_SYMBOL                               = 33
	GoogleSQLParserEQUAL_GT_BRACKET_SYMBOL                   = 34
	GoogleSQLParserSUB_GT_BRACKET_SYMBOL                     = 35
	GoogleSQLParserPLUS_EQUAL_SYMBOL                         = 36
	GoogleSQLParserSUB_EQUAL_SYMBOL                          = 37
	GoogleSQLParserPIPE_SYMBOL                               = 38
	GoogleSQLParserCIRCUMFLEX_SYMBOL                         = 39
	GoogleSQLParserBIT_AND_SYMBOL                            = 40
	GoogleSQLParserBOOL_OR_SYMBOL                            = 41
	GoogleSQLParserSTRING_LITERAL                            = 42
	GoogleSQLParserBYTES_LITERAL                             = 43
	GoogleSQLParserUNCLOSED_STRING_LITERAL                   = 44
	GoogleSQLParserUNCLOSED_TRIPLE_QUOTED_STRING_LITERAL     = 45
	GoogleSQLParserUNCLOSED_RAW_STRING_LITERAL               = 46
	GoogleSQLParserUNCLOSED_TRIPLE_QUOTED_RAW_STRING_LITERAL = 47
	GoogleSQLParserUNCLOSED_BYTES_LITERAL                    = 48
	GoogleSQLParserUNCLOSED_TRIPLE_QUOTED_BYTES_LITERAL      = 49
	GoogleSQLParserUNCLOSED_RAW_BYTES_LITERAL                = 50
	GoogleSQLParserUNCLOSED_TRIPLE_QUOTED_RAW_BYTES_LITERAL  = 51
	GoogleSQLParserFLOATING_POINT_LITERAL                    = 52
	GoogleSQLParserINTEGER_LITERAL                           = 53
	GoogleSQLParserARRAY_SYMBOL                              = 54
	GoogleSQLParserALL_SYMBOL                                = 55
	GoogleSQLParserAS_SYMBOL                                 = 56
	GoogleSQLParserASC_SYMBOL                                = 57
	GoogleSQLParserBY_SYMBOL                                 = 58
	GoogleSQLParserCROSS_SYMBOL                              = 59
	GoogleSQLParserJOIN_SYMBOL                               = 60
	GoogleSQLParserDELTA_SYMBOL                              = 61
	GoogleSQLParserDESC_SYMBOL                               = 62
	GoogleSQLParserDIFFERENTIAL_PRIVACY_SYMBOL               = 63
	GoogleSQLParserDISTINCT_SYMBOL                           = 64
	GoogleSQLParserEPSILON_SYMBOL                            = 65
	GoogleSQLParserEXCEPT_SYMBOL                             = 66
	GoogleSQLParserEXCLUDE_SYMBOL                            = 67
	GoogleSQLParserFOR_SYMBOL                                = 68
	GoogleSQLParserFROM_SYMBOL                               = 69
	GoogleSQLParserFULL_SYMBOL                               = 70
	GoogleSQLParserIN_SYMBOL                                 = 71
	GoogleSQLParserINCLUDE_SYMBOL                            = 72
	GoogleSQLParserINNER_SYMBOL                              = 73
	GoogleSQLParserINTERSECT_SYMBOL                          = 74
	GoogleSQLParserLEFT_SYMBOL                               = 75
	GoogleSQLParserLIMIT_SYMBOL                              = 76
	GoogleSQLParserMAX_GROUPS_CONTRIBUTED_SYMBOL             = 77
	GoogleSQLParserNULL_SYMBOL                               = 78
	GoogleSQLParserNULLS_SYMBOL                              = 79
	GoogleSQLParserOF_SYMBOL                                 = 80
	GoogleSQLParserOFFSET_SYMBOL                             = 81
	GoogleSQLParserON_SYMBOL                                 = 82
	GoogleSQLParserOPTIONS_SYMBOL                            = 83
	GoogleSQLParserORDER_SYMBOL                              = 84
	GoogleSQLParserOUTER_SYMBOL                              = 85
	GoogleSQLParserPERCENT_SYMBOL                            = 86
	GoogleSQLParserPIVOT_SYMBOL                              = 87
	GoogleSQLParserPRIVACY_UNIT_COLUMN_SYMBOL                = 88
	GoogleSQLParserRIGHT_SYMBOL                              = 89
	GoogleSQLParserRECURSIVE_SYMBOL                          = 90
	GoogleSQLParserREPLACE_SYMBOL                            = 91
	GoogleSQLParserUNPIVOT_SYMBOL                            = 92
	GoogleSQLParserSELECT_SYMBOL                             = 93
	GoogleSQLParserSTRUCT_SYMBOL                             = 94
	GoogleSQLParserSYSTEM_SYMBOL                             = 95
	GoogleSQLParserSYSTEM_TIME_SYMBOL                        = 96
	GoogleSQLParserTABLESAMPLE_SYMBOL                        = 97
	GoogleSQLParserUNION_SYMBOL                              = 98
	GoogleSQLParserUNNEST_SYMBOL                             = 99
	GoogleSQLParserUSING_SYMBOL                              = 100
	GoogleSQLParserVALUE_SYMBOL                              = 101
	GoogleSQLParserWITH_SYMBOL                               = 102
	GoogleSQLParserTRUE_SYMBOL                               = 103
	GoogleSQLParserFALSE_SYMBOL                              = 104
	GoogleSQLParserNUMERIC_SYMBOL                            = 105
	GoogleSQLParserDECIMAL_SYMBOL                            = 106
	GoogleSQLParserBIGNUMERIC_SYMBOL                         = 107
	GoogleSQLParserBIGDECIMAL_SYMBOL                         = 108
	GoogleSQLParserNOT_SYMBOL                                = 109
	GoogleSQLParserAND_SYMBOL                                = 110
	GoogleSQLParserOR_SYMBOL                                 = 111
	GoogleSQLParserJSON_SYMBOL                               = 112
	GoogleSQLParserDATE_SYMBOL                               = 113
	GoogleSQLParserTIME_SYMBOL                               = 114
	GoogleSQLParserDATETIME_SYMBOL                           = 115
	GoogleSQLParserTIMESTAMP_SYMBOL                          = 116
	GoogleSQLParserRANGE_SYMBOL                              = 117
	GoogleSQLParserINTERVAL_SYMBOL                           = 118
	GoogleSQLParserSIMPLE_SYMBOL                             = 119
	GoogleSQLParserABORT_SYMBOL                              = 120
	GoogleSQLParserACCESS_SYMBOL                             = 121
	GoogleSQLParserACTION_SYMBOL                             = 122
	GoogleSQLParserAGGREGATE_SYMBOL                          = 123
	GoogleSQLParserADD_SYMBOL                                = 124
	GoogleSQLParserALTER_SYMBOL                              = 125
	GoogleSQLParserALWAYS_SYMBOL                             = 126
	GoogleSQLParserANALYZE_SYMBOL                            = 127
	GoogleSQLParserAPPROX_SYMBOL                             = 128
	GoogleSQLParserARE_SYMBOL                                = 129
	GoogleSQLParserASSERT_SYMBOL                             = 130
	GoogleSQLParserBATCH_SYMBOL                              = 131
	GoogleSQLParserBEGIN_SYMBOL                              = 132
	GoogleSQLParserBREAK_SYMBOL                              = 133
	GoogleSQLParserCALL_SYMBOL                               = 134
	GoogleSQLParserCASCADE_SYMBOL                            = 135
	GoogleSQLParserCHECK_SYMBOL                              = 136
	GoogleSQLParserCLAMPED_SYMBOL                            = 137
	GoogleSQLParserCLONE_SYMBOL                              = 138
	GoogleSQLParserCOPY_SYMBOL                               = 139
	GoogleSQLParserCLUSTER_SYMBOL                            = 140
	GoogleSQLParserCOLUMN_SYMBOL                             = 141
	GoogleSQLParserCOLUMNS_SYMBOL                            = 142
	GoogleSQLParserCOMMIT_SYMBOL                             = 143
	GoogleSQLParserCONNECTION_SYMBOL                         = 144
	GoogleSQLParserCONSTANT_SYMBOL                           = 145
	GoogleSQLParserCONSTRAINT_SYMBOL                         = 146
	GoogleSQLParserCONTINUE_SYMBOL                           = 147
	GoogleSQLParserCORRESPONDING_SYMBOL                      = 148
	GoogleSQLParserCYCLE_SYMBOL                              = 149
	GoogleSQLParserDATA_SYMBOL                               = 150
	GoogleSQLParserDATABASE_SYMBOL                           = 151
	GoogleSQLParserDECLARE_SYMBOL                            = 152
	GoogleSQLParserDEFINER_SYMBOL                            = 153
	GoogleSQLParserDELETE_SYMBOL                             = 154
	GoogleSQLParserDELETION_SYMBOL                           = 155
	GoogleSQLParserDEPTH_SYMBOL                              = 156
	GoogleSQLParserDESCRIBE_SYMBOL                           = 157
	GoogleSQLParserDETERMINISTIC_SYMBOL                      = 158
	GoogleSQLParserDO_SYMBOL                                 = 159
	GoogleSQLParserDROP_SYMBOL                               = 160
	GoogleSQLParserELSEIF_SYMBOL                             = 161
	GoogleSQLParserENFORCED_SYMBOL                           = 162
	GoogleSQLParserERROR_SYMBOL                              = 163
	GoogleSQLParserEXCEPTION_SYMBOL                          = 164
	GoogleSQLParserEXECUTE_SYMBOL                            = 165
	GoogleSQLParserEXPLAIN_SYMBOL                            = 166
	GoogleSQLParserEXPORT_SYMBOL                             = 167
	GoogleSQLParserEXTEND_SYMBOL                             = 168
	GoogleSQLParserEXTERNAL_SYMBOL                           = 169
	GoogleSQLParserFILES_SYMBOL                              = 170
	GoogleSQLParserFILTER_SYMBOL                             = 171
	GoogleSQLParserFILL_SYMBOL                               = 172
	GoogleSQLParserFIRST_SYMBOL                              = 173
	GoogleSQLParserFOREIGN_SYMBOL                            = 174
	GoogleSQLParserFORMAT_SYMBOL                             = 175
	GoogleSQLParserFUNCTION_SYMBOL                           = 176
	GoogleSQLParserGENERATED_SYMBOL                          = 177
	GoogleSQLParserGRANT_SYMBOL                              = 178
	GoogleSQLParserGROUP_ROWS_SYMBOL                         = 179
	GoogleSQLParserHIDDEN_SYMBOL                             = 180
	GoogleSQLParserIDENTITY_SYMBOL                           = 181
	GoogleSQLParserIMMEDIATE_SYMBOL                          = 182
	GoogleSQLParserIMMUTABLE_SYMBOL                          = 183
	GoogleSQLParserIMPORT_SYMBOL                             = 184
	GoogleSQLParserINCREMENT_SYMBOL                          = 185
	GoogleSQLParserINDEX_SYMBOL                              = 186
	GoogleSQLParserINOUT_SYMBOL                              = 187
	GoogleSQLParserINPUT_SYMBOL                              = 188
	GoogleSQLParserINSERT_SYMBOL                             = 189
	GoogleSQLParserINVOKER_SYMBOL                            = 190
	GoogleSQLParserISOLATION_SYMBOL                          = 191
	GoogleSQLParserITERATE_SYMBOL                            = 192
	GoogleSQLParserKEY_SYMBOL                                = 193
	GoogleSQLParserLANGUAGE_SYMBOL                           = 194
	GoogleSQLParserLAST_SYMBOL                               = 195
	GoogleSQLParserLEAVE_SYMBOL                              = 196
	GoogleSQLParserLEVEL_SYMBOL                              = 197
	GoogleSQLParserLOAD_SYMBOL                               = 198
	GoogleSQLParserLOOP_SYMBOL                               = 199
	GoogleSQLParserMACRO_SYMBOL                              = 200
	GoogleSQLParserMAP_SYMBOL                                = 201
	GoogleSQLParserMATCH_SYMBOL                              = 202
	GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL     = 203
	GoogleSQLParserMATCHED_SYMBOL                            = 204
	GoogleSQLParserMATERIALIZED_SYMBOL                       = 205
	GoogleSQLParserMAX_SYMBOL                                = 206
	GoogleSQLParserMAXVALUE_SYMBOL                           = 207
	GoogleSQLParserMEASURES_SYMBOL                           = 208
	GoogleSQLParserMESSAGE_SYMBOL                            = 209
	GoogleSQLParserMETADATA_SYMBOL                           = 210
	GoogleSQLParserMIN_SYMBOL                                = 211
	GoogleSQLParserMINVALUE_SYMBOL                           = 212
	GoogleSQLParserMODEL_SYMBOL                              = 213
	GoogleSQLParserMODULE_SYMBOL                             = 214
	GoogleSQLParserONLY_SYMBOL                               = 215
	GoogleSQLParserOUT_SYMBOL                                = 216
	GoogleSQLParserOUTPUT_SYMBOL                             = 217
	GoogleSQLParserOVERWRITE_SYMBOL                          = 218
	GoogleSQLParserPARTITIONS_SYMBOL                         = 219
	GoogleSQLParserPATTERN_SYMBOL                            = 220
	GoogleSQLParserPOLICIES_SYMBOL                           = 221
	GoogleSQLParserPOLICY_SYMBOL                             = 222
	GoogleSQLParserPRIMARY_SYMBOL                            = 223
	GoogleSQLParserPRIVATE_SYMBOL                            = 224
	GoogleSQLParserPRIVILEGE_SYMBOL                          = 225
	GoogleSQLParserPRIVILEGES_SYMBOL                         = 226
	GoogleSQLParserPROCEDURE_SYMBOL                          = 227
	GoogleSQLParserPROJECT_SYMBOL                            = 228
	GoogleSQLParserPUBLIC_SYMBOL                             = 229
	GoogleSQLParserRAISE_SYMBOL                              = 230
	GoogleSQLParserREAD_SYMBOL                               = 231
	GoogleSQLParserREFERENCES_SYMBOL                         = 232
	GoogleSQLParserREMOTE_SYMBOL                             = 233
	GoogleSQLParserREMOVE_SYMBOL                             = 234
	GoogleSQLParserRENAME_SYMBOL                             = 235
	GoogleSQLParserREPEAT_SYMBOL                             = 236
	GoogleSQLParserREPEATABLE_SYMBOL                         = 237
	GoogleSQLParserREPLACE_FIELDS_SYMBOL                     = 238
	GoogleSQLParserREPLICA_SYMBOL                            = 239
	GoogleSQLParserREPORT_SYMBOL                             = 240
	GoogleSQLParserRESTRICT_SYMBOL                           = 241
	GoogleSQLParserRESTRICTION_SYMBOL                        = 242
	GoogleSQLParserRETURNS_SYMBOL                            = 243
	GoogleSQLParserRETURN_SYMBOL                             = 244
	GoogleSQLParserREVOKE_SYMBOL                             = 245
	GoogleSQLParserROLLBACK_SYMBOL                           = 246
	GoogleSQLParserROW_SYMBOL                                = 247
	GoogleSQLParserRUN_SYMBOL                                = 248
	GoogleSQLParserSAFE_CAST_SYMBOL                          = 249
	GoogleSQLParserSCHEMA_SYMBOL                             = 250
	GoogleSQLParserSEARCH_SYMBOL                             = 251
	GoogleSQLParserSECURITY_SYMBOL                           = 252
	GoogleSQLParserSEQUENCE_SYMBOL                           = 253
	GoogleSQLParserSETS_SYMBOL                               = 254
	GoogleSQLParserSET_SYMBOL                                = 255
	GoogleSQLParserSHOW_SYMBOL                               = 256
	GoogleSQLParserSNAPSHOT_SYMBOL                           = 257
	GoogleSQLParserSOURCE_SYMBOL                             = 258
	GoogleSQLParserSQL_SYMBOL                                = 259
	GoogleSQLParserSTABLE_SYMBOL                             = 260
	GoogleSQLParserSTART_SYMBOL                              = 261
	GoogleSQLParserSTATIC_DESCRIBE_SYMBOL                    = 262
	GoogleSQLParserSTORED_SYMBOL                             = 263
	GoogleSQLParserSTORING_SYMBOL                            = 264
	GoogleSQLParserSTRICT_SYMBOL                             = 265
	GoogleSQLParserTABLE_SYMBOL                              = 266
	GoogleSQLParserTABLES_SYMBOL                             = 267
	GoogleSQLParserTARGET_SYMBOL                             = 268
	GoogleSQLParserTEMP_SYMBOL                               = 269
	GoogleSQLParserTEMPORARY_SYMBOL                          = 270
	GoogleSQLParserTRANSACTION_SYMBOL                        = 271
	GoogleSQLParserTRANSFORM_SYMBOL                          = 272
	GoogleSQLParserTRUNCATE_SYMBOL                           = 273
	GoogleSQLParserTYPE_SYMBOL                               = 274
	GoogleSQLParserUNDROP_SYMBOL                             = 275
	GoogleSQLParserUNIQUE_SYMBOL                             = 276
	GoogleSQLParserUNKNOWN_SYMBOL                            = 277
	GoogleSQLParserUNTIL_SYMBOL                              = 278
	GoogleSQLParserUPDATE_SYMBOL                             = 279
	GoogleSQLParserVALUES_SYMBOL                             = 280
	GoogleSQLParserVECTOR_SYMBOL                             = 281
	GoogleSQLParserVIEW_SYMBOL                               = 282
	GoogleSQLParserVIEWS_SYMBOL                              = 283
	GoogleSQLParserVOLATILE_SYMBOL                           = 284
	GoogleSQLParserWEIGHT_SYMBOL                             = 285
	GoogleSQLParserWHILE_SYMBOL                              = 286
	GoogleSQLParserWRITE_SYMBOL                              = 287
	GoogleSQLParserZONE_SYMBOL                               = 288
	GoogleSQLParserDESCRIPTOR_SYMBOL                         = 289
	GoogleSQLParserINTERLEAVE_SYMBOL                         = 290
	GoogleSQLParserNULL_FILTERED_SYMBOL                      = 291
	GoogleSQLParserPARENT_SYMBOL                             = 292
	GoogleSQLParserNEW_SYMBOL                                = 293
	GoogleSQLParserEND_SYMBOL                                = 294
	GoogleSQLParserCASE_SYMBOL                               = 295
	GoogleSQLParserWHEN_SYMBOL                               = 296
	GoogleSQLParserTHEN_SYMBOL                               = 297
	GoogleSQLParserELSE_SYMBOL                               = 298
	GoogleSQLParserCAST_SYMBOL                               = 299
	GoogleSQLParserEXTRACT_SYMBOL                            = 300
	GoogleSQLParserCOLLATE_SYMBOL                            = 301
	GoogleSQLParserIF_SYMBOL                                 = 302
	GoogleSQLParserGROUPING_SYMBOL                           = 303
	GoogleSQLParserHAVING_SYMBOL                             = 304
	GoogleSQLParserGROUP_SYMBOL                              = 305
	GoogleSQLParserROLLUP_SYMBOL                             = 306
	GoogleSQLParserCUBE_SYMBOL                               = 307
	GoogleSQLParserHASH_SYMBOL                               = 308
	GoogleSQLParserPROTO_SYMBOL                              = 309
	GoogleSQLParserPARTITION_SYMBOL                          = 310
	GoogleSQLParserIGNORE_SYMBOL                             = 311
	GoogleSQLParserRESPECT_SYMBOL                            = 312
	GoogleSQLParserROWS_SYMBOL                               = 313
	GoogleSQLParserOVER_SYMBOL                               = 314
	GoogleSQLParserBETWEEN_SYMBOL                            = 315
	GoogleSQLParserUNBOUNDED_SYMBOL                          = 316
	GoogleSQLParserCURRENT_SYMBOL                            = 317
	GoogleSQLParserPRECEDING_SYMBOL                          = 318
	GoogleSQLParserFOLLOWING_SYMBOL                          = 319
	GoogleSQLParserNATURAL_SYMBOL                            = 320
	GoogleSQLParserQUALIFY_SYMBOL                            = 321
	GoogleSQLParserDEFAULT_SYMBOL                            = 322
	GoogleSQLParserSLASH_SYMBOL                              = 323
	GoogleSQLParserMATCH_RECOGNIZE_SYMBOL                    = 324
	GoogleSQLParserDEFINE_SYMBOL                             = 325
	GoogleSQLParserLOOKUP_SYMBOL                             = 326
	GoogleSQLParserWHERE_SYMBOL                              = 327
	GoogleSQLParserWINDOW_SYMBOL                             = 328
	GoogleSQLParserTO_SYMBOL                                 = 329
	GoogleSQLParserEXISTS_SYMBOL                             = 330
	GoogleSQLParserANY_SYMBOL                                = 331
	GoogleSQLParserSOME_SYMBOL                               = 332
	GoogleSQLParserLIKE_SYMBOL                               = 333
	GoogleSQLParserIS_SYMBOL                                 = 334
	GoogleSQLParserNO_SYMBOL                                 = 335
	GoogleSQLParserINTO_SYMBOL                               = 336
	GoogleSQLParserASSERT_ROWS_MODIFIED_SYMBOL               = 337
	GoogleSQLParserCONFLICT_SYMBOL                           = 338
	GoogleSQLParserNOTHING_SYMBOL                            = 339
	GoogleSQLParserMERGE_SYMBOL                              = 340
	GoogleSQLParserCREATE_SYMBOL                             = 341
	GoogleSQLParserENUM_SYMBOL                               = 342
	GoogleSQLParserDESTINATION_SYMBOL                        = 343
	GoogleSQLParserPROPERTY_SYMBOL                           = 344
	GoogleSQLParserGRAPH_SYMBOL                              = 345
	GoogleSQLParserNODE_SYMBOL                               = 346
	GoogleSQLParserPROPERTIES_SYMBOL                         = 347
	GoogleSQLParserLABEL_SYMBOL                              = 348
	GoogleSQLParserEDGE_SYMBOL                               = 349
	GoogleSQLParserIDENTIFIER                                = 350
	GoogleSQLParserUNCLOSED_ESCAPED_IDENTIFIER               = 351
	GoogleSQLParserWHITESPACE                                = 352
	GoogleSQLParserCOMMENT                                   = 353
)

// GoogleSQLParser rules.
const (
	GoogleSQLParserRULE_root                                          = 0
	GoogleSQLParserRULE_stmts                                         = 1
	GoogleSQLParserRULE_unterminated_sql_statement                    = 2
	GoogleSQLParserRULE_sql_statement_body                            = 3
	GoogleSQLParserRULE_export_metadata_statement                     = 4
	GoogleSQLParserRULE_export_model_statement                        = 5
	GoogleSQLParserRULE_export_data_statement                         = 6
	GoogleSQLParserRULE_export_data_no_query                          = 7
	GoogleSQLParserRULE_explain_statement                             = 8
	GoogleSQLParserRULE_execute_immediate                             = 9
	GoogleSQLParserRULE_opt_execute_into_clause                       = 10
	GoogleSQLParserRULE_opt_execute_using_clause                      = 11
	GoogleSQLParserRULE_execute_using_argument_list                   = 12
	GoogleSQLParserRULE_execute_using_argument                        = 13
	GoogleSQLParserRULE_describe_statement                            = 14
	GoogleSQLParserRULE_describe_info                                 = 15
	GoogleSQLParserRULE_opt_from_path_expression                      = 16
	GoogleSQLParserRULE_describe_keyword                              = 17
	GoogleSQLParserRULE_define_table_statement                        = 18
	GoogleSQLParserRULE_create_entity_statement                       = 19
	GoogleSQLParserRULE_opt_generic_entity_body                       = 20
	GoogleSQLParserRULE_create_view_statement                         = 21
	GoogleSQLParserRULE_query_or_replica_source                       = 22
	GoogleSQLParserRULE_column_with_options_list                      = 23
	GoogleSQLParserRULE_column_with_options                           = 24
	GoogleSQLParserRULE_create_table_statement                        = 25
	GoogleSQLParserRULE_opt_ttl_clause                                = 26
	GoogleSQLParserRULE_opt_copy_table                                = 27
	GoogleSQLParserRULE_copy_data_source                              = 28
	GoogleSQLParserRULE_opt_clone_table                               = 29
	GoogleSQLParserRULE_opt_spanner_table_options                     = 30
	GoogleSQLParserRULE_opt_spanner_interleave_in_parent_clause       = 31
	GoogleSQLParserRULE_spanner_primary_key                           = 32
	GoogleSQLParserRULE_create_table_function_statement               = 33
	GoogleSQLParserRULE_opt_as_query_or_string                        = 34
	GoogleSQLParserRULE_unordered_language_options                    = 35
	GoogleSQLParserRULE_opt_function_parameters                       = 36
	GoogleSQLParserRULE_create_snapshot_statement                     = 37
	GoogleSQLParserRULE_create_external_schema_statement              = 38
	GoogleSQLParserRULE_create_schema_statement                       = 39
	GoogleSQLParserRULE_create_property_graph_statement               = 40
	GoogleSQLParserRULE_opt_edge_table_clause                         = 41
	GoogleSQLParserRULE_element_table_list                            = 42
	GoogleSQLParserRULE_element_table_definition                      = 43
	GoogleSQLParserRULE_opt_label_and_properties_clause               = 44
	GoogleSQLParserRULE_label_and_properties_list                     = 45
	GoogleSQLParserRULE_label_and_properties                          = 46
	GoogleSQLParserRULE_properties_clause                             = 47
	GoogleSQLParserRULE_derived_property_list                         = 48
	GoogleSQLParserRULE_derived_property                              = 49
	GoogleSQLParserRULE_opt_except_column_list                        = 50
	GoogleSQLParserRULE_properties_all_columns                        = 51
	GoogleSQLParserRULE_opt_dest_node_table_clause                    = 52
	GoogleSQLParserRULE_opt_source_node_table_clause                  = 53
	GoogleSQLParserRULE_opt_key_clause                                = 54
	GoogleSQLParserRULE_create_model_statement                        = 55
	GoogleSQLParserRULE_opt_input_output_clause                       = 56
	GoogleSQLParserRULE_opt_transform_clause                          = 57
	GoogleSQLParserRULE_opt_as_query_or_aliased_query_list            = 58
	GoogleSQLParserRULE_aliased_query_list                            = 59
	GoogleSQLParserRULE_as_query                                      = 60
	GoogleSQLParserRULE_create_external_table_function_statement      = 61
	GoogleSQLParserRULE_create_external_table_statement               = 62
	GoogleSQLParserRULE_opt_default_collate_clause                    = 63
	GoogleSQLParserRULE_opt_like_path_expression                      = 64
	GoogleSQLParserRULE_create_row_access_policy_statement            = 65
	GoogleSQLParserRULE_filter_using_clause                           = 66
	GoogleSQLParserRULE_create_row_access_policy_grant_to_clause      = 67
	GoogleSQLParserRULE_create_privilege_restriction_statement        = 68
	GoogleSQLParserRULE_restrict_to_clause                            = 69
	GoogleSQLParserRULE_possibly_empty_grantee_list                   = 70
	GoogleSQLParserRULE_create_index_statement                        = 71
	GoogleSQLParserRULE_opt_create_index_statement_suffix             = 72
	GoogleSQLParserRULE_spanner_index_interleave_clause               = 73
	GoogleSQLParserRULE_index_storing_list                            = 74
	GoogleSQLParserRULE_index_storing_expression_list                 = 75
	GoogleSQLParserRULE_index_order_by_and_options                    = 76
	GoogleSQLParserRULE_index_all_columns                             = 77
	GoogleSQLParserRULE_opt_with_column_options                       = 78
	GoogleSQLParserRULE_all_column_column_options                     = 79
	GoogleSQLParserRULE_column_ordering_and_options_expr              = 80
	GoogleSQLParserRULE_index_unnest_expression_list                  = 81
	GoogleSQLParserRULE_unnest_expression_with_opt_alias_and_offset   = 82
	GoogleSQLParserRULE_on_path_expression                            = 83
	GoogleSQLParserRULE_index_type                                    = 84
	GoogleSQLParserRULE_opt_spanner_null_filtered                     = 85
	GoogleSQLParserRULE_create_procedure_statement                    = 86
	GoogleSQLParserRULE_begin_end_block_or_language_as_code           = 87
	GoogleSQLParserRULE_begin_end_block                               = 88
	GoogleSQLParserRULE_opt_exception_handler                         = 89
	GoogleSQLParserRULE_statement_list                                = 90
	GoogleSQLParserRULE_unterminated_non_empty_statement_list         = 91
	GoogleSQLParserRULE_unterminated_statement                        = 92
	GoogleSQLParserRULE_unterminated_script_statement                 = 93
	GoogleSQLParserRULE_label                                         = 94
	GoogleSQLParserRULE_unterminated_unlabeled_script_statement       = 95
	GoogleSQLParserRULE_for_in_statement                              = 96
	GoogleSQLParserRULE_repeat_statement                              = 97
	GoogleSQLParserRULE_until_clause                                  = 98
	GoogleSQLParserRULE_loop_statement                                = 99
	GoogleSQLParserRULE_while_statement                               = 100
	GoogleSQLParserRULE_raise_statement                               = 101
	GoogleSQLParserRULE_return_statement                              = 102
	GoogleSQLParserRULE_continue_statement                            = 103
	GoogleSQLParserRULE_variable_declaration                          = 104
	GoogleSQLParserRULE_break_statement                               = 105
	GoogleSQLParserRULE_case_statement                                = 106
	GoogleSQLParserRULE_when_then_clauses                             = 107
	GoogleSQLParserRULE_if_statement                                  = 108
	GoogleSQLParserRULE_elseif_clauses                                = 109
	GoogleSQLParserRULE_opt_else                                      = 110
	GoogleSQLParserRULE_opt_as_code                                   = 111
	GoogleSQLParserRULE_opt_external_security_clause                  = 112
	GoogleSQLParserRULE_external_security_clause_kind                 = 113
	GoogleSQLParserRULE_procedure_parameters                          = 114
	GoogleSQLParserRULE_procedure_parameter                           = 115
	GoogleSQLParserRULE_procedure_parameter_termination               = 116
	GoogleSQLParserRULE_opt_procedure_parameter_mode                  = 117
	GoogleSQLParserRULE_create_function_statement                     = 118
	GoogleSQLParserRULE_opt_determinism_level                         = 119
	GoogleSQLParserRULE_opt_sql_security_clause                       = 120
	GoogleSQLParserRULE_sql_security_clause_kind                      = 121
	GoogleSQLParserRULE_as_sql_function_body_or_string                = 122
	GoogleSQLParserRULE_sql_function_body                             = 123
	GoogleSQLParserRULE_unordered_options_body                        = 124
	GoogleSQLParserRULE_opt_language_or_remote_with_connection        = 125
	GoogleSQLParserRULE_language                                      = 126
	GoogleSQLParserRULE_remote_with_connection_clause                 = 127
	GoogleSQLParserRULE_with_connection_clause                        = 128
	GoogleSQLParserRULE_opt_function_returns                          = 129
	GoogleSQLParserRULE_opt_returns                                   = 130
	GoogleSQLParserRULE_function_declaration                          = 131
	GoogleSQLParserRULE_function_parameters                           = 132
	GoogleSQLParserRULE_function_parameter                            = 133
	GoogleSQLParserRULE_opt_not_aggregate                             = 134
	GoogleSQLParserRULE_opt_default_expression                        = 135
	GoogleSQLParserRULE_type_or_tvf_schema                            = 136
	GoogleSQLParserRULE_tvf_schema                                    = 137
	GoogleSQLParserRULE_tvf_schema_column                             = 138
	GoogleSQLParserRULE_templated_parameter_type                      = 139
	GoogleSQLParserRULE_templated_parameter_kind                      = 140
	GoogleSQLParserRULE_opt_aggregate                                 = 141
	GoogleSQLParserRULE_create_database_statement                     = 142
	GoogleSQLParserRULE_create_connection_statement                   = 143
	GoogleSQLParserRULE_create_constant_statement                     = 144
	GoogleSQLParserRULE_opt_or_replace                                = 145
	GoogleSQLParserRULE_opt_create_scope                              = 146
	GoogleSQLParserRULE_run_batch_statement                           = 147
	GoogleSQLParserRULE_abort_batch_statement                         = 148
	GoogleSQLParserRULE_start_batch_statement                         = 149
	GoogleSQLParserRULE_rollback_statement                            = 150
	GoogleSQLParserRULE_commit_statement                              = 151
	GoogleSQLParserRULE_set_statement                                 = 152
	GoogleSQLParserRULE_identifier_list                               = 153
	GoogleSQLParserRULE_begin_statement                               = 154
	GoogleSQLParserRULE_begin_transaction_keywords                    = 155
	GoogleSQLParserRULE_transaction_mode_list                         = 156
	GoogleSQLParserRULE_transaction_mode                              = 157
	GoogleSQLParserRULE_truncate_statement                            = 158
	GoogleSQLParserRULE_merge_statement                               = 159
	GoogleSQLParserRULE_merge_source                                  = 160
	GoogleSQLParserRULE_merge_when_clause                             = 161
	GoogleSQLParserRULE_merge_action                                  = 162
	GoogleSQLParserRULE_merge_insert_value_list_or_source_row         = 163
	GoogleSQLParserRULE_by_target                                     = 164
	GoogleSQLParserRULE_opt_and_expression                            = 165
	GoogleSQLParserRULE_statement_level_hint                          = 166
	GoogleSQLParserRULE_query_statement                               = 167
	GoogleSQLParserRULE_dml_statement                                 = 168
	GoogleSQLParserRULE_update_statement                              = 169
	GoogleSQLParserRULE_delete_statement                              = 170
	GoogleSQLParserRULE_insert_statement                              = 171
	GoogleSQLParserRULE_on_conflict_clause                            = 172
	GoogleSQLParserRULE_opt_where_expression                          = 173
	GoogleSQLParserRULE_opt_conflict_target                           = 174
	GoogleSQLParserRULE_update_item_list                              = 175
	GoogleSQLParserRULE_update_item                                   = 176
	GoogleSQLParserRULE_update_set_value                              = 177
	GoogleSQLParserRULE_nested_dml_statement                          = 178
	GoogleSQLParserRULE_insert_values_list_or_table_clause            = 179
	GoogleSQLParserRULE_table_clause_unreversed                       = 180
	GoogleSQLParserRULE_table_clause_no_keyword                       = 181
	GoogleSQLParserRULE_opt_returning_clause                          = 182
	GoogleSQLParserRULE_opt_assert_rows_modified                      = 183
	GoogleSQLParserRULE_insert_values_or_query                        = 184
	GoogleSQLParserRULE_insert_values_list                            = 185
	GoogleSQLParserRULE_insert_values_row                             = 186
	GoogleSQLParserRULE_expression_or_default                         = 187
	GoogleSQLParserRULE_insert_statement_prefix                       = 188
	GoogleSQLParserRULE_maybe_dashed_generalized_path_expression      = 189
	GoogleSQLParserRULE_opt_into                                      = 190
	GoogleSQLParserRULE_opt_or_ignore_replace_update                  = 191
	GoogleSQLParserRULE_alter_statement                               = 192
	GoogleSQLParserRULE_analyze_statement                             = 193
	GoogleSQLParserRULE_assert_statement                              = 194
	GoogleSQLParserRULE_aux_load_data_statement                       = 195
	GoogleSQLParserRULE_clone_data_statement                          = 196
	GoogleSQLParserRULE_clone_data_source_list                        = 197
	GoogleSQLParserRULE_clone_data_source                             = 198
	GoogleSQLParserRULE_opt_external_table_with_clauses               = 199
	GoogleSQLParserRULE_with_partition_columns_clause                 = 200
	GoogleSQLParserRULE_aux_load_data_from_files_options_list         = 201
	GoogleSQLParserRULE_cluster_by_clause_prefix_no_hint              = 202
	GoogleSQLParserRULE_load_data_partitions_clause                   = 203
	GoogleSQLParserRULE_maybe_dashed_path_expression_with_scope       = 204
	GoogleSQLParserRULE_table_element_list                            = 205
	GoogleSQLParserRULE_table_element                                 = 206
	GoogleSQLParserRULE_table_constraint_definition                   = 207
	GoogleSQLParserRULE_append_or_overwrite                           = 208
	GoogleSQLParserRULE_opt_description                               = 209
	GoogleSQLParserRULE_table_and_column_info_list                    = 210
	GoogleSQLParserRULE_table_and_column_info                         = 211
	GoogleSQLParserRULE_row_access_policy_alter_action_list           = 212
	GoogleSQLParserRULE_row_access_policy_alter_action                = 213
	GoogleSQLParserRULE_grant_to_clause                               = 214
	GoogleSQLParserRULE_grantee_list                                  = 215
	GoogleSQLParserRULE_privilege_list                                = 216
	GoogleSQLParserRULE_privilege                                     = 217
	GoogleSQLParserRULE_path_expression_list_with_parens              = 218
	GoogleSQLParserRULE_privilege_name                                = 219
	GoogleSQLParserRULE_generic_entity_type                           = 220
	GoogleSQLParserRULE_generic_entity_type_unchecked                 = 221
	GoogleSQLParserRULE_schema_object_kind                            = 222
	GoogleSQLParserRULE_alter_action_list                             = 223
	GoogleSQLParserRULE_alter_action                                  = 224
	GoogleSQLParserRULE_spanner_set_on_delete_action                  = 225
	GoogleSQLParserRULE_spanner_alter_column_action                   = 226
	GoogleSQLParserRULE_spanner_generated_or_default                  = 227
	GoogleSQLParserRULE_generic_sub_entity_type                       = 228
	GoogleSQLParserRULE_sub_entity_type_identifier                    = 229
	GoogleSQLParserRULE_fill_using_expression                         = 230
	GoogleSQLParserRULE_column_position                               = 231
	GoogleSQLParserRULE_table_column_definition                       = 232
	GoogleSQLParserRULE_column_attributes                             = 233
	GoogleSQLParserRULE_column_attribute                              = 234
	GoogleSQLParserRULE_primary_key_column_attribute                  = 235
	GoogleSQLParserRULE_foreign_key_column_attribute                  = 236
	GoogleSQLParserRULE_hidden_column_attribute                       = 237
	GoogleSQLParserRULE_opt_constraint_identity                       = 238
	GoogleSQLParserRULE_table_column_schema                           = 239
	GoogleSQLParserRULE_opt_column_info                               = 240
	GoogleSQLParserRULE_invalid_generated_column                      = 241
	GoogleSQLParserRULE_invalid_default_column                        = 242
	GoogleSQLParserRULE_default_column_info                           = 243
	GoogleSQLParserRULE_generated_column_info                         = 244
	GoogleSQLParserRULE_identity_column_info                          = 245
	GoogleSQLParserRULE_opt_start_with                                = 246
	GoogleSQLParserRULE_opt_increment_by                              = 247
	GoogleSQLParserRULE_opt_maxvalue                                  = 248
	GoogleSQLParserRULE_opt_minvalue                                  = 249
	GoogleSQLParserRULE_opt_cycle                                     = 250
	GoogleSQLParserRULE_signed_numeric_literal                        = 251
	GoogleSQLParserRULE_stored_mode                                   = 252
	GoogleSQLParserRULE_generated_mode                                = 253
	GoogleSQLParserRULE_column_schema_inner                           = 254
	GoogleSQLParserRULE_raw_column_schema_inner                       = 255
	GoogleSQLParserRULE_range_column_schema_inner                     = 256
	GoogleSQLParserRULE_struct_column_schema_inner                    = 257
	GoogleSQLParserRULE_struct_column_field                           = 258
	GoogleSQLParserRULE_simple_column_schema_inner                    = 259
	GoogleSQLParserRULE_array_column_schema_inner                     = 260
	GoogleSQLParserRULE_field_schema                                  = 261
	GoogleSQLParserRULE_opt_field_attributes                          = 262
	GoogleSQLParserRULE_not_null_column_attribute                     = 263
	GoogleSQLParserRULE_primary_key_or_table_constraint_spec          = 264
	GoogleSQLParserRULE_opt_if_not_exists                             = 265
	GoogleSQLParserRULE_primary_key_spec                              = 266
	GoogleSQLParserRULE_primary_key_element_list                      = 267
	GoogleSQLParserRULE_primary_key_element                           = 268
	GoogleSQLParserRULE_table_constraint_spec                         = 269
	GoogleSQLParserRULE_foreign_key_reference                         = 270
	GoogleSQLParserRULE_opt_foreign_key_action                        = 271
	GoogleSQLParserRULE_foreign_key_on_update                         = 272
	GoogleSQLParserRULE_foreign_key_on_delete                         = 273
	GoogleSQLParserRULE_foreign_key_action                            = 274
	GoogleSQLParserRULE_opt_foreign_key_match                         = 275
	GoogleSQLParserRULE_foreign_key_match_mode                        = 276
	GoogleSQLParserRULE_column_list                                   = 277
	GoogleSQLParserRULE_opt_options_list                              = 278
	GoogleSQLParserRULE_constraint_enforcement                        = 279
	GoogleSQLParserRULE_generic_entity_body                           = 280
	GoogleSQLParserRULE_opt_if_exists                                 = 281
	GoogleSQLParserRULE_table_or_table_function                       = 282
	GoogleSQLParserRULE_query                                         = 283
	GoogleSQLParserRULE_query_without_pipe_operators                  = 284
	GoogleSQLParserRULE_bad_keyword_after_from_query                  = 285
	GoogleSQLParserRULE_bad_keyword_after_from_query_allows_parens    = 286
	GoogleSQLParserRULE_with_clause_with_trailing_comma               = 287
	GoogleSQLParserRULE_select_or_from_keyword                        = 288
	GoogleSQLParserRULE_query_primary_or_set_operation                = 289
	GoogleSQLParserRULE_query_set_operation                           = 290
	GoogleSQLParserRULE_query_set_operation_prefix                    = 291
	GoogleSQLParserRULE_query_set_operation_item                      = 292
	GoogleSQLParserRULE_query_primary                                 = 293
	GoogleSQLParserRULE_set_operation_metadata                        = 294
	GoogleSQLParserRULE_opt_column_match_suffix                       = 295
	GoogleSQLParserRULE_opt_strict                                    = 296
	GoogleSQLParserRULE_all_or_distinct                               = 297
	GoogleSQLParserRULE_query_set_operation_type                      = 298
	GoogleSQLParserRULE_opt_corresponding_outer_mode                  = 299
	GoogleSQLParserRULE_opt_outer                                     = 300
	GoogleSQLParserRULE_with_clause                                   = 301
	GoogleSQLParserRULE_aliased_query                                 = 302
	GoogleSQLParserRULE_opt_aliased_query_modifiers                   = 303
	GoogleSQLParserRULE_recursion_depth_modifier                      = 304
	GoogleSQLParserRULE_possibly_unbounded_int_literal_or_parameter   = 305
	GoogleSQLParserRULE_int_literal_or_parameter                      = 306
	GoogleSQLParserRULE_order_by_clause                               = 307
	GoogleSQLParserRULE_order_by_clause_prefix                        = 308
	GoogleSQLParserRULE_ordering_expression                           = 309
	GoogleSQLParserRULE_select                                        = 310
	GoogleSQLParserRULE_opt_clauses_following_from                    = 311
	GoogleSQLParserRULE_opt_clauses_following_where                   = 312
	GoogleSQLParserRULE_opt_clauses_following_group_by                = 313
	GoogleSQLParserRULE_window_clause                                 = 314
	GoogleSQLParserRULE_window_clause_prefix                          = 315
	GoogleSQLParserRULE_window_definition                             = 316
	GoogleSQLParserRULE_where_clause                                  = 317
	GoogleSQLParserRULE_having_clause                                 = 318
	GoogleSQLParserRULE_group_by_clause                               = 319
	GoogleSQLParserRULE_group_by_all                                  = 320
	GoogleSQLParserRULE_select_clause                                 = 321
	GoogleSQLParserRULE_opt_select_as_clause                          = 322
	GoogleSQLParserRULE_opt_select_with                               = 323
	GoogleSQLParserRULE_from_clause                                   = 324
	GoogleSQLParserRULE_from_clause_contents                          = 325
	GoogleSQLParserRULE_from_clause_contents_suffix                   = 326
	GoogleSQLParserRULE_table_primary                                 = 327
	GoogleSQLParserRULE_tvf_with_suffixes                             = 328
	GoogleSQLParserRULE_pivot_or_unpivot_clause_and_aliases           = 329
	GoogleSQLParserRULE_as_alias                                      = 330
	GoogleSQLParserRULE_sample_clause                                 = 331
	GoogleSQLParserRULE_opt_sample_clause_suffix                      = 332
	GoogleSQLParserRULE_repeatable_clause                             = 333
	GoogleSQLParserRULE_possibly_cast_int_literal_or_parameter        = 334
	GoogleSQLParserRULE_cast_int_literal_or_parameter                 = 335
	GoogleSQLParserRULE_sample_size                                   = 336
	GoogleSQLParserRULE_sample_size_value                             = 337
	GoogleSQLParserRULE_sample_size_unit                              = 338
	GoogleSQLParserRULE_partition_by_clause_prefix_no_hint            = 339
	GoogleSQLParserRULE_match_recognize_clause                        = 340
	GoogleSQLParserRULE_row_pattern_expr                              = 341
	GoogleSQLParserRULE_row_pattern_concatenation                     = 342
	GoogleSQLParserRULE_row_pattern_factor                            = 343
	GoogleSQLParserRULE_select_list_prefix_with_as_aliases            = 344
	GoogleSQLParserRULE_select_column_expr_with_as_alias              = 345
	GoogleSQLParserRULE_table_subquery                                = 346
	GoogleSQLParserRULE_join                                          = 347
	GoogleSQLParserRULE_join_item                                     = 348
	GoogleSQLParserRULE_on_or_using_clause_list                       = 349
	GoogleSQLParserRULE_on_or_using_clause                            = 350
	GoogleSQLParserRULE_using_clause                                  = 351
	GoogleSQLParserRULE_join_hint                                     = 352
	GoogleSQLParserRULE_table_path_expression                         = 353
	GoogleSQLParserRULE_opt_at_system_time                            = 354
	GoogleSQLParserRULE_opt_with_offset_and_alias                     = 355
	GoogleSQLParserRULE_opt_pivot_or_unpivot_clause_and_alias         = 356
	GoogleSQLParserRULE_table_path_expression_base                    = 357
	GoogleSQLParserRULE_maybe_slashed_or_dashed_path_expression       = 358
	GoogleSQLParserRULE_maybe_dashed_path_expression                  = 359
	GoogleSQLParserRULE_dashed_path_expression                        = 360
	GoogleSQLParserRULE_dashed_identifier                             = 361
	GoogleSQLParserRULE_slashed_identifier                            = 362
	GoogleSQLParserRULE_identifier_or_integer                         = 363
	GoogleSQLParserRULE_slashed_identifier_separator                  = 364
	GoogleSQLParserRULE_slashed_path_expression                       = 365
	GoogleSQLParserRULE_unnest_expression                             = 366
	GoogleSQLParserRULE_unnest_expression_prefix                      = 367
	GoogleSQLParserRULE_opt_array_zip_mode                            = 368
	GoogleSQLParserRULE_expression_with_opt_alias                     = 369
	GoogleSQLParserRULE_tvf_prefix                                    = 370
	GoogleSQLParserRULE_tvf_argument                                  = 371
	GoogleSQLParserRULE_connection_clause                             = 372
	GoogleSQLParserRULE_path_expression_or_default                    = 373
	GoogleSQLParserRULE_descriptor_argument                           = 374
	GoogleSQLParserRULE_descriptor_column_list                        = 375
	GoogleSQLParserRULE_descriptor_column                             = 376
	GoogleSQLParserRULE_table_clause                                  = 377
	GoogleSQLParserRULE_model_clause                                  = 378
	GoogleSQLParserRULE_qualify_clause_nonreserved                    = 379
	GoogleSQLParserRULE_unpivot_clause                                = 380
	GoogleSQLParserRULE_unpivot_in_item_list                          = 381
	GoogleSQLParserRULE_unpivot_in_item_list_prefix                   = 382
	GoogleSQLParserRULE_unpivot_in_item                               = 383
	GoogleSQLParserRULE_opt_as_string_or_integer                      = 384
	GoogleSQLParserRULE_path_expression_list_with_opt_parens          = 385
	GoogleSQLParserRULE_path_expression_list                          = 386
	GoogleSQLParserRULE_unpivot_nulls_filter                          = 387
	GoogleSQLParserRULE_pivot_clause                                  = 388
	GoogleSQLParserRULE_pivot_expression_list                         = 389
	GoogleSQLParserRULE_pivot_expression                              = 390
	GoogleSQLParserRULE_pivot_value_list                              = 391
	GoogleSQLParserRULE_pivot_value                                   = 392
	GoogleSQLParserRULE_tvf_prefix_no_args                            = 393
	GoogleSQLParserRULE_join_type                                     = 394
	GoogleSQLParserRULE_opt_natural                                   = 395
	GoogleSQLParserRULE_on_clause                                     = 396
	GoogleSQLParserRULE_select_list                                   = 397
	GoogleSQLParserRULE_select_list_item                              = 398
	GoogleSQLParserRULE_select_column_star                            = 399
	GoogleSQLParserRULE_select_column_expr                            = 400
	GoogleSQLParserRULE_select_column_dot_star                        = 401
	GoogleSQLParserRULE_star_modifiers                                = 402
	GoogleSQLParserRULE_star_except_list                              = 403
	GoogleSQLParserRULE_star_replace_list                             = 404
	GoogleSQLParserRULE_star_replace_item                             = 405
	GoogleSQLParserRULE_expression                                    = 406
	GoogleSQLParserRULE_expression_higher_prec_than_and               = 407
	GoogleSQLParserRULE_expression_maybe_parenthesized_not_a_query    = 408
	GoogleSQLParserRULE_parenthesized_in_rhs                          = 409
	GoogleSQLParserRULE_unary_operator                                = 410
	GoogleSQLParserRULE_comparative_operator                          = 411
	GoogleSQLParserRULE_shift_operator                                = 412
	GoogleSQLParserRULE_additive_operator                             = 413
	GoogleSQLParserRULE_multiplicative_operator                       = 414
	GoogleSQLParserRULE_is_operator                                   = 415
	GoogleSQLParserRULE_between_operator                              = 416
	GoogleSQLParserRULE_in_operator                                   = 417
	GoogleSQLParserRULE_distinct_operator                             = 418
	GoogleSQLParserRULE_parenthesized_query                           = 419
	GoogleSQLParserRULE_parenthesized_expression_not_a_query          = 420
	GoogleSQLParserRULE_parenthesized_anysomeall_list_in_rhs          = 421
	GoogleSQLParserRULE_and_expression                                = 422
	GoogleSQLParserRULE_in_list_two_or_more_prefix                    = 423
	GoogleSQLParserRULE_any_some_all                                  = 424
	GoogleSQLParserRULE_like_operator                                 = 425
	GoogleSQLParserRULE_expression_subquery_with_keyword              = 426
	GoogleSQLParserRULE_struct_constructor                            = 427
	GoogleSQLParserRULE_struct_constructor_prefix_with_keyword        = 428
	GoogleSQLParserRULE_struct_constructor_arg                        = 429
	GoogleSQLParserRULE_struct_constructor_prefix_without_keyword     = 430
	GoogleSQLParserRULE_struct_constructor_prefix_with_keyword_no_arg = 431
	GoogleSQLParserRULE_interval_expression                           = 432
	GoogleSQLParserRULE_function_call_expression_with_clauses         = 433
	GoogleSQLParserRULE_function_call_expression_with_clauses_suffix  = 434
	GoogleSQLParserRULE_over_clause                                   = 435
	GoogleSQLParserRULE_window_specification                          = 436
	GoogleSQLParserRULE_opt_window_frame_clause                       = 437
	GoogleSQLParserRULE_window_frame_bound                            = 438
	GoogleSQLParserRULE_preceding_or_following                        = 439
	GoogleSQLParserRULE_frame_unit                                    = 440
	GoogleSQLParserRULE_partition_by_clause                           = 441
	GoogleSQLParserRULE_partition_by_clause_prefix                    = 442
	GoogleSQLParserRULE_with_group_rows                               = 443
	GoogleSQLParserRULE_with_report_modifier                          = 444
	GoogleSQLParserRULE_clamped_between_modifier                      = 445
	GoogleSQLParserRULE_with_report_format                            = 446
	GoogleSQLParserRULE_options_list                                  = 447
	GoogleSQLParserRULE_options_list_prefix                           = 448
	GoogleSQLParserRULE_options_entry                                 = 449
	GoogleSQLParserRULE_expression_or_proto                           = 450
	GoogleSQLParserRULE_options_assignment_operator                   = 451
	GoogleSQLParserRULE_opt_null_handling_modifier                    = 452
	GoogleSQLParserRULE_function_call_argument                        = 453
	GoogleSQLParserRULE_sequence_arg                                  = 454
	GoogleSQLParserRULE_named_argument                                = 455
	GoogleSQLParserRULE_lambda_argument                               = 456
	GoogleSQLParserRULE_lambda_argument_list                          = 457
	GoogleSQLParserRULE_limit_offset_clause                           = 458
	GoogleSQLParserRULE_opt_having_or_group_by_modifier               = 459
	GoogleSQLParserRULE_group_by_clause_prefix                        = 460
	GoogleSQLParserRULE_group_by_preamble                             = 461
	GoogleSQLParserRULE_opt_and_order                                 = 462
	GoogleSQLParserRULE_hint                                          = 463
	GoogleSQLParserRULE_hint_with_body                                = 464
	GoogleSQLParserRULE_hint_with_body_prefix                         = 465
	GoogleSQLParserRULE_hint_entry                                    = 466
	GoogleSQLParserRULE_identifier_in_hints                           = 467
	GoogleSQLParserRULE_extra_identifier_in_hints_name                = 468
	GoogleSQLParserRULE_grouping_item                                 = 469
	GoogleSQLParserRULE_grouping_set_list                             = 470
	GoogleSQLParserRULE_grouping_set                                  = 471
	GoogleSQLParserRULE_cube_list                                     = 472
	GoogleSQLParserRULE_rollup_list                                   = 473
	GoogleSQLParserRULE_opt_as_alias_with_required_as                 = 474
	GoogleSQLParserRULE_opt_grouping_item_order                       = 475
	GoogleSQLParserRULE_opt_selection_item_order                      = 476
	GoogleSQLParserRULE_asc_or_desc                                   = 477
	GoogleSQLParserRULE_null_order                                    = 478
	GoogleSQLParserRULE_function_name_from_keyword                    = 479
	GoogleSQLParserRULE_replace_fields_expression                     = 480
	GoogleSQLParserRULE_replace_fields_prefix                         = 481
	GoogleSQLParserRULE_replace_fields_arg                            = 482
	GoogleSQLParserRULE_generalized_path_expression                   = 483
	GoogleSQLParserRULE_generalized_extension_path                    = 484
	GoogleSQLParserRULE_with_expression                               = 485
	GoogleSQLParserRULE_with_expression_variable_prefix               = 486
	GoogleSQLParserRULE_with_expression_variable                      = 487
	GoogleSQLParserRULE_extract_expression                            = 488
	GoogleSQLParserRULE_extract_expression_base                       = 489
	GoogleSQLParserRULE_opt_format                                    = 490
	GoogleSQLParserRULE_opt_at_time_zone                              = 491
	GoogleSQLParserRULE_cast_expression                               = 492
	GoogleSQLParserRULE_case_expression                               = 493
	GoogleSQLParserRULE_case_expression_prefix                        = 494
	GoogleSQLParserRULE_case_value_expression_prefix                  = 495
	GoogleSQLParserRULE_case_no_value_expression_prefix               = 496
	GoogleSQLParserRULE_struct_braced_constructor                     = 497
	GoogleSQLParserRULE_braced_new_constructor                        = 498
	GoogleSQLParserRULE_braced_constructor                            = 499
	GoogleSQLParserRULE_braced_constructor_start                      = 500
	GoogleSQLParserRULE_braced_constructor_prefix                     = 501
	GoogleSQLParserRULE_braced_constructor_field                      = 502
	GoogleSQLParserRULE_braced_constructor_lhs                        = 503
	GoogleSQLParserRULE_braced_constructor_field_value                = 504
	GoogleSQLParserRULE_braced_constructor_extension                  = 505
	GoogleSQLParserRULE_new_constructor                               = 506
	GoogleSQLParserRULE_new_constructor_prefix                        = 507
	GoogleSQLParserRULE_new_constructor_prefix_no_arg                 = 508
	GoogleSQLParserRULE_new_constructor_arg                           = 509
	GoogleSQLParserRULE_array_constructor                             = 510
	GoogleSQLParserRULE_array_constructor_prefix                      = 511
	GoogleSQLParserRULE_array_constructor_prefix_no_expressions       = 512
	GoogleSQLParserRULE_range_literal                                 = 513
	GoogleSQLParserRULE_range_type                                    = 514
	GoogleSQLParserRULE_type                                          = 515
	GoogleSQLParserRULE_collate_clause                                = 516
	GoogleSQLParserRULE_string_literal_or_parameter                   = 517
	GoogleSQLParserRULE_system_variable_expression                    = 518
	GoogleSQLParserRULE_parameter_expression                          = 519
	GoogleSQLParserRULE_named_parameter_expression                    = 520
	GoogleSQLParserRULE_opt_type_parameters                           = 521
	GoogleSQLParserRULE_type_parameters_prefix                        = 522
	GoogleSQLParserRULE_type_parameter                                = 523
	GoogleSQLParserRULE_raw_type                                      = 524
	GoogleSQLParserRULE_map_type                                      = 525
	GoogleSQLParserRULE_function_type                                 = 526
	GoogleSQLParserRULE_function_type_prefix                          = 527
	GoogleSQLParserRULE_type_name                                     = 528
	GoogleSQLParserRULE_path_expression                               = 529
	GoogleSQLParserRULE_identifier                                    = 530
	GoogleSQLParserRULE_keyword_as_identifier                         = 531
	GoogleSQLParserRULE_common_keyword_as_identifier                  = 532
	GoogleSQLParserRULE_token_identifier                              = 533
	GoogleSQLParserRULE_struct_type                                   = 534
	GoogleSQLParserRULE_struct_type_prefix                            = 535
	GoogleSQLParserRULE_struct_field                                  = 536
	GoogleSQLParserRULE_array_type                                    = 537
	GoogleSQLParserRULE_template_type_open                            = 538
	GoogleSQLParserRULE_template_type_close                           = 539
	GoogleSQLParserRULE_date_or_time_literal                          = 540
	GoogleSQLParserRULE_date_or_time_literal_kind                     = 541
	GoogleSQLParserRULE_floating_point_literal                        = 542
	GoogleSQLParserRULE_json_literal                                  = 543
	GoogleSQLParserRULE_bignumeric_literal                            = 544
	GoogleSQLParserRULE_bignumeric_literal_prefix                     = 545
	GoogleSQLParserRULE_numeric_literal                               = 546
	GoogleSQLParserRULE_numeric_literal_prefix                        = 547
	GoogleSQLParserRULE_integer_literal                               = 548
	GoogleSQLParserRULE_bytes_literal                                 = 549
	GoogleSQLParserRULE_null_literal                                  = 550
	GoogleSQLParserRULE_boolean_literal                               = 551
	GoogleSQLParserRULE_string_literal                                = 552
	GoogleSQLParserRULE_string_literal_component                      = 553
	GoogleSQLParserRULE_bytes_literal_component                       = 554
)

// IRootContext is an interface to support dynamic dispatch.
type IRootContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Stmts() IStmtsContext
	EOF() antlr.TerminalNode

	// IsRootContext differentiates from other interfaces.
	IsRootContext()
}

type RootContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRootContext() *RootContext {
	var p = new(RootContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_root
	return p
}

func InitEmptyRootContext(p *RootContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_root
}

func (*RootContext) IsRootContext() {}

func NewRootContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RootContext {
	var p = new(RootContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_root

	return p
}

func (s *RootContext) GetParser() antlr.Parser { return s.parser }

func (s *RootContext) Stmts() IStmtsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStmtsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStmtsContext)
}

func (s *RootContext) EOF() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEOF, 0)
}

func (s *RootContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RootContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RootContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRoot(s)
	}
}

func (s *RootContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRoot(s)
	}
}

func (s *RootContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRoot(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Root() (localctx IRootContext) {
	localctx = NewRootContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, GoogleSQLParserRULE_root)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1110)
		p.Stmts()
	}
	{
		p.SetState(1111)
		p.Match(GoogleSQLParserEOF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStmtsContext is an interface to support dynamic dispatch.
type IStmtsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllUnterminated_sql_statement() []IUnterminated_sql_statementContext
	Unterminated_sql_statement(i int) IUnterminated_sql_statementContext
	AllSEMI_SYMBOL() []antlr.TerminalNode
	SEMI_SYMBOL(i int) antlr.TerminalNode

	// IsStmtsContext differentiates from other interfaces.
	IsStmtsContext()
}

type StmtsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStmtsContext() *StmtsContext {
	var p = new(StmtsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_stmts
	return p
}

func InitEmptyStmtsContext(p *StmtsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_stmts
}

func (*StmtsContext) IsStmtsContext() {}

func NewStmtsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StmtsContext {
	var p = new(StmtsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_stmts

	return p
}

func (s *StmtsContext) GetParser() antlr.Parser { return s.parser }

func (s *StmtsContext) AllUnterminated_sql_statement() []IUnterminated_sql_statementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IUnterminated_sql_statementContext); ok {
			len++
		}
	}

	tst := make([]IUnterminated_sql_statementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IUnterminated_sql_statementContext); ok {
			tst[i] = t.(IUnterminated_sql_statementContext)
			i++
		}
	}

	return tst
}

func (s *StmtsContext) Unterminated_sql_statement(i int) IUnterminated_sql_statementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnterminated_sql_statementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnterminated_sql_statementContext)
}

func (s *StmtsContext) AllSEMI_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserSEMI_SYMBOL)
}

func (s *StmtsContext) SEMI_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSEMI_SYMBOL, i)
}

func (s *StmtsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StmtsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStmts(s)
	}
}

func (s *StmtsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStmts(s)
	}
}

func (s *StmtsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStmts(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Stmts() (localctx IStmtsContext) {
	localctx = NewStmtsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, GoogleSQLParserRULE_stmts)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1113)
		p.Unterminated_sql_statement()
	}
	p.SetState(1118)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 0, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1114)
				p.Match(GoogleSQLParserSEMI_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1115)
				p.Unterminated_sql_statement()
			}

		}
		p.SetState(1120)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 0, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1122)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserSEMI_SYMBOL {
		{
			p.SetState(1121)
			p.Match(GoogleSQLParserSEMI_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnterminated_sql_statementContext is an interface to support dynamic dispatch.
type IUnterminated_sql_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Sql_statement_body() ISql_statement_bodyContext
	Statement_level_hint() IStatement_level_hintContext
	DEFINE_SYMBOL() antlr.TerminalNode
	MACRO_SYMBOL() antlr.TerminalNode

	// IsUnterminated_sql_statementContext differentiates from other interfaces.
	IsUnterminated_sql_statementContext()
}

type Unterminated_sql_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnterminated_sql_statementContext() *Unterminated_sql_statementContext {
	var p = new(Unterminated_sql_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unterminated_sql_statement
	return p
}

func InitEmptyUnterminated_sql_statementContext(p *Unterminated_sql_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unterminated_sql_statement
}

func (*Unterminated_sql_statementContext) IsUnterminated_sql_statementContext() {}

func NewUnterminated_sql_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unterminated_sql_statementContext {
	var p = new(Unterminated_sql_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_unterminated_sql_statement

	return p
}

func (s *Unterminated_sql_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Unterminated_sql_statementContext) Sql_statement_body() ISql_statement_bodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_statement_bodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_statement_bodyContext)
}

func (s *Unterminated_sql_statementContext) Statement_level_hint() IStatement_level_hintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatement_level_hintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatement_level_hintContext)
}

func (s *Unterminated_sql_statementContext) DEFINE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDEFINE_SYMBOL, 0)
}

func (s *Unterminated_sql_statementContext) MACRO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMACRO_SYMBOL, 0)
}

func (s *Unterminated_sql_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unterminated_sql_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unterminated_sql_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUnterminated_sql_statement(s)
	}
}

func (s *Unterminated_sql_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUnterminated_sql_statement(s)
	}
}

func (s *Unterminated_sql_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUnterminated_sql_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Unterminated_sql_statement() (localctx IUnterminated_sql_statementContext) {
	localctx = NewUnterminated_sql_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, GoogleSQLParserRULE_unterminated_sql_statement)
	var _la int

	p.SetState(1136)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 3, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1125)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAT_SYMBOL {
			{
				p.SetState(1124)
				p.Statement_level_hint()
			}

		}
		{
			p.SetState(1127)
			p.Sql_statement_body()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1128)
			p.Match(GoogleSQLParserDEFINE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1129)
			p.Match(GoogleSQLParserMACRO_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.NotifyErrorListeners("Syntax error: DEFINE MACRO statements cannot be composed from other expansions", nil, nil)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1131)
			p.Statement_level_hint()
		}
		{
			p.SetState(1132)
			p.Match(GoogleSQLParserDEFINE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1133)
			p.Match(GoogleSQLParserMACRO_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.NotifyErrorListeners("Hints are not allowed on DEFINE MACRO statements", nil, nil)

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISql_statement_bodyContext is an interface to support dynamic dispatch.
type ISql_statement_bodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Query_statement() IQuery_statementContext
	Alter_statement() IAlter_statementContext
	Analyze_statement() IAnalyze_statementContext
	Assert_statement() IAssert_statementContext
	Aux_load_data_statement() IAux_load_data_statementContext
	Clone_data_statement() IClone_data_statementContext
	Dml_statement() IDml_statementContext
	Merge_statement() IMerge_statementContext
	Truncate_statement() ITruncate_statementContext
	Begin_statement() IBegin_statementContext
	Set_statement() ISet_statementContext
	Commit_statement() ICommit_statementContext
	Start_batch_statement() IStart_batch_statementContext
	Run_batch_statement() IRun_batch_statementContext
	Abort_batch_statement() IAbort_batch_statementContext
	Create_constant_statement() ICreate_constant_statementContext
	Create_connection_statement() ICreate_connection_statementContext
	Create_database_statement() ICreate_database_statementContext
	Create_function_statement() ICreate_function_statementContext
	Create_procedure_statement() ICreate_procedure_statementContext
	Create_index_statement() ICreate_index_statementContext
	Create_privilege_restriction_statement() ICreate_privilege_restriction_statementContext
	Create_row_access_policy_statement() ICreate_row_access_policy_statementContext
	Create_external_table_statement() ICreate_external_table_statementContext
	Create_external_table_function_statement() ICreate_external_table_function_statementContext
	Create_model_statement() ICreate_model_statementContext
	Create_property_graph_statement() ICreate_property_graph_statementContext
	Create_schema_statement() ICreate_schema_statementContext
	Create_external_schema_statement() ICreate_external_schema_statementContext
	Create_snapshot_statement() ICreate_snapshot_statementContext
	Create_table_function_statement() ICreate_table_function_statementContext
	Create_table_statement() ICreate_table_statementContext
	Create_view_statement() ICreate_view_statementContext
	Create_entity_statement() ICreate_entity_statementContext
	Define_table_statement() IDefine_table_statementContext
	Describe_statement() IDescribe_statementContext
	Execute_immediate() IExecute_immediateContext
	Explain_statement() IExplain_statementContext
	Export_data_statement() IExport_data_statementContext
	Export_model_statement() IExport_model_statementContext
	Export_metadata_statement() IExport_metadata_statementContext
	Rollback_statement() IRollback_statementContext

	// IsSql_statement_bodyContext differentiates from other interfaces.
	IsSql_statement_bodyContext()
}

type Sql_statement_bodyContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_statement_bodyContext() *Sql_statement_bodyContext {
	var p = new(Sql_statement_bodyContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_sql_statement_body
	return p
}

func InitEmptySql_statement_bodyContext(p *Sql_statement_bodyContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_sql_statement_body
}

func (*Sql_statement_bodyContext) IsSql_statement_bodyContext() {}

func NewSql_statement_bodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_statement_bodyContext {
	var p = new(Sql_statement_bodyContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_sql_statement_body

	return p
}

func (s *Sql_statement_bodyContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_statement_bodyContext) Query_statement() IQuery_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuery_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuery_statementContext)
}

func (s *Sql_statement_bodyContext) Alter_statement() IAlter_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_statementContext)
}

func (s *Sql_statement_bodyContext) Analyze_statement() IAnalyze_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnalyze_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnalyze_statementContext)
}

func (s *Sql_statement_bodyContext) Assert_statement() IAssert_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssert_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssert_statementContext)
}

func (s *Sql_statement_bodyContext) Aux_load_data_statement() IAux_load_data_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAux_load_data_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAux_load_data_statementContext)
}

func (s *Sql_statement_bodyContext) Clone_data_statement() IClone_data_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClone_data_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClone_data_statementContext)
}

func (s *Sql_statement_bodyContext) Dml_statement() IDml_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDml_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDml_statementContext)
}

func (s *Sql_statement_bodyContext) Merge_statement() IMerge_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMerge_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMerge_statementContext)
}

func (s *Sql_statement_bodyContext) Truncate_statement() ITruncate_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITruncate_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITruncate_statementContext)
}

func (s *Sql_statement_bodyContext) Begin_statement() IBegin_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBegin_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBegin_statementContext)
}

func (s *Sql_statement_bodyContext) Set_statement() ISet_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISet_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISet_statementContext)
}

func (s *Sql_statement_bodyContext) Commit_statement() ICommit_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICommit_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICommit_statementContext)
}

func (s *Sql_statement_bodyContext) Start_batch_statement() IStart_batch_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStart_batch_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStart_batch_statementContext)
}

func (s *Sql_statement_bodyContext) Run_batch_statement() IRun_batch_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRun_batch_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRun_batch_statementContext)
}

func (s *Sql_statement_bodyContext) Abort_batch_statement() IAbort_batch_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAbort_batch_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAbort_batch_statementContext)
}

func (s *Sql_statement_bodyContext) Create_constant_statement() ICreate_constant_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_constant_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_constant_statementContext)
}

func (s *Sql_statement_bodyContext) Create_connection_statement() ICreate_connection_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_connection_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_connection_statementContext)
}

func (s *Sql_statement_bodyContext) Create_database_statement() ICreate_database_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_database_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_database_statementContext)
}

func (s *Sql_statement_bodyContext) Create_function_statement() ICreate_function_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_function_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_function_statementContext)
}

func (s *Sql_statement_bodyContext) Create_procedure_statement() ICreate_procedure_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_procedure_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_procedure_statementContext)
}

func (s *Sql_statement_bodyContext) Create_index_statement() ICreate_index_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_index_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_index_statementContext)
}

func (s *Sql_statement_bodyContext) Create_privilege_restriction_statement() ICreate_privilege_restriction_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_privilege_restriction_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_privilege_restriction_statementContext)
}

func (s *Sql_statement_bodyContext) Create_row_access_policy_statement() ICreate_row_access_policy_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_row_access_policy_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_row_access_policy_statementContext)
}

func (s *Sql_statement_bodyContext) Create_external_table_statement() ICreate_external_table_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_external_table_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_external_table_statementContext)
}

func (s *Sql_statement_bodyContext) Create_external_table_function_statement() ICreate_external_table_function_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_external_table_function_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_external_table_function_statementContext)
}

func (s *Sql_statement_bodyContext) Create_model_statement() ICreate_model_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_model_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_model_statementContext)
}

func (s *Sql_statement_bodyContext) Create_property_graph_statement() ICreate_property_graph_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_property_graph_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_property_graph_statementContext)
}

func (s *Sql_statement_bodyContext) Create_schema_statement() ICreate_schema_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_schema_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_schema_statementContext)
}

func (s *Sql_statement_bodyContext) Create_external_schema_statement() ICreate_external_schema_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_external_schema_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_external_schema_statementContext)
}

func (s *Sql_statement_bodyContext) Create_snapshot_statement() ICreate_snapshot_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_snapshot_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_snapshot_statementContext)
}

func (s *Sql_statement_bodyContext) Create_table_function_statement() ICreate_table_function_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_table_function_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_table_function_statementContext)
}

func (s *Sql_statement_bodyContext) Create_table_statement() ICreate_table_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_table_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_table_statementContext)
}

func (s *Sql_statement_bodyContext) Create_view_statement() ICreate_view_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_view_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_view_statementContext)
}

func (s *Sql_statement_bodyContext) Create_entity_statement() ICreate_entity_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_entity_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_entity_statementContext)
}

func (s *Sql_statement_bodyContext) Define_table_statement() IDefine_table_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefine_table_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefine_table_statementContext)
}

func (s *Sql_statement_bodyContext) Describe_statement() IDescribe_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribe_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribe_statementContext)
}

func (s *Sql_statement_bodyContext) Execute_immediate() IExecute_immediateContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExecute_immediateContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExecute_immediateContext)
}

func (s *Sql_statement_bodyContext) Explain_statement() IExplain_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExplain_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExplain_statementContext)
}

func (s *Sql_statement_bodyContext) Export_data_statement() IExport_data_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExport_data_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExport_data_statementContext)
}

func (s *Sql_statement_bodyContext) Export_model_statement() IExport_model_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExport_model_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExport_model_statementContext)
}

func (s *Sql_statement_bodyContext) Export_metadata_statement() IExport_metadata_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExport_metadata_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExport_metadata_statementContext)
}

func (s *Sql_statement_bodyContext) Rollback_statement() IRollback_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRollback_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRollback_statementContext)
}

func (s *Sql_statement_bodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_statement_bodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_statement_bodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSql_statement_body(s)
	}
}

func (s *Sql_statement_bodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSql_statement_body(s)
	}
}

func (s *Sql_statement_bodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSql_statement_body(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Sql_statement_body() (localctx ISql_statement_bodyContext) {
	localctx = NewSql_statement_bodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, GoogleSQLParserRULE_sql_statement_body)
	p.SetState(1180)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 4, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1138)
			p.Query_statement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1139)
			p.Alter_statement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1140)
			p.Analyze_statement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1141)
			p.Assert_statement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1142)
			p.Aux_load_data_statement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1143)
			p.Clone_data_statement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1144)
			p.Dml_statement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1145)
			p.Merge_statement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1146)
			p.Truncate_statement()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1147)
			p.Begin_statement()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1148)
			p.Set_statement()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1149)
			p.Commit_statement()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1150)
			p.Start_batch_statement()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1151)
			p.Run_batch_statement()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(1152)
			p.Abort_batch_statement()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(1153)
			p.Create_constant_statement()
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(1154)
			p.Create_connection_statement()
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(1155)
			p.Create_database_statement()
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(1156)
			p.Create_function_statement()
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(1157)
			p.Create_procedure_statement()
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(1158)
			p.Create_index_statement()
		}

	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(1159)
			p.Create_privilege_restriction_statement()
		}

	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(1160)
			p.Create_row_access_policy_statement()
		}

	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(1161)
			p.Create_external_table_statement()
		}

	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(1162)
			p.Create_external_table_function_statement()
		}

	case 26:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(1163)
			p.Create_model_statement()
		}

	case 27:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(1164)
			p.Create_property_graph_statement()
		}

	case 28:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(1165)
			p.Create_schema_statement()
		}

	case 29:
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(1166)
			p.Create_external_schema_statement()
		}

	case 30:
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(1167)
			p.Create_snapshot_statement()
		}

	case 31:
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(1168)
			p.Create_table_function_statement()
		}

	case 32:
		p.EnterOuterAlt(localctx, 32)
		{
			p.SetState(1169)
			p.Create_table_statement()
		}

	case 33:
		p.EnterOuterAlt(localctx, 33)
		{
			p.SetState(1170)
			p.Create_view_statement()
		}

	case 34:
		p.EnterOuterAlt(localctx, 34)
		{
			p.SetState(1171)
			p.Create_entity_statement()
		}

	case 35:
		p.EnterOuterAlt(localctx, 35)
		{
			p.SetState(1172)
			p.Define_table_statement()
		}

	case 36:
		p.EnterOuterAlt(localctx, 36)
		{
			p.SetState(1173)
			p.Describe_statement()
		}

	case 37:
		p.EnterOuterAlt(localctx, 37)
		{
			p.SetState(1174)
			p.Execute_immediate()
		}

	case 38:
		p.EnterOuterAlt(localctx, 38)
		{
			p.SetState(1175)
			p.Explain_statement()
		}

	case 39:
		p.EnterOuterAlt(localctx, 39)
		{
			p.SetState(1176)
			p.Export_data_statement()
		}

	case 40:
		p.EnterOuterAlt(localctx, 40)
		{
			p.SetState(1177)
			p.Export_model_statement()
		}

	case 41:
		p.EnterOuterAlt(localctx, 41)
		{
			p.SetState(1178)
			p.Export_metadata_statement()
		}

	case 42:
		p.EnterOuterAlt(localctx, 42)
		{
			p.SetState(1179)
			p.Rollback_statement()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExport_metadata_statementContext is an interface to support dynamic dispatch.
type IExport_metadata_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EXPORT_SYMBOL() antlr.TerminalNode
	Table_or_table_function() ITable_or_table_functionContext
	METADATA_SYMBOL() antlr.TerminalNode
	FROM_SYMBOL() antlr.TerminalNode
	Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext
	With_connection_clause() IWith_connection_clauseContext
	Opt_options_list() IOpt_options_listContext

	// IsExport_metadata_statementContext differentiates from other interfaces.
	IsExport_metadata_statementContext()
}

type Export_metadata_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExport_metadata_statementContext() *Export_metadata_statementContext {
	var p = new(Export_metadata_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_export_metadata_statement
	return p
}

func InitEmptyExport_metadata_statementContext(p *Export_metadata_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_export_metadata_statement
}

func (*Export_metadata_statementContext) IsExport_metadata_statementContext() {}

func NewExport_metadata_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Export_metadata_statementContext {
	var p = new(Export_metadata_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_export_metadata_statement

	return p
}

func (s *Export_metadata_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Export_metadata_statementContext) EXPORT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXPORT_SYMBOL, 0)
}

func (s *Export_metadata_statementContext) Table_or_table_function() ITable_or_table_functionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_or_table_functionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_or_table_functionContext)
}

func (s *Export_metadata_statementContext) METADATA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMETADATA_SYMBOL, 0)
}

func (s *Export_metadata_statementContext) FROM_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFROM_SYMBOL, 0)
}

func (s *Export_metadata_statementContext) Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMaybe_dashed_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMaybe_dashed_path_expressionContext)
}

func (s *Export_metadata_statementContext) With_connection_clause() IWith_connection_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_connection_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_connection_clauseContext)
}

func (s *Export_metadata_statementContext) Opt_options_list() IOpt_options_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_options_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_options_listContext)
}

func (s *Export_metadata_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Export_metadata_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Export_metadata_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterExport_metadata_statement(s)
	}
}

func (s *Export_metadata_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitExport_metadata_statement(s)
	}
}

func (s *Export_metadata_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitExport_metadata_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Export_metadata_statement() (localctx IExport_metadata_statementContext) {
	localctx = NewExport_metadata_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, GoogleSQLParserRULE_export_metadata_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1182)
		p.Match(GoogleSQLParserEXPORT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1183)
		p.Table_or_table_function()
	}
	{
		p.SetState(1184)
		p.Match(GoogleSQLParserMETADATA_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1185)
		p.Match(GoogleSQLParserFROM_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1186)
		p.Maybe_dashed_path_expression()
	}
	p.SetState(1188)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserWITH_SYMBOL {
		{
			p.SetState(1187)
			p.With_connection_clause()
		}

	}
	p.SetState(1191)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOPTIONS_SYMBOL {
		{
			p.SetState(1190)
			p.Opt_options_list()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExport_model_statementContext is an interface to support dynamic dispatch.
type IExport_model_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EXPORT_SYMBOL() antlr.TerminalNode
	MODEL_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext
	With_connection_clause() IWith_connection_clauseContext
	Opt_options_list() IOpt_options_listContext

	// IsExport_model_statementContext differentiates from other interfaces.
	IsExport_model_statementContext()
}

type Export_model_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExport_model_statementContext() *Export_model_statementContext {
	var p = new(Export_model_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_export_model_statement
	return p
}

func InitEmptyExport_model_statementContext(p *Export_model_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_export_model_statement
}

func (*Export_model_statementContext) IsExport_model_statementContext() {}

func NewExport_model_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Export_model_statementContext {
	var p = new(Export_model_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_export_model_statement

	return p
}

func (s *Export_model_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Export_model_statementContext) EXPORT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXPORT_SYMBOL, 0)
}

func (s *Export_model_statementContext) MODEL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMODEL_SYMBOL, 0)
}

func (s *Export_model_statementContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Export_model_statementContext) With_connection_clause() IWith_connection_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_connection_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_connection_clauseContext)
}

func (s *Export_model_statementContext) Opt_options_list() IOpt_options_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_options_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_options_listContext)
}

func (s *Export_model_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Export_model_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Export_model_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterExport_model_statement(s)
	}
}

func (s *Export_model_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitExport_model_statement(s)
	}
}

func (s *Export_model_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitExport_model_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Export_model_statement() (localctx IExport_model_statementContext) {
	localctx = NewExport_model_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, GoogleSQLParserRULE_export_model_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1193)
		p.Match(GoogleSQLParserEXPORT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1194)
		p.Match(GoogleSQLParserMODEL_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1195)
		p.Path_expression()
	}
	p.SetState(1197)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserWITH_SYMBOL {
		{
			p.SetState(1196)
			p.With_connection_clause()
		}

	}
	p.SetState(1200)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOPTIONS_SYMBOL {
		{
			p.SetState(1199)
			p.Opt_options_list()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExport_data_statementContext is an interface to support dynamic dispatch.
type IExport_data_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Export_data_no_query() IExport_data_no_queryContext
	As_query() IAs_queryContext

	// IsExport_data_statementContext differentiates from other interfaces.
	IsExport_data_statementContext()
}

type Export_data_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExport_data_statementContext() *Export_data_statementContext {
	var p = new(Export_data_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_export_data_statement
	return p
}

func InitEmptyExport_data_statementContext(p *Export_data_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_export_data_statement
}

func (*Export_data_statementContext) IsExport_data_statementContext() {}

func NewExport_data_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Export_data_statementContext {
	var p = new(Export_data_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_export_data_statement

	return p
}

func (s *Export_data_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Export_data_statementContext) Export_data_no_query() IExport_data_no_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExport_data_no_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExport_data_no_queryContext)
}

func (s *Export_data_statementContext) As_query() IAs_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_queryContext)
}

func (s *Export_data_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Export_data_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Export_data_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterExport_data_statement(s)
	}
}

func (s *Export_data_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitExport_data_statement(s)
	}
}

func (s *Export_data_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitExport_data_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Export_data_statement() (localctx IExport_data_statementContext) {
	localctx = NewExport_data_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, GoogleSQLParserRULE_export_data_statement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1202)
		p.Export_data_no_query()
	}
	{
		p.SetState(1203)
		p.As_query()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExport_data_no_queryContext is an interface to support dynamic dispatch.
type IExport_data_no_queryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EXPORT_SYMBOL() antlr.TerminalNode
	DATA_SYMBOL() antlr.TerminalNode
	With_connection_clause() IWith_connection_clauseContext
	Opt_options_list() IOpt_options_listContext

	// IsExport_data_no_queryContext differentiates from other interfaces.
	IsExport_data_no_queryContext()
}

type Export_data_no_queryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExport_data_no_queryContext() *Export_data_no_queryContext {
	var p = new(Export_data_no_queryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_export_data_no_query
	return p
}

func InitEmptyExport_data_no_queryContext(p *Export_data_no_queryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_export_data_no_query
}

func (*Export_data_no_queryContext) IsExport_data_no_queryContext() {}

func NewExport_data_no_queryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Export_data_no_queryContext {
	var p = new(Export_data_no_queryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_export_data_no_query

	return p
}

func (s *Export_data_no_queryContext) GetParser() antlr.Parser { return s.parser }

func (s *Export_data_no_queryContext) EXPORT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXPORT_SYMBOL, 0)
}

func (s *Export_data_no_queryContext) DATA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDATA_SYMBOL, 0)
}

func (s *Export_data_no_queryContext) With_connection_clause() IWith_connection_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_connection_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_connection_clauseContext)
}

func (s *Export_data_no_queryContext) Opt_options_list() IOpt_options_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_options_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_options_listContext)
}

func (s *Export_data_no_queryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Export_data_no_queryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Export_data_no_queryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterExport_data_no_query(s)
	}
}

func (s *Export_data_no_queryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitExport_data_no_query(s)
	}
}

func (s *Export_data_no_queryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitExport_data_no_query(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Export_data_no_query() (localctx IExport_data_no_queryContext) {
	localctx = NewExport_data_no_queryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, GoogleSQLParserRULE_export_data_no_query)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1205)
		p.Match(GoogleSQLParserEXPORT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1206)
		p.Match(GoogleSQLParserDATA_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1208)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserWITH_SYMBOL {
		{
			p.SetState(1207)
			p.With_connection_clause()
		}

	}
	p.SetState(1211)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOPTIONS_SYMBOL {
		{
			p.SetState(1210)
			p.Opt_options_list()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExplain_statementContext is an interface to support dynamic dispatch.
type IExplain_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EXPLAIN_SYMBOL() antlr.TerminalNode
	Unterminated_sql_statement() IUnterminated_sql_statementContext

	// IsExplain_statementContext differentiates from other interfaces.
	IsExplain_statementContext()
}

type Explain_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExplain_statementContext() *Explain_statementContext {
	var p = new(Explain_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_explain_statement
	return p
}

func InitEmptyExplain_statementContext(p *Explain_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_explain_statement
}

func (*Explain_statementContext) IsExplain_statementContext() {}

func NewExplain_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Explain_statementContext {
	var p = new(Explain_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_explain_statement

	return p
}

func (s *Explain_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Explain_statementContext) EXPLAIN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXPLAIN_SYMBOL, 0)
}

func (s *Explain_statementContext) Unterminated_sql_statement() IUnterminated_sql_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnterminated_sql_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnterminated_sql_statementContext)
}

func (s *Explain_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Explain_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Explain_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterExplain_statement(s)
	}
}

func (s *Explain_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitExplain_statement(s)
	}
}

func (s *Explain_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitExplain_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Explain_statement() (localctx IExplain_statementContext) {
	localctx = NewExplain_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, GoogleSQLParserRULE_explain_statement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1213)
		p.Match(GoogleSQLParserEXPLAIN_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1214)
		p.Unterminated_sql_statement()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExecute_immediateContext is an interface to support dynamic dispatch.
type IExecute_immediateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EXECUTE_SYMBOL() antlr.TerminalNode
	IMMEDIATE_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	Opt_execute_into_clause() IOpt_execute_into_clauseContext
	Opt_execute_using_clause() IOpt_execute_using_clauseContext

	// IsExecute_immediateContext differentiates from other interfaces.
	IsExecute_immediateContext()
}

type Execute_immediateContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExecute_immediateContext() *Execute_immediateContext {
	var p = new(Execute_immediateContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_execute_immediate
	return p
}

func InitEmptyExecute_immediateContext(p *Execute_immediateContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_execute_immediate
}

func (*Execute_immediateContext) IsExecute_immediateContext() {}

func NewExecute_immediateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Execute_immediateContext {
	var p = new(Execute_immediateContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_execute_immediate

	return p
}

func (s *Execute_immediateContext) GetParser() antlr.Parser { return s.parser }

func (s *Execute_immediateContext) EXECUTE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXECUTE_SYMBOL, 0)
}

func (s *Execute_immediateContext) IMMEDIATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIMMEDIATE_SYMBOL, 0)
}

func (s *Execute_immediateContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Execute_immediateContext) Opt_execute_into_clause() IOpt_execute_into_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_execute_into_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_execute_into_clauseContext)
}

func (s *Execute_immediateContext) Opt_execute_using_clause() IOpt_execute_using_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_execute_using_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_execute_using_clauseContext)
}

func (s *Execute_immediateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Execute_immediateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Execute_immediateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterExecute_immediate(s)
	}
}

func (s *Execute_immediateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitExecute_immediate(s)
	}
}

func (s *Execute_immediateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitExecute_immediate(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Execute_immediate() (localctx IExecute_immediateContext) {
	localctx = NewExecute_immediateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, GoogleSQLParserRULE_execute_immediate)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1216)
		p.Match(GoogleSQLParserEXECUTE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1217)
		p.Match(GoogleSQLParserIMMEDIATE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1218)
		p.expression(0)
	}
	p.SetState(1220)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserINTO_SYMBOL {
		{
			p.SetState(1219)
			p.Opt_execute_into_clause()
		}

	}
	p.SetState(1223)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserUSING_SYMBOL {
		{
			p.SetState(1222)
			p.Opt_execute_using_clause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_execute_into_clauseContext is an interface to support dynamic dispatch.
type IOpt_execute_into_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	INTO_SYMBOL() antlr.TerminalNode
	Identifier_list() IIdentifier_listContext

	// IsOpt_execute_into_clauseContext differentiates from other interfaces.
	IsOpt_execute_into_clauseContext()
}

type Opt_execute_into_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_execute_into_clauseContext() *Opt_execute_into_clauseContext {
	var p = new(Opt_execute_into_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_execute_into_clause
	return p
}

func InitEmptyOpt_execute_into_clauseContext(p *Opt_execute_into_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_execute_into_clause
}

func (*Opt_execute_into_clauseContext) IsOpt_execute_into_clauseContext() {}

func NewOpt_execute_into_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_execute_into_clauseContext {
	var p = new(Opt_execute_into_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_execute_into_clause

	return p
}

func (s *Opt_execute_into_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_execute_into_clauseContext) INTO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINTO_SYMBOL, 0)
}

func (s *Opt_execute_into_clauseContext) Identifier_list() IIdentifier_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifier_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Opt_execute_into_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_execute_into_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_execute_into_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_execute_into_clause(s)
	}
}

func (s *Opt_execute_into_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_execute_into_clause(s)
	}
}

func (s *Opt_execute_into_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_execute_into_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_execute_into_clause() (localctx IOpt_execute_into_clauseContext) {
	localctx = NewOpt_execute_into_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, GoogleSQLParserRULE_opt_execute_into_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1225)
		p.Match(GoogleSQLParserINTO_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1226)
		p.Identifier_list()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_execute_using_clauseContext is an interface to support dynamic dispatch.
type IOpt_execute_using_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	USING_SYMBOL() antlr.TerminalNode
	Execute_using_argument_list() IExecute_using_argument_listContext

	// IsOpt_execute_using_clauseContext differentiates from other interfaces.
	IsOpt_execute_using_clauseContext()
}

type Opt_execute_using_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_execute_using_clauseContext() *Opt_execute_using_clauseContext {
	var p = new(Opt_execute_using_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_execute_using_clause
	return p
}

func InitEmptyOpt_execute_using_clauseContext(p *Opt_execute_using_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_execute_using_clause
}

func (*Opt_execute_using_clauseContext) IsOpt_execute_using_clauseContext() {}

func NewOpt_execute_using_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_execute_using_clauseContext {
	var p = new(Opt_execute_using_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_execute_using_clause

	return p
}

func (s *Opt_execute_using_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_execute_using_clauseContext) USING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUSING_SYMBOL, 0)
}

func (s *Opt_execute_using_clauseContext) Execute_using_argument_list() IExecute_using_argument_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExecute_using_argument_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExecute_using_argument_listContext)
}

func (s *Opt_execute_using_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_execute_using_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_execute_using_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_execute_using_clause(s)
	}
}

func (s *Opt_execute_using_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_execute_using_clause(s)
	}
}

func (s *Opt_execute_using_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_execute_using_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_execute_using_clause() (localctx IOpt_execute_using_clauseContext) {
	localctx = NewOpt_execute_using_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, GoogleSQLParserRULE_opt_execute_using_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1228)
		p.Match(GoogleSQLParserUSING_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1229)
		p.Execute_using_argument_list()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExecute_using_argument_listContext is an interface to support dynamic dispatch.
type IExecute_using_argument_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllExecute_using_argument() []IExecute_using_argumentContext
	Execute_using_argument(i int) IExecute_using_argumentContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsExecute_using_argument_listContext differentiates from other interfaces.
	IsExecute_using_argument_listContext()
}

type Execute_using_argument_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExecute_using_argument_listContext() *Execute_using_argument_listContext {
	var p = new(Execute_using_argument_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_execute_using_argument_list
	return p
}

func InitEmptyExecute_using_argument_listContext(p *Execute_using_argument_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_execute_using_argument_list
}

func (*Execute_using_argument_listContext) IsExecute_using_argument_listContext() {}

func NewExecute_using_argument_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Execute_using_argument_listContext {
	var p = new(Execute_using_argument_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_execute_using_argument_list

	return p
}

func (s *Execute_using_argument_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Execute_using_argument_listContext) AllExecute_using_argument() []IExecute_using_argumentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExecute_using_argumentContext); ok {
			len++
		}
	}

	tst := make([]IExecute_using_argumentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExecute_using_argumentContext); ok {
			tst[i] = t.(IExecute_using_argumentContext)
			i++
		}
	}

	return tst
}

func (s *Execute_using_argument_listContext) Execute_using_argument(i int) IExecute_using_argumentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExecute_using_argumentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExecute_using_argumentContext)
}

func (s *Execute_using_argument_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Execute_using_argument_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Execute_using_argument_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Execute_using_argument_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Execute_using_argument_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterExecute_using_argument_list(s)
	}
}

func (s *Execute_using_argument_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitExecute_using_argument_list(s)
	}
}

func (s *Execute_using_argument_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitExecute_using_argument_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Execute_using_argument_list() (localctx IExecute_using_argument_listContext) {
	localctx = NewExecute_using_argument_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, GoogleSQLParserRULE_execute_using_argument_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1231)
		p.Execute_using_argument()
	}
	p.SetState(1236)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(1232)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1233)
			p.Execute_using_argument()
		}

		p.SetState(1238)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExecute_using_argumentContext is an interface to support dynamic dispatch.
type IExecute_using_argumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	AS_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext

	// IsExecute_using_argumentContext differentiates from other interfaces.
	IsExecute_using_argumentContext()
}

type Execute_using_argumentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExecute_using_argumentContext() *Execute_using_argumentContext {
	var p = new(Execute_using_argumentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_execute_using_argument
	return p
}

func InitEmptyExecute_using_argumentContext(p *Execute_using_argumentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_execute_using_argument
}

func (*Execute_using_argumentContext) IsExecute_using_argumentContext() {}

func NewExecute_using_argumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Execute_using_argumentContext {
	var p = new(Execute_using_argumentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_execute_using_argument

	return p
}

func (s *Execute_using_argumentContext) GetParser() antlr.Parser { return s.parser }

func (s *Execute_using_argumentContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Execute_using_argumentContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Execute_using_argumentContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Execute_using_argumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Execute_using_argumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Execute_using_argumentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterExecute_using_argument(s)
	}
}

func (s *Execute_using_argumentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitExecute_using_argument(s)
	}
}

func (s *Execute_using_argumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitExecute_using_argument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Execute_using_argument() (localctx IExecute_using_argumentContext) {
	localctx = NewExecute_using_argumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, GoogleSQLParserRULE_execute_using_argument)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1239)
		p.expression(0)
	}
	p.SetState(1242)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAS_SYMBOL {
		{
			p.SetState(1240)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1241)
			p.Identifier()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDescribe_statementContext is an interface to support dynamic dispatch.
type IDescribe_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Describe_keyword() IDescribe_keywordContext
	Describe_info() IDescribe_infoContext

	// IsDescribe_statementContext differentiates from other interfaces.
	IsDescribe_statementContext()
}

type Describe_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribe_statementContext() *Describe_statementContext {
	var p = new(Describe_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_describe_statement
	return p
}

func InitEmptyDescribe_statementContext(p *Describe_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_describe_statement
}

func (*Describe_statementContext) IsDescribe_statementContext() {}

func NewDescribe_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Describe_statementContext {
	var p = new(Describe_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_describe_statement

	return p
}

func (s *Describe_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Describe_statementContext) Describe_keyword() IDescribe_keywordContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribe_keywordContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribe_keywordContext)
}

func (s *Describe_statementContext) Describe_info() IDescribe_infoContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescribe_infoContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescribe_infoContext)
}

func (s *Describe_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Describe_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Describe_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterDescribe_statement(s)
	}
}

func (s *Describe_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitDescribe_statement(s)
	}
}

func (s *Describe_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitDescribe_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Describe_statement() (localctx IDescribe_statementContext) {
	localctx = NewDescribe_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, GoogleSQLParserRULE_describe_statement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1244)
		p.Describe_keyword()
	}
	{
		p.SetState(1245)
		p.Describe_info()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDescribe_infoContext is an interface to support dynamic dispatch.
type IDescribe_infoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Maybe_slashed_or_dashed_path_expression() IMaybe_slashed_or_dashed_path_expressionContext
	Identifier() IIdentifierContext
	Opt_from_path_expression() IOpt_from_path_expressionContext

	// IsDescribe_infoContext differentiates from other interfaces.
	IsDescribe_infoContext()
}

type Describe_infoContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribe_infoContext() *Describe_infoContext {
	var p = new(Describe_infoContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_describe_info
	return p
}

func InitEmptyDescribe_infoContext(p *Describe_infoContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_describe_info
}

func (*Describe_infoContext) IsDescribe_infoContext() {}

func NewDescribe_infoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Describe_infoContext {
	var p = new(Describe_infoContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_describe_info

	return p
}

func (s *Describe_infoContext) GetParser() antlr.Parser { return s.parser }

func (s *Describe_infoContext) Maybe_slashed_or_dashed_path_expression() IMaybe_slashed_or_dashed_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMaybe_slashed_or_dashed_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMaybe_slashed_or_dashed_path_expressionContext)
}

func (s *Describe_infoContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Describe_infoContext) Opt_from_path_expression() IOpt_from_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_from_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_from_path_expressionContext)
}

func (s *Describe_infoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Describe_infoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Describe_infoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterDescribe_info(s)
	}
}

func (s *Describe_infoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitDescribe_info(s)
	}
}

func (s *Describe_infoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitDescribe_info(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Describe_info() (localctx IDescribe_infoContext) {
	localctx = NewDescribe_infoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, GoogleSQLParserRULE_describe_info)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1248)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 15, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1247)
			p.Identifier()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1250)
		p.Maybe_slashed_or_dashed_path_expression()
	}
	p.SetState(1252)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserFROM_SYMBOL {
		{
			p.SetState(1251)
			p.Opt_from_path_expression()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_from_path_expressionContext is an interface to support dynamic dispatch.
type IOpt_from_path_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FROM_SYMBOL() antlr.TerminalNode
	Maybe_slashed_or_dashed_path_expression() IMaybe_slashed_or_dashed_path_expressionContext

	// IsOpt_from_path_expressionContext differentiates from other interfaces.
	IsOpt_from_path_expressionContext()
}

type Opt_from_path_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_from_path_expressionContext() *Opt_from_path_expressionContext {
	var p = new(Opt_from_path_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_from_path_expression
	return p
}

func InitEmptyOpt_from_path_expressionContext(p *Opt_from_path_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_from_path_expression
}

func (*Opt_from_path_expressionContext) IsOpt_from_path_expressionContext() {}

func NewOpt_from_path_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_from_path_expressionContext {
	var p = new(Opt_from_path_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_from_path_expression

	return p
}

func (s *Opt_from_path_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_from_path_expressionContext) FROM_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFROM_SYMBOL, 0)
}

func (s *Opt_from_path_expressionContext) Maybe_slashed_or_dashed_path_expression() IMaybe_slashed_or_dashed_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMaybe_slashed_or_dashed_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMaybe_slashed_or_dashed_path_expressionContext)
}

func (s *Opt_from_path_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_from_path_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_from_path_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_from_path_expression(s)
	}
}

func (s *Opt_from_path_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_from_path_expression(s)
	}
}

func (s *Opt_from_path_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_from_path_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_from_path_expression() (localctx IOpt_from_path_expressionContext) {
	localctx = NewOpt_from_path_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, GoogleSQLParserRULE_opt_from_path_expression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1254)
		p.Match(GoogleSQLParserFROM_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1255)
		p.Maybe_slashed_or_dashed_path_expression()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDescribe_keywordContext is an interface to support dynamic dispatch.
type IDescribe_keywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DESCRIBE_SYMBOL() antlr.TerminalNode
	DESC_SYMBOL() antlr.TerminalNode

	// IsDescribe_keywordContext differentiates from other interfaces.
	IsDescribe_keywordContext()
}

type Describe_keywordContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribe_keywordContext() *Describe_keywordContext {
	var p = new(Describe_keywordContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_describe_keyword
	return p
}

func InitEmptyDescribe_keywordContext(p *Describe_keywordContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_describe_keyword
}

func (*Describe_keywordContext) IsDescribe_keywordContext() {}

func NewDescribe_keywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Describe_keywordContext {
	var p = new(Describe_keywordContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_describe_keyword

	return p
}

func (s *Describe_keywordContext) GetParser() antlr.Parser { return s.parser }

func (s *Describe_keywordContext) DESCRIBE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDESCRIBE_SYMBOL, 0)
}

func (s *Describe_keywordContext) DESC_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDESC_SYMBOL, 0)
}

func (s *Describe_keywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Describe_keywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Describe_keywordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterDescribe_keyword(s)
	}
}

func (s *Describe_keywordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitDescribe_keyword(s)
	}
}

func (s *Describe_keywordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitDescribe_keyword(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Describe_keyword() (localctx IDescribe_keywordContext) {
	localctx = NewDescribe_keywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, GoogleSQLParserRULE_describe_keyword)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1257)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserDESC_SYMBOL || _la == GoogleSQLParserDESCRIBE_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDefine_table_statementContext is an interface to support dynamic dispatch.
type IDefine_table_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DEFINE_SYMBOL() antlr.TerminalNode
	TABLE_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext
	Options_list() IOptions_listContext

	// IsDefine_table_statementContext differentiates from other interfaces.
	IsDefine_table_statementContext()
}

type Define_table_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefine_table_statementContext() *Define_table_statementContext {
	var p = new(Define_table_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_define_table_statement
	return p
}

func InitEmptyDefine_table_statementContext(p *Define_table_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_define_table_statement
}

func (*Define_table_statementContext) IsDefine_table_statementContext() {}

func NewDefine_table_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Define_table_statementContext {
	var p = new(Define_table_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_define_table_statement

	return p
}

func (s *Define_table_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Define_table_statementContext) DEFINE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDEFINE_SYMBOL, 0)
}

func (s *Define_table_statementContext) TABLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTABLE_SYMBOL, 0)
}

func (s *Define_table_statementContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Define_table_statementContext) Options_list() IOptions_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOptions_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOptions_listContext)
}

func (s *Define_table_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Define_table_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Define_table_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterDefine_table_statement(s)
	}
}

func (s *Define_table_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitDefine_table_statement(s)
	}
}

func (s *Define_table_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitDefine_table_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Define_table_statement() (localctx IDefine_table_statementContext) {
	localctx = NewDefine_table_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, GoogleSQLParserRULE_define_table_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1259)
		p.Match(GoogleSQLParserDEFINE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1260)
		p.Match(GoogleSQLParserTABLE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1261)
		p.Path_expression()
	}
	p.SetState(1263)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserLR_BRACKET_SYMBOL {
		{
			p.SetState(1262)
			p.Options_list()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_entity_statementContext is an interface to support dynamic dispatch.
type ICreate_entity_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CREATE_SYMBOL() antlr.TerminalNode
	Generic_entity_type() IGeneric_entity_typeContext
	Path_expression() IPath_expressionContext
	Opt_or_replace() IOpt_or_replaceContext
	Opt_if_not_exists() IOpt_if_not_existsContext
	Opt_options_list() IOpt_options_listContext
	Opt_generic_entity_body() IOpt_generic_entity_bodyContext

	// IsCreate_entity_statementContext differentiates from other interfaces.
	IsCreate_entity_statementContext()
}

type Create_entity_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_entity_statementContext() *Create_entity_statementContext {
	var p = new(Create_entity_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_entity_statement
	return p
}

func InitEmptyCreate_entity_statementContext(p *Create_entity_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_entity_statement
}

func (*Create_entity_statementContext) IsCreate_entity_statementContext() {}

func NewCreate_entity_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_entity_statementContext {
	var p = new(Create_entity_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_create_entity_statement

	return p
}

func (s *Create_entity_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_entity_statementContext) CREATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCREATE_SYMBOL, 0)
}

func (s *Create_entity_statementContext) Generic_entity_type() IGeneric_entity_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGeneric_entity_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGeneric_entity_typeContext)
}

func (s *Create_entity_statementContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Create_entity_statementContext) Opt_or_replace() IOpt_or_replaceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_or_replaceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_or_replaceContext)
}

func (s *Create_entity_statementContext) Opt_if_not_exists() IOpt_if_not_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_if_not_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_if_not_existsContext)
}

func (s *Create_entity_statementContext) Opt_options_list() IOpt_options_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_options_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_options_listContext)
}

func (s *Create_entity_statementContext) Opt_generic_entity_body() IOpt_generic_entity_bodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_generic_entity_bodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_generic_entity_bodyContext)
}

func (s *Create_entity_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_entity_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_entity_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCreate_entity_statement(s)
	}
}

func (s *Create_entity_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCreate_entity_statement(s)
	}
}

func (s *Create_entity_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCreate_entity_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Create_entity_statement() (localctx ICreate_entity_statementContext) {
	localctx = NewCreate_entity_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, GoogleSQLParserRULE_create_entity_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1265)
		p.Match(GoogleSQLParserCREATE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1267)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOR_SYMBOL {
		{
			p.SetState(1266)
			p.Opt_or_replace()
		}

	}
	{
		p.SetState(1269)
		p.Generic_entity_type()
	}
	p.SetState(1271)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserIF_SYMBOL {
		{
			p.SetState(1270)
			p.Opt_if_not_exists()
		}

	}
	{
		p.SetState(1273)
		p.Path_expression()
	}
	p.SetState(1275)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOPTIONS_SYMBOL {
		{
			p.SetState(1274)
			p.Opt_options_list()
		}

	}
	p.SetState(1278)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAS_SYMBOL {
		{
			p.SetState(1277)
			p.Opt_generic_entity_body()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_generic_entity_bodyContext is an interface to support dynamic dispatch.
type IOpt_generic_entity_bodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AS_SYMBOL() antlr.TerminalNode
	Generic_entity_body() IGeneric_entity_bodyContext

	// IsOpt_generic_entity_bodyContext differentiates from other interfaces.
	IsOpt_generic_entity_bodyContext()
}

type Opt_generic_entity_bodyContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_generic_entity_bodyContext() *Opt_generic_entity_bodyContext {
	var p = new(Opt_generic_entity_bodyContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_generic_entity_body
	return p
}

func InitEmptyOpt_generic_entity_bodyContext(p *Opt_generic_entity_bodyContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_generic_entity_body
}

func (*Opt_generic_entity_bodyContext) IsOpt_generic_entity_bodyContext() {}

func NewOpt_generic_entity_bodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_generic_entity_bodyContext {
	var p = new(Opt_generic_entity_bodyContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_generic_entity_body

	return p
}

func (s *Opt_generic_entity_bodyContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_generic_entity_bodyContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Opt_generic_entity_bodyContext) Generic_entity_body() IGeneric_entity_bodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGeneric_entity_bodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGeneric_entity_bodyContext)
}

func (s *Opt_generic_entity_bodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_generic_entity_bodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_generic_entity_bodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_generic_entity_body(s)
	}
}

func (s *Opt_generic_entity_bodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_generic_entity_body(s)
	}
}

func (s *Opt_generic_entity_bodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_generic_entity_body(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_generic_entity_body() (localctx IOpt_generic_entity_bodyContext) {
	localctx = NewOpt_generic_entity_bodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, GoogleSQLParserRULE_opt_generic_entity_body)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1280)
		p.Match(GoogleSQLParserAS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1281)
		p.Generic_entity_body()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_view_statementContext is an interface to support dynamic dispatch.
type ICreate_view_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CREATE_SYMBOL() antlr.TerminalNode
	VIEW_SYMBOL() antlr.TerminalNode
	Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext
	As_query() IAs_queryContext
	Opt_or_replace() IOpt_or_replaceContext
	Opt_create_scope() IOpt_create_scopeContext
	RECURSIVE_SYMBOL() antlr.TerminalNode
	Opt_if_not_exists() IOpt_if_not_existsContext
	Column_with_options_list() IColumn_with_options_listContext
	Opt_sql_security_clause() IOpt_sql_security_clauseContext
	Opt_options_list() IOpt_options_listContext
	MATERIALIZED_SYMBOL() antlr.TerminalNode
	AS_SYMBOL() antlr.TerminalNode
	Query_or_replica_source() IQuery_or_replica_sourceContext
	Partition_by_clause_prefix_no_hint() IPartition_by_clause_prefix_no_hintContext
	Cluster_by_clause_prefix_no_hint() ICluster_by_clause_prefix_no_hintContext
	APPROX_SYMBOL() antlr.TerminalNode

	// IsCreate_view_statementContext differentiates from other interfaces.
	IsCreate_view_statementContext()
}

type Create_view_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_view_statementContext() *Create_view_statementContext {
	var p = new(Create_view_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_view_statement
	return p
}

func InitEmptyCreate_view_statementContext(p *Create_view_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_view_statement
}

func (*Create_view_statementContext) IsCreate_view_statementContext() {}

func NewCreate_view_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_view_statementContext {
	var p = new(Create_view_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_create_view_statement

	return p
}

func (s *Create_view_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_view_statementContext) CREATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCREATE_SYMBOL, 0)
}

func (s *Create_view_statementContext) VIEW_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserVIEW_SYMBOL, 0)
}

func (s *Create_view_statementContext) Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMaybe_dashed_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMaybe_dashed_path_expressionContext)
}

func (s *Create_view_statementContext) As_query() IAs_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_queryContext)
}

func (s *Create_view_statementContext) Opt_or_replace() IOpt_or_replaceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_or_replaceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_or_replaceContext)
}

func (s *Create_view_statementContext) Opt_create_scope() IOpt_create_scopeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_create_scopeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_create_scopeContext)
}

func (s *Create_view_statementContext) RECURSIVE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRECURSIVE_SYMBOL, 0)
}

func (s *Create_view_statementContext) Opt_if_not_exists() IOpt_if_not_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_if_not_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_if_not_existsContext)
}

func (s *Create_view_statementContext) Column_with_options_list() IColumn_with_options_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_with_options_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_with_options_listContext)
}

func (s *Create_view_statementContext) Opt_sql_security_clause() IOpt_sql_security_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_sql_security_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_sql_security_clauseContext)
}

func (s *Create_view_statementContext) Opt_options_list() IOpt_options_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_options_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_options_listContext)
}

func (s *Create_view_statementContext) MATERIALIZED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMATERIALIZED_SYMBOL, 0)
}

func (s *Create_view_statementContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Create_view_statementContext) Query_or_replica_source() IQuery_or_replica_sourceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuery_or_replica_sourceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuery_or_replica_sourceContext)
}

func (s *Create_view_statementContext) Partition_by_clause_prefix_no_hint() IPartition_by_clause_prefix_no_hintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartition_by_clause_prefix_no_hintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartition_by_clause_prefix_no_hintContext)
}

func (s *Create_view_statementContext) Cluster_by_clause_prefix_no_hint() ICluster_by_clause_prefix_no_hintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICluster_by_clause_prefix_no_hintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICluster_by_clause_prefix_no_hintContext)
}

func (s *Create_view_statementContext) APPROX_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAPPROX_SYMBOL, 0)
}

func (s *Create_view_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_view_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_view_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCreate_view_statement(s)
	}
}

func (s *Create_view_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCreate_view_statement(s)
	}
}

func (s *Create_view_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCreate_view_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Create_view_statement() (localctx ICreate_view_statementContext) {
	localctx = NewCreate_view_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, GoogleSQLParserRULE_create_view_statement)
	var _la int

	p.SetState(1364)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 43, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1283)
			p.Match(GoogleSQLParserCREATE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1285)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserOR_SYMBOL {
			{
				p.SetState(1284)
				p.Opt_or_replace()
			}

		}
		p.SetState(1288)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if (int64((_la-224)) & ^0x3f) == 0 && ((int64(1)<<(_la-224))&105553116266529) != 0 {
			{
				p.SetState(1287)
				p.Opt_create_scope()
			}

		}
		p.SetState(1291)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserRECURSIVE_SYMBOL {
			{
				p.SetState(1290)
				p.Match(GoogleSQLParserRECURSIVE_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(1293)
			p.Match(GoogleSQLParserVIEW_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1295)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(1294)
				p.Opt_if_not_exists()
			}

		}
		{
			p.SetState(1297)
			p.Maybe_dashed_path_expression()
		}
		p.SetState(1299)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserLR_BRACKET_SYMBOL {
			{
				p.SetState(1298)
				p.Column_with_options_list()
			}

		}
		p.SetState(1302)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserSQL_SYMBOL {
			{
				p.SetState(1301)
				p.Opt_sql_security_clause()
			}

		}
		p.SetState(1305)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserOPTIONS_SYMBOL {
			{
				p.SetState(1304)
				p.Opt_options_list()
			}

		}
		{
			p.SetState(1307)
			p.As_query()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1309)
			p.Match(GoogleSQLParserCREATE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1311)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserOR_SYMBOL {
			{
				p.SetState(1310)
				p.Opt_or_replace()
			}

		}
		{
			p.SetState(1313)
			p.Match(GoogleSQLParserMATERIALIZED_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1315)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserRECURSIVE_SYMBOL {
			{
				p.SetState(1314)
				p.Match(GoogleSQLParserRECURSIVE_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(1317)
			p.Match(GoogleSQLParserVIEW_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1319)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(1318)
				p.Opt_if_not_exists()
			}

		}
		{
			p.SetState(1321)
			p.Maybe_dashed_path_expression()
		}
		p.SetState(1323)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserLR_BRACKET_SYMBOL {
			{
				p.SetState(1322)
				p.Column_with_options_list()
			}

		}
		p.SetState(1326)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserSQL_SYMBOL {
			{
				p.SetState(1325)
				p.Opt_sql_security_clause()
			}

		}
		p.SetState(1329)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserPARTITION_SYMBOL {
			{
				p.SetState(1328)
				p.Partition_by_clause_prefix_no_hint()
			}

		}
		p.SetState(1332)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserCLUSTER_SYMBOL {
			{
				p.SetState(1331)
				p.Cluster_by_clause_prefix_no_hint()
			}

		}
		p.SetState(1335)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserOPTIONS_SYMBOL {
			{
				p.SetState(1334)
				p.Opt_options_list()
			}

		}
		{
			p.SetState(1337)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1338)
			p.Query_or_replica_source()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1340)
			p.Match(GoogleSQLParserCREATE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1342)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserOR_SYMBOL {
			{
				p.SetState(1341)
				p.Opt_or_replace()
			}

		}
		{
			p.SetState(1344)
			p.Match(GoogleSQLParserAPPROX_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1346)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserRECURSIVE_SYMBOL {
			{
				p.SetState(1345)
				p.Match(GoogleSQLParserRECURSIVE_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(1348)
			p.Match(GoogleSQLParserVIEW_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1350)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(1349)
				p.Opt_if_not_exists()
			}

		}
		{
			p.SetState(1352)
			p.Maybe_dashed_path_expression()
		}
		p.SetState(1354)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserLR_BRACKET_SYMBOL {
			{
				p.SetState(1353)
				p.Column_with_options_list()
			}

		}
		p.SetState(1357)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserSQL_SYMBOL {
			{
				p.SetState(1356)
				p.Opt_sql_security_clause()
			}

		}
		p.SetState(1360)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserOPTIONS_SYMBOL {
			{
				p.SetState(1359)
				p.Opt_options_list()
			}

		}
		{
			p.SetState(1362)
			p.As_query()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQuery_or_replica_sourceContext is an interface to support dynamic dispatch.
type IQuery_or_replica_sourceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Query() IQueryContext
	REPLICA_SYMBOL() antlr.TerminalNode
	OF_SYMBOL() antlr.TerminalNode
	Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext

	// IsQuery_or_replica_sourceContext differentiates from other interfaces.
	IsQuery_or_replica_sourceContext()
}

type Query_or_replica_sourceContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuery_or_replica_sourceContext() *Query_or_replica_sourceContext {
	var p = new(Query_or_replica_sourceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_or_replica_source
	return p
}

func InitEmptyQuery_or_replica_sourceContext(p *Query_or_replica_sourceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_or_replica_source
}

func (*Query_or_replica_sourceContext) IsQuery_or_replica_sourceContext() {}

func NewQuery_or_replica_sourceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Query_or_replica_sourceContext {
	var p = new(Query_or_replica_sourceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_query_or_replica_source

	return p
}

func (s *Query_or_replica_sourceContext) GetParser() antlr.Parser { return s.parser }

func (s *Query_or_replica_sourceContext) Query() IQueryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQueryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *Query_or_replica_sourceContext) REPLICA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPLICA_SYMBOL, 0)
}

func (s *Query_or_replica_sourceContext) OF_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOF_SYMBOL, 0)
}

func (s *Query_or_replica_sourceContext) Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMaybe_dashed_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMaybe_dashed_path_expressionContext)
}

func (s *Query_or_replica_sourceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_or_replica_sourceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Query_or_replica_sourceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterQuery_or_replica_source(s)
	}
}

func (s *Query_or_replica_sourceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitQuery_or_replica_source(s)
	}
}

func (s *Query_or_replica_sourceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitQuery_or_replica_source(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Query_or_replica_source() (localctx IQuery_or_replica_sourceContext) {
	localctx = NewQuery_or_replica_sourceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, GoogleSQLParserRULE_query_or_replica_source)
	p.SetState(1370)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserLR_BRACKET_SYMBOL, GoogleSQLParserFROM_SYMBOL, GoogleSQLParserSELECT_SYMBOL, GoogleSQLParserWITH_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1366)
			p.Query()
		}

	case GoogleSQLParserREPLICA_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1367)
			p.Match(GoogleSQLParserREPLICA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1368)
			p.Match(GoogleSQLParserOF_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1369)
			p.Maybe_dashed_path_expression()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumn_with_options_listContext is an interface to support dynamic dispatch.
type IColumn_with_options_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllColumn_with_options() []IColumn_with_optionsContext
	Column_with_options(i int) IColumn_with_optionsContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsColumn_with_options_listContext differentiates from other interfaces.
	IsColumn_with_options_listContext()
}

type Column_with_options_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_with_options_listContext() *Column_with_options_listContext {
	var p = new(Column_with_options_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_column_with_options_list
	return p
}

func InitEmptyColumn_with_options_listContext(p *Column_with_options_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_column_with_options_list
}

func (*Column_with_options_listContext) IsColumn_with_options_listContext() {}

func NewColumn_with_options_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_with_options_listContext {
	var p = new(Column_with_options_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_column_with_options_list

	return p
}

func (s *Column_with_options_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_with_options_listContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Column_with_options_listContext) AllColumn_with_options() []IColumn_with_optionsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_with_optionsContext); ok {
			len++
		}
	}

	tst := make([]IColumn_with_optionsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_with_optionsContext); ok {
			tst[i] = t.(IColumn_with_optionsContext)
			i++
		}
	}

	return tst
}

func (s *Column_with_options_listContext) Column_with_options(i int) IColumn_with_optionsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_with_optionsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_with_optionsContext)
}

func (s *Column_with_options_listContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Column_with_options_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Column_with_options_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Column_with_options_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_with_options_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_with_options_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterColumn_with_options_list(s)
	}
}

func (s *Column_with_options_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitColumn_with_options_list(s)
	}
}

func (s *Column_with_options_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitColumn_with_options_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Column_with_options_list() (localctx IColumn_with_options_listContext) {
	localctx = NewColumn_with_options_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, GoogleSQLParserRULE_column_with_options_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1372)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1373)
		p.Column_with_options()
	}
	p.SetState(1378)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(1374)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1375)
			p.Column_with_options()
		}

		p.SetState(1380)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1381)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumn_with_optionsContext is an interface to support dynamic dispatch.
type IColumn_with_optionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	Opt_options_list() IOpt_options_listContext

	// IsColumn_with_optionsContext differentiates from other interfaces.
	IsColumn_with_optionsContext()
}

type Column_with_optionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_with_optionsContext() *Column_with_optionsContext {
	var p = new(Column_with_optionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_column_with_options
	return p
}

func InitEmptyColumn_with_optionsContext(p *Column_with_optionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_column_with_options
}

func (*Column_with_optionsContext) IsColumn_with_optionsContext() {}

func NewColumn_with_optionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_with_optionsContext {
	var p = new(Column_with_optionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_column_with_options

	return p
}

func (s *Column_with_optionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_with_optionsContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Column_with_optionsContext) Opt_options_list() IOpt_options_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_options_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_options_listContext)
}

func (s *Column_with_optionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_with_optionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_with_optionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterColumn_with_options(s)
	}
}

func (s *Column_with_optionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitColumn_with_options(s)
	}
}

func (s *Column_with_optionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitColumn_with_options(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Column_with_options() (localctx IColumn_with_optionsContext) {
	localctx = NewColumn_with_optionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, GoogleSQLParserRULE_column_with_options)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1383)
		p.Identifier()
	}
	p.SetState(1385)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOPTIONS_SYMBOL {
		{
			p.SetState(1384)
			p.Opt_options_list()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_table_statementContext is an interface to support dynamic dispatch.
type ICreate_table_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CREATE_SYMBOL() antlr.TerminalNode
	TABLE_SYMBOL() antlr.TerminalNode
	Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext
	Opt_or_replace() IOpt_or_replaceContext
	Opt_create_scope() IOpt_create_scopeContext
	Opt_if_not_exists() IOpt_if_not_existsContext
	Table_element_list() ITable_element_listContext
	Opt_spanner_table_options() IOpt_spanner_table_optionsContext
	Opt_like_path_expression() IOpt_like_path_expressionContext
	Opt_clone_table() IOpt_clone_tableContext
	Opt_copy_table() IOpt_copy_tableContext
	Opt_default_collate_clause() IOpt_default_collate_clauseContext
	Partition_by_clause_prefix_no_hint() IPartition_by_clause_prefix_no_hintContext
	Cluster_by_clause_prefix_no_hint() ICluster_by_clause_prefix_no_hintContext
	Opt_ttl_clause() IOpt_ttl_clauseContext
	With_connection_clause() IWith_connection_clauseContext
	Opt_options_list() IOpt_options_listContext
	As_query() IAs_queryContext

	// IsCreate_table_statementContext differentiates from other interfaces.
	IsCreate_table_statementContext()
}

type Create_table_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_table_statementContext() *Create_table_statementContext {
	var p = new(Create_table_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_table_statement
	return p
}

func InitEmptyCreate_table_statementContext(p *Create_table_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_table_statement
}

func (*Create_table_statementContext) IsCreate_table_statementContext() {}

func NewCreate_table_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_table_statementContext {
	var p = new(Create_table_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_create_table_statement

	return p
}

func (s *Create_table_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_table_statementContext) CREATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCREATE_SYMBOL, 0)
}

func (s *Create_table_statementContext) TABLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTABLE_SYMBOL, 0)
}

func (s *Create_table_statementContext) Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMaybe_dashed_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMaybe_dashed_path_expressionContext)
}

func (s *Create_table_statementContext) Opt_or_replace() IOpt_or_replaceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_or_replaceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_or_replaceContext)
}

func (s *Create_table_statementContext) Opt_create_scope() IOpt_create_scopeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_create_scopeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_create_scopeContext)
}

func (s *Create_table_statementContext) Opt_if_not_exists() IOpt_if_not_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_if_not_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_if_not_existsContext)
}

func (s *Create_table_statementContext) Table_element_list() ITable_element_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_element_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_element_listContext)
}

func (s *Create_table_statementContext) Opt_spanner_table_options() IOpt_spanner_table_optionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_spanner_table_optionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_spanner_table_optionsContext)
}

func (s *Create_table_statementContext) Opt_like_path_expression() IOpt_like_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_like_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_like_path_expressionContext)
}

func (s *Create_table_statementContext) Opt_clone_table() IOpt_clone_tableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_clone_tableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_clone_tableContext)
}

func (s *Create_table_statementContext) Opt_copy_table() IOpt_copy_tableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_copy_tableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_copy_tableContext)
}

func (s *Create_table_statementContext) Opt_default_collate_clause() IOpt_default_collate_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_default_collate_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_default_collate_clauseContext)
}

func (s *Create_table_statementContext) Partition_by_clause_prefix_no_hint() IPartition_by_clause_prefix_no_hintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartition_by_clause_prefix_no_hintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartition_by_clause_prefix_no_hintContext)
}

func (s *Create_table_statementContext) Cluster_by_clause_prefix_no_hint() ICluster_by_clause_prefix_no_hintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICluster_by_clause_prefix_no_hintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICluster_by_clause_prefix_no_hintContext)
}

func (s *Create_table_statementContext) Opt_ttl_clause() IOpt_ttl_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_ttl_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_ttl_clauseContext)
}

func (s *Create_table_statementContext) With_connection_clause() IWith_connection_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_connection_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_connection_clauseContext)
}

func (s *Create_table_statementContext) Opt_options_list() IOpt_options_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_options_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_options_listContext)
}

func (s *Create_table_statementContext) As_query() IAs_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_queryContext)
}

func (s *Create_table_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_table_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_table_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCreate_table_statement(s)
	}
}

func (s *Create_table_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCreate_table_statement(s)
	}
}

func (s *Create_table_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCreate_table_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Create_table_statement() (localctx ICreate_table_statementContext) {
	localctx = NewCreate_table_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, GoogleSQLParserRULE_create_table_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1387)
		p.Match(GoogleSQLParserCREATE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1389)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOR_SYMBOL {
		{
			p.SetState(1388)
			p.Opt_or_replace()
		}

	}
	p.SetState(1392)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-224)) & ^0x3f) == 0 && ((int64(1)<<(_la-224))&105553116266529) != 0 {
		{
			p.SetState(1391)
			p.Opt_create_scope()
		}

	}
	{
		p.SetState(1394)
		p.Match(GoogleSQLParserTABLE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1396)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserIF_SYMBOL {
		{
			p.SetState(1395)
			p.Opt_if_not_exists()
		}

	}
	{
		p.SetState(1398)
		p.Maybe_dashed_path_expression()
	}
	p.SetState(1400)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserLR_BRACKET_SYMBOL {
		{
			p.SetState(1399)
			p.Table_element_list()
		}

	}
	p.SetState(1403)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserPRIMARY_SYMBOL {
		{
			p.SetState(1402)
			p.Opt_spanner_table_options()
		}

	}
	p.SetState(1406)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserLIKE_SYMBOL {
		{
			p.SetState(1405)
			p.Opt_like_path_expression()
		}

	}
	p.SetState(1409)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserCLONE_SYMBOL {
		{
			p.SetState(1408)
			p.Opt_clone_table()
		}

	}
	p.SetState(1412)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserCOPY_SYMBOL {
		{
			p.SetState(1411)
			p.Opt_copy_table()
		}

	}
	p.SetState(1415)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserDEFAULT_SYMBOL {
		{
			p.SetState(1414)
			p.Opt_default_collate_clause()
		}

	}
	p.SetState(1418)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserPARTITION_SYMBOL {
		{
			p.SetState(1417)
			p.Partition_by_clause_prefix_no_hint()
		}

	}
	p.SetState(1421)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserCLUSTER_SYMBOL {
		{
			p.SetState(1420)
			p.Cluster_by_clause_prefix_no_hint()
		}

	}
	p.SetState(1424)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserROW_SYMBOL {
		{
			p.SetState(1423)
			p.Opt_ttl_clause()
		}

	}
	p.SetState(1427)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserWITH_SYMBOL {
		{
			p.SetState(1426)
			p.With_connection_clause()
		}

	}
	p.SetState(1430)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOPTIONS_SYMBOL {
		{
			p.SetState(1429)
			p.Opt_options_list()
		}

	}
	p.SetState(1433)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAS_SYMBOL {
		{
			p.SetState(1432)
			p.As_query()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_ttl_clauseContext is an interface to support dynamic dispatch.
type IOpt_ttl_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ROW_SYMBOL() antlr.TerminalNode
	DELETION_SYMBOL() antlr.TerminalNode
	POLICY_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsOpt_ttl_clauseContext differentiates from other interfaces.
	IsOpt_ttl_clauseContext()
}

type Opt_ttl_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_ttl_clauseContext() *Opt_ttl_clauseContext {
	var p = new(Opt_ttl_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_ttl_clause
	return p
}

func InitEmptyOpt_ttl_clauseContext(p *Opt_ttl_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_ttl_clause
}

func (*Opt_ttl_clauseContext) IsOpt_ttl_clauseContext() {}

func NewOpt_ttl_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_ttl_clauseContext {
	var p = new(Opt_ttl_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_ttl_clause

	return p
}

func (s *Opt_ttl_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_ttl_clauseContext) ROW_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserROW_SYMBOL, 0)
}

func (s *Opt_ttl_clauseContext) DELETION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDELETION_SYMBOL, 0)
}

func (s *Opt_ttl_clauseContext) POLICY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPOLICY_SYMBOL, 0)
}

func (s *Opt_ttl_clauseContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Opt_ttl_clauseContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Opt_ttl_clauseContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Opt_ttl_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_ttl_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_ttl_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_ttl_clause(s)
	}
}

func (s *Opt_ttl_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_ttl_clause(s)
	}
}

func (s *Opt_ttl_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_ttl_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_ttl_clause() (localctx IOpt_ttl_clauseContext) {
	localctx = NewOpt_ttl_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, GoogleSQLParserRULE_opt_ttl_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1435)
		p.Match(GoogleSQLParserROW_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1436)
		p.Match(GoogleSQLParserDELETION_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1437)
		p.Match(GoogleSQLParserPOLICY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1438)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1439)
		p.expression(0)
	}
	{
		p.SetState(1440)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_copy_tableContext is an interface to support dynamic dispatch.
type IOpt_copy_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	COPY_SYMBOL() antlr.TerminalNode
	Copy_data_source() ICopy_data_sourceContext

	// IsOpt_copy_tableContext differentiates from other interfaces.
	IsOpt_copy_tableContext()
}

type Opt_copy_tableContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_copy_tableContext() *Opt_copy_tableContext {
	var p = new(Opt_copy_tableContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_copy_table
	return p
}

func InitEmptyOpt_copy_tableContext(p *Opt_copy_tableContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_copy_table
}

func (*Opt_copy_tableContext) IsOpt_copy_tableContext() {}

func NewOpt_copy_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_copy_tableContext {
	var p = new(Opt_copy_tableContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_copy_table

	return p
}

func (s *Opt_copy_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_copy_tableContext) COPY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOPY_SYMBOL, 0)
}

func (s *Opt_copy_tableContext) Copy_data_source() ICopy_data_sourceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICopy_data_sourceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICopy_data_sourceContext)
}

func (s *Opt_copy_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_copy_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_copy_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_copy_table(s)
	}
}

func (s *Opt_copy_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_copy_table(s)
	}
}

func (s *Opt_copy_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_copy_table(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_copy_table() (localctx IOpt_copy_tableContext) {
	localctx = NewOpt_copy_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, GoogleSQLParserRULE_opt_copy_table)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1442)
		p.Match(GoogleSQLParserCOPY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1443)
		p.Copy_data_source()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICopy_data_sourceContext is an interface to support dynamic dispatch.
type ICopy_data_sourceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext
	Opt_at_system_time() IOpt_at_system_timeContext
	Where_clause() IWhere_clauseContext

	// IsCopy_data_sourceContext differentiates from other interfaces.
	IsCopy_data_sourceContext()
}

type Copy_data_sourceContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCopy_data_sourceContext() *Copy_data_sourceContext {
	var p = new(Copy_data_sourceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_copy_data_source
	return p
}

func InitEmptyCopy_data_sourceContext(p *Copy_data_sourceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_copy_data_source
}

func (*Copy_data_sourceContext) IsCopy_data_sourceContext() {}

func NewCopy_data_sourceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Copy_data_sourceContext {
	var p = new(Copy_data_sourceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_copy_data_source

	return p
}

func (s *Copy_data_sourceContext) GetParser() antlr.Parser { return s.parser }

func (s *Copy_data_sourceContext) Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMaybe_dashed_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMaybe_dashed_path_expressionContext)
}

func (s *Copy_data_sourceContext) Opt_at_system_time() IOpt_at_system_timeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_at_system_timeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_at_system_timeContext)
}

func (s *Copy_data_sourceContext) Where_clause() IWhere_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhere_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhere_clauseContext)
}

func (s *Copy_data_sourceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Copy_data_sourceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Copy_data_sourceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCopy_data_source(s)
	}
}

func (s *Copy_data_sourceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCopy_data_source(s)
	}
}

func (s *Copy_data_sourceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCopy_data_source(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Copy_data_source() (localctx ICopy_data_sourceContext) {
	localctx = NewCopy_data_sourceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, GoogleSQLParserRULE_copy_data_source)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1445)
		p.Maybe_dashed_path_expression()
	}
	p.SetState(1447)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserFOR_SYMBOL {
		{
			p.SetState(1446)
			p.Opt_at_system_time()
		}

	}
	p.SetState(1450)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserWHERE_SYMBOL {
		{
			p.SetState(1449)
			p.Where_clause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_clone_tableContext is an interface to support dynamic dispatch.
type IOpt_clone_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CLONE_SYMBOL() antlr.TerminalNode
	Clone_data_source() IClone_data_sourceContext

	// IsOpt_clone_tableContext differentiates from other interfaces.
	IsOpt_clone_tableContext()
}

type Opt_clone_tableContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_clone_tableContext() *Opt_clone_tableContext {
	var p = new(Opt_clone_tableContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_clone_table
	return p
}

func InitEmptyOpt_clone_tableContext(p *Opt_clone_tableContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_clone_table
}

func (*Opt_clone_tableContext) IsOpt_clone_tableContext() {}

func NewOpt_clone_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_clone_tableContext {
	var p = new(Opt_clone_tableContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_clone_table

	return p
}

func (s *Opt_clone_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_clone_tableContext) CLONE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCLONE_SYMBOL, 0)
}

func (s *Opt_clone_tableContext) Clone_data_source() IClone_data_sourceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClone_data_sourceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClone_data_sourceContext)
}

func (s *Opt_clone_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_clone_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_clone_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_clone_table(s)
	}
}

func (s *Opt_clone_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_clone_table(s)
	}
}

func (s *Opt_clone_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_clone_table(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_clone_table() (localctx IOpt_clone_tableContext) {
	localctx = NewOpt_clone_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, GoogleSQLParserRULE_opt_clone_table)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1452)
		p.Match(GoogleSQLParserCLONE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1453)
		p.Clone_data_source()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_spanner_table_optionsContext is an interface to support dynamic dispatch.
type IOpt_spanner_table_optionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Spanner_primary_key() ISpanner_primary_keyContext
	Opt_spanner_interleave_in_parent_clause() IOpt_spanner_interleave_in_parent_clauseContext

	// IsOpt_spanner_table_optionsContext differentiates from other interfaces.
	IsOpt_spanner_table_optionsContext()
}

type Opt_spanner_table_optionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_spanner_table_optionsContext() *Opt_spanner_table_optionsContext {
	var p = new(Opt_spanner_table_optionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_spanner_table_options
	return p
}

func InitEmptyOpt_spanner_table_optionsContext(p *Opt_spanner_table_optionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_spanner_table_options
}

func (*Opt_spanner_table_optionsContext) IsOpt_spanner_table_optionsContext() {}

func NewOpt_spanner_table_optionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_spanner_table_optionsContext {
	var p = new(Opt_spanner_table_optionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_spanner_table_options

	return p
}

func (s *Opt_spanner_table_optionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_spanner_table_optionsContext) Spanner_primary_key() ISpanner_primary_keyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISpanner_primary_keyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISpanner_primary_keyContext)
}

func (s *Opt_spanner_table_optionsContext) Opt_spanner_interleave_in_parent_clause() IOpt_spanner_interleave_in_parent_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_spanner_interleave_in_parent_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_spanner_interleave_in_parent_clauseContext)
}

func (s *Opt_spanner_table_optionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_spanner_table_optionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_spanner_table_optionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_spanner_table_options(s)
	}
}

func (s *Opt_spanner_table_optionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_spanner_table_options(s)
	}
}

func (s *Opt_spanner_table_optionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_spanner_table_options(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_spanner_table_options() (localctx IOpt_spanner_table_optionsContext) {
	localctx = NewOpt_spanner_table_optionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, GoogleSQLParserRULE_opt_spanner_table_options)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1455)
		p.Spanner_primary_key()
	}
	p.SetState(1457)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(1456)
			p.Opt_spanner_interleave_in_parent_clause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_spanner_interleave_in_parent_clauseContext is an interface to support dynamic dispatch.
type IOpt_spanner_interleave_in_parent_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	COMMA_SYMBOL() antlr.TerminalNode
	INTERLEAVE_SYMBOL() antlr.TerminalNode
	IN_SYMBOL() antlr.TerminalNode
	PARENT_SYMBOL() antlr.TerminalNode
	Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext
	Foreign_key_on_delete() IForeign_key_on_deleteContext

	// IsOpt_spanner_interleave_in_parent_clauseContext differentiates from other interfaces.
	IsOpt_spanner_interleave_in_parent_clauseContext()
}

type Opt_spanner_interleave_in_parent_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_spanner_interleave_in_parent_clauseContext() *Opt_spanner_interleave_in_parent_clauseContext {
	var p = new(Opt_spanner_interleave_in_parent_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_spanner_interleave_in_parent_clause
	return p
}

func InitEmptyOpt_spanner_interleave_in_parent_clauseContext(p *Opt_spanner_interleave_in_parent_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_spanner_interleave_in_parent_clause
}

func (*Opt_spanner_interleave_in_parent_clauseContext) IsOpt_spanner_interleave_in_parent_clauseContext() {
}

func NewOpt_spanner_interleave_in_parent_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_spanner_interleave_in_parent_clauseContext {
	var p = new(Opt_spanner_interleave_in_parent_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_spanner_interleave_in_parent_clause

	return p
}

func (s *Opt_spanner_interleave_in_parent_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_spanner_interleave_in_parent_clauseContext) COMMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, 0)
}

func (s *Opt_spanner_interleave_in_parent_clauseContext) INTERLEAVE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINTERLEAVE_SYMBOL, 0)
}

func (s *Opt_spanner_interleave_in_parent_clauseContext) IN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIN_SYMBOL, 0)
}

func (s *Opt_spanner_interleave_in_parent_clauseContext) PARENT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPARENT_SYMBOL, 0)
}

func (s *Opt_spanner_interleave_in_parent_clauseContext) Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMaybe_dashed_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMaybe_dashed_path_expressionContext)
}

func (s *Opt_spanner_interleave_in_parent_clauseContext) Foreign_key_on_delete() IForeign_key_on_deleteContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeign_key_on_deleteContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeign_key_on_deleteContext)
}

func (s *Opt_spanner_interleave_in_parent_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_spanner_interleave_in_parent_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_spanner_interleave_in_parent_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_spanner_interleave_in_parent_clause(s)
	}
}

func (s *Opt_spanner_interleave_in_parent_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_spanner_interleave_in_parent_clause(s)
	}
}

func (s *Opt_spanner_interleave_in_parent_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_spanner_interleave_in_parent_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_spanner_interleave_in_parent_clause() (localctx IOpt_spanner_interleave_in_parent_clauseContext) {
	localctx = NewOpt_spanner_interleave_in_parent_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, GoogleSQLParserRULE_opt_spanner_interleave_in_parent_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1459)
		p.Match(GoogleSQLParserCOMMA_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1460)
		p.Match(GoogleSQLParserINTERLEAVE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1461)
		p.Match(GoogleSQLParserIN_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1462)
		p.Match(GoogleSQLParserPARENT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1463)
		p.Maybe_dashed_path_expression()
	}
	{
		p.SetState(1464)
		p.Foreign_key_on_delete()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISpanner_primary_keyContext is an interface to support dynamic dispatch.
type ISpanner_primary_keyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PRIMARY_SYMBOL() antlr.TerminalNode
	KEY_SYMBOL() antlr.TerminalNode
	Primary_key_element_list() IPrimary_key_element_listContext

	// IsSpanner_primary_keyContext differentiates from other interfaces.
	IsSpanner_primary_keyContext()
}

type Spanner_primary_keyContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySpanner_primary_keyContext() *Spanner_primary_keyContext {
	var p = new(Spanner_primary_keyContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_spanner_primary_key
	return p
}

func InitEmptySpanner_primary_keyContext(p *Spanner_primary_keyContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_spanner_primary_key
}

func (*Spanner_primary_keyContext) IsSpanner_primary_keyContext() {}

func NewSpanner_primary_keyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Spanner_primary_keyContext {
	var p = new(Spanner_primary_keyContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_spanner_primary_key

	return p
}

func (s *Spanner_primary_keyContext) GetParser() antlr.Parser { return s.parser }

func (s *Spanner_primary_keyContext) PRIMARY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPRIMARY_SYMBOL, 0)
}

func (s *Spanner_primary_keyContext) KEY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserKEY_SYMBOL, 0)
}

func (s *Spanner_primary_keyContext) Primary_key_element_list() IPrimary_key_element_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimary_key_element_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimary_key_element_listContext)
}

func (s *Spanner_primary_keyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Spanner_primary_keyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Spanner_primary_keyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSpanner_primary_key(s)
	}
}

func (s *Spanner_primary_keyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSpanner_primary_key(s)
	}
}

func (s *Spanner_primary_keyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSpanner_primary_key(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Spanner_primary_key() (localctx ISpanner_primary_keyContext) {
	localctx = NewSpanner_primary_keyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, GoogleSQLParserRULE_spanner_primary_key)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1466)
		p.Match(GoogleSQLParserPRIMARY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1467)
		p.Match(GoogleSQLParserKEY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1468)
		p.Primary_key_element_list()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_table_function_statementContext is an interface to support dynamic dispatch.
type ICreate_table_function_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CREATE_SYMBOL() antlr.TerminalNode
	TABLE_SYMBOL() antlr.TerminalNode
	FUNCTION_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext
	Opt_or_replace() IOpt_or_replaceContext
	Opt_create_scope() IOpt_create_scopeContext
	Opt_if_not_exists() IOpt_if_not_existsContext
	Opt_function_parameters() IOpt_function_parametersContext
	Opt_returns() IOpt_returnsContext
	Opt_sql_security_clause() IOpt_sql_security_clauseContext
	Unordered_language_options() IUnordered_language_optionsContext
	Opt_as_query_or_string() IOpt_as_query_or_stringContext

	// IsCreate_table_function_statementContext differentiates from other interfaces.
	IsCreate_table_function_statementContext()
}

type Create_table_function_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_table_function_statementContext() *Create_table_function_statementContext {
	var p = new(Create_table_function_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_table_function_statement
	return p
}

func InitEmptyCreate_table_function_statementContext(p *Create_table_function_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_table_function_statement
}

func (*Create_table_function_statementContext) IsCreate_table_function_statementContext() {}

func NewCreate_table_function_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_table_function_statementContext {
	var p = new(Create_table_function_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_create_table_function_statement

	return p
}

func (s *Create_table_function_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_table_function_statementContext) CREATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCREATE_SYMBOL, 0)
}

func (s *Create_table_function_statementContext) TABLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTABLE_SYMBOL, 0)
}

func (s *Create_table_function_statementContext) FUNCTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFUNCTION_SYMBOL, 0)
}

func (s *Create_table_function_statementContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Create_table_function_statementContext) Opt_or_replace() IOpt_or_replaceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_or_replaceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_or_replaceContext)
}

func (s *Create_table_function_statementContext) Opt_create_scope() IOpt_create_scopeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_create_scopeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_create_scopeContext)
}

func (s *Create_table_function_statementContext) Opt_if_not_exists() IOpt_if_not_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_if_not_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_if_not_existsContext)
}

func (s *Create_table_function_statementContext) Opt_function_parameters() IOpt_function_parametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_function_parametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_function_parametersContext)
}

func (s *Create_table_function_statementContext) Opt_returns() IOpt_returnsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_returnsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_returnsContext)
}

func (s *Create_table_function_statementContext) Opt_sql_security_clause() IOpt_sql_security_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_sql_security_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_sql_security_clauseContext)
}

func (s *Create_table_function_statementContext) Unordered_language_options() IUnordered_language_optionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnordered_language_optionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnordered_language_optionsContext)
}

func (s *Create_table_function_statementContext) Opt_as_query_or_string() IOpt_as_query_or_stringContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_as_query_or_stringContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_as_query_or_stringContext)
}

func (s *Create_table_function_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_table_function_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_table_function_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCreate_table_function_statement(s)
	}
}

func (s *Create_table_function_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCreate_table_function_statement(s)
	}
}

func (s *Create_table_function_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCreate_table_function_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Create_table_function_statement() (localctx ICreate_table_function_statementContext) {
	localctx = NewCreate_table_function_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, GoogleSQLParserRULE_create_table_function_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1470)
		p.Match(GoogleSQLParserCREATE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1472)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOR_SYMBOL {
		{
			p.SetState(1471)
			p.Opt_or_replace()
		}

	}
	p.SetState(1475)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-224)) & ^0x3f) == 0 && ((int64(1)<<(_la-224))&105553116266529) != 0 {
		{
			p.SetState(1474)
			p.Opt_create_scope()
		}

	}
	{
		p.SetState(1477)
		p.Match(GoogleSQLParserTABLE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1478)
		p.Match(GoogleSQLParserFUNCTION_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1480)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserIF_SYMBOL {
		{
			p.SetState(1479)
			p.Opt_if_not_exists()
		}

	}
	{
		p.SetState(1482)
		p.Path_expression()
	}
	p.SetState(1484)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserLR_BRACKET_SYMBOL {
		{
			p.SetState(1483)
			p.Opt_function_parameters()
		}

	}
	p.SetState(1487)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserRETURNS_SYMBOL {
		{
			p.SetState(1486)
			p.Opt_returns()
		}

	}
	p.SetState(1490)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserSQL_SYMBOL {
		{
			p.SetState(1489)
			p.Opt_sql_security_clause()
		}

	}
	p.SetState(1493)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOPTIONS_SYMBOL || _la == GoogleSQLParserLANGUAGE_SYMBOL {
		{
			p.SetState(1492)
			p.Unordered_language_options()
		}

	}
	p.SetState(1496)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAS_SYMBOL {
		{
			p.SetState(1495)
			p.Opt_as_query_or_string()
		}

	}

	if localctx.Opt_function_parameters() == nil {
		p.NotifyErrorListeners("Syntax error: Expected (", nil, nil)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_as_query_or_stringContext is an interface to support dynamic dispatch.
type IOpt_as_query_or_stringContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	As_query() IAs_queryContext
	AS_SYMBOL() antlr.TerminalNode
	String_literal() IString_literalContext

	// IsOpt_as_query_or_stringContext differentiates from other interfaces.
	IsOpt_as_query_or_stringContext()
}

type Opt_as_query_or_stringContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_as_query_or_stringContext() *Opt_as_query_or_stringContext {
	var p = new(Opt_as_query_or_stringContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_as_query_or_string
	return p
}

func InitEmptyOpt_as_query_or_stringContext(p *Opt_as_query_or_stringContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_as_query_or_string
}

func (*Opt_as_query_or_stringContext) IsOpt_as_query_or_stringContext() {}

func NewOpt_as_query_or_stringContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_as_query_or_stringContext {
	var p = new(Opt_as_query_or_stringContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_as_query_or_string

	return p
}

func (s *Opt_as_query_or_stringContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_as_query_or_stringContext) As_query() IAs_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_queryContext)
}

func (s *Opt_as_query_or_stringContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Opt_as_query_or_stringContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Opt_as_query_or_stringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_as_query_or_stringContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_as_query_or_stringContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_as_query_or_string(s)
	}
}

func (s *Opt_as_query_or_stringContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_as_query_or_string(s)
	}
}

func (s *Opt_as_query_or_stringContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_as_query_or_string(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_as_query_or_string() (localctx IOpt_as_query_or_stringContext) {
	localctx = NewOpt_as_query_or_stringContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, GoogleSQLParserRULE_opt_as_query_or_string)
	p.SetState(1503)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 73, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1500)
			p.As_query()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1501)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1502)
			p.string_literal(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnordered_language_optionsContext is an interface to support dynamic dispatch.
type IUnordered_language_optionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Language() ILanguageContext
	Opt_options_list() IOpt_options_listContext

	// IsUnordered_language_optionsContext differentiates from other interfaces.
	IsUnordered_language_optionsContext()
}

type Unordered_language_optionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnordered_language_optionsContext() *Unordered_language_optionsContext {
	var p = new(Unordered_language_optionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unordered_language_options
	return p
}

func InitEmptyUnordered_language_optionsContext(p *Unordered_language_optionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unordered_language_options
}

func (*Unordered_language_optionsContext) IsUnordered_language_optionsContext() {}

func NewUnordered_language_optionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unordered_language_optionsContext {
	var p = new(Unordered_language_optionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_unordered_language_options

	return p
}

func (s *Unordered_language_optionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Unordered_language_optionsContext) Language() ILanguageContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILanguageContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILanguageContext)
}

func (s *Unordered_language_optionsContext) Opt_options_list() IOpt_options_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_options_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_options_listContext)
}

func (s *Unordered_language_optionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unordered_language_optionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unordered_language_optionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUnordered_language_options(s)
	}
}

func (s *Unordered_language_optionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUnordered_language_options(s)
	}
}

func (s *Unordered_language_optionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUnordered_language_options(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Unordered_language_options() (localctx IUnordered_language_optionsContext) {
	localctx = NewUnordered_language_optionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, GoogleSQLParserRULE_unordered_language_options)
	var _la int

	p.SetState(1513)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserLANGUAGE_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1505)
			p.Language()
		}
		p.SetState(1507)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserOPTIONS_SYMBOL {
			{
				p.SetState(1506)
				p.Opt_options_list()
			}

		}

	case GoogleSQLParserOPTIONS_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1509)
			p.Opt_options_list()
		}
		p.SetState(1511)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserLANGUAGE_SYMBOL {
			{
				p.SetState(1510)
				p.Language()
			}

		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_function_parametersContext is an interface to support dynamic dispatch.
type IOpt_function_parametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	AllFunction_parameter() []IFunction_parameterContext
	Function_parameter(i int) IFunction_parameterContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsOpt_function_parametersContext differentiates from other interfaces.
	IsOpt_function_parametersContext()
}

type Opt_function_parametersContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_function_parametersContext() *Opt_function_parametersContext {
	var p = new(Opt_function_parametersContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_function_parameters
	return p
}

func InitEmptyOpt_function_parametersContext(p *Opt_function_parametersContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_function_parameters
}

func (*Opt_function_parametersContext) IsOpt_function_parametersContext() {}

func NewOpt_function_parametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_function_parametersContext {
	var p = new(Opt_function_parametersContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_function_parameters

	return p
}

func (s *Opt_function_parametersContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_function_parametersContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Opt_function_parametersContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Opt_function_parametersContext) AllFunction_parameter() []IFunction_parameterContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFunction_parameterContext); ok {
			len++
		}
	}

	tst := make([]IFunction_parameterContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFunction_parameterContext); ok {
			tst[i] = t.(IFunction_parameterContext)
			i++
		}
	}

	return tst
}

func (s *Opt_function_parametersContext) Function_parameter(i int) IFunction_parameterContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunction_parameterContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunction_parameterContext)
}

func (s *Opt_function_parametersContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Opt_function_parametersContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Opt_function_parametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_function_parametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_function_parametersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_function_parameters(s)
	}
}

func (s *Opt_function_parametersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_function_parameters(s)
	}
}

func (s *Opt_function_parametersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_function_parameters(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_function_parameters() (localctx IOpt_function_parametersContext) {
	localctx = NewOpt_function_parametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, GoogleSQLParserRULE_opt_function_parameters)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1515)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1524)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64((_la-54)) & ^0x3f) == 0 && ((int64(1)<<(_la-54))&-254304519003570175) != 0) || ((int64((_la-118)) & ^0x3f) == 0 && ((int64(1)<<(_la-118))&-1) != 0) || ((int64((_la-182)) & ^0x3f) == 0 && ((int64(1)<<(_la-182))&-1) != 0) || ((int64((_la-246)) & ^0x3f) == 0 && ((int64(1)<<(_la-246))&140737488354815) != 0) || ((int64((_la-331)) & ^0x3f) == 0 && ((int64(1)<<(_la-331))&1044609) != 0) {
		{
			p.SetState(1516)
			p.Function_parameter()
		}
		p.SetState(1521)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == GoogleSQLParserCOMMA_SYMBOL {
			{
				p.SetState(1517)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1518)
				p.Function_parameter()
			}

			p.SetState(1523)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(1526)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_snapshot_statementContext is an interface to support dynamic dispatch.
type ICreate_snapshot_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CREATE_SYMBOL() antlr.TerminalNode
	SNAPSHOT_SYMBOL() antlr.TerminalNode
	Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext
	CLONE_SYMBOL() antlr.TerminalNode
	Clone_data_source() IClone_data_sourceContext
	TABLE_SYMBOL() antlr.TerminalNode
	Schema_object_kind() ISchema_object_kindContext
	Opt_or_replace() IOpt_or_replaceContext
	Opt_if_not_exists() IOpt_if_not_existsContext
	Opt_options_list() IOpt_options_listContext

	// IsCreate_snapshot_statementContext differentiates from other interfaces.
	IsCreate_snapshot_statementContext()
}

type Create_snapshot_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_snapshot_statementContext() *Create_snapshot_statementContext {
	var p = new(Create_snapshot_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_snapshot_statement
	return p
}

func InitEmptyCreate_snapshot_statementContext(p *Create_snapshot_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_snapshot_statement
}

func (*Create_snapshot_statementContext) IsCreate_snapshot_statementContext() {}

func NewCreate_snapshot_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_snapshot_statementContext {
	var p = new(Create_snapshot_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_create_snapshot_statement

	return p
}

func (s *Create_snapshot_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_snapshot_statementContext) CREATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCREATE_SYMBOL, 0)
}

func (s *Create_snapshot_statementContext) SNAPSHOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSNAPSHOT_SYMBOL, 0)
}

func (s *Create_snapshot_statementContext) Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMaybe_dashed_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMaybe_dashed_path_expressionContext)
}

func (s *Create_snapshot_statementContext) CLONE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCLONE_SYMBOL, 0)
}

func (s *Create_snapshot_statementContext) Clone_data_source() IClone_data_sourceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClone_data_sourceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClone_data_sourceContext)
}

func (s *Create_snapshot_statementContext) TABLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTABLE_SYMBOL, 0)
}

func (s *Create_snapshot_statementContext) Schema_object_kind() ISchema_object_kindContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_object_kindContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_object_kindContext)
}

func (s *Create_snapshot_statementContext) Opt_or_replace() IOpt_or_replaceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_or_replaceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_or_replaceContext)
}

func (s *Create_snapshot_statementContext) Opt_if_not_exists() IOpt_if_not_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_if_not_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_if_not_existsContext)
}

func (s *Create_snapshot_statementContext) Opt_options_list() IOpt_options_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_options_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_options_listContext)
}

func (s *Create_snapshot_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_snapshot_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_snapshot_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCreate_snapshot_statement(s)
	}
}

func (s *Create_snapshot_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCreate_snapshot_statement(s)
	}
}

func (s *Create_snapshot_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCreate_snapshot_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Create_snapshot_statement() (localctx ICreate_snapshot_statementContext) {
	localctx = NewCreate_snapshot_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, GoogleSQLParserRULE_create_snapshot_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1528)
		p.Match(GoogleSQLParserCREATE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1530)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOR_SYMBOL {
		{
			p.SetState(1529)
			p.Opt_or_replace()
		}

	}
	{
		p.SetState(1532)
		p.Match(GoogleSQLParserSNAPSHOT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1535)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserTABLE_SYMBOL:
		{
			p.SetState(1533)
			p.Match(GoogleSQLParserTABLE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserVIEW_SYMBOL:
		{
			p.SetState(1534)
			p.Schema_object_kind()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	p.SetState(1538)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserIF_SYMBOL {
		{
			p.SetState(1537)
			p.Opt_if_not_exists()
		}

	}
	{
		p.SetState(1540)
		p.Maybe_dashed_path_expression()
	}
	{
		p.SetState(1541)
		p.Match(GoogleSQLParserCLONE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1542)
		p.Clone_data_source()
	}
	p.SetState(1544)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOPTIONS_SYMBOL {
		{
			p.SetState(1543)
			p.Opt_options_list()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_external_schema_statementContext is an interface to support dynamic dispatch.
type ICreate_external_schema_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CREATE_SYMBOL() antlr.TerminalNode
	EXTERNAL_SYMBOL() antlr.TerminalNode
	SCHEMA_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext
	Opt_options_list() IOpt_options_listContext
	Opt_or_replace() IOpt_or_replaceContext
	Opt_create_scope() IOpt_create_scopeContext
	Opt_if_not_exists() IOpt_if_not_existsContext
	With_connection_clause() IWith_connection_clauseContext

	// IsCreate_external_schema_statementContext differentiates from other interfaces.
	IsCreate_external_schema_statementContext()
}

type Create_external_schema_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_external_schema_statementContext() *Create_external_schema_statementContext {
	var p = new(Create_external_schema_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_external_schema_statement
	return p
}

func InitEmptyCreate_external_schema_statementContext(p *Create_external_schema_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_external_schema_statement
}

func (*Create_external_schema_statementContext) IsCreate_external_schema_statementContext() {}

func NewCreate_external_schema_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_external_schema_statementContext {
	var p = new(Create_external_schema_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_create_external_schema_statement

	return p
}

func (s *Create_external_schema_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_external_schema_statementContext) CREATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCREATE_SYMBOL, 0)
}

func (s *Create_external_schema_statementContext) EXTERNAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXTERNAL_SYMBOL, 0)
}

func (s *Create_external_schema_statementContext) SCHEMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSCHEMA_SYMBOL, 0)
}

func (s *Create_external_schema_statementContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Create_external_schema_statementContext) Opt_options_list() IOpt_options_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_options_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_options_listContext)
}

func (s *Create_external_schema_statementContext) Opt_or_replace() IOpt_or_replaceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_or_replaceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_or_replaceContext)
}

func (s *Create_external_schema_statementContext) Opt_create_scope() IOpt_create_scopeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_create_scopeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_create_scopeContext)
}

func (s *Create_external_schema_statementContext) Opt_if_not_exists() IOpt_if_not_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_if_not_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_if_not_existsContext)
}

func (s *Create_external_schema_statementContext) With_connection_clause() IWith_connection_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_connection_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_connection_clauseContext)
}

func (s *Create_external_schema_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_external_schema_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_external_schema_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCreate_external_schema_statement(s)
	}
}

func (s *Create_external_schema_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCreate_external_schema_statement(s)
	}
}

func (s *Create_external_schema_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCreate_external_schema_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Create_external_schema_statement() (localctx ICreate_external_schema_statementContext) {
	localctx = NewCreate_external_schema_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, GoogleSQLParserRULE_create_external_schema_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1546)
		p.Match(GoogleSQLParserCREATE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1548)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOR_SYMBOL {
		{
			p.SetState(1547)
			p.Opt_or_replace()
		}

	}
	p.SetState(1551)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-224)) & ^0x3f) == 0 && ((int64(1)<<(_la-224))&105553116266529) != 0 {
		{
			p.SetState(1550)
			p.Opt_create_scope()
		}

	}
	{
		p.SetState(1553)
		p.Match(GoogleSQLParserEXTERNAL_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1554)
		p.Match(GoogleSQLParserSCHEMA_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1556)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserIF_SYMBOL {
		{
			p.SetState(1555)
			p.Opt_if_not_exists()
		}

	}
	{
		p.SetState(1558)
		p.Path_expression()
	}
	p.SetState(1560)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserWITH_SYMBOL {
		{
			p.SetState(1559)
			p.With_connection_clause()
		}

	}
	{
		p.SetState(1562)
		p.Opt_options_list()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_schema_statementContext is an interface to support dynamic dispatch.
type ICreate_schema_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CREATE_SYMBOL() antlr.TerminalNode
	SCHEMA_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext
	Opt_or_replace() IOpt_or_replaceContext
	Opt_if_not_exists() IOpt_if_not_existsContext
	Opt_default_collate_clause() IOpt_default_collate_clauseContext
	Opt_options_list() IOpt_options_listContext

	// IsCreate_schema_statementContext differentiates from other interfaces.
	IsCreate_schema_statementContext()
}

type Create_schema_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_schema_statementContext() *Create_schema_statementContext {
	var p = new(Create_schema_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_schema_statement
	return p
}

func InitEmptyCreate_schema_statementContext(p *Create_schema_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_schema_statement
}

func (*Create_schema_statementContext) IsCreate_schema_statementContext() {}

func NewCreate_schema_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_schema_statementContext {
	var p = new(Create_schema_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_create_schema_statement

	return p
}

func (s *Create_schema_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_schema_statementContext) CREATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCREATE_SYMBOL, 0)
}

func (s *Create_schema_statementContext) SCHEMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSCHEMA_SYMBOL, 0)
}

func (s *Create_schema_statementContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Create_schema_statementContext) Opt_or_replace() IOpt_or_replaceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_or_replaceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_or_replaceContext)
}

func (s *Create_schema_statementContext) Opt_if_not_exists() IOpt_if_not_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_if_not_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_if_not_existsContext)
}

func (s *Create_schema_statementContext) Opt_default_collate_clause() IOpt_default_collate_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_default_collate_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_default_collate_clauseContext)
}

func (s *Create_schema_statementContext) Opt_options_list() IOpt_options_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_options_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_options_listContext)
}

func (s *Create_schema_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_schema_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_schema_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCreate_schema_statement(s)
	}
}

func (s *Create_schema_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCreate_schema_statement(s)
	}
}

func (s *Create_schema_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCreate_schema_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Create_schema_statement() (localctx ICreate_schema_statementContext) {
	localctx = NewCreate_schema_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, GoogleSQLParserRULE_create_schema_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1564)
		p.Match(GoogleSQLParserCREATE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1566)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOR_SYMBOL {
		{
			p.SetState(1565)
			p.Opt_or_replace()
		}

	}
	{
		p.SetState(1568)
		p.Match(GoogleSQLParserSCHEMA_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1570)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserIF_SYMBOL {
		{
			p.SetState(1569)
			p.Opt_if_not_exists()
		}

	}
	{
		p.SetState(1572)
		p.Path_expression()
	}
	p.SetState(1574)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserDEFAULT_SYMBOL {
		{
			p.SetState(1573)
			p.Opt_default_collate_clause()
		}

	}
	p.SetState(1577)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOPTIONS_SYMBOL {
		{
			p.SetState(1576)
			p.Opt_options_list()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_property_graph_statementContext is an interface to support dynamic dispatch.
type ICreate_property_graph_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CREATE_SYMBOL() antlr.TerminalNode
	PROPERTY_SYMBOL() antlr.TerminalNode
	GRAPH_SYMBOL() antlr.TerminalNode
	Opt_if_not_exists() IOpt_if_not_existsContext
	Path_expression() IPath_expressionContext
	NODE_SYMBOL() antlr.TerminalNode
	TABLES_SYMBOL() antlr.TerminalNode
	Element_table_list() IElement_table_listContext
	Opt_or_replace() IOpt_or_replaceContext
	Opt_options_list() IOpt_options_listContext
	Opt_edge_table_clause() IOpt_edge_table_clauseContext

	// IsCreate_property_graph_statementContext differentiates from other interfaces.
	IsCreate_property_graph_statementContext()
}

type Create_property_graph_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_property_graph_statementContext() *Create_property_graph_statementContext {
	var p = new(Create_property_graph_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_property_graph_statement
	return p
}

func InitEmptyCreate_property_graph_statementContext(p *Create_property_graph_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_property_graph_statement
}

func (*Create_property_graph_statementContext) IsCreate_property_graph_statementContext() {}

func NewCreate_property_graph_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_property_graph_statementContext {
	var p = new(Create_property_graph_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_create_property_graph_statement

	return p
}

func (s *Create_property_graph_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_property_graph_statementContext) CREATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCREATE_SYMBOL, 0)
}

func (s *Create_property_graph_statementContext) PROPERTY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPROPERTY_SYMBOL, 0)
}

func (s *Create_property_graph_statementContext) GRAPH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGRAPH_SYMBOL, 0)
}

func (s *Create_property_graph_statementContext) Opt_if_not_exists() IOpt_if_not_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_if_not_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_if_not_existsContext)
}

func (s *Create_property_graph_statementContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Create_property_graph_statementContext) NODE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNODE_SYMBOL, 0)
}

func (s *Create_property_graph_statementContext) TABLES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTABLES_SYMBOL, 0)
}

func (s *Create_property_graph_statementContext) Element_table_list() IElement_table_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElement_table_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElement_table_listContext)
}

func (s *Create_property_graph_statementContext) Opt_or_replace() IOpt_or_replaceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_or_replaceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_or_replaceContext)
}

func (s *Create_property_graph_statementContext) Opt_options_list() IOpt_options_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_options_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_options_listContext)
}

func (s *Create_property_graph_statementContext) Opt_edge_table_clause() IOpt_edge_table_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_edge_table_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_edge_table_clauseContext)
}

func (s *Create_property_graph_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_property_graph_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_property_graph_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCreate_property_graph_statement(s)
	}
}

func (s *Create_property_graph_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCreate_property_graph_statement(s)
	}
}

func (s *Create_property_graph_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCreate_property_graph_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Create_property_graph_statement() (localctx ICreate_property_graph_statementContext) {
	localctx = NewCreate_property_graph_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, GoogleSQLParserRULE_create_property_graph_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1579)
		p.Match(GoogleSQLParserCREATE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1581)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOR_SYMBOL {
		{
			p.SetState(1580)
			p.Opt_or_replace()
		}

	}
	{
		p.SetState(1583)
		p.Match(GoogleSQLParserPROPERTY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1584)
		p.Match(GoogleSQLParserGRAPH_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1585)
		p.Opt_if_not_exists()
	}
	{
		p.SetState(1586)
		p.Path_expression()
	}
	p.SetState(1588)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOPTIONS_SYMBOL {
		{
			p.SetState(1587)
			p.Opt_options_list()
		}

	}
	{
		p.SetState(1590)
		p.Match(GoogleSQLParserNODE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1591)
		p.Match(GoogleSQLParserTABLES_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1592)
		p.Element_table_list()
	}
	p.SetState(1594)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserEDGE_SYMBOL {
		{
			p.SetState(1593)
			p.Opt_edge_table_clause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_edge_table_clauseContext is an interface to support dynamic dispatch.
type IOpt_edge_table_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EDGE_SYMBOL() antlr.TerminalNode
	TABLES_SYMBOL() antlr.TerminalNode
	Element_table_list() IElement_table_listContext

	// IsOpt_edge_table_clauseContext differentiates from other interfaces.
	IsOpt_edge_table_clauseContext()
}

type Opt_edge_table_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_edge_table_clauseContext() *Opt_edge_table_clauseContext {
	var p = new(Opt_edge_table_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_edge_table_clause
	return p
}

func InitEmptyOpt_edge_table_clauseContext(p *Opt_edge_table_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_edge_table_clause
}

func (*Opt_edge_table_clauseContext) IsOpt_edge_table_clauseContext() {}

func NewOpt_edge_table_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_edge_table_clauseContext {
	var p = new(Opt_edge_table_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_edge_table_clause

	return p
}

func (s *Opt_edge_table_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_edge_table_clauseContext) EDGE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEDGE_SYMBOL, 0)
}

func (s *Opt_edge_table_clauseContext) TABLES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTABLES_SYMBOL, 0)
}

func (s *Opt_edge_table_clauseContext) Element_table_list() IElement_table_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElement_table_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElement_table_listContext)
}

func (s *Opt_edge_table_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_edge_table_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_edge_table_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_edge_table_clause(s)
	}
}

func (s *Opt_edge_table_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_edge_table_clause(s)
	}
}

func (s *Opt_edge_table_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_edge_table_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_edge_table_clause() (localctx IOpt_edge_table_clauseContext) {
	localctx = NewOpt_edge_table_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, GoogleSQLParserRULE_opt_edge_table_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1596)
		p.Match(GoogleSQLParserEDGE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1597)
		p.Match(GoogleSQLParserTABLES_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1598)
		p.Element_table_list()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IElement_table_listContext is an interface to support dynamic dispatch.
type IElement_table_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllElement_table_definition() []IElement_table_definitionContext
	Element_table_definition(i int) IElement_table_definitionContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsElement_table_listContext differentiates from other interfaces.
	IsElement_table_listContext()
}

type Element_table_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElement_table_listContext() *Element_table_listContext {
	var p = new(Element_table_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_element_table_list
	return p
}

func InitEmptyElement_table_listContext(p *Element_table_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_element_table_list
}

func (*Element_table_listContext) IsElement_table_listContext() {}

func NewElement_table_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Element_table_listContext {
	var p = new(Element_table_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_element_table_list

	return p
}

func (s *Element_table_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Element_table_listContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Element_table_listContext) AllElement_table_definition() []IElement_table_definitionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IElement_table_definitionContext); ok {
			len++
		}
	}

	tst := make([]IElement_table_definitionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IElement_table_definitionContext); ok {
			tst[i] = t.(IElement_table_definitionContext)
			i++
		}
	}

	return tst
}

func (s *Element_table_listContext) Element_table_definition(i int) IElement_table_definitionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElement_table_definitionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElement_table_definitionContext)
}

func (s *Element_table_listContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Element_table_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Element_table_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Element_table_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Element_table_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Element_table_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterElement_table_list(s)
	}
}

func (s *Element_table_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitElement_table_list(s)
	}
}

func (s *Element_table_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitElement_table_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Element_table_list() (localctx IElement_table_listContext) {
	localctx = NewElement_table_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, GoogleSQLParserRULE_element_table_list)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1600)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1601)
		p.Element_table_definition()
	}
	p.SetState(1606)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 94, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1602)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1603)
				p.Element_table_definition()
			}

		}
		p.SetState(1608)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 94, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1610)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(1609)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1612)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IElement_table_definitionContext is an interface to support dynamic dispatch.
type IElement_table_definitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Path_expression() IPath_expressionContext
	Opt_as_alias_with_required_as() IOpt_as_alias_with_required_asContext
	Opt_key_clause() IOpt_key_clauseContext
	Opt_source_node_table_clause() IOpt_source_node_table_clauseContext
	Opt_dest_node_table_clause() IOpt_dest_node_table_clauseContext
	Opt_label_and_properties_clause() IOpt_label_and_properties_clauseContext

	// IsElement_table_definitionContext differentiates from other interfaces.
	IsElement_table_definitionContext()
}

type Element_table_definitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElement_table_definitionContext() *Element_table_definitionContext {
	var p = new(Element_table_definitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_element_table_definition
	return p
}

func InitEmptyElement_table_definitionContext(p *Element_table_definitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_element_table_definition
}

func (*Element_table_definitionContext) IsElement_table_definitionContext() {}

func NewElement_table_definitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Element_table_definitionContext {
	var p = new(Element_table_definitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_element_table_definition

	return p
}

func (s *Element_table_definitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Element_table_definitionContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Element_table_definitionContext) Opt_as_alias_with_required_as() IOpt_as_alias_with_required_asContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_as_alias_with_required_asContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_as_alias_with_required_asContext)
}

func (s *Element_table_definitionContext) Opt_key_clause() IOpt_key_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_key_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_key_clauseContext)
}

func (s *Element_table_definitionContext) Opt_source_node_table_clause() IOpt_source_node_table_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_source_node_table_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_source_node_table_clauseContext)
}

func (s *Element_table_definitionContext) Opt_dest_node_table_clause() IOpt_dest_node_table_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_dest_node_table_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_dest_node_table_clauseContext)
}

func (s *Element_table_definitionContext) Opt_label_and_properties_clause() IOpt_label_and_properties_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_label_and_properties_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_label_and_properties_clauseContext)
}

func (s *Element_table_definitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Element_table_definitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Element_table_definitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterElement_table_definition(s)
	}
}

func (s *Element_table_definitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitElement_table_definition(s)
	}
}

func (s *Element_table_definitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitElement_table_definition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Element_table_definition() (localctx IElement_table_definitionContext) {
	localctx = NewElement_table_definitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, GoogleSQLParserRULE_element_table_definition)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1614)
		p.Path_expression()
	}
	p.SetState(1616)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAS_SYMBOL {
		{
			p.SetState(1615)
			p.Opt_as_alias_with_required_as()
		}

	}
	p.SetState(1619)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserKEY_SYMBOL {
		{
			p.SetState(1618)
			p.Opt_key_clause()
		}

	}
	p.SetState(1622)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserSOURCE_SYMBOL {
		{
			p.SetState(1621)
			p.Opt_source_node_table_clause()
		}

	}
	p.SetState(1625)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserDESTINATION_SYMBOL {
		{
			p.SetState(1624)
			p.Opt_dest_node_table_clause()
		}

	}
	p.SetState(1628)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-322)) & ^0x3f) == 0 && ((int64(1)<<(_la-322))&100671489) != 0 {
		{
			p.SetState(1627)
			p.Opt_label_and_properties_clause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_label_and_properties_clauseContext is an interface to support dynamic dispatch.
type IOpt_label_and_properties_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Properties_clause() IProperties_clauseContext
	Label_and_properties_list() ILabel_and_properties_listContext

	// IsOpt_label_and_properties_clauseContext differentiates from other interfaces.
	IsOpt_label_and_properties_clauseContext()
}

type Opt_label_and_properties_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_label_and_properties_clauseContext() *Opt_label_and_properties_clauseContext {
	var p = new(Opt_label_and_properties_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_label_and_properties_clause
	return p
}

func InitEmptyOpt_label_and_properties_clauseContext(p *Opt_label_and_properties_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_label_and_properties_clause
}

func (*Opt_label_and_properties_clauseContext) IsOpt_label_and_properties_clauseContext() {}

func NewOpt_label_and_properties_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_label_and_properties_clauseContext {
	var p = new(Opt_label_and_properties_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_label_and_properties_clause

	return p
}

func (s *Opt_label_and_properties_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_label_and_properties_clauseContext) Properties_clause() IProperties_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProperties_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProperties_clauseContext)
}

func (s *Opt_label_and_properties_clauseContext) Label_and_properties_list() ILabel_and_properties_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabel_and_properties_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabel_and_properties_listContext)
}

func (s *Opt_label_and_properties_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_label_and_properties_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_label_and_properties_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_label_and_properties_clause(s)
	}
}

func (s *Opt_label_and_properties_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_label_and_properties_clause(s)
	}
}

func (s *Opt_label_and_properties_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_label_and_properties_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_label_and_properties_clause() (localctx IOpt_label_and_properties_clauseContext) {
	localctx = NewOpt_label_and_properties_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, GoogleSQLParserRULE_opt_label_and_properties_clause)
	p.SetState(1632)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserNO_SYMBOL, GoogleSQLParserPROPERTIES_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1630)
			p.Properties_clause()
		}

	case GoogleSQLParserDEFAULT_SYMBOL, GoogleSQLParserLABEL_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1631)
			p.Label_and_properties_list()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILabel_and_properties_listContext is an interface to support dynamic dispatch.
type ILabel_and_properties_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllLabel_and_properties() []ILabel_and_propertiesContext
	Label_and_properties(i int) ILabel_and_propertiesContext

	// IsLabel_and_properties_listContext differentiates from other interfaces.
	IsLabel_and_properties_listContext()
}

type Label_and_properties_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabel_and_properties_listContext() *Label_and_properties_listContext {
	var p = new(Label_and_properties_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_label_and_properties_list
	return p
}

func InitEmptyLabel_and_properties_listContext(p *Label_and_properties_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_label_and_properties_list
}

func (*Label_and_properties_listContext) IsLabel_and_properties_listContext() {}

func NewLabel_and_properties_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Label_and_properties_listContext {
	var p = new(Label_and_properties_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_label_and_properties_list

	return p
}

func (s *Label_and_properties_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Label_and_properties_listContext) AllLabel_and_properties() []ILabel_and_propertiesContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ILabel_and_propertiesContext); ok {
			len++
		}
	}

	tst := make([]ILabel_and_propertiesContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ILabel_and_propertiesContext); ok {
			tst[i] = t.(ILabel_and_propertiesContext)
			i++
		}
	}

	return tst
}

func (s *Label_and_properties_listContext) Label_and_properties(i int) ILabel_and_propertiesContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabel_and_propertiesContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabel_and_propertiesContext)
}

func (s *Label_and_properties_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Label_and_properties_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Label_and_properties_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterLabel_and_properties_list(s)
	}
}

func (s *Label_and_properties_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitLabel_and_properties_list(s)
	}
}

func (s *Label_and_properties_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitLabel_and_properties_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Label_and_properties_list() (localctx ILabel_and_properties_listContext) {
	localctx = NewLabel_and_properties_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, GoogleSQLParserRULE_label_and_properties_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1635)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == GoogleSQLParserDEFAULT_SYMBOL || _la == GoogleSQLParserLABEL_SYMBOL {
		{
			p.SetState(1634)
			p.Label_and_properties()
		}

		p.SetState(1637)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILabel_and_propertiesContext is an interface to support dynamic dispatch.
type ILabel_and_propertiesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LABEL_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext
	DEFAULT_SYMBOL() antlr.TerminalNode
	Properties_clause() IProperties_clauseContext

	// IsLabel_and_propertiesContext differentiates from other interfaces.
	IsLabel_and_propertiesContext()
}

type Label_and_propertiesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabel_and_propertiesContext() *Label_and_propertiesContext {
	var p = new(Label_and_propertiesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_label_and_properties
	return p
}

func InitEmptyLabel_and_propertiesContext(p *Label_and_propertiesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_label_and_properties
}

func (*Label_and_propertiesContext) IsLabel_and_propertiesContext() {}

func NewLabel_and_propertiesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Label_and_propertiesContext {
	var p = new(Label_and_propertiesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_label_and_properties

	return p
}

func (s *Label_and_propertiesContext) GetParser() antlr.Parser { return s.parser }

func (s *Label_and_propertiesContext) LABEL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLABEL_SYMBOL, 0)
}

func (s *Label_and_propertiesContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Label_and_propertiesContext) DEFAULT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDEFAULT_SYMBOL, 0)
}

func (s *Label_and_propertiesContext) Properties_clause() IProperties_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProperties_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProperties_clauseContext)
}

func (s *Label_and_propertiesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Label_and_propertiesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Label_and_propertiesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterLabel_and_properties(s)
	}
}

func (s *Label_and_propertiesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitLabel_and_properties(s)
	}
}

func (s *Label_and_propertiesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitLabel_and_properties(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Label_and_properties() (localctx ILabel_and_propertiesContext) {
	localctx = NewLabel_and_propertiesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, GoogleSQLParserRULE_label_and_properties)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1640)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserDEFAULT_SYMBOL {
		{
			p.SetState(1639)
			p.Match(GoogleSQLParserDEFAULT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1642)
		p.Match(GoogleSQLParserLABEL_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1643)
		p.Identifier()
	}
	p.SetState(1645)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserNO_SYMBOL || _la == GoogleSQLParserPROPERTIES_SYMBOL {
		{
			p.SetState(1644)
			p.Properties_clause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IProperties_clauseContext is an interface to support dynamic dispatch.
type IProperties_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NO_SYMBOL() antlr.TerminalNode
	PROPERTIES_SYMBOL() antlr.TerminalNode
	Properties_all_columns() IProperties_all_columnsContext
	Opt_except_column_list() IOpt_except_column_listContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Derived_property_list() IDerived_property_listContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsProperties_clauseContext differentiates from other interfaces.
	IsProperties_clauseContext()
}

type Properties_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProperties_clauseContext() *Properties_clauseContext {
	var p = new(Properties_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_properties_clause
	return p
}

func InitEmptyProperties_clauseContext(p *Properties_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_properties_clause
}

func (*Properties_clauseContext) IsProperties_clauseContext() {}

func NewProperties_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Properties_clauseContext {
	var p = new(Properties_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_properties_clause

	return p
}

func (s *Properties_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Properties_clauseContext) NO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNO_SYMBOL, 0)
}

func (s *Properties_clauseContext) PROPERTIES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPROPERTIES_SYMBOL, 0)
}

func (s *Properties_clauseContext) Properties_all_columns() IProperties_all_columnsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProperties_all_columnsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProperties_all_columnsContext)
}

func (s *Properties_clauseContext) Opt_except_column_list() IOpt_except_column_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_except_column_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_except_column_listContext)
}

func (s *Properties_clauseContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Properties_clauseContext) Derived_property_list() IDerived_property_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDerived_property_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDerived_property_listContext)
}

func (s *Properties_clauseContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Properties_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Properties_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Properties_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterProperties_clause(s)
	}
}

func (s *Properties_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitProperties_clause(s)
	}
}

func (s *Properties_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitProperties_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Properties_clause() (localctx IProperties_clauseContext) {
	localctx = NewProperties_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, GoogleSQLParserRULE_properties_clause)
	var _la int

	p.SetState(1658)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 106, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1647)
			p.Match(GoogleSQLParserNO_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1648)
			p.Match(GoogleSQLParserPROPERTIES_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1649)
			p.Properties_all_columns()
		}
		p.SetState(1651)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserEXCEPT_SYMBOL {
			{
				p.SetState(1650)
				p.Opt_except_column_list()
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1653)
			p.Match(GoogleSQLParserPROPERTIES_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1654)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1655)
			p.Derived_property_list()
		}
		{
			p.SetState(1656)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDerived_property_listContext is an interface to support dynamic dispatch.
type IDerived_property_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllDerived_property() []IDerived_propertyContext
	Derived_property(i int) IDerived_propertyContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsDerived_property_listContext differentiates from other interfaces.
	IsDerived_property_listContext()
}

type Derived_property_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDerived_property_listContext() *Derived_property_listContext {
	var p = new(Derived_property_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_derived_property_list
	return p
}

func InitEmptyDerived_property_listContext(p *Derived_property_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_derived_property_list
}

func (*Derived_property_listContext) IsDerived_property_listContext() {}

func NewDerived_property_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Derived_property_listContext {
	var p = new(Derived_property_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_derived_property_list

	return p
}

func (s *Derived_property_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Derived_property_listContext) AllDerived_property() []IDerived_propertyContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDerived_propertyContext); ok {
			len++
		}
	}

	tst := make([]IDerived_propertyContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDerived_propertyContext); ok {
			tst[i] = t.(IDerived_propertyContext)
			i++
		}
	}

	return tst
}

func (s *Derived_property_listContext) Derived_property(i int) IDerived_propertyContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDerived_propertyContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDerived_propertyContext)
}

func (s *Derived_property_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Derived_property_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Derived_property_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Derived_property_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Derived_property_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterDerived_property_list(s)
	}
}

func (s *Derived_property_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitDerived_property_list(s)
	}
}

func (s *Derived_property_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitDerived_property_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Derived_property_list() (localctx IDerived_property_listContext) {
	localctx = NewDerived_property_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, GoogleSQLParserRULE_derived_property_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1660)
		p.Derived_property()
	}
	p.SetState(1665)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(1661)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1662)
			p.Derived_property()
		}

		p.SetState(1667)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDerived_propertyContext is an interface to support dynamic dispatch.
type IDerived_propertyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	Opt_as_alias_with_required_as() IOpt_as_alias_with_required_asContext

	// IsDerived_propertyContext differentiates from other interfaces.
	IsDerived_propertyContext()
}

type Derived_propertyContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDerived_propertyContext() *Derived_propertyContext {
	var p = new(Derived_propertyContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_derived_property
	return p
}

func InitEmptyDerived_propertyContext(p *Derived_propertyContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_derived_property
}

func (*Derived_propertyContext) IsDerived_propertyContext() {}

func NewDerived_propertyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Derived_propertyContext {
	var p = new(Derived_propertyContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_derived_property

	return p
}

func (s *Derived_propertyContext) GetParser() antlr.Parser { return s.parser }

func (s *Derived_propertyContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Derived_propertyContext) Opt_as_alias_with_required_as() IOpt_as_alias_with_required_asContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_as_alias_with_required_asContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_as_alias_with_required_asContext)
}

func (s *Derived_propertyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Derived_propertyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Derived_propertyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterDerived_property(s)
	}
}

func (s *Derived_propertyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitDerived_property(s)
	}
}

func (s *Derived_propertyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitDerived_property(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Derived_property() (localctx IDerived_propertyContext) {
	localctx = NewDerived_propertyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, GoogleSQLParserRULE_derived_property)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1668)
		p.expression(0)
	}
	p.SetState(1670)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAS_SYMBOL {
		{
			p.SetState(1669)
			p.Opt_as_alias_with_required_as()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_except_column_listContext is an interface to support dynamic dispatch.
type IOpt_except_column_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EXCEPT_SYMBOL() antlr.TerminalNode
	Column_list() IColumn_listContext

	// IsOpt_except_column_listContext differentiates from other interfaces.
	IsOpt_except_column_listContext()
}

type Opt_except_column_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_except_column_listContext() *Opt_except_column_listContext {
	var p = new(Opt_except_column_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_except_column_list
	return p
}

func InitEmptyOpt_except_column_listContext(p *Opt_except_column_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_except_column_list
}

func (*Opt_except_column_listContext) IsOpt_except_column_listContext() {}

func NewOpt_except_column_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_except_column_listContext {
	var p = new(Opt_except_column_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_except_column_list

	return p
}

func (s *Opt_except_column_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_except_column_listContext) EXCEPT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXCEPT_SYMBOL, 0)
}

func (s *Opt_except_column_listContext) Column_list() IColumn_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_listContext)
}

func (s *Opt_except_column_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_except_column_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_except_column_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_except_column_list(s)
	}
}

func (s *Opt_except_column_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_except_column_list(s)
	}
}

func (s *Opt_except_column_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_except_column_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_except_column_list() (localctx IOpt_except_column_listContext) {
	localctx = NewOpt_except_column_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, GoogleSQLParserRULE_opt_except_column_list)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1672)
		p.Match(GoogleSQLParserEXCEPT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1673)
		p.Column_list()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IProperties_all_columnsContext is an interface to support dynamic dispatch.
type IProperties_all_columnsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PROPERTIES_SYMBOL() antlr.TerminalNode
	ALL_SYMBOL() antlr.TerminalNode
	COLUMNS_SYMBOL() antlr.TerminalNode
	ARE_SYMBOL() antlr.TerminalNode

	// IsProperties_all_columnsContext differentiates from other interfaces.
	IsProperties_all_columnsContext()
}

type Properties_all_columnsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProperties_all_columnsContext() *Properties_all_columnsContext {
	var p = new(Properties_all_columnsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_properties_all_columns
	return p
}

func InitEmptyProperties_all_columnsContext(p *Properties_all_columnsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_properties_all_columns
}

func (*Properties_all_columnsContext) IsProperties_all_columnsContext() {}

func NewProperties_all_columnsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Properties_all_columnsContext {
	var p = new(Properties_all_columnsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_properties_all_columns

	return p
}

func (s *Properties_all_columnsContext) GetParser() antlr.Parser { return s.parser }

func (s *Properties_all_columnsContext) PROPERTIES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPROPERTIES_SYMBOL, 0)
}

func (s *Properties_all_columnsContext) ALL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserALL_SYMBOL, 0)
}

func (s *Properties_all_columnsContext) COLUMNS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOLUMNS_SYMBOL, 0)
}

func (s *Properties_all_columnsContext) ARE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserARE_SYMBOL, 0)
}

func (s *Properties_all_columnsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Properties_all_columnsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Properties_all_columnsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterProperties_all_columns(s)
	}
}

func (s *Properties_all_columnsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitProperties_all_columns(s)
	}
}

func (s *Properties_all_columnsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitProperties_all_columns(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Properties_all_columns() (localctx IProperties_all_columnsContext) {
	localctx = NewProperties_all_columnsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, GoogleSQLParserRULE_properties_all_columns)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1675)
		p.Match(GoogleSQLParserPROPERTIES_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1677)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserARE_SYMBOL {
		{
			p.SetState(1676)
			p.Match(GoogleSQLParserARE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1679)
		p.Match(GoogleSQLParserALL_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1680)
		p.Match(GoogleSQLParserCOLUMNS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_dest_node_table_clauseContext is an interface to support dynamic dispatch.
type IOpt_dest_node_table_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DESTINATION_SYMBOL() antlr.TerminalNode
	KEY_SYMBOL() antlr.TerminalNode
	AllColumn_list() []IColumn_listContext
	Column_list(i int) IColumn_listContext
	REFERENCES_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext

	// IsOpt_dest_node_table_clauseContext differentiates from other interfaces.
	IsOpt_dest_node_table_clauseContext()
}

type Opt_dest_node_table_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_dest_node_table_clauseContext() *Opt_dest_node_table_clauseContext {
	var p = new(Opt_dest_node_table_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_dest_node_table_clause
	return p
}

func InitEmptyOpt_dest_node_table_clauseContext(p *Opt_dest_node_table_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_dest_node_table_clause
}

func (*Opt_dest_node_table_clauseContext) IsOpt_dest_node_table_clauseContext() {}

func NewOpt_dest_node_table_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_dest_node_table_clauseContext {
	var p = new(Opt_dest_node_table_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_dest_node_table_clause

	return p
}

func (s *Opt_dest_node_table_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_dest_node_table_clauseContext) DESTINATION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDESTINATION_SYMBOL, 0)
}

func (s *Opt_dest_node_table_clauseContext) KEY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserKEY_SYMBOL, 0)
}

func (s *Opt_dest_node_table_clauseContext) AllColumn_list() []IColumn_listContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_listContext); ok {
			len++
		}
	}

	tst := make([]IColumn_listContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_listContext); ok {
			tst[i] = t.(IColumn_listContext)
			i++
		}
	}

	return tst
}

func (s *Opt_dest_node_table_clauseContext) Column_list(i int) IColumn_listContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_listContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_listContext)
}

func (s *Opt_dest_node_table_clauseContext) REFERENCES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREFERENCES_SYMBOL, 0)
}

func (s *Opt_dest_node_table_clauseContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Opt_dest_node_table_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_dest_node_table_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_dest_node_table_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_dest_node_table_clause(s)
	}
}

func (s *Opt_dest_node_table_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_dest_node_table_clause(s)
	}
}

func (s *Opt_dest_node_table_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_dest_node_table_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_dest_node_table_clause() (localctx IOpt_dest_node_table_clauseContext) {
	localctx = NewOpt_dest_node_table_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, GoogleSQLParserRULE_opt_dest_node_table_clause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1682)
		p.Match(GoogleSQLParserDESTINATION_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1683)
		p.Match(GoogleSQLParserKEY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1684)
		p.Column_list()
	}
	{
		p.SetState(1685)
		p.Match(GoogleSQLParserREFERENCES_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1686)
		p.Identifier()
	}
	p.SetState(1688)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserLR_BRACKET_SYMBOL {
		{
			p.SetState(1687)
			p.Column_list()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_source_node_table_clauseContext is an interface to support dynamic dispatch.
type IOpt_source_node_table_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SOURCE_SYMBOL() antlr.TerminalNode
	KEY_SYMBOL() antlr.TerminalNode
	AllColumn_list() []IColumn_listContext
	Column_list(i int) IColumn_listContext
	REFERENCES_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext

	// IsOpt_source_node_table_clauseContext differentiates from other interfaces.
	IsOpt_source_node_table_clauseContext()
}

type Opt_source_node_table_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_source_node_table_clauseContext() *Opt_source_node_table_clauseContext {
	var p = new(Opt_source_node_table_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_source_node_table_clause
	return p
}

func InitEmptyOpt_source_node_table_clauseContext(p *Opt_source_node_table_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_source_node_table_clause
}

func (*Opt_source_node_table_clauseContext) IsOpt_source_node_table_clauseContext() {}

func NewOpt_source_node_table_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_source_node_table_clauseContext {
	var p = new(Opt_source_node_table_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_source_node_table_clause

	return p
}

func (s *Opt_source_node_table_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_source_node_table_clauseContext) SOURCE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSOURCE_SYMBOL, 0)
}

func (s *Opt_source_node_table_clauseContext) KEY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserKEY_SYMBOL, 0)
}

func (s *Opt_source_node_table_clauseContext) AllColumn_list() []IColumn_listContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_listContext); ok {
			len++
		}
	}

	tst := make([]IColumn_listContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_listContext); ok {
			tst[i] = t.(IColumn_listContext)
			i++
		}
	}

	return tst
}

func (s *Opt_source_node_table_clauseContext) Column_list(i int) IColumn_listContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_listContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_listContext)
}

func (s *Opt_source_node_table_clauseContext) REFERENCES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREFERENCES_SYMBOL, 0)
}

func (s *Opt_source_node_table_clauseContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Opt_source_node_table_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_source_node_table_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_source_node_table_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_source_node_table_clause(s)
	}
}

func (s *Opt_source_node_table_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_source_node_table_clause(s)
	}
}

func (s *Opt_source_node_table_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_source_node_table_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_source_node_table_clause() (localctx IOpt_source_node_table_clauseContext) {
	localctx = NewOpt_source_node_table_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, GoogleSQLParserRULE_opt_source_node_table_clause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1690)
		p.Match(GoogleSQLParserSOURCE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1691)
		p.Match(GoogleSQLParserKEY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1692)
		p.Column_list()
	}
	{
		p.SetState(1693)
		p.Match(GoogleSQLParserREFERENCES_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1694)
		p.Identifier()
	}
	p.SetState(1696)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserLR_BRACKET_SYMBOL {
		{
			p.SetState(1695)
			p.Column_list()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_key_clauseContext is an interface to support dynamic dispatch.
type IOpt_key_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	KEY_SYMBOL() antlr.TerminalNode
	Column_list() IColumn_listContext

	// IsOpt_key_clauseContext differentiates from other interfaces.
	IsOpt_key_clauseContext()
}

type Opt_key_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_key_clauseContext() *Opt_key_clauseContext {
	var p = new(Opt_key_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_key_clause
	return p
}

func InitEmptyOpt_key_clauseContext(p *Opt_key_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_key_clause
}

func (*Opt_key_clauseContext) IsOpt_key_clauseContext() {}

func NewOpt_key_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_key_clauseContext {
	var p = new(Opt_key_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_key_clause

	return p
}

func (s *Opt_key_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_key_clauseContext) KEY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserKEY_SYMBOL, 0)
}

func (s *Opt_key_clauseContext) Column_list() IColumn_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_listContext)
}

func (s *Opt_key_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_key_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_key_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_key_clause(s)
	}
}

func (s *Opt_key_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_key_clause(s)
	}
}

func (s *Opt_key_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_key_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_key_clause() (localctx IOpt_key_clauseContext) {
	localctx = NewOpt_key_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, GoogleSQLParserRULE_opt_key_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1698)
		p.Match(GoogleSQLParserKEY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1699)
		p.Column_list()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_model_statementContext is an interface to support dynamic dispatch.
type ICreate_model_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CREATE_SYMBOL() antlr.TerminalNode
	MODEL_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext
	Opt_or_replace() IOpt_or_replaceContext
	Opt_create_scope() IOpt_create_scopeContext
	Opt_if_not_exists() IOpt_if_not_existsContext
	Opt_input_output_clause() IOpt_input_output_clauseContext
	Opt_transform_clause() IOpt_transform_clauseContext
	Remote_with_connection_clause() IRemote_with_connection_clauseContext
	Opt_options_list() IOpt_options_listContext
	Opt_as_query_or_aliased_query_list() IOpt_as_query_or_aliased_query_listContext

	// IsCreate_model_statementContext differentiates from other interfaces.
	IsCreate_model_statementContext()
}

type Create_model_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_model_statementContext() *Create_model_statementContext {
	var p = new(Create_model_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_model_statement
	return p
}

func InitEmptyCreate_model_statementContext(p *Create_model_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_model_statement
}

func (*Create_model_statementContext) IsCreate_model_statementContext() {}

func NewCreate_model_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_model_statementContext {
	var p = new(Create_model_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_create_model_statement

	return p
}

func (s *Create_model_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_model_statementContext) CREATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCREATE_SYMBOL, 0)
}

func (s *Create_model_statementContext) MODEL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMODEL_SYMBOL, 0)
}

func (s *Create_model_statementContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Create_model_statementContext) Opt_or_replace() IOpt_or_replaceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_or_replaceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_or_replaceContext)
}

func (s *Create_model_statementContext) Opt_create_scope() IOpt_create_scopeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_create_scopeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_create_scopeContext)
}

func (s *Create_model_statementContext) Opt_if_not_exists() IOpt_if_not_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_if_not_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_if_not_existsContext)
}

func (s *Create_model_statementContext) Opt_input_output_clause() IOpt_input_output_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_input_output_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_input_output_clauseContext)
}

func (s *Create_model_statementContext) Opt_transform_clause() IOpt_transform_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_transform_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_transform_clauseContext)
}

func (s *Create_model_statementContext) Remote_with_connection_clause() IRemote_with_connection_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRemote_with_connection_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRemote_with_connection_clauseContext)
}

func (s *Create_model_statementContext) Opt_options_list() IOpt_options_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_options_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_options_listContext)
}

func (s *Create_model_statementContext) Opt_as_query_or_aliased_query_list() IOpt_as_query_or_aliased_query_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_as_query_or_aliased_query_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_as_query_or_aliased_query_listContext)
}

func (s *Create_model_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_model_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_model_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCreate_model_statement(s)
	}
}

func (s *Create_model_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCreate_model_statement(s)
	}
}

func (s *Create_model_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCreate_model_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Create_model_statement() (localctx ICreate_model_statementContext) {
	localctx = NewCreate_model_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, GoogleSQLParserRULE_create_model_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1701)
		p.Match(GoogleSQLParserCREATE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1703)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOR_SYMBOL {
		{
			p.SetState(1702)
			p.Opt_or_replace()
		}

	}
	p.SetState(1706)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-224)) & ^0x3f) == 0 && ((int64(1)<<(_la-224))&105553116266529) != 0 {
		{
			p.SetState(1705)
			p.Opt_create_scope()
		}

	}
	{
		p.SetState(1708)
		p.Match(GoogleSQLParserMODEL_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1710)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserIF_SYMBOL {
		{
			p.SetState(1709)
			p.Opt_if_not_exists()
		}

	}
	{
		p.SetState(1712)
		p.Path_expression()
	}
	p.SetState(1714)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserINPUT_SYMBOL {
		{
			p.SetState(1713)
			p.Opt_input_output_clause()
		}

	}
	p.SetState(1717)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserTRANSFORM_SYMBOL {
		{
			p.SetState(1716)
			p.Opt_transform_clause()
		}

	}
	p.SetState(1720)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserWITH_SYMBOL || _la == GoogleSQLParserREMOTE_SYMBOL {
		{
			p.SetState(1719)
			p.Remote_with_connection_clause()
		}

	}
	p.SetState(1723)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOPTIONS_SYMBOL {
		{
			p.SetState(1722)
			p.Opt_options_list()
		}

	}
	p.SetState(1726)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAS_SYMBOL {
		{
			p.SetState(1725)
			p.Opt_as_query_or_aliased_query_list()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_input_output_clauseContext is an interface to support dynamic dispatch.
type IOpt_input_output_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	INPUT_SYMBOL() antlr.TerminalNode
	AllTable_element_list() []ITable_element_listContext
	Table_element_list(i int) ITable_element_listContext
	OUTPUT_SYMBOL() antlr.TerminalNode

	// IsOpt_input_output_clauseContext differentiates from other interfaces.
	IsOpt_input_output_clauseContext()
}

type Opt_input_output_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_input_output_clauseContext() *Opt_input_output_clauseContext {
	var p = new(Opt_input_output_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_input_output_clause
	return p
}

func InitEmptyOpt_input_output_clauseContext(p *Opt_input_output_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_input_output_clause
}

func (*Opt_input_output_clauseContext) IsOpt_input_output_clauseContext() {}

func NewOpt_input_output_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_input_output_clauseContext {
	var p = new(Opt_input_output_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_input_output_clause

	return p
}

func (s *Opt_input_output_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_input_output_clauseContext) INPUT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINPUT_SYMBOL, 0)
}

func (s *Opt_input_output_clauseContext) AllTable_element_list() []ITable_element_listContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITable_element_listContext); ok {
			len++
		}
	}

	tst := make([]ITable_element_listContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITable_element_listContext); ok {
			tst[i] = t.(ITable_element_listContext)
			i++
		}
	}

	return tst
}

func (s *Opt_input_output_clauseContext) Table_element_list(i int) ITable_element_listContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_element_listContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_element_listContext)
}

func (s *Opt_input_output_clauseContext) OUTPUT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOUTPUT_SYMBOL, 0)
}

func (s *Opt_input_output_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_input_output_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_input_output_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_input_output_clause(s)
	}
}

func (s *Opt_input_output_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_input_output_clause(s)
	}
}

func (s *Opt_input_output_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_input_output_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_input_output_clause() (localctx IOpt_input_output_clauseContext) {
	localctx = NewOpt_input_output_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, GoogleSQLParserRULE_opt_input_output_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1728)
		p.Match(GoogleSQLParserINPUT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1729)
		p.Table_element_list()
	}
	{
		p.SetState(1730)
		p.Match(GoogleSQLParserOUTPUT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1731)
		p.Table_element_list()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_transform_clauseContext is an interface to support dynamic dispatch.
type IOpt_transform_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TRANSFORM_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Select_list() ISelect_listContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsOpt_transform_clauseContext differentiates from other interfaces.
	IsOpt_transform_clauseContext()
}

type Opt_transform_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_transform_clauseContext() *Opt_transform_clauseContext {
	var p = new(Opt_transform_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_transform_clause
	return p
}

func InitEmptyOpt_transform_clauseContext(p *Opt_transform_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_transform_clause
}

func (*Opt_transform_clauseContext) IsOpt_transform_clauseContext() {}

func NewOpt_transform_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_transform_clauseContext {
	var p = new(Opt_transform_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_transform_clause

	return p
}

func (s *Opt_transform_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_transform_clauseContext) TRANSFORM_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTRANSFORM_SYMBOL, 0)
}

func (s *Opt_transform_clauseContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Opt_transform_clauseContext) Select_list() ISelect_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_listContext)
}

func (s *Opt_transform_clauseContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Opt_transform_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_transform_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_transform_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_transform_clause(s)
	}
}

func (s *Opt_transform_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_transform_clause(s)
	}
}

func (s *Opt_transform_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_transform_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_transform_clause() (localctx IOpt_transform_clauseContext) {
	localctx = NewOpt_transform_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, GoogleSQLParserRULE_opt_transform_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1733)
		p.Match(GoogleSQLParserTRANSFORM_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1734)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1735)
		p.Select_list()
	}
	{
		p.SetState(1736)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_as_query_or_aliased_query_listContext is an interface to support dynamic dispatch.
type IOpt_as_query_or_aliased_query_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	As_query() IAs_queryContext
	AS_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Aliased_query_list() IAliased_query_listContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsOpt_as_query_or_aliased_query_listContext differentiates from other interfaces.
	IsOpt_as_query_or_aliased_query_listContext()
}

type Opt_as_query_or_aliased_query_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_as_query_or_aliased_query_listContext() *Opt_as_query_or_aliased_query_listContext {
	var p = new(Opt_as_query_or_aliased_query_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_as_query_or_aliased_query_list
	return p
}

func InitEmptyOpt_as_query_or_aliased_query_listContext(p *Opt_as_query_or_aliased_query_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_as_query_or_aliased_query_list
}

func (*Opt_as_query_or_aliased_query_listContext) IsOpt_as_query_or_aliased_query_listContext() {}

func NewOpt_as_query_or_aliased_query_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_as_query_or_aliased_query_listContext {
	var p = new(Opt_as_query_or_aliased_query_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_as_query_or_aliased_query_list

	return p
}

func (s *Opt_as_query_or_aliased_query_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_as_query_or_aliased_query_listContext) As_query() IAs_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_queryContext)
}

func (s *Opt_as_query_or_aliased_query_listContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Opt_as_query_or_aliased_query_listContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Opt_as_query_or_aliased_query_listContext) Aliased_query_list() IAliased_query_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAliased_query_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAliased_query_listContext)
}

func (s *Opt_as_query_or_aliased_query_listContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Opt_as_query_or_aliased_query_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_as_query_or_aliased_query_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_as_query_or_aliased_query_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_as_query_or_aliased_query_list(s)
	}
}

func (s *Opt_as_query_or_aliased_query_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_as_query_or_aliased_query_list(s)
	}
}

func (s *Opt_as_query_or_aliased_query_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_as_query_or_aliased_query_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_as_query_or_aliased_query_list() (localctx IOpt_as_query_or_aliased_query_listContext) {
	localctx = NewOpt_as_query_or_aliased_query_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, GoogleSQLParserRULE_opt_as_query_or_aliased_query_list)
	p.SetState(1744)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 120, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1738)
			p.As_query()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1739)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1740)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1741)
			p.Aliased_query_list()
		}
		{
			p.SetState(1742)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAliased_query_listContext is an interface to support dynamic dispatch.
type IAliased_query_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllAliased_query() []IAliased_queryContext
	Aliased_query(i int) IAliased_queryContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsAliased_query_listContext differentiates from other interfaces.
	IsAliased_query_listContext()
}

type Aliased_query_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAliased_query_listContext() *Aliased_query_listContext {
	var p = new(Aliased_query_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_aliased_query_list
	return p
}

func InitEmptyAliased_query_listContext(p *Aliased_query_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_aliased_query_list
}

func (*Aliased_query_listContext) IsAliased_query_listContext() {}

func NewAliased_query_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Aliased_query_listContext {
	var p = new(Aliased_query_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_aliased_query_list

	return p
}

func (s *Aliased_query_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Aliased_query_listContext) AllAliased_query() []IAliased_queryContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAliased_queryContext); ok {
			len++
		}
	}

	tst := make([]IAliased_queryContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAliased_queryContext); ok {
			tst[i] = t.(IAliased_queryContext)
			i++
		}
	}

	return tst
}

func (s *Aliased_query_listContext) Aliased_query(i int) IAliased_queryContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAliased_queryContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAliased_queryContext)
}

func (s *Aliased_query_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Aliased_query_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Aliased_query_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Aliased_query_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Aliased_query_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAliased_query_list(s)
	}
}

func (s *Aliased_query_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAliased_query_list(s)
	}
}

func (s *Aliased_query_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAliased_query_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Aliased_query_list() (localctx IAliased_query_listContext) {
	localctx = NewAliased_query_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, GoogleSQLParserRULE_aliased_query_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1746)
		p.Aliased_query()
	}
	p.SetState(1751)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(1747)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1748)
			p.Aliased_query()
		}

		p.SetState(1753)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAs_queryContext is an interface to support dynamic dispatch.
type IAs_queryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AS_SYMBOL() antlr.TerminalNode
	Query() IQueryContext

	// IsAs_queryContext differentiates from other interfaces.
	IsAs_queryContext()
}

type As_queryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAs_queryContext() *As_queryContext {
	var p = new(As_queryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_as_query
	return p
}

func InitEmptyAs_queryContext(p *As_queryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_as_query
}

func (*As_queryContext) IsAs_queryContext() {}

func NewAs_queryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *As_queryContext {
	var p = new(As_queryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_as_query

	return p
}

func (s *As_queryContext) GetParser() antlr.Parser { return s.parser }

func (s *As_queryContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *As_queryContext) Query() IQueryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQueryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *As_queryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *As_queryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *As_queryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAs_query(s)
	}
}

func (s *As_queryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAs_query(s)
	}
}

func (s *As_queryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAs_query(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) As_query() (localctx IAs_queryContext) {
	localctx = NewAs_queryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, GoogleSQLParserRULE_as_query)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1754)
		p.Match(GoogleSQLParserAS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1755)
		p.Query()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_external_table_function_statementContext is an interface to support dynamic dispatch.
type ICreate_external_table_function_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CREATE_SYMBOL() antlr.TerminalNode
	EXTERNAL_SYMBOL() antlr.TerminalNode
	TABLE_SYMBOL() antlr.TerminalNode
	FUNCTION_SYMBOL() antlr.TerminalNode
	Opt_or_replace() IOpt_or_replaceContext
	Opt_create_scope() IOpt_create_scopeContext

	// IsCreate_external_table_function_statementContext differentiates from other interfaces.
	IsCreate_external_table_function_statementContext()
}

type Create_external_table_function_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_external_table_function_statementContext() *Create_external_table_function_statementContext {
	var p = new(Create_external_table_function_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_external_table_function_statement
	return p
}

func InitEmptyCreate_external_table_function_statementContext(p *Create_external_table_function_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_external_table_function_statement
}

func (*Create_external_table_function_statementContext) IsCreate_external_table_function_statementContext() {
}

func NewCreate_external_table_function_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_external_table_function_statementContext {
	var p = new(Create_external_table_function_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_create_external_table_function_statement

	return p
}

func (s *Create_external_table_function_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_external_table_function_statementContext) CREATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCREATE_SYMBOL, 0)
}

func (s *Create_external_table_function_statementContext) EXTERNAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXTERNAL_SYMBOL, 0)
}

func (s *Create_external_table_function_statementContext) TABLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTABLE_SYMBOL, 0)
}

func (s *Create_external_table_function_statementContext) FUNCTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFUNCTION_SYMBOL, 0)
}

func (s *Create_external_table_function_statementContext) Opt_or_replace() IOpt_or_replaceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_or_replaceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_or_replaceContext)
}

func (s *Create_external_table_function_statementContext) Opt_create_scope() IOpt_create_scopeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_create_scopeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_create_scopeContext)
}

func (s *Create_external_table_function_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_external_table_function_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_external_table_function_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCreate_external_table_function_statement(s)
	}
}

func (s *Create_external_table_function_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCreate_external_table_function_statement(s)
	}
}

func (s *Create_external_table_function_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCreate_external_table_function_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Create_external_table_function_statement() (localctx ICreate_external_table_function_statementContext) {
	localctx = NewCreate_external_table_function_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, GoogleSQLParserRULE_create_external_table_function_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1757)
		p.Match(GoogleSQLParserCREATE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1759)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOR_SYMBOL {
		{
			p.SetState(1758)
			p.Opt_or_replace()
		}

	}
	p.SetState(1762)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-224)) & ^0x3f) == 0 && ((int64(1)<<(_la-224))&105553116266529) != 0 {
		{
			p.SetState(1761)
			p.Opt_create_scope()
		}

	}
	{
		p.SetState(1764)
		p.Match(GoogleSQLParserEXTERNAL_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1765)
		p.Match(GoogleSQLParserTABLE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1766)
		p.Match(GoogleSQLParserFUNCTION_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

	p.NotifyErrorListeners("Syntax error: CREATE EXTERNAL TABLE FUNCTION is not supported", nil, nil)

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_external_table_statementContext is an interface to support dynamic dispatch.
type ICreate_external_table_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CREATE_SYMBOL() antlr.TerminalNode
	EXTERNAL_SYMBOL() antlr.TerminalNode
	TABLE_SYMBOL() antlr.TerminalNode
	Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext
	Opt_or_replace() IOpt_or_replaceContext
	Opt_create_scope() IOpt_create_scopeContext
	Opt_if_not_exists() IOpt_if_not_existsContext
	Table_element_list() ITable_element_listContext
	Opt_like_path_expression() IOpt_like_path_expressionContext
	Opt_default_collate_clause() IOpt_default_collate_clauseContext
	Opt_external_table_with_clauses() IOpt_external_table_with_clausesContext
	Opt_options_list() IOpt_options_listContext

	// IsCreate_external_table_statementContext differentiates from other interfaces.
	IsCreate_external_table_statementContext()
}

type Create_external_table_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_external_table_statementContext() *Create_external_table_statementContext {
	var p = new(Create_external_table_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_external_table_statement
	return p
}

func InitEmptyCreate_external_table_statementContext(p *Create_external_table_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_external_table_statement
}

func (*Create_external_table_statementContext) IsCreate_external_table_statementContext() {}

func NewCreate_external_table_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_external_table_statementContext {
	var p = new(Create_external_table_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_create_external_table_statement

	return p
}

func (s *Create_external_table_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_external_table_statementContext) CREATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCREATE_SYMBOL, 0)
}

func (s *Create_external_table_statementContext) EXTERNAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXTERNAL_SYMBOL, 0)
}

func (s *Create_external_table_statementContext) TABLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTABLE_SYMBOL, 0)
}

func (s *Create_external_table_statementContext) Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMaybe_dashed_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMaybe_dashed_path_expressionContext)
}

func (s *Create_external_table_statementContext) Opt_or_replace() IOpt_or_replaceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_or_replaceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_or_replaceContext)
}

func (s *Create_external_table_statementContext) Opt_create_scope() IOpt_create_scopeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_create_scopeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_create_scopeContext)
}

func (s *Create_external_table_statementContext) Opt_if_not_exists() IOpt_if_not_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_if_not_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_if_not_existsContext)
}

func (s *Create_external_table_statementContext) Table_element_list() ITable_element_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_element_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_element_listContext)
}

func (s *Create_external_table_statementContext) Opt_like_path_expression() IOpt_like_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_like_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_like_path_expressionContext)
}

func (s *Create_external_table_statementContext) Opt_default_collate_clause() IOpt_default_collate_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_default_collate_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_default_collate_clauseContext)
}

func (s *Create_external_table_statementContext) Opt_external_table_with_clauses() IOpt_external_table_with_clausesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_external_table_with_clausesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_external_table_with_clausesContext)
}

func (s *Create_external_table_statementContext) Opt_options_list() IOpt_options_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_options_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_options_listContext)
}

func (s *Create_external_table_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_external_table_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_external_table_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCreate_external_table_statement(s)
	}
}

func (s *Create_external_table_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCreate_external_table_statement(s)
	}
}

func (s *Create_external_table_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCreate_external_table_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Create_external_table_statement() (localctx ICreate_external_table_statementContext) {
	localctx = NewCreate_external_table_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, GoogleSQLParserRULE_create_external_table_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1769)
		p.Match(GoogleSQLParserCREATE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1771)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOR_SYMBOL {
		{
			p.SetState(1770)
			p.Opt_or_replace()
		}

	}
	p.SetState(1774)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-224)) & ^0x3f) == 0 && ((int64(1)<<(_la-224))&105553116266529) != 0 {
		{
			p.SetState(1773)
			p.Opt_create_scope()
		}

	}
	{
		p.SetState(1776)
		p.Match(GoogleSQLParserEXTERNAL_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1777)
		p.Match(GoogleSQLParserTABLE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1779)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserIF_SYMBOL {
		{
			p.SetState(1778)
			p.Opt_if_not_exists()
		}

	}
	{
		p.SetState(1781)
		p.Maybe_dashed_path_expression()
	}
	p.SetState(1783)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserLR_BRACKET_SYMBOL {
		{
			p.SetState(1782)
			p.Table_element_list()
		}

	}
	p.SetState(1786)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserLIKE_SYMBOL {
		{
			p.SetState(1785)
			p.Opt_like_path_expression()
		}

	}
	p.SetState(1789)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserDEFAULT_SYMBOL {
		{
			p.SetState(1788)
			p.Opt_default_collate_clause()
		}

	}
	p.SetState(1792)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserWITH_SYMBOL {
		{
			p.SetState(1791)
			p.Opt_external_table_with_clauses()
		}

	}
	p.SetState(1795)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOPTIONS_SYMBOL {
		{
			p.SetState(1794)
			p.Opt_options_list()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_default_collate_clauseContext is an interface to support dynamic dispatch.
type IOpt_default_collate_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DEFAULT_SYMBOL() antlr.TerminalNode
	Collate_clause() ICollate_clauseContext

	// IsOpt_default_collate_clauseContext differentiates from other interfaces.
	IsOpt_default_collate_clauseContext()
}

type Opt_default_collate_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_default_collate_clauseContext() *Opt_default_collate_clauseContext {
	var p = new(Opt_default_collate_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_default_collate_clause
	return p
}

func InitEmptyOpt_default_collate_clauseContext(p *Opt_default_collate_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_default_collate_clause
}

func (*Opt_default_collate_clauseContext) IsOpt_default_collate_clauseContext() {}

func NewOpt_default_collate_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_default_collate_clauseContext {
	var p = new(Opt_default_collate_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_default_collate_clause

	return p
}

func (s *Opt_default_collate_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_default_collate_clauseContext) DEFAULT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDEFAULT_SYMBOL, 0)
}

func (s *Opt_default_collate_clauseContext) Collate_clause() ICollate_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollate_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollate_clauseContext)
}

func (s *Opt_default_collate_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_default_collate_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_default_collate_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_default_collate_clause(s)
	}
}

func (s *Opt_default_collate_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_default_collate_clause(s)
	}
}

func (s *Opt_default_collate_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_default_collate_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_default_collate_clause() (localctx IOpt_default_collate_clauseContext) {
	localctx = NewOpt_default_collate_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, GoogleSQLParserRULE_opt_default_collate_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1797)
		p.Match(GoogleSQLParserDEFAULT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1798)
		p.Collate_clause()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_like_path_expressionContext is an interface to support dynamic dispatch.
type IOpt_like_path_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LIKE_SYMBOL() antlr.TerminalNode
	Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext

	// IsOpt_like_path_expressionContext differentiates from other interfaces.
	IsOpt_like_path_expressionContext()
}

type Opt_like_path_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_like_path_expressionContext() *Opt_like_path_expressionContext {
	var p = new(Opt_like_path_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_like_path_expression
	return p
}

func InitEmptyOpt_like_path_expressionContext(p *Opt_like_path_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_like_path_expression
}

func (*Opt_like_path_expressionContext) IsOpt_like_path_expressionContext() {}

func NewOpt_like_path_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_like_path_expressionContext {
	var p = new(Opt_like_path_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_like_path_expression

	return p
}

func (s *Opt_like_path_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_like_path_expressionContext) LIKE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLIKE_SYMBOL, 0)
}

func (s *Opt_like_path_expressionContext) Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMaybe_dashed_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMaybe_dashed_path_expressionContext)
}

func (s *Opt_like_path_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_like_path_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_like_path_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_like_path_expression(s)
	}
}

func (s *Opt_like_path_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_like_path_expression(s)
	}
}

func (s *Opt_like_path_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_like_path_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_like_path_expression() (localctx IOpt_like_path_expressionContext) {
	localctx = NewOpt_like_path_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, GoogleSQLParserRULE_opt_like_path_expression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1800)
		p.Match(GoogleSQLParserLIKE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1801)
		p.Maybe_dashed_path_expression()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_row_access_policy_statementContext is an interface to support dynamic dispatch.
type ICreate_row_access_policy_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CREATE_SYMBOL() antlr.TerminalNode
	ROW_SYMBOL() antlr.TerminalNode
	POLICY_SYMBOL() antlr.TerminalNode
	ON_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext
	Filter_using_clause() IFilter_using_clauseContext
	Opt_or_replace() IOpt_or_replaceContext
	ACCESS_SYMBOL() antlr.TerminalNode
	Opt_if_not_exists() IOpt_if_not_existsContext
	Identifier() IIdentifierContext
	Create_row_access_policy_grant_to_clause() ICreate_row_access_policy_grant_to_clauseContext

	// IsCreate_row_access_policy_statementContext differentiates from other interfaces.
	IsCreate_row_access_policy_statementContext()
}

type Create_row_access_policy_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_row_access_policy_statementContext() *Create_row_access_policy_statementContext {
	var p = new(Create_row_access_policy_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_row_access_policy_statement
	return p
}

func InitEmptyCreate_row_access_policy_statementContext(p *Create_row_access_policy_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_row_access_policy_statement
}

func (*Create_row_access_policy_statementContext) IsCreate_row_access_policy_statementContext() {}

func NewCreate_row_access_policy_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_row_access_policy_statementContext {
	var p = new(Create_row_access_policy_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_create_row_access_policy_statement

	return p
}

func (s *Create_row_access_policy_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_row_access_policy_statementContext) CREATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCREATE_SYMBOL, 0)
}

func (s *Create_row_access_policy_statementContext) ROW_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserROW_SYMBOL, 0)
}

func (s *Create_row_access_policy_statementContext) POLICY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPOLICY_SYMBOL, 0)
}

func (s *Create_row_access_policy_statementContext) ON_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserON_SYMBOL, 0)
}

func (s *Create_row_access_policy_statementContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Create_row_access_policy_statementContext) Filter_using_clause() IFilter_using_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFilter_using_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFilter_using_clauseContext)
}

func (s *Create_row_access_policy_statementContext) Opt_or_replace() IOpt_or_replaceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_or_replaceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_or_replaceContext)
}

func (s *Create_row_access_policy_statementContext) ACCESS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserACCESS_SYMBOL, 0)
}

func (s *Create_row_access_policy_statementContext) Opt_if_not_exists() IOpt_if_not_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_if_not_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_if_not_existsContext)
}

func (s *Create_row_access_policy_statementContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_row_access_policy_statementContext) Create_row_access_policy_grant_to_clause() ICreate_row_access_policy_grant_to_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_row_access_policy_grant_to_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_row_access_policy_grant_to_clauseContext)
}

func (s *Create_row_access_policy_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_row_access_policy_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_row_access_policy_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCreate_row_access_policy_statement(s)
	}
}

func (s *Create_row_access_policy_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCreate_row_access_policy_statement(s)
	}
}

func (s *Create_row_access_policy_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCreate_row_access_policy_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Create_row_access_policy_statement() (localctx ICreate_row_access_policy_statementContext) {
	localctx = NewCreate_row_access_policy_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, GoogleSQLParserRULE_create_row_access_policy_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1803)
		p.Match(GoogleSQLParserCREATE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1805)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOR_SYMBOL {
		{
			p.SetState(1804)
			p.Opt_or_replace()
		}

	}
	{
		p.SetState(1807)
		p.Match(GoogleSQLParserROW_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1809)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserACCESS_SYMBOL {
		{
			p.SetState(1808)
			p.Match(GoogleSQLParserACCESS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1811)
		p.Match(GoogleSQLParserPOLICY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1813)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserIF_SYMBOL {
		{
			p.SetState(1812)
			p.Opt_if_not_exists()
		}

	}
	p.SetState(1816)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64((_la-72)) & ^0x3f) == 0 && ((int64(1)<<(_la-72))&-106523215214079) != 0) || ((int64((_la-136)) & ^0x3f) == 0 && ((int64(1)<<(_la-136))&-1) != 0) || ((int64((_la-200)) & ^0x3f) == 0 && ((int64(1)<<(_la-200))&-36028797018963969) != 0) || ((int64((_la-264)) & ^0x3f) == 0 && ((int64(1)<<(_la-264))&536870911) != 0) || ((int64((_la-338)) & ^0x3f) == 0 && ((int64(1)<<(_la-338))&8161) != 0) {
		{
			p.SetState(1815)
			p.Identifier()
		}

	}
	{
		p.SetState(1818)
		p.Match(GoogleSQLParserON_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1819)
		p.Path_expression()
	}
	p.SetState(1821)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserGRANT_SYMBOL || _la == GoogleSQLParserTO_SYMBOL {
		{
			p.SetState(1820)
			p.Create_row_access_policy_grant_to_clause()
		}

	}
	{
		p.SetState(1823)
		p.Filter_using_clause()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFilter_using_clauseContext is an interface to support dynamic dispatch.
type IFilter_using_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	USING_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	FILTER_SYMBOL() antlr.TerminalNode

	// IsFilter_using_clauseContext differentiates from other interfaces.
	IsFilter_using_clauseContext()
}

type Filter_using_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFilter_using_clauseContext() *Filter_using_clauseContext {
	var p = new(Filter_using_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_filter_using_clause
	return p
}

func InitEmptyFilter_using_clauseContext(p *Filter_using_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_filter_using_clause
}

func (*Filter_using_clauseContext) IsFilter_using_clauseContext() {}

func NewFilter_using_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Filter_using_clauseContext {
	var p = new(Filter_using_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_filter_using_clause

	return p
}

func (s *Filter_using_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Filter_using_clauseContext) USING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUSING_SYMBOL, 0)
}

func (s *Filter_using_clauseContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Filter_using_clauseContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Filter_using_clauseContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Filter_using_clauseContext) FILTER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFILTER_SYMBOL, 0)
}

func (s *Filter_using_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Filter_using_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Filter_using_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFilter_using_clause(s)
	}
}

func (s *Filter_using_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFilter_using_clause(s)
	}
}

func (s *Filter_using_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFilter_using_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Filter_using_clause() (localctx IFilter_using_clauseContext) {
	localctx = NewFilter_using_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, GoogleSQLParserRULE_filter_using_clause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1826)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserFILTER_SYMBOL {
		{
			p.SetState(1825)
			p.Match(GoogleSQLParserFILTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1828)
		p.Match(GoogleSQLParserUSING_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1829)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1830)
		p.expression(0)
	}
	{
		p.SetState(1831)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_row_access_policy_grant_to_clauseContext is an interface to support dynamic dispatch.
type ICreate_row_access_policy_grant_to_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Grant_to_clause() IGrant_to_clauseContext
	TO_SYMBOL() antlr.TerminalNode
	Grantee_list() IGrantee_listContext

	// IsCreate_row_access_policy_grant_to_clauseContext differentiates from other interfaces.
	IsCreate_row_access_policy_grant_to_clauseContext()
}

type Create_row_access_policy_grant_to_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_row_access_policy_grant_to_clauseContext() *Create_row_access_policy_grant_to_clauseContext {
	var p = new(Create_row_access_policy_grant_to_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_row_access_policy_grant_to_clause
	return p
}

func InitEmptyCreate_row_access_policy_grant_to_clauseContext(p *Create_row_access_policy_grant_to_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_row_access_policy_grant_to_clause
}

func (*Create_row_access_policy_grant_to_clauseContext) IsCreate_row_access_policy_grant_to_clauseContext() {
}

func NewCreate_row_access_policy_grant_to_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_row_access_policy_grant_to_clauseContext {
	var p = new(Create_row_access_policy_grant_to_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_create_row_access_policy_grant_to_clause

	return p
}

func (s *Create_row_access_policy_grant_to_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_row_access_policy_grant_to_clauseContext) Grant_to_clause() IGrant_to_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGrant_to_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGrant_to_clauseContext)
}

func (s *Create_row_access_policy_grant_to_clauseContext) TO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTO_SYMBOL, 0)
}

func (s *Create_row_access_policy_grant_to_clauseContext) Grantee_list() IGrantee_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGrantee_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGrantee_listContext)
}

func (s *Create_row_access_policy_grant_to_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_row_access_policy_grant_to_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_row_access_policy_grant_to_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCreate_row_access_policy_grant_to_clause(s)
	}
}

func (s *Create_row_access_policy_grant_to_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCreate_row_access_policy_grant_to_clause(s)
	}
}

func (s *Create_row_access_policy_grant_to_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCreate_row_access_policy_grant_to_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Create_row_access_policy_grant_to_clause() (localctx ICreate_row_access_policy_grant_to_clauseContext) {
	localctx = NewCreate_row_access_policy_grant_to_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, GoogleSQLParserRULE_create_row_access_policy_grant_to_clause)
	p.SetState(1836)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserGRANT_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1833)
			p.Grant_to_clause()
		}

	case GoogleSQLParserTO_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1834)
			p.Match(GoogleSQLParserTO_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1835)
			p.Grantee_list()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_privilege_restriction_statementContext is an interface to support dynamic dispatch.
type ICreate_privilege_restriction_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CREATE_SYMBOL() antlr.TerminalNode
	PRIVILEGE_SYMBOL() antlr.TerminalNode
	RESTRICTION_SYMBOL() antlr.TerminalNode
	AllON_SYMBOL() []antlr.TerminalNode
	ON_SYMBOL(i int) antlr.TerminalNode
	Privilege_list() IPrivilege_listContext
	Identifier() IIdentifierContext
	Path_expression() IPath_expressionContext
	Opt_or_replace() IOpt_or_replaceContext
	Opt_if_not_exists() IOpt_if_not_existsContext
	Restrict_to_clause() IRestrict_to_clauseContext

	// IsCreate_privilege_restriction_statementContext differentiates from other interfaces.
	IsCreate_privilege_restriction_statementContext()
}

type Create_privilege_restriction_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_privilege_restriction_statementContext() *Create_privilege_restriction_statementContext {
	var p = new(Create_privilege_restriction_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_privilege_restriction_statement
	return p
}

func InitEmptyCreate_privilege_restriction_statementContext(p *Create_privilege_restriction_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_privilege_restriction_statement
}

func (*Create_privilege_restriction_statementContext) IsCreate_privilege_restriction_statementContext() {
}

func NewCreate_privilege_restriction_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_privilege_restriction_statementContext {
	var p = new(Create_privilege_restriction_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_create_privilege_restriction_statement

	return p
}

func (s *Create_privilege_restriction_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_privilege_restriction_statementContext) CREATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCREATE_SYMBOL, 0)
}

func (s *Create_privilege_restriction_statementContext) PRIVILEGE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPRIVILEGE_SYMBOL, 0)
}

func (s *Create_privilege_restriction_statementContext) RESTRICTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRESTRICTION_SYMBOL, 0)
}

func (s *Create_privilege_restriction_statementContext) AllON_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserON_SYMBOL)
}

func (s *Create_privilege_restriction_statementContext) ON_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserON_SYMBOL, i)
}

func (s *Create_privilege_restriction_statementContext) Privilege_list() IPrivilege_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrivilege_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrivilege_listContext)
}

func (s *Create_privilege_restriction_statementContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Create_privilege_restriction_statementContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Create_privilege_restriction_statementContext) Opt_or_replace() IOpt_or_replaceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_or_replaceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_or_replaceContext)
}

func (s *Create_privilege_restriction_statementContext) Opt_if_not_exists() IOpt_if_not_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_if_not_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_if_not_existsContext)
}

func (s *Create_privilege_restriction_statementContext) Restrict_to_clause() IRestrict_to_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRestrict_to_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRestrict_to_clauseContext)
}

func (s *Create_privilege_restriction_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_privilege_restriction_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_privilege_restriction_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCreate_privilege_restriction_statement(s)
	}
}

func (s *Create_privilege_restriction_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCreate_privilege_restriction_statement(s)
	}
}

func (s *Create_privilege_restriction_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCreate_privilege_restriction_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Create_privilege_restriction_statement() (localctx ICreate_privilege_restriction_statementContext) {
	localctx = NewCreate_privilege_restriction_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, GoogleSQLParserRULE_create_privilege_restriction_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1838)
		p.Match(GoogleSQLParserCREATE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1840)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOR_SYMBOL {
		{
			p.SetState(1839)
			p.Opt_or_replace()
		}

	}
	{
		p.SetState(1842)
		p.Match(GoogleSQLParserPRIVILEGE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1843)
		p.Match(GoogleSQLParserRESTRICTION_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1845)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserIF_SYMBOL {
		{
			p.SetState(1844)
			p.Opt_if_not_exists()
		}

	}
	{
		p.SetState(1847)
		p.Match(GoogleSQLParserON_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1848)
		p.Privilege_list()
	}
	{
		p.SetState(1849)
		p.Match(GoogleSQLParserON_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1850)
		p.Identifier()
	}
	{
		p.SetState(1851)
		p.Path_expression()
	}
	p.SetState(1853)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserRESTRICT_SYMBOL {
		{
			p.SetState(1852)
			p.Restrict_to_clause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRestrict_to_clauseContext is an interface to support dynamic dispatch.
type IRestrict_to_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RESTRICT_SYMBOL() antlr.TerminalNode
	TO_SYMBOL() antlr.TerminalNode
	Possibly_empty_grantee_list() IPossibly_empty_grantee_listContext

	// IsRestrict_to_clauseContext differentiates from other interfaces.
	IsRestrict_to_clauseContext()
}

type Restrict_to_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRestrict_to_clauseContext() *Restrict_to_clauseContext {
	var p = new(Restrict_to_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_restrict_to_clause
	return p
}

func InitEmptyRestrict_to_clauseContext(p *Restrict_to_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_restrict_to_clause
}

func (*Restrict_to_clauseContext) IsRestrict_to_clauseContext() {}

func NewRestrict_to_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Restrict_to_clauseContext {
	var p = new(Restrict_to_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_restrict_to_clause

	return p
}

func (s *Restrict_to_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Restrict_to_clauseContext) RESTRICT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRESTRICT_SYMBOL, 0)
}

func (s *Restrict_to_clauseContext) TO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTO_SYMBOL, 0)
}

func (s *Restrict_to_clauseContext) Possibly_empty_grantee_list() IPossibly_empty_grantee_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPossibly_empty_grantee_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPossibly_empty_grantee_listContext)
}

func (s *Restrict_to_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Restrict_to_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Restrict_to_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRestrict_to_clause(s)
	}
}

func (s *Restrict_to_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRestrict_to_clause(s)
	}
}

func (s *Restrict_to_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRestrict_to_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Restrict_to_clause() (localctx IRestrict_to_clauseContext) {
	localctx = NewRestrict_to_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, GoogleSQLParserRULE_restrict_to_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1855)
		p.Match(GoogleSQLParserRESTRICT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1856)
		p.Match(GoogleSQLParserTO_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1857)
		p.Possibly_empty_grantee_list()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPossibly_empty_grantee_listContext is an interface to support dynamic dispatch.
type IPossibly_empty_grantee_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	AllString_literal_or_parameter() []IString_literal_or_parameterContext
	String_literal_or_parameter(i int) IString_literal_or_parameterContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsPossibly_empty_grantee_listContext differentiates from other interfaces.
	IsPossibly_empty_grantee_listContext()
}

type Possibly_empty_grantee_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPossibly_empty_grantee_listContext() *Possibly_empty_grantee_listContext {
	var p = new(Possibly_empty_grantee_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_possibly_empty_grantee_list
	return p
}

func InitEmptyPossibly_empty_grantee_listContext(p *Possibly_empty_grantee_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_possibly_empty_grantee_list
}

func (*Possibly_empty_grantee_listContext) IsPossibly_empty_grantee_listContext() {}

func NewPossibly_empty_grantee_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Possibly_empty_grantee_listContext {
	var p = new(Possibly_empty_grantee_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_possibly_empty_grantee_list

	return p
}

func (s *Possibly_empty_grantee_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Possibly_empty_grantee_listContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Possibly_empty_grantee_listContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Possibly_empty_grantee_listContext) AllString_literal_or_parameter() []IString_literal_or_parameterContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IString_literal_or_parameterContext); ok {
			len++
		}
	}

	tst := make([]IString_literal_or_parameterContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IString_literal_or_parameterContext); ok {
			tst[i] = t.(IString_literal_or_parameterContext)
			i++
		}
	}

	return tst
}

func (s *Possibly_empty_grantee_listContext) String_literal_or_parameter(i int) IString_literal_or_parameterContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literal_or_parameterContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literal_or_parameterContext)
}

func (s *Possibly_empty_grantee_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Possibly_empty_grantee_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Possibly_empty_grantee_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Possibly_empty_grantee_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Possibly_empty_grantee_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPossibly_empty_grantee_list(s)
	}
}

func (s *Possibly_empty_grantee_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPossibly_empty_grantee_list(s)
	}
}

func (s *Possibly_empty_grantee_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPossibly_empty_grantee_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Possibly_empty_grantee_list() (localctx IPossibly_empty_grantee_listContext) {
	localctx = NewPossibly_empty_grantee_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, GoogleSQLParserRULE_possibly_empty_grantee_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1859)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1868)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4413078896640) != 0 {
		{
			p.SetState(1860)
			p.String_literal_or_parameter()
		}
		p.SetState(1865)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == GoogleSQLParserCOMMA_SYMBOL {
			{
				p.SetState(1861)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1862)
				p.String_literal_or_parameter()
			}

			p.SetState(1867)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(1870)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_index_statementContext is an interface to support dynamic dispatch.
type ICreate_index_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CREATE_SYMBOL() antlr.TerminalNode
	INDEX_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext
	On_path_expression() IOn_path_expressionContext
	Index_order_by_and_options() IIndex_order_by_and_optionsContext
	Opt_or_replace() IOpt_or_replaceContext
	UNIQUE_SYMBOL() antlr.TerminalNode
	Opt_spanner_null_filtered() IOpt_spanner_null_filteredContext
	Index_type() IIndex_typeContext
	Opt_if_not_exists() IOpt_if_not_existsContext
	As_alias() IAs_aliasContext
	Index_unnest_expression_list() IIndex_unnest_expression_listContext
	Index_storing_list() IIndex_storing_listContext
	Opt_create_index_statement_suffix() IOpt_create_index_statement_suffixContext

	// IsCreate_index_statementContext differentiates from other interfaces.
	IsCreate_index_statementContext()
}

type Create_index_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_index_statementContext() *Create_index_statementContext {
	var p = new(Create_index_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_index_statement
	return p
}

func InitEmptyCreate_index_statementContext(p *Create_index_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_index_statement
}

func (*Create_index_statementContext) IsCreate_index_statementContext() {}

func NewCreate_index_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_index_statementContext {
	var p = new(Create_index_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_create_index_statement

	return p
}

func (s *Create_index_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_index_statementContext) CREATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCREATE_SYMBOL, 0)
}

func (s *Create_index_statementContext) INDEX_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINDEX_SYMBOL, 0)
}

func (s *Create_index_statementContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Create_index_statementContext) On_path_expression() IOn_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOn_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOn_path_expressionContext)
}

func (s *Create_index_statementContext) Index_order_by_and_options() IIndex_order_by_and_optionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndex_order_by_and_optionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndex_order_by_and_optionsContext)
}

func (s *Create_index_statementContext) Opt_or_replace() IOpt_or_replaceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_or_replaceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_or_replaceContext)
}

func (s *Create_index_statementContext) UNIQUE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNIQUE_SYMBOL, 0)
}

func (s *Create_index_statementContext) Opt_spanner_null_filtered() IOpt_spanner_null_filteredContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_spanner_null_filteredContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_spanner_null_filteredContext)
}

func (s *Create_index_statementContext) Index_type() IIndex_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndex_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndex_typeContext)
}

func (s *Create_index_statementContext) Opt_if_not_exists() IOpt_if_not_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_if_not_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_if_not_existsContext)
}

func (s *Create_index_statementContext) As_alias() IAs_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_aliasContext)
}

func (s *Create_index_statementContext) Index_unnest_expression_list() IIndex_unnest_expression_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndex_unnest_expression_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndex_unnest_expression_listContext)
}

func (s *Create_index_statementContext) Index_storing_list() IIndex_storing_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndex_storing_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndex_storing_listContext)
}

func (s *Create_index_statementContext) Opt_create_index_statement_suffix() IOpt_create_index_statement_suffixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_create_index_statement_suffixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_create_index_statement_suffixContext)
}

func (s *Create_index_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_index_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_index_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCreate_index_statement(s)
	}
}

func (s *Create_index_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCreate_index_statement(s)
	}
}

func (s *Create_index_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCreate_index_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Create_index_statement() (localctx ICreate_index_statementContext) {
	localctx = NewCreate_index_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, GoogleSQLParserRULE_create_index_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1872)
		p.Match(GoogleSQLParserCREATE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1874)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOR_SYMBOL {
		{
			p.SetState(1873)
			p.Opt_or_replace()
		}

	}
	p.SetState(1877)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserUNIQUE_SYMBOL {
		{
			p.SetState(1876)
			p.Match(GoogleSQLParserUNIQUE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1880)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserNULL_FILTERED_SYMBOL {
		{
			p.SetState(1879)
			p.Opt_spanner_null_filtered()
		}

	}
	p.SetState(1883)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserSEARCH_SYMBOL || _la == GoogleSQLParserVECTOR_SYMBOL {
		{
			p.SetState(1882)
			p.Index_type()
		}

	}
	{
		p.SetState(1885)
		p.Match(GoogleSQLParserINDEX_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1887)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserIF_SYMBOL {
		{
			p.SetState(1886)
			p.Opt_if_not_exists()
		}

	}
	{
		p.SetState(1889)
		p.Path_expression()
	}
	{
		p.SetState(1890)
		p.On_path_expression()
	}
	p.SetState(1892)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64((_la-56)) & ^0x3f) == 0 && ((int64(1)<<(_la-56))&-6981105432269881343) != 0) || ((int64((_la-120)) & ^0x3f) == 0 && ((int64(1)<<(_la-120))&-1) != 0) || ((int64((_la-184)) & ^0x3f) == 0 && ((int64(1)<<(_la-184))&-1) != 0) || ((int64((_la-248)) & ^0x3f) == 0 && ((int64(1)<<(_la-248))&35184372088703) != 0) || ((int64((_la-338)) & ^0x3f) == 0 && ((int64(1)<<(_la-338))&8161) != 0) {
		{
			p.SetState(1891)
			p.As_alias()
		}

	}
	p.SetState(1895)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserUNNEST_SYMBOL {
		{
			p.SetState(1894)
			p.Index_unnest_expression_list()
		}

	}
	{
		p.SetState(1897)
		p.Index_order_by_and_options()
	}
	p.SetState(1899)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserSTORING_SYMBOL {
		{
			p.SetState(1898)
			p.Index_storing_list()
		}

	}
	p.SetState(1902)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserCOMMA_SYMBOL || _la == GoogleSQLParserOPTIONS_SYMBOL || _la == GoogleSQLParserPARTITION_SYMBOL {
		{
			p.SetState(1901)
			p.Opt_create_index_statement_suffix()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_create_index_statement_suffixContext is an interface to support dynamic dispatch.
type IOpt_create_index_statement_suffixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Partition_by_clause_prefix_no_hint() IPartition_by_clause_prefix_no_hintContext
	Opt_options_list() IOpt_options_listContext
	Spanner_index_interleave_clause() ISpanner_index_interleave_clauseContext

	// IsOpt_create_index_statement_suffixContext differentiates from other interfaces.
	IsOpt_create_index_statement_suffixContext()
}

type Opt_create_index_statement_suffixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_create_index_statement_suffixContext() *Opt_create_index_statement_suffixContext {
	var p = new(Opt_create_index_statement_suffixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_create_index_statement_suffix
	return p
}

func InitEmptyOpt_create_index_statement_suffixContext(p *Opt_create_index_statement_suffixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_create_index_statement_suffix
}

func (*Opt_create_index_statement_suffixContext) IsOpt_create_index_statement_suffixContext() {}

func NewOpt_create_index_statement_suffixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_create_index_statement_suffixContext {
	var p = new(Opt_create_index_statement_suffixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_create_index_statement_suffix

	return p
}

func (s *Opt_create_index_statement_suffixContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_create_index_statement_suffixContext) Partition_by_clause_prefix_no_hint() IPartition_by_clause_prefix_no_hintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartition_by_clause_prefix_no_hintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartition_by_clause_prefix_no_hintContext)
}

func (s *Opt_create_index_statement_suffixContext) Opt_options_list() IOpt_options_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_options_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_options_listContext)
}

func (s *Opt_create_index_statement_suffixContext) Spanner_index_interleave_clause() ISpanner_index_interleave_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISpanner_index_interleave_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISpanner_index_interleave_clauseContext)
}

func (s *Opt_create_index_statement_suffixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_create_index_statement_suffixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_create_index_statement_suffixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_create_index_statement_suffix(s)
	}
}

func (s *Opt_create_index_statement_suffixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_create_index_statement_suffix(s)
	}
}

func (s *Opt_create_index_statement_suffixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_create_index_statement_suffix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_create_index_statement_suffix() (localctx IOpt_create_index_statement_suffixContext) {
	localctx = NewOpt_create_index_statement_suffixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, GoogleSQLParserRULE_opt_create_index_statement_suffix)
	var _la int

	p.SetState(1913)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 155, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1904)
			p.Partition_by_clause_prefix_no_hint()
		}
		p.SetState(1906)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserOPTIONS_SYMBOL {
			{
				p.SetState(1905)
				p.Opt_options_list()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1909)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserOPTIONS_SYMBOL {
			{
				p.SetState(1908)
				p.Opt_options_list()
			}

		}
		{
			p.SetState(1911)
			p.Spanner_index_interleave_clause()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1912)
			p.Opt_options_list()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISpanner_index_interleave_clauseContext is an interface to support dynamic dispatch.
type ISpanner_index_interleave_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	COMMA_SYMBOL() antlr.TerminalNode
	INTERLEAVE_SYMBOL() antlr.TerminalNode
	IN_SYMBOL() antlr.TerminalNode
	Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext

	// IsSpanner_index_interleave_clauseContext differentiates from other interfaces.
	IsSpanner_index_interleave_clauseContext()
}

type Spanner_index_interleave_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySpanner_index_interleave_clauseContext() *Spanner_index_interleave_clauseContext {
	var p = new(Spanner_index_interleave_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_spanner_index_interleave_clause
	return p
}

func InitEmptySpanner_index_interleave_clauseContext(p *Spanner_index_interleave_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_spanner_index_interleave_clause
}

func (*Spanner_index_interleave_clauseContext) IsSpanner_index_interleave_clauseContext() {}

func NewSpanner_index_interleave_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Spanner_index_interleave_clauseContext {
	var p = new(Spanner_index_interleave_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_spanner_index_interleave_clause

	return p
}

func (s *Spanner_index_interleave_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Spanner_index_interleave_clauseContext) COMMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, 0)
}

func (s *Spanner_index_interleave_clauseContext) INTERLEAVE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINTERLEAVE_SYMBOL, 0)
}

func (s *Spanner_index_interleave_clauseContext) IN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIN_SYMBOL, 0)
}

func (s *Spanner_index_interleave_clauseContext) Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMaybe_dashed_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMaybe_dashed_path_expressionContext)
}

func (s *Spanner_index_interleave_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Spanner_index_interleave_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Spanner_index_interleave_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSpanner_index_interleave_clause(s)
	}
}

func (s *Spanner_index_interleave_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSpanner_index_interleave_clause(s)
	}
}

func (s *Spanner_index_interleave_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSpanner_index_interleave_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Spanner_index_interleave_clause() (localctx ISpanner_index_interleave_clauseContext) {
	localctx = NewSpanner_index_interleave_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, GoogleSQLParserRULE_spanner_index_interleave_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1915)
		p.Match(GoogleSQLParserCOMMA_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1916)
		p.Match(GoogleSQLParserINTERLEAVE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1917)
		p.Match(GoogleSQLParserIN_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1918)
		p.Maybe_dashed_path_expression()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIndex_storing_listContext is an interface to support dynamic dispatch.
type IIndex_storing_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	STORING_SYMBOL() antlr.TerminalNode
	Index_storing_expression_list() IIndex_storing_expression_listContext

	// IsIndex_storing_listContext differentiates from other interfaces.
	IsIndex_storing_listContext()
}

type Index_storing_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndex_storing_listContext() *Index_storing_listContext {
	var p = new(Index_storing_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_index_storing_list
	return p
}

func InitEmptyIndex_storing_listContext(p *Index_storing_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_index_storing_list
}

func (*Index_storing_listContext) IsIndex_storing_listContext() {}

func NewIndex_storing_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_storing_listContext {
	var p = new(Index_storing_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_index_storing_list

	return p
}

func (s *Index_storing_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_storing_listContext) STORING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTORING_SYMBOL, 0)
}

func (s *Index_storing_listContext) Index_storing_expression_list() IIndex_storing_expression_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndex_storing_expression_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndex_storing_expression_listContext)
}

func (s *Index_storing_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_storing_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Index_storing_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterIndex_storing_list(s)
	}
}

func (s *Index_storing_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitIndex_storing_list(s)
	}
}

func (s *Index_storing_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitIndex_storing_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Index_storing_list() (localctx IIndex_storing_listContext) {
	localctx = NewIndex_storing_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, GoogleSQLParserRULE_index_storing_list)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1920)
		p.Match(GoogleSQLParserSTORING_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1921)
		p.Index_storing_expression_list()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIndex_storing_expression_listContext is an interface to support dynamic dispatch.
type IIndex_storing_expression_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsIndex_storing_expression_listContext differentiates from other interfaces.
	IsIndex_storing_expression_listContext()
}

type Index_storing_expression_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndex_storing_expression_listContext() *Index_storing_expression_listContext {
	var p = new(Index_storing_expression_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_index_storing_expression_list
	return p
}

func InitEmptyIndex_storing_expression_listContext(p *Index_storing_expression_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_index_storing_expression_list
}

func (*Index_storing_expression_listContext) IsIndex_storing_expression_listContext() {}

func NewIndex_storing_expression_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_storing_expression_listContext {
	var p = new(Index_storing_expression_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_index_storing_expression_list

	return p
}

func (s *Index_storing_expression_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_storing_expression_listContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Index_storing_expression_listContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *Index_storing_expression_listContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Index_storing_expression_listContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Index_storing_expression_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Index_storing_expression_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Index_storing_expression_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_storing_expression_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Index_storing_expression_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterIndex_storing_expression_list(s)
	}
}

func (s *Index_storing_expression_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitIndex_storing_expression_list(s)
	}
}

func (s *Index_storing_expression_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitIndex_storing_expression_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Index_storing_expression_list() (localctx IIndex_storing_expression_listContext) {
	localctx = NewIndex_storing_expression_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, GoogleSQLParserRULE_index_storing_expression_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1923)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1924)
		p.expression(0)
	}
	p.SetState(1929)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(1925)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1926)
			p.expression(0)
		}

		p.SetState(1931)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1932)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIndex_order_by_and_optionsContext is an interface to support dynamic dispatch.
type IIndex_order_by_and_optionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllColumn_ordering_and_options_expr() []IColumn_ordering_and_options_exprContext
	Column_ordering_and_options_expr(i int) IColumn_ordering_and_options_exprContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode
	Index_all_columns() IIndex_all_columnsContext

	// IsIndex_order_by_and_optionsContext differentiates from other interfaces.
	IsIndex_order_by_and_optionsContext()
}

type Index_order_by_and_optionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndex_order_by_and_optionsContext() *Index_order_by_and_optionsContext {
	var p = new(Index_order_by_and_optionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_index_order_by_and_options
	return p
}

func InitEmptyIndex_order_by_and_optionsContext(p *Index_order_by_and_optionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_index_order_by_and_options
}

func (*Index_order_by_and_optionsContext) IsIndex_order_by_and_optionsContext() {}

func NewIndex_order_by_and_optionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_order_by_and_optionsContext {
	var p = new(Index_order_by_and_optionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_index_order_by_and_options

	return p
}

func (s *Index_order_by_and_optionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_order_by_and_optionsContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Index_order_by_and_optionsContext) AllColumn_ordering_and_options_expr() []IColumn_ordering_and_options_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_ordering_and_options_exprContext); ok {
			len++
		}
	}

	tst := make([]IColumn_ordering_and_options_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_ordering_and_options_exprContext); ok {
			tst[i] = t.(IColumn_ordering_and_options_exprContext)
			i++
		}
	}

	return tst
}

func (s *Index_order_by_and_optionsContext) Column_ordering_and_options_expr(i int) IColumn_ordering_and_options_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_ordering_and_options_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_ordering_and_options_exprContext)
}

func (s *Index_order_by_and_optionsContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Index_order_by_and_optionsContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Index_order_by_and_optionsContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Index_order_by_and_optionsContext) Index_all_columns() IIndex_all_columnsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndex_all_columnsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndex_all_columnsContext)
}

func (s *Index_order_by_and_optionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_order_by_and_optionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Index_order_by_and_optionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterIndex_order_by_and_options(s)
	}
}

func (s *Index_order_by_and_optionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitIndex_order_by_and_options(s)
	}
}

func (s *Index_order_by_and_optionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitIndex_order_by_and_options(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Index_order_by_and_options() (localctx IIndex_order_by_and_optionsContext) {
	localctx = NewIndex_order_by_and_optionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, GoogleSQLParserRULE_index_order_by_and_options)
	var _la int

	p.SetState(1946)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 158, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1934)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1935)
			p.Column_ordering_and_options_expr()
		}
		p.SetState(1940)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == GoogleSQLParserCOMMA_SYMBOL {
			{
				p.SetState(1936)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1937)
				p.Column_ordering_and_options_expr()
			}

			p.SetState(1942)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1943)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1945)
			p.Index_all_columns()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIndex_all_columnsContext is an interface to support dynamic dispatch.
type IIndex_all_columnsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	ALL_SYMBOL() antlr.TerminalNode
	COLUMNS_SYMBOL() antlr.TerminalNode
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Opt_with_column_options() IOpt_with_column_optionsContext

	// IsIndex_all_columnsContext differentiates from other interfaces.
	IsIndex_all_columnsContext()
}

type Index_all_columnsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndex_all_columnsContext() *Index_all_columnsContext {
	var p = new(Index_all_columnsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_index_all_columns
	return p
}

func InitEmptyIndex_all_columnsContext(p *Index_all_columnsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_index_all_columns
}

func (*Index_all_columnsContext) IsIndex_all_columnsContext() {}

func NewIndex_all_columnsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_all_columnsContext {
	var p = new(Index_all_columnsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_index_all_columns

	return p
}

func (s *Index_all_columnsContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_all_columnsContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Index_all_columnsContext) ALL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserALL_SYMBOL, 0)
}

func (s *Index_all_columnsContext) COLUMNS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOLUMNS_SYMBOL, 0)
}

func (s *Index_all_columnsContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Index_all_columnsContext) Opt_with_column_options() IOpt_with_column_optionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_with_column_optionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_with_column_optionsContext)
}

func (s *Index_all_columnsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_all_columnsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Index_all_columnsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterIndex_all_columns(s)
	}
}

func (s *Index_all_columnsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitIndex_all_columns(s)
	}
}

func (s *Index_all_columnsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitIndex_all_columns(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Index_all_columns() (localctx IIndex_all_columnsContext) {
	localctx = NewIndex_all_columnsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, GoogleSQLParserRULE_index_all_columns)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1948)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1949)
		p.Match(GoogleSQLParserALL_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1950)
		p.Match(GoogleSQLParserCOLUMNS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1952)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserWITH_SYMBOL {
		{
			p.SetState(1951)
			p.Opt_with_column_options()
		}

	}
	{
		p.SetState(1954)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_with_column_optionsContext is an interface to support dynamic dispatch.
type IOpt_with_column_optionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WITH_SYMBOL() antlr.TerminalNode
	COLUMN_SYMBOL() antlr.TerminalNode
	OPTIONS_SYMBOL() antlr.TerminalNode
	All_column_column_options() IAll_column_column_optionsContext

	// IsOpt_with_column_optionsContext differentiates from other interfaces.
	IsOpt_with_column_optionsContext()
}

type Opt_with_column_optionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_with_column_optionsContext() *Opt_with_column_optionsContext {
	var p = new(Opt_with_column_optionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_with_column_options
	return p
}

func InitEmptyOpt_with_column_optionsContext(p *Opt_with_column_optionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_with_column_options
}

func (*Opt_with_column_optionsContext) IsOpt_with_column_optionsContext() {}

func NewOpt_with_column_optionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_with_column_optionsContext {
	var p = new(Opt_with_column_optionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_with_column_options

	return p
}

func (s *Opt_with_column_optionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_with_column_optionsContext) WITH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWITH_SYMBOL, 0)
}

func (s *Opt_with_column_optionsContext) COLUMN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOLUMN_SYMBOL, 0)
}

func (s *Opt_with_column_optionsContext) OPTIONS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOPTIONS_SYMBOL, 0)
}

func (s *Opt_with_column_optionsContext) All_column_column_options() IAll_column_column_optionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAll_column_column_optionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAll_column_column_optionsContext)
}

func (s *Opt_with_column_optionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_with_column_optionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_with_column_optionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_with_column_options(s)
	}
}

func (s *Opt_with_column_optionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_with_column_options(s)
	}
}

func (s *Opt_with_column_optionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_with_column_options(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_with_column_options() (localctx IOpt_with_column_optionsContext) {
	localctx = NewOpt_with_column_optionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, GoogleSQLParserRULE_opt_with_column_options)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1956)
		p.Match(GoogleSQLParserWITH_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1957)
		p.Match(GoogleSQLParserCOLUMN_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1958)
		p.Match(GoogleSQLParserOPTIONS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1959)
		p.All_column_column_options()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAll_column_column_optionsContext is an interface to support dynamic dispatch.
type IAll_column_column_optionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllColumn_ordering_and_options_expr() []IColumn_ordering_and_options_exprContext
	Column_ordering_and_options_expr(i int) IColumn_ordering_and_options_exprContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsAll_column_column_optionsContext differentiates from other interfaces.
	IsAll_column_column_optionsContext()
}

type All_column_column_optionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAll_column_column_optionsContext() *All_column_column_optionsContext {
	var p = new(All_column_column_optionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_all_column_column_options
	return p
}

func InitEmptyAll_column_column_optionsContext(p *All_column_column_optionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_all_column_column_options
}

func (*All_column_column_optionsContext) IsAll_column_column_optionsContext() {}

func NewAll_column_column_optionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *All_column_column_optionsContext {
	var p = new(All_column_column_optionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_all_column_column_options

	return p
}

func (s *All_column_column_optionsContext) GetParser() antlr.Parser { return s.parser }

func (s *All_column_column_optionsContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *All_column_column_optionsContext) AllColumn_ordering_and_options_expr() []IColumn_ordering_and_options_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_ordering_and_options_exprContext); ok {
			len++
		}
	}

	tst := make([]IColumn_ordering_and_options_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_ordering_and_options_exprContext); ok {
			tst[i] = t.(IColumn_ordering_and_options_exprContext)
			i++
		}
	}

	return tst
}

func (s *All_column_column_optionsContext) Column_ordering_and_options_expr(i int) IColumn_ordering_and_options_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_ordering_and_options_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_ordering_and_options_exprContext)
}

func (s *All_column_column_optionsContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *All_column_column_optionsContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *All_column_column_optionsContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *All_column_column_optionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *All_column_column_optionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *All_column_column_optionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAll_column_column_options(s)
	}
}

func (s *All_column_column_optionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAll_column_column_options(s)
	}
}

func (s *All_column_column_optionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAll_column_column_options(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) All_column_column_options() (localctx IAll_column_column_optionsContext) {
	localctx = NewAll_column_column_optionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, GoogleSQLParserRULE_all_column_column_options)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1961)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1962)
		p.Column_ordering_and_options_expr()
	}
	p.SetState(1967)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(1963)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1964)
			p.Column_ordering_and_options_expr()
		}

		p.SetState(1969)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1970)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumn_ordering_and_options_exprContext is an interface to support dynamic dispatch.
type IColumn_ordering_and_options_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	Collate_clause() ICollate_clauseContext
	Asc_or_desc() IAsc_or_descContext
	Null_order() INull_orderContext
	Opt_options_list() IOpt_options_listContext

	// IsColumn_ordering_and_options_exprContext differentiates from other interfaces.
	IsColumn_ordering_and_options_exprContext()
}

type Column_ordering_and_options_exprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_ordering_and_options_exprContext() *Column_ordering_and_options_exprContext {
	var p = new(Column_ordering_and_options_exprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_column_ordering_and_options_expr
	return p
}

func InitEmptyColumn_ordering_and_options_exprContext(p *Column_ordering_and_options_exprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_column_ordering_and_options_expr
}

func (*Column_ordering_and_options_exprContext) IsColumn_ordering_and_options_exprContext() {}

func NewColumn_ordering_and_options_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_ordering_and_options_exprContext {
	var p = new(Column_ordering_and_options_exprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_column_ordering_and_options_expr

	return p
}

func (s *Column_ordering_and_options_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_ordering_and_options_exprContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Column_ordering_and_options_exprContext) Collate_clause() ICollate_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollate_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollate_clauseContext)
}

func (s *Column_ordering_and_options_exprContext) Asc_or_desc() IAsc_or_descContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAsc_or_descContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAsc_or_descContext)
}

func (s *Column_ordering_and_options_exprContext) Null_order() INull_orderContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INull_orderContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INull_orderContext)
}

func (s *Column_ordering_and_options_exprContext) Opt_options_list() IOpt_options_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_options_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_options_listContext)
}

func (s *Column_ordering_and_options_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_ordering_and_options_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_ordering_and_options_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterColumn_ordering_and_options_expr(s)
	}
}

func (s *Column_ordering_and_options_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitColumn_ordering_and_options_expr(s)
	}
}

func (s *Column_ordering_and_options_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitColumn_ordering_and_options_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Column_ordering_and_options_expr() (localctx IColumn_ordering_and_options_exprContext) {
	localctx = NewColumn_ordering_and_options_exprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, GoogleSQLParserRULE_column_ordering_and_options_expr)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1972)
		p.expression(0)
	}
	p.SetState(1974)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserCOLLATE_SYMBOL {
		{
			p.SetState(1973)
			p.Collate_clause()
		}

	}
	p.SetState(1977)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserASC_SYMBOL || _la == GoogleSQLParserDESC_SYMBOL {
		{
			p.SetState(1976)
			p.Asc_or_desc()
		}

	}
	p.SetState(1980)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserNULLS_SYMBOL {
		{
			p.SetState(1979)
			p.Null_order()
		}

	}
	p.SetState(1983)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOPTIONS_SYMBOL {
		{
			p.SetState(1982)
			p.Opt_options_list()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIndex_unnest_expression_listContext is an interface to support dynamic dispatch.
type IIndex_unnest_expression_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllUnnest_expression_with_opt_alias_and_offset() []IUnnest_expression_with_opt_alias_and_offsetContext
	Unnest_expression_with_opt_alias_and_offset(i int) IUnnest_expression_with_opt_alias_and_offsetContext

	// IsIndex_unnest_expression_listContext differentiates from other interfaces.
	IsIndex_unnest_expression_listContext()
}

type Index_unnest_expression_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndex_unnest_expression_listContext() *Index_unnest_expression_listContext {
	var p = new(Index_unnest_expression_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_index_unnest_expression_list
	return p
}

func InitEmptyIndex_unnest_expression_listContext(p *Index_unnest_expression_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_index_unnest_expression_list
}

func (*Index_unnest_expression_listContext) IsIndex_unnest_expression_listContext() {}

func NewIndex_unnest_expression_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_unnest_expression_listContext {
	var p = new(Index_unnest_expression_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_index_unnest_expression_list

	return p
}

func (s *Index_unnest_expression_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_unnest_expression_listContext) AllUnnest_expression_with_opt_alias_and_offset() []IUnnest_expression_with_opt_alias_and_offsetContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IUnnest_expression_with_opt_alias_and_offsetContext); ok {
			len++
		}
	}

	tst := make([]IUnnest_expression_with_opt_alias_and_offsetContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IUnnest_expression_with_opt_alias_and_offsetContext); ok {
			tst[i] = t.(IUnnest_expression_with_opt_alias_and_offsetContext)
			i++
		}
	}

	return tst
}

func (s *Index_unnest_expression_listContext) Unnest_expression_with_opt_alias_and_offset(i int) IUnnest_expression_with_opt_alias_and_offsetContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnnest_expression_with_opt_alias_and_offsetContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnnest_expression_with_opt_alias_and_offsetContext)
}

func (s *Index_unnest_expression_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_unnest_expression_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Index_unnest_expression_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterIndex_unnest_expression_list(s)
	}
}

func (s *Index_unnest_expression_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitIndex_unnest_expression_list(s)
	}
}

func (s *Index_unnest_expression_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitIndex_unnest_expression_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Index_unnest_expression_list() (localctx IIndex_unnest_expression_listContext) {
	localctx = NewIndex_unnest_expression_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, GoogleSQLParserRULE_index_unnest_expression_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1986)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == GoogleSQLParserUNNEST_SYMBOL {
		{
			p.SetState(1985)
			p.Unnest_expression_with_opt_alias_and_offset()
		}

		p.SetState(1988)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnnest_expression_with_opt_alias_and_offsetContext is an interface to support dynamic dispatch.
type IUnnest_expression_with_opt_alias_and_offsetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Unnest_expression() IUnnest_expressionContext
	As_alias() IAs_aliasContext
	Opt_with_offset_and_alias() IOpt_with_offset_and_aliasContext

	// IsUnnest_expression_with_opt_alias_and_offsetContext differentiates from other interfaces.
	IsUnnest_expression_with_opt_alias_and_offsetContext()
}

type Unnest_expression_with_opt_alias_and_offsetContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnnest_expression_with_opt_alias_and_offsetContext() *Unnest_expression_with_opt_alias_and_offsetContext {
	var p = new(Unnest_expression_with_opt_alias_and_offsetContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unnest_expression_with_opt_alias_and_offset
	return p
}

func InitEmptyUnnest_expression_with_opt_alias_and_offsetContext(p *Unnest_expression_with_opt_alias_and_offsetContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unnest_expression_with_opt_alias_and_offset
}

func (*Unnest_expression_with_opt_alias_and_offsetContext) IsUnnest_expression_with_opt_alias_and_offsetContext() {
}

func NewUnnest_expression_with_opt_alias_and_offsetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unnest_expression_with_opt_alias_and_offsetContext {
	var p = new(Unnest_expression_with_opt_alias_and_offsetContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_unnest_expression_with_opt_alias_and_offset

	return p
}

func (s *Unnest_expression_with_opt_alias_and_offsetContext) GetParser() antlr.Parser {
	return s.parser
}

func (s *Unnest_expression_with_opt_alias_and_offsetContext) Unnest_expression() IUnnest_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnnest_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnnest_expressionContext)
}

func (s *Unnest_expression_with_opt_alias_and_offsetContext) As_alias() IAs_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_aliasContext)
}

func (s *Unnest_expression_with_opt_alias_and_offsetContext) Opt_with_offset_and_alias() IOpt_with_offset_and_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_with_offset_and_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_with_offset_and_aliasContext)
}

func (s *Unnest_expression_with_opt_alias_and_offsetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unnest_expression_with_opt_alias_and_offsetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unnest_expression_with_opt_alias_and_offsetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUnnest_expression_with_opt_alias_and_offset(s)
	}
}

func (s *Unnest_expression_with_opt_alias_and_offsetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUnnest_expression_with_opt_alias_and_offset(s)
	}
}

func (s *Unnest_expression_with_opt_alias_and_offsetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUnnest_expression_with_opt_alias_and_offset(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Unnest_expression_with_opt_alias_and_offset() (localctx IUnnest_expression_with_opt_alias_and_offsetContext) {
	localctx = NewUnnest_expression_with_opt_alias_and_offsetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, GoogleSQLParserRULE_unnest_expression_with_opt_alias_and_offset)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1990)
		p.Unnest_expression()
	}
	p.SetState(1992)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64((_la-56)) & ^0x3f) == 0 && ((int64(1)<<(_la-56))&-6981105432269881343) != 0) || ((int64((_la-120)) & ^0x3f) == 0 && ((int64(1)<<(_la-120))&-1) != 0) || ((int64((_la-184)) & ^0x3f) == 0 && ((int64(1)<<(_la-184))&-1) != 0) || ((int64((_la-248)) & ^0x3f) == 0 && ((int64(1)<<(_la-248))&35184372088703) != 0) || ((int64((_la-338)) & ^0x3f) == 0 && ((int64(1)<<(_la-338))&8161) != 0) {
		{
			p.SetState(1991)
			p.As_alias()
		}

	}
	p.SetState(1995)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserWITH_SYMBOL {
		{
			p.SetState(1994)
			p.Opt_with_offset_and_alias()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOn_path_expressionContext is an interface to support dynamic dispatch.
type IOn_path_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ON_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext

	// IsOn_path_expressionContext differentiates from other interfaces.
	IsOn_path_expressionContext()
}

type On_path_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOn_path_expressionContext() *On_path_expressionContext {
	var p = new(On_path_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_on_path_expression
	return p
}

func InitEmptyOn_path_expressionContext(p *On_path_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_on_path_expression
}

func (*On_path_expressionContext) IsOn_path_expressionContext() {}

func NewOn_path_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *On_path_expressionContext {
	var p = new(On_path_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_on_path_expression

	return p
}

func (s *On_path_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *On_path_expressionContext) ON_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserON_SYMBOL, 0)
}

func (s *On_path_expressionContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *On_path_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *On_path_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *On_path_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOn_path_expression(s)
	}
}

func (s *On_path_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOn_path_expression(s)
	}
}

func (s *On_path_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOn_path_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) On_path_expression() (localctx IOn_path_expressionContext) {
	localctx = NewOn_path_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, GoogleSQLParserRULE_on_path_expression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1997)
		p.Match(GoogleSQLParserON_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1998)
		p.Path_expression()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIndex_typeContext is an interface to support dynamic dispatch.
type IIndex_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SEARCH_SYMBOL() antlr.TerminalNode
	VECTOR_SYMBOL() antlr.TerminalNode

	// IsIndex_typeContext differentiates from other interfaces.
	IsIndex_typeContext()
}

type Index_typeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndex_typeContext() *Index_typeContext {
	var p = new(Index_typeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_index_type
	return p
}

func InitEmptyIndex_typeContext(p *Index_typeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_index_type
}

func (*Index_typeContext) IsIndex_typeContext() {}

func NewIndex_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_typeContext {
	var p = new(Index_typeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_index_type

	return p
}

func (s *Index_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_typeContext) SEARCH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSEARCH_SYMBOL, 0)
}

func (s *Index_typeContext) VECTOR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserVECTOR_SYMBOL, 0)
}

func (s *Index_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Index_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterIndex_type(s)
	}
}

func (s *Index_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitIndex_type(s)
	}
}

func (s *Index_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitIndex_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Index_type() (localctx IIndex_typeContext) {
	localctx = NewIndex_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, GoogleSQLParserRULE_index_type)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2000)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserSEARCH_SYMBOL || _la == GoogleSQLParserVECTOR_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_spanner_null_filteredContext is an interface to support dynamic dispatch.
type IOpt_spanner_null_filteredContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NULL_FILTERED_SYMBOL() antlr.TerminalNode

	// IsOpt_spanner_null_filteredContext differentiates from other interfaces.
	IsOpt_spanner_null_filteredContext()
}

type Opt_spanner_null_filteredContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_spanner_null_filteredContext() *Opt_spanner_null_filteredContext {
	var p = new(Opt_spanner_null_filteredContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_spanner_null_filtered
	return p
}

func InitEmptyOpt_spanner_null_filteredContext(p *Opt_spanner_null_filteredContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_spanner_null_filtered
}

func (*Opt_spanner_null_filteredContext) IsOpt_spanner_null_filteredContext() {}

func NewOpt_spanner_null_filteredContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_spanner_null_filteredContext {
	var p = new(Opt_spanner_null_filteredContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_spanner_null_filtered

	return p
}

func (s *Opt_spanner_null_filteredContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_spanner_null_filteredContext) NULL_FILTERED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNULL_FILTERED_SYMBOL, 0)
}

func (s *Opt_spanner_null_filteredContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_spanner_null_filteredContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_spanner_null_filteredContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_spanner_null_filtered(s)
	}
}

func (s *Opt_spanner_null_filteredContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_spanner_null_filtered(s)
	}
}

func (s *Opt_spanner_null_filteredContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_spanner_null_filtered(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_spanner_null_filtered() (localctx IOpt_spanner_null_filteredContext) {
	localctx = NewOpt_spanner_null_filteredContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, GoogleSQLParserRULE_opt_spanner_null_filtered)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2002)
		p.Match(GoogleSQLParserNULL_FILTERED_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_procedure_statementContext is an interface to support dynamic dispatch.
type ICreate_procedure_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CREATE_SYMBOL() antlr.TerminalNode
	PROCEDURE_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext
	Procedure_parameters() IProcedure_parametersContext
	Begin_end_block_or_language_as_code() IBegin_end_block_or_language_as_codeContext
	Opt_or_replace() IOpt_or_replaceContext
	Opt_create_scope() IOpt_create_scopeContext
	Opt_if_not_exists() IOpt_if_not_existsContext
	Opt_external_security_clause() IOpt_external_security_clauseContext
	With_connection_clause() IWith_connection_clauseContext
	Opt_options_list() IOpt_options_listContext

	// IsCreate_procedure_statementContext differentiates from other interfaces.
	IsCreate_procedure_statementContext()
}

type Create_procedure_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_procedure_statementContext() *Create_procedure_statementContext {
	var p = new(Create_procedure_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_procedure_statement
	return p
}

func InitEmptyCreate_procedure_statementContext(p *Create_procedure_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_procedure_statement
}

func (*Create_procedure_statementContext) IsCreate_procedure_statementContext() {}

func NewCreate_procedure_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_procedure_statementContext {
	var p = new(Create_procedure_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_create_procedure_statement

	return p
}

func (s *Create_procedure_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_procedure_statementContext) CREATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCREATE_SYMBOL, 0)
}

func (s *Create_procedure_statementContext) PROCEDURE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPROCEDURE_SYMBOL, 0)
}

func (s *Create_procedure_statementContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Create_procedure_statementContext) Procedure_parameters() IProcedure_parametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProcedure_parametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProcedure_parametersContext)
}

func (s *Create_procedure_statementContext) Begin_end_block_or_language_as_code() IBegin_end_block_or_language_as_codeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBegin_end_block_or_language_as_codeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBegin_end_block_or_language_as_codeContext)
}

func (s *Create_procedure_statementContext) Opt_or_replace() IOpt_or_replaceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_or_replaceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_or_replaceContext)
}

func (s *Create_procedure_statementContext) Opt_create_scope() IOpt_create_scopeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_create_scopeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_create_scopeContext)
}

func (s *Create_procedure_statementContext) Opt_if_not_exists() IOpt_if_not_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_if_not_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_if_not_existsContext)
}

func (s *Create_procedure_statementContext) Opt_external_security_clause() IOpt_external_security_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_external_security_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_external_security_clauseContext)
}

func (s *Create_procedure_statementContext) With_connection_clause() IWith_connection_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_connection_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_connection_clauseContext)
}

func (s *Create_procedure_statementContext) Opt_options_list() IOpt_options_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_options_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_options_listContext)
}

func (s *Create_procedure_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_procedure_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_procedure_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCreate_procedure_statement(s)
	}
}

func (s *Create_procedure_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCreate_procedure_statement(s)
	}
}

func (s *Create_procedure_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCreate_procedure_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Create_procedure_statement() (localctx ICreate_procedure_statementContext) {
	localctx = NewCreate_procedure_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, GoogleSQLParserRULE_create_procedure_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2004)
		p.Match(GoogleSQLParserCREATE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2006)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOR_SYMBOL {
		{
			p.SetState(2005)
			p.Opt_or_replace()
		}

	}
	p.SetState(2009)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-224)) & ^0x3f) == 0 && ((int64(1)<<(_la-224))&105553116266529) != 0 {
		{
			p.SetState(2008)
			p.Opt_create_scope()
		}

	}
	{
		p.SetState(2011)
		p.Match(GoogleSQLParserPROCEDURE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2013)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserIF_SYMBOL {
		{
			p.SetState(2012)
			p.Opt_if_not_exists()
		}

	}
	{
		p.SetState(2015)
		p.Path_expression()
	}
	{
		p.SetState(2016)
		p.Procedure_parameters()
	}
	p.SetState(2018)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserEXTERNAL_SYMBOL {
		{
			p.SetState(2017)
			p.Opt_external_security_clause()
		}

	}
	p.SetState(2021)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserWITH_SYMBOL {
		{
			p.SetState(2020)
			p.With_connection_clause()
		}

	}
	p.SetState(2024)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOPTIONS_SYMBOL {
		{
			p.SetState(2023)
			p.Opt_options_list()
		}

	}
	{
		p.SetState(2026)
		p.Begin_end_block_or_language_as_code()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBegin_end_block_or_language_as_codeContext is an interface to support dynamic dispatch.
type IBegin_end_block_or_language_as_codeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Begin_end_block() IBegin_end_blockContext
	LANGUAGE_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext
	Opt_as_code() IOpt_as_codeContext

	// IsBegin_end_block_or_language_as_codeContext differentiates from other interfaces.
	IsBegin_end_block_or_language_as_codeContext()
}

type Begin_end_block_or_language_as_codeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBegin_end_block_or_language_as_codeContext() *Begin_end_block_or_language_as_codeContext {
	var p = new(Begin_end_block_or_language_as_codeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_begin_end_block_or_language_as_code
	return p
}

func InitEmptyBegin_end_block_or_language_as_codeContext(p *Begin_end_block_or_language_as_codeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_begin_end_block_or_language_as_code
}

func (*Begin_end_block_or_language_as_codeContext) IsBegin_end_block_or_language_as_codeContext() {}

func NewBegin_end_block_or_language_as_codeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Begin_end_block_or_language_as_codeContext {
	var p = new(Begin_end_block_or_language_as_codeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_begin_end_block_or_language_as_code

	return p
}

func (s *Begin_end_block_or_language_as_codeContext) GetParser() antlr.Parser { return s.parser }

func (s *Begin_end_block_or_language_as_codeContext) Begin_end_block() IBegin_end_blockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBegin_end_blockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBegin_end_blockContext)
}

func (s *Begin_end_block_or_language_as_codeContext) LANGUAGE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLANGUAGE_SYMBOL, 0)
}

func (s *Begin_end_block_or_language_as_codeContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Begin_end_block_or_language_as_codeContext) Opt_as_code() IOpt_as_codeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_as_codeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_as_codeContext)
}

func (s *Begin_end_block_or_language_as_codeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Begin_end_block_or_language_as_codeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Begin_end_block_or_language_as_codeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBegin_end_block_or_language_as_code(s)
	}
}

func (s *Begin_end_block_or_language_as_codeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBegin_end_block_or_language_as_code(s)
	}
}

func (s *Begin_end_block_or_language_as_codeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBegin_end_block_or_language_as_code(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Begin_end_block_or_language_as_code() (localctx IBegin_end_block_or_language_as_codeContext) {
	localctx = NewBegin_end_block_or_language_as_codeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, GoogleSQLParserRULE_begin_end_block_or_language_as_code)
	var _la int

	p.SetState(2034)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserBEGIN_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2028)
			p.Begin_end_block()
		}

	case GoogleSQLParserLANGUAGE_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2029)
			p.Match(GoogleSQLParserLANGUAGE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2030)
			p.Identifier()
		}
		p.SetState(2032)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAS_SYMBOL {
			{
				p.SetState(2031)
				p.Opt_as_code()
			}

		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBegin_end_blockContext is an interface to support dynamic dispatch.
type IBegin_end_blockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BEGIN_SYMBOL() antlr.TerminalNode
	END_SYMBOL() antlr.TerminalNode
	Statement_list() IStatement_listContext
	Opt_exception_handler() IOpt_exception_handlerContext

	// IsBegin_end_blockContext differentiates from other interfaces.
	IsBegin_end_blockContext()
}

type Begin_end_blockContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBegin_end_blockContext() *Begin_end_blockContext {
	var p = new(Begin_end_blockContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_begin_end_block
	return p
}

func InitEmptyBegin_end_blockContext(p *Begin_end_blockContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_begin_end_block
}

func (*Begin_end_blockContext) IsBegin_end_blockContext() {}

func NewBegin_end_blockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Begin_end_blockContext {
	var p = new(Begin_end_blockContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_begin_end_block

	return p
}

func (s *Begin_end_blockContext) GetParser() antlr.Parser { return s.parser }

func (s *Begin_end_blockContext) BEGIN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBEGIN_SYMBOL, 0)
}

func (s *Begin_end_blockContext) END_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEND_SYMBOL, 0)
}

func (s *Begin_end_blockContext) Statement_list() IStatement_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatement_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatement_listContext)
}

func (s *Begin_end_blockContext) Opt_exception_handler() IOpt_exception_handlerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_exception_handlerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_exception_handlerContext)
}

func (s *Begin_end_blockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Begin_end_blockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Begin_end_blockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBegin_end_block(s)
	}
}

func (s *Begin_end_blockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBegin_end_block(s)
	}
}

func (s *Begin_end_blockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBegin_end_block(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Begin_end_block() (localctx IBegin_end_blockContext) {
	localctx = NewBegin_end_blockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, GoogleSQLParserRULE_begin_end_block)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2036)
		p.Match(GoogleSQLParserBEGIN_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2038)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 176, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2037)
			p.Statement_list()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(2041)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserEXCEPTION_SYMBOL {
		{
			p.SetState(2040)
			p.Opt_exception_handler()
		}

	}
	{
		p.SetState(2043)
		p.Match(GoogleSQLParserEND_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_exception_handlerContext is an interface to support dynamic dispatch.
type IOpt_exception_handlerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EXCEPTION_SYMBOL() antlr.TerminalNode
	WHEN_SYMBOL() antlr.TerminalNode
	ERROR_SYMBOL() antlr.TerminalNode
	THEN_SYMBOL() antlr.TerminalNode
	Statement_list() IStatement_listContext

	// IsOpt_exception_handlerContext differentiates from other interfaces.
	IsOpt_exception_handlerContext()
}

type Opt_exception_handlerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_exception_handlerContext() *Opt_exception_handlerContext {
	var p = new(Opt_exception_handlerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_exception_handler
	return p
}

func InitEmptyOpt_exception_handlerContext(p *Opt_exception_handlerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_exception_handler
}

func (*Opt_exception_handlerContext) IsOpt_exception_handlerContext() {}

func NewOpt_exception_handlerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_exception_handlerContext {
	var p = new(Opt_exception_handlerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_exception_handler

	return p
}

func (s *Opt_exception_handlerContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_exception_handlerContext) EXCEPTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXCEPTION_SYMBOL, 0)
}

func (s *Opt_exception_handlerContext) WHEN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWHEN_SYMBOL, 0)
}

func (s *Opt_exception_handlerContext) ERROR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserERROR_SYMBOL, 0)
}

func (s *Opt_exception_handlerContext) THEN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTHEN_SYMBOL, 0)
}

func (s *Opt_exception_handlerContext) Statement_list() IStatement_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatement_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatement_listContext)
}

func (s *Opt_exception_handlerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_exception_handlerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_exception_handlerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_exception_handler(s)
	}
}

func (s *Opt_exception_handlerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_exception_handler(s)
	}
}

func (s *Opt_exception_handlerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_exception_handler(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_exception_handler() (localctx IOpt_exception_handlerContext) {
	localctx = NewOpt_exception_handlerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, GoogleSQLParserRULE_opt_exception_handler)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2045)
		p.Match(GoogleSQLParserEXCEPTION_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2046)
		p.Match(GoogleSQLParserWHEN_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2047)
		p.Match(GoogleSQLParserERROR_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2048)
		p.Match(GoogleSQLParserTHEN_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2049)
		p.Statement_list()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStatement_listContext is an interface to support dynamic dispatch.
type IStatement_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Unterminated_non_empty_statement_list() IUnterminated_non_empty_statement_listContext
	SEMI_SYMBOL() antlr.TerminalNode

	// IsStatement_listContext differentiates from other interfaces.
	IsStatement_listContext()
}

type Statement_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatement_listContext() *Statement_listContext {
	var p = new(Statement_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_statement_list
	return p
}

func InitEmptyStatement_listContext(p *Statement_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_statement_list
}

func (*Statement_listContext) IsStatement_listContext() {}

func NewStatement_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Statement_listContext {
	var p = new(Statement_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_statement_list

	return p
}

func (s *Statement_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Statement_listContext) Unterminated_non_empty_statement_list() IUnterminated_non_empty_statement_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnterminated_non_empty_statement_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnterminated_non_empty_statement_listContext)
}

func (s *Statement_listContext) SEMI_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSEMI_SYMBOL, 0)
}

func (s *Statement_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Statement_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Statement_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStatement_list(s)
	}
}

func (s *Statement_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStatement_list(s)
	}
}

func (s *Statement_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStatement_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Statement_list() (localctx IStatement_listContext) {
	localctx = NewStatement_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, GoogleSQLParserRULE_statement_list)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2051)
		p.Unterminated_non_empty_statement_list()
	}
	{
		p.SetState(2052)
		p.Match(GoogleSQLParserSEMI_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnterminated_non_empty_statement_listContext is an interface to support dynamic dispatch.
type IUnterminated_non_empty_statement_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllUnterminated_statement() []IUnterminated_statementContext
	Unterminated_statement(i int) IUnterminated_statementContext
	AllSEMI_SYMBOL() []antlr.TerminalNode
	SEMI_SYMBOL(i int) antlr.TerminalNode

	// IsUnterminated_non_empty_statement_listContext differentiates from other interfaces.
	IsUnterminated_non_empty_statement_listContext()
}

type Unterminated_non_empty_statement_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnterminated_non_empty_statement_listContext() *Unterminated_non_empty_statement_listContext {
	var p = new(Unterminated_non_empty_statement_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unterminated_non_empty_statement_list
	return p
}

func InitEmptyUnterminated_non_empty_statement_listContext(p *Unterminated_non_empty_statement_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unterminated_non_empty_statement_list
}

func (*Unterminated_non_empty_statement_listContext) IsUnterminated_non_empty_statement_listContext() {
}

func NewUnterminated_non_empty_statement_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unterminated_non_empty_statement_listContext {
	var p = new(Unterminated_non_empty_statement_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_unterminated_non_empty_statement_list

	return p
}

func (s *Unterminated_non_empty_statement_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Unterminated_non_empty_statement_listContext) AllUnterminated_statement() []IUnterminated_statementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IUnterminated_statementContext); ok {
			len++
		}
	}

	tst := make([]IUnterminated_statementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IUnterminated_statementContext); ok {
			tst[i] = t.(IUnterminated_statementContext)
			i++
		}
	}

	return tst
}

func (s *Unterminated_non_empty_statement_listContext) Unterminated_statement(i int) IUnterminated_statementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnterminated_statementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnterminated_statementContext)
}

func (s *Unterminated_non_empty_statement_listContext) AllSEMI_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserSEMI_SYMBOL)
}

func (s *Unterminated_non_empty_statement_listContext) SEMI_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSEMI_SYMBOL, i)
}

func (s *Unterminated_non_empty_statement_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unterminated_non_empty_statement_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unterminated_non_empty_statement_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUnterminated_non_empty_statement_list(s)
	}
}

func (s *Unterminated_non_empty_statement_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUnterminated_non_empty_statement_list(s)
	}
}

func (s *Unterminated_non_empty_statement_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUnterminated_non_empty_statement_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Unterminated_non_empty_statement_list() (localctx IUnterminated_non_empty_statement_listContext) {
	localctx = NewUnterminated_non_empty_statement_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, GoogleSQLParserRULE_unterminated_non_empty_statement_list)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2054)
		p.Unterminated_statement()
	}
	p.SetState(2059)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 178, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2055)
				p.Match(GoogleSQLParserSEMI_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(2056)
				p.Unterminated_statement()
			}

		}
		p.SetState(2061)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 178, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnterminated_statementContext is an interface to support dynamic dispatch.
type IUnterminated_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Unterminated_sql_statement() IUnterminated_sql_statementContext
	Unterminated_script_statement() IUnterminated_script_statementContext

	// IsUnterminated_statementContext differentiates from other interfaces.
	IsUnterminated_statementContext()
}

type Unterminated_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnterminated_statementContext() *Unterminated_statementContext {
	var p = new(Unterminated_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unterminated_statement
	return p
}

func InitEmptyUnterminated_statementContext(p *Unterminated_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unterminated_statement
}

func (*Unterminated_statementContext) IsUnterminated_statementContext() {}

func NewUnterminated_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unterminated_statementContext {
	var p = new(Unterminated_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_unterminated_statement

	return p
}

func (s *Unterminated_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Unterminated_statementContext) Unterminated_sql_statement() IUnterminated_sql_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnterminated_sql_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnterminated_sql_statementContext)
}

func (s *Unterminated_statementContext) Unterminated_script_statement() IUnterminated_script_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnterminated_script_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnterminated_script_statementContext)
}

func (s *Unterminated_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unterminated_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unterminated_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUnterminated_statement(s)
	}
}

func (s *Unterminated_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUnterminated_statement(s)
	}
}

func (s *Unterminated_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUnterminated_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Unterminated_statement() (localctx IUnterminated_statementContext) {
	localctx = NewUnterminated_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, GoogleSQLParserRULE_unterminated_statement)
	p.SetState(2064)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 179, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2062)
			p.Unterminated_sql_statement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2063)
			p.Unterminated_script_statement()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnterminated_script_statementContext is an interface to support dynamic dispatch.
type IUnterminated_script_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	If_statement() IIf_statementContext
	Case_statement() ICase_statementContext
	Variable_declaration() IVariable_declarationContext
	Break_statement() IBreak_statementContext
	Continue_statement() IContinue_statementContext
	Return_statement() IReturn_statementContext
	Raise_statement() IRaise_statementContext
	Unterminated_unlabeled_script_statement() IUnterminated_unlabeled_script_statementContext
	Label() ILabelContext
	COLON_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext

	// IsUnterminated_script_statementContext differentiates from other interfaces.
	IsUnterminated_script_statementContext()
}

type Unterminated_script_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnterminated_script_statementContext() *Unterminated_script_statementContext {
	var p = new(Unterminated_script_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unterminated_script_statement
	return p
}

func InitEmptyUnterminated_script_statementContext(p *Unterminated_script_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unterminated_script_statement
}

func (*Unterminated_script_statementContext) IsUnterminated_script_statementContext() {}

func NewUnterminated_script_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unterminated_script_statementContext {
	var p = new(Unterminated_script_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_unterminated_script_statement

	return p
}

func (s *Unterminated_script_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Unterminated_script_statementContext) If_statement() IIf_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_statementContext)
}

func (s *Unterminated_script_statementContext) Case_statement() ICase_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICase_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICase_statementContext)
}

func (s *Unterminated_script_statementContext) Variable_declaration() IVariable_declarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariable_declarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariable_declarationContext)
}

func (s *Unterminated_script_statementContext) Break_statement() IBreak_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBreak_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBreak_statementContext)
}

func (s *Unterminated_script_statementContext) Continue_statement() IContinue_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IContinue_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IContinue_statementContext)
}

func (s *Unterminated_script_statementContext) Return_statement() IReturn_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReturn_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReturn_statementContext)
}

func (s *Unterminated_script_statementContext) Raise_statement() IRaise_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRaise_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRaise_statementContext)
}

func (s *Unterminated_script_statementContext) Unterminated_unlabeled_script_statement() IUnterminated_unlabeled_script_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnterminated_unlabeled_script_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnterminated_unlabeled_script_statementContext)
}

func (s *Unterminated_script_statementContext) Label() ILabelContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabelContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabelContext)
}

func (s *Unterminated_script_statementContext) COLON_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOLON_SYMBOL, 0)
}

func (s *Unterminated_script_statementContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Unterminated_script_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unterminated_script_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unterminated_script_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUnterminated_script_statement(s)
	}
}

func (s *Unterminated_script_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUnterminated_script_statement(s)
	}
}

func (s *Unterminated_script_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUnterminated_script_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Unterminated_script_statement() (localctx IUnterminated_script_statementContext) {
	localctx = NewUnterminated_script_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, GoogleSQLParserRULE_unterminated_script_statement)
	var _la int

	p.SetState(2080)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 181, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2066)
			p.If_statement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2067)
			p.Case_statement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2068)
			p.Variable_declaration()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2069)
			p.Break_statement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2070)
			p.Continue_statement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2071)
			p.Return_statement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2072)
			p.Raise_statement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2073)
			p.Unterminated_unlabeled_script_statement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2074)
			p.Label()
		}
		{
			p.SetState(2075)
			p.Match(GoogleSQLParserCOLON_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2076)
			p.Unterminated_unlabeled_script_statement()
		}
		p.SetState(2078)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64((_la-72)) & ^0x3f) == 0 && ((int64(1)<<(_la-72))&-106523215214079) != 0) || ((int64((_la-136)) & ^0x3f) == 0 && ((int64(1)<<(_la-136))&-1) != 0) || ((int64((_la-200)) & ^0x3f) == 0 && ((int64(1)<<(_la-200))&-36028797018963969) != 0) || ((int64((_la-264)) & ^0x3f) == 0 && ((int64(1)<<(_la-264))&536870911) != 0) || ((int64((_la-338)) & ^0x3f) == 0 && ((int64(1)<<(_la-338))&8161) != 0) {
			{
				p.SetState(2077)
				p.Identifier()
			}

		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILabelContext is an interface to support dynamic dispatch.
type ILabelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext

	// IsLabelContext differentiates from other interfaces.
	IsLabelContext()
}

type LabelContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelContext() *LabelContext {
	var p = new(LabelContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_label
	return p
}

func InitEmptyLabelContext(p *LabelContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_label
}

func (*LabelContext) IsLabelContext() {}

func NewLabelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelContext {
	var p = new(LabelContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_label

	return p
}

func (s *LabelContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *LabelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterLabel(s)
	}
}

func (s *LabelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitLabel(s)
	}
}

func (s *LabelContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitLabel(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Label() (localctx ILabelContext) {
	localctx = NewLabelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, GoogleSQLParserRULE_label)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2082)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnterminated_unlabeled_script_statementContext is an interface to support dynamic dispatch.
type IUnterminated_unlabeled_script_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Begin_end_block() IBegin_end_blockContext
	While_statement() IWhile_statementContext
	Loop_statement() ILoop_statementContext
	Repeat_statement() IRepeat_statementContext
	For_in_statement() IFor_in_statementContext

	// IsUnterminated_unlabeled_script_statementContext differentiates from other interfaces.
	IsUnterminated_unlabeled_script_statementContext()
}

type Unterminated_unlabeled_script_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnterminated_unlabeled_script_statementContext() *Unterminated_unlabeled_script_statementContext {
	var p = new(Unterminated_unlabeled_script_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unterminated_unlabeled_script_statement
	return p
}

func InitEmptyUnterminated_unlabeled_script_statementContext(p *Unterminated_unlabeled_script_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unterminated_unlabeled_script_statement
}

func (*Unterminated_unlabeled_script_statementContext) IsUnterminated_unlabeled_script_statementContext() {
}

func NewUnterminated_unlabeled_script_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unterminated_unlabeled_script_statementContext {
	var p = new(Unterminated_unlabeled_script_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_unterminated_unlabeled_script_statement

	return p
}

func (s *Unterminated_unlabeled_script_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Unterminated_unlabeled_script_statementContext) Begin_end_block() IBegin_end_blockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBegin_end_blockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBegin_end_blockContext)
}

func (s *Unterminated_unlabeled_script_statementContext) While_statement() IWhile_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhile_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhile_statementContext)
}

func (s *Unterminated_unlabeled_script_statementContext) Loop_statement() ILoop_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILoop_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILoop_statementContext)
}

func (s *Unterminated_unlabeled_script_statementContext) Repeat_statement() IRepeat_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRepeat_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRepeat_statementContext)
}

func (s *Unterminated_unlabeled_script_statementContext) For_in_statement() IFor_in_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFor_in_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFor_in_statementContext)
}

func (s *Unterminated_unlabeled_script_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unterminated_unlabeled_script_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unterminated_unlabeled_script_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUnterminated_unlabeled_script_statement(s)
	}
}

func (s *Unterminated_unlabeled_script_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUnterminated_unlabeled_script_statement(s)
	}
}

func (s *Unterminated_unlabeled_script_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUnterminated_unlabeled_script_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Unterminated_unlabeled_script_statement() (localctx IUnterminated_unlabeled_script_statementContext) {
	localctx = NewUnterminated_unlabeled_script_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, GoogleSQLParserRULE_unterminated_unlabeled_script_statement)
	p.SetState(2089)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserBEGIN_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2084)
			p.Begin_end_block()
		}

	case GoogleSQLParserWHILE_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2085)
			p.While_statement()
		}

	case GoogleSQLParserLOOP_SYMBOL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2086)
			p.Loop_statement()
		}

	case GoogleSQLParserREPEAT_SYMBOL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2087)
			p.Repeat_statement()
		}

	case GoogleSQLParserFOR_SYMBOL:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2088)
			p.For_in_statement()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFor_in_statementContext is an interface to support dynamic dispatch.
type IFor_in_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllFOR_SYMBOL() []antlr.TerminalNode
	FOR_SYMBOL(i int) antlr.TerminalNode
	Identifier() IIdentifierContext
	IN_SYMBOL() antlr.TerminalNode
	Parenthesized_query() IParenthesized_queryContext
	DO_SYMBOL() antlr.TerminalNode
	END_SYMBOL() antlr.TerminalNode
	Statement_list() IStatement_listContext

	// IsFor_in_statementContext differentiates from other interfaces.
	IsFor_in_statementContext()
}

type For_in_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFor_in_statementContext() *For_in_statementContext {
	var p = new(For_in_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_for_in_statement
	return p
}

func InitEmptyFor_in_statementContext(p *For_in_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_for_in_statement
}

func (*For_in_statementContext) IsFor_in_statementContext() {}

func NewFor_in_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *For_in_statementContext {
	var p = new(For_in_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_for_in_statement

	return p
}

func (s *For_in_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *For_in_statementContext) AllFOR_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserFOR_SYMBOL)
}

func (s *For_in_statementContext) FOR_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFOR_SYMBOL, i)
}

func (s *For_in_statementContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *For_in_statementContext) IN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIN_SYMBOL, 0)
}

func (s *For_in_statementContext) Parenthesized_query() IParenthesized_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesized_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesized_queryContext)
}

func (s *For_in_statementContext) DO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDO_SYMBOL, 0)
}

func (s *For_in_statementContext) END_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEND_SYMBOL, 0)
}

func (s *For_in_statementContext) Statement_list() IStatement_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatement_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatement_listContext)
}

func (s *For_in_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *For_in_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *For_in_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFor_in_statement(s)
	}
}

func (s *For_in_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFor_in_statement(s)
	}
}

func (s *For_in_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFor_in_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) For_in_statement() (localctx IFor_in_statementContext) {
	localctx = NewFor_in_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, GoogleSQLParserRULE_for_in_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2091)
		p.Match(GoogleSQLParserFOR_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2092)
		p.Identifier()
	}
	{
		p.SetState(2093)
		p.Match(GoogleSQLParserIN_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2094)
		p.Parenthesized_query()
	}
	{
		p.SetState(2095)
		p.Match(GoogleSQLParserDO_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2097)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4611686022722879488) != 0) || ((int64((_la-68)) & ^0x3f) == 0 && ((int64(1)<<(_la-68))&-1704354230001645) != 0) || ((int64((_la-132)) & ^0x3f) == 0 && ((int64(1)<<(_la-132))&-1) != 0) || ((int64((_la-196)) & ^0x3f) == 0 && ((int64(1)<<(_la-196))&-1) != 0) || ((int64((_la-260)) & ^0x3f) == 0 && ((int64(1)<<(_la-260))&4440996184063) != 0) || ((int64((_la-325)) & ^0x3f) == 0 && ((int64(1)<<(_la-325))&66953217) != 0) {
		{
			p.SetState(2096)
			p.Statement_list()
		}

	}
	{
		p.SetState(2099)
		p.Match(GoogleSQLParserEND_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2100)
		p.Match(GoogleSQLParserFOR_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRepeat_statementContext is an interface to support dynamic dispatch.
type IRepeat_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllREPEAT_SYMBOL() []antlr.TerminalNode
	REPEAT_SYMBOL(i int) antlr.TerminalNode
	Until_clause() IUntil_clauseContext
	END_SYMBOL() antlr.TerminalNode
	Statement_list() IStatement_listContext

	// IsRepeat_statementContext differentiates from other interfaces.
	IsRepeat_statementContext()
}

type Repeat_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRepeat_statementContext() *Repeat_statementContext {
	var p = new(Repeat_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_repeat_statement
	return p
}

func InitEmptyRepeat_statementContext(p *Repeat_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_repeat_statement
}

func (*Repeat_statementContext) IsRepeat_statementContext() {}

func NewRepeat_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Repeat_statementContext {
	var p = new(Repeat_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_repeat_statement

	return p
}

func (s *Repeat_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Repeat_statementContext) AllREPEAT_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserREPEAT_SYMBOL)
}

func (s *Repeat_statementContext) REPEAT_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPEAT_SYMBOL, i)
}

func (s *Repeat_statementContext) Until_clause() IUntil_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUntil_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUntil_clauseContext)
}

func (s *Repeat_statementContext) END_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEND_SYMBOL, 0)
}

func (s *Repeat_statementContext) Statement_list() IStatement_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatement_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatement_listContext)
}

func (s *Repeat_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Repeat_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Repeat_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRepeat_statement(s)
	}
}

func (s *Repeat_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRepeat_statement(s)
	}
}

func (s *Repeat_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRepeat_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Repeat_statement() (localctx IRepeat_statementContext) {
	localctx = NewRepeat_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, GoogleSQLParserRULE_repeat_statement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2102)
		p.Match(GoogleSQLParserREPEAT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2104)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 184, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2103)
			p.Statement_list()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(2106)
		p.Until_clause()
	}
	{
		p.SetState(2107)
		p.Match(GoogleSQLParserEND_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2108)
		p.Match(GoogleSQLParserREPEAT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUntil_clauseContext is an interface to support dynamic dispatch.
type IUntil_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UNTIL_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsUntil_clauseContext differentiates from other interfaces.
	IsUntil_clauseContext()
}

type Until_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUntil_clauseContext() *Until_clauseContext {
	var p = new(Until_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_until_clause
	return p
}

func InitEmptyUntil_clauseContext(p *Until_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_until_clause
}

func (*Until_clauseContext) IsUntil_clauseContext() {}

func NewUntil_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Until_clauseContext {
	var p = new(Until_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_until_clause

	return p
}

func (s *Until_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Until_clauseContext) UNTIL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNTIL_SYMBOL, 0)
}

func (s *Until_clauseContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Until_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Until_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Until_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUntil_clause(s)
	}
}

func (s *Until_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUntil_clause(s)
	}
}

func (s *Until_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUntil_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Until_clause() (localctx IUntil_clauseContext) {
	localctx = NewUntil_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, GoogleSQLParserRULE_until_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2110)
		p.Match(GoogleSQLParserUNTIL_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2111)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILoop_statementContext is an interface to support dynamic dispatch.
type ILoop_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllLOOP_SYMBOL() []antlr.TerminalNode
	LOOP_SYMBOL(i int) antlr.TerminalNode
	END_SYMBOL() antlr.TerminalNode
	Statement_list() IStatement_listContext

	// IsLoop_statementContext differentiates from other interfaces.
	IsLoop_statementContext()
}

type Loop_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoop_statementContext() *Loop_statementContext {
	var p = new(Loop_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_loop_statement
	return p
}

func InitEmptyLoop_statementContext(p *Loop_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_loop_statement
}

func (*Loop_statementContext) IsLoop_statementContext() {}

func NewLoop_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Loop_statementContext {
	var p = new(Loop_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_loop_statement

	return p
}

func (s *Loop_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Loop_statementContext) AllLOOP_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserLOOP_SYMBOL)
}

func (s *Loop_statementContext) LOOP_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLOOP_SYMBOL, i)
}

func (s *Loop_statementContext) END_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEND_SYMBOL, 0)
}

func (s *Loop_statementContext) Statement_list() IStatement_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatement_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatement_listContext)
}

func (s *Loop_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Loop_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Loop_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterLoop_statement(s)
	}
}

func (s *Loop_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitLoop_statement(s)
	}
}

func (s *Loop_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitLoop_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Loop_statement() (localctx ILoop_statementContext) {
	localctx = NewLoop_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, GoogleSQLParserRULE_loop_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2113)
		p.Match(GoogleSQLParserLOOP_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2115)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4611686022722879488) != 0) || ((int64((_la-68)) & ^0x3f) == 0 && ((int64(1)<<(_la-68))&-1704354230001645) != 0) || ((int64((_la-132)) & ^0x3f) == 0 && ((int64(1)<<(_la-132))&-1) != 0) || ((int64((_la-196)) & ^0x3f) == 0 && ((int64(1)<<(_la-196))&-1) != 0) || ((int64((_la-260)) & ^0x3f) == 0 && ((int64(1)<<(_la-260))&4440996184063) != 0) || ((int64((_la-325)) & ^0x3f) == 0 && ((int64(1)<<(_la-325))&66953217) != 0) {
		{
			p.SetState(2114)
			p.Statement_list()
		}

	}
	{
		p.SetState(2117)
		p.Match(GoogleSQLParserEND_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2118)
		p.Match(GoogleSQLParserLOOP_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWhile_statementContext is an interface to support dynamic dispatch.
type IWhile_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllWHILE_SYMBOL() []antlr.TerminalNode
	WHILE_SYMBOL(i int) antlr.TerminalNode
	Expression() IExpressionContext
	DO_SYMBOL() antlr.TerminalNode
	END_SYMBOL() antlr.TerminalNode
	Statement_list() IStatement_listContext

	// IsWhile_statementContext differentiates from other interfaces.
	IsWhile_statementContext()
}

type While_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhile_statementContext() *While_statementContext {
	var p = new(While_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_while_statement
	return p
}

func InitEmptyWhile_statementContext(p *While_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_while_statement
}

func (*While_statementContext) IsWhile_statementContext() {}

func NewWhile_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *While_statementContext {
	var p = new(While_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_while_statement

	return p
}

func (s *While_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *While_statementContext) AllWHILE_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserWHILE_SYMBOL)
}

func (s *While_statementContext) WHILE_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWHILE_SYMBOL, i)
}

func (s *While_statementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *While_statementContext) DO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDO_SYMBOL, 0)
}

func (s *While_statementContext) END_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEND_SYMBOL, 0)
}

func (s *While_statementContext) Statement_list() IStatement_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatement_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatement_listContext)
}

func (s *While_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *While_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *While_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWhile_statement(s)
	}
}

func (s *While_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWhile_statement(s)
	}
}

func (s *While_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWhile_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) While_statement() (localctx IWhile_statementContext) {
	localctx = NewWhile_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, GoogleSQLParserRULE_while_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2120)
		p.Match(GoogleSQLParserWHILE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2121)
		p.expression(0)
	}
	{
		p.SetState(2122)
		p.Match(GoogleSQLParserDO_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2124)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4611686022722879488) != 0) || ((int64((_la-68)) & ^0x3f) == 0 && ((int64(1)<<(_la-68))&-1704354230001645) != 0) || ((int64((_la-132)) & ^0x3f) == 0 && ((int64(1)<<(_la-132))&-1) != 0) || ((int64((_la-196)) & ^0x3f) == 0 && ((int64(1)<<(_la-196))&-1) != 0) || ((int64((_la-260)) & ^0x3f) == 0 && ((int64(1)<<(_la-260))&4440996184063) != 0) || ((int64((_la-325)) & ^0x3f) == 0 && ((int64(1)<<(_la-325))&66953217) != 0) {
		{
			p.SetState(2123)
			p.Statement_list()
		}

	}
	{
		p.SetState(2126)
		p.Match(GoogleSQLParserEND_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2127)
		p.Match(GoogleSQLParserWHILE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRaise_statementContext is an interface to support dynamic dispatch.
type IRaise_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RAISE_SYMBOL() antlr.TerminalNode
	USING_SYMBOL() antlr.TerminalNode
	MESSAGE_SYMBOL() antlr.TerminalNode
	EQUAL_OPERATOR() antlr.TerminalNode
	Expression() IExpressionContext

	// IsRaise_statementContext differentiates from other interfaces.
	IsRaise_statementContext()
}

type Raise_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRaise_statementContext() *Raise_statementContext {
	var p = new(Raise_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_raise_statement
	return p
}

func InitEmptyRaise_statementContext(p *Raise_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_raise_statement
}

func (*Raise_statementContext) IsRaise_statementContext() {}

func NewRaise_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Raise_statementContext {
	var p = new(Raise_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_raise_statement

	return p
}

func (s *Raise_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Raise_statementContext) RAISE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRAISE_SYMBOL, 0)
}

func (s *Raise_statementContext) USING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUSING_SYMBOL, 0)
}

func (s *Raise_statementContext) MESSAGE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMESSAGE_SYMBOL, 0)
}

func (s *Raise_statementContext) EQUAL_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEQUAL_OPERATOR, 0)
}

func (s *Raise_statementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Raise_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Raise_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Raise_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRaise_statement(s)
	}
}

func (s *Raise_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRaise_statement(s)
	}
}

func (s *Raise_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRaise_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Raise_statement() (localctx IRaise_statementContext) {
	localctx = NewRaise_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, GoogleSQLParserRULE_raise_statement)
	p.SetState(2135)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 187, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2129)
			p.Match(GoogleSQLParserRAISE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2130)
			p.Match(GoogleSQLParserRAISE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2131)
			p.Match(GoogleSQLParserUSING_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2132)
			p.Match(GoogleSQLParserMESSAGE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2133)
			p.Match(GoogleSQLParserEQUAL_OPERATOR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2134)
			p.expression(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IReturn_statementContext is an interface to support dynamic dispatch.
type IReturn_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RETURN_SYMBOL() antlr.TerminalNode

	// IsReturn_statementContext differentiates from other interfaces.
	IsReturn_statementContext()
}

type Return_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturn_statementContext() *Return_statementContext {
	var p = new(Return_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_return_statement
	return p
}

func InitEmptyReturn_statementContext(p *Return_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_return_statement
}

func (*Return_statementContext) IsReturn_statementContext() {}

func NewReturn_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Return_statementContext {
	var p = new(Return_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_return_statement

	return p
}

func (s *Return_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Return_statementContext) RETURN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRETURN_SYMBOL, 0)
}

func (s *Return_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Return_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Return_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterReturn_statement(s)
	}
}

func (s *Return_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitReturn_statement(s)
	}
}

func (s *Return_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitReturn_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Return_statement() (localctx IReturn_statementContext) {
	localctx = NewReturn_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, GoogleSQLParserRULE_return_statement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2137)
		p.Match(GoogleSQLParserRETURN_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IContinue_statementContext is an interface to support dynamic dispatch.
type IContinue_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CONTINUE_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext
	ITERATE_SYMBOL() antlr.TerminalNode

	// IsContinue_statementContext differentiates from other interfaces.
	IsContinue_statementContext()
}

type Continue_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContinue_statementContext() *Continue_statementContext {
	var p = new(Continue_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_continue_statement
	return p
}

func InitEmptyContinue_statementContext(p *Continue_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_continue_statement
}

func (*Continue_statementContext) IsContinue_statementContext() {}

func NewContinue_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Continue_statementContext {
	var p = new(Continue_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_continue_statement

	return p
}

func (s *Continue_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Continue_statementContext) CONTINUE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCONTINUE_SYMBOL, 0)
}

func (s *Continue_statementContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Continue_statementContext) ITERATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserITERATE_SYMBOL, 0)
}

func (s *Continue_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Continue_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Continue_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterContinue_statement(s)
	}
}

func (s *Continue_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitContinue_statement(s)
	}
}

func (s *Continue_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitContinue_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Continue_statement() (localctx IContinue_statementContext) {
	localctx = NewContinue_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, GoogleSQLParserRULE_continue_statement)
	var _la int

	p.SetState(2147)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserCONTINUE_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2139)
			p.Match(GoogleSQLParserCONTINUE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2141)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64((_la-72)) & ^0x3f) == 0 && ((int64(1)<<(_la-72))&-106523215214079) != 0) || ((int64((_la-136)) & ^0x3f) == 0 && ((int64(1)<<(_la-136))&-1) != 0) || ((int64((_la-200)) & ^0x3f) == 0 && ((int64(1)<<(_la-200))&-36028797018963969) != 0) || ((int64((_la-264)) & ^0x3f) == 0 && ((int64(1)<<(_la-264))&536870911) != 0) || ((int64((_la-338)) & ^0x3f) == 0 && ((int64(1)<<(_la-338))&8161) != 0) {
			{
				p.SetState(2140)
				p.Identifier()
			}

		}

	case GoogleSQLParserITERATE_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2143)
			p.Match(GoogleSQLParserITERATE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2145)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64((_la-72)) & ^0x3f) == 0 && ((int64(1)<<(_la-72))&-106523215214079) != 0) || ((int64((_la-136)) & ^0x3f) == 0 && ((int64(1)<<(_la-136))&-1) != 0) || ((int64((_la-200)) & ^0x3f) == 0 && ((int64(1)<<(_la-200))&-36028797018963969) != 0) || ((int64((_la-264)) & ^0x3f) == 0 && ((int64(1)<<(_la-264))&536870911) != 0) || ((int64((_la-338)) & ^0x3f) == 0 && ((int64(1)<<(_la-338))&8161) != 0) {
			{
				p.SetState(2144)
				p.Identifier()
			}

		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVariable_declarationContext is an interface to support dynamic dispatch.
type IVariable_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DECLARE_SYMBOL() antlr.TerminalNode
	Identifier_list() IIdentifier_listContext
	Type_() ITypeContext
	Opt_default_expression() IOpt_default_expressionContext
	DEFAULT_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsVariable_declarationContext differentiates from other interfaces.
	IsVariable_declarationContext()
}

type Variable_declarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariable_declarationContext() *Variable_declarationContext {
	var p = new(Variable_declarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_variable_declaration
	return p
}

func InitEmptyVariable_declarationContext(p *Variable_declarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_variable_declaration
}

func (*Variable_declarationContext) IsVariable_declarationContext() {}

func NewVariable_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Variable_declarationContext {
	var p = new(Variable_declarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_variable_declaration

	return p
}

func (s *Variable_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Variable_declarationContext) DECLARE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDECLARE_SYMBOL, 0)
}

func (s *Variable_declarationContext) Identifier_list() IIdentifier_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifier_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Variable_declarationContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Variable_declarationContext) Opt_default_expression() IOpt_default_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_default_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_default_expressionContext)
}

func (s *Variable_declarationContext) DEFAULT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDEFAULT_SYMBOL, 0)
}

func (s *Variable_declarationContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Variable_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Variable_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Variable_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterVariable_declaration(s)
	}
}

func (s *Variable_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitVariable_declaration(s)
	}
}

func (s *Variable_declarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitVariable_declaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Variable_declaration() (localctx IVariable_declarationContext) {
	localctx = NewVariable_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, GoogleSQLParserRULE_variable_declaration)
	var _la int

	p.SetState(2160)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 192, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2149)
			p.Match(GoogleSQLParserDECLARE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2150)
			p.Identifier_list()
		}
		{
			p.SetState(2151)
			p.Type_()
		}
		p.SetState(2153)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserDEFAULT_SYMBOL {
			{
				p.SetState(2152)
				p.Opt_default_expression()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2155)
			p.Match(GoogleSQLParserDECLARE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2156)
			p.Identifier_list()
		}
		{
			p.SetState(2157)
			p.Match(GoogleSQLParserDEFAULT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2158)
			p.expression(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBreak_statementContext is an interface to support dynamic dispatch.
type IBreak_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BREAK_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext
	LEAVE_SYMBOL() antlr.TerminalNode

	// IsBreak_statementContext differentiates from other interfaces.
	IsBreak_statementContext()
}

type Break_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBreak_statementContext() *Break_statementContext {
	var p = new(Break_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_break_statement
	return p
}

func InitEmptyBreak_statementContext(p *Break_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_break_statement
}

func (*Break_statementContext) IsBreak_statementContext() {}

func NewBreak_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Break_statementContext {
	var p = new(Break_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_break_statement

	return p
}

func (s *Break_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Break_statementContext) BREAK_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBREAK_SYMBOL, 0)
}

func (s *Break_statementContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Break_statementContext) LEAVE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLEAVE_SYMBOL, 0)
}

func (s *Break_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Break_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Break_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBreak_statement(s)
	}
}

func (s *Break_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBreak_statement(s)
	}
}

func (s *Break_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBreak_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Break_statement() (localctx IBreak_statementContext) {
	localctx = NewBreak_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, GoogleSQLParserRULE_break_statement)
	var _la int

	p.SetState(2170)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserBREAK_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2162)
			p.Match(GoogleSQLParserBREAK_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2164)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64((_la-72)) & ^0x3f) == 0 && ((int64(1)<<(_la-72))&-106523215214079) != 0) || ((int64((_la-136)) & ^0x3f) == 0 && ((int64(1)<<(_la-136))&-1) != 0) || ((int64((_la-200)) & ^0x3f) == 0 && ((int64(1)<<(_la-200))&-36028797018963969) != 0) || ((int64((_la-264)) & ^0x3f) == 0 && ((int64(1)<<(_la-264))&536870911) != 0) || ((int64((_la-338)) & ^0x3f) == 0 && ((int64(1)<<(_la-338))&8161) != 0) {
			{
				p.SetState(2163)
				p.Identifier()
			}

		}

	case GoogleSQLParserLEAVE_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2166)
			p.Match(GoogleSQLParserLEAVE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2168)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64((_la-72)) & ^0x3f) == 0 && ((int64(1)<<(_la-72))&-106523215214079) != 0) || ((int64((_la-136)) & ^0x3f) == 0 && ((int64(1)<<(_la-136))&-1) != 0) || ((int64((_la-200)) & ^0x3f) == 0 && ((int64(1)<<(_la-200))&-36028797018963969) != 0) || ((int64((_la-264)) & ^0x3f) == 0 && ((int64(1)<<(_la-264))&536870911) != 0) || ((int64((_la-338)) & ^0x3f) == 0 && ((int64(1)<<(_la-338))&8161) != 0) {
			{
				p.SetState(2167)
				p.Identifier()
			}

		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICase_statementContext is an interface to support dynamic dispatch.
type ICase_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllCASE_SYMBOL() []antlr.TerminalNode
	CASE_SYMBOL(i int) antlr.TerminalNode
	When_then_clauses() IWhen_then_clausesContext
	END_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	Opt_else() IOpt_elseContext

	// IsCase_statementContext differentiates from other interfaces.
	IsCase_statementContext()
}

type Case_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCase_statementContext() *Case_statementContext {
	var p = new(Case_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_case_statement
	return p
}

func InitEmptyCase_statementContext(p *Case_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_case_statement
}

func (*Case_statementContext) IsCase_statementContext() {}

func NewCase_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Case_statementContext {
	var p = new(Case_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_case_statement

	return p
}

func (s *Case_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Case_statementContext) AllCASE_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCASE_SYMBOL)
}

func (s *Case_statementContext) CASE_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCASE_SYMBOL, i)
}

func (s *Case_statementContext) When_then_clauses() IWhen_then_clausesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhen_then_clausesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhen_then_clausesContext)
}

func (s *Case_statementContext) END_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEND_SYMBOL, 0)
}

func (s *Case_statementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Case_statementContext) Opt_else() IOpt_elseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_elseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_elseContext)
}

func (s *Case_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Case_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCase_statement(s)
	}
}

func (s *Case_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCase_statement(s)
	}
}

func (s *Case_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCase_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Case_statement() (localctx ICase_statementContext) {
	localctx = NewCase_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, GoogleSQLParserRULE_case_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2172)
		p.Match(GoogleSQLParserCASE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2174)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&31538406566415360) != 0) || ((int64((_la-72)) & ^0x3f) == 0 && ((int64(1)<<(_la-72))&-825139475895) != 0) || ((int64((_la-136)) & ^0x3f) == 0 && ((int64(1)<<(_la-136))&-1) != 0) || ((int64((_la-200)) & ^0x3f) == 0 && ((int64(1)<<(_la-200))&-36028797018963969) != 0) || ((int64((_la-264)) & ^0x3f) == 0 && ((int64(1)<<(_la-264))&1068373114879) != 0) || ((int64((_la-330)) & ^0x3f) == 0 && ((int64(1)<<(_la-330))&2089217) != 0) {
		{
			p.SetState(2173)
			p.expression(0)
		}

	}
	{
		p.SetState(2176)
		p.When_then_clauses()
	}
	p.SetState(2178)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserELSE_SYMBOL {
		{
			p.SetState(2177)
			p.Opt_else()
		}

	}
	{
		p.SetState(2180)
		p.Match(GoogleSQLParserEND_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2181)
		p.Match(GoogleSQLParserCASE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWhen_then_clausesContext is an interface to support dynamic dispatch.
type IWhen_then_clausesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllWHEN_SYMBOL() []antlr.TerminalNode
	WHEN_SYMBOL(i int) antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	AllTHEN_SYMBOL() []antlr.TerminalNode
	THEN_SYMBOL(i int) antlr.TerminalNode
	AllStatement_list() []IStatement_listContext
	Statement_list(i int) IStatement_listContext

	// IsWhen_then_clausesContext differentiates from other interfaces.
	IsWhen_then_clausesContext()
}

type When_then_clausesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhen_then_clausesContext() *When_then_clausesContext {
	var p = new(When_then_clausesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_when_then_clauses
	return p
}

func InitEmptyWhen_then_clausesContext(p *When_then_clausesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_when_then_clauses
}

func (*When_then_clausesContext) IsWhen_then_clausesContext() {}

func NewWhen_then_clausesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *When_then_clausesContext {
	var p = new(When_then_clausesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_when_then_clauses

	return p
}

func (s *When_then_clausesContext) GetParser() antlr.Parser { return s.parser }

func (s *When_then_clausesContext) AllWHEN_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserWHEN_SYMBOL)
}

func (s *When_then_clausesContext) WHEN_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWHEN_SYMBOL, i)
}

func (s *When_then_clausesContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *When_then_clausesContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *When_then_clausesContext) AllTHEN_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserTHEN_SYMBOL)
}

func (s *When_then_clausesContext) THEN_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTHEN_SYMBOL, i)
}

func (s *When_then_clausesContext) AllStatement_list() []IStatement_listContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStatement_listContext); ok {
			len++
		}
	}

	tst := make([]IStatement_listContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStatement_listContext); ok {
			tst[i] = t.(IStatement_listContext)
			i++
		}
	}

	return tst
}

func (s *When_then_clausesContext) Statement_list(i int) IStatement_listContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatement_listContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatement_listContext)
}

func (s *When_then_clausesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *When_then_clausesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *When_then_clausesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWhen_then_clauses(s)
	}
}

func (s *When_then_clausesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWhen_then_clauses(s)
	}
}

func (s *When_then_clausesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWhen_then_clauses(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) When_then_clauses() (localctx IWhen_then_clausesContext) {
	localctx = NewWhen_then_clausesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, GoogleSQLParserRULE_when_then_clauses)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2189)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == GoogleSQLParserWHEN_SYMBOL {
		{
			p.SetState(2183)
			p.Match(GoogleSQLParserWHEN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2184)
			p.expression(0)
		}
		{
			p.SetState(2185)
			p.Match(GoogleSQLParserTHEN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2187)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4611686022722879488) != 0) || ((int64((_la-68)) & ^0x3f) == 0 && ((int64(1)<<(_la-68))&-1704354230001645) != 0) || ((int64((_la-132)) & ^0x3f) == 0 && ((int64(1)<<(_la-132))&-1) != 0) || ((int64((_la-196)) & ^0x3f) == 0 && ((int64(1)<<(_la-196))&-1) != 0) || ((int64((_la-260)) & ^0x3f) == 0 && ((int64(1)<<(_la-260))&4440996184063) != 0) || ((int64((_la-325)) & ^0x3f) == 0 && ((int64(1)<<(_la-325))&66953217) != 0) {
			{
				p.SetState(2186)
				p.Statement_list()
			}

		}

		p.SetState(2191)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIf_statementContext is an interface to support dynamic dispatch.
type IIf_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIF_SYMBOL() []antlr.TerminalNode
	IF_SYMBOL(i int) antlr.TerminalNode
	Expression() IExpressionContext
	THEN_SYMBOL() antlr.TerminalNode
	END_SYMBOL() antlr.TerminalNode
	Statement_list() IStatement_listContext
	Elseif_clauses() IElseif_clausesContext
	Opt_else() IOpt_elseContext

	// IsIf_statementContext differentiates from other interfaces.
	IsIf_statementContext()
}

type If_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIf_statementContext() *If_statementContext {
	var p = new(If_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_if_statement
	return p
}

func InitEmptyIf_statementContext(p *If_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_if_statement
}

func (*If_statementContext) IsIf_statementContext() {}

func NewIf_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *If_statementContext {
	var p = new(If_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_if_statement

	return p
}

func (s *If_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *If_statementContext) AllIF_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserIF_SYMBOL)
}

func (s *If_statementContext) IF_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIF_SYMBOL, i)
}

func (s *If_statementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *If_statementContext) THEN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTHEN_SYMBOL, 0)
}

func (s *If_statementContext) END_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEND_SYMBOL, 0)
}

func (s *If_statementContext) Statement_list() IStatement_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatement_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatement_listContext)
}

func (s *If_statementContext) Elseif_clauses() IElseif_clausesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElseif_clausesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElseif_clausesContext)
}

func (s *If_statementContext) Opt_else() IOpt_elseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_elseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_elseContext)
}

func (s *If_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *If_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *If_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterIf_statement(s)
	}
}

func (s *If_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitIf_statement(s)
	}
}

func (s *If_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitIf_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) If_statement() (localctx IIf_statementContext) {
	localctx = NewIf_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, GoogleSQLParserRULE_if_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2193)
		p.Match(GoogleSQLParserIF_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2194)
		p.expression(0)
	}
	{
		p.SetState(2195)
		p.Match(GoogleSQLParserTHEN_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2197)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 200, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2196)
			p.Statement_list()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(2200)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserELSEIF_SYMBOL {
		{
			p.SetState(2199)
			p.Elseif_clauses()
		}

	}
	p.SetState(2203)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserELSE_SYMBOL {
		{
			p.SetState(2202)
			p.Opt_else()
		}

	}
	{
		p.SetState(2205)
		p.Match(GoogleSQLParserEND_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2206)
		p.Match(GoogleSQLParserIF_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IElseif_clausesContext is an interface to support dynamic dispatch.
type IElseif_clausesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllELSEIF_SYMBOL() []antlr.TerminalNode
	ELSEIF_SYMBOL(i int) antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	AllTHEN_SYMBOL() []antlr.TerminalNode
	THEN_SYMBOL(i int) antlr.TerminalNode
	AllStatement_list() []IStatement_listContext
	Statement_list(i int) IStatement_listContext

	// IsElseif_clausesContext differentiates from other interfaces.
	IsElseif_clausesContext()
}

type Elseif_clausesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElseif_clausesContext() *Elseif_clausesContext {
	var p = new(Elseif_clausesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_elseif_clauses
	return p
}

func InitEmptyElseif_clausesContext(p *Elseif_clausesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_elseif_clauses
}

func (*Elseif_clausesContext) IsElseif_clausesContext() {}

func NewElseif_clausesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Elseif_clausesContext {
	var p = new(Elseif_clausesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_elseif_clauses

	return p
}

func (s *Elseif_clausesContext) GetParser() antlr.Parser { return s.parser }

func (s *Elseif_clausesContext) AllELSEIF_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserELSEIF_SYMBOL)
}

func (s *Elseif_clausesContext) ELSEIF_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserELSEIF_SYMBOL, i)
}

func (s *Elseif_clausesContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *Elseif_clausesContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Elseif_clausesContext) AllTHEN_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserTHEN_SYMBOL)
}

func (s *Elseif_clausesContext) THEN_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTHEN_SYMBOL, i)
}

func (s *Elseif_clausesContext) AllStatement_list() []IStatement_listContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStatement_listContext); ok {
			len++
		}
	}

	tst := make([]IStatement_listContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStatement_listContext); ok {
			tst[i] = t.(IStatement_listContext)
			i++
		}
	}

	return tst
}

func (s *Elseif_clausesContext) Statement_list(i int) IStatement_listContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatement_listContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatement_listContext)
}

func (s *Elseif_clausesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Elseif_clausesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Elseif_clausesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterElseif_clauses(s)
	}
}

func (s *Elseif_clausesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitElseif_clauses(s)
	}
}

func (s *Elseif_clausesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitElseif_clauses(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Elseif_clauses() (localctx IElseif_clausesContext) {
	localctx = NewElseif_clausesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, GoogleSQLParserRULE_elseif_clauses)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2214)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == GoogleSQLParserELSEIF_SYMBOL {
		{
			p.SetState(2208)
			p.Match(GoogleSQLParserELSEIF_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2209)
			p.expression(0)
		}
		{
			p.SetState(2210)
			p.Match(GoogleSQLParserTHEN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2212)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 203, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2211)
				p.Statement_list()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

		p.SetState(2216)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_elseContext is an interface to support dynamic dispatch.
type IOpt_elseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ELSE_SYMBOL() antlr.TerminalNode
	Statement_list() IStatement_listContext

	// IsOpt_elseContext differentiates from other interfaces.
	IsOpt_elseContext()
}

type Opt_elseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_elseContext() *Opt_elseContext {
	var p = new(Opt_elseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_else
	return p
}

func InitEmptyOpt_elseContext(p *Opt_elseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_else
}

func (*Opt_elseContext) IsOpt_elseContext() {}

func NewOpt_elseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_elseContext {
	var p = new(Opt_elseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_else

	return p
}

func (s *Opt_elseContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_elseContext) ELSE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserELSE_SYMBOL, 0)
}

func (s *Opt_elseContext) Statement_list() IStatement_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatement_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatement_listContext)
}

func (s *Opt_elseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_elseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_elseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_else(s)
	}
}

func (s *Opt_elseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_else(s)
	}
}

func (s *Opt_elseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_else(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_else() (localctx IOpt_elseContext) {
	localctx = NewOpt_elseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, GoogleSQLParserRULE_opt_else)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2218)
		p.Match(GoogleSQLParserELSE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2220)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4611686022722879488) != 0) || ((int64((_la-68)) & ^0x3f) == 0 && ((int64(1)<<(_la-68))&-1704354230001645) != 0) || ((int64((_la-132)) & ^0x3f) == 0 && ((int64(1)<<(_la-132))&-1) != 0) || ((int64((_la-196)) & ^0x3f) == 0 && ((int64(1)<<(_la-196))&-1) != 0) || ((int64((_la-260)) & ^0x3f) == 0 && ((int64(1)<<(_la-260))&4440996184063) != 0) || ((int64((_la-325)) & ^0x3f) == 0 && ((int64(1)<<(_la-325))&66953217) != 0) {
		{
			p.SetState(2219)
			p.Statement_list()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_as_codeContext is an interface to support dynamic dispatch.
type IOpt_as_codeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AS_SYMBOL() antlr.TerminalNode
	String_literal() IString_literalContext

	// IsOpt_as_codeContext differentiates from other interfaces.
	IsOpt_as_codeContext()
}

type Opt_as_codeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_as_codeContext() *Opt_as_codeContext {
	var p = new(Opt_as_codeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_as_code
	return p
}

func InitEmptyOpt_as_codeContext(p *Opt_as_codeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_as_code
}

func (*Opt_as_codeContext) IsOpt_as_codeContext() {}

func NewOpt_as_codeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_as_codeContext {
	var p = new(Opt_as_codeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_as_code

	return p
}

func (s *Opt_as_codeContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_as_codeContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Opt_as_codeContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Opt_as_codeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_as_codeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_as_codeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_as_code(s)
	}
}

func (s *Opt_as_codeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_as_code(s)
	}
}

func (s *Opt_as_codeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_as_code(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_as_code() (localctx IOpt_as_codeContext) {
	localctx = NewOpt_as_codeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, GoogleSQLParserRULE_opt_as_code)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2222)
		p.Match(GoogleSQLParserAS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2223)
		p.string_literal(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_external_security_clauseContext is an interface to support dynamic dispatch.
type IOpt_external_security_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EXTERNAL_SYMBOL() antlr.TerminalNode
	SECURITY_SYMBOL() antlr.TerminalNode
	External_security_clause_kind() IExternal_security_clause_kindContext

	// IsOpt_external_security_clauseContext differentiates from other interfaces.
	IsOpt_external_security_clauseContext()
}

type Opt_external_security_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_external_security_clauseContext() *Opt_external_security_clauseContext {
	var p = new(Opt_external_security_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_external_security_clause
	return p
}

func InitEmptyOpt_external_security_clauseContext(p *Opt_external_security_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_external_security_clause
}

func (*Opt_external_security_clauseContext) IsOpt_external_security_clauseContext() {}

func NewOpt_external_security_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_external_security_clauseContext {
	var p = new(Opt_external_security_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_external_security_clause

	return p
}

func (s *Opt_external_security_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_external_security_clauseContext) EXTERNAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXTERNAL_SYMBOL, 0)
}

func (s *Opt_external_security_clauseContext) SECURITY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSECURITY_SYMBOL, 0)
}

func (s *Opt_external_security_clauseContext) External_security_clause_kind() IExternal_security_clause_kindContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExternal_security_clause_kindContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExternal_security_clause_kindContext)
}

func (s *Opt_external_security_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_external_security_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_external_security_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_external_security_clause(s)
	}
}

func (s *Opt_external_security_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_external_security_clause(s)
	}
}

func (s *Opt_external_security_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_external_security_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_external_security_clause() (localctx IOpt_external_security_clauseContext) {
	localctx = NewOpt_external_security_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, GoogleSQLParserRULE_opt_external_security_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2225)
		p.Match(GoogleSQLParserEXTERNAL_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2226)
		p.Match(GoogleSQLParserSECURITY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2227)
		p.External_security_clause_kind()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExternal_security_clause_kindContext is an interface to support dynamic dispatch.
type IExternal_security_clause_kindContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	INVOKER_SYMBOL() antlr.TerminalNode
	DEFINER_SYMBOL() antlr.TerminalNode

	// IsExternal_security_clause_kindContext differentiates from other interfaces.
	IsExternal_security_clause_kindContext()
}

type External_security_clause_kindContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExternal_security_clause_kindContext() *External_security_clause_kindContext {
	var p = new(External_security_clause_kindContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_external_security_clause_kind
	return p
}

func InitEmptyExternal_security_clause_kindContext(p *External_security_clause_kindContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_external_security_clause_kind
}

func (*External_security_clause_kindContext) IsExternal_security_clause_kindContext() {}

func NewExternal_security_clause_kindContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *External_security_clause_kindContext {
	var p = new(External_security_clause_kindContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_external_security_clause_kind

	return p
}

func (s *External_security_clause_kindContext) GetParser() antlr.Parser { return s.parser }

func (s *External_security_clause_kindContext) INVOKER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINVOKER_SYMBOL, 0)
}

func (s *External_security_clause_kindContext) DEFINER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDEFINER_SYMBOL, 0)
}

func (s *External_security_clause_kindContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *External_security_clause_kindContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *External_security_clause_kindContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterExternal_security_clause_kind(s)
	}
}

func (s *External_security_clause_kindContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitExternal_security_clause_kind(s)
	}
}

func (s *External_security_clause_kindContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitExternal_security_clause_kind(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) External_security_clause_kind() (localctx IExternal_security_clause_kindContext) {
	localctx = NewExternal_security_clause_kindContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, GoogleSQLParserRULE_external_security_clause_kind)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2229)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserDEFINER_SYMBOL || _la == GoogleSQLParserINVOKER_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IProcedure_parametersContext is an interface to support dynamic dispatch.
type IProcedure_parametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	AllProcedure_parameter() []IProcedure_parameterContext
	Procedure_parameter(i int) IProcedure_parameterContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsProcedure_parametersContext differentiates from other interfaces.
	IsProcedure_parametersContext()
}

type Procedure_parametersContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProcedure_parametersContext() *Procedure_parametersContext {
	var p = new(Procedure_parametersContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_procedure_parameters
	return p
}

func InitEmptyProcedure_parametersContext(p *Procedure_parametersContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_procedure_parameters
}

func (*Procedure_parametersContext) IsProcedure_parametersContext() {}

func NewProcedure_parametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Procedure_parametersContext {
	var p = new(Procedure_parametersContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_procedure_parameters

	return p
}

func (s *Procedure_parametersContext) GetParser() antlr.Parser { return s.parser }

func (s *Procedure_parametersContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Procedure_parametersContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Procedure_parametersContext) AllProcedure_parameter() []IProcedure_parameterContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IProcedure_parameterContext); ok {
			len++
		}
	}

	tst := make([]IProcedure_parameterContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IProcedure_parameterContext); ok {
			tst[i] = t.(IProcedure_parameterContext)
			i++
		}
	}

	return tst
}

func (s *Procedure_parametersContext) Procedure_parameter(i int) IProcedure_parameterContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProcedure_parameterContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProcedure_parameterContext)
}

func (s *Procedure_parametersContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Procedure_parametersContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Procedure_parametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Procedure_parametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Procedure_parametersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterProcedure_parameters(s)
	}
}

func (s *Procedure_parametersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitProcedure_parameters(s)
	}
}

func (s *Procedure_parametersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitProcedure_parameters(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Procedure_parameters() (localctx IProcedure_parametersContext) {
	localctx = NewProcedure_parametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, GoogleSQLParserRULE_procedure_parameters)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2231)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2240)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64((_la-71)) & ^0x3f) == 0 && ((int64(1)<<(_la-71))&-213046430428157) != 0) || ((int64((_la-135)) & ^0x3f) == 0 && ((int64(1)<<(_la-135))&-1) != 0) || ((int64((_la-199)) & ^0x3f) == 0 && ((int64(1)<<(_la-199))&-72057594037927937) != 0) || ((int64((_la-263)) & ^0x3f) == 0 && ((int64(1)<<(_la-263))&1073741823) != 0) || ((int64((_la-338)) & ^0x3f) == 0 && ((int64(1)<<(_la-338))&8161) != 0) {
		{
			p.SetState(2232)
			p.Procedure_parameter()
		}
		p.SetState(2237)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == GoogleSQLParserCOMMA_SYMBOL {
			{
				p.SetState(2233)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(2234)
				p.Procedure_parameter()
			}

			p.SetState(2239)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(2242)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IProcedure_parameterContext is an interface to support dynamic dispatch.
type IProcedure_parameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	Type_or_tvf_schema() IType_or_tvf_schemaContext
	Opt_procedure_parameter_mode() IOpt_procedure_parameter_modeContext
	Procedure_parameter_termination() IProcedure_parameter_terminationContext

	// IsProcedure_parameterContext differentiates from other interfaces.
	IsProcedure_parameterContext()
}

type Procedure_parameterContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProcedure_parameterContext() *Procedure_parameterContext {
	var p = new(Procedure_parameterContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_procedure_parameter
	return p
}

func InitEmptyProcedure_parameterContext(p *Procedure_parameterContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_procedure_parameter
}

func (*Procedure_parameterContext) IsProcedure_parameterContext() {}

func NewProcedure_parameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Procedure_parameterContext {
	var p = new(Procedure_parameterContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_procedure_parameter

	return p
}

func (s *Procedure_parameterContext) GetParser() antlr.Parser { return s.parser }

func (s *Procedure_parameterContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Procedure_parameterContext) Type_or_tvf_schema() IType_or_tvf_schemaContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_or_tvf_schemaContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_or_tvf_schemaContext)
}

func (s *Procedure_parameterContext) Opt_procedure_parameter_mode() IOpt_procedure_parameter_modeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_procedure_parameter_modeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_procedure_parameter_modeContext)
}

func (s *Procedure_parameterContext) Procedure_parameter_termination() IProcedure_parameter_terminationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IProcedure_parameter_terminationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IProcedure_parameter_terminationContext)
}

func (s *Procedure_parameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Procedure_parameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Procedure_parameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterProcedure_parameter(s)
	}
}

func (s *Procedure_parameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitProcedure_parameter(s)
	}
}

func (s *Procedure_parameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitProcedure_parameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Procedure_parameter() (localctx IProcedure_parameterContext) {
	localctx = NewProcedure_parameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, GoogleSQLParserRULE_procedure_parameter)
	p.SetState(2257)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 210, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(2245)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 208, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2244)
				p.Opt_procedure_parameter_mode()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(2247)
			p.Identifier()
		}
		{
			p.SetState(2248)
			p.Type_or_tvf_schema()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(2251)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 209, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2250)
				p.Opt_procedure_parameter_mode()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(2253)
			p.Identifier()
		}
		{
			p.SetState(2254)
			p.Procedure_parameter_termination()
		}

		p.NotifyErrorListeners("Syntax error: Unexpected end of parameter. Parameters should be in the format [<parameter mode>] <parameter name> <type>. If IN/OUT/INOUT is intended to be the name of a parameter, it must be escaped with backticks", nil, nil)

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IProcedure_parameter_terminationContext is an interface to support dynamic dispatch.
type IProcedure_parameter_terminationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	COMMA_SYMBOL() antlr.TerminalNode

	// IsProcedure_parameter_terminationContext differentiates from other interfaces.
	IsProcedure_parameter_terminationContext()
}

type Procedure_parameter_terminationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProcedure_parameter_terminationContext() *Procedure_parameter_terminationContext {
	var p = new(Procedure_parameter_terminationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_procedure_parameter_termination
	return p
}

func InitEmptyProcedure_parameter_terminationContext(p *Procedure_parameter_terminationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_procedure_parameter_termination
}

func (*Procedure_parameter_terminationContext) IsProcedure_parameter_terminationContext() {}

func NewProcedure_parameter_terminationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Procedure_parameter_terminationContext {
	var p = new(Procedure_parameter_terminationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_procedure_parameter_termination

	return p
}

func (s *Procedure_parameter_terminationContext) GetParser() antlr.Parser { return s.parser }

func (s *Procedure_parameter_terminationContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Procedure_parameter_terminationContext) COMMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, 0)
}

func (s *Procedure_parameter_terminationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Procedure_parameter_terminationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Procedure_parameter_terminationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterProcedure_parameter_termination(s)
	}
}

func (s *Procedure_parameter_terminationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitProcedure_parameter_termination(s)
	}
}

func (s *Procedure_parameter_terminationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitProcedure_parameter_termination(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Procedure_parameter_termination() (localctx IProcedure_parameter_terminationContext) {
	localctx = NewProcedure_parameter_terminationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, GoogleSQLParserRULE_procedure_parameter_termination)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2259)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserCOMMA_SYMBOL || _la == GoogleSQLParserRR_BRACKET_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_procedure_parameter_modeContext is an interface to support dynamic dispatch.
type IOpt_procedure_parameter_modeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IN_SYMBOL() antlr.TerminalNode
	OUT_SYMBOL() antlr.TerminalNode
	INOUT_SYMBOL() antlr.TerminalNode

	// IsOpt_procedure_parameter_modeContext differentiates from other interfaces.
	IsOpt_procedure_parameter_modeContext()
}

type Opt_procedure_parameter_modeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_procedure_parameter_modeContext() *Opt_procedure_parameter_modeContext {
	var p = new(Opt_procedure_parameter_modeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_procedure_parameter_mode
	return p
}

func InitEmptyOpt_procedure_parameter_modeContext(p *Opt_procedure_parameter_modeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_procedure_parameter_mode
}

func (*Opt_procedure_parameter_modeContext) IsOpt_procedure_parameter_modeContext() {}

func NewOpt_procedure_parameter_modeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_procedure_parameter_modeContext {
	var p = new(Opt_procedure_parameter_modeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_procedure_parameter_mode

	return p
}

func (s *Opt_procedure_parameter_modeContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_procedure_parameter_modeContext) IN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIN_SYMBOL, 0)
}

func (s *Opt_procedure_parameter_modeContext) OUT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOUT_SYMBOL, 0)
}

func (s *Opt_procedure_parameter_modeContext) INOUT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINOUT_SYMBOL, 0)
}

func (s *Opt_procedure_parameter_modeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_procedure_parameter_modeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_procedure_parameter_modeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_procedure_parameter_mode(s)
	}
}

func (s *Opt_procedure_parameter_modeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_procedure_parameter_mode(s)
	}
}

func (s *Opt_procedure_parameter_modeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_procedure_parameter_mode(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_procedure_parameter_mode() (localctx IOpt_procedure_parameter_modeContext) {
	localctx = NewOpt_procedure_parameter_modeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, GoogleSQLParserRULE_opt_procedure_parameter_mode)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2261)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserIN_SYMBOL || _la == GoogleSQLParserINOUT_SYMBOL || _la == GoogleSQLParserOUT_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_function_statementContext is an interface to support dynamic dispatch.
type ICreate_function_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CREATE_SYMBOL() antlr.TerminalNode
	FUNCTION_SYMBOL() antlr.TerminalNode
	Function_declaration() IFunction_declarationContext
	Opt_or_replace() IOpt_or_replaceContext
	Opt_create_scope() IOpt_create_scopeContext
	Opt_aggregate() IOpt_aggregateContext
	Opt_if_not_exists() IOpt_if_not_existsContext
	Opt_function_returns() IOpt_function_returnsContext
	Opt_sql_security_clause() IOpt_sql_security_clauseContext
	Opt_determinism_level() IOpt_determinism_levelContext
	Opt_language_or_remote_with_connection() IOpt_language_or_remote_with_connectionContext
	Unordered_options_body() IUnordered_options_bodyContext

	// IsCreate_function_statementContext differentiates from other interfaces.
	IsCreate_function_statementContext()
}

type Create_function_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_function_statementContext() *Create_function_statementContext {
	var p = new(Create_function_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_function_statement
	return p
}

func InitEmptyCreate_function_statementContext(p *Create_function_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_function_statement
}

func (*Create_function_statementContext) IsCreate_function_statementContext() {}

func NewCreate_function_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_function_statementContext {
	var p = new(Create_function_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_create_function_statement

	return p
}

func (s *Create_function_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_function_statementContext) CREATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCREATE_SYMBOL, 0)
}

func (s *Create_function_statementContext) FUNCTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFUNCTION_SYMBOL, 0)
}

func (s *Create_function_statementContext) Function_declaration() IFunction_declarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunction_declarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunction_declarationContext)
}

func (s *Create_function_statementContext) Opt_or_replace() IOpt_or_replaceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_or_replaceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_or_replaceContext)
}

func (s *Create_function_statementContext) Opt_create_scope() IOpt_create_scopeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_create_scopeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_create_scopeContext)
}

func (s *Create_function_statementContext) Opt_aggregate() IOpt_aggregateContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_aggregateContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_aggregateContext)
}

func (s *Create_function_statementContext) Opt_if_not_exists() IOpt_if_not_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_if_not_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_if_not_existsContext)
}

func (s *Create_function_statementContext) Opt_function_returns() IOpt_function_returnsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_function_returnsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_function_returnsContext)
}

func (s *Create_function_statementContext) Opt_sql_security_clause() IOpt_sql_security_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_sql_security_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_sql_security_clauseContext)
}

func (s *Create_function_statementContext) Opt_determinism_level() IOpt_determinism_levelContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_determinism_levelContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_determinism_levelContext)
}

func (s *Create_function_statementContext) Opt_language_or_remote_with_connection() IOpt_language_or_remote_with_connectionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_language_or_remote_with_connectionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_language_or_remote_with_connectionContext)
}

func (s *Create_function_statementContext) Unordered_options_body() IUnordered_options_bodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnordered_options_bodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnordered_options_bodyContext)
}

func (s *Create_function_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_function_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_function_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCreate_function_statement(s)
	}
}

func (s *Create_function_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCreate_function_statement(s)
	}
}

func (s *Create_function_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCreate_function_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Create_function_statement() (localctx ICreate_function_statementContext) {
	localctx = NewCreate_function_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, GoogleSQLParserRULE_create_function_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2263)
		p.Match(GoogleSQLParserCREATE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2265)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOR_SYMBOL {
		{
			p.SetState(2264)
			p.Opt_or_replace()
		}

	}
	p.SetState(2268)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-224)) & ^0x3f) == 0 && ((int64(1)<<(_la-224))&105553116266529) != 0 {
		{
			p.SetState(2267)
			p.Opt_create_scope()
		}

	}
	p.SetState(2271)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAGGREGATE_SYMBOL {
		{
			p.SetState(2270)
			p.Opt_aggregate()
		}

	}
	{
		p.SetState(2273)
		p.Match(GoogleSQLParserFUNCTION_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2275)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserIF_SYMBOL {
		{
			p.SetState(2274)
			p.Opt_if_not_exists()
		}

	}
	{
		p.SetState(2277)
		p.Function_declaration()
	}
	p.SetState(2279)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserRETURNS_SYMBOL {
		{
			p.SetState(2278)
			p.Opt_function_returns()
		}

	}
	p.SetState(2282)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserSQL_SYMBOL {
		{
			p.SetState(2281)
			p.Opt_sql_security_clause()
		}

	}
	p.SetState(2285)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserNOT_SYMBOL || _la == GoogleSQLParserDETERMINISTIC_SYMBOL || _la == GoogleSQLParserIMMUTABLE_SYMBOL || _la == GoogleSQLParserSTABLE_SYMBOL || _la == GoogleSQLParserVOLATILE_SYMBOL {
		{
			p.SetState(2284)
			p.Opt_determinism_level()
		}

	}
	p.SetState(2288)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserWITH_SYMBOL || _la == GoogleSQLParserLANGUAGE_SYMBOL || _la == GoogleSQLParserREMOTE_SYMBOL {
		{
			p.SetState(2287)
			p.Opt_language_or_remote_with_connection()
		}

	}
	p.SetState(2291)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAS_SYMBOL || _la == GoogleSQLParserOPTIONS_SYMBOL {
		{
			p.SetState(2290)
			p.Unordered_options_body()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_determinism_levelContext is an interface to support dynamic dispatch.
type IOpt_determinism_levelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DETERMINISTIC_SYMBOL() antlr.TerminalNode
	NOT_SYMBOL() antlr.TerminalNode
	IMMUTABLE_SYMBOL() antlr.TerminalNode
	STABLE_SYMBOL() antlr.TerminalNode
	VOLATILE_SYMBOL() antlr.TerminalNode

	// IsOpt_determinism_levelContext differentiates from other interfaces.
	IsOpt_determinism_levelContext()
}

type Opt_determinism_levelContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_determinism_levelContext() *Opt_determinism_levelContext {
	var p = new(Opt_determinism_levelContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_determinism_level
	return p
}

func InitEmptyOpt_determinism_levelContext(p *Opt_determinism_levelContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_determinism_level
}

func (*Opt_determinism_levelContext) IsOpt_determinism_levelContext() {}

func NewOpt_determinism_levelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_determinism_levelContext {
	var p = new(Opt_determinism_levelContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_determinism_level

	return p
}

func (s *Opt_determinism_levelContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_determinism_levelContext) DETERMINISTIC_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDETERMINISTIC_SYMBOL, 0)
}

func (s *Opt_determinism_levelContext) NOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNOT_SYMBOL, 0)
}

func (s *Opt_determinism_levelContext) IMMUTABLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIMMUTABLE_SYMBOL, 0)
}

func (s *Opt_determinism_levelContext) STABLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTABLE_SYMBOL, 0)
}

func (s *Opt_determinism_levelContext) VOLATILE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserVOLATILE_SYMBOL, 0)
}

func (s *Opt_determinism_levelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_determinism_levelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_determinism_levelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_determinism_level(s)
	}
}

func (s *Opt_determinism_levelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_determinism_level(s)
	}
}

func (s *Opt_determinism_levelContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_determinism_level(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_determinism_level() (localctx IOpt_determinism_levelContext) {
	localctx = NewOpt_determinism_levelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, GoogleSQLParserRULE_opt_determinism_level)
	p.SetState(2299)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserDETERMINISTIC_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2293)
			p.Match(GoogleSQLParserDETERMINISTIC_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserNOT_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2294)
			p.Match(GoogleSQLParserNOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2295)
			p.Match(GoogleSQLParserDETERMINISTIC_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserIMMUTABLE_SYMBOL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2296)
			p.Match(GoogleSQLParserIMMUTABLE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserSTABLE_SYMBOL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2297)
			p.Match(GoogleSQLParserSTABLE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserVOLATILE_SYMBOL:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2298)
			p.Match(GoogleSQLParserVOLATILE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_sql_security_clauseContext is an interface to support dynamic dispatch.
type IOpt_sql_security_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SQL_SYMBOL() antlr.TerminalNode
	SECURITY_SYMBOL() antlr.TerminalNode
	Sql_security_clause_kind() ISql_security_clause_kindContext

	// IsOpt_sql_security_clauseContext differentiates from other interfaces.
	IsOpt_sql_security_clauseContext()
}

type Opt_sql_security_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_sql_security_clauseContext() *Opt_sql_security_clauseContext {
	var p = new(Opt_sql_security_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_sql_security_clause
	return p
}

func InitEmptyOpt_sql_security_clauseContext(p *Opt_sql_security_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_sql_security_clause
}

func (*Opt_sql_security_clauseContext) IsOpt_sql_security_clauseContext() {}

func NewOpt_sql_security_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_sql_security_clauseContext {
	var p = new(Opt_sql_security_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_sql_security_clause

	return p
}

func (s *Opt_sql_security_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_sql_security_clauseContext) SQL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSQL_SYMBOL, 0)
}

func (s *Opt_sql_security_clauseContext) SECURITY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSECURITY_SYMBOL, 0)
}

func (s *Opt_sql_security_clauseContext) Sql_security_clause_kind() ISql_security_clause_kindContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_security_clause_kindContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_security_clause_kindContext)
}

func (s *Opt_sql_security_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_sql_security_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_sql_security_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_sql_security_clause(s)
	}
}

func (s *Opt_sql_security_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_sql_security_clause(s)
	}
}

func (s *Opt_sql_security_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_sql_security_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_sql_security_clause() (localctx IOpt_sql_security_clauseContext) {
	localctx = NewOpt_sql_security_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, GoogleSQLParserRULE_opt_sql_security_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2301)
		p.Match(GoogleSQLParserSQL_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2302)
		p.Match(GoogleSQLParserSECURITY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2303)
		p.Sql_security_clause_kind()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISql_security_clause_kindContext is an interface to support dynamic dispatch.
type ISql_security_clause_kindContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	INVOKER_SYMBOL() antlr.TerminalNode
	DEFINER_SYMBOL() antlr.TerminalNode

	// IsSql_security_clause_kindContext differentiates from other interfaces.
	IsSql_security_clause_kindContext()
}

type Sql_security_clause_kindContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_security_clause_kindContext() *Sql_security_clause_kindContext {
	var p = new(Sql_security_clause_kindContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_sql_security_clause_kind
	return p
}

func InitEmptySql_security_clause_kindContext(p *Sql_security_clause_kindContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_sql_security_clause_kind
}

func (*Sql_security_clause_kindContext) IsSql_security_clause_kindContext() {}

func NewSql_security_clause_kindContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_security_clause_kindContext {
	var p = new(Sql_security_clause_kindContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_sql_security_clause_kind

	return p
}

func (s *Sql_security_clause_kindContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_security_clause_kindContext) INVOKER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINVOKER_SYMBOL, 0)
}

func (s *Sql_security_clause_kindContext) DEFINER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDEFINER_SYMBOL, 0)
}

func (s *Sql_security_clause_kindContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_security_clause_kindContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_security_clause_kindContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSql_security_clause_kind(s)
	}
}

func (s *Sql_security_clause_kindContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSql_security_clause_kind(s)
	}
}

func (s *Sql_security_clause_kindContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSql_security_clause_kind(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Sql_security_clause_kind() (localctx ISql_security_clause_kindContext) {
	localctx = NewSql_security_clause_kindContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 242, GoogleSQLParserRULE_sql_security_clause_kind)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2305)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserDEFINER_SYMBOL || _la == GoogleSQLParserINVOKER_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAs_sql_function_body_or_stringContext is an interface to support dynamic dispatch.
type IAs_sql_function_body_or_stringContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AS_SYMBOL() antlr.TerminalNode
	Sql_function_body() ISql_function_bodyContext
	String_literal() IString_literalContext

	// IsAs_sql_function_body_or_stringContext differentiates from other interfaces.
	IsAs_sql_function_body_or_stringContext()
}

type As_sql_function_body_or_stringContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAs_sql_function_body_or_stringContext() *As_sql_function_body_or_stringContext {
	var p = new(As_sql_function_body_or_stringContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_as_sql_function_body_or_string
	return p
}

func InitEmptyAs_sql_function_body_or_stringContext(p *As_sql_function_body_or_stringContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_as_sql_function_body_or_string
}

func (*As_sql_function_body_or_stringContext) IsAs_sql_function_body_or_stringContext() {}

func NewAs_sql_function_body_or_stringContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *As_sql_function_body_or_stringContext {
	var p = new(As_sql_function_body_or_stringContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_as_sql_function_body_or_string

	return p
}

func (s *As_sql_function_body_or_stringContext) GetParser() antlr.Parser { return s.parser }

func (s *As_sql_function_body_or_stringContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *As_sql_function_body_or_stringContext) Sql_function_body() ISql_function_bodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_function_bodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_function_bodyContext)
}

func (s *As_sql_function_body_or_stringContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *As_sql_function_body_or_stringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *As_sql_function_body_or_stringContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *As_sql_function_body_or_stringContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAs_sql_function_body_or_string(s)
	}
}

func (s *As_sql_function_body_or_stringContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAs_sql_function_body_or_string(s)
	}
}

func (s *As_sql_function_body_or_stringContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAs_sql_function_body_or_string(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) As_sql_function_body_or_string() (localctx IAs_sql_function_body_or_stringContext) {
	localctx = NewAs_sql_function_body_or_stringContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, GoogleSQLParserRULE_as_sql_function_body_or_string)
	p.SetState(2311)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 221, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2307)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2308)
			p.Sql_function_body()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2309)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2310)
			p.string_literal(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISql_function_bodyContext is an interface to support dynamic dispatch.
type ISql_function_bodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	SELECT_SYMBOL() antlr.TerminalNode

	// IsSql_function_bodyContext differentiates from other interfaces.
	IsSql_function_bodyContext()
}

type Sql_function_bodyContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_function_bodyContext() *Sql_function_bodyContext {
	var p = new(Sql_function_bodyContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_sql_function_body
	return p
}

func InitEmptySql_function_bodyContext(p *Sql_function_bodyContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_sql_function_body
}

func (*Sql_function_bodyContext) IsSql_function_bodyContext() {}

func NewSql_function_bodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_function_bodyContext {
	var p = new(Sql_function_bodyContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_sql_function_body

	return p
}

func (s *Sql_function_bodyContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_function_bodyContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Sql_function_bodyContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Sql_function_bodyContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Sql_function_bodyContext) SELECT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSELECT_SYMBOL, 0)
}

func (s *Sql_function_bodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_function_bodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_function_bodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSql_function_body(s)
	}
}

func (s *Sql_function_bodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSql_function_body(s)
	}
}

func (s *Sql_function_bodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSql_function_body(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Sql_function_body() (localctx ISql_function_bodyContext) {
	localctx = NewSql_function_bodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, GoogleSQLParserRULE_sql_function_body)
	p.SetState(2320)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 222, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2313)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2314)
			p.expression(0)
		}
		{
			p.SetState(2315)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2317)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2318)
			p.Match(GoogleSQLParserSELECT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.NotifyErrorListeners("The body of each CREATE FUNCTION statement is an expression, not a query; to use a query as an expression, the query must be wrapped with additional parentheses to make it a scalar subquery expression", nil, nil)

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnordered_options_bodyContext is an interface to support dynamic dispatch.
type IUnordered_options_bodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Opt_options_list() IOpt_options_listContext
	As_sql_function_body_or_string() IAs_sql_function_body_or_stringContext

	// IsUnordered_options_bodyContext differentiates from other interfaces.
	IsUnordered_options_bodyContext()
}

type Unordered_options_bodyContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnordered_options_bodyContext() *Unordered_options_bodyContext {
	var p = new(Unordered_options_bodyContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unordered_options_body
	return p
}

func InitEmptyUnordered_options_bodyContext(p *Unordered_options_bodyContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unordered_options_body
}

func (*Unordered_options_bodyContext) IsUnordered_options_bodyContext() {}

func NewUnordered_options_bodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unordered_options_bodyContext {
	var p = new(Unordered_options_bodyContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_unordered_options_body

	return p
}

func (s *Unordered_options_bodyContext) GetParser() antlr.Parser { return s.parser }

func (s *Unordered_options_bodyContext) Opt_options_list() IOpt_options_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_options_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_options_listContext)
}

func (s *Unordered_options_bodyContext) As_sql_function_body_or_string() IAs_sql_function_body_or_stringContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_sql_function_body_or_stringContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_sql_function_body_or_stringContext)
}

func (s *Unordered_options_bodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unordered_options_bodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unordered_options_bodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUnordered_options_body(s)
	}
}

func (s *Unordered_options_bodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUnordered_options_body(s)
	}
}

func (s *Unordered_options_bodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUnordered_options_body(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Unordered_options_body() (localctx IUnordered_options_bodyContext) {
	localctx = NewUnordered_options_bodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, GoogleSQLParserRULE_unordered_options_body)
	var _la int

	p.SetState(2330)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserOPTIONS_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2322)
			p.Opt_options_list()
		}
		p.SetState(2324)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAS_SYMBOL {
			{
				p.SetState(2323)
				p.As_sql_function_body_or_string()
			}

		}

	case GoogleSQLParserAS_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2326)
			p.As_sql_function_body_or_string()
		}
		p.SetState(2328)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserOPTIONS_SYMBOL {
			{
				p.SetState(2327)
				p.Opt_options_list()
			}

		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_language_or_remote_with_connectionContext is an interface to support dynamic dispatch.
type IOpt_language_or_remote_with_connectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LANGUAGE_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext
	Remote_with_connection_clause() IRemote_with_connection_clauseContext
	Language() ILanguageContext

	// IsOpt_language_or_remote_with_connectionContext differentiates from other interfaces.
	IsOpt_language_or_remote_with_connectionContext()
}

type Opt_language_or_remote_with_connectionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_language_or_remote_with_connectionContext() *Opt_language_or_remote_with_connectionContext {
	var p = new(Opt_language_or_remote_with_connectionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_language_or_remote_with_connection
	return p
}

func InitEmptyOpt_language_or_remote_with_connectionContext(p *Opt_language_or_remote_with_connectionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_language_or_remote_with_connection
}

func (*Opt_language_or_remote_with_connectionContext) IsOpt_language_or_remote_with_connectionContext() {
}

func NewOpt_language_or_remote_with_connectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_language_or_remote_with_connectionContext {
	var p = new(Opt_language_or_remote_with_connectionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_language_or_remote_with_connection

	return p
}

func (s *Opt_language_or_remote_with_connectionContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_language_or_remote_with_connectionContext) LANGUAGE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLANGUAGE_SYMBOL, 0)
}

func (s *Opt_language_or_remote_with_connectionContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Opt_language_or_remote_with_connectionContext) Remote_with_connection_clause() IRemote_with_connection_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRemote_with_connection_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRemote_with_connection_clauseContext)
}

func (s *Opt_language_or_remote_with_connectionContext) Language() ILanguageContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILanguageContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILanguageContext)
}

func (s *Opt_language_or_remote_with_connectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_language_or_remote_with_connectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_language_or_remote_with_connectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_language_or_remote_with_connection(s)
	}
}

func (s *Opt_language_or_remote_with_connectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_language_or_remote_with_connection(s)
	}
}

func (s *Opt_language_or_remote_with_connectionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_language_or_remote_with_connection(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_language_or_remote_with_connection() (localctx IOpt_language_or_remote_with_connectionContext) {
	localctx = NewOpt_language_or_remote_with_connectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 250, GoogleSQLParserRULE_opt_language_or_remote_with_connection)
	var _la int

	p.SetState(2341)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserLANGUAGE_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2332)
			p.Match(GoogleSQLParserLANGUAGE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2333)
			p.Identifier()
		}
		p.SetState(2335)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserWITH_SYMBOL || _la == GoogleSQLParserREMOTE_SYMBOL {
			{
				p.SetState(2334)
				p.Remote_with_connection_clause()
			}

		}

	case GoogleSQLParserWITH_SYMBOL, GoogleSQLParserREMOTE_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2337)
			p.Remote_with_connection_clause()
		}
		p.SetState(2339)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserLANGUAGE_SYMBOL {
			{
				p.SetState(2338)
				p.Language()
			}

		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILanguageContext is an interface to support dynamic dispatch.
type ILanguageContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LANGUAGE_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext

	// IsLanguageContext differentiates from other interfaces.
	IsLanguageContext()
}

type LanguageContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLanguageContext() *LanguageContext {
	var p = new(LanguageContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_language
	return p
}

func InitEmptyLanguageContext(p *LanguageContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_language
}

func (*LanguageContext) IsLanguageContext() {}

func NewLanguageContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LanguageContext {
	var p = new(LanguageContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_language

	return p
}

func (s *LanguageContext) GetParser() antlr.Parser { return s.parser }

func (s *LanguageContext) LANGUAGE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLANGUAGE_SYMBOL, 0)
}

func (s *LanguageContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *LanguageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LanguageContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LanguageContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterLanguage(s)
	}
}

func (s *LanguageContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitLanguage(s)
	}
}

func (s *LanguageContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitLanguage(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Language() (localctx ILanguageContext) {
	localctx = NewLanguageContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 252, GoogleSQLParserRULE_language)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2343)
		p.Match(GoogleSQLParserLANGUAGE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2344)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRemote_with_connection_clauseContext is an interface to support dynamic dispatch.
type IRemote_with_connection_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	REMOTE_SYMBOL() antlr.TerminalNode
	With_connection_clause() IWith_connection_clauseContext

	// IsRemote_with_connection_clauseContext differentiates from other interfaces.
	IsRemote_with_connection_clauseContext()
}

type Remote_with_connection_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRemote_with_connection_clauseContext() *Remote_with_connection_clauseContext {
	var p = new(Remote_with_connection_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_remote_with_connection_clause
	return p
}

func InitEmptyRemote_with_connection_clauseContext(p *Remote_with_connection_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_remote_with_connection_clause
}

func (*Remote_with_connection_clauseContext) IsRemote_with_connection_clauseContext() {}

func NewRemote_with_connection_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Remote_with_connection_clauseContext {
	var p = new(Remote_with_connection_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_remote_with_connection_clause

	return p
}

func (s *Remote_with_connection_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Remote_with_connection_clauseContext) REMOTE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREMOTE_SYMBOL, 0)
}

func (s *Remote_with_connection_clauseContext) With_connection_clause() IWith_connection_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_connection_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_connection_clauseContext)
}

func (s *Remote_with_connection_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Remote_with_connection_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Remote_with_connection_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRemote_with_connection_clause(s)
	}
}

func (s *Remote_with_connection_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRemote_with_connection_clause(s)
	}
}

func (s *Remote_with_connection_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRemote_with_connection_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Remote_with_connection_clause() (localctx IRemote_with_connection_clauseContext) {
	localctx = NewRemote_with_connection_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, GoogleSQLParserRULE_remote_with_connection_clause)
	var _la int

	p.SetState(2351)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserREMOTE_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2346)
			p.Match(GoogleSQLParserREMOTE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2348)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserWITH_SYMBOL {
			{
				p.SetState(2347)
				p.With_connection_clause()
			}

		}

	case GoogleSQLParserWITH_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2350)
			p.With_connection_clause()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWith_connection_clauseContext is an interface to support dynamic dispatch.
type IWith_connection_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WITH_SYMBOL() antlr.TerminalNode
	Connection_clause() IConnection_clauseContext

	// IsWith_connection_clauseContext differentiates from other interfaces.
	IsWith_connection_clauseContext()
}

type With_connection_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_connection_clauseContext() *With_connection_clauseContext {
	var p = new(With_connection_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_connection_clause
	return p
}

func InitEmptyWith_connection_clauseContext(p *With_connection_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_connection_clause
}

func (*With_connection_clauseContext) IsWith_connection_clauseContext() {}

func NewWith_connection_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_connection_clauseContext {
	var p = new(With_connection_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_with_connection_clause

	return p
}

func (s *With_connection_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *With_connection_clauseContext) WITH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWITH_SYMBOL, 0)
}

func (s *With_connection_clauseContext) Connection_clause() IConnection_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConnection_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConnection_clauseContext)
}

func (s *With_connection_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_connection_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_connection_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWith_connection_clause(s)
	}
}

func (s *With_connection_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWith_connection_clause(s)
	}
}

func (s *With_connection_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWith_connection_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) With_connection_clause() (localctx IWith_connection_clauseContext) {
	localctx = NewWith_connection_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 256, GoogleSQLParserRULE_with_connection_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2353)
		p.Match(GoogleSQLParserWITH_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2354)
		p.Connection_clause()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_function_returnsContext is an interface to support dynamic dispatch.
type IOpt_function_returnsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Opt_returns() IOpt_returnsContext

	// IsOpt_function_returnsContext differentiates from other interfaces.
	IsOpt_function_returnsContext()
}

type Opt_function_returnsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_function_returnsContext() *Opt_function_returnsContext {
	var p = new(Opt_function_returnsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_function_returns
	return p
}

func InitEmptyOpt_function_returnsContext(p *Opt_function_returnsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_function_returns
}

func (*Opt_function_returnsContext) IsOpt_function_returnsContext() {}

func NewOpt_function_returnsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_function_returnsContext {
	var p = new(Opt_function_returnsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_function_returns

	return p
}

func (s *Opt_function_returnsContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_function_returnsContext) Opt_returns() IOpt_returnsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_returnsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_returnsContext)
}

func (s *Opt_function_returnsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_function_returnsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_function_returnsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_function_returns(s)
	}
}

func (s *Opt_function_returnsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_function_returns(s)
	}
}

func (s *Opt_function_returnsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_function_returns(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_function_returns() (localctx IOpt_function_returnsContext) {
	localctx = NewOpt_function_returnsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, GoogleSQLParserRULE_opt_function_returns)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2356)
		p.Opt_returns()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_returnsContext is an interface to support dynamic dispatch.
type IOpt_returnsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RETURNS_SYMBOL() antlr.TerminalNode
	Type_or_tvf_schema() IType_or_tvf_schemaContext

	// IsOpt_returnsContext differentiates from other interfaces.
	IsOpt_returnsContext()
}

type Opt_returnsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_returnsContext() *Opt_returnsContext {
	var p = new(Opt_returnsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_returns
	return p
}

func InitEmptyOpt_returnsContext(p *Opt_returnsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_returns
}

func (*Opt_returnsContext) IsOpt_returnsContext() {}

func NewOpt_returnsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_returnsContext {
	var p = new(Opt_returnsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_returns

	return p
}

func (s *Opt_returnsContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_returnsContext) RETURNS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRETURNS_SYMBOL, 0)
}

func (s *Opt_returnsContext) Type_or_tvf_schema() IType_or_tvf_schemaContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_or_tvf_schemaContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_or_tvf_schemaContext)
}

func (s *Opt_returnsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_returnsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_returnsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_returns(s)
	}
}

func (s *Opt_returnsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_returns(s)
	}
}

func (s *Opt_returnsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_returns(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_returns() (localctx IOpt_returnsContext) {
	localctx = NewOpt_returnsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 260, GoogleSQLParserRULE_opt_returns)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2358)
		p.Match(GoogleSQLParserRETURNS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2359)
		p.Type_or_tvf_schema()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunction_declarationContext is an interface to support dynamic dispatch.
type IFunction_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Path_expression() IPath_expressionContext
	Function_parameters() IFunction_parametersContext

	// IsFunction_declarationContext differentiates from other interfaces.
	IsFunction_declarationContext()
}

type Function_declarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_declarationContext() *Function_declarationContext {
	var p = new(Function_declarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_declaration
	return p
}

func InitEmptyFunction_declarationContext(p *Function_declarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_declaration
}

func (*Function_declarationContext) IsFunction_declarationContext() {}

func NewFunction_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_declarationContext {
	var p = new(Function_declarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_function_declaration

	return p
}

func (s *Function_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_declarationContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Function_declarationContext) Function_parameters() IFunction_parametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunction_parametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunction_parametersContext)
}

func (s *Function_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFunction_declaration(s)
	}
}

func (s *Function_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFunction_declaration(s)
	}
}

func (s *Function_declarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFunction_declaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Function_declaration() (localctx IFunction_declarationContext) {
	localctx = NewFunction_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 262, GoogleSQLParserRULE_function_declaration)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2361)
		p.Path_expression()
	}
	{
		p.SetState(2362)
		p.Function_parameters()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunction_parametersContext is an interface to support dynamic dispatch.
type IFunction_parametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	AllFunction_parameter() []IFunction_parameterContext
	Function_parameter(i int) IFunction_parameterContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsFunction_parametersContext differentiates from other interfaces.
	IsFunction_parametersContext()
}

type Function_parametersContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_parametersContext() *Function_parametersContext {
	var p = new(Function_parametersContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_parameters
	return p
}

func InitEmptyFunction_parametersContext(p *Function_parametersContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_parameters
}

func (*Function_parametersContext) IsFunction_parametersContext() {}

func NewFunction_parametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_parametersContext {
	var p = new(Function_parametersContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_function_parameters

	return p
}

func (s *Function_parametersContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_parametersContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Function_parametersContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Function_parametersContext) AllFunction_parameter() []IFunction_parameterContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFunction_parameterContext); ok {
			len++
		}
	}

	tst := make([]IFunction_parameterContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFunction_parameterContext); ok {
			tst[i] = t.(IFunction_parameterContext)
			i++
		}
	}

	return tst
}

func (s *Function_parametersContext) Function_parameter(i int) IFunction_parameterContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunction_parameterContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunction_parameterContext)
}

func (s *Function_parametersContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Function_parametersContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Function_parametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_parametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_parametersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFunction_parameters(s)
	}
}

func (s *Function_parametersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFunction_parameters(s)
	}
}

func (s *Function_parametersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFunction_parameters(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Function_parameters() (localctx IFunction_parametersContext) {
	localctx = NewFunction_parametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 264, GoogleSQLParserRULE_function_parameters)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2364)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2373)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64((_la-54)) & ^0x3f) == 0 && ((int64(1)<<(_la-54))&-254304519003570175) != 0) || ((int64((_la-118)) & ^0x3f) == 0 && ((int64(1)<<(_la-118))&-1) != 0) || ((int64((_la-182)) & ^0x3f) == 0 && ((int64(1)<<(_la-182))&-1) != 0) || ((int64((_la-246)) & ^0x3f) == 0 && ((int64(1)<<(_la-246))&140737488354815) != 0) || ((int64((_la-331)) & ^0x3f) == 0 && ((int64(1)<<(_la-331))&1044609) != 0) {
		{
			p.SetState(2365)
			p.Function_parameter()
		}
		p.SetState(2370)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == GoogleSQLParserCOMMA_SYMBOL {
			{
				p.SetState(2366)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(2367)
				p.Function_parameter()
			}

			p.SetState(2372)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(2375)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunction_parameterContext is an interface to support dynamic dispatch.
type IFunction_parameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	Type_or_tvf_schema() IType_or_tvf_schemaContext
	Opt_as_alias_with_required_as() IOpt_as_alias_with_required_asContext
	Opt_default_expression() IOpt_default_expressionContext
	Opt_not_aggregate() IOpt_not_aggregateContext

	// IsFunction_parameterContext differentiates from other interfaces.
	IsFunction_parameterContext()
}

type Function_parameterContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_parameterContext() *Function_parameterContext {
	var p = new(Function_parameterContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_parameter
	return p
}

func InitEmptyFunction_parameterContext(p *Function_parameterContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_parameter
}

func (*Function_parameterContext) IsFunction_parameterContext() {}

func NewFunction_parameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_parameterContext {
	var p = new(Function_parameterContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_function_parameter

	return p
}

func (s *Function_parameterContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_parameterContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Function_parameterContext) Type_or_tvf_schema() IType_or_tvf_schemaContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_or_tvf_schemaContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_or_tvf_schemaContext)
}

func (s *Function_parameterContext) Opt_as_alias_with_required_as() IOpt_as_alias_with_required_asContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_as_alias_with_required_asContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_as_alias_with_required_asContext)
}

func (s *Function_parameterContext) Opt_default_expression() IOpt_default_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_default_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_default_expressionContext)
}

func (s *Function_parameterContext) Opt_not_aggregate() IOpt_not_aggregateContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_not_aggregateContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_not_aggregateContext)
}

func (s *Function_parameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_parameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_parameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFunction_parameter(s)
	}
}

func (s *Function_parameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFunction_parameter(s)
	}
}

func (s *Function_parameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFunction_parameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Function_parameter() (localctx IFunction_parameterContext) {
	localctx = NewFunction_parameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 266, GoogleSQLParserRULE_function_parameter)
	var _la int

	p.SetState(2395)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 238, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2377)
			p.Identifier()
		}
		{
			p.SetState(2378)
			p.Type_or_tvf_schema()
		}
		p.SetState(2380)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAS_SYMBOL {
			{
				p.SetState(2379)
				p.Opt_as_alias_with_required_as()
			}

		}
		p.SetState(2383)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserDEFAULT_SYMBOL {
			{
				p.SetState(2382)
				p.Opt_default_expression()
			}

		}
		p.SetState(2386)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserNOT_SYMBOL {
			{
				p.SetState(2385)
				p.Opt_not_aggregate()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2388)
			p.Type_or_tvf_schema()
		}
		p.SetState(2390)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAS_SYMBOL {
			{
				p.SetState(2389)
				p.Opt_as_alias_with_required_as()
			}

		}
		p.SetState(2393)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserNOT_SYMBOL {
			{
				p.SetState(2392)
				p.Opt_not_aggregate()
			}

		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_not_aggregateContext is an interface to support dynamic dispatch.
type IOpt_not_aggregateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NOT_SYMBOL() antlr.TerminalNode
	AGGREGATE_SYMBOL() antlr.TerminalNode

	// IsOpt_not_aggregateContext differentiates from other interfaces.
	IsOpt_not_aggregateContext()
}

type Opt_not_aggregateContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_not_aggregateContext() *Opt_not_aggregateContext {
	var p = new(Opt_not_aggregateContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_not_aggregate
	return p
}

func InitEmptyOpt_not_aggregateContext(p *Opt_not_aggregateContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_not_aggregate
}

func (*Opt_not_aggregateContext) IsOpt_not_aggregateContext() {}

func NewOpt_not_aggregateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_not_aggregateContext {
	var p = new(Opt_not_aggregateContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_not_aggregate

	return p
}

func (s *Opt_not_aggregateContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_not_aggregateContext) NOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNOT_SYMBOL, 0)
}

func (s *Opt_not_aggregateContext) AGGREGATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAGGREGATE_SYMBOL, 0)
}

func (s *Opt_not_aggregateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_not_aggregateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_not_aggregateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_not_aggregate(s)
	}
}

func (s *Opt_not_aggregateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_not_aggregate(s)
	}
}

func (s *Opt_not_aggregateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_not_aggregate(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_not_aggregate() (localctx IOpt_not_aggregateContext) {
	localctx = NewOpt_not_aggregateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 268, GoogleSQLParserRULE_opt_not_aggregate)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2397)
		p.Match(GoogleSQLParserNOT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2398)
		p.Match(GoogleSQLParserAGGREGATE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_default_expressionContext is an interface to support dynamic dispatch.
type IOpt_default_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DEFAULT_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsOpt_default_expressionContext differentiates from other interfaces.
	IsOpt_default_expressionContext()
}

type Opt_default_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_default_expressionContext() *Opt_default_expressionContext {
	var p = new(Opt_default_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_default_expression
	return p
}

func InitEmptyOpt_default_expressionContext(p *Opt_default_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_default_expression
}

func (*Opt_default_expressionContext) IsOpt_default_expressionContext() {}

func NewOpt_default_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_default_expressionContext {
	var p = new(Opt_default_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_default_expression

	return p
}

func (s *Opt_default_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_default_expressionContext) DEFAULT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDEFAULT_SYMBOL, 0)
}

func (s *Opt_default_expressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Opt_default_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_default_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_default_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_default_expression(s)
	}
}

func (s *Opt_default_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_default_expression(s)
	}
}

func (s *Opt_default_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_default_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_default_expression() (localctx IOpt_default_expressionContext) {
	localctx = NewOpt_default_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 270, GoogleSQLParserRULE_opt_default_expression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2400)
		p.Match(GoogleSQLParserDEFAULT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2401)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IType_or_tvf_schemaContext is an interface to support dynamic dispatch.
type IType_or_tvf_schemaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Type_() ITypeContext
	Templated_parameter_type() ITemplated_parameter_typeContext
	Tvf_schema() ITvf_schemaContext

	// IsType_or_tvf_schemaContext differentiates from other interfaces.
	IsType_or_tvf_schemaContext()
}

type Type_or_tvf_schemaContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_or_tvf_schemaContext() *Type_or_tvf_schemaContext {
	var p = new(Type_or_tvf_schemaContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_type_or_tvf_schema
	return p
}

func InitEmptyType_or_tvf_schemaContext(p *Type_or_tvf_schemaContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_type_or_tvf_schema
}

func (*Type_or_tvf_schemaContext) IsType_or_tvf_schemaContext() {}

func NewType_or_tvf_schemaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_or_tvf_schemaContext {
	var p = new(Type_or_tvf_schemaContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_type_or_tvf_schema

	return p
}

func (s *Type_or_tvf_schemaContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_or_tvf_schemaContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Type_or_tvf_schemaContext) Templated_parameter_type() ITemplated_parameter_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplated_parameter_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplated_parameter_typeContext)
}

func (s *Type_or_tvf_schemaContext) Tvf_schema() ITvf_schemaContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITvf_schemaContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITvf_schemaContext)
}

func (s *Type_or_tvf_schemaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_or_tvf_schemaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_or_tvf_schemaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterType_or_tvf_schema(s)
	}
}

func (s *Type_or_tvf_schemaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitType_or_tvf_schema(s)
	}
}

func (s *Type_or_tvf_schemaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitType_or_tvf_schema(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Type_or_tvf_schema() (localctx IType_or_tvf_schemaContext) {
	localctx = NewType_or_tvf_schemaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 272, GoogleSQLParserRULE_type_or_tvf_schema)
	p.SetState(2406)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 239, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2403)
			p.Type_()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2404)
			p.Templated_parameter_type()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2405)
			p.Tvf_schema()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITvf_schemaContext is an interface to support dynamic dispatch.
type ITvf_schemaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TABLE_SYMBOL() antlr.TerminalNode
	Template_type_open() ITemplate_type_openContext
	AllTvf_schema_column() []ITvf_schema_columnContext
	Tvf_schema_column(i int) ITvf_schema_columnContext
	Template_type_close() ITemplate_type_closeContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsTvf_schemaContext differentiates from other interfaces.
	IsTvf_schemaContext()
}

type Tvf_schemaContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTvf_schemaContext() *Tvf_schemaContext {
	var p = new(Tvf_schemaContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_tvf_schema
	return p
}

func InitEmptyTvf_schemaContext(p *Tvf_schemaContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_tvf_schema
}

func (*Tvf_schemaContext) IsTvf_schemaContext() {}

func NewTvf_schemaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tvf_schemaContext {
	var p = new(Tvf_schemaContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_tvf_schema

	return p
}

func (s *Tvf_schemaContext) GetParser() antlr.Parser { return s.parser }

func (s *Tvf_schemaContext) TABLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTABLE_SYMBOL, 0)
}

func (s *Tvf_schemaContext) Template_type_open() ITemplate_type_openContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_openContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_openContext)
}

func (s *Tvf_schemaContext) AllTvf_schema_column() []ITvf_schema_columnContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITvf_schema_columnContext); ok {
			len++
		}
	}

	tst := make([]ITvf_schema_columnContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITvf_schema_columnContext); ok {
			tst[i] = t.(ITvf_schema_columnContext)
			i++
		}
	}

	return tst
}

func (s *Tvf_schemaContext) Tvf_schema_column(i int) ITvf_schema_columnContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITvf_schema_columnContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITvf_schema_columnContext)
}

func (s *Tvf_schemaContext) Template_type_close() ITemplate_type_closeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_closeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_closeContext)
}

func (s *Tvf_schemaContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Tvf_schemaContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Tvf_schemaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tvf_schemaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tvf_schemaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTvf_schema(s)
	}
}

func (s *Tvf_schemaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTvf_schema(s)
	}
}

func (s *Tvf_schemaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTvf_schema(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Tvf_schema() (localctx ITvf_schemaContext) {
	localctx = NewTvf_schemaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 274, GoogleSQLParserRULE_tvf_schema)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2408)
		p.Match(GoogleSQLParserTABLE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2409)
		p.Template_type_open()
	}
	{
		p.SetState(2410)
		p.Tvf_schema_column()
	}
	p.SetState(2415)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(2411)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2412)
			p.Tvf_schema_column()
		}

		p.SetState(2417)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2418)
		p.Template_type_close()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITvf_schema_columnContext is an interface to support dynamic dispatch.
type ITvf_schema_columnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	Type_() ITypeContext

	// IsTvf_schema_columnContext differentiates from other interfaces.
	IsTvf_schema_columnContext()
}

type Tvf_schema_columnContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTvf_schema_columnContext() *Tvf_schema_columnContext {
	var p = new(Tvf_schema_columnContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_tvf_schema_column
	return p
}

func InitEmptyTvf_schema_columnContext(p *Tvf_schema_columnContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_tvf_schema_column
}

func (*Tvf_schema_columnContext) IsTvf_schema_columnContext() {}

func NewTvf_schema_columnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tvf_schema_columnContext {
	var p = new(Tvf_schema_columnContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_tvf_schema_column

	return p
}

func (s *Tvf_schema_columnContext) GetParser() antlr.Parser { return s.parser }

func (s *Tvf_schema_columnContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Tvf_schema_columnContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Tvf_schema_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tvf_schema_columnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tvf_schema_columnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTvf_schema_column(s)
	}
}

func (s *Tvf_schema_columnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTvf_schema_column(s)
	}
}

func (s *Tvf_schema_columnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTvf_schema_column(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Tvf_schema_column() (localctx ITvf_schema_columnContext) {
	localctx = NewTvf_schema_columnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, GoogleSQLParserRULE_tvf_schema_column)
	p.SetState(2424)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 241, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2420)
			p.Identifier()
		}
		{
			p.SetState(2421)
			p.Type_()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2423)
			p.Type_()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITemplated_parameter_typeContext is an interface to support dynamic dispatch.
type ITemplated_parameter_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ANY_SYMBOL() antlr.TerminalNode
	Templated_parameter_kind() ITemplated_parameter_kindContext

	// IsTemplated_parameter_typeContext differentiates from other interfaces.
	IsTemplated_parameter_typeContext()
}

type Templated_parameter_typeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplated_parameter_typeContext() *Templated_parameter_typeContext {
	var p = new(Templated_parameter_typeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_templated_parameter_type
	return p
}

func InitEmptyTemplated_parameter_typeContext(p *Templated_parameter_typeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_templated_parameter_type
}

func (*Templated_parameter_typeContext) IsTemplated_parameter_typeContext() {}

func NewTemplated_parameter_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Templated_parameter_typeContext {
	var p = new(Templated_parameter_typeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_templated_parameter_type

	return p
}

func (s *Templated_parameter_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Templated_parameter_typeContext) ANY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserANY_SYMBOL, 0)
}

func (s *Templated_parameter_typeContext) Templated_parameter_kind() ITemplated_parameter_kindContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplated_parameter_kindContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplated_parameter_kindContext)
}

func (s *Templated_parameter_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Templated_parameter_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Templated_parameter_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTemplated_parameter_type(s)
	}
}

func (s *Templated_parameter_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTemplated_parameter_type(s)
	}
}

func (s *Templated_parameter_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTemplated_parameter_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Templated_parameter_type() (localctx ITemplated_parameter_typeContext) {
	localctx = NewTemplated_parameter_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 278, GoogleSQLParserRULE_templated_parameter_type)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2426)
		p.Match(GoogleSQLParserANY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2427)
		p.Templated_parameter_kind()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITemplated_parameter_kindContext is an interface to support dynamic dispatch.
type ITemplated_parameter_kindContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PROTO_SYMBOL() antlr.TerminalNode
	ENUM_SYMBOL() antlr.TerminalNode
	STRUCT_SYMBOL() antlr.TerminalNode
	ARRAY_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext

	// IsTemplated_parameter_kindContext differentiates from other interfaces.
	IsTemplated_parameter_kindContext()
}

type Templated_parameter_kindContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplated_parameter_kindContext() *Templated_parameter_kindContext {
	var p = new(Templated_parameter_kindContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_templated_parameter_kind
	return p
}

func InitEmptyTemplated_parameter_kindContext(p *Templated_parameter_kindContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_templated_parameter_kind
}

func (*Templated_parameter_kindContext) IsTemplated_parameter_kindContext() {}

func NewTemplated_parameter_kindContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Templated_parameter_kindContext {
	var p = new(Templated_parameter_kindContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_templated_parameter_kind

	return p
}

func (s *Templated_parameter_kindContext) GetParser() antlr.Parser { return s.parser }

func (s *Templated_parameter_kindContext) PROTO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPROTO_SYMBOL, 0)
}

func (s *Templated_parameter_kindContext) ENUM_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserENUM_SYMBOL, 0)
}

func (s *Templated_parameter_kindContext) STRUCT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTRUCT_SYMBOL, 0)
}

func (s *Templated_parameter_kindContext) ARRAY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserARRAY_SYMBOL, 0)
}

func (s *Templated_parameter_kindContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Templated_parameter_kindContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Templated_parameter_kindContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Templated_parameter_kindContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTemplated_parameter_kind(s)
	}
}

func (s *Templated_parameter_kindContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTemplated_parameter_kind(s)
	}
}

func (s *Templated_parameter_kindContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTemplated_parameter_kind(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Templated_parameter_kind() (localctx ITemplated_parameter_kindContext) {
	localctx = NewTemplated_parameter_kindContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 280, GoogleSQLParserRULE_templated_parameter_kind)
	p.SetState(2434)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserPROTO_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2429)
			p.Match(GoogleSQLParserPROTO_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserENUM_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2430)
			p.Match(GoogleSQLParserENUM_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserSTRUCT_SYMBOL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2431)
			p.Match(GoogleSQLParserSTRUCT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserARRAY_SYMBOL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2432)
			p.Match(GoogleSQLParserARRAY_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserCONFLICT_SYMBOL, GoogleSQLParserDESTINATION_SYMBOL, GoogleSQLParserPROPERTY_SYMBOL, GoogleSQLParserGRAPH_SYMBOL, GoogleSQLParserNODE_SYMBOL, GoogleSQLParserPROPERTIES_SYMBOL, GoogleSQLParserLABEL_SYMBOL, GoogleSQLParserEDGE_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2433)
			p.Identifier()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_aggregateContext is an interface to support dynamic dispatch.
type IOpt_aggregateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AGGREGATE_SYMBOL() antlr.TerminalNode

	// IsOpt_aggregateContext differentiates from other interfaces.
	IsOpt_aggregateContext()
}

type Opt_aggregateContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_aggregateContext() *Opt_aggregateContext {
	var p = new(Opt_aggregateContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_aggregate
	return p
}

func InitEmptyOpt_aggregateContext(p *Opt_aggregateContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_aggregate
}

func (*Opt_aggregateContext) IsOpt_aggregateContext() {}

func NewOpt_aggregateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_aggregateContext {
	var p = new(Opt_aggregateContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_aggregate

	return p
}

func (s *Opt_aggregateContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_aggregateContext) AGGREGATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAGGREGATE_SYMBOL, 0)
}

func (s *Opt_aggregateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_aggregateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_aggregateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_aggregate(s)
	}
}

func (s *Opt_aggregateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_aggregate(s)
	}
}

func (s *Opt_aggregateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_aggregate(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_aggregate() (localctx IOpt_aggregateContext) {
	localctx = NewOpt_aggregateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 282, GoogleSQLParserRULE_opt_aggregate)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2436)
		p.Match(GoogleSQLParserAGGREGATE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_database_statementContext is an interface to support dynamic dispatch.
type ICreate_database_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CREATE_SYMBOL() antlr.TerminalNode
	DATABASE_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext
	Opt_options_list() IOpt_options_listContext

	// IsCreate_database_statementContext differentiates from other interfaces.
	IsCreate_database_statementContext()
}

type Create_database_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_database_statementContext() *Create_database_statementContext {
	var p = new(Create_database_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_database_statement
	return p
}

func InitEmptyCreate_database_statementContext(p *Create_database_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_database_statement
}

func (*Create_database_statementContext) IsCreate_database_statementContext() {}

func NewCreate_database_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_database_statementContext {
	var p = new(Create_database_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_create_database_statement

	return p
}

func (s *Create_database_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_database_statementContext) CREATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCREATE_SYMBOL, 0)
}

func (s *Create_database_statementContext) DATABASE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDATABASE_SYMBOL, 0)
}

func (s *Create_database_statementContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Create_database_statementContext) Opt_options_list() IOpt_options_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_options_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_options_listContext)
}

func (s *Create_database_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_database_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_database_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCreate_database_statement(s)
	}
}

func (s *Create_database_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCreate_database_statement(s)
	}
}

func (s *Create_database_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCreate_database_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Create_database_statement() (localctx ICreate_database_statementContext) {
	localctx = NewCreate_database_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 284, GoogleSQLParserRULE_create_database_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2438)
		p.Match(GoogleSQLParserCREATE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2439)
		p.Match(GoogleSQLParserDATABASE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2440)
		p.Path_expression()
	}
	p.SetState(2442)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOPTIONS_SYMBOL {
		{
			p.SetState(2441)
			p.Opt_options_list()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_connection_statementContext is an interface to support dynamic dispatch.
type ICreate_connection_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CREATE_SYMBOL() antlr.TerminalNode
	CONNECTION_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext
	Opt_or_replace() IOpt_or_replaceContext
	Opt_if_not_exists() IOpt_if_not_existsContext
	Opt_options_list() IOpt_options_listContext

	// IsCreate_connection_statementContext differentiates from other interfaces.
	IsCreate_connection_statementContext()
}

type Create_connection_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_connection_statementContext() *Create_connection_statementContext {
	var p = new(Create_connection_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_connection_statement
	return p
}

func InitEmptyCreate_connection_statementContext(p *Create_connection_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_connection_statement
}

func (*Create_connection_statementContext) IsCreate_connection_statementContext() {}

func NewCreate_connection_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_connection_statementContext {
	var p = new(Create_connection_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_create_connection_statement

	return p
}

func (s *Create_connection_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_connection_statementContext) CREATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCREATE_SYMBOL, 0)
}

func (s *Create_connection_statementContext) CONNECTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCONNECTION_SYMBOL, 0)
}

func (s *Create_connection_statementContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Create_connection_statementContext) Opt_or_replace() IOpt_or_replaceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_or_replaceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_or_replaceContext)
}

func (s *Create_connection_statementContext) Opt_if_not_exists() IOpt_if_not_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_if_not_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_if_not_existsContext)
}

func (s *Create_connection_statementContext) Opt_options_list() IOpt_options_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_options_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_options_listContext)
}

func (s *Create_connection_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_connection_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_connection_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCreate_connection_statement(s)
	}
}

func (s *Create_connection_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCreate_connection_statement(s)
	}
}

func (s *Create_connection_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCreate_connection_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Create_connection_statement() (localctx ICreate_connection_statementContext) {
	localctx = NewCreate_connection_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 286, GoogleSQLParserRULE_create_connection_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2444)
		p.Match(GoogleSQLParserCREATE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2446)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOR_SYMBOL {
		{
			p.SetState(2445)
			p.Opt_or_replace()
		}

	}
	{
		p.SetState(2448)
		p.Match(GoogleSQLParserCONNECTION_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2450)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserIF_SYMBOL {
		{
			p.SetState(2449)
			p.Opt_if_not_exists()
		}

	}
	{
		p.SetState(2452)
		p.Path_expression()
	}
	p.SetState(2454)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOPTIONS_SYMBOL {
		{
			p.SetState(2453)
			p.Opt_options_list()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_constant_statementContext is an interface to support dynamic dispatch.
type ICreate_constant_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CREATE_SYMBOL() antlr.TerminalNode
	CONSTANT_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext
	EQUAL_OPERATOR() antlr.TerminalNode
	Expression() IExpressionContext
	Opt_or_replace() IOpt_or_replaceContext
	Opt_create_scope() IOpt_create_scopeContext
	Opt_if_not_exists() IOpt_if_not_existsContext

	// IsCreate_constant_statementContext differentiates from other interfaces.
	IsCreate_constant_statementContext()
}

type Create_constant_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_constant_statementContext() *Create_constant_statementContext {
	var p = new(Create_constant_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_constant_statement
	return p
}

func InitEmptyCreate_constant_statementContext(p *Create_constant_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_create_constant_statement
}

func (*Create_constant_statementContext) IsCreate_constant_statementContext() {}

func NewCreate_constant_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_constant_statementContext {
	var p = new(Create_constant_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_create_constant_statement

	return p
}

func (s *Create_constant_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_constant_statementContext) CREATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCREATE_SYMBOL, 0)
}

func (s *Create_constant_statementContext) CONSTANT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCONSTANT_SYMBOL, 0)
}

func (s *Create_constant_statementContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Create_constant_statementContext) EQUAL_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEQUAL_OPERATOR, 0)
}

func (s *Create_constant_statementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Create_constant_statementContext) Opt_or_replace() IOpt_or_replaceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_or_replaceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_or_replaceContext)
}

func (s *Create_constant_statementContext) Opt_create_scope() IOpt_create_scopeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_create_scopeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_create_scopeContext)
}

func (s *Create_constant_statementContext) Opt_if_not_exists() IOpt_if_not_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_if_not_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_if_not_existsContext)
}

func (s *Create_constant_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_constant_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_constant_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCreate_constant_statement(s)
	}
}

func (s *Create_constant_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCreate_constant_statement(s)
	}
}

func (s *Create_constant_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCreate_constant_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Create_constant_statement() (localctx ICreate_constant_statementContext) {
	localctx = NewCreate_constant_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 288, GoogleSQLParserRULE_create_constant_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2456)
		p.Match(GoogleSQLParserCREATE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2458)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOR_SYMBOL {
		{
			p.SetState(2457)
			p.Opt_or_replace()
		}

	}
	p.SetState(2461)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-224)) & ^0x3f) == 0 && ((int64(1)<<(_la-224))&105553116266529) != 0 {
		{
			p.SetState(2460)
			p.Opt_create_scope()
		}

	}
	{
		p.SetState(2463)
		p.Match(GoogleSQLParserCONSTANT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2465)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserIF_SYMBOL {
		{
			p.SetState(2464)
			p.Opt_if_not_exists()
		}

	}
	{
		p.SetState(2467)
		p.Path_expression()
	}
	{
		p.SetState(2468)
		p.Match(GoogleSQLParserEQUAL_OPERATOR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2469)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_or_replaceContext is an interface to support dynamic dispatch.
type IOpt_or_replaceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OR_SYMBOL() antlr.TerminalNode
	REPLACE_SYMBOL() antlr.TerminalNode

	// IsOpt_or_replaceContext differentiates from other interfaces.
	IsOpt_or_replaceContext()
}

type Opt_or_replaceContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_or_replaceContext() *Opt_or_replaceContext {
	var p = new(Opt_or_replaceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_or_replace
	return p
}

func InitEmptyOpt_or_replaceContext(p *Opt_or_replaceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_or_replace
}

func (*Opt_or_replaceContext) IsOpt_or_replaceContext() {}

func NewOpt_or_replaceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_or_replaceContext {
	var p = new(Opt_or_replaceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_or_replace

	return p
}

func (s *Opt_or_replaceContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_or_replaceContext) OR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOR_SYMBOL, 0)
}

func (s *Opt_or_replaceContext) REPLACE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPLACE_SYMBOL, 0)
}

func (s *Opt_or_replaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_or_replaceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_or_replaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_or_replace(s)
	}
}

func (s *Opt_or_replaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_or_replace(s)
	}
}

func (s *Opt_or_replaceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_or_replace(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_or_replace() (localctx IOpt_or_replaceContext) {
	localctx = NewOpt_or_replaceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 290, GoogleSQLParserRULE_opt_or_replace)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2471)
		p.Match(GoogleSQLParserOR_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2472)
		p.Match(GoogleSQLParserREPLACE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_create_scopeContext is an interface to support dynamic dispatch.
type IOpt_create_scopeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TEMP_SYMBOL() antlr.TerminalNode
	TEMPORARY_SYMBOL() antlr.TerminalNode
	PUBLIC_SYMBOL() antlr.TerminalNode
	PRIVATE_SYMBOL() antlr.TerminalNode

	// IsOpt_create_scopeContext differentiates from other interfaces.
	IsOpt_create_scopeContext()
}

type Opt_create_scopeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_create_scopeContext() *Opt_create_scopeContext {
	var p = new(Opt_create_scopeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_create_scope
	return p
}

func InitEmptyOpt_create_scopeContext(p *Opt_create_scopeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_create_scope
}

func (*Opt_create_scopeContext) IsOpt_create_scopeContext() {}

func NewOpt_create_scopeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_create_scopeContext {
	var p = new(Opt_create_scopeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_create_scope

	return p
}

func (s *Opt_create_scopeContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_create_scopeContext) TEMP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTEMP_SYMBOL, 0)
}

func (s *Opt_create_scopeContext) TEMPORARY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTEMPORARY_SYMBOL, 0)
}

func (s *Opt_create_scopeContext) PUBLIC_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPUBLIC_SYMBOL, 0)
}

func (s *Opt_create_scopeContext) PRIVATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPRIVATE_SYMBOL, 0)
}

func (s *Opt_create_scopeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_create_scopeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_create_scopeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_create_scope(s)
	}
}

func (s *Opt_create_scopeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_create_scope(s)
	}
}

func (s *Opt_create_scopeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_create_scope(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_create_scope() (localctx IOpt_create_scopeContext) {
	localctx = NewOpt_create_scopeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 292, GoogleSQLParserRULE_opt_create_scope)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2474)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-224)) & ^0x3f) == 0 && ((int64(1)<<(_la-224))&105553116266529) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRun_batch_statementContext is an interface to support dynamic dispatch.
type IRun_batch_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RUN_SYMBOL() antlr.TerminalNode
	BATCH_SYMBOL() antlr.TerminalNode

	// IsRun_batch_statementContext differentiates from other interfaces.
	IsRun_batch_statementContext()
}

type Run_batch_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRun_batch_statementContext() *Run_batch_statementContext {
	var p = new(Run_batch_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_run_batch_statement
	return p
}

func InitEmptyRun_batch_statementContext(p *Run_batch_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_run_batch_statement
}

func (*Run_batch_statementContext) IsRun_batch_statementContext() {}

func NewRun_batch_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Run_batch_statementContext {
	var p = new(Run_batch_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_run_batch_statement

	return p
}

func (s *Run_batch_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Run_batch_statementContext) RUN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRUN_SYMBOL, 0)
}

func (s *Run_batch_statementContext) BATCH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBATCH_SYMBOL, 0)
}

func (s *Run_batch_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Run_batch_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Run_batch_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRun_batch_statement(s)
	}
}

func (s *Run_batch_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRun_batch_statement(s)
	}
}

func (s *Run_batch_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRun_batch_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Run_batch_statement() (localctx IRun_batch_statementContext) {
	localctx = NewRun_batch_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 294, GoogleSQLParserRULE_run_batch_statement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2476)
		p.Match(GoogleSQLParserRUN_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2477)
		p.Match(GoogleSQLParserBATCH_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAbort_batch_statementContext is an interface to support dynamic dispatch.
type IAbort_batch_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ABORT_SYMBOL() antlr.TerminalNode
	BATCH_SYMBOL() antlr.TerminalNode

	// IsAbort_batch_statementContext differentiates from other interfaces.
	IsAbort_batch_statementContext()
}

type Abort_batch_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAbort_batch_statementContext() *Abort_batch_statementContext {
	var p = new(Abort_batch_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_abort_batch_statement
	return p
}

func InitEmptyAbort_batch_statementContext(p *Abort_batch_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_abort_batch_statement
}

func (*Abort_batch_statementContext) IsAbort_batch_statementContext() {}

func NewAbort_batch_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Abort_batch_statementContext {
	var p = new(Abort_batch_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_abort_batch_statement

	return p
}

func (s *Abort_batch_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Abort_batch_statementContext) ABORT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserABORT_SYMBOL, 0)
}

func (s *Abort_batch_statementContext) BATCH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBATCH_SYMBOL, 0)
}

func (s *Abort_batch_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Abort_batch_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Abort_batch_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAbort_batch_statement(s)
	}
}

func (s *Abort_batch_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAbort_batch_statement(s)
	}
}

func (s *Abort_batch_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAbort_batch_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Abort_batch_statement() (localctx IAbort_batch_statementContext) {
	localctx = NewAbort_batch_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 296, GoogleSQLParserRULE_abort_batch_statement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2479)
		p.Match(GoogleSQLParserABORT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2480)
		p.Match(GoogleSQLParserBATCH_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStart_batch_statementContext is an interface to support dynamic dispatch.
type IStart_batch_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	START_SYMBOL() antlr.TerminalNode
	BATCH_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext

	// IsStart_batch_statementContext differentiates from other interfaces.
	IsStart_batch_statementContext()
}

type Start_batch_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStart_batch_statementContext() *Start_batch_statementContext {
	var p = new(Start_batch_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_start_batch_statement
	return p
}

func InitEmptyStart_batch_statementContext(p *Start_batch_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_start_batch_statement
}

func (*Start_batch_statementContext) IsStart_batch_statementContext() {}

func NewStart_batch_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Start_batch_statementContext {
	var p = new(Start_batch_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_start_batch_statement

	return p
}

func (s *Start_batch_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Start_batch_statementContext) START_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTART_SYMBOL, 0)
}

func (s *Start_batch_statementContext) BATCH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBATCH_SYMBOL, 0)
}

func (s *Start_batch_statementContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Start_batch_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Start_batch_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Start_batch_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStart_batch_statement(s)
	}
}

func (s *Start_batch_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStart_batch_statement(s)
	}
}

func (s *Start_batch_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStart_batch_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Start_batch_statement() (localctx IStart_batch_statementContext) {
	localctx = NewStart_batch_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 298, GoogleSQLParserRULE_start_batch_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2482)
		p.Match(GoogleSQLParserSTART_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2483)
		p.Match(GoogleSQLParserBATCH_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2485)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64((_la-72)) & ^0x3f) == 0 && ((int64(1)<<(_la-72))&-106523215214079) != 0) || ((int64((_la-136)) & ^0x3f) == 0 && ((int64(1)<<(_la-136))&-1) != 0) || ((int64((_la-200)) & ^0x3f) == 0 && ((int64(1)<<(_la-200))&-36028797018963969) != 0) || ((int64((_la-264)) & ^0x3f) == 0 && ((int64(1)<<(_la-264))&536870911) != 0) || ((int64((_la-338)) & ^0x3f) == 0 && ((int64(1)<<(_la-338))&8161) != 0) {
		{
			p.SetState(2484)
			p.Identifier()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRollback_statementContext is an interface to support dynamic dispatch.
type IRollback_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ROLLBACK_SYMBOL() antlr.TerminalNode
	TRANSACTION_SYMBOL() antlr.TerminalNode

	// IsRollback_statementContext differentiates from other interfaces.
	IsRollback_statementContext()
}

type Rollback_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRollback_statementContext() *Rollback_statementContext {
	var p = new(Rollback_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_rollback_statement
	return p
}

func InitEmptyRollback_statementContext(p *Rollback_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_rollback_statement
}

func (*Rollback_statementContext) IsRollback_statementContext() {}

func NewRollback_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rollback_statementContext {
	var p = new(Rollback_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_rollback_statement

	return p
}

func (s *Rollback_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Rollback_statementContext) ROLLBACK_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserROLLBACK_SYMBOL, 0)
}

func (s *Rollback_statementContext) TRANSACTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTRANSACTION_SYMBOL, 0)
}

func (s *Rollback_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rollback_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Rollback_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRollback_statement(s)
	}
}

func (s *Rollback_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRollback_statement(s)
	}
}

func (s *Rollback_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRollback_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Rollback_statement() (localctx IRollback_statementContext) {
	localctx = NewRollback_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 300, GoogleSQLParserRULE_rollback_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2487)
		p.Match(GoogleSQLParserROLLBACK_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2489)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserTRANSACTION_SYMBOL {
		{
			p.SetState(2488)
			p.Match(GoogleSQLParserTRANSACTION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICommit_statementContext is an interface to support dynamic dispatch.
type ICommit_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	COMMIT_SYMBOL() antlr.TerminalNode
	TRANSACTION_SYMBOL() antlr.TerminalNode

	// IsCommit_statementContext differentiates from other interfaces.
	IsCommit_statementContext()
}

type Commit_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCommit_statementContext() *Commit_statementContext {
	var p = new(Commit_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_commit_statement
	return p
}

func InitEmptyCommit_statementContext(p *Commit_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_commit_statement
}

func (*Commit_statementContext) IsCommit_statementContext() {}

func NewCommit_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Commit_statementContext {
	var p = new(Commit_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_commit_statement

	return p
}

func (s *Commit_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Commit_statementContext) COMMIT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMIT_SYMBOL, 0)
}

func (s *Commit_statementContext) TRANSACTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTRANSACTION_SYMBOL, 0)
}

func (s *Commit_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Commit_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Commit_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCommit_statement(s)
	}
}

func (s *Commit_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCommit_statement(s)
	}
}

func (s *Commit_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCommit_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Commit_statement() (localctx ICommit_statementContext) {
	localctx = NewCommit_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 302, GoogleSQLParserRULE_commit_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2491)
		p.Match(GoogleSQLParserCOMMIT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2493)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserTRANSACTION_SYMBOL {
		{
			p.SetState(2492)
			p.Match(GoogleSQLParserTRANSACTION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISet_statementContext is an interface to support dynamic dispatch.
type ISet_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SET_SYMBOL() antlr.TerminalNode
	TRANSACTION_SYMBOL() antlr.TerminalNode
	Transaction_mode_list() ITransaction_mode_listContext
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	EQUAL_OPERATOR() antlr.TerminalNode
	Expression() IExpressionContext
	Named_parameter_expression() INamed_parameter_expressionContext
	System_variable_expression() ISystem_variable_expressionContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Identifier_list() IIdentifier_listContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	COMMA_SYMBOL() antlr.TerminalNode

	// IsSet_statementContext differentiates from other interfaces.
	IsSet_statementContext()
}

type Set_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySet_statementContext() *Set_statementContext {
	var p = new(Set_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_set_statement
	return p
}

func InitEmptySet_statementContext(p *Set_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_set_statement
}

func (*Set_statementContext) IsSet_statementContext() {}

func NewSet_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Set_statementContext {
	var p = new(Set_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_set_statement

	return p
}

func (s *Set_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Set_statementContext) SET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSET_SYMBOL, 0)
}

func (s *Set_statementContext) TRANSACTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTRANSACTION_SYMBOL, 0)
}

func (s *Set_statementContext) Transaction_mode_list() ITransaction_mode_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITransaction_mode_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITransaction_mode_listContext)
}

func (s *Set_statementContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Set_statementContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Set_statementContext) EQUAL_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEQUAL_OPERATOR, 0)
}

func (s *Set_statementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Set_statementContext) Named_parameter_expression() INamed_parameter_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamed_parameter_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamed_parameter_expressionContext)
}

func (s *Set_statementContext) System_variable_expression() ISystem_variable_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISystem_variable_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISystem_variable_expressionContext)
}

func (s *Set_statementContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Set_statementContext) Identifier_list() IIdentifier_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifier_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifier_listContext)
}

func (s *Set_statementContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Set_statementContext) COMMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, 0)
}

func (s *Set_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Set_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Set_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSet_statement(s)
	}
}

func (s *Set_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSet_statement(s)
	}
}

func (s *Set_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSet_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Set_statement() (localctx ISet_statementContext) {
	localctx = NewSet_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 304, GoogleSQLParserRULE_set_statement)
	p.SetState(2527)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 253, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2495)
			p.Match(GoogleSQLParserSET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2496)
			p.Match(GoogleSQLParserTRANSACTION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2497)
			p.Transaction_mode_list()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2498)
			p.Match(GoogleSQLParserSET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2499)
			p.Identifier()
		}
		{
			p.SetState(2500)
			p.Match(GoogleSQLParserEQUAL_OPERATOR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2501)
			p.expression(0)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2503)
			p.Match(GoogleSQLParserSET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2504)
			p.Named_parameter_expression()
		}
		{
			p.SetState(2505)
			p.Match(GoogleSQLParserEQUAL_OPERATOR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2506)
			p.expression(0)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2508)
			p.Match(GoogleSQLParserSET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2509)
			p.System_variable_expression()
		}
		{
			p.SetState(2510)
			p.Match(GoogleSQLParserEQUAL_OPERATOR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2511)
			p.expression(0)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2513)
			p.Match(GoogleSQLParserSET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2514)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2515)
			p.Identifier_list()
		}
		{
			p.SetState(2516)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2517)
			p.Match(GoogleSQLParserEQUAL_OPERATOR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2518)
			p.expression(0)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2520)
			p.Match(GoogleSQLParserSET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2521)
			p.Identifier()
		}
		{
			p.SetState(2522)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2523)
			p.Identifier()
		}
		{
			p.SetState(2524)
			p.Match(GoogleSQLParserEQUAL_OPERATOR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.NotifyErrorListeners("Using SET with multiple variable required parentheses around the variable list", nil, nil)

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIdentifier_listContext is an interface to support dynamic dispatch.
type IIdentifier_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsIdentifier_listContext differentiates from other interfaces.
	IsIdentifier_listContext()
}

type Identifier_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifier_listContext() *Identifier_listContext {
	var p = new(Identifier_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_identifier_list
	return p
}

func InitEmptyIdentifier_listContext(p *Identifier_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_identifier_list
}

func (*Identifier_listContext) IsIdentifier_listContext() {}

func NewIdentifier_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Identifier_listContext {
	var p = new(Identifier_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_identifier_list

	return p
}

func (s *Identifier_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Identifier_listContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Identifier_listContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Identifier_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Identifier_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Identifier_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Identifier_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Identifier_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterIdentifier_list(s)
	}
}

func (s *Identifier_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitIdentifier_list(s)
	}
}

func (s *Identifier_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitIdentifier_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Identifier_list() (localctx IIdentifier_listContext) {
	localctx = NewIdentifier_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 306, GoogleSQLParserRULE_identifier_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2529)
		p.Identifier()
	}
	p.SetState(2534)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(2530)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2531)
			p.Identifier()
		}

		p.SetState(2536)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBegin_statementContext is an interface to support dynamic dispatch.
type IBegin_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Begin_transaction_keywords() IBegin_transaction_keywordsContext
	Transaction_mode_list() ITransaction_mode_listContext

	// IsBegin_statementContext differentiates from other interfaces.
	IsBegin_statementContext()
}

type Begin_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBegin_statementContext() *Begin_statementContext {
	var p = new(Begin_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_begin_statement
	return p
}

func InitEmptyBegin_statementContext(p *Begin_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_begin_statement
}

func (*Begin_statementContext) IsBegin_statementContext() {}

func NewBegin_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Begin_statementContext {
	var p = new(Begin_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_begin_statement

	return p
}

func (s *Begin_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Begin_statementContext) Begin_transaction_keywords() IBegin_transaction_keywordsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBegin_transaction_keywordsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBegin_transaction_keywordsContext)
}

func (s *Begin_statementContext) Transaction_mode_list() ITransaction_mode_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITransaction_mode_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITransaction_mode_listContext)
}

func (s *Begin_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Begin_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Begin_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBegin_statement(s)
	}
}

func (s *Begin_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBegin_statement(s)
	}
}

func (s *Begin_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBegin_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Begin_statement() (localctx IBegin_statementContext) {
	localctx = NewBegin_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 308, GoogleSQLParserRULE_begin_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2537)
		p.Begin_transaction_keywords()
	}
	p.SetState(2539)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserISOLATION_SYMBOL || _la == GoogleSQLParserREAD_SYMBOL {
		{
			p.SetState(2538)
			p.Transaction_mode_list()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBegin_transaction_keywordsContext is an interface to support dynamic dispatch.
type IBegin_transaction_keywordsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	START_SYMBOL() antlr.TerminalNode
	TRANSACTION_SYMBOL() antlr.TerminalNode
	BEGIN_SYMBOL() antlr.TerminalNode

	// IsBegin_transaction_keywordsContext differentiates from other interfaces.
	IsBegin_transaction_keywordsContext()
}

type Begin_transaction_keywordsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBegin_transaction_keywordsContext() *Begin_transaction_keywordsContext {
	var p = new(Begin_transaction_keywordsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_begin_transaction_keywords
	return p
}

func InitEmptyBegin_transaction_keywordsContext(p *Begin_transaction_keywordsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_begin_transaction_keywords
}

func (*Begin_transaction_keywordsContext) IsBegin_transaction_keywordsContext() {}

func NewBegin_transaction_keywordsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Begin_transaction_keywordsContext {
	var p = new(Begin_transaction_keywordsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_begin_transaction_keywords

	return p
}

func (s *Begin_transaction_keywordsContext) GetParser() antlr.Parser { return s.parser }

func (s *Begin_transaction_keywordsContext) START_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTART_SYMBOL, 0)
}

func (s *Begin_transaction_keywordsContext) TRANSACTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTRANSACTION_SYMBOL, 0)
}

func (s *Begin_transaction_keywordsContext) BEGIN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBEGIN_SYMBOL, 0)
}

func (s *Begin_transaction_keywordsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Begin_transaction_keywordsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Begin_transaction_keywordsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBegin_transaction_keywords(s)
	}
}

func (s *Begin_transaction_keywordsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBegin_transaction_keywords(s)
	}
}

func (s *Begin_transaction_keywordsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBegin_transaction_keywords(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Begin_transaction_keywords() (localctx IBegin_transaction_keywordsContext) {
	localctx = NewBegin_transaction_keywordsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 310, GoogleSQLParserRULE_begin_transaction_keywords)
	var _la int

	p.SetState(2547)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserSTART_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2541)
			p.Match(GoogleSQLParserSTART_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2542)
			p.Match(GoogleSQLParserTRANSACTION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserBEGIN_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2543)
			p.Match(GoogleSQLParserBEGIN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2545)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserTRANSACTION_SYMBOL {
			{
				p.SetState(2544)
				p.Match(GoogleSQLParserTRANSACTION_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITransaction_mode_listContext is an interface to support dynamic dispatch.
type ITransaction_mode_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllTransaction_mode() []ITransaction_modeContext
	Transaction_mode(i int) ITransaction_modeContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsTransaction_mode_listContext differentiates from other interfaces.
	IsTransaction_mode_listContext()
}

type Transaction_mode_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransaction_mode_listContext() *Transaction_mode_listContext {
	var p = new(Transaction_mode_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_transaction_mode_list
	return p
}

func InitEmptyTransaction_mode_listContext(p *Transaction_mode_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_transaction_mode_list
}

func (*Transaction_mode_listContext) IsTransaction_mode_listContext() {}

func NewTransaction_mode_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Transaction_mode_listContext {
	var p = new(Transaction_mode_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_transaction_mode_list

	return p
}

func (s *Transaction_mode_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Transaction_mode_listContext) AllTransaction_mode() []ITransaction_modeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITransaction_modeContext); ok {
			len++
		}
	}

	tst := make([]ITransaction_modeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITransaction_modeContext); ok {
			tst[i] = t.(ITransaction_modeContext)
			i++
		}
	}

	return tst
}

func (s *Transaction_mode_listContext) Transaction_mode(i int) ITransaction_modeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITransaction_modeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITransaction_modeContext)
}

func (s *Transaction_mode_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Transaction_mode_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Transaction_mode_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Transaction_mode_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Transaction_mode_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTransaction_mode_list(s)
	}
}

func (s *Transaction_mode_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTransaction_mode_list(s)
	}
}

func (s *Transaction_mode_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTransaction_mode_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Transaction_mode_list() (localctx ITransaction_mode_listContext) {
	localctx = NewTransaction_mode_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 312, GoogleSQLParserRULE_transaction_mode_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2549)
		p.Transaction_mode()
	}
	p.SetState(2554)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(2550)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2551)
			p.Transaction_mode()
		}

		p.SetState(2556)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITransaction_modeContext is an interface to support dynamic dispatch.
type ITransaction_modeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	READ_SYMBOL() antlr.TerminalNode
	ONLY_SYMBOL() antlr.TerminalNode
	WRITE_SYMBOL() antlr.TerminalNode
	ISOLATION_SYMBOL() antlr.TerminalNode
	LEVEL_SYMBOL() antlr.TerminalNode
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext

	// IsTransaction_modeContext differentiates from other interfaces.
	IsTransaction_modeContext()
}

type Transaction_modeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransaction_modeContext() *Transaction_modeContext {
	var p = new(Transaction_modeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_transaction_mode
	return p
}

func InitEmptyTransaction_modeContext(p *Transaction_modeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_transaction_mode
}

func (*Transaction_modeContext) IsTransaction_modeContext() {}

func NewTransaction_modeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Transaction_modeContext {
	var p = new(Transaction_modeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_transaction_mode

	return p
}

func (s *Transaction_modeContext) GetParser() antlr.Parser { return s.parser }

func (s *Transaction_modeContext) READ_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREAD_SYMBOL, 0)
}

func (s *Transaction_modeContext) ONLY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserONLY_SYMBOL, 0)
}

func (s *Transaction_modeContext) WRITE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWRITE_SYMBOL, 0)
}

func (s *Transaction_modeContext) ISOLATION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserISOLATION_SYMBOL, 0)
}

func (s *Transaction_modeContext) LEVEL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLEVEL_SYMBOL, 0)
}

func (s *Transaction_modeContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Transaction_modeContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Transaction_modeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Transaction_modeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Transaction_modeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTransaction_mode(s)
	}
}

func (s *Transaction_modeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTransaction_mode(s)
	}
}

func (s *Transaction_modeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTransaction_mode(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Transaction_mode() (localctx ITransaction_modeContext) {
	localctx = NewTransaction_modeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 314, GoogleSQLParserRULE_transaction_mode)
	p.SetState(2569)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 259, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2557)
			p.Match(GoogleSQLParserREAD_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2558)
			p.Match(GoogleSQLParserONLY_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2559)
			p.Match(GoogleSQLParserREAD_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2560)
			p.Match(GoogleSQLParserWRITE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2561)
			p.Match(GoogleSQLParserISOLATION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2562)
			p.Match(GoogleSQLParserLEVEL_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2563)
			p.Identifier()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2564)
			p.Match(GoogleSQLParserISOLATION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2565)
			p.Match(GoogleSQLParserLEVEL_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2566)
			p.Identifier()
		}
		{
			p.SetState(2567)
			p.Identifier()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITruncate_statementContext is an interface to support dynamic dispatch.
type ITruncate_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TRUNCATE_SYMBOL() antlr.TerminalNode
	TABLE_SYMBOL() antlr.TerminalNode
	Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext
	Opt_where_expression() IOpt_where_expressionContext

	// IsTruncate_statementContext differentiates from other interfaces.
	IsTruncate_statementContext()
}

type Truncate_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTruncate_statementContext() *Truncate_statementContext {
	var p = new(Truncate_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_truncate_statement
	return p
}

func InitEmptyTruncate_statementContext(p *Truncate_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_truncate_statement
}

func (*Truncate_statementContext) IsTruncate_statementContext() {}

func NewTruncate_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Truncate_statementContext {
	var p = new(Truncate_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_truncate_statement

	return p
}

func (s *Truncate_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Truncate_statementContext) TRUNCATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTRUNCATE_SYMBOL, 0)
}

func (s *Truncate_statementContext) TABLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTABLE_SYMBOL, 0)
}

func (s *Truncate_statementContext) Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMaybe_dashed_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMaybe_dashed_path_expressionContext)
}

func (s *Truncate_statementContext) Opt_where_expression() IOpt_where_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_where_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_where_expressionContext)
}

func (s *Truncate_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Truncate_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Truncate_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTruncate_statement(s)
	}
}

func (s *Truncate_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTruncate_statement(s)
	}
}

func (s *Truncate_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTruncate_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Truncate_statement() (localctx ITruncate_statementContext) {
	localctx = NewTruncate_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 316, GoogleSQLParserRULE_truncate_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2571)
		p.Match(GoogleSQLParserTRUNCATE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2572)
		p.Match(GoogleSQLParserTABLE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2573)
		p.Maybe_dashed_path_expression()
	}
	p.SetState(2575)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserWHERE_SYMBOL {
		{
			p.SetState(2574)
			p.Opt_where_expression()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMerge_statementContext is an interface to support dynamic dispatch.
type IMerge_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MERGE_SYMBOL() antlr.TerminalNode
	Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext
	USING_SYMBOL() antlr.TerminalNode
	Merge_source() IMerge_sourceContext
	ON_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	INTO_SYMBOL() antlr.TerminalNode
	As_alias() IAs_aliasContext
	AllMerge_when_clause() []IMerge_when_clauseContext
	Merge_when_clause(i int) IMerge_when_clauseContext

	// IsMerge_statementContext differentiates from other interfaces.
	IsMerge_statementContext()
}

type Merge_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMerge_statementContext() *Merge_statementContext {
	var p = new(Merge_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_merge_statement
	return p
}

func InitEmptyMerge_statementContext(p *Merge_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_merge_statement
}

func (*Merge_statementContext) IsMerge_statementContext() {}

func NewMerge_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Merge_statementContext {
	var p = new(Merge_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_merge_statement

	return p
}

func (s *Merge_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Merge_statementContext) MERGE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMERGE_SYMBOL, 0)
}

func (s *Merge_statementContext) Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMaybe_dashed_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMaybe_dashed_path_expressionContext)
}

func (s *Merge_statementContext) USING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUSING_SYMBOL, 0)
}

func (s *Merge_statementContext) Merge_source() IMerge_sourceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMerge_sourceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMerge_sourceContext)
}

func (s *Merge_statementContext) ON_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserON_SYMBOL, 0)
}

func (s *Merge_statementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Merge_statementContext) INTO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINTO_SYMBOL, 0)
}

func (s *Merge_statementContext) As_alias() IAs_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_aliasContext)
}

func (s *Merge_statementContext) AllMerge_when_clause() []IMerge_when_clauseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMerge_when_clauseContext); ok {
			len++
		}
	}

	tst := make([]IMerge_when_clauseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMerge_when_clauseContext); ok {
			tst[i] = t.(IMerge_when_clauseContext)
			i++
		}
	}

	return tst
}

func (s *Merge_statementContext) Merge_when_clause(i int) IMerge_when_clauseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMerge_when_clauseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMerge_when_clauseContext)
}

func (s *Merge_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Merge_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Merge_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterMerge_statement(s)
	}
}

func (s *Merge_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitMerge_statement(s)
	}
}

func (s *Merge_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitMerge_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Merge_statement() (localctx IMerge_statementContext) {
	localctx = NewMerge_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 318, GoogleSQLParserRULE_merge_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2577)
		p.Match(GoogleSQLParserMERGE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2579)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserINTO_SYMBOL {
		{
			p.SetState(2578)
			p.Match(GoogleSQLParserINTO_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(2581)
		p.Maybe_dashed_path_expression()
	}
	p.SetState(2583)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64((_la-56)) & ^0x3f) == 0 && ((int64(1)<<(_la-56))&-6981105432269881343) != 0) || ((int64((_la-120)) & ^0x3f) == 0 && ((int64(1)<<(_la-120))&-1) != 0) || ((int64((_la-184)) & ^0x3f) == 0 && ((int64(1)<<(_la-184))&-1) != 0) || ((int64((_la-248)) & ^0x3f) == 0 && ((int64(1)<<(_la-248))&35184372088703) != 0) || ((int64((_la-338)) & ^0x3f) == 0 && ((int64(1)<<(_la-338))&8161) != 0) {
		{
			p.SetState(2582)
			p.As_alias()
		}

	}
	{
		p.SetState(2585)
		p.Match(GoogleSQLParserUSING_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2586)
		p.Merge_source()
	}
	{
		p.SetState(2587)
		p.Match(GoogleSQLParserON_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2588)
		p.expression(0)
	}
	p.SetState(2590)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == GoogleSQLParserWHEN_SYMBOL {
		{
			p.SetState(2589)
			p.Merge_when_clause()
		}

		p.SetState(2592)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMerge_sourceContext is an interface to support dynamic dispatch.
type IMerge_sourceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Table_path_expression() ITable_path_expressionContext
	Table_subquery() ITable_subqueryContext

	// IsMerge_sourceContext differentiates from other interfaces.
	IsMerge_sourceContext()
}

type Merge_sourceContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMerge_sourceContext() *Merge_sourceContext {
	var p = new(Merge_sourceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_merge_source
	return p
}

func InitEmptyMerge_sourceContext(p *Merge_sourceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_merge_source
}

func (*Merge_sourceContext) IsMerge_sourceContext() {}

func NewMerge_sourceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Merge_sourceContext {
	var p = new(Merge_sourceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_merge_source

	return p
}

func (s *Merge_sourceContext) GetParser() antlr.Parser { return s.parser }

func (s *Merge_sourceContext) Table_path_expression() ITable_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_path_expressionContext)
}

func (s *Merge_sourceContext) Table_subquery() ITable_subqueryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_subqueryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_subqueryContext)
}

func (s *Merge_sourceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Merge_sourceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Merge_sourceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterMerge_source(s)
	}
}

func (s *Merge_sourceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitMerge_source(s)
	}
}

func (s *Merge_sourceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitMerge_source(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Merge_source() (localctx IMerge_sourceContext) {
	localctx = NewMerge_sourceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 320, GoogleSQLParserRULE_merge_source)
	p.SetState(2596)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserUNNEST_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserSLASH_SYMBOL, GoogleSQLParserCONFLICT_SYMBOL, GoogleSQLParserDESTINATION_SYMBOL, GoogleSQLParserPROPERTY_SYMBOL, GoogleSQLParserGRAPH_SYMBOL, GoogleSQLParserNODE_SYMBOL, GoogleSQLParserPROPERTIES_SYMBOL, GoogleSQLParserLABEL_SYMBOL, GoogleSQLParserEDGE_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2594)
			p.Table_path_expression()
		}

	case GoogleSQLParserLR_BRACKET_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2595)
			p.Table_subquery()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMerge_when_clauseContext is an interface to support dynamic dispatch.
type IMerge_when_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WHEN_SYMBOL() antlr.TerminalNode
	MATCHED_SYMBOL() antlr.TerminalNode
	THEN_SYMBOL() antlr.TerminalNode
	Merge_action() IMerge_actionContext
	Opt_and_expression() IOpt_and_expressionContext
	NOT_SYMBOL() antlr.TerminalNode
	By_target() IBy_targetContext
	BY_SYMBOL() antlr.TerminalNode
	SOURCE_SYMBOL() antlr.TerminalNode

	// IsMerge_when_clauseContext differentiates from other interfaces.
	IsMerge_when_clauseContext()
}

type Merge_when_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMerge_when_clauseContext() *Merge_when_clauseContext {
	var p = new(Merge_when_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_merge_when_clause
	return p
}

func InitEmptyMerge_when_clauseContext(p *Merge_when_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_merge_when_clause
}

func (*Merge_when_clauseContext) IsMerge_when_clauseContext() {}

func NewMerge_when_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Merge_when_clauseContext {
	var p = new(Merge_when_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_merge_when_clause

	return p
}

func (s *Merge_when_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Merge_when_clauseContext) WHEN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWHEN_SYMBOL, 0)
}

func (s *Merge_when_clauseContext) MATCHED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMATCHED_SYMBOL, 0)
}

func (s *Merge_when_clauseContext) THEN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTHEN_SYMBOL, 0)
}

func (s *Merge_when_clauseContext) Merge_action() IMerge_actionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMerge_actionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMerge_actionContext)
}

func (s *Merge_when_clauseContext) Opt_and_expression() IOpt_and_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_and_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_and_expressionContext)
}

func (s *Merge_when_clauseContext) NOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNOT_SYMBOL, 0)
}

func (s *Merge_when_clauseContext) By_target() IBy_targetContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBy_targetContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBy_targetContext)
}

func (s *Merge_when_clauseContext) BY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBY_SYMBOL, 0)
}

func (s *Merge_when_clauseContext) SOURCE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSOURCE_SYMBOL, 0)
}

func (s *Merge_when_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Merge_when_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Merge_when_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterMerge_when_clause(s)
	}
}

func (s *Merge_when_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitMerge_when_clause(s)
	}
}

func (s *Merge_when_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitMerge_when_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Merge_when_clause() (localctx IMerge_when_clauseContext) {
	localctx = NewMerge_when_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 322, GoogleSQLParserRULE_merge_when_clause)
	var _la int

	p.SetState(2626)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 269, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2598)
			p.Match(GoogleSQLParserWHEN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2599)
			p.Match(GoogleSQLParserMATCHED_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2601)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAND_SYMBOL {
			{
				p.SetState(2600)
				p.Opt_and_expression()
			}

		}
		{
			p.SetState(2603)
			p.Match(GoogleSQLParserTHEN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2604)
			p.Merge_action()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2605)
			p.Match(GoogleSQLParserWHEN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2606)
			p.Match(GoogleSQLParserNOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2607)
			p.Match(GoogleSQLParserMATCHED_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2609)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserBY_SYMBOL {
			{
				p.SetState(2608)
				p.By_target()
			}

		}
		p.SetState(2612)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAND_SYMBOL {
			{
				p.SetState(2611)
				p.Opt_and_expression()
			}

		}
		{
			p.SetState(2614)
			p.Match(GoogleSQLParserTHEN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2615)
			p.Merge_action()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2616)
			p.Match(GoogleSQLParserWHEN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2617)
			p.Match(GoogleSQLParserNOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2618)
			p.Match(GoogleSQLParserMATCHED_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2619)
			p.Match(GoogleSQLParserBY_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2620)
			p.Match(GoogleSQLParserSOURCE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2622)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAND_SYMBOL {
			{
				p.SetState(2621)
				p.Opt_and_expression()
			}

		}
		{
			p.SetState(2624)
			p.Match(GoogleSQLParserTHEN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2625)
			p.Merge_action()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMerge_actionContext is an interface to support dynamic dispatch.
type IMerge_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	INSERT_SYMBOL() antlr.TerminalNode
	Merge_insert_value_list_or_source_row() IMerge_insert_value_list_or_source_rowContext
	Column_list() IColumn_listContext
	UPDATE_SYMBOL() antlr.TerminalNode
	SET_SYMBOL() antlr.TerminalNode
	Update_item_list() IUpdate_item_listContext
	DELETE_SYMBOL() antlr.TerminalNode

	// IsMerge_actionContext differentiates from other interfaces.
	IsMerge_actionContext()
}

type Merge_actionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMerge_actionContext() *Merge_actionContext {
	var p = new(Merge_actionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_merge_action
	return p
}

func InitEmptyMerge_actionContext(p *Merge_actionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_merge_action
}

func (*Merge_actionContext) IsMerge_actionContext() {}

func NewMerge_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Merge_actionContext {
	var p = new(Merge_actionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_merge_action

	return p
}

func (s *Merge_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Merge_actionContext) INSERT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINSERT_SYMBOL, 0)
}

func (s *Merge_actionContext) Merge_insert_value_list_or_source_row() IMerge_insert_value_list_or_source_rowContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMerge_insert_value_list_or_source_rowContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMerge_insert_value_list_or_source_rowContext)
}

func (s *Merge_actionContext) Column_list() IColumn_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_listContext)
}

func (s *Merge_actionContext) UPDATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUPDATE_SYMBOL, 0)
}

func (s *Merge_actionContext) SET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSET_SYMBOL, 0)
}

func (s *Merge_actionContext) Update_item_list() IUpdate_item_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUpdate_item_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUpdate_item_listContext)
}

func (s *Merge_actionContext) DELETE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDELETE_SYMBOL, 0)
}

func (s *Merge_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Merge_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Merge_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterMerge_action(s)
	}
}

func (s *Merge_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitMerge_action(s)
	}
}

func (s *Merge_actionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitMerge_action(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Merge_action() (localctx IMerge_actionContext) {
	localctx = NewMerge_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 324, GoogleSQLParserRULE_merge_action)
	var _la int

	p.SetState(2637)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINSERT_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2628)
			p.Match(GoogleSQLParserINSERT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2630)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserLR_BRACKET_SYMBOL {
			{
				p.SetState(2629)
				p.Column_list()
			}

		}
		{
			p.SetState(2632)
			p.Merge_insert_value_list_or_source_row()
		}

	case GoogleSQLParserUPDATE_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2633)
			p.Match(GoogleSQLParserUPDATE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2634)
			p.Match(GoogleSQLParserSET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2635)
			p.Update_item_list()
		}

	case GoogleSQLParserDELETE_SYMBOL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2636)
			p.Match(GoogleSQLParserDELETE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMerge_insert_value_list_or_source_rowContext is an interface to support dynamic dispatch.
type IMerge_insert_value_list_or_source_rowContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	VALUES_SYMBOL() antlr.TerminalNode
	Insert_values_row() IInsert_values_rowContext
	ROW_SYMBOL() antlr.TerminalNode

	// IsMerge_insert_value_list_or_source_rowContext differentiates from other interfaces.
	IsMerge_insert_value_list_or_source_rowContext()
}

type Merge_insert_value_list_or_source_rowContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMerge_insert_value_list_or_source_rowContext() *Merge_insert_value_list_or_source_rowContext {
	var p = new(Merge_insert_value_list_or_source_rowContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_merge_insert_value_list_or_source_row
	return p
}

func InitEmptyMerge_insert_value_list_or_source_rowContext(p *Merge_insert_value_list_or_source_rowContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_merge_insert_value_list_or_source_row
}

func (*Merge_insert_value_list_or_source_rowContext) IsMerge_insert_value_list_or_source_rowContext() {
}

func NewMerge_insert_value_list_or_source_rowContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Merge_insert_value_list_or_source_rowContext {
	var p = new(Merge_insert_value_list_or_source_rowContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_merge_insert_value_list_or_source_row

	return p
}

func (s *Merge_insert_value_list_or_source_rowContext) GetParser() antlr.Parser { return s.parser }

func (s *Merge_insert_value_list_or_source_rowContext) VALUES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserVALUES_SYMBOL, 0)
}

func (s *Merge_insert_value_list_or_source_rowContext) Insert_values_row() IInsert_values_rowContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInsert_values_rowContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInsert_values_rowContext)
}

func (s *Merge_insert_value_list_or_source_rowContext) ROW_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserROW_SYMBOL, 0)
}

func (s *Merge_insert_value_list_or_source_rowContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Merge_insert_value_list_or_source_rowContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Merge_insert_value_list_or_source_rowContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterMerge_insert_value_list_or_source_row(s)
	}
}

func (s *Merge_insert_value_list_or_source_rowContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitMerge_insert_value_list_or_source_row(s)
	}
}

func (s *Merge_insert_value_list_or_source_rowContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitMerge_insert_value_list_or_source_row(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Merge_insert_value_list_or_source_row() (localctx IMerge_insert_value_list_or_source_rowContext) {
	localctx = NewMerge_insert_value_list_or_source_rowContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 326, GoogleSQLParserRULE_merge_insert_value_list_or_source_row)
	p.SetState(2642)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserVALUES_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2639)
			p.Match(GoogleSQLParserVALUES_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2640)
			p.Insert_values_row()
		}

	case GoogleSQLParserROW_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2641)
			p.Match(GoogleSQLParserROW_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBy_targetContext is an interface to support dynamic dispatch.
type IBy_targetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BY_SYMBOL() antlr.TerminalNode
	TARGET_SYMBOL() antlr.TerminalNode

	// IsBy_targetContext differentiates from other interfaces.
	IsBy_targetContext()
}

type By_targetContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBy_targetContext() *By_targetContext {
	var p = new(By_targetContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_by_target
	return p
}

func InitEmptyBy_targetContext(p *By_targetContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_by_target
}

func (*By_targetContext) IsBy_targetContext() {}

func NewBy_targetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *By_targetContext {
	var p = new(By_targetContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_by_target

	return p
}

func (s *By_targetContext) GetParser() antlr.Parser { return s.parser }

func (s *By_targetContext) BY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBY_SYMBOL, 0)
}

func (s *By_targetContext) TARGET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTARGET_SYMBOL, 0)
}

func (s *By_targetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *By_targetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *By_targetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBy_target(s)
	}
}

func (s *By_targetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBy_target(s)
	}
}

func (s *By_targetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBy_target(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) By_target() (localctx IBy_targetContext) {
	localctx = NewBy_targetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 328, GoogleSQLParserRULE_by_target)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2644)
		p.Match(GoogleSQLParserBY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2645)
		p.Match(GoogleSQLParserTARGET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_and_expressionContext is an interface to support dynamic dispatch.
type IOpt_and_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AND_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsOpt_and_expressionContext differentiates from other interfaces.
	IsOpt_and_expressionContext()
}

type Opt_and_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_and_expressionContext() *Opt_and_expressionContext {
	var p = new(Opt_and_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_and_expression
	return p
}

func InitEmptyOpt_and_expressionContext(p *Opt_and_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_and_expression
}

func (*Opt_and_expressionContext) IsOpt_and_expressionContext() {}

func NewOpt_and_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_and_expressionContext {
	var p = new(Opt_and_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_and_expression

	return p
}

func (s *Opt_and_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_and_expressionContext) AND_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAND_SYMBOL, 0)
}

func (s *Opt_and_expressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Opt_and_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_and_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_and_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_and_expression(s)
	}
}

func (s *Opt_and_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_and_expression(s)
	}
}

func (s *Opt_and_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_and_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_and_expression() (localctx IOpt_and_expressionContext) {
	localctx = NewOpt_and_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 330, GoogleSQLParserRULE_opt_and_expression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2647)
		p.Match(GoogleSQLParserAND_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2648)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStatement_level_hintContext is an interface to support dynamic dispatch.
type IStatement_level_hintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Hint() IHintContext

	// IsStatement_level_hintContext differentiates from other interfaces.
	IsStatement_level_hintContext()
}

type Statement_level_hintContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatement_level_hintContext() *Statement_level_hintContext {
	var p = new(Statement_level_hintContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_statement_level_hint
	return p
}

func InitEmptyStatement_level_hintContext(p *Statement_level_hintContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_statement_level_hint
}

func (*Statement_level_hintContext) IsStatement_level_hintContext() {}

func NewStatement_level_hintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Statement_level_hintContext {
	var p = new(Statement_level_hintContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_statement_level_hint

	return p
}

func (s *Statement_level_hintContext) GetParser() antlr.Parser { return s.parser }

func (s *Statement_level_hintContext) Hint() IHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHintContext)
}

func (s *Statement_level_hintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Statement_level_hintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Statement_level_hintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStatement_level_hint(s)
	}
}

func (s *Statement_level_hintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStatement_level_hint(s)
	}
}

func (s *Statement_level_hintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStatement_level_hint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Statement_level_hint() (localctx IStatement_level_hintContext) {
	localctx = NewStatement_level_hintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 332, GoogleSQLParserRULE_statement_level_hint)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2650)
		p.Hint()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQuery_statementContext is an interface to support dynamic dispatch.
type IQuery_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Query() IQueryContext

	// IsQuery_statementContext differentiates from other interfaces.
	IsQuery_statementContext()
}

type Query_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuery_statementContext() *Query_statementContext {
	var p = new(Query_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_statement
	return p
}

func InitEmptyQuery_statementContext(p *Query_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_statement
}

func (*Query_statementContext) IsQuery_statementContext() {}

func NewQuery_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Query_statementContext {
	var p = new(Query_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_query_statement

	return p
}

func (s *Query_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Query_statementContext) Query() IQueryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQueryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *Query_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Query_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterQuery_statement(s)
	}
}

func (s *Query_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitQuery_statement(s)
	}
}

func (s *Query_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitQuery_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Query_statement() (localctx IQuery_statementContext) {
	localctx = NewQuery_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 334, GoogleSQLParserRULE_query_statement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2652)
		p.Query()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDml_statementContext is an interface to support dynamic dispatch.
type IDml_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Insert_statement() IInsert_statementContext
	Delete_statement() IDelete_statementContext
	Update_statement() IUpdate_statementContext

	// IsDml_statementContext differentiates from other interfaces.
	IsDml_statementContext()
}

type Dml_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDml_statementContext() *Dml_statementContext {
	var p = new(Dml_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_dml_statement
	return p
}

func InitEmptyDml_statementContext(p *Dml_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_dml_statement
}

func (*Dml_statementContext) IsDml_statementContext() {}

func NewDml_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dml_statementContext {
	var p = new(Dml_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_dml_statement

	return p
}

func (s *Dml_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Dml_statementContext) Insert_statement() IInsert_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInsert_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInsert_statementContext)
}

func (s *Dml_statementContext) Delete_statement() IDelete_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDelete_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDelete_statementContext)
}

func (s *Dml_statementContext) Update_statement() IUpdate_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUpdate_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUpdate_statementContext)
}

func (s *Dml_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dml_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dml_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterDml_statement(s)
	}
}

func (s *Dml_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitDml_statement(s)
	}
}

func (s *Dml_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitDml_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Dml_statement() (localctx IDml_statementContext) {
	localctx = NewDml_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 336, GoogleSQLParserRULE_dml_statement)
	p.SetState(2657)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINSERT_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2654)
			p.Insert_statement()
		}

	case GoogleSQLParserDELETE_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2655)
			p.Delete_statement()
		}

	case GoogleSQLParserUPDATE_SYMBOL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2656)
			p.Update_statement()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUpdate_statementContext is an interface to support dynamic dispatch.
type IUpdate_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UPDATE_SYMBOL() antlr.TerminalNode
	Maybe_dashed_generalized_path_expression() IMaybe_dashed_generalized_path_expressionContext
	SET_SYMBOL() antlr.TerminalNode
	Update_item_list() IUpdate_item_listContext
	Hint() IHintContext
	As_alias() IAs_aliasContext
	Opt_with_offset_and_alias() IOpt_with_offset_and_aliasContext
	From_clause() IFrom_clauseContext
	Opt_where_expression() IOpt_where_expressionContext
	Opt_assert_rows_modified() IOpt_assert_rows_modifiedContext
	Opt_returning_clause() IOpt_returning_clauseContext

	// IsUpdate_statementContext differentiates from other interfaces.
	IsUpdate_statementContext()
}

type Update_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdate_statementContext() *Update_statementContext {
	var p = new(Update_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_update_statement
	return p
}

func InitEmptyUpdate_statementContext(p *Update_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_update_statement
}

func (*Update_statementContext) IsUpdate_statementContext() {}

func NewUpdate_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Update_statementContext {
	var p = new(Update_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_update_statement

	return p
}

func (s *Update_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Update_statementContext) UPDATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUPDATE_SYMBOL, 0)
}

func (s *Update_statementContext) Maybe_dashed_generalized_path_expression() IMaybe_dashed_generalized_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMaybe_dashed_generalized_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMaybe_dashed_generalized_path_expressionContext)
}

func (s *Update_statementContext) SET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSET_SYMBOL, 0)
}

func (s *Update_statementContext) Update_item_list() IUpdate_item_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUpdate_item_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUpdate_item_listContext)
}

func (s *Update_statementContext) Hint() IHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHintContext)
}

func (s *Update_statementContext) As_alias() IAs_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_aliasContext)
}

func (s *Update_statementContext) Opt_with_offset_and_alias() IOpt_with_offset_and_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_with_offset_and_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_with_offset_and_aliasContext)
}

func (s *Update_statementContext) From_clause() IFrom_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrom_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrom_clauseContext)
}

func (s *Update_statementContext) Opt_where_expression() IOpt_where_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_where_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_where_expressionContext)
}

func (s *Update_statementContext) Opt_assert_rows_modified() IOpt_assert_rows_modifiedContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_assert_rows_modifiedContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_assert_rows_modifiedContext)
}

func (s *Update_statementContext) Opt_returning_clause() IOpt_returning_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_returning_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_returning_clauseContext)
}

func (s *Update_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Update_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Update_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUpdate_statement(s)
	}
}

func (s *Update_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUpdate_statement(s)
	}
}

func (s *Update_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUpdate_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Update_statement() (localctx IUpdate_statementContext) {
	localctx = NewUpdate_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 338, GoogleSQLParserRULE_update_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2659)
		p.Match(GoogleSQLParserUPDATE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2660)
		p.Maybe_dashed_generalized_path_expression()
	}
	p.SetState(2662)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAT_SYMBOL {
		{
			p.SetState(2661)
			p.Hint()
		}

	}
	p.SetState(2665)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64((_la-56)) & ^0x3f) == 0 && ((int64(1)<<(_la-56))&-6981105432269881343) != 0) || ((int64((_la-120)) & ^0x3f) == 0 && ((int64(1)<<(_la-120))&-1) != 0) || ((int64((_la-184)) & ^0x3f) == 0 && ((int64(1)<<(_la-184))&-1) != 0) || ((int64((_la-248)) & ^0x3f) == 0 && ((int64(1)<<(_la-248))&35184372088703) != 0) || ((int64((_la-338)) & ^0x3f) == 0 && ((int64(1)<<(_la-338))&8161) != 0) {
		{
			p.SetState(2664)
			p.As_alias()
		}

	}
	p.SetState(2668)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserWITH_SYMBOL {
		{
			p.SetState(2667)
			p.Opt_with_offset_and_alias()
		}

	}
	{
		p.SetState(2670)
		p.Match(GoogleSQLParserSET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2671)
		p.Update_item_list()
	}
	p.SetState(2673)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserFROM_SYMBOL {
		{
			p.SetState(2672)
			p.From_clause()
		}

	}
	p.SetState(2676)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserWHERE_SYMBOL {
		{
			p.SetState(2675)
			p.Opt_where_expression()
		}

	}
	p.SetState(2679)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserASSERT_ROWS_MODIFIED_SYMBOL {
		{
			p.SetState(2678)
			p.Opt_assert_rows_modified()
		}

	}
	p.SetState(2682)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserTHEN_SYMBOL {
		{
			p.SetState(2681)
			p.Opt_returning_clause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDelete_statementContext is an interface to support dynamic dispatch.
type IDelete_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DELETE_SYMBOL() antlr.TerminalNode
	Maybe_dashed_generalized_path_expression() IMaybe_dashed_generalized_path_expressionContext
	FROM_SYMBOL() antlr.TerminalNode
	Hint() IHintContext
	As_alias() IAs_aliasContext
	Opt_with_offset_and_alias() IOpt_with_offset_and_aliasContext
	Opt_where_expression() IOpt_where_expressionContext
	Opt_assert_rows_modified() IOpt_assert_rows_modifiedContext
	Opt_returning_clause() IOpt_returning_clauseContext

	// IsDelete_statementContext differentiates from other interfaces.
	IsDelete_statementContext()
}

type Delete_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDelete_statementContext() *Delete_statementContext {
	var p = new(Delete_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_delete_statement
	return p
}

func InitEmptyDelete_statementContext(p *Delete_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_delete_statement
}

func (*Delete_statementContext) IsDelete_statementContext() {}

func NewDelete_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Delete_statementContext {
	var p = new(Delete_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_delete_statement

	return p
}

func (s *Delete_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Delete_statementContext) DELETE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDELETE_SYMBOL, 0)
}

func (s *Delete_statementContext) Maybe_dashed_generalized_path_expression() IMaybe_dashed_generalized_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMaybe_dashed_generalized_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMaybe_dashed_generalized_path_expressionContext)
}

func (s *Delete_statementContext) FROM_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFROM_SYMBOL, 0)
}

func (s *Delete_statementContext) Hint() IHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHintContext)
}

func (s *Delete_statementContext) As_alias() IAs_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_aliasContext)
}

func (s *Delete_statementContext) Opt_with_offset_and_alias() IOpt_with_offset_and_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_with_offset_and_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_with_offset_and_aliasContext)
}

func (s *Delete_statementContext) Opt_where_expression() IOpt_where_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_where_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_where_expressionContext)
}

func (s *Delete_statementContext) Opt_assert_rows_modified() IOpt_assert_rows_modifiedContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_assert_rows_modifiedContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_assert_rows_modifiedContext)
}

func (s *Delete_statementContext) Opt_returning_clause() IOpt_returning_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_returning_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_returning_clauseContext)
}

func (s *Delete_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Delete_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Delete_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterDelete_statement(s)
	}
}

func (s *Delete_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitDelete_statement(s)
	}
}

func (s *Delete_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitDelete_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Delete_statement() (localctx IDelete_statementContext) {
	localctx = NewDelete_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 340, GoogleSQLParserRULE_delete_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2684)
		p.Match(GoogleSQLParserDELETE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2686)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserFROM_SYMBOL {
		{
			p.SetState(2685)
			p.Match(GoogleSQLParserFROM_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(2688)
		p.Maybe_dashed_generalized_path_expression()
	}
	p.SetState(2690)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAT_SYMBOL {
		{
			p.SetState(2689)
			p.Hint()
		}

	}
	p.SetState(2693)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64((_la-56)) & ^0x3f) == 0 && ((int64(1)<<(_la-56))&-6981105432269881343) != 0) || ((int64((_la-120)) & ^0x3f) == 0 && ((int64(1)<<(_la-120))&-1) != 0) || ((int64((_la-184)) & ^0x3f) == 0 && ((int64(1)<<(_la-184))&-1) != 0) || ((int64((_la-248)) & ^0x3f) == 0 && ((int64(1)<<(_la-248))&35184372088703) != 0) || ((int64((_la-338)) & ^0x3f) == 0 && ((int64(1)<<(_la-338))&8161) != 0) {
		{
			p.SetState(2692)
			p.As_alias()
		}

	}
	p.SetState(2696)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserWITH_SYMBOL {
		{
			p.SetState(2695)
			p.Opt_with_offset_and_alias()
		}

	}
	p.SetState(2699)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserWHERE_SYMBOL {
		{
			p.SetState(2698)
			p.Opt_where_expression()
		}

	}
	p.SetState(2702)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserASSERT_ROWS_MODIFIED_SYMBOL {
		{
			p.SetState(2701)
			p.Opt_assert_rows_modified()
		}

	}
	p.SetState(2705)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserTHEN_SYMBOL {
		{
			p.SetState(2704)
			p.Opt_returning_clause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInsert_statementContext is an interface to support dynamic dispatch.
type IInsert_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Insert_statement_prefix() IInsert_statement_prefixContext
	Insert_values_or_query() IInsert_values_or_queryContext
	Column_list() IColumn_listContext
	Opt_assert_rows_modified() IOpt_assert_rows_modifiedContext
	Opt_returning_clause() IOpt_returning_clauseContext
	Insert_values_list_or_table_clause() IInsert_values_list_or_table_clauseContext
	On_conflict_clause() IOn_conflict_clauseContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Query() IQueryContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsInsert_statementContext differentiates from other interfaces.
	IsInsert_statementContext()
}

type Insert_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsert_statementContext() *Insert_statementContext {
	var p = new(Insert_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_insert_statement
	return p
}

func InitEmptyInsert_statementContext(p *Insert_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_insert_statement
}

func (*Insert_statementContext) IsInsert_statementContext() {}

func NewInsert_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Insert_statementContext {
	var p = new(Insert_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_insert_statement

	return p
}

func (s *Insert_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Insert_statementContext) Insert_statement_prefix() IInsert_statement_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInsert_statement_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInsert_statement_prefixContext)
}

func (s *Insert_statementContext) Insert_values_or_query() IInsert_values_or_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInsert_values_or_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInsert_values_or_queryContext)
}

func (s *Insert_statementContext) Column_list() IColumn_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_listContext)
}

func (s *Insert_statementContext) Opt_assert_rows_modified() IOpt_assert_rows_modifiedContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_assert_rows_modifiedContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_assert_rows_modifiedContext)
}

func (s *Insert_statementContext) Opt_returning_clause() IOpt_returning_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_returning_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_returning_clauseContext)
}

func (s *Insert_statementContext) Insert_values_list_or_table_clause() IInsert_values_list_or_table_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInsert_values_list_or_table_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInsert_values_list_or_table_clauseContext)
}

func (s *Insert_statementContext) On_conflict_clause() IOn_conflict_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOn_conflict_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOn_conflict_clauseContext)
}

func (s *Insert_statementContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Insert_statementContext) Query() IQueryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQueryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *Insert_statementContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Insert_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Insert_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Insert_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterInsert_statement(s)
	}
}

func (s *Insert_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitInsert_statement(s)
	}
}

func (s *Insert_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitInsert_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Insert_statement() (localctx IInsert_statementContext) {
	localctx = NewInsert_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 342, GoogleSQLParserRULE_insert_statement)
	var _la int

	p.SetState(2744)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 297, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2707)
			p.Insert_statement_prefix()
		}
		p.SetState(2709)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 288, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2708)
				p.Column_list()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(2711)
			p.Insert_values_or_query()
		}
		p.SetState(2713)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserASSERT_ROWS_MODIFIED_SYMBOL {
			{
				p.SetState(2712)
				p.Opt_assert_rows_modified()
			}

		}
		p.SetState(2716)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserTHEN_SYMBOL {
			{
				p.SetState(2715)
				p.Opt_returning_clause()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2718)
			p.Insert_statement_prefix()
		}
		p.SetState(2720)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserLR_BRACKET_SYMBOL {
			{
				p.SetState(2719)
				p.Column_list()
			}

		}
		{
			p.SetState(2722)
			p.Insert_values_list_or_table_clause()
		}
		{
			p.SetState(2723)
			p.On_conflict_clause()
		}
		p.SetState(2725)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserASSERT_ROWS_MODIFIED_SYMBOL {
			{
				p.SetState(2724)
				p.Opt_assert_rows_modified()
			}

		}
		p.SetState(2728)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserTHEN_SYMBOL {
			{
				p.SetState(2727)
				p.Opt_returning_clause()
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2730)
			p.Insert_statement_prefix()
		}
		p.SetState(2732)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 294, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2731)
				p.Column_list()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(2734)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2735)
			p.Query()
		}
		{
			p.SetState(2736)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2737)
			p.On_conflict_clause()
		}
		p.SetState(2739)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserASSERT_ROWS_MODIFIED_SYMBOL {
			{
				p.SetState(2738)
				p.Opt_assert_rows_modified()
			}

		}
		p.SetState(2742)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserTHEN_SYMBOL {
			{
				p.SetState(2741)
				p.Opt_returning_clause()
			}

		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOn_conflict_clauseContext is an interface to support dynamic dispatch.
type IOn_conflict_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ON_SYMBOL() antlr.TerminalNode
	CONFLICT_SYMBOL() antlr.TerminalNode
	DO_SYMBOL() antlr.TerminalNode
	NOTHING_SYMBOL() antlr.TerminalNode
	Opt_conflict_target() IOpt_conflict_targetContext
	UPDATE_SYMBOL() antlr.TerminalNode
	SET_SYMBOL() antlr.TerminalNode
	Update_item_list() IUpdate_item_listContext
	Opt_where_expression() IOpt_where_expressionContext

	// IsOn_conflict_clauseContext differentiates from other interfaces.
	IsOn_conflict_clauseContext()
}

type On_conflict_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOn_conflict_clauseContext() *On_conflict_clauseContext {
	var p = new(On_conflict_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_on_conflict_clause
	return p
}

func InitEmptyOn_conflict_clauseContext(p *On_conflict_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_on_conflict_clause
}

func (*On_conflict_clauseContext) IsOn_conflict_clauseContext() {}

func NewOn_conflict_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *On_conflict_clauseContext {
	var p = new(On_conflict_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_on_conflict_clause

	return p
}

func (s *On_conflict_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *On_conflict_clauseContext) ON_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserON_SYMBOL, 0)
}

func (s *On_conflict_clauseContext) CONFLICT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCONFLICT_SYMBOL, 0)
}

func (s *On_conflict_clauseContext) DO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDO_SYMBOL, 0)
}

func (s *On_conflict_clauseContext) NOTHING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNOTHING_SYMBOL, 0)
}

func (s *On_conflict_clauseContext) Opt_conflict_target() IOpt_conflict_targetContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_conflict_targetContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_conflict_targetContext)
}

func (s *On_conflict_clauseContext) UPDATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUPDATE_SYMBOL, 0)
}

func (s *On_conflict_clauseContext) SET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSET_SYMBOL, 0)
}

func (s *On_conflict_clauseContext) Update_item_list() IUpdate_item_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUpdate_item_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUpdate_item_listContext)
}

func (s *On_conflict_clauseContext) Opt_where_expression() IOpt_where_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_where_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_where_expressionContext)
}

func (s *On_conflict_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *On_conflict_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *On_conflict_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOn_conflict_clause(s)
	}
}

func (s *On_conflict_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOn_conflict_clause(s)
	}
}

func (s *On_conflict_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOn_conflict_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) On_conflict_clause() (localctx IOn_conflict_clauseContext) {
	localctx = NewOn_conflict_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 344, GoogleSQLParserRULE_on_conflict_clause)
	var _la int

	p.SetState(2765)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 301, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2746)
			p.Match(GoogleSQLParserON_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2747)
			p.Match(GoogleSQLParserCONFLICT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2749)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserLR_BRACKET_SYMBOL || _la == GoogleSQLParserON_SYMBOL {
			{
				p.SetState(2748)
				p.Opt_conflict_target()
			}

		}
		{
			p.SetState(2751)
			p.Match(GoogleSQLParserDO_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2752)
			p.Match(GoogleSQLParserNOTHING_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2753)
			p.Match(GoogleSQLParserON_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2754)
			p.Match(GoogleSQLParserCONFLICT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2756)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserLR_BRACKET_SYMBOL || _la == GoogleSQLParserON_SYMBOL {
			{
				p.SetState(2755)
				p.Opt_conflict_target()
			}

		}
		{
			p.SetState(2758)
			p.Match(GoogleSQLParserDO_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2759)
			p.Match(GoogleSQLParserUPDATE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2760)
			p.Match(GoogleSQLParserSET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2761)
			p.Update_item_list()
		}
		p.SetState(2763)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserWHERE_SYMBOL {
			{
				p.SetState(2762)
				p.Opt_where_expression()
			}

		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_where_expressionContext is an interface to support dynamic dispatch.
type IOpt_where_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WHERE_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsOpt_where_expressionContext differentiates from other interfaces.
	IsOpt_where_expressionContext()
}

type Opt_where_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_where_expressionContext() *Opt_where_expressionContext {
	var p = new(Opt_where_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_where_expression
	return p
}

func InitEmptyOpt_where_expressionContext(p *Opt_where_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_where_expression
}

func (*Opt_where_expressionContext) IsOpt_where_expressionContext() {}

func NewOpt_where_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_where_expressionContext {
	var p = new(Opt_where_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_where_expression

	return p
}

func (s *Opt_where_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_where_expressionContext) WHERE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWHERE_SYMBOL, 0)
}

func (s *Opt_where_expressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Opt_where_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_where_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_where_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_where_expression(s)
	}
}

func (s *Opt_where_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_where_expression(s)
	}
}

func (s *Opt_where_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_where_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_where_expression() (localctx IOpt_where_expressionContext) {
	localctx = NewOpt_where_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 346, GoogleSQLParserRULE_opt_where_expression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2767)
		p.Match(GoogleSQLParserWHERE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2768)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_conflict_targetContext is an interface to support dynamic dispatch.
type IOpt_conflict_targetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Column_list() IColumn_listContext
	ON_SYMBOL() antlr.TerminalNode
	UNIQUE_SYMBOL() antlr.TerminalNode
	CONSTRAINT_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext

	// IsOpt_conflict_targetContext differentiates from other interfaces.
	IsOpt_conflict_targetContext()
}

type Opt_conflict_targetContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_conflict_targetContext() *Opt_conflict_targetContext {
	var p = new(Opt_conflict_targetContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_conflict_target
	return p
}

func InitEmptyOpt_conflict_targetContext(p *Opt_conflict_targetContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_conflict_target
}

func (*Opt_conflict_targetContext) IsOpt_conflict_targetContext() {}

func NewOpt_conflict_targetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_conflict_targetContext {
	var p = new(Opt_conflict_targetContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_conflict_target

	return p
}

func (s *Opt_conflict_targetContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_conflict_targetContext) Column_list() IColumn_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_listContext)
}

func (s *Opt_conflict_targetContext) ON_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserON_SYMBOL, 0)
}

func (s *Opt_conflict_targetContext) UNIQUE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNIQUE_SYMBOL, 0)
}

func (s *Opt_conflict_targetContext) CONSTRAINT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCONSTRAINT_SYMBOL, 0)
}

func (s *Opt_conflict_targetContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Opt_conflict_targetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_conflict_targetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_conflict_targetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_conflict_target(s)
	}
}

func (s *Opt_conflict_targetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_conflict_target(s)
	}
}

func (s *Opt_conflict_targetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_conflict_target(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_conflict_target() (localctx IOpt_conflict_targetContext) {
	localctx = NewOpt_conflict_targetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 348, GoogleSQLParserRULE_opt_conflict_target)
	p.SetState(2775)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserLR_BRACKET_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2770)
			p.Column_list()
		}

	case GoogleSQLParserON_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2771)
			p.Match(GoogleSQLParserON_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2772)
			p.Match(GoogleSQLParserUNIQUE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2773)
			p.Match(GoogleSQLParserCONSTRAINT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2774)
			p.Identifier()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUpdate_item_listContext is an interface to support dynamic dispatch.
type IUpdate_item_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllUpdate_item() []IUpdate_itemContext
	Update_item(i int) IUpdate_itemContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsUpdate_item_listContext differentiates from other interfaces.
	IsUpdate_item_listContext()
}

type Update_item_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdate_item_listContext() *Update_item_listContext {
	var p = new(Update_item_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_update_item_list
	return p
}

func InitEmptyUpdate_item_listContext(p *Update_item_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_update_item_list
}

func (*Update_item_listContext) IsUpdate_item_listContext() {}

func NewUpdate_item_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Update_item_listContext {
	var p = new(Update_item_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_update_item_list

	return p
}

func (s *Update_item_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Update_item_listContext) AllUpdate_item() []IUpdate_itemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IUpdate_itemContext); ok {
			len++
		}
	}

	tst := make([]IUpdate_itemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IUpdate_itemContext); ok {
			tst[i] = t.(IUpdate_itemContext)
			i++
		}
	}

	return tst
}

func (s *Update_item_listContext) Update_item(i int) IUpdate_itemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUpdate_itemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUpdate_itemContext)
}

func (s *Update_item_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Update_item_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Update_item_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Update_item_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Update_item_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUpdate_item_list(s)
	}
}

func (s *Update_item_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUpdate_item_list(s)
	}
}

func (s *Update_item_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUpdate_item_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Update_item_list() (localctx IUpdate_item_listContext) {
	localctx = NewUpdate_item_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 350, GoogleSQLParserRULE_update_item_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2777)
		p.Update_item()
	}
	p.SetState(2782)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(2778)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2779)
			p.Update_item()
		}

		p.SetState(2784)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUpdate_itemContext is an interface to support dynamic dispatch.
type IUpdate_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Update_set_value() IUpdate_set_valueContext
	Nested_dml_statement() INested_dml_statementContext

	// IsUpdate_itemContext differentiates from other interfaces.
	IsUpdate_itemContext()
}

type Update_itemContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdate_itemContext() *Update_itemContext {
	var p = new(Update_itemContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_update_item
	return p
}

func InitEmptyUpdate_itemContext(p *Update_itemContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_update_item
}

func (*Update_itemContext) IsUpdate_itemContext() {}

func NewUpdate_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Update_itemContext {
	var p = new(Update_itemContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_update_item

	return p
}

func (s *Update_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Update_itemContext) Update_set_value() IUpdate_set_valueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUpdate_set_valueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUpdate_set_valueContext)
}

func (s *Update_itemContext) Nested_dml_statement() INested_dml_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INested_dml_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INested_dml_statementContext)
}

func (s *Update_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Update_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Update_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUpdate_item(s)
	}
}

func (s *Update_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUpdate_item(s)
	}
}

func (s *Update_itemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUpdate_item(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Update_item() (localctx IUpdate_itemContext) {
	localctx = NewUpdate_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 352, GoogleSQLParserRULE_update_item)
	p.SetState(2787)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserCONFLICT_SYMBOL, GoogleSQLParserDESTINATION_SYMBOL, GoogleSQLParserPROPERTY_SYMBOL, GoogleSQLParserGRAPH_SYMBOL, GoogleSQLParserNODE_SYMBOL, GoogleSQLParserPROPERTIES_SYMBOL, GoogleSQLParserLABEL_SYMBOL, GoogleSQLParserEDGE_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2785)
			p.Update_set_value()
		}

	case GoogleSQLParserLR_BRACKET_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2786)
			p.Nested_dml_statement()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUpdate_set_valueContext is an interface to support dynamic dispatch.
type IUpdate_set_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Generalized_path_expression() IGeneralized_path_expressionContext
	EQUAL_OPERATOR() antlr.TerminalNode
	Expression_or_default() IExpression_or_defaultContext

	// IsUpdate_set_valueContext differentiates from other interfaces.
	IsUpdate_set_valueContext()
}

type Update_set_valueContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdate_set_valueContext() *Update_set_valueContext {
	var p = new(Update_set_valueContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_update_set_value
	return p
}

func InitEmptyUpdate_set_valueContext(p *Update_set_valueContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_update_set_value
}

func (*Update_set_valueContext) IsUpdate_set_valueContext() {}

func NewUpdate_set_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Update_set_valueContext {
	var p = new(Update_set_valueContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_update_set_value

	return p
}

func (s *Update_set_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Update_set_valueContext) Generalized_path_expression() IGeneralized_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGeneralized_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGeneralized_path_expressionContext)
}

func (s *Update_set_valueContext) EQUAL_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEQUAL_OPERATOR, 0)
}

func (s *Update_set_valueContext) Expression_or_default() IExpression_or_defaultContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpression_or_defaultContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpression_or_defaultContext)
}

func (s *Update_set_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Update_set_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Update_set_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUpdate_set_value(s)
	}
}

func (s *Update_set_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUpdate_set_value(s)
	}
}

func (s *Update_set_valueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUpdate_set_value(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Update_set_value() (localctx IUpdate_set_valueContext) {
	localctx = NewUpdate_set_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 354, GoogleSQLParserRULE_update_set_value)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2789)
		p.generalized_path_expression(0)
	}
	{
		p.SetState(2790)
		p.Match(GoogleSQLParserEQUAL_OPERATOR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2791)
		p.Expression_or_default()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INested_dml_statementContext is an interface to support dynamic dispatch.
type INested_dml_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Dml_statement() IDml_statementContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsNested_dml_statementContext differentiates from other interfaces.
	IsNested_dml_statementContext()
}

type Nested_dml_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNested_dml_statementContext() *Nested_dml_statementContext {
	var p = new(Nested_dml_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_nested_dml_statement
	return p
}

func InitEmptyNested_dml_statementContext(p *Nested_dml_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_nested_dml_statement
}

func (*Nested_dml_statementContext) IsNested_dml_statementContext() {}

func NewNested_dml_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Nested_dml_statementContext {
	var p = new(Nested_dml_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_nested_dml_statement

	return p
}

func (s *Nested_dml_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Nested_dml_statementContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Nested_dml_statementContext) Dml_statement() IDml_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDml_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDml_statementContext)
}

func (s *Nested_dml_statementContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Nested_dml_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Nested_dml_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Nested_dml_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterNested_dml_statement(s)
	}
}

func (s *Nested_dml_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitNested_dml_statement(s)
	}
}

func (s *Nested_dml_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitNested_dml_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Nested_dml_statement() (localctx INested_dml_statementContext) {
	localctx = NewNested_dml_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 356, GoogleSQLParserRULE_nested_dml_statement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2793)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2794)
		p.Dml_statement()
	}
	{
		p.SetState(2795)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInsert_values_list_or_table_clauseContext is an interface to support dynamic dispatch.
type IInsert_values_list_or_table_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Insert_values_list() IInsert_values_listContext
	Table_clause_unreversed() ITable_clause_unreversedContext

	// IsInsert_values_list_or_table_clauseContext differentiates from other interfaces.
	IsInsert_values_list_or_table_clauseContext()
}

type Insert_values_list_or_table_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsert_values_list_or_table_clauseContext() *Insert_values_list_or_table_clauseContext {
	var p = new(Insert_values_list_or_table_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_insert_values_list_or_table_clause
	return p
}

func InitEmptyInsert_values_list_or_table_clauseContext(p *Insert_values_list_or_table_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_insert_values_list_or_table_clause
}

func (*Insert_values_list_or_table_clauseContext) IsInsert_values_list_or_table_clauseContext() {}

func NewInsert_values_list_or_table_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Insert_values_list_or_table_clauseContext {
	var p = new(Insert_values_list_or_table_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_insert_values_list_or_table_clause

	return p
}

func (s *Insert_values_list_or_table_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Insert_values_list_or_table_clauseContext) Insert_values_list() IInsert_values_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInsert_values_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInsert_values_listContext)
}

func (s *Insert_values_list_or_table_clauseContext) Table_clause_unreversed() ITable_clause_unreversedContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_clause_unreversedContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_clause_unreversedContext)
}

func (s *Insert_values_list_or_table_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Insert_values_list_or_table_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Insert_values_list_or_table_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterInsert_values_list_or_table_clause(s)
	}
}

func (s *Insert_values_list_or_table_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitInsert_values_list_or_table_clause(s)
	}
}

func (s *Insert_values_list_or_table_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitInsert_values_list_or_table_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Insert_values_list_or_table_clause() (localctx IInsert_values_list_or_table_clauseContext) {
	localctx = NewInsert_values_list_or_table_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 358, GoogleSQLParserRULE_insert_values_list_or_table_clause)
	p.SetState(2799)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserVALUES_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2797)
			p.Insert_values_list()
		}

	case GoogleSQLParserTABLE_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2798)
			p.Table_clause_unreversed()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_clause_unreversedContext is an interface to support dynamic dispatch.
type ITable_clause_unreversedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TABLE_SYMBOL() antlr.TerminalNode
	Table_clause_no_keyword() ITable_clause_no_keywordContext

	// IsTable_clause_unreversedContext differentiates from other interfaces.
	IsTable_clause_unreversedContext()
}

type Table_clause_unreversedContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_clause_unreversedContext() *Table_clause_unreversedContext {
	var p = new(Table_clause_unreversedContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_clause_unreversed
	return p
}

func InitEmptyTable_clause_unreversedContext(p *Table_clause_unreversedContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_clause_unreversed
}

func (*Table_clause_unreversedContext) IsTable_clause_unreversedContext() {}

func NewTable_clause_unreversedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_clause_unreversedContext {
	var p = new(Table_clause_unreversedContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_table_clause_unreversed

	return p
}

func (s *Table_clause_unreversedContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_clause_unreversedContext) TABLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTABLE_SYMBOL, 0)
}

func (s *Table_clause_unreversedContext) Table_clause_no_keyword() ITable_clause_no_keywordContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_clause_no_keywordContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_clause_no_keywordContext)
}

func (s *Table_clause_unreversedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_clause_unreversedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_clause_unreversedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTable_clause_unreversed(s)
	}
}

func (s *Table_clause_unreversedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTable_clause_unreversed(s)
	}
}

func (s *Table_clause_unreversedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTable_clause_unreversed(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Table_clause_unreversed() (localctx ITable_clause_unreversedContext) {
	localctx = NewTable_clause_unreversedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 360, GoogleSQLParserRULE_table_clause_unreversed)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2801)
		p.Match(GoogleSQLParserTABLE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2802)
		p.Table_clause_no_keyword()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_clause_no_keywordContext is an interface to support dynamic dispatch.
type ITable_clause_no_keywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Path_expression() IPath_expressionContext
	Where_clause() IWhere_clauseContext
	Tvf_with_suffixes() ITvf_with_suffixesContext

	// IsTable_clause_no_keywordContext differentiates from other interfaces.
	IsTable_clause_no_keywordContext()
}

type Table_clause_no_keywordContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_clause_no_keywordContext() *Table_clause_no_keywordContext {
	var p = new(Table_clause_no_keywordContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_clause_no_keyword
	return p
}

func InitEmptyTable_clause_no_keywordContext(p *Table_clause_no_keywordContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_clause_no_keyword
}

func (*Table_clause_no_keywordContext) IsTable_clause_no_keywordContext() {}

func NewTable_clause_no_keywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_clause_no_keywordContext {
	var p = new(Table_clause_no_keywordContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_table_clause_no_keyword

	return p
}

func (s *Table_clause_no_keywordContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_clause_no_keywordContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Table_clause_no_keywordContext) Where_clause() IWhere_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhere_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhere_clauseContext)
}

func (s *Table_clause_no_keywordContext) Tvf_with_suffixes() ITvf_with_suffixesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITvf_with_suffixesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITvf_with_suffixesContext)
}

func (s *Table_clause_no_keywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_clause_no_keywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_clause_no_keywordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTable_clause_no_keyword(s)
	}
}

func (s *Table_clause_no_keywordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTable_clause_no_keyword(s)
	}
}

func (s *Table_clause_no_keywordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTable_clause_no_keyword(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Table_clause_no_keyword() (localctx ITable_clause_no_keywordContext) {
	localctx = NewTable_clause_no_keywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 362, GoogleSQLParserRULE_table_clause_no_keyword)
	var _la int

	p.SetState(2812)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 308, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2804)
			p.Path_expression()
		}
		p.SetState(2806)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserWHERE_SYMBOL {
			{
				p.SetState(2805)
				p.Where_clause()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2808)
			p.Tvf_with_suffixes()
		}
		p.SetState(2810)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserWHERE_SYMBOL {
			{
				p.SetState(2809)
				p.Where_clause()
			}

		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_returning_clauseContext is an interface to support dynamic dispatch.
type IOpt_returning_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	THEN_SYMBOL() antlr.TerminalNode
	RETURN_SYMBOL() antlr.TerminalNode
	Select_list() ISelect_listContext
	WITH_SYMBOL() antlr.TerminalNode
	ACTION_SYMBOL() antlr.TerminalNode
	AS_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext

	// IsOpt_returning_clauseContext differentiates from other interfaces.
	IsOpt_returning_clauseContext()
}

type Opt_returning_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_returning_clauseContext() *Opt_returning_clauseContext {
	var p = new(Opt_returning_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_returning_clause
	return p
}

func InitEmptyOpt_returning_clauseContext(p *Opt_returning_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_returning_clause
}

func (*Opt_returning_clauseContext) IsOpt_returning_clauseContext() {}

func NewOpt_returning_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_returning_clauseContext {
	var p = new(Opt_returning_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_returning_clause

	return p
}

func (s *Opt_returning_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_returning_clauseContext) THEN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTHEN_SYMBOL, 0)
}

func (s *Opt_returning_clauseContext) RETURN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRETURN_SYMBOL, 0)
}

func (s *Opt_returning_clauseContext) Select_list() ISelect_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_listContext)
}

func (s *Opt_returning_clauseContext) WITH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWITH_SYMBOL, 0)
}

func (s *Opt_returning_clauseContext) ACTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserACTION_SYMBOL, 0)
}

func (s *Opt_returning_clauseContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Opt_returning_clauseContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Opt_returning_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_returning_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_returning_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_returning_clause(s)
	}
}

func (s *Opt_returning_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_returning_clause(s)
	}
}

func (s *Opt_returning_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_returning_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_returning_clause() (localctx IOpt_returning_clauseContext) {
	localctx = NewOpt_returning_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 364, GoogleSQLParserRULE_opt_returning_clause)
	p.SetState(2830)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 309, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2814)
			p.Match(GoogleSQLParserTHEN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2815)
			p.Match(GoogleSQLParserRETURN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2816)
			p.Select_list()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2817)
			p.Match(GoogleSQLParserTHEN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2818)
			p.Match(GoogleSQLParserRETURN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2819)
			p.Match(GoogleSQLParserWITH_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2820)
			p.Match(GoogleSQLParserACTION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2821)
			p.Select_list()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2822)
			p.Match(GoogleSQLParserTHEN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2823)
			p.Match(GoogleSQLParserRETURN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2824)
			p.Match(GoogleSQLParserWITH_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2825)
			p.Match(GoogleSQLParserACTION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2826)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2827)
			p.Identifier()
		}
		{
			p.SetState(2828)
			p.Select_list()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_assert_rows_modifiedContext is an interface to support dynamic dispatch.
type IOpt_assert_rows_modifiedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ASSERT_ROWS_MODIFIED_SYMBOL() antlr.TerminalNode
	Possibly_cast_int_literal_or_parameter() IPossibly_cast_int_literal_or_parameterContext

	// IsOpt_assert_rows_modifiedContext differentiates from other interfaces.
	IsOpt_assert_rows_modifiedContext()
}

type Opt_assert_rows_modifiedContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_assert_rows_modifiedContext() *Opt_assert_rows_modifiedContext {
	var p = new(Opt_assert_rows_modifiedContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_assert_rows_modified
	return p
}

func InitEmptyOpt_assert_rows_modifiedContext(p *Opt_assert_rows_modifiedContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_assert_rows_modified
}

func (*Opt_assert_rows_modifiedContext) IsOpt_assert_rows_modifiedContext() {}

func NewOpt_assert_rows_modifiedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_assert_rows_modifiedContext {
	var p = new(Opt_assert_rows_modifiedContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_assert_rows_modified

	return p
}

func (s *Opt_assert_rows_modifiedContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_assert_rows_modifiedContext) ASSERT_ROWS_MODIFIED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserASSERT_ROWS_MODIFIED_SYMBOL, 0)
}

func (s *Opt_assert_rows_modifiedContext) Possibly_cast_int_literal_or_parameter() IPossibly_cast_int_literal_or_parameterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPossibly_cast_int_literal_or_parameterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPossibly_cast_int_literal_or_parameterContext)
}

func (s *Opt_assert_rows_modifiedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_assert_rows_modifiedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_assert_rows_modifiedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_assert_rows_modified(s)
	}
}

func (s *Opt_assert_rows_modifiedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_assert_rows_modified(s)
	}
}

func (s *Opt_assert_rows_modifiedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_assert_rows_modified(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_assert_rows_modified() (localctx IOpt_assert_rows_modifiedContext) {
	localctx = NewOpt_assert_rows_modifiedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 366, GoogleSQLParserRULE_opt_assert_rows_modified)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2832)
		p.Match(GoogleSQLParserASSERT_ROWS_MODIFIED_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2833)
		p.Possibly_cast_int_literal_or_parameter()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInsert_values_or_queryContext is an interface to support dynamic dispatch.
type IInsert_values_or_queryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Insert_values_list() IInsert_values_listContext
	Query() IQueryContext

	// IsInsert_values_or_queryContext differentiates from other interfaces.
	IsInsert_values_or_queryContext()
}

type Insert_values_or_queryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsert_values_or_queryContext() *Insert_values_or_queryContext {
	var p = new(Insert_values_or_queryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_insert_values_or_query
	return p
}

func InitEmptyInsert_values_or_queryContext(p *Insert_values_or_queryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_insert_values_or_query
}

func (*Insert_values_or_queryContext) IsInsert_values_or_queryContext() {}

func NewInsert_values_or_queryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Insert_values_or_queryContext {
	var p = new(Insert_values_or_queryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_insert_values_or_query

	return p
}

func (s *Insert_values_or_queryContext) GetParser() antlr.Parser { return s.parser }

func (s *Insert_values_or_queryContext) Insert_values_list() IInsert_values_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInsert_values_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInsert_values_listContext)
}

func (s *Insert_values_or_queryContext) Query() IQueryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQueryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *Insert_values_or_queryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Insert_values_or_queryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Insert_values_or_queryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterInsert_values_or_query(s)
	}
}

func (s *Insert_values_or_queryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitInsert_values_or_query(s)
	}
}

func (s *Insert_values_or_queryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitInsert_values_or_query(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Insert_values_or_query() (localctx IInsert_values_or_queryContext) {
	localctx = NewInsert_values_or_queryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 368, GoogleSQLParserRULE_insert_values_or_query)
	p.SetState(2837)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserVALUES_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2835)
			p.Insert_values_list()
		}

	case GoogleSQLParserLR_BRACKET_SYMBOL, GoogleSQLParserFROM_SYMBOL, GoogleSQLParserSELECT_SYMBOL, GoogleSQLParserWITH_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2836)
			p.Query()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInsert_values_listContext is an interface to support dynamic dispatch.
type IInsert_values_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	VALUES_SYMBOL() antlr.TerminalNode
	AllInsert_values_row() []IInsert_values_rowContext
	Insert_values_row(i int) IInsert_values_rowContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsInsert_values_listContext differentiates from other interfaces.
	IsInsert_values_listContext()
}

type Insert_values_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsert_values_listContext() *Insert_values_listContext {
	var p = new(Insert_values_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_insert_values_list
	return p
}

func InitEmptyInsert_values_listContext(p *Insert_values_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_insert_values_list
}

func (*Insert_values_listContext) IsInsert_values_listContext() {}

func NewInsert_values_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Insert_values_listContext {
	var p = new(Insert_values_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_insert_values_list

	return p
}

func (s *Insert_values_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Insert_values_listContext) VALUES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserVALUES_SYMBOL, 0)
}

func (s *Insert_values_listContext) AllInsert_values_row() []IInsert_values_rowContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IInsert_values_rowContext); ok {
			len++
		}
	}

	tst := make([]IInsert_values_rowContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IInsert_values_rowContext); ok {
			tst[i] = t.(IInsert_values_rowContext)
			i++
		}
	}

	return tst
}

func (s *Insert_values_listContext) Insert_values_row(i int) IInsert_values_rowContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInsert_values_rowContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInsert_values_rowContext)
}

func (s *Insert_values_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Insert_values_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Insert_values_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Insert_values_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Insert_values_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterInsert_values_list(s)
	}
}

func (s *Insert_values_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitInsert_values_list(s)
	}
}

func (s *Insert_values_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitInsert_values_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Insert_values_list() (localctx IInsert_values_listContext) {
	localctx = NewInsert_values_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 370, GoogleSQLParserRULE_insert_values_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2839)
		p.Match(GoogleSQLParserVALUES_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2840)
		p.Insert_values_row()
	}
	p.SetState(2845)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(2841)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2842)
			p.Insert_values_row()
		}

		p.SetState(2847)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInsert_values_rowContext is an interface to support dynamic dispatch.
type IInsert_values_rowContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllExpression_or_default() []IExpression_or_defaultContext
	Expression_or_default(i int) IExpression_or_defaultContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsInsert_values_rowContext differentiates from other interfaces.
	IsInsert_values_rowContext()
}

type Insert_values_rowContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsert_values_rowContext() *Insert_values_rowContext {
	var p = new(Insert_values_rowContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_insert_values_row
	return p
}

func InitEmptyInsert_values_rowContext(p *Insert_values_rowContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_insert_values_row
}

func (*Insert_values_rowContext) IsInsert_values_rowContext() {}

func NewInsert_values_rowContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Insert_values_rowContext {
	var p = new(Insert_values_rowContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_insert_values_row

	return p
}

func (s *Insert_values_rowContext) GetParser() antlr.Parser { return s.parser }

func (s *Insert_values_rowContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Insert_values_rowContext) AllExpression_or_default() []IExpression_or_defaultContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpression_or_defaultContext); ok {
			len++
		}
	}

	tst := make([]IExpression_or_defaultContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpression_or_defaultContext); ok {
			tst[i] = t.(IExpression_or_defaultContext)
			i++
		}
	}

	return tst
}

func (s *Insert_values_rowContext) Expression_or_default(i int) IExpression_or_defaultContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpression_or_defaultContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpression_or_defaultContext)
}

func (s *Insert_values_rowContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Insert_values_rowContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Insert_values_rowContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Insert_values_rowContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Insert_values_rowContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Insert_values_rowContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterInsert_values_row(s)
	}
}

func (s *Insert_values_rowContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitInsert_values_row(s)
	}
}

func (s *Insert_values_rowContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitInsert_values_row(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Insert_values_row() (localctx IInsert_values_rowContext) {
	localctx = NewInsert_values_rowContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 372, GoogleSQLParserRULE_insert_values_row)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2848)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2849)
		p.Expression_or_default()
	}
	p.SetState(2854)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(2850)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2851)
			p.Expression_or_default()
		}

		p.SetState(2856)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2857)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpression_or_defaultContext is an interface to support dynamic dispatch.
type IExpression_or_defaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	DEFAULT_SYMBOL() antlr.TerminalNode

	// IsExpression_or_defaultContext differentiates from other interfaces.
	IsExpression_or_defaultContext()
}

type Expression_or_defaultContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_or_defaultContext() *Expression_or_defaultContext {
	var p = new(Expression_or_defaultContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expression_or_default
	return p
}

func InitEmptyExpression_or_defaultContext(p *Expression_or_defaultContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expression_or_default
}

func (*Expression_or_defaultContext) IsExpression_or_defaultContext() {}

func NewExpression_or_defaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_or_defaultContext {
	var p = new(Expression_or_defaultContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_expression_or_default

	return p
}

func (s *Expression_or_defaultContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_or_defaultContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Expression_or_defaultContext) DEFAULT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDEFAULT_SYMBOL, 0)
}

func (s *Expression_or_defaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_or_defaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expression_or_defaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterExpression_or_default(s)
	}
}

func (s *Expression_or_defaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitExpression_or_default(s)
	}
}

func (s *Expression_or_defaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitExpression_or_default(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Expression_or_default() (localctx IExpression_or_defaultContext) {
	localctx = NewExpression_or_defaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 374, GoogleSQLParserRULE_expression_or_default)
	p.SetState(2861)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserPLUS_OPERATOR, GoogleSQLParserMINUS_OPERATOR, GoogleSQLParserBITWISE_NOT_OPERATOR, GoogleSQLParserRC_BRACKET_SYMBOL, GoogleSQLParserLR_BRACKET_SYMBOL, GoogleSQLParserLS_BRACKET_SYMBOL, GoogleSQLParserQUESTION_SYMBOL, GoogleSQLParserAT_SYMBOL, GoogleSQLParserATAT_SYMBOL, GoogleSQLParserSTRING_LITERAL, GoogleSQLParserBYTES_LITERAL, GoogleSQLParserFLOATING_POINT_LITERAL, GoogleSQLParserINTEGER_LITERAL, GoogleSQLParserARRAY_SYMBOL, GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserLEFT_SYMBOL, GoogleSQLParserNULL_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserRIGHT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSTRUCT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserWITH_SYMBOL, GoogleSQLParserTRUE_SYMBOL, GoogleSQLParserFALSE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserNOT_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserRANGE_SYMBOL, GoogleSQLParserINTERVAL_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserNEW_SYMBOL, GoogleSQLParserCASE_SYMBOL, GoogleSQLParserCAST_SYMBOL, GoogleSQLParserEXTRACT_SYMBOL, GoogleSQLParserCOLLATE_SYMBOL, GoogleSQLParserIF_SYMBOL, GoogleSQLParserGROUPING_SYMBOL, GoogleSQLParserEXISTS_SYMBOL, GoogleSQLParserCONFLICT_SYMBOL, GoogleSQLParserDESTINATION_SYMBOL, GoogleSQLParserPROPERTY_SYMBOL, GoogleSQLParserGRAPH_SYMBOL, GoogleSQLParserNODE_SYMBOL, GoogleSQLParserPROPERTIES_SYMBOL, GoogleSQLParserLABEL_SYMBOL, GoogleSQLParserEDGE_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2859)
			p.expression(0)
		}

	case GoogleSQLParserDEFAULT_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2860)
			p.Match(GoogleSQLParserDEFAULT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInsert_statement_prefixContext is an interface to support dynamic dispatch.
type IInsert_statement_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	INSERT_SYMBOL() antlr.TerminalNode
	Maybe_dashed_generalized_path_expression() IMaybe_dashed_generalized_path_expressionContext
	Opt_or_ignore_replace_update() IOpt_or_ignore_replace_updateContext
	Opt_into() IOpt_intoContext
	Hint() IHintContext

	// IsInsert_statement_prefixContext differentiates from other interfaces.
	IsInsert_statement_prefixContext()
}

type Insert_statement_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsert_statement_prefixContext() *Insert_statement_prefixContext {
	var p = new(Insert_statement_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_insert_statement_prefix
	return p
}

func InitEmptyInsert_statement_prefixContext(p *Insert_statement_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_insert_statement_prefix
}

func (*Insert_statement_prefixContext) IsInsert_statement_prefixContext() {}

func NewInsert_statement_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Insert_statement_prefixContext {
	var p = new(Insert_statement_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_insert_statement_prefix

	return p
}

func (s *Insert_statement_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Insert_statement_prefixContext) INSERT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINSERT_SYMBOL, 0)
}

func (s *Insert_statement_prefixContext) Maybe_dashed_generalized_path_expression() IMaybe_dashed_generalized_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMaybe_dashed_generalized_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMaybe_dashed_generalized_path_expressionContext)
}

func (s *Insert_statement_prefixContext) Opt_or_ignore_replace_update() IOpt_or_ignore_replace_updateContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_or_ignore_replace_updateContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_or_ignore_replace_updateContext)
}

func (s *Insert_statement_prefixContext) Opt_into() IOpt_intoContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_intoContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_intoContext)
}

func (s *Insert_statement_prefixContext) Hint() IHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHintContext)
}

func (s *Insert_statement_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Insert_statement_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Insert_statement_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterInsert_statement_prefix(s)
	}
}

func (s *Insert_statement_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitInsert_statement_prefix(s)
	}
}

func (s *Insert_statement_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitInsert_statement_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Insert_statement_prefix() (localctx IInsert_statement_prefixContext) {
	localctx = NewInsert_statement_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 376, GoogleSQLParserRULE_insert_statement_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2863)
		p.Match(GoogleSQLParserINSERT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2865)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 314, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2864)
			p.Opt_or_ignore_replace_update()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(2868)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserINTO_SYMBOL {
		{
			p.SetState(2867)
			p.Opt_into()
		}

	}
	{
		p.SetState(2870)
		p.Maybe_dashed_generalized_path_expression()
	}
	p.SetState(2872)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAT_SYMBOL {
		{
			p.SetState(2871)
			p.Hint()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMaybe_dashed_generalized_path_expressionContext is an interface to support dynamic dispatch.
type IMaybe_dashed_generalized_path_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Generalized_path_expression() IGeneralized_path_expressionContext
	Dashed_path_expression() IDashed_path_expressionContext

	// IsMaybe_dashed_generalized_path_expressionContext differentiates from other interfaces.
	IsMaybe_dashed_generalized_path_expressionContext()
}

type Maybe_dashed_generalized_path_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMaybe_dashed_generalized_path_expressionContext() *Maybe_dashed_generalized_path_expressionContext {
	var p = new(Maybe_dashed_generalized_path_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_maybe_dashed_generalized_path_expression
	return p
}

func InitEmptyMaybe_dashed_generalized_path_expressionContext(p *Maybe_dashed_generalized_path_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_maybe_dashed_generalized_path_expression
}

func (*Maybe_dashed_generalized_path_expressionContext) IsMaybe_dashed_generalized_path_expressionContext() {
}

func NewMaybe_dashed_generalized_path_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Maybe_dashed_generalized_path_expressionContext {
	var p = new(Maybe_dashed_generalized_path_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_maybe_dashed_generalized_path_expression

	return p
}

func (s *Maybe_dashed_generalized_path_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Maybe_dashed_generalized_path_expressionContext) Generalized_path_expression() IGeneralized_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGeneralized_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGeneralized_path_expressionContext)
}

func (s *Maybe_dashed_generalized_path_expressionContext) Dashed_path_expression() IDashed_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDashed_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDashed_path_expressionContext)
}

func (s *Maybe_dashed_generalized_path_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Maybe_dashed_generalized_path_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Maybe_dashed_generalized_path_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterMaybe_dashed_generalized_path_expression(s)
	}
}

func (s *Maybe_dashed_generalized_path_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitMaybe_dashed_generalized_path_expression(s)
	}
}

func (s *Maybe_dashed_generalized_path_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitMaybe_dashed_generalized_path_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Maybe_dashed_generalized_path_expression() (localctx IMaybe_dashed_generalized_path_expressionContext) {
	localctx = NewMaybe_dashed_generalized_path_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 378, GoogleSQLParserRULE_maybe_dashed_generalized_path_expression)
	p.SetState(2876)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 317, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2874)
			p.generalized_path_expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2875)
			p.dashed_path_expression(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_intoContext is an interface to support dynamic dispatch.
type IOpt_intoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	INTO_SYMBOL() antlr.TerminalNode

	// IsOpt_intoContext differentiates from other interfaces.
	IsOpt_intoContext()
}

type Opt_intoContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_intoContext() *Opt_intoContext {
	var p = new(Opt_intoContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_into
	return p
}

func InitEmptyOpt_intoContext(p *Opt_intoContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_into
}

func (*Opt_intoContext) IsOpt_intoContext() {}

func NewOpt_intoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_intoContext {
	var p = new(Opt_intoContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_into

	return p
}

func (s *Opt_intoContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_intoContext) INTO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINTO_SYMBOL, 0)
}

func (s *Opt_intoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_intoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_intoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_into(s)
	}
}

func (s *Opt_intoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_into(s)
	}
}

func (s *Opt_intoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_into(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_into() (localctx IOpt_intoContext) {
	localctx = NewOpt_intoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 380, GoogleSQLParserRULE_opt_into)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2878)
		p.Match(GoogleSQLParserINTO_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_or_ignore_replace_updateContext is an interface to support dynamic dispatch.
type IOpt_or_ignore_replace_updateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OR_SYMBOL() antlr.TerminalNode
	IGNORE_SYMBOL() antlr.TerminalNode
	REPLACE_SYMBOL() antlr.TerminalNode
	UPDATE_SYMBOL() antlr.TerminalNode

	// IsOpt_or_ignore_replace_updateContext differentiates from other interfaces.
	IsOpt_or_ignore_replace_updateContext()
}

type Opt_or_ignore_replace_updateContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_or_ignore_replace_updateContext() *Opt_or_ignore_replace_updateContext {
	var p = new(Opt_or_ignore_replace_updateContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_or_ignore_replace_update
	return p
}

func InitEmptyOpt_or_ignore_replace_updateContext(p *Opt_or_ignore_replace_updateContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_or_ignore_replace_update
}

func (*Opt_or_ignore_replace_updateContext) IsOpt_or_ignore_replace_updateContext() {}

func NewOpt_or_ignore_replace_updateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_or_ignore_replace_updateContext {
	var p = new(Opt_or_ignore_replace_updateContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_or_ignore_replace_update

	return p
}

func (s *Opt_or_ignore_replace_updateContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_or_ignore_replace_updateContext) OR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOR_SYMBOL, 0)
}

func (s *Opt_or_ignore_replace_updateContext) IGNORE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIGNORE_SYMBOL, 0)
}

func (s *Opt_or_ignore_replace_updateContext) REPLACE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPLACE_SYMBOL, 0)
}

func (s *Opt_or_ignore_replace_updateContext) UPDATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUPDATE_SYMBOL, 0)
}

func (s *Opt_or_ignore_replace_updateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_or_ignore_replace_updateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_or_ignore_replace_updateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_or_ignore_replace_update(s)
	}
}

func (s *Opt_or_ignore_replace_updateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_or_ignore_replace_update(s)
	}
}

func (s *Opt_or_ignore_replace_updateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_or_ignore_replace_update(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_or_ignore_replace_update() (localctx IOpt_or_ignore_replace_updateContext) {
	localctx = NewOpt_or_ignore_replace_updateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 382, GoogleSQLParserRULE_opt_or_ignore_replace_update)
	p.SetState(2889)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 318, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2880)
			p.Match(GoogleSQLParserOR_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2881)
			p.Match(GoogleSQLParserIGNORE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2882)
			p.Match(GoogleSQLParserIGNORE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2883)
			p.Match(GoogleSQLParserOR_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2884)
			p.Match(GoogleSQLParserREPLACE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2885)
			p.Match(GoogleSQLParserREPLACE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2886)
			p.Match(GoogleSQLParserOR_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2887)
			p.Match(GoogleSQLParserUPDATE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2888)
			p.Match(GoogleSQLParserUPDATE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAlter_statementContext is an interface to support dynamic dispatch.
type IAlter_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ALTER_SYMBOL() antlr.TerminalNode
	Table_or_table_function() ITable_or_table_functionContext
	Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext
	Alter_action_list() IAlter_action_listContext
	Opt_if_exists() IOpt_if_existsContext
	Schema_object_kind() ISchema_object_kindContext
	Path_expression() IPath_expressionContext
	Generic_entity_type() IGeneric_entity_typeContext
	PRIVILEGE_SYMBOL() antlr.TerminalNode
	RESTRICTION_SYMBOL() antlr.TerminalNode
	AllON_SYMBOL() []antlr.TerminalNode
	ON_SYMBOL(i int) antlr.TerminalNode
	Privilege_list() IPrivilege_listContext
	Identifier() IIdentifierContext
	ROW_SYMBOL() antlr.TerminalNode
	ACCESS_SYMBOL() antlr.TerminalNode
	POLICY_SYMBOL() antlr.TerminalNode
	Row_access_policy_alter_action_list() IRow_access_policy_alter_action_listContext
	ALL_SYMBOL() antlr.TerminalNode
	POLICIES_SYMBOL() antlr.TerminalNode
	Row_access_policy_alter_action() IRow_access_policy_alter_actionContext

	// IsAlter_statementContext differentiates from other interfaces.
	IsAlter_statementContext()
}

type Alter_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_statementContext() *Alter_statementContext {
	var p = new(Alter_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_alter_statement
	return p
}

func InitEmptyAlter_statementContext(p *Alter_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_alter_statement
}

func (*Alter_statementContext) IsAlter_statementContext() {}

func NewAlter_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_statementContext {
	var p = new(Alter_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_alter_statement

	return p
}

func (s *Alter_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_statementContext) ALTER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserALTER_SYMBOL, 0)
}

func (s *Alter_statementContext) Table_or_table_function() ITable_or_table_functionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_or_table_functionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_or_table_functionContext)
}

func (s *Alter_statementContext) Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMaybe_dashed_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMaybe_dashed_path_expressionContext)
}

func (s *Alter_statementContext) Alter_action_list() IAlter_action_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_action_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_action_listContext)
}

func (s *Alter_statementContext) Opt_if_exists() IOpt_if_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_if_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_if_existsContext)
}

func (s *Alter_statementContext) Schema_object_kind() ISchema_object_kindContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_object_kindContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_object_kindContext)
}

func (s *Alter_statementContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Alter_statementContext) Generic_entity_type() IGeneric_entity_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGeneric_entity_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGeneric_entity_typeContext)
}

func (s *Alter_statementContext) PRIVILEGE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPRIVILEGE_SYMBOL, 0)
}

func (s *Alter_statementContext) RESTRICTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRESTRICTION_SYMBOL, 0)
}

func (s *Alter_statementContext) AllON_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserON_SYMBOL)
}

func (s *Alter_statementContext) ON_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserON_SYMBOL, i)
}

func (s *Alter_statementContext) Privilege_list() IPrivilege_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrivilege_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrivilege_listContext)
}

func (s *Alter_statementContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_statementContext) ROW_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserROW_SYMBOL, 0)
}

func (s *Alter_statementContext) ACCESS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserACCESS_SYMBOL, 0)
}

func (s *Alter_statementContext) POLICY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPOLICY_SYMBOL, 0)
}

func (s *Alter_statementContext) Row_access_policy_alter_action_list() IRow_access_policy_alter_action_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRow_access_policy_alter_action_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRow_access_policy_alter_action_listContext)
}

func (s *Alter_statementContext) ALL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserALL_SYMBOL, 0)
}

func (s *Alter_statementContext) POLICIES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPOLICIES_SYMBOL, 0)
}

func (s *Alter_statementContext) Row_access_policy_alter_action() IRow_access_policy_alter_actionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRow_access_policy_alter_actionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRow_access_policy_alter_actionContext)
}

func (s *Alter_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAlter_statement(s)
	}
}

func (s *Alter_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAlter_statement(s)
	}
}

func (s *Alter_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAlter_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Alter_statement() (localctx IAlter_statementContext) {
	localctx = NewAlter_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 384, GoogleSQLParserRULE_alter_statement)
	var _la int

	p.SetState(2955)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 325, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2891)
			p.Match(GoogleSQLParserALTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2892)
			p.Table_or_table_function()
		}
		p.SetState(2894)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(2893)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(2896)
			p.Maybe_dashed_path_expression()
		}
		{
			p.SetState(2897)
			p.Alter_action_list()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2899)
			p.Match(GoogleSQLParserALTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2900)
			p.Schema_object_kind()
		}
		p.SetState(2902)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(2901)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(2904)
			p.Path_expression()
		}
		{
			p.SetState(2905)
			p.Alter_action_list()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2907)
			p.Match(GoogleSQLParserALTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2908)
			p.Generic_entity_type()
		}
		p.SetState(2910)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(2909)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(2912)
			p.Path_expression()
		}
		{
			p.SetState(2913)
			p.Alter_action_list()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2915)
			p.Match(GoogleSQLParserALTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2916)
			p.Generic_entity_type()
		}
		p.SetState(2918)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(2917)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(2920)
			p.Alter_action_list()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2922)
			p.Match(GoogleSQLParserALTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2923)
			p.Match(GoogleSQLParserPRIVILEGE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2924)
			p.Match(GoogleSQLParserRESTRICTION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2926)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(2925)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(2928)
			p.Match(GoogleSQLParserON_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2929)
			p.Privilege_list()
		}
		{
			p.SetState(2930)
			p.Match(GoogleSQLParserON_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2931)
			p.Identifier()
		}
		{
			p.SetState(2932)
			p.Path_expression()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2934)
			p.Match(GoogleSQLParserALTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2935)
			p.Match(GoogleSQLParserROW_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2936)
			p.Match(GoogleSQLParserACCESS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2937)
			p.Match(GoogleSQLParserPOLICY_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2939)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(2938)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(2941)
			p.Identifier()
		}
		{
			p.SetState(2942)
			p.Match(GoogleSQLParserON_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2943)
			p.Path_expression()
		}
		{
			p.SetState(2944)
			p.Row_access_policy_alter_action_list()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2946)
			p.Match(GoogleSQLParserALTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2947)
			p.Match(GoogleSQLParserALL_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2948)
			p.Match(GoogleSQLParserROW_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2949)
			p.Match(GoogleSQLParserACCESS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2950)
			p.Match(GoogleSQLParserPOLICIES_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2951)
			p.Match(GoogleSQLParserON_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2952)
			p.Path_expression()
		}
		{
			p.SetState(2953)
			p.Row_access_policy_alter_action()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAnalyze_statementContext is an interface to support dynamic dispatch.
type IAnalyze_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ANALYZE_SYMBOL() antlr.TerminalNode
	Opt_options_list() IOpt_options_listContext
	Table_and_column_info_list() ITable_and_column_info_listContext

	// IsAnalyze_statementContext differentiates from other interfaces.
	IsAnalyze_statementContext()
}

type Analyze_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnalyze_statementContext() *Analyze_statementContext {
	var p = new(Analyze_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_analyze_statement
	return p
}

func InitEmptyAnalyze_statementContext(p *Analyze_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_analyze_statement
}

func (*Analyze_statementContext) IsAnalyze_statementContext() {}

func NewAnalyze_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Analyze_statementContext {
	var p = new(Analyze_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_analyze_statement

	return p
}

func (s *Analyze_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Analyze_statementContext) ANALYZE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserANALYZE_SYMBOL, 0)
}

func (s *Analyze_statementContext) Opt_options_list() IOpt_options_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_options_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_options_listContext)
}

func (s *Analyze_statementContext) Table_and_column_info_list() ITable_and_column_info_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_and_column_info_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_and_column_info_listContext)
}

func (s *Analyze_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Analyze_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Analyze_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAnalyze_statement(s)
	}
}

func (s *Analyze_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAnalyze_statement(s)
	}
}

func (s *Analyze_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAnalyze_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Analyze_statement() (localctx IAnalyze_statementContext) {
	localctx = NewAnalyze_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 386, GoogleSQLParserRULE_analyze_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2957)
		p.Match(GoogleSQLParserANALYZE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2959)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 326, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2958)
			p.Opt_options_list()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(2962)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64((_la-72)) & ^0x3f) == 0 && ((int64(1)<<(_la-72))&-106523215214079) != 0) || ((int64((_la-136)) & ^0x3f) == 0 && ((int64(1)<<(_la-136))&-1) != 0) || ((int64((_la-200)) & ^0x3f) == 0 && ((int64(1)<<(_la-200))&-36028797018963969) != 0) || ((int64((_la-264)) & ^0x3f) == 0 && ((int64(1)<<(_la-264))&536870911) != 0) || ((int64((_la-338)) & ^0x3f) == 0 && ((int64(1)<<(_la-338))&8161) != 0) {
		{
			p.SetState(2961)
			p.Table_and_column_info_list()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAssert_statementContext is an interface to support dynamic dispatch.
type IAssert_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ASSERT_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	Opt_description() IOpt_descriptionContext

	// IsAssert_statementContext differentiates from other interfaces.
	IsAssert_statementContext()
}

type Assert_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssert_statementContext() *Assert_statementContext {
	var p = new(Assert_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_assert_statement
	return p
}

func InitEmptyAssert_statementContext(p *Assert_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_assert_statement
}

func (*Assert_statementContext) IsAssert_statementContext() {}

func NewAssert_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Assert_statementContext {
	var p = new(Assert_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_assert_statement

	return p
}

func (s *Assert_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Assert_statementContext) ASSERT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserASSERT_SYMBOL, 0)
}

func (s *Assert_statementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Assert_statementContext) Opt_description() IOpt_descriptionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_descriptionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_descriptionContext)
}

func (s *Assert_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Assert_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Assert_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAssert_statement(s)
	}
}

func (s *Assert_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAssert_statement(s)
	}
}

func (s *Assert_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAssert_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Assert_statement() (localctx IAssert_statementContext) {
	localctx = NewAssert_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 388, GoogleSQLParserRULE_assert_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2964)
		p.Match(GoogleSQLParserASSERT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2965)
		p.expression(0)
	}
	p.SetState(2967)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAS_SYMBOL {
		{
			p.SetState(2966)
			p.Opt_description()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAux_load_data_statementContext is an interface to support dynamic dispatch.
type IAux_load_data_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LOAD_SYMBOL() antlr.TerminalNode
	DATA_SYMBOL() antlr.TerminalNode
	Append_or_overwrite() IAppend_or_overwriteContext
	Maybe_dashed_path_expression_with_scope() IMaybe_dashed_path_expression_with_scopeContext
	Aux_load_data_from_files_options_list() IAux_load_data_from_files_options_listContext
	Table_element_list() ITable_element_listContext
	Load_data_partitions_clause() ILoad_data_partitions_clauseContext
	Collate_clause() ICollate_clauseContext
	Partition_by_clause_prefix_no_hint() IPartition_by_clause_prefix_no_hintContext
	Cluster_by_clause_prefix_no_hint() ICluster_by_clause_prefix_no_hintContext
	Opt_options_list() IOpt_options_listContext
	Opt_external_table_with_clauses() IOpt_external_table_with_clausesContext

	// IsAux_load_data_statementContext differentiates from other interfaces.
	IsAux_load_data_statementContext()
}

type Aux_load_data_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAux_load_data_statementContext() *Aux_load_data_statementContext {
	var p = new(Aux_load_data_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_aux_load_data_statement
	return p
}

func InitEmptyAux_load_data_statementContext(p *Aux_load_data_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_aux_load_data_statement
}

func (*Aux_load_data_statementContext) IsAux_load_data_statementContext() {}

func NewAux_load_data_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Aux_load_data_statementContext {
	var p = new(Aux_load_data_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_aux_load_data_statement

	return p
}

func (s *Aux_load_data_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Aux_load_data_statementContext) LOAD_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLOAD_SYMBOL, 0)
}

func (s *Aux_load_data_statementContext) DATA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDATA_SYMBOL, 0)
}

func (s *Aux_load_data_statementContext) Append_or_overwrite() IAppend_or_overwriteContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAppend_or_overwriteContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAppend_or_overwriteContext)
}

func (s *Aux_load_data_statementContext) Maybe_dashed_path_expression_with_scope() IMaybe_dashed_path_expression_with_scopeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMaybe_dashed_path_expression_with_scopeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMaybe_dashed_path_expression_with_scopeContext)
}

func (s *Aux_load_data_statementContext) Aux_load_data_from_files_options_list() IAux_load_data_from_files_options_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAux_load_data_from_files_options_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAux_load_data_from_files_options_listContext)
}

func (s *Aux_load_data_statementContext) Table_element_list() ITable_element_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_element_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_element_listContext)
}

func (s *Aux_load_data_statementContext) Load_data_partitions_clause() ILoad_data_partitions_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILoad_data_partitions_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILoad_data_partitions_clauseContext)
}

func (s *Aux_load_data_statementContext) Collate_clause() ICollate_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollate_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollate_clauseContext)
}

func (s *Aux_load_data_statementContext) Partition_by_clause_prefix_no_hint() IPartition_by_clause_prefix_no_hintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartition_by_clause_prefix_no_hintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartition_by_clause_prefix_no_hintContext)
}

func (s *Aux_load_data_statementContext) Cluster_by_clause_prefix_no_hint() ICluster_by_clause_prefix_no_hintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICluster_by_clause_prefix_no_hintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICluster_by_clause_prefix_no_hintContext)
}

func (s *Aux_load_data_statementContext) Opt_options_list() IOpt_options_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_options_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_options_listContext)
}

func (s *Aux_load_data_statementContext) Opt_external_table_with_clauses() IOpt_external_table_with_clausesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_external_table_with_clausesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_external_table_with_clausesContext)
}

func (s *Aux_load_data_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Aux_load_data_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Aux_load_data_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAux_load_data_statement(s)
	}
}

func (s *Aux_load_data_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAux_load_data_statement(s)
	}
}

func (s *Aux_load_data_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAux_load_data_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Aux_load_data_statement() (localctx IAux_load_data_statementContext) {
	localctx = NewAux_load_data_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 390, GoogleSQLParserRULE_aux_load_data_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2969)
		p.Match(GoogleSQLParserLOAD_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2970)
		p.Match(GoogleSQLParserDATA_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2971)
		p.Append_or_overwrite()
	}
	{
		p.SetState(2972)
		p.Maybe_dashed_path_expression_with_scope()
	}
	p.SetState(2974)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserLR_BRACKET_SYMBOL {
		{
			p.SetState(2973)
			p.Table_element_list()
		}

	}
	p.SetState(2977)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOVERWRITE_SYMBOL || _la == GoogleSQLParserPARTITIONS_SYMBOL {
		{
			p.SetState(2976)
			p.Load_data_partitions_clause()
		}

	}
	p.SetState(2980)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserCOLLATE_SYMBOL {
		{
			p.SetState(2979)
			p.Collate_clause()
		}

	}
	p.SetState(2983)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserPARTITION_SYMBOL {
		{
			p.SetState(2982)
			p.Partition_by_clause_prefix_no_hint()
		}

	}
	p.SetState(2986)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserCLUSTER_SYMBOL {
		{
			p.SetState(2985)
			p.Cluster_by_clause_prefix_no_hint()
		}

	}
	p.SetState(2989)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOPTIONS_SYMBOL {
		{
			p.SetState(2988)
			p.Opt_options_list()
		}

	}
	{
		p.SetState(2991)
		p.Aux_load_data_from_files_options_list()
	}
	p.SetState(2993)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserWITH_SYMBOL {
		{
			p.SetState(2992)
			p.Opt_external_table_with_clauses()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IClone_data_statementContext is an interface to support dynamic dispatch.
type IClone_data_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CLONE_SYMBOL() antlr.TerminalNode
	DATA_SYMBOL() antlr.TerminalNode
	INTO_SYMBOL() antlr.TerminalNode
	Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext
	FROM_SYMBOL() antlr.TerminalNode
	Clone_data_source_list() IClone_data_source_listContext

	// IsClone_data_statementContext differentiates from other interfaces.
	IsClone_data_statementContext()
}

type Clone_data_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClone_data_statementContext() *Clone_data_statementContext {
	var p = new(Clone_data_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_clone_data_statement
	return p
}

func InitEmptyClone_data_statementContext(p *Clone_data_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_clone_data_statement
}

func (*Clone_data_statementContext) IsClone_data_statementContext() {}

func NewClone_data_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Clone_data_statementContext {
	var p = new(Clone_data_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_clone_data_statement

	return p
}

func (s *Clone_data_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Clone_data_statementContext) CLONE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCLONE_SYMBOL, 0)
}

func (s *Clone_data_statementContext) DATA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDATA_SYMBOL, 0)
}

func (s *Clone_data_statementContext) INTO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINTO_SYMBOL, 0)
}

func (s *Clone_data_statementContext) Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMaybe_dashed_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMaybe_dashed_path_expressionContext)
}

func (s *Clone_data_statementContext) FROM_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFROM_SYMBOL, 0)
}

func (s *Clone_data_statementContext) Clone_data_source_list() IClone_data_source_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClone_data_source_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClone_data_source_listContext)
}

func (s *Clone_data_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Clone_data_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Clone_data_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterClone_data_statement(s)
	}
}

func (s *Clone_data_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitClone_data_statement(s)
	}
}

func (s *Clone_data_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitClone_data_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Clone_data_statement() (localctx IClone_data_statementContext) {
	localctx = NewClone_data_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 392, GoogleSQLParserRULE_clone_data_statement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2995)
		p.Match(GoogleSQLParserCLONE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2996)
		p.Match(GoogleSQLParserDATA_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2997)
		p.Match(GoogleSQLParserINTO_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2998)
		p.Maybe_dashed_path_expression()
	}
	{
		p.SetState(2999)
		p.Match(GoogleSQLParserFROM_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3000)
		p.Clone_data_source_list()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IClone_data_source_listContext is an interface to support dynamic dispatch.
type IClone_data_source_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllClone_data_source() []IClone_data_sourceContext
	Clone_data_source(i int) IClone_data_sourceContext
	AllUNION_SYMBOL() []antlr.TerminalNode
	UNION_SYMBOL(i int) antlr.TerminalNode
	AllALL_SYMBOL() []antlr.TerminalNode
	ALL_SYMBOL(i int) antlr.TerminalNode

	// IsClone_data_source_listContext differentiates from other interfaces.
	IsClone_data_source_listContext()
}

type Clone_data_source_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClone_data_source_listContext() *Clone_data_source_listContext {
	var p = new(Clone_data_source_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_clone_data_source_list
	return p
}

func InitEmptyClone_data_source_listContext(p *Clone_data_source_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_clone_data_source_list
}

func (*Clone_data_source_listContext) IsClone_data_source_listContext() {}

func NewClone_data_source_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Clone_data_source_listContext {
	var p = new(Clone_data_source_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_clone_data_source_list

	return p
}

func (s *Clone_data_source_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Clone_data_source_listContext) AllClone_data_source() []IClone_data_sourceContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IClone_data_sourceContext); ok {
			len++
		}
	}

	tst := make([]IClone_data_sourceContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IClone_data_sourceContext); ok {
			tst[i] = t.(IClone_data_sourceContext)
			i++
		}
	}

	return tst
}

func (s *Clone_data_source_listContext) Clone_data_source(i int) IClone_data_sourceContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClone_data_sourceContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClone_data_sourceContext)
}

func (s *Clone_data_source_listContext) AllUNION_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserUNION_SYMBOL)
}

func (s *Clone_data_source_listContext) UNION_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNION_SYMBOL, i)
}

func (s *Clone_data_source_listContext) AllALL_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserALL_SYMBOL)
}

func (s *Clone_data_source_listContext) ALL_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserALL_SYMBOL, i)
}

func (s *Clone_data_source_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Clone_data_source_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Clone_data_source_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterClone_data_source_list(s)
	}
}

func (s *Clone_data_source_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitClone_data_source_list(s)
	}
}

func (s *Clone_data_source_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitClone_data_source_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Clone_data_source_list() (localctx IClone_data_source_listContext) {
	localctx = NewClone_data_source_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 394, GoogleSQLParserRULE_clone_data_source_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3002)
		p.Clone_data_source()
	}
	p.SetState(3008)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserUNION_SYMBOL {
		{
			p.SetState(3003)
			p.Match(GoogleSQLParserUNION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3004)
			p.Match(GoogleSQLParserALL_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3005)
			p.Clone_data_source()
		}

		p.SetState(3010)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IClone_data_sourceContext is an interface to support dynamic dispatch.
type IClone_data_sourceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext
	Opt_at_system_time() IOpt_at_system_timeContext
	Where_clause() IWhere_clauseContext

	// IsClone_data_sourceContext differentiates from other interfaces.
	IsClone_data_sourceContext()
}

type Clone_data_sourceContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClone_data_sourceContext() *Clone_data_sourceContext {
	var p = new(Clone_data_sourceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_clone_data_source
	return p
}

func InitEmptyClone_data_sourceContext(p *Clone_data_sourceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_clone_data_source
}

func (*Clone_data_sourceContext) IsClone_data_sourceContext() {}

func NewClone_data_sourceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Clone_data_sourceContext {
	var p = new(Clone_data_sourceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_clone_data_source

	return p
}

func (s *Clone_data_sourceContext) GetParser() antlr.Parser { return s.parser }

func (s *Clone_data_sourceContext) Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMaybe_dashed_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMaybe_dashed_path_expressionContext)
}

func (s *Clone_data_sourceContext) Opt_at_system_time() IOpt_at_system_timeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_at_system_timeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_at_system_timeContext)
}

func (s *Clone_data_sourceContext) Where_clause() IWhere_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhere_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhere_clauseContext)
}

func (s *Clone_data_sourceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Clone_data_sourceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Clone_data_sourceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterClone_data_source(s)
	}
}

func (s *Clone_data_sourceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitClone_data_source(s)
	}
}

func (s *Clone_data_sourceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitClone_data_source(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Clone_data_source() (localctx IClone_data_sourceContext) {
	localctx = NewClone_data_sourceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 396, GoogleSQLParserRULE_clone_data_source)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3011)
		p.Maybe_dashed_path_expression()
	}
	p.SetState(3013)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserFOR_SYMBOL {
		{
			p.SetState(3012)
			p.Opt_at_system_time()
		}

	}
	p.SetState(3016)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserWHERE_SYMBOL {
		{
			p.SetState(3015)
			p.Where_clause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_external_table_with_clausesContext is an interface to support dynamic dispatch.
type IOpt_external_table_with_clausesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	With_partition_columns_clause() IWith_partition_columns_clauseContext
	With_connection_clause() IWith_connection_clauseContext

	// IsOpt_external_table_with_clausesContext differentiates from other interfaces.
	IsOpt_external_table_with_clausesContext()
}

type Opt_external_table_with_clausesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_external_table_with_clausesContext() *Opt_external_table_with_clausesContext {
	var p = new(Opt_external_table_with_clausesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_external_table_with_clauses
	return p
}

func InitEmptyOpt_external_table_with_clausesContext(p *Opt_external_table_with_clausesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_external_table_with_clauses
}

func (*Opt_external_table_with_clausesContext) IsOpt_external_table_with_clausesContext() {}

func NewOpt_external_table_with_clausesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_external_table_with_clausesContext {
	var p = new(Opt_external_table_with_clausesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_external_table_with_clauses

	return p
}

func (s *Opt_external_table_with_clausesContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_external_table_with_clausesContext) With_partition_columns_clause() IWith_partition_columns_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_partition_columns_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_partition_columns_clauseContext)
}

func (s *Opt_external_table_with_clausesContext) With_connection_clause() IWith_connection_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_connection_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_connection_clauseContext)
}

func (s *Opt_external_table_with_clausesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_external_table_with_clausesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_external_table_with_clausesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_external_table_with_clauses(s)
	}
}

func (s *Opt_external_table_with_clausesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_external_table_with_clauses(s)
	}
}

func (s *Opt_external_table_with_clausesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_external_table_with_clauses(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_external_table_with_clauses() (localctx IOpt_external_table_with_clausesContext) {
	localctx = NewOpt_external_table_with_clausesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 398, GoogleSQLParserRULE_opt_external_table_with_clauses)
	p.SetState(3023)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 339, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3018)
			p.With_partition_columns_clause()
		}
		{
			p.SetState(3019)
			p.With_connection_clause()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3021)
			p.With_partition_columns_clause()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3022)
			p.With_connection_clause()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWith_partition_columns_clauseContext is an interface to support dynamic dispatch.
type IWith_partition_columns_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WITH_SYMBOL() antlr.TerminalNode
	PARTITION_SYMBOL() antlr.TerminalNode
	COLUMNS_SYMBOL() antlr.TerminalNode
	Table_element_list() ITable_element_listContext

	// IsWith_partition_columns_clauseContext differentiates from other interfaces.
	IsWith_partition_columns_clauseContext()
}

type With_partition_columns_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_partition_columns_clauseContext() *With_partition_columns_clauseContext {
	var p = new(With_partition_columns_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_partition_columns_clause
	return p
}

func InitEmptyWith_partition_columns_clauseContext(p *With_partition_columns_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_partition_columns_clause
}

func (*With_partition_columns_clauseContext) IsWith_partition_columns_clauseContext() {}

func NewWith_partition_columns_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_partition_columns_clauseContext {
	var p = new(With_partition_columns_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_with_partition_columns_clause

	return p
}

func (s *With_partition_columns_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *With_partition_columns_clauseContext) WITH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWITH_SYMBOL, 0)
}

func (s *With_partition_columns_clauseContext) PARTITION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPARTITION_SYMBOL, 0)
}

func (s *With_partition_columns_clauseContext) COLUMNS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOLUMNS_SYMBOL, 0)
}

func (s *With_partition_columns_clauseContext) Table_element_list() ITable_element_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_element_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_element_listContext)
}

func (s *With_partition_columns_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_partition_columns_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_partition_columns_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWith_partition_columns_clause(s)
	}
}

func (s *With_partition_columns_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWith_partition_columns_clause(s)
	}
}

func (s *With_partition_columns_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWith_partition_columns_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) With_partition_columns_clause() (localctx IWith_partition_columns_clauseContext) {
	localctx = NewWith_partition_columns_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 400, GoogleSQLParserRULE_with_partition_columns_clause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3025)
		p.Match(GoogleSQLParserWITH_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3026)
		p.Match(GoogleSQLParserPARTITION_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3027)
		p.Match(GoogleSQLParserCOLUMNS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(3029)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserLR_BRACKET_SYMBOL {
		{
			p.SetState(3028)
			p.Table_element_list()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAux_load_data_from_files_options_listContext is an interface to support dynamic dispatch.
type IAux_load_data_from_files_options_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FROM_SYMBOL() antlr.TerminalNode
	FILES_SYMBOL() antlr.TerminalNode
	Options_list() IOptions_listContext

	// IsAux_load_data_from_files_options_listContext differentiates from other interfaces.
	IsAux_load_data_from_files_options_listContext()
}

type Aux_load_data_from_files_options_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAux_load_data_from_files_options_listContext() *Aux_load_data_from_files_options_listContext {
	var p = new(Aux_load_data_from_files_options_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_aux_load_data_from_files_options_list
	return p
}

func InitEmptyAux_load_data_from_files_options_listContext(p *Aux_load_data_from_files_options_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_aux_load_data_from_files_options_list
}

func (*Aux_load_data_from_files_options_listContext) IsAux_load_data_from_files_options_listContext() {
}

func NewAux_load_data_from_files_options_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Aux_load_data_from_files_options_listContext {
	var p = new(Aux_load_data_from_files_options_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_aux_load_data_from_files_options_list

	return p
}

func (s *Aux_load_data_from_files_options_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Aux_load_data_from_files_options_listContext) FROM_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFROM_SYMBOL, 0)
}

func (s *Aux_load_data_from_files_options_listContext) FILES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFILES_SYMBOL, 0)
}

func (s *Aux_load_data_from_files_options_listContext) Options_list() IOptions_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOptions_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOptions_listContext)
}

func (s *Aux_load_data_from_files_options_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Aux_load_data_from_files_options_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Aux_load_data_from_files_options_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAux_load_data_from_files_options_list(s)
	}
}

func (s *Aux_load_data_from_files_options_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAux_load_data_from_files_options_list(s)
	}
}

func (s *Aux_load_data_from_files_options_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAux_load_data_from_files_options_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Aux_load_data_from_files_options_list() (localctx IAux_load_data_from_files_options_listContext) {
	localctx = NewAux_load_data_from_files_options_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 402, GoogleSQLParserRULE_aux_load_data_from_files_options_list)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3031)
		p.Match(GoogleSQLParserFROM_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3032)
		p.Match(GoogleSQLParserFILES_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3033)
		p.Options_list()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICluster_by_clause_prefix_no_hintContext is an interface to support dynamic dispatch.
type ICluster_by_clause_prefix_no_hintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CLUSTER_SYMBOL() antlr.TerminalNode
	BY_SYMBOL() antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsCluster_by_clause_prefix_no_hintContext differentiates from other interfaces.
	IsCluster_by_clause_prefix_no_hintContext()
}

type Cluster_by_clause_prefix_no_hintContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCluster_by_clause_prefix_no_hintContext() *Cluster_by_clause_prefix_no_hintContext {
	var p = new(Cluster_by_clause_prefix_no_hintContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_cluster_by_clause_prefix_no_hint
	return p
}

func InitEmptyCluster_by_clause_prefix_no_hintContext(p *Cluster_by_clause_prefix_no_hintContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_cluster_by_clause_prefix_no_hint
}

func (*Cluster_by_clause_prefix_no_hintContext) IsCluster_by_clause_prefix_no_hintContext() {}

func NewCluster_by_clause_prefix_no_hintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cluster_by_clause_prefix_no_hintContext {
	var p = new(Cluster_by_clause_prefix_no_hintContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_cluster_by_clause_prefix_no_hint

	return p
}

func (s *Cluster_by_clause_prefix_no_hintContext) GetParser() antlr.Parser { return s.parser }

func (s *Cluster_by_clause_prefix_no_hintContext) CLUSTER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCLUSTER_SYMBOL, 0)
}

func (s *Cluster_by_clause_prefix_no_hintContext) BY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBY_SYMBOL, 0)
}

func (s *Cluster_by_clause_prefix_no_hintContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *Cluster_by_clause_prefix_no_hintContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Cluster_by_clause_prefix_no_hintContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Cluster_by_clause_prefix_no_hintContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Cluster_by_clause_prefix_no_hintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cluster_by_clause_prefix_no_hintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cluster_by_clause_prefix_no_hintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCluster_by_clause_prefix_no_hint(s)
	}
}

func (s *Cluster_by_clause_prefix_no_hintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCluster_by_clause_prefix_no_hint(s)
	}
}

func (s *Cluster_by_clause_prefix_no_hintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCluster_by_clause_prefix_no_hint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Cluster_by_clause_prefix_no_hint() (localctx ICluster_by_clause_prefix_no_hintContext) {
	localctx = NewCluster_by_clause_prefix_no_hintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 404, GoogleSQLParserRULE_cluster_by_clause_prefix_no_hint)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3035)
		p.Match(GoogleSQLParserCLUSTER_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3036)
		p.Match(GoogleSQLParserBY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3037)
		p.expression(0)
	}
	p.SetState(3042)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(3038)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3039)
			p.expression(0)
		}

		p.SetState(3044)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILoad_data_partitions_clauseContext is an interface to support dynamic dispatch.
type ILoad_data_partitions_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PARTITIONS_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	OVERWRITE_SYMBOL() antlr.TerminalNode

	// IsLoad_data_partitions_clauseContext differentiates from other interfaces.
	IsLoad_data_partitions_clauseContext()
}

type Load_data_partitions_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoad_data_partitions_clauseContext() *Load_data_partitions_clauseContext {
	var p = new(Load_data_partitions_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_load_data_partitions_clause
	return p
}

func InitEmptyLoad_data_partitions_clauseContext(p *Load_data_partitions_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_load_data_partitions_clause
}

func (*Load_data_partitions_clauseContext) IsLoad_data_partitions_clauseContext() {}

func NewLoad_data_partitions_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Load_data_partitions_clauseContext {
	var p = new(Load_data_partitions_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_load_data_partitions_clause

	return p
}

func (s *Load_data_partitions_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Load_data_partitions_clauseContext) PARTITIONS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPARTITIONS_SYMBOL, 0)
}

func (s *Load_data_partitions_clauseContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Load_data_partitions_clauseContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Load_data_partitions_clauseContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Load_data_partitions_clauseContext) OVERWRITE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOVERWRITE_SYMBOL, 0)
}

func (s *Load_data_partitions_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Load_data_partitions_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Load_data_partitions_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterLoad_data_partitions_clause(s)
	}
}

func (s *Load_data_partitions_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitLoad_data_partitions_clause(s)
	}
}

func (s *Load_data_partitions_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitLoad_data_partitions_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Load_data_partitions_clause() (localctx ILoad_data_partitions_clauseContext) {
	localctx = NewLoad_data_partitions_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 406, GoogleSQLParserRULE_load_data_partitions_clause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3046)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOVERWRITE_SYMBOL {
		{
			p.SetState(3045)
			p.Match(GoogleSQLParserOVERWRITE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(3048)
		p.Match(GoogleSQLParserPARTITIONS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3049)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3050)
		p.expression(0)
	}
	{
		p.SetState(3051)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMaybe_dashed_path_expression_with_scopeContext is an interface to support dynamic dispatch.
type IMaybe_dashed_path_expression_with_scopeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TEMP_SYMBOL() antlr.TerminalNode
	TABLE_SYMBOL() antlr.TerminalNode
	Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext
	TEMPORARY_SYMBOL() antlr.TerminalNode

	// IsMaybe_dashed_path_expression_with_scopeContext differentiates from other interfaces.
	IsMaybe_dashed_path_expression_with_scopeContext()
}

type Maybe_dashed_path_expression_with_scopeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMaybe_dashed_path_expression_with_scopeContext() *Maybe_dashed_path_expression_with_scopeContext {
	var p = new(Maybe_dashed_path_expression_with_scopeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_maybe_dashed_path_expression_with_scope
	return p
}

func InitEmptyMaybe_dashed_path_expression_with_scopeContext(p *Maybe_dashed_path_expression_with_scopeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_maybe_dashed_path_expression_with_scope
}

func (*Maybe_dashed_path_expression_with_scopeContext) IsMaybe_dashed_path_expression_with_scopeContext() {
}

func NewMaybe_dashed_path_expression_with_scopeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Maybe_dashed_path_expression_with_scopeContext {
	var p = new(Maybe_dashed_path_expression_with_scopeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_maybe_dashed_path_expression_with_scope

	return p
}

func (s *Maybe_dashed_path_expression_with_scopeContext) GetParser() antlr.Parser { return s.parser }

func (s *Maybe_dashed_path_expression_with_scopeContext) TEMP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTEMP_SYMBOL, 0)
}

func (s *Maybe_dashed_path_expression_with_scopeContext) TABLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTABLE_SYMBOL, 0)
}

func (s *Maybe_dashed_path_expression_with_scopeContext) Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMaybe_dashed_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMaybe_dashed_path_expressionContext)
}

func (s *Maybe_dashed_path_expression_with_scopeContext) TEMPORARY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTEMPORARY_SYMBOL, 0)
}

func (s *Maybe_dashed_path_expression_with_scopeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Maybe_dashed_path_expression_with_scopeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Maybe_dashed_path_expression_with_scopeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterMaybe_dashed_path_expression_with_scope(s)
	}
}

func (s *Maybe_dashed_path_expression_with_scopeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitMaybe_dashed_path_expression_with_scope(s)
	}
}

func (s *Maybe_dashed_path_expression_with_scopeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitMaybe_dashed_path_expression_with_scope(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Maybe_dashed_path_expression_with_scope() (localctx IMaybe_dashed_path_expression_with_scopeContext) {
	localctx = NewMaybe_dashed_path_expression_with_scopeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 408, GoogleSQLParserRULE_maybe_dashed_path_expression_with_scope)
	p.SetState(3060)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 343, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3053)
			p.Match(GoogleSQLParserTEMP_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3054)
			p.Match(GoogleSQLParserTABLE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3055)
			p.Maybe_dashed_path_expression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3056)
			p.Match(GoogleSQLParserTEMPORARY_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3057)
			p.Match(GoogleSQLParserTABLE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3058)
			p.Maybe_dashed_path_expression()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3059)
			p.Maybe_dashed_path_expression()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_element_listContext is an interface to support dynamic dispatch.
type ITable_element_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	AllTable_element() []ITable_elementContext
	Table_element(i int) ITable_elementContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsTable_element_listContext differentiates from other interfaces.
	IsTable_element_listContext()
}

type Table_element_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_element_listContext() *Table_element_listContext {
	var p = new(Table_element_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_element_list
	return p
}

func InitEmptyTable_element_listContext(p *Table_element_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_element_list
}

func (*Table_element_listContext) IsTable_element_listContext() {}

func NewTable_element_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_element_listContext {
	var p = new(Table_element_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_table_element_list

	return p
}

func (s *Table_element_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_element_listContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Table_element_listContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Table_element_listContext) AllTable_element() []ITable_elementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITable_elementContext); ok {
			len++
		}
	}

	tst := make([]ITable_elementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITable_elementContext); ok {
			tst[i] = t.(ITable_elementContext)
			i++
		}
	}

	return tst
}

func (s *Table_element_listContext) Table_element(i int) ITable_elementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_elementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_elementContext)
}

func (s *Table_element_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Table_element_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Table_element_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_element_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_element_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTable_element_list(s)
	}
}

func (s *Table_element_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTable_element_list(s)
	}
}

func (s *Table_element_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTable_element_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Table_element_list() (localctx ITable_element_listContext) {
	localctx = NewTable_element_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 410, GoogleSQLParserRULE_table_element_list)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3062)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(3074)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64((_la-72)) & ^0x3f) == 0 && ((int64(1)<<(_la-72))&-106523215214079) != 0) || ((int64((_la-136)) & ^0x3f) == 0 && ((int64(1)<<(_la-136))&-1) != 0) || ((int64((_la-200)) & ^0x3f) == 0 && ((int64(1)<<(_la-200))&-36028797018963969) != 0) || ((int64((_la-264)) & ^0x3f) == 0 && ((int64(1)<<(_la-264))&536870911) != 0) || ((int64((_la-338)) & ^0x3f) == 0 && ((int64(1)<<(_la-338))&8161) != 0) {
		{
			p.SetState(3063)
			p.Table_element()
		}
		p.SetState(3068)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 344, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(3064)
					p.Match(GoogleSQLParserCOMMA_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(3065)
					p.Table_element()
				}

			}
			p.SetState(3070)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 344, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(3072)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserCOMMA_SYMBOL {
			{
				p.SetState(3071)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	}
	{
		p.SetState(3076)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_elementContext is an interface to support dynamic dispatch.
type ITable_elementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Table_column_definition() ITable_column_definitionContext
	Table_constraint_definition() ITable_constraint_definitionContext

	// IsTable_elementContext differentiates from other interfaces.
	IsTable_elementContext()
}

type Table_elementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_elementContext() *Table_elementContext {
	var p = new(Table_elementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_element
	return p
}

func InitEmptyTable_elementContext(p *Table_elementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_element
}

func (*Table_elementContext) IsTable_elementContext() {}

func NewTable_elementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_elementContext {
	var p = new(Table_elementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_table_element

	return p
}

func (s *Table_elementContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_elementContext) Table_column_definition() ITable_column_definitionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_column_definitionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_column_definitionContext)
}

func (s *Table_elementContext) Table_constraint_definition() ITable_constraint_definitionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_constraint_definitionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_constraint_definitionContext)
}

func (s *Table_elementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_elementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_elementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTable_element(s)
	}
}

func (s *Table_elementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTable_element(s)
	}
}

func (s *Table_elementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTable_element(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Table_element() (localctx ITable_elementContext) {
	localctx = NewTable_elementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 412, GoogleSQLParserRULE_table_element)
	p.SetState(3080)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 347, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3078)
			p.Table_column_definition()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3079)
			p.Table_constraint_definition()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_constraint_definitionContext is an interface to support dynamic dispatch.
type ITable_constraint_definitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Primary_key_spec() IPrimary_key_specContext
	Table_constraint_spec() ITable_constraint_specContext
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext

	// IsTable_constraint_definitionContext differentiates from other interfaces.
	IsTable_constraint_definitionContext()
}

type Table_constraint_definitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_constraint_definitionContext() *Table_constraint_definitionContext {
	var p = new(Table_constraint_definitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_constraint_definition
	return p
}

func InitEmptyTable_constraint_definitionContext(p *Table_constraint_definitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_constraint_definition
}

func (*Table_constraint_definitionContext) IsTable_constraint_definitionContext() {}

func NewTable_constraint_definitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_constraint_definitionContext {
	var p = new(Table_constraint_definitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_table_constraint_definition

	return p
}

func (s *Table_constraint_definitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_constraint_definitionContext) Primary_key_spec() IPrimary_key_specContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimary_key_specContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimary_key_specContext)
}

func (s *Table_constraint_definitionContext) Table_constraint_spec() ITable_constraint_specContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_constraint_specContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_constraint_specContext)
}

func (s *Table_constraint_definitionContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Table_constraint_definitionContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Table_constraint_definitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_constraint_definitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_constraint_definitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTable_constraint_definition(s)
	}
}

func (s *Table_constraint_definitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTable_constraint_definition(s)
	}
}

func (s *Table_constraint_definitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTable_constraint_definition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Table_constraint_definition() (localctx ITable_constraint_definitionContext) {
	localctx = NewTable_constraint_definitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 414, GoogleSQLParserRULE_table_constraint_definition)
	p.SetState(3088)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 348, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3082)
			p.Primary_key_spec()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3083)
			p.Table_constraint_spec()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3084)
			p.Identifier()
		}
		{
			p.SetState(3085)
			p.Identifier()
		}
		{
			p.SetState(3086)
			p.Table_constraint_spec()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAppend_or_overwriteContext is an interface to support dynamic dispatch.
type IAppend_or_overwriteContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	INTO_SYMBOL() antlr.TerminalNode
	OVERWRITE_SYMBOL() antlr.TerminalNode

	// IsAppend_or_overwriteContext differentiates from other interfaces.
	IsAppend_or_overwriteContext()
}

type Append_or_overwriteContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAppend_or_overwriteContext() *Append_or_overwriteContext {
	var p = new(Append_or_overwriteContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_append_or_overwrite
	return p
}

func InitEmptyAppend_or_overwriteContext(p *Append_or_overwriteContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_append_or_overwrite
}

func (*Append_or_overwriteContext) IsAppend_or_overwriteContext() {}

func NewAppend_or_overwriteContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Append_or_overwriteContext {
	var p = new(Append_or_overwriteContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_append_or_overwrite

	return p
}

func (s *Append_or_overwriteContext) GetParser() antlr.Parser { return s.parser }

func (s *Append_or_overwriteContext) INTO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINTO_SYMBOL, 0)
}

func (s *Append_or_overwriteContext) OVERWRITE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOVERWRITE_SYMBOL, 0)
}

func (s *Append_or_overwriteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Append_or_overwriteContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Append_or_overwriteContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAppend_or_overwrite(s)
	}
}

func (s *Append_or_overwriteContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAppend_or_overwrite(s)
	}
}

func (s *Append_or_overwriteContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAppend_or_overwrite(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Append_or_overwrite() (localctx IAppend_or_overwriteContext) {
	localctx = NewAppend_or_overwriteContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 416, GoogleSQLParserRULE_append_or_overwrite)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3090)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserOVERWRITE_SYMBOL || _la == GoogleSQLParserINTO_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_descriptionContext is an interface to support dynamic dispatch.
type IOpt_descriptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AS_SYMBOL() antlr.TerminalNode
	String_literal() IString_literalContext

	// IsOpt_descriptionContext differentiates from other interfaces.
	IsOpt_descriptionContext()
}

type Opt_descriptionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_descriptionContext() *Opt_descriptionContext {
	var p = new(Opt_descriptionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_description
	return p
}

func InitEmptyOpt_descriptionContext(p *Opt_descriptionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_description
}

func (*Opt_descriptionContext) IsOpt_descriptionContext() {}

func NewOpt_descriptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_descriptionContext {
	var p = new(Opt_descriptionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_description

	return p
}

func (s *Opt_descriptionContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_descriptionContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Opt_descriptionContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Opt_descriptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_descriptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_descriptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_description(s)
	}
}

func (s *Opt_descriptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_description(s)
	}
}

func (s *Opt_descriptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_description(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_description() (localctx IOpt_descriptionContext) {
	localctx = NewOpt_descriptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 418, GoogleSQLParserRULE_opt_description)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3092)
		p.Match(GoogleSQLParserAS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3093)
		p.string_literal(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_and_column_info_listContext is an interface to support dynamic dispatch.
type ITable_and_column_info_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllTable_and_column_info() []ITable_and_column_infoContext
	Table_and_column_info(i int) ITable_and_column_infoContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsTable_and_column_info_listContext differentiates from other interfaces.
	IsTable_and_column_info_listContext()
}

type Table_and_column_info_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_and_column_info_listContext() *Table_and_column_info_listContext {
	var p = new(Table_and_column_info_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_and_column_info_list
	return p
}

func InitEmptyTable_and_column_info_listContext(p *Table_and_column_info_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_and_column_info_list
}

func (*Table_and_column_info_listContext) IsTable_and_column_info_listContext() {}

func NewTable_and_column_info_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_and_column_info_listContext {
	var p = new(Table_and_column_info_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_table_and_column_info_list

	return p
}

func (s *Table_and_column_info_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_and_column_info_listContext) AllTable_and_column_info() []ITable_and_column_infoContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITable_and_column_infoContext); ok {
			len++
		}
	}

	tst := make([]ITable_and_column_infoContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITable_and_column_infoContext); ok {
			tst[i] = t.(ITable_and_column_infoContext)
			i++
		}
	}

	return tst
}

func (s *Table_and_column_info_listContext) Table_and_column_info(i int) ITable_and_column_infoContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_and_column_infoContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_and_column_infoContext)
}

func (s *Table_and_column_info_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Table_and_column_info_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Table_and_column_info_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_and_column_info_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_and_column_info_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTable_and_column_info_list(s)
	}
}

func (s *Table_and_column_info_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTable_and_column_info_list(s)
	}
}

func (s *Table_and_column_info_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTable_and_column_info_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Table_and_column_info_list() (localctx ITable_and_column_info_listContext) {
	localctx = NewTable_and_column_info_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 420, GoogleSQLParserRULE_table_and_column_info_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3095)
		p.Table_and_column_info()
	}
	p.SetState(3100)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(3096)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3097)
			p.Table_and_column_info()
		}

		p.SetState(3102)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_and_column_infoContext is an interface to support dynamic dispatch.
type ITable_and_column_infoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext
	Column_list() IColumn_listContext

	// IsTable_and_column_infoContext differentiates from other interfaces.
	IsTable_and_column_infoContext()
}

type Table_and_column_infoContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_and_column_infoContext() *Table_and_column_infoContext {
	var p = new(Table_and_column_infoContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_and_column_info
	return p
}

func InitEmptyTable_and_column_infoContext(p *Table_and_column_infoContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_and_column_info
}

func (*Table_and_column_infoContext) IsTable_and_column_infoContext() {}

func NewTable_and_column_infoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_and_column_infoContext {
	var p = new(Table_and_column_infoContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_table_and_column_info

	return p
}

func (s *Table_and_column_infoContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_and_column_infoContext) Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMaybe_dashed_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMaybe_dashed_path_expressionContext)
}

func (s *Table_and_column_infoContext) Column_list() IColumn_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_listContext)
}

func (s *Table_and_column_infoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_and_column_infoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_and_column_infoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTable_and_column_info(s)
	}
}

func (s *Table_and_column_infoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTable_and_column_info(s)
	}
}

func (s *Table_and_column_infoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTable_and_column_info(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Table_and_column_info() (localctx ITable_and_column_infoContext) {
	localctx = NewTable_and_column_infoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 422, GoogleSQLParserRULE_table_and_column_info)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3103)
		p.Maybe_dashed_path_expression()
	}
	p.SetState(3105)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserLR_BRACKET_SYMBOL {
		{
			p.SetState(3104)
			p.Column_list()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRow_access_policy_alter_action_listContext is an interface to support dynamic dispatch.
type IRow_access_policy_alter_action_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllRow_access_policy_alter_action() []IRow_access_policy_alter_actionContext
	Row_access_policy_alter_action(i int) IRow_access_policy_alter_actionContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsRow_access_policy_alter_action_listContext differentiates from other interfaces.
	IsRow_access_policy_alter_action_listContext()
}

type Row_access_policy_alter_action_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRow_access_policy_alter_action_listContext() *Row_access_policy_alter_action_listContext {
	var p = new(Row_access_policy_alter_action_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_row_access_policy_alter_action_list
	return p
}

func InitEmptyRow_access_policy_alter_action_listContext(p *Row_access_policy_alter_action_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_row_access_policy_alter_action_list
}

func (*Row_access_policy_alter_action_listContext) IsRow_access_policy_alter_action_listContext() {}

func NewRow_access_policy_alter_action_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Row_access_policy_alter_action_listContext {
	var p = new(Row_access_policy_alter_action_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_row_access_policy_alter_action_list

	return p
}

func (s *Row_access_policy_alter_action_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Row_access_policy_alter_action_listContext) AllRow_access_policy_alter_action() []IRow_access_policy_alter_actionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IRow_access_policy_alter_actionContext); ok {
			len++
		}
	}

	tst := make([]IRow_access_policy_alter_actionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IRow_access_policy_alter_actionContext); ok {
			tst[i] = t.(IRow_access_policy_alter_actionContext)
			i++
		}
	}

	return tst
}

func (s *Row_access_policy_alter_action_listContext) Row_access_policy_alter_action(i int) IRow_access_policy_alter_actionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRow_access_policy_alter_actionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRow_access_policy_alter_actionContext)
}

func (s *Row_access_policy_alter_action_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Row_access_policy_alter_action_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Row_access_policy_alter_action_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Row_access_policy_alter_action_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Row_access_policy_alter_action_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRow_access_policy_alter_action_list(s)
	}
}

func (s *Row_access_policy_alter_action_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRow_access_policy_alter_action_list(s)
	}
}

func (s *Row_access_policy_alter_action_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRow_access_policy_alter_action_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Row_access_policy_alter_action_list() (localctx IRow_access_policy_alter_action_listContext) {
	localctx = NewRow_access_policy_alter_action_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 424, GoogleSQLParserRULE_row_access_policy_alter_action_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3107)
		p.Row_access_policy_alter_action()
	}
	p.SetState(3112)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(3108)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3109)
			p.Row_access_policy_alter_action()
		}

		p.SetState(3114)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRow_access_policy_alter_actionContext is an interface to support dynamic dispatch.
type IRow_access_policy_alter_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Grant_to_clause() IGrant_to_clauseContext
	FILTER_SYMBOL() antlr.TerminalNode
	USING_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	REVOKE_SYMBOL() antlr.TerminalNode
	FROM_SYMBOL() antlr.TerminalNode
	Grantee_list() IGrantee_listContext
	ALL_SYMBOL() antlr.TerminalNode
	RENAME_SYMBOL() antlr.TerminalNode
	TO_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext

	// IsRow_access_policy_alter_actionContext differentiates from other interfaces.
	IsRow_access_policy_alter_actionContext()
}

type Row_access_policy_alter_actionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRow_access_policy_alter_actionContext() *Row_access_policy_alter_actionContext {
	var p = new(Row_access_policy_alter_actionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_row_access_policy_alter_action
	return p
}

func InitEmptyRow_access_policy_alter_actionContext(p *Row_access_policy_alter_actionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_row_access_policy_alter_action
}

func (*Row_access_policy_alter_actionContext) IsRow_access_policy_alter_actionContext() {}

func NewRow_access_policy_alter_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Row_access_policy_alter_actionContext {
	var p = new(Row_access_policy_alter_actionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_row_access_policy_alter_action

	return p
}

func (s *Row_access_policy_alter_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Row_access_policy_alter_actionContext) Grant_to_clause() IGrant_to_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGrant_to_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGrant_to_clauseContext)
}

func (s *Row_access_policy_alter_actionContext) FILTER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFILTER_SYMBOL, 0)
}

func (s *Row_access_policy_alter_actionContext) USING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUSING_SYMBOL, 0)
}

func (s *Row_access_policy_alter_actionContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Row_access_policy_alter_actionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Row_access_policy_alter_actionContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Row_access_policy_alter_actionContext) REVOKE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREVOKE_SYMBOL, 0)
}

func (s *Row_access_policy_alter_actionContext) FROM_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFROM_SYMBOL, 0)
}

func (s *Row_access_policy_alter_actionContext) Grantee_list() IGrantee_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGrantee_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGrantee_listContext)
}

func (s *Row_access_policy_alter_actionContext) ALL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserALL_SYMBOL, 0)
}

func (s *Row_access_policy_alter_actionContext) RENAME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRENAME_SYMBOL, 0)
}

func (s *Row_access_policy_alter_actionContext) TO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTO_SYMBOL, 0)
}

func (s *Row_access_policy_alter_actionContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Row_access_policy_alter_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Row_access_policy_alter_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Row_access_policy_alter_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRow_access_policy_alter_action(s)
	}
}

func (s *Row_access_policy_alter_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRow_access_policy_alter_action(s)
	}
}

func (s *Row_access_policy_alter_actionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRow_access_policy_alter_action(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Row_access_policy_alter_action() (localctx IRow_access_policy_alter_actionContext) {
	localctx = NewRow_access_policy_alter_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 426, GoogleSQLParserRULE_row_access_policy_alter_action)
	p.SetState(3134)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 352, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3115)
			p.Grant_to_clause()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3116)
			p.Match(GoogleSQLParserFILTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3117)
			p.Match(GoogleSQLParserUSING_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3118)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3119)
			p.expression(0)
		}
		{
			p.SetState(3120)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3122)
			p.Match(GoogleSQLParserREVOKE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3123)
			p.Match(GoogleSQLParserFROM_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3124)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3125)
			p.Grantee_list()
		}
		{
			p.SetState(3126)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3128)
			p.Match(GoogleSQLParserREVOKE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3129)
			p.Match(GoogleSQLParserFROM_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3130)
			p.Match(GoogleSQLParserALL_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3131)
			p.Match(GoogleSQLParserRENAME_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3132)
			p.Match(GoogleSQLParserTO_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3133)
			p.Identifier()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGrant_to_clauseContext is an interface to support dynamic dispatch.
type IGrant_to_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	GRANT_SYMBOL() antlr.TerminalNode
	TO_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Grantee_list() IGrantee_listContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsGrant_to_clauseContext differentiates from other interfaces.
	IsGrant_to_clauseContext()
}

type Grant_to_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGrant_to_clauseContext() *Grant_to_clauseContext {
	var p = new(Grant_to_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_grant_to_clause
	return p
}

func InitEmptyGrant_to_clauseContext(p *Grant_to_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_grant_to_clause
}

func (*Grant_to_clauseContext) IsGrant_to_clauseContext() {}

func NewGrant_to_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Grant_to_clauseContext {
	var p = new(Grant_to_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_grant_to_clause

	return p
}

func (s *Grant_to_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Grant_to_clauseContext) GRANT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGRANT_SYMBOL, 0)
}

func (s *Grant_to_clauseContext) TO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTO_SYMBOL, 0)
}

func (s *Grant_to_clauseContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Grant_to_clauseContext) Grantee_list() IGrantee_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGrantee_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGrantee_listContext)
}

func (s *Grant_to_clauseContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Grant_to_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Grant_to_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Grant_to_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGrant_to_clause(s)
	}
}

func (s *Grant_to_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGrant_to_clause(s)
	}
}

func (s *Grant_to_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGrant_to_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Grant_to_clause() (localctx IGrant_to_clauseContext) {
	localctx = NewGrant_to_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 428, GoogleSQLParserRULE_grant_to_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3136)
		p.Match(GoogleSQLParserGRANT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3137)
		p.Match(GoogleSQLParserTO_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3138)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3139)
		p.Grantee_list()
	}
	{
		p.SetState(3140)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGrantee_listContext is an interface to support dynamic dispatch.
type IGrantee_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllString_literal_or_parameter() []IString_literal_or_parameterContext
	String_literal_or_parameter(i int) IString_literal_or_parameterContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsGrantee_listContext differentiates from other interfaces.
	IsGrantee_listContext()
}

type Grantee_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGrantee_listContext() *Grantee_listContext {
	var p = new(Grantee_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_grantee_list
	return p
}

func InitEmptyGrantee_listContext(p *Grantee_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_grantee_list
}

func (*Grantee_listContext) IsGrantee_listContext() {}

func NewGrantee_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Grantee_listContext {
	var p = new(Grantee_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_grantee_list

	return p
}

func (s *Grantee_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Grantee_listContext) AllString_literal_or_parameter() []IString_literal_or_parameterContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IString_literal_or_parameterContext); ok {
			len++
		}
	}

	tst := make([]IString_literal_or_parameterContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IString_literal_or_parameterContext); ok {
			tst[i] = t.(IString_literal_or_parameterContext)
			i++
		}
	}

	return tst
}

func (s *Grantee_listContext) String_literal_or_parameter(i int) IString_literal_or_parameterContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literal_or_parameterContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literal_or_parameterContext)
}

func (s *Grantee_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Grantee_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Grantee_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Grantee_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Grantee_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGrantee_list(s)
	}
}

func (s *Grantee_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGrantee_list(s)
	}
}

func (s *Grantee_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGrantee_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Grantee_list() (localctx IGrantee_listContext) {
	localctx = NewGrantee_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 430, GoogleSQLParserRULE_grantee_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3142)
		p.String_literal_or_parameter()
	}
	p.SetState(3147)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(3143)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3144)
			p.String_literal_or_parameter()
		}

		p.SetState(3149)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrivilege_listContext is an interface to support dynamic dispatch.
type IPrivilege_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllPrivilege() []IPrivilegeContext
	Privilege(i int) IPrivilegeContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsPrivilege_listContext differentiates from other interfaces.
	IsPrivilege_listContext()
}

type Privilege_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrivilege_listContext() *Privilege_listContext {
	var p = new(Privilege_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_privilege_list
	return p
}

func InitEmptyPrivilege_listContext(p *Privilege_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_privilege_list
}

func (*Privilege_listContext) IsPrivilege_listContext() {}

func NewPrivilege_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Privilege_listContext {
	var p = new(Privilege_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_privilege_list

	return p
}

func (s *Privilege_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Privilege_listContext) AllPrivilege() []IPrivilegeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPrivilegeContext); ok {
			len++
		}
	}

	tst := make([]IPrivilegeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPrivilegeContext); ok {
			tst[i] = t.(IPrivilegeContext)
			i++
		}
	}

	return tst
}

func (s *Privilege_listContext) Privilege(i int) IPrivilegeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrivilegeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrivilegeContext)
}

func (s *Privilege_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Privilege_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Privilege_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Privilege_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Privilege_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPrivilege_list(s)
	}
}

func (s *Privilege_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPrivilege_list(s)
	}
}

func (s *Privilege_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPrivilege_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Privilege_list() (localctx IPrivilege_listContext) {
	localctx = NewPrivilege_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 432, GoogleSQLParserRULE_privilege_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3150)
		p.Privilege()
	}
	p.SetState(3155)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(3151)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3152)
			p.Privilege()
		}

		p.SetState(3157)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrivilegeContext is an interface to support dynamic dispatch.
type IPrivilegeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Privilege_name() IPrivilege_nameContext
	Path_expression_list_with_parens() IPath_expression_list_with_parensContext

	// IsPrivilegeContext differentiates from other interfaces.
	IsPrivilegeContext()
}

type PrivilegeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrivilegeContext() *PrivilegeContext {
	var p = new(PrivilegeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_privilege
	return p
}

func InitEmptyPrivilegeContext(p *PrivilegeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_privilege
}

func (*PrivilegeContext) IsPrivilegeContext() {}

func NewPrivilegeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrivilegeContext {
	var p = new(PrivilegeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_privilege

	return p
}

func (s *PrivilegeContext) GetParser() antlr.Parser { return s.parser }

func (s *PrivilegeContext) Privilege_name() IPrivilege_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrivilege_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrivilege_nameContext)
}

func (s *PrivilegeContext) Path_expression_list_with_parens() IPath_expression_list_with_parensContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expression_list_with_parensContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expression_list_with_parensContext)
}

func (s *PrivilegeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrivilegeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrivilegeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPrivilege(s)
	}
}

func (s *PrivilegeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPrivilege(s)
	}
}

func (s *PrivilegeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPrivilege(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Privilege() (localctx IPrivilegeContext) {
	localctx = NewPrivilegeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 434, GoogleSQLParserRULE_privilege)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3158)
		p.Privilege_name()
	}
	p.SetState(3160)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserLR_BRACKET_SYMBOL {
		{
			p.SetState(3159)
			p.Path_expression_list_with_parens()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPath_expression_list_with_parensContext is an interface to support dynamic dispatch.
type IPath_expression_list_with_parensContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Path_expression_list() IPath_expression_listContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsPath_expression_list_with_parensContext differentiates from other interfaces.
	IsPath_expression_list_with_parensContext()
}

type Path_expression_list_with_parensContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPath_expression_list_with_parensContext() *Path_expression_list_with_parensContext {
	var p = new(Path_expression_list_with_parensContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_path_expression_list_with_parens
	return p
}

func InitEmptyPath_expression_list_with_parensContext(p *Path_expression_list_with_parensContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_path_expression_list_with_parens
}

func (*Path_expression_list_with_parensContext) IsPath_expression_list_with_parensContext() {}

func NewPath_expression_list_with_parensContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Path_expression_list_with_parensContext {
	var p = new(Path_expression_list_with_parensContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_path_expression_list_with_parens

	return p
}

func (s *Path_expression_list_with_parensContext) GetParser() antlr.Parser { return s.parser }

func (s *Path_expression_list_with_parensContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Path_expression_list_with_parensContext) Path_expression_list() IPath_expression_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expression_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expression_listContext)
}

func (s *Path_expression_list_with_parensContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Path_expression_list_with_parensContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Path_expression_list_with_parensContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Path_expression_list_with_parensContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPath_expression_list_with_parens(s)
	}
}

func (s *Path_expression_list_with_parensContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPath_expression_list_with_parens(s)
	}
}

func (s *Path_expression_list_with_parensContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPath_expression_list_with_parens(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Path_expression_list_with_parens() (localctx IPath_expression_list_with_parensContext) {
	localctx = NewPath_expression_list_with_parensContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 436, GoogleSQLParserRULE_path_expression_list_with_parens)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3162)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3163)
		p.Path_expression_list()
	}
	{
		p.SetState(3164)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrivilege_nameContext is an interface to support dynamic dispatch.
type IPrivilege_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	SELECT_SYMBOL() antlr.TerminalNode

	// IsPrivilege_nameContext differentiates from other interfaces.
	IsPrivilege_nameContext()
}

type Privilege_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrivilege_nameContext() *Privilege_nameContext {
	var p = new(Privilege_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_privilege_name
	return p
}

func InitEmptyPrivilege_nameContext(p *Privilege_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_privilege_name
}

func (*Privilege_nameContext) IsPrivilege_nameContext() {}

func NewPrivilege_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Privilege_nameContext {
	var p = new(Privilege_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_privilege_name

	return p
}

func (s *Privilege_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Privilege_nameContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Privilege_nameContext) SELECT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSELECT_SYMBOL, 0)
}

func (s *Privilege_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Privilege_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Privilege_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPrivilege_name(s)
	}
}

func (s *Privilege_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPrivilege_name(s)
	}
}

func (s *Privilege_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPrivilege_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Privilege_name() (localctx IPrivilege_nameContext) {
	localctx = NewPrivilege_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 438, GoogleSQLParserRULE_privilege_name)
	p.SetState(3168)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserCONFLICT_SYMBOL, GoogleSQLParserDESTINATION_SYMBOL, GoogleSQLParserPROPERTY_SYMBOL, GoogleSQLParserGRAPH_SYMBOL, GoogleSQLParserNODE_SYMBOL, GoogleSQLParserPROPERTIES_SYMBOL, GoogleSQLParserLABEL_SYMBOL, GoogleSQLParserEDGE_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3166)
			p.Identifier()
		}

	case GoogleSQLParserSELECT_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3167)
			p.Match(GoogleSQLParserSELECT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGeneric_entity_typeContext is an interface to support dynamic dispatch.
type IGeneric_entity_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Generic_entity_type_unchecked() IGeneric_entity_type_uncheckedContext

	// IsGeneric_entity_typeContext differentiates from other interfaces.
	IsGeneric_entity_typeContext()
}

type Generic_entity_typeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGeneric_entity_typeContext() *Generic_entity_typeContext {
	var p = new(Generic_entity_typeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_generic_entity_type
	return p
}

func InitEmptyGeneric_entity_typeContext(p *Generic_entity_typeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_generic_entity_type
}

func (*Generic_entity_typeContext) IsGeneric_entity_typeContext() {}

func NewGeneric_entity_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Generic_entity_typeContext {
	var p = new(Generic_entity_typeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_generic_entity_type

	return p
}

func (s *Generic_entity_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Generic_entity_typeContext) Generic_entity_type_unchecked() IGeneric_entity_type_uncheckedContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGeneric_entity_type_uncheckedContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGeneric_entity_type_uncheckedContext)
}

func (s *Generic_entity_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Generic_entity_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Generic_entity_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGeneric_entity_type(s)
	}
}

func (s *Generic_entity_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGeneric_entity_type(s)
	}
}

func (s *Generic_entity_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGeneric_entity_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Generic_entity_type() (localctx IGeneric_entity_typeContext) {
	localctx = NewGeneric_entity_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 440, GoogleSQLParserRULE_generic_entity_type)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3170)
		p.Generic_entity_type_unchecked()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGeneric_entity_type_uncheckedContext is an interface to support dynamic dispatch.
type IGeneric_entity_type_uncheckedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode
	PROJECT_SYMBOL() antlr.TerminalNode

	// IsGeneric_entity_type_uncheckedContext differentiates from other interfaces.
	IsGeneric_entity_type_uncheckedContext()
}

type Generic_entity_type_uncheckedContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGeneric_entity_type_uncheckedContext() *Generic_entity_type_uncheckedContext {
	var p = new(Generic_entity_type_uncheckedContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_generic_entity_type_unchecked
	return p
}

func InitEmptyGeneric_entity_type_uncheckedContext(p *Generic_entity_type_uncheckedContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_generic_entity_type_unchecked
}

func (*Generic_entity_type_uncheckedContext) IsGeneric_entity_type_uncheckedContext() {}

func NewGeneric_entity_type_uncheckedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Generic_entity_type_uncheckedContext {
	var p = new(Generic_entity_type_uncheckedContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_generic_entity_type_unchecked

	return p
}

func (s *Generic_entity_type_uncheckedContext) GetParser() antlr.Parser { return s.parser }

func (s *Generic_entity_type_uncheckedContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIDENTIFIER, 0)
}

func (s *Generic_entity_type_uncheckedContext) PROJECT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPROJECT_SYMBOL, 0)
}

func (s *Generic_entity_type_uncheckedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Generic_entity_type_uncheckedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Generic_entity_type_uncheckedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGeneric_entity_type_unchecked(s)
	}
}

func (s *Generic_entity_type_uncheckedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGeneric_entity_type_unchecked(s)
	}
}

func (s *Generic_entity_type_uncheckedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGeneric_entity_type_unchecked(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Generic_entity_type_unchecked() (localctx IGeneric_entity_type_uncheckedContext) {
	localctx = NewGeneric_entity_type_uncheckedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 442, GoogleSQLParserRULE_generic_entity_type_unchecked)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3172)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserPROJECT_SYMBOL || _la == GoogleSQLParserIDENTIFIER) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISchema_object_kindContext is an interface to support dynamic dispatch.
type ISchema_object_kindContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AGGREGATE_SYMBOL() antlr.TerminalNode
	FUNCTION_SYMBOL() antlr.TerminalNode
	APPROX_SYMBOL() antlr.TerminalNode
	VIEW_SYMBOL() antlr.TerminalNode
	CONNECTION_SYMBOL() antlr.TerminalNode
	CONSTANT_SYMBOL() antlr.TerminalNode
	DATABASE_SYMBOL() antlr.TerminalNode
	EXTERNAL_SYMBOL() antlr.TerminalNode
	Table_or_table_function() ITable_or_table_functionContext
	SCHEMA_SYMBOL() antlr.TerminalNode
	INDEX_SYMBOL() antlr.TerminalNode
	MATERIALIZED_SYMBOL() antlr.TerminalNode
	MODEL_SYMBOL() antlr.TerminalNode
	PROCEDURE_SYMBOL() antlr.TerminalNode

	// IsSchema_object_kindContext differentiates from other interfaces.
	IsSchema_object_kindContext()
}

type Schema_object_kindContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySchema_object_kindContext() *Schema_object_kindContext {
	var p = new(Schema_object_kindContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_schema_object_kind
	return p
}

func InitEmptySchema_object_kindContext(p *Schema_object_kindContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_schema_object_kind
}

func (*Schema_object_kindContext) IsSchema_object_kindContext() {}

func NewSchema_object_kindContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Schema_object_kindContext {
	var p = new(Schema_object_kindContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_schema_object_kind

	return p
}

func (s *Schema_object_kindContext) GetParser() antlr.Parser { return s.parser }

func (s *Schema_object_kindContext) AGGREGATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAGGREGATE_SYMBOL, 0)
}

func (s *Schema_object_kindContext) FUNCTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFUNCTION_SYMBOL, 0)
}

func (s *Schema_object_kindContext) APPROX_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAPPROX_SYMBOL, 0)
}

func (s *Schema_object_kindContext) VIEW_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserVIEW_SYMBOL, 0)
}

func (s *Schema_object_kindContext) CONNECTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCONNECTION_SYMBOL, 0)
}

func (s *Schema_object_kindContext) CONSTANT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCONSTANT_SYMBOL, 0)
}

func (s *Schema_object_kindContext) DATABASE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDATABASE_SYMBOL, 0)
}

func (s *Schema_object_kindContext) EXTERNAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXTERNAL_SYMBOL, 0)
}

func (s *Schema_object_kindContext) Table_or_table_function() ITable_or_table_functionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_or_table_functionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_or_table_functionContext)
}

func (s *Schema_object_kindContext) SCHEMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSCHEMA_SYMBOL, 0)
}

func (s *Schema_object_kindContext) INDEX_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINDEX_SYMBOL, 0)
}

func (s *Schema_object_kindContext) MATERIALIZED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMATERIALIZED_SYMBOL, 0)
}

func (s *Schema_object_kindContext) MODEL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMODEL_SYMBOL, 0)
}

func (s *Schema_object_kindContext) PROCEDURE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPROCEDURE_SYMBOL, 0)
}

func (s *Schema_object_kindContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Schema_object_kindContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Schema_object_kindContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSchema_object_kind(s)
	}
}

func (s *Schema_object_kindContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSchema_object_kind(s)
	}
}

func (s *Schema_object_kindContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSchema_object_kind(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Schema_object_kind() (localctx ISchema_object_kindContext) {
	localctx = NewSchema_object_kindContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 444, GoogleSQLParserRULE_schema_object_kind)
	p.SetState(3193)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 357, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3174)
			p.Match(GoogleSQLParserAGGREGATE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3175)
			p.Match(GoogleSQLParserFUNCTION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3176)
			p.Match(GoogleSQLParserAPPROX_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3177)
			p.Match(GoogleSQLParserVIEW_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3178)
			p.Match(GoogleSQLParserCONNECTION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3179)
			p.Match(GoogleSQLParserCONSTANT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3180)
			p.Match(GoogleSQLParserDATABASE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3181)
			p.Match(GoogleSQLParserEXTERNAL_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3182)
			p.Table_or_table_function()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(3183)
			p.Match(GoogleSQLParserEXTERNAL_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3184)
			p.Match(GoogleSQLParserSCHEMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(3185)
			p.Match(GoogleSQLParserFUNCTION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(3186)
			p.Match(GoogleSQLParserINDEX_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(3187)
			p.Match(GoogleSQLParserMATERIALIZED_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3188)
			p.Match(GoogleSQLParserVIEW_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(3189)
			p.Match(GoogleSQLParserMODEL_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(3190)
			p.Match(GoogleSQLParserPROCEDURE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(3191)
			p.Match(GoogleSQLParserSCHEMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(3192)
			p.Match(GoogleSQLParserVIEW_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAlter_action_listContext is an interface to support dynamic dispatch.
type IAlter_action_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllAlter_action() []IAlter_actionContext
	Alter_action(i int) IAlter_actionContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsAlter_action_listContext differentiates from other interfaces.
	IsAlter_action_listContext()
}

type Alter_action_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_action_listContext() *Alter_action_listContext {
	var p = new(Alter_action_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_alter_action_list
	return p
}

func InitEmptyAlter_action_listContext(p *Alter_action_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_alter_action_list
}

func (*Alter_action_listContext) IsAlter_action_listContext() {}

func NewAlter_action_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_action_listContext {
	var p = new(Alter_action_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_alter_action_list

	return p
}

func (s *Alter_action_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_action_listContext) AllAlter_action() []IAlter_actionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAlter_actionContext); ok {
			len++
		}
	}

	tst := make([]IAlter_actionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAlter_actionContext); ok {
			tst[i] = t.(IAlter_actionContext)
			i++
		}
	}

	return tst
}

func (s *Alter_action_listContext) Alter_action(i int) IAlter_actionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_actionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_actionContext)
}

func (s *Alter_action_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Alter_action_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Alter_action_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_action_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_action_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAlter_action_list(s)
	}
}

func (s *Alter_action_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAlter_action_list(s)
	}
}

func (s *Alter_action_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAlter_action_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Alter_action_list() (localctx IAlter_action_listContext) {
	localctx = NewAlter_action_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 446, GoogleSQLParserRULE_alter_action_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3195)
		p.Alter_action()
	}
	p.SetState(3200)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(3196)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3197)
			p.Alter_action()
		}

		p.SetState(3202)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAlter_actionContext is an interface to support dynamic dispatch.
type IAlter_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SET_SYMBOL() antlr.TerminalNode
	OPTIONS_SYMBOL() antlr.TerminalNode
	Options_list() IOptions_listContext
	AS_SYMBOL() antlr.TerminalNode
	Generic_entity_body() IGeneric_entity_bodyContext
	ADD_SYMBOL() antlr.TerminalNode
	Table_constraint_spec() ITable_constraint_specContext
	Primary_key_spec() IPrimary_key_specContext
	CONSTRAINT_SYMBOL() antlr.TerminalNode
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	Primary_key_or_table_constraint_spec() IPrimary_key_or_table_constraint_specContext
	Opt_if_not_exists() IOpt_if_not_existsContext
	DROP_SYMBOL() antlr.TerminalNode
	Opt_if_exists() IOpt_if_existsContext
	PRIMARY_SYMBOL() antlr.TerminalNode
	KEY_SYMBOL() antlr.TerminalNode
	ALTER_SYMBOL() antlr.TerminalNode
	Constraint_enforcement() IConstraint_enforcementContext
	COLUMN_SYMBOL() antlr.TerminalNode
	Table_column_definition() ITable_column_definitionContext
	Column_position() IColumn_positionContext
	Fill_using_expression() IFill_using_expressionContext
	RENAME_SYMBOL() antlr.TerminalNode
	TO_SYMBOL() antlr.TerminalNode
	DATA_SYMBOL() antlr.TerminalNode
	TYPE_SYMBOL() antlr.TerminalNode
	Field_schema() IField_schemaContext
	DEFAULT_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	NOT_SYMBOL() antlr.TerminalNode
	NULL_SYMBOL() antlr.TerminalNode
	GENERATED_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext
	Collate_clause() ICollate_clauseContext
	ROW_SYMBOL() antlr.TerminalNode
	DELETION_SYMBOL() antlr.TerminalNode
	POLICY_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	REPLACE_SYMBOL() antlr.TerminalNode
	Generic_sub_entity_type() IGeneric_sub_entity_typeContext
	Alter_action() IAlter_actionContext
	Spanner_alter_column_action() ISpanner_alter_column_actionContext
	Spanner_set_on_delete_action() ISpanner_set_on_delete_actionContext

	// IsAlter_actionContext differentiates from other interfaces.
	IsAlter_actionContext()
}

type Alter_actionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_actionContext() *Alter_actionContext {
	var p = new(Alter_actionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_alter_action
	return p
}

func InitEmptyAlter_actionContext(p *Alter_actionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_alter_action
}

func (*Alter_actionContext) IsAlter_actionContext() {}

func NewAlter_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_actionContext {
	var p = new(Alter_actionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_alter_action

	return p
}

func (s *Alter_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_actionContext) SET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSET_SYMBOL, 0)
}

func (s *Alter_actionContext) OPTIONS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOPTIONS_SYMBOL, 0)
}

func (s *Alter_actionContext) Options_list() IOptions_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOptions_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOptions_listContext)
}

func (s *Alter_actionContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Alter_actionContext) Generic_entity_body() IGeneric_entity_bodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGeneric_entity_bodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGeneric_entity_bodyContext)
}

func (s *Alter_actionContext) ADD_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserADD_SYMBOL, 0)
}

func (s *Alter_actionContext) Table_constraint_spec() ITable_constraint_specContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_constraint_specContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_constraint_specContext)
}

func (s *Alter_actionContext) Primary_key_spec() IPrimary_key_specContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimary_key_specContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimary_key_specContext)
}

func (s *Alter_actionContext) CONSTRAINT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCONSTRAINT_SYMBOL, 0)
}

func (s *Alter_actionContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Alter_actionContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Alter_actionContext) Primary_key_or_table_constraint_spec() IPrimary_key_or_table_constraint_specContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimary_key_or_table_constraint_specContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimary_key_or_table_constraint_specContext)
}

func (s *Alter_actionContext) Opt_if_not_exists() IOpt_if_not_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_if_not_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_if_not_existsContext)
}

func (s *Alter_actionContext) DROP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDROP_SYMBOL, 0)
}

func (s *Alter_actionContext) Opt_if_exists() IOpt_if_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_if_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_if_existsContext)
}

func (s *Alter_actionContext) PRIMARY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPRIMARY_SYMBOL, 0)
}

func (s *Alter_actionContext) KEY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserKEY_SYMBOL, 0)
}

func (s *Alter_actionContext) ALTER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserALTER_SYMBOL, 0)
}

func (s *Alter_actionContext) Constraint_enforcement() IConstraint_enforcementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstraint_enforcementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstraint_enforcementContext)
}

func (s *Alter_actionContext) COLUMN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOLUMN_SYMBOL, 0)
}

func (s *Alter_actionContext) Table_column_definition() ITable_column_definitionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_column_definitionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_column_definitionContext)
}

func (s *Alter_actionContext) Column_position() IColumn_positionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_positionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_positionContext)
}

func (s *Alter_actionContext) Fill_using_expression() IFill_using_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFill_using_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFill_using_expressionContext)
}

func (s *Alter_actionContext) RENAME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRENAME_SYMBOL, 0)
}

func (s *Alter_actionContext) TO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTO_SYMBOL, 0)
}

func (s *Alter_actionContext) DATA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDATA_SYMBOL, 0)
}

func (s *Alter_actionContext) TYPE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTYPE_SYMBOL, 0)
}

func (s *Alter_actionContext) Field_schema() IField_schemaContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IField_schemaContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IField_schemaContext)
}

func (s *Alter_actionContext) DEFAULT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDEFAULT_SYMBOL, 0)
}

func (s *Alter_actionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Alter_actionContext) NOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNOT_SYMBOL, 0)
}

func (s *Alter_actionContext) NULL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNULL_SYMBOL, 0)
}

func (s *Alter_actionContext) GENERATED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGENERATED_SYMBOL, 0)
}

func (s *Alter_actionContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Alter_actionContext) Collate_clause() ICollate_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollate_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollate_clauseContext)
}

func (s *Alter_actionContext) ROW_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserROW_SYMBOL, 0)
}

func (s *Alter_actionContext) DELETION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDELETION_SYMBOL, 0)
}

func (s *Alter_actionContext) POLICY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPOLICY_SYMBOL, 0)
}

func (s *Alter_actionContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Alter_actionContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Alter_actionContext) REPLACE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPLACE_SYMBOL, 0)
}

func (s *Alter_actionContext) Generic_sub_entity_type() IGeneric_sub_entity_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGeneric_sub_entity_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGeneric_sub_entity_typeContext)
}

func (s *Alter_actionContext) Alter_action() IAlter_actionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_actionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_actionContext)
}

func (s *Alter_actionContext) Spanner_alter_column_action() ISpanner_alter_column_actionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISpanner_alter_column_actionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISpanner_alter_column_actionContext)
}

func (s *Alter_actionContext) Spanner_set_on_delete_action() ISpanner_set_on_delete_actionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISpanner_set_on_delete_actionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISpanner_set_on_delete_actionContext)
}

func (s *Alter_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAlter_action(s)
	}
}

func (s *Alter_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAlter_action(s)
	}
}

func (s *Alter_actionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAlter_action(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Alter_action() (localctx IAlter_actionContext) {
	localctx = NewAlter_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 448, GoogleSQLParserRULE_alter_action)
	var _la int

	p.SetState(3396)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 381, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3203)
			p.Match(GoogleSQLParserSET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3204)
			p.Match(GoogleSQLParserOPTIONS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3205)
			p.Options_list()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3206)
			p.Match(GoogleSQLParserSET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3207)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3208)
			p.Generic_entity_body()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3209)
			p.Match(GoogleSQLParserADD_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3210)
			p.Table_constraint_spec()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3211)
			p.Match(GoogleSQLParserADD_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3212)
			p.Primary_key_spec()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3213)
			p.Match(GoogleSQLParserADD_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3214)
			p.Match(GoogleSQLParserCONSTRAINT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(3216)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(3215)
				p.Opt_if_not_exists()
			}

		}
		{
			p.SetState(3218)
			p.Identifier()
		}
		{
			p.SetState(3219)
			p.Primary_key_or_table_constraint_spec()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3221)
			p.Match(GoogleSQLParserDROP_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3222)
			p.Match(GoogleSQLParserCONSTRAINT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(3224)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(3223)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(3226)
			p.Identifier()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(3227)
			p.Match(GoogleSQLParserDROP_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3228)
			p.Match(GoogleSQLParserPRIMARY_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3229)
			p.Match(GoogleSQLParserKEY_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(3231)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(3230)
				p.Opt_if_exists()
			}

		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(3233)
			p.Match(GoogleSQLParserALTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3234)
			p.Match(GoogleSQLParserCONSTRAINT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(3236)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(3235)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(3238)
			p.Identifier()
		}
		{
			p.SetState(3239)
			p.Constraint_enforcement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(3241)
			p.Match(GoogleSQLParserALTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3242)
			p.Match(GoogleSQLParserCONSTRAINT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(3244)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(3243)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(3246)
			p.Identifier()
		}
		{
			p.SetState(3247)
			p.Match(GoogleSQLParserSET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3248)
			p.Match(GoogleSQLParserOPTIONS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3249)
			p.Options_list()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(3251)
			p.Match(GoogleSQLParserADD_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3252)
			p.Match(GoogleSQLParserCOLUMN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(3254)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(3253)
				p.Opt_if_not_exists()
			}

		}
		{
			p.SetState(3256)
			p.Table_column_definition()
		}
		p.SetState(3258)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserPRECEDING_SYMBOL || _la == GoogleSQLParserFOLLOWING_SYMBOL {
			{
				p.SetState(3257)
				p.Column_position()
			}

		}
		p.SetState(3261)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserFILL_SYMBOL {
			{
				p.SetState(3260)
				p.Fill_using_expression()
			}

		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(3263)
			p.Match(GoogleSQLParserDROP_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3264)
			p.Match(GoogleSQLParserCOLUMN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(3266)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(3265)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(3268)
			p.Identifier()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(3269)
			p.Match(GoogleSQLParserRENAME_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3270)
			p.Match(GoogleSQLParserCOLUMN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(3272)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(3271)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(3274)
			p.Identifier()
		}
		{
			p.SetState(3275)
			p.Match(GoogleSQLParserTO_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3276)
			p.Identifier()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(3278)
			p.Match(GoogleSQLParserALTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3279)
			p.Match(GoogleSQLParserCOLUMN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(3281)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(3280)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(3283)
			p.Identifier()
		}
		{
			p.SetState(3284)
			p.Match(GoogleSQLParserSET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3285)
			p.Match(GoogleSQLParserDATA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3286)
			p.Match(GoogleSQLParserTYPE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3287)
			p.Field_schema()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(3289)
			p.Match(GoogleSQLParserALTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3290)
			p.Match(GoogleSQLParserCOLUMN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(3292)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(3291)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(3294)
			p.Identifier()
		}
		{
			p.SetState(3295)
			p.Match(GoogleSQLParserSET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3296)
			p.Match(GoogleSQLParserOPTIONS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3297)
			p.Options_list()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(3299)
			p.Match(GoogleSQLParserALTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3300)
			p.Match(GoogleSQLParserCOLUMN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(3302)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(3301)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(3304)
			p.Identifier()
		}
		{
			p.SetState(3305)
			p.Match(GoogleSQLParserSET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3306)
			p.Match(GoogleSQLParserDEFAULT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3307)
			p.expression(0)
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(3309)
			p.Match(GoogleSQLParserALTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3310)
			p.Match(GoogleSQLParserCOLUMN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(3312)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(3311)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(3314)
			p.Identifier()
		}
		{
			p.SetState(3315)
			p.Match(GoogleSQLParserDROP_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3316)
			p.Match(GoogleSQLParserDEFAULT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(3318)
			p.Match(GoogleSQLParserALTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3319)
			p.Match(GoogleSQLParserCOLUMN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(3321)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(3320)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(3323)
			p.Identifier()
		}
		{
			p.SetState(3324)
			p.Match(GoogleSQLParserDROP_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3325)
			p.Match(GoogleSQLParserNOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3326)
			p.Match(GoogleSQLParserNULL_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(3328)
			p.Match(GoogleSQLParserALTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3329)
			p.Match(GoogleSQLParserCOLUMN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(3331)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(3330)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(3333)
			p.Identifier()
		}
		{
			p.SetState(3334)
			p.Match(GoogleSQLParserDROP_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3335)
			p.Match(GoogleSQLParserGENERATED_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(3337)
			p.Match(GoogleSQLParserRENAME_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3338)
			p.Match(GoogleSQLParserTO_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3339)
			p.Path_expression()
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(3340)
			p.Match(GoogleSQLParserSET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3341)
			p.Match(GoogleSQLParserDEFAULT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3342)
			p.Collate_clause()
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(3343)
			p.Match(GoogleSQLParserADD_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3344)
			p.Match(GoogleSQLParserROW_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3345)
			p.Match(GoogleSQLParserDELETION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3346)
			p.Match(GoogleSQLParserPOLICY_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(3348)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(3347)
				p.Opt_if_not_exists()
			}

		}
		{
			p.SetState(3350)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3351)
			p.expression(0)
		}
		{
			p.SetState(3352)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(3354)
			p.Match(GoogleSQLParserREPLACE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3355)
			p.Match(GoogleSQLParserROW_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3356)
			p.Match(GoogleSQLParserDELETION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3357)
			p.Match(GoogleSQLParserPOLICY_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(3359)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(3358)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(3361)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3362)
			p.expression(0)
		}
		{
			p.SetState(3363)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(3365)
			p.Match(GoogleSQLParserDROP_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3366)
			p.Match(GoogleSQLParserROW_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3367)
			p.Match(GoogleSQLParserDELETION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3368)
			p.Match(GoogleSQLParserPOLICY_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(3370)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(3369)
				p.Opt_if_exists()
			}

		}

	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(3372)
			p.Match(GoogleSQLParserALTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3373)
			p.Generic_sub_entity_type()
		}
		p.SetState(3375)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(3374)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(3377)
			p.Identifier()
		}
		{
			p.SetState(3378)
			p.Alter_action()
		}

	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(3380)
			p.Match(GoogleSQLParserADD_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3381)
			p.Generic_sub_entity_type()
		}
		p.SetState(3383)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(3382)
				p.Opt_if_not_exists()
			}

		}
		{
			p.SetState(3385)
			p.Identifier()
		}

	case 26:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(3387)
			p.Match(GoogleSQLParserDROP_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3388)
			p.Generic_sub_entity_type()
		}
		p.SetState(3390)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIF_SYMBOL {
			{
				p.SetState(3389)
				p.Opt_if_exists()
			}

		}
		{
			p.SetState(3392)
			p.Identifier()
		}

	case 27:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(3394)
			p.Spanner_alter_column_action()
		}

	case 28:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(3395)
			p.Spanner_set_on_delete_action()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISpanner_set_on_delete_actionContext is an interface to support dynamic dispatch.
type ISpanner_set_on_delete_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SET_SYMBOL() antlr.TerminalNode
	ON_SYMBOL() antlr.TerminalNode
	DELETE_SYMBOL() antlr.TerminalNode
	Foreign_key_action() IForeign_key_actionContext

	// IsSpanner_set_on_delete_actionContext differentiates from other interfaces.
	IsSpanner_set_on_delete_actionContext()
}

type Spanner_set_on_delete_actionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySpanner_set_on_delete_actionContext() *Spanner_set_on_delete_actionContext {
	var p = new(Spanner_set_on_delete_actionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_spanner_set_on_delete_action
	return p
}

func InitEmptySpanner_set_on_delete_actionContext(p *Spanner_set_on_delete_actionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_spanner_set_on_delete_action
}

func (*Spanner_set_on_delete_actionContext) IsSpanner_set_on_delete_actionContext() {}

func NewSpanner_set_on_delete_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Spanner_set_on_delete_actionContext {
	var p = new(Spanner_set_on_delete_actionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_spanner_set_on_delete_action

	return p
}

func (s *Spanner_set_on_delete_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Spanner_set_on_delete_actionContext) SET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSET_SYMBOL, 0)
}

func (s *Spanner_set_on_delete_actionContext) ON_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserON_SYMBOL, 0)
}

func (s *Spanner_set_on_delete_actionContext) DELETE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDELETE_SYMBOL, 0)
}

func (s *Spanner_set_on_delete_actionContext) Foreign_key_action() IForeign_key_actionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeign_key_actionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeign_key_actionContext)
}

func (s *Spanner_set_on_delete_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Spanner_set_on_delete_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Spanner_set_on_delete_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSpanner_set_on_delete_action(s)
	}
}

func (s *Spanner_set_on_delete_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSpanner_set_on_delete_action(s)
	}
}

func (s *Spanner_set_on_delete_actionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSpanner_set_on_delete_action(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Spanner_set_on_delete_action() (localctx ISpanner_set_on_delete_actionContext) {
	localctx = NewSpanner_set_on_delete_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 450, GoogleSQLParserRULE_spanner_set_on_delete_action)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3398)
		p.Match(GoogleSQLParserSET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3399)
		p.Match(GoogleSQLParserON_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3400)
		p.Match(GoogleSQLParserDELETE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3401)
		p.Foreign_key_action()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISpanner_alter_column_actionContext is an interface to support dynamic dispatch.
type ISpanner_alter_column_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ALTER_SYMBOL() antlr.TerminalNode
	COLUMN_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext
	Column_schema_inner() IColumn_schema_innerContext
	Opt_if_exists() IOpt_if_existsContext
	Not_null_column_attribute() INot_null_column_attributeContext
	Spanner_generated_or_default() ISpanner_generated_or_defaultContext
	Opt_options_list() IOpt_options_listContext

	// IsSpanner_alter_column_actionContext differentiates from other interfaces.
	IsSpanner_alter_column_actionContext()
}

type Spanner_alter_column_actionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySpanner_alter_column_actionContext() *Spanner_alter_column_actionContext {
	var p = new(Spanner_alter_column_actionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_spanner_alter_column_action
	return p
}

func InitEmptySpanner_alter_column_actionContext(p *Spanner_alter_column_actionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_spanner_alter_column_action
}

func (*Spanner_alter_column_actionContext) IsSpanner_alter_column_actionContext() {}

func NewSpanner_alter_column_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Spanner_alter_column_actionContext {
	var p = new(Spanner_alter_column_actionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_spanner_alter_column_action

	return p
}

func (s *Spanner_alter_column_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Spanner_alter_column_actionContext) ALTER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserALTER_SYMBOL, 0)
}

func (s *Spanner_alter_column_actionContext) COLUMN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOLUMN_SYMBOL, 0)
}

func (s *Spanner_alter_column_actionContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Spanner_alter_column_actionContext) Column_schema_inner() IColumn_schema_innerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_schema_innerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_schema_innerContext)
}

func (s *Spanner_alter_column_actionContext) Opt_if_exists() IOpt_if_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_if_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_if_existsContext)
}

func (s *Spanner_alter_column_actionContext) Not_null_column_attribute() INot_null_column_attributeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INot_null_column_attributeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INot_null_column_attributeContext)
}

func (s *Spanner_alter_column_actionContext) Spanner_generated_or_default() ISpanner_generated_or_defaultContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISpanner_generated_or_defaultContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISpanner_generated_or_defaultContext)
}

func (s *Spanner_alter_column_actionContext) Opt_options_list() IOpt_options_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_options_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_options_listContext)
}

func (s *Spanner_alter_column_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Spanner_alter_column_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Spanner_alter_column_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSpanner_alter_column_action(s)
	}
}

func (s *Spanner_alter_column_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSpanner_alter_column_action(s)
	}
}

func (s *Spanner_alter_column_actionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSpanner_alter_column_action(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Spanner_alter_column_action() (localctx ISpanner_alter_column_actionContext) {
	localctx = NewSpanner_alter_column_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 452, GoogleSQLParserRULE_spanner_alter_column_action)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3403)
		p.Match(GoogleSQLParserALTER_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3404)
		p.Match(GoogleSQLParserCOLUMN_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(3406)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserIF_SYMBOL {
		{
			p.SetState(3405)
			p.Opt_if_exists()
		}

	}
	{
		p.SetState(3408)
		p.Identifier()
	}
	{
		p.SetState(3409)
		p.Column_schema_inner()
	}
	p.SetState(3411)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserNOT_SYMBOL {
		{
			p.SetState(3410)
			p.Not_null_column_attribute()
		}

	}
	p.SetState(3414)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAS_SYMBOL {
		{
			p.SetState(3413)
			p.Spanner_generated_or_default()
		}

	}
	p.SetState(3417)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOPTIONS_SYMBOL {
		{
			p.SetState(3416)
			p.Opt_options_list()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISpanner_generated_or_defaultContext is an interface to support dynamic dispatch.
type ISpanner_generated_or_defaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AS_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	STORED_SYMBOL() antlr.TerminalNode

	// IsSpanner_generated_or_defaultContext differentiates from other interfaces.
	IsSpanner_generated_or_defaultContext()
}

type Spanner_generated_or_defaultContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySpanner_generated_or_defaultContext() *Spanner_generated_or_defaultContext {
	var p = new(Spanner_generated_or_defaultContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_spanner_generated_or_default
	return p
}

func InitEmptySpanner_generated_or_defaultContext(p *Spanner_generated_or_defaultContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_spanner_generated_or_default
}

func (*Spanner_generated_or_defaultContext) IsSpanner_generated_or_defaultContext() {}

func NewSpanner_generated_or_defaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Spanner_generated_or_defaultContext {
	var p = new(Spanner_generated_or_defaultContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_spanner_generated_or_default

	return p
}

func (s *Spanner_generated_or_defaultContext) GetParser() antlr.Parser { return s.parser }

func (s *Spanner_generated_or_defaultContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Spanner_generated_or_defaultContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Spanner_generated_or_defaultContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Spanner_generated_or_defaultContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Spanner_generated_or_defaultContext) STORED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTORED_SYMBOL, 0)
}

func (s *Spanner_generated_or_defaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Spanner_generated_or_defaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Spanner_generated_or_defaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSpanner_generated_or_default(s)
	}
}

func (s *Spanner_generated_or_defaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSpanner_generated_or_default(s)
	}
}

func (s *Spanner_generated_or_defaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSpanner_generated_or_default(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Spanner_generated_or_default() (localctx ISpanner_generated_or_defaultContext) {
	localctx = NewSpanner_generated_or_defaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 454, GoogleSQLParserRULE_spanner_generated_or_default)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3419)
		p.Match(GoogleSQLParserAS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3420)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3421)
		p.expression(0)
	}
	{
		p.SetState(3422)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3423)
		p.Match(GoogleSQLParserSTORED_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGeneric_sub_entity_typeContext is an interface to support dynamic dispatch.
type IGeneric_sub_entity_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Sub_entity_type_identifier() ISub_entity_type_identifierContext

	// IsGeneric_sub_entity_typeContext differentiates from other interfaces.
	IsGeneric_sub_entity_typeContext()
}

type Generic_sub_entity_typeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGeneric_sub_entity_typeContext() *Generic_sub_entity_typeContext {
	var p = new(Generic_sub_entity_typeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_generic_sub_entity_type
	return p
}

func InitEmptyGeneric_sub_entity_typeContext(p *Generic_sub_entity_typeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_generic_sub_entity_type
}

func (*Generic_sub_entity_typeContext) IsGeneric_sub_entity_typeContext() {}

func NewGeneric_sub_entity_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Generic_sub_entity_typeContext {
	var p = new(Generic_sub_entity_typeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_generic_sub_entity_type

	return p
}

func (s *Generic_sub_entity_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Generic_sub_entity_typeContext) Sub_entity_type_identifier() ISub_entity_type_identifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISub_entity_type_identifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISub_entity_type_identifierContext)
}

func (s *Generic_sub_entity_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Generic_sub_entity_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Generic_sub_entity_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGeneric_sub_entity_type(s)
	}
}

func (s *Generic_sub_entity_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGeneric_sub_entity_type(s)
	}
}

func (s *Generic_sub_entity_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGeneric_sub_entity_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Generic_sub_entity_type() (localctx IGeneric_sub_entity_typeContext) {
	localctx = NewGeneric_sub_entity_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 456, GoogleSQLParserRULE_generic_sub_entity_type)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3425)
		p.Sub_entity_type_identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISub_entity_type_identifierContext is an interface to support dynamic dispatch.
type ISub_entity_type_identifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode
	REPLICA_SYMBOL() antlr.TerminalNode

	// IsSub_entity_type_identifierContext differentiates from other interfaces.
	IsSub_entity_type_identifierContext()
}

type Sub_entity_type_identifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySub_entity_type_identifierContext() *Sub_entity_type_identifierContext {
	var p = new(Sub_entity_type_identifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_sub_entity_type_identifier
	return p
}

func InitEmptySub_entity_type_identifierContext(p *Sub_entity_type_identifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_sub_entity_type_identifier
}

func (*Sub_entity_type_identifierContext) IsSub_entity_type_identifierContext() {}

func NewSub_entity_type_identifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sub_entity_type_identifierContext {
	var p = new(Sub_entity_type_identifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_sub_entity_type_identifier

	return p
}

func (s *Sub_entity_type_identifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Sub_entity_type_identifierContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIDENTIFIER, 0)
}

func (s *Sub_entity_type_identifierContext) REPLICA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPLICA_SYMBOL, 0)
}

func (s *Sub_entity_type_identifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sub_entity_type_identifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sub_entity_type_identifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSub_entity_type_identifier(s)
	}
}

func (s *Sub_entity_type_identifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSub_entity_type_identifier(s)
	}
}

func (s *Sub_entity_type_identifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSub_entity_type_identifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Sub_entity_type_identifier() (localctx ISub_entity_type_identifierContext) {
	localctx = NewSub_entity_type_identifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 458, GoogleSQLParserRULE_sub_entity_type_identifier)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3427)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserREPLICA_SYMBOL || _la == GoogleSQLParserIDENTIFIER) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFill_using_expressionContext is an interface to support dynamic dispatch.
type IFill_using_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FILL_SYMBOL() antlr.TerminalNode
	USING_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsFill_using_expressionContext differentiates from other interfaces.
	IsFill_using_expressionContext()
}

type Fill_using_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFill_using_expressionContext() *Fill_using_expressionContext {
	var p = new(Fill_using_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_fill_using_expression
	return p
}

func InitEmptyFill_using_expressionContext(p *Fill_using_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_fill_using_expression
}

func (*Fill_using_expressionContext) IsFill_using_expressionContext() {}

func NewFill_using_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Fill_using_expressionContext {
	var p = new(Fill_using_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_fill_using_expression

	return p
}

func (s *Fill_using_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Fill_using_expressionContext) FILL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFILL_SYMBOL, 0)
}

func (s *Fill_using_expressionContext) USING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUSING_SYMBOL, 0)
}

func (s *Fill_using_expressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Fill_using_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Fill_using_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Fill_using_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFill_using_expression(s)
	}
}

func (s *Fill_using_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFill_using_expression(s)
	}
}

func (s *Fill_using_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFill_using_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Fill_using_expression() (localctx IFill_using_expressionContext) {
	localctx = NewFill_using_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 460, GoogleSQLParserRULE_fill_using_expression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3429)
		p.Match(GoogleSQLParserFILL_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3430)
		p.Match(GoogleSQLParserUSING_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3431)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumn_positionContext is an interface to support dynamic dispatch.
type IColumn_positionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PRECEDING_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext
	FOLLOWING_SYMBOL() antlr.TerminalNode

	// IsColumn_positionContext differentiates from other interfaces.
	IsColumn_positionContext()
}

type Column_positionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_positionContext() *Column_positionContext {
	var p = new(Column_positionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_column_position
	return p
}

func InitEmptyColumn_positionContext(p *Column_positionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_column_position
}

func (*Column_positionContext) IsColumn_positionContext() {}

func NewColumn_positionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_positionContext {
	var p = new(Column_positionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_column_position

	return p
}

func (s *Column_positionContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_positionContext) PRECEDING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPRECEDING_SYMBOL, 0)
}

func (s *Column_positionContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Column_positionContext) FOLLOWING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFOLLOWING_SYMBOL, 0)
}

func (s *Column_positionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_positionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_positionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterColumn_position(s)
	}
}

func (s *Column_positionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitColumn_position(s)
	}
}

func (s *Column_positionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitColumn_position(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Column_position() (localctx IColumn_positionContext) {
	localctx = NewColumn_positionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 462, GoogleSQLParserRULE_column_position)
	p.SetState(3437)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserPRECEDING_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3433)
			p.Match(GoogleSQLParserPRECEDING_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3434)
			p.Identifier()
		}

	case GoogleSQLParserFOLLOWING_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3435)
			p.Match(GoogleSQLParserFOLLOWING_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3436)
			p.Identifier()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_column_definitionContext is an interface to support dynamic dispatch.
type ITable_column_definitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	Table_column_schema() ITable_column_schemaContext
	Column_attributes() IColumn_attributesContext
	Opt_options_list() IOpt_options_listContext

	// IsTable_column_definitionContext differentiates from other interfaces.
	IsTable_column_definitionContext()
}

type Table_column_definitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_column_definitionContext() *Table_column_definitionContext {
	var p = new(Table_column_definitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_column_definition
	return p
}

func InitEmptyTable_column_definitionContext(p *Table_column_definitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_column_definition
}

func (*Table_column_definitionContext) IsTable_column_definitionContext() {}

func NewTable_column_definitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_column_definitionContext {
	var p = new(Table_column_definitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_table_column_definition

	return p
}

func (s *Table_column_definitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_column_definitionContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Table_column_definitionContext) Table_column_schema() ITable_column_schemaContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_column_schemaContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_column_schemaContext)
}

func (s *Table_column_definitionContext) Column_attributes() IColumn_attributesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_attributesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_attributesContext)
}

func (s *Table_column_definitionContext) Opt_options_list() IOpt_options_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_options_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_options_listContext)
}

func (s *Table_column_definitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_column_definitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_column_definitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTable_column_definition(s)
	}
}

func (s *Table_column_definitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTable_column_definition(s)
	}
}

func (s *Table_column_definitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTable_column_definition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Table_column_definition() (localctx ITable_column_definitionContext) {
	localctx = NewTable_column_definitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 464, GoogleSQLParserRULE_table_column_definition)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3439)
		p.Identifier()
	}
	{
		p.SetState(3440)
		p.Table_column_schema()
	}
	p.SetState(3442)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserNOT_SYMBOL || _la == GoogleSQLParserCONSTRAINT_SYMBOL || ((int64((_la-180)) & ^0x3f) == 0 && ((int64(1)<<(_la-180))&4512395720392705) != 0) {
		{
			p.SetState(3441)
			p.Column_attributes()
		}

	}
	p.SetState(3445)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOPTIONS_SYMBOL {
		{
			p.SetState(3444)
			p.Opt_options_list()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumn_attributesContext is an interface to support dynamic dispatch.
type IColumn_attributesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllColumn_attribute() []IColumn_attributeContext
	Column_attribute(i int) IColumn_attributeContext
	Constraint_enforcement() IConstraint_enforcementContext

	// IsColumn_attributesContext differentiates from other interfaces.
	IsColumn_attributesContext()
}

type Column_attributesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_attributesContext() *Column_attributesContext {
	var p = new(Column_attributesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_column_attributes
	return p
}

func InitEmptyColumn_attributesContext(p *Column_attributesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_column_attributes
}

func (*Column_attributesContext) IsColumn_attributesContext() {}

func NewColumn_attributesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_attributesContext {
	var p = new(Column_attributesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_column_attributes

	return p
}

func (s *Column_attributesContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_attributesContext) AllColumn_attribute() []IColumn_attributeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_attributeContext); ok {
			len++
		}
	}

	tst := make([]IColumn_attributeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_attributeContext); ok {
			tst[i] = t.(IColumn_attributeContext)
			i++
		}
	}

	return tst
}

func (s *Column_attributesContext) Column_attribute(i int) IColumn_attributeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_attributeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_attributeContext)
}

func (s *Column_attributesContext) Constraint_enforcement() IConstraint_enforcementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstraint_enforcementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstraint_enforcementContext)
}

func (s *Column_attributesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_attributesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_attributesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterColumn_attributes(s)
	}
}

func (s *Column_attributesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitColumn_attributes(s)
	}
}

func (s *Column_attributesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitColumn_attributes(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Column_attributes() (localctx IColumn_attributesContext) {
	localctx = NewColumn_attributesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 466, GoogleSQLParserRULE_column_attributes)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3448)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(3447)
				p.Column_attribute()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(3450)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 389, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(3453)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserNOT_SYMBOL || _la == GoogleSQLParserENFORCED_SYMBOL {
		{
			p.SetState(3452)
			p.Constraint_enforcement()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumn_attributeContext is an interface to support dynamic dispatch.
type IColumn_attributeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Primary_key_column_attribute() IPrimary_key_column_attributeContext
	Foreign_key_column_attribute() IForeign_key_column_attributeContext
	Hidden_column_attribute() IHidden_column_attributeContext
	Not_null_column_attribute() INot_null_column_attributeContext

	// IsColumn_attributeContext differentiates from other interfaces.
	IsColumn_attributeContext()
}

type Column_attributeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_attributeContext() *Column_attributeContext {
	var p = new(Column_attributeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_column_attribute
	return p
}

func InitEmptyColumn_attributeContext(p *Column_attributeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_column_attribute
}

func (*Column_attributeContext) IsColumn_attributeContext() {}

func NewColumn_attributeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_attributeContext {
	var p = new(Column_attributeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_column_attribute

	return p
}

func (s *Column_attributeContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_attributeContext) Primary_key_column_attribute() IPrimary_key_column_attributeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimary_key_column_attributeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimary_key_column_attributeContext)
}

func (s *Column_attributeContext) Foreign_key_column_attribute() IForeign_key_column_attributeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeign_key_column_attributeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeign_key_column_attributeContext)
}

func (s *Column_attributeContext) Hidden_column_attribute() IHidden_column_attributeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHidden_column_attributeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHidden_column_attributeContext)
}

func (s *Column_attributeContext) Not_null_column_attribute() INot_null_column_attributeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INot_null_column_attributeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INot_null_column_attributeContext)
}

func (s *Column_attributeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_attributeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_attributeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterColumn_attribute(s)
	}
}

func (s *Column_attributeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitColumn_attribute(s)
	}
}

func (s *Column_attributeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitColumn_attribute(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Column_attribute() (localctx IColumn_attributeContext) {
	localctx = NewColumn_attributeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 468, GoogleSQLParserRULE_column_attribute)
	p.SetState(3459)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserPRIMARY_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3455)
			p.Primary_key_column_attribute()
		}

	case GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3456)
			p.Foreign_key_column_attribute()
		}

	case GoogleSQLParserHIDDEN_SYMBOL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3457)
			p.Hidden_column_attribute()
		}

	case GoogleSQLParserNOT_SYMBOL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3458)
			p.Not_null_column_attribute()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrimary_key_column_attributeContext is an interface to support dynamic dispatch.
type IPrimary_key_column_attributeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PRIMARY_SYMBOL() antlr.TerminalNode
	KEY_SYMBOL() antlr.TerminalNode

	// IsPrimary_key_column_attributeContext differentiates from other interfaces.
	IsPrimary_key_column_attributeContext()
}

type Primary_key_column_attributeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimary_key_column_attributeContext() *Primary_key_column_attributeContext {
	var p = new(Primary_key_column_attributeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_primary_key_column_attribute
	return p
}

func InitEmptyPrimary_key_column_attributeContext(p *Primary_key_column_attributeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_primary_key_column_attribute
}

func (*Primary_key_column_attributeContext) IsPrimary_key_column_attributeContext() {}

func NewPrimary_key_column_attributeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Primary_key_column_attributeContext {
	var p = new(Primary_key_column_attributeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_primary_key_column_attribute

	return p
}

func (s *Primary_key_column_attributeContext) GetParser() antlr.Parser { return s.parser }

func (s *Primary_key_column_attributeContext) PRIMARY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPRIMARY_SYMBOL, 0)
}

func (s *Primary_key_column_attributeContext) KEY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserKEY_SYMBOL, 0)
}

func (s *Primary_key_column_attributeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Primary_key_column_attributeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Primary_key_column_attributeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPrimary_key_column_attribute(s)
	}
}

func (s *Primary_key_column_attributeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPrimary_key_column_attribute(s)
	}
}

func (s *Primary_key_column_attributeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPrimary_key_column_attribute(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Primary_key_column_attribute() (localctx IPrimary_key_column_attributeContext) {
	localctx = NewPrimary_key_column_attributeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 470, GoogleSQLParserRULE_primary_key_column_attribute)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3461)
		p.Match(GoogleSQLParserPRIMARY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3462)
		p.Match(GoogleSQLParserKEY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IForeign_key_column_attributeContext is an interface to support dynamic dispatch.
type IForeign_key_column_attributeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Foreign_key_reference() IForeign_key_referenceContext
	Opt_constraint_identity() IOpt_constraint_identityContext

	// IsForeign_key_column_attributeContext differentiates from other interfaces.
	IsForeign_key_column_attributeContext()
}

type Foreign_key_column_attributeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForeign_key_column_attributeContext() *Foreign_key_column_attributeContext {
	var p = new(Foreign_key_column_attributeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_column_attribute
	return p
}

func InitEmptyForeign_key_column_attributeContext(p *Foreign_key_column_attributeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_column_attribute
}

func (*Foreign_key_column_attributeContext) IsForeign_key_column_attributeContext() {}

func NewForeign_key_column_attributeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Foreign_key_column_attributeContext {
	var p = new(Foreign_key_column_attributeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_column_attribute

	return p
}

func (s *Foreign_key_column_attributeContext) GetParser() antlr.Parser { return s.parser }

func (s *Foreign_key_column_attributeContext) Foreign_key_reference() IForeign_key_referenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeign_key_referenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeign_key_referenceContext)
}

func (s *Foreign_key_column_attributeContext) Opt_constraint_identity() IOpt_constraint_identityContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_constraint_identityContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_constraint_identityContext)
}

func (s *Foreign_key_column_attributeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Foreign_key_column_attributeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Foreign_key_column_attributeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterForeign_key_column_attribute(s)
	}
}

func (s *Foreign_key_column_attributeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitForeign_key_column_attribute(s)
	}
}

func (s *Foreign_key_column_attributeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitForeign_key_column_attribute(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Foreign_key_column_attribute() (localctx IForeign_key_column_attributeContext) {
	localctx = NewForeign_key_column_attributeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 472, GoogleSQLParserRULE_foreign_key_column_attribute)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3465)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserCONSTRAINT_SYMBOL {
		{
			p.SetState(3464)
			p.Opt_constraint_identity()
		}

	}
	{
		p.SetState(3467)
		p.Foreign_key_reference()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IHidden_column_attributeContext is an interface to support dynamic dispatch.
type IHidden_column_attributeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	HIDDEN_SYMBOL() antlr.TerminalNode

	// IsHidden_column_attributeContext differentiates from other interfaces.
	IsHidden_column_attributeContext()
}

type Hidden_column_attributeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHidden_column_attributeContext() *Hidden_column_attributeContext {
	var p = new(Hidden_column_attributeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_hidden_column_attribute
	return p
}

func InitEmptyHidden_column_attributeContext(p *Hidden_column_attributeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_hidden_column_attribute
}

func (*Hidden_column_attributeContext) IsHidden_column_attributeContext() {}

func NewHidden_column_attributeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Hidden_column_attributeContext {
	var p = new(Hidden_column_attributeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_hidden_column_attribute

	return p
}

func (s *Hidden_column_attributeContext) GetParser() antlr.Parser { return s.parser }

func (s *Hidden_column_attributeContext) HIDDEN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserHIDDEN_SYMBOL, 0)
}

func (s *Hidden_column_attributeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Hidden_column_attributeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Hidden_column_attributeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterHidden_column_attribute(s)
	}
}

func (s *Hidden_column_attributeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitHidden_column_attribute(s)
	}
}

func (s *Hidden_column_attributeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitHidden_column_attribute(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Hidden_column_attribute() (localctx IHidden_column_attributeContext) {
	localctx = NewHidden_column_attributeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 474, GoogleSQLParserRULE_hidden_column_attribute)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3469)
		p.Match(GoogleSQLParserHIDDEN_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_constraint_identityContext is an interface to support dynamic dispatch.
type IOpt_constraint_identityContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CONSTRAINT_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext

	// IsOpt_constraint_identityContext differentiates from other interfaces.
	IsOpt_constraint_identityContext()
}

type Opt_constraint_identityContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_constraint_identityContext() *Opt_constraint_identityContext {
	var p = new(Opt_constraint_identityContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_constraint_identity
	return p
}

func InitEmptyOpt_constraint_identityContext(p *Opt_constraint_identityContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_constraint_identity
}

func (*Opt_constraint_identityContext) IsOpt_constraint_identityContext() {}

func NewOpt_constraint_identityContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_constraint_identityContext {
	var p = new(Opt_constraint_identityContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_constraint_identity

	return p
}

func (s *Opt_constraint_identityContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_constraint_identityContext) CONSTRAINT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCONSTRAINT_SYMBOL, 0)
}

func (s *Opt_constraint_identityContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Opt_constraint_identityContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_constraint_identityContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_constraint_identityContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_constraint_identity(s)
	}
}

func (s *Opt_constraint_identityContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_constraint_identity(s)
	}
}

func (s *Opt_constraint_identityContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_constraint_identity(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_constraint_identity() (localctx IOpt_constraint_identityContext) {
	localctx = NewOpt_constraint_identityContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 476, GoogleSQLParserRULE_opt_constraint_identity)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3471)
		p.Match(GoogleSQLParserCONSTRAINT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3472)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_column_schemaContext is an interface to support dynamic dispatch.
type ITable_column_schemaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Column_schema_inner() IColumn_schema_innerContext
	Collate_clause() ICollate_clauseContext
	Opt_column_info() IOpt_column_infoContext
	Generated_column_info() IGenerated_column_infoContext

	// IsTable_column_schemaContext differentiates from other interfaces.
	IsTable_column_schemaContext()
}

type Table_column_schemaContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_column_schemaContext() *Table_column_schemaContext {
	var p = new(Table_column_schemaContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_column_schema
	return p
}

func InitEmptyTable_column_schemaContext(p *Table_column_schemaContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_column_schema
}

func (*Table_column_schemaContext) IsTable_column_schemaContext() {}

func NewTable_column_schemaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_column_schemaContext {
	var p = new(Table_column_schemaContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_table_column_schema

	return p
}

func (s *Table_column_schemaContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_column_schemaContext) Column_schema_inner() IColumn_schema_innerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_schema_innerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_schema_innerContext)
}

func (s *Table_column_schemaContext) Collate_clause() ICollate_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollate_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollate_clauseContext)
}

func (s *Table_column_schemaContext) Opt_column_info() IOpt_column_infoContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_column_infoContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_column_infoContext)
}

func (s *Table_column_schemaContext) Generated_column_info() IGenerated_column_infoContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenerated_column_infoContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenerated_column_infoContext)
}

func (s *Table_column_schemaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_column_schemaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_column_schemaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTable_column_schema(s)
	}
}

func (s *Table_column_schemaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTable_column_schema(s)
	}
}

func (s *Table_column_schemaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTable_column_schema(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Table_column_schema() (localctx ITable_column_schemaContext) {
	localctx = NewTable_column_schemaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 478, GoogleSQLParserRULE_table_column_schema)
	var _la int

	p.SetState(3482)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 395, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3474)
			p.Column_schema_inner()
		}
		p.SetState(3476)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserCOLLATE_SYMBOL {
			{
				p.SetState(3475)
				p.Collate_clause()
			}

		}
		p.SetState(3479)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAS_SYMBOL || _la == GoogleSQLParserGENERATED_SYMBOL || _la == GoogleSQLParserDEFAULT_SYMBOL {
			{
				p.SetState(3478)
				p.Opt_column_info()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3481)
			p.Generated_column_info()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_column_infoContext is an interface to support dynamic dispatch.
type IOpt_column_infoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Generated_column_info() IGenerated_column_infoContext
	Invalid_default_column() IInvalid_default_columnContext
	Default_column_info() IDefault_column_infoContext
	Invalid_generated_column() IInvalid_generated_columnContext

	// IsOpt_column_infoContext differentiates from other interfaces.
	IsOpt_column_infoContext()
}

type Opt_column_infoContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_column_infoContext() *Opt_column_infoContext {
	var p = new(Opt_column_infoContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_column_info
	return p
}

func InitEmptyOpt_column_infoContext(p *Opt_column_infoContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_column_info
}

func (*Opt_column_infoContext) IsOpt_column_infoContext() {}

func NewOpt_column_infoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_column_infoContext {
	var p = new(Opt_column_infoContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_column_info

	return p
}

func (s *Opt_column_infoContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_column_infoContext) Generated_column_info() IGenerated_column_infoContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenerated_column_infoContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenerated_column_infoContext)
}

func (s *Opt_column_infoContext) Invalid_default_column() IInvalid_default_columnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInvalid_default_columnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInvalid_default_columnContext)
}

func (s *Opt_column_infoContext) Default_column_info() IDefault_column_infoContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefault_column_infoContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefault_column_infoContext)
}

func (s *Opt_column_infoContext) Invalid_generated_column() IInvalid_generated_columnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInvalid_generated_columnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInvalid_generated_columnContext)
}

func (s *Opt_column_infoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_column_infoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_column_infoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_column_info(s)
	}
}

func (s *Opt_column_infoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_column_info(s)
	}
}

func (s *Opt_column_infoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_column_info(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_column_info() (localctx IOpt_column_infoContext) {
	localctx = NewOpt_column_infoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 480, GoogleSQLParserRULE_opt_column_info)
	var _la int

	p.SetState(3496)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserAS_SYMBOL, GoogleSQLParserGENERATED_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3484)
			p.Generated_column_info()
		}
		p.SetState(3486)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserDEFAULT_SYMBOL {
			{
				p.SetState(3485)
				p.Invalid_default_column()
			}

		}

		if localctx.Invalid_default_column() != nil {
			p.NotifyErrorListeners("Syntax error: \"DEFAULT\" and \"GENERATED ALWAYS AS\" clauses must not be both provided for the column", nil, nil)
		}

	case GoogleSQLParserDEFAULT_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3490)
			p.Default_column_info()
		}
		p.SetState(3492)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAS_SYMBOL || _la == GoogleSQLParserGENERATED_SYMBOL {
			{
				p.SetState(3491)
				p.Invalid_generated_column()
			}

		}

		if localctx.Invalid_generated_column() != nil {
			p.NotifyErrorListeners("Syntax error: \"DEFAULT\" and \"GENERATED ALWAYS AS\" clauses must not be both provided for the column", nil, nil)
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInvalid_generated_columnContext is an interface to support dynamic dispatch.
type IInvalid_generated_columnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Generated_column_info() IGenerated_column_infoContext

	// IsInvalid_generated_columnContext differentiates from other interfaces.
	IsInvalid_generated_columnContext()
}

type Invalid_generated_columnContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInvalid_generated_columnContext() *Invalid_generated_columnContext {
	var p = new(Invalid_generated_columnContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_invalid_generated_column
	return p
}

func InitEmptyInvalid_generated_columnContext(p *Invalid_generated_columnContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_invalid_generated_column
}

func (*Invalid_generated_columnContext) IsInvalid_generated_columnContext() {}

func NewInvalid_generated_columnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Invalid_generated_columnContext {
	var p = new(Invalid_generated_columnContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_invalid_generated_column

	return p
}

func (s *Invalid_generated_columnContext) GetParser() antlr.Parser { return s.parser }

func (s *Invalid_generated_columnContext) Generated_column_info() IGenerated_column_infoContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenerated_column_infoContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenerated_column_infoContext)
}

func (s *Invalid_generated_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Invalid_generated_columnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Invalid_generated_columnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterInvalid_generated_column(s)
	}
}

func (s *Invalid_generated_columnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitInvalid_generated_column(s)
	}
}

func (s *Invalid_generated_columnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitInvalid_generated_column(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Invalid_generated_column() (localctx IInvalid_generated_columnContext) {
	localctx = NewInvalid_generated_columnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 482, GoogleSQLParserRULE_invalid_generated_column)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3498)
		p.Generated_column_info()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInvalid_default_columnContext is an interface to support dynamic dispatch.
type IInvalid_default_columnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Default_column_info() IDefault_column_infoContext

	// IsInvalid_default_columnContext differentiates from other interfaces.
	IsInvalid_default_columnContext()
}

type Invalid_default_columnContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInvalid_default_columnContext() *Invalid_default_columnContext {
	var p = new(Invalid_default_columnContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_invalid_default_column
	return p
}

func InitEmptyInvalid_default_columnContext(p *Invalid_default_columnContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_invalid_default_column
}

func (*Invalid_default_columnContext) IsInvalid_default_columnContext() {}

func NewInvalid_default_columnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Invalid_default_columnContext {
	var p = new(Invalid_default_columnContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_invalid_default_column

	return p
}

func (s *Invalid_default_columnContext) GetParser() antlr.Parser { return s.parser }

func (s *Invalid_default_columnContext) Default_column_info() IDefault_column_infoContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefault_column_infoContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefault_column_infoContext)
}

func (s *Invalid_default_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Invalid_default_columnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Invalid_default_columnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterInvalid_default_column(s)
	}
}

func (s *Invalid_default_columnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitInvalid_default_column(s)
	}
}

func (s *Invalid_default_columnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitInvalid_default_column(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Invalid_default_column() (localctx IInvalid_default_columnContext) {
	localctx = NewInvalid_default_columnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 484, GoogleSQLParserRULE_invalid_default_column)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3500)
		p.Default_column_info()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDefault_column_infoContext is an interface to support dynamic dispatch.
type IDefault_column_infoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DEFAULT_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsDefault_column_infoContext differentiates from other interfaces.
	IsDefault_column_infoContext()
}

type Default_column_infoContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefault_column_infoContext() *Default_column_infoContext {
	var p = new(Default_column_infoContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_default_column_info
	return p
}

func InitEmptyDefault_column_infoContext(p *Default_column_infoContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_default_column_info
}

func (*Default_column_infoContext) IsDefault_column_infoContext() {}

func NewDefault_column_infoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Default_column_infoContext {
	var p = new(Default_column_infoContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_default_column_info

	return p
}

func (s *Default_column_infoContext) GetParser() antlr.Parser { return s.parser }

func (s *Default_column_infoContext) DEFAULT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDEFAULT_SYMBOL, 0)
}

func (s *Default_column_infoContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Default_column_infoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Default_column_infoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Default_column_infoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterDefault_column_info(s)
	}
}

func (s *Default_column_infoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitDefault_column_info(s)
	}
}

func (s *Default_column_infoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitDefault_column_info(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Default_column_info() (localctx IDefault_column_infoContext) {
	localctx = NewDefault_column_infoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 486, GoogleSQLParserRULE_default_column_info)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3502)
		p.Match(GoogleSQLParserDEFAULT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3503)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGenerated_column_infoContext is an interface to support dynamic dispatch.
type IGenerated_column_infoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Generated_mode() IGenerated_modeContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Stored_mode() IStored_modeContext
	Identity_column_info() IIdentity_column_infoContext

	// IsGenerated_column_infoContext differentiates from other interfaces.
	IsGenerated_column_infoContext()
}

type Generated_column_infoContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenerated_column_infoContext() *Generated_column_infoContext {
	var p = new(Generated_column_infoContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_generated_column_info
	return p
}

func InitEmptyGenerated_column_infoContext(p *Generated_column_infoContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_generated_column_info
}

func (*Generated_column_infoContext) IsGenerated_column_infoContext() {}

func NewGenerated_column_infoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Generated_column_infoContext {
	var p = new(Generated_column_infoContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_generated_column_info

	return p
}

func (s *Generated_column_infoContext) GetParser() antlr.Parser { return s.parser }

func (s *Generated_column_infoContext) Generated_mode() IGenerated_modeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenerated_modeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenerated_modeContext)
}

func (s *Generated_column_infoContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Generated_column_infoContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Generated_column_infoContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Generated_column_infoContext) Stored_mode() IStored_modeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStored_modeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStored_modeContext)
}

func (s *Generated_column_infoContext) Identity_column_info() IIdentity_column_infoContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentity_column_infoContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentity_column_infoContext)
}

func (s *Generated_column_infoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Generated_column_infoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Generated_column_infoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGenerated_column_info(s)
	}
}

func (s *Generated_column_infoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGenerated_column_info(s)
	}
}

func (s *Generated_column_infoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGenerated_column_info(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Generated_column_info() (localctx IGenerated_column_infoContext) {
	localctx = NewGenerated_column_infoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 488, GoogleSQLParserRULE_generated_column_info)
	var _la int

	p.SetState(3515)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 400, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3505)
			p.Generated_mode()
		}
		{
			p.SetState(3506)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3507)
			p.expression(0)
		}
		{
			p.SetState(3508)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(3510)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserSTORED_SYMBOL {
			{
				p.SetState(3509)
				p.Stored_mode()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3512)
			p.Generated_mode()
		}
		{
			p.SetState(3513)
			p.Identity_column_info()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIdentity_column_infoContext is an interface to support dynamic dispatch.
type IIdentity_column_infoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTITY_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Opt_start_with() IOpt_start_withContext
	Opt_increment_by() IOpt_increment_byContext
	Opt_maxvalue() IOpt_maxvalueContext
	Opt_minvalue() IOpt_minvalueContext
	Opt_cycle() IOpt_cycleContext

	// IsIdentity_column_infoContext differentiates from other interfaces.
	IsIdentity_column_infoContext()
}

type Identity_column_infoContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentity_column_infoContext() *Identity_column_infoContext {
	var p = new(Identity_column_infoContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_identity_column_info
	return p
}

func InitEmptyIdentity_column_infoContext(p *Identity_column_infoContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_identity_column_info
}

func (*Identity_column_infoContext) IsIdentity_column_infoContext() {}

func NewIdentity_column_infoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Identity_column_infoContext {
	var p = new(Identity_column_infoContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_identity_column_info

	return p
}

func (s *Identity_column_infoContext) GetParser() antlr.Parser { return s.parser }

func (s *Identity_column_infoContext) IDENTITY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIDENTITY_SYMBOL, 0)
}

func (s *Identity_column_infoContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Identity_column_infoContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Identity_column_infoContext) Opt_start_with() IOpt_start_withContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_start_withContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_start_withContext)
}

func (s *Identity_column_infoContext) Opt_increment_by() IOpt_increment_byContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_increment_byContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_increment_byContext)
}

func (s *Identity_column_infoContext) Opt_maxvalue() IOpt_maxvalueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_maxvalueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_maxvalueContext)
}

func (s *Identity_column_infoContext) Opt_minvalue() IOpt_minvalueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_minvalueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_minvalueContext)
}

func (s *Identity_column_infoContext) Opt_cycle() IOpt_cycleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_cycleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_cycleContext)
}

func (s *Identity_column_infoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Identity_column_infoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Identity_column_infoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterIdentity_column_info(s)
	}
}

func (s *Identity_column_infoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitIdentity_column_info(s)
	}
}

func (s *Identity_column_infoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitIdentity_column_info(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Identity_column_info() (localctx IIdentity_column_infoContext) {
	localctx = NewIdentity_column_infoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 490, GoogleSQLParserRULE_identity_column_info)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3517)
		p.Match(GoogleSQLParserIDENTITY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3518)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(3520)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserSTART_SYMBOL {
		{
			p.SetState(3519)
			p.Opt_start_with()
		}

	}
	p.SetState(3523)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserINCREMENT_SYMBOL {
		{
			p.SetState(3522)
			p.Opt_increment_by()
		}

	}
	p.SetState(3526)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserMAXVALUE_SYMBOL {
		{
			p.SetState(3525)
			p.Opt_maxvalue()
		}

	}
	p.SetState(3529)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserMINVALUE_SYMBOL {
		{
			p.SetState(3528)
			p.Opt_minvalue()
		}

	}
	p.SetState(3532)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserCYCLE_SYMBOL || _la == GoogleSQLParserNO_SYMBOL {
		{
			p.SetState(3531)
			p.Opt_cycle()
		}

	}
	{
		p.SetState(3534)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_start_withContext is an interface to support dynamic dispatch.
type IOpt_start_withContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	START_SYMBOL() antlr.TerminalNode
	WITH_SYMBOL() antlr.TerminalNode
	Signed_numeric_literal() ISigned_numeric_literalContext

	// IsOpt_start_withContext differentiates from other interfaces.
	IsOpt_start_withContext()
}

type Opt_start_withContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_start_withContext() *Opt_start_withContext {
	var p = new(Opt_start_withContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_start_with
	return p
}

func InitEmptyOpt_start_withContext(p *Opt_start_withContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_start_with
}

func (*Opt_start_withContext) IsOpt_start_withContext() {}

func NewOpt_start_withContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_start_withContext {
	var p = new(Opt_start_withContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_start_with

	return p
}

func (s *Opt_start_withContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_start_withContext) START_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTART_SYMBOL, 0)
}

func (s *Opt_start_withContext) WITH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWITH_SYMBOL, 0)
}

func (s *Opt_start_withContext) Signed_numeric_literal() ISigned_numeric_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISigned_numeric_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISigned_numeric_literalContext)
}

func (s *Opt_start_withContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_start_withContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_start_withContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_start_with(s)
	}
}

func (s *Opt_start_withContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_start_with(s)
	}
}

func (s *Opt_start_withContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_start_with(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_start_with() (localctx IOpt_start_withContext) {
	localctx = NewOpt_start_withContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 492, GoogleSQLParserRULE_opt_start_with)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3536)
		p.Match(GoogleSQLParserSTART_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3537)
		p.Match(GoogleSQLParserWITH_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3538)
		p.Signed_numeric_literal()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_increment_byContext is an interface to support dynamic dispatch.
type IOpt_increment_byContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	INCREMENT_SYMBOL() antlr.TerminalNode
	BY_SYMBOL() antlr.TerminalNode
	Signed_numeric_literal() ISigned_numeric_literalContext

	// IsOpt_increment_byContext differentiates from other interfaces.
	IsOpt_increment_byContext()
}

type Opt_increment_byContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_increment_byContext() *Opt_increment_byContext {
	var p = new(Opt_increment_byContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_increment_by
	return p
}

func InitEmptyOpt_increment_byContext(p *Opt_increment_byContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_increment_by
}

func (*Opt_increment_byContext) IsOpt_increment_byContext() {}

func NewOpt_increment_byContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_increment_byContext {
	var p = new(Opt_increment_byContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_increment_by

	return p
}

func (s *Opt_increment_byContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_increment_byContext) INCREMENT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINCREMENT_SYMBOL, 0)
}

func (s *Opt_increment_byContext) BY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBY_SYMBOL, 0)
}

func (s *Opt_increment_byContext) Signed_numeric_literal() ISigned_numeric_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISigned_numeric_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISigned_numeric_literalContext)
}

func (s *Opt_increment_byContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_increment_byContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_increment_byContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_increment_by(s)
	}
}

func (s *Opt_increment_byContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_increment_by(s)
	}
}

func (s *Opt_increment_byContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_increment_by(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_increment_by() (localctx IOpt_increment_byContext) {
	localctx = NewOpt_increment_byContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 494, GoogleSQLParserRULE_opt_increment_by)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3540)
		p.Match(GoogleSQLParserINCREMENT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3541)
		p.Match(GoogleSQLParserBY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3542)
		p.Signed_numeric_literal()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_maxvalueContext is an interface to support dynamic dispatch.
type IOpt_maxvalueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MAXVALUE_SYMBOL() antlr.TerminalNode
	Signed_numeric_literal() ISigned_numeric_literalContext

	// IsOpt_maxvalueContext differentiates from other interfaces.
	IsOpt_maxvalueContext()
}

type Opt_maxvalueContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_maxvalueContext() *Opt_maxvalueContext {
	var p = new(Opt_maxvalueContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_maxvalue
	return p
}

func InitEmptyOpt_maxvalueContext(p *Opt_maxvalueContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_maxvalue
}

func (*Opt_maxvalueContext) IsOpt_maxvalueContext() {}

func NewOpt_maxvalueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_maxvalueContext {
	var p = new(Opt_maxvalueContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_maxvalue

	return p
}

func (s *Opt_maxvalueContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_maxvalueContext) MAXVALUE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMAXVALUE_SYMBOL, 0)
}

func (s *Opt_maxvalueContext) Signed_numeric_literal() ISigned_numeric_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISigned_numeric_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISigned_numeric_literalContext)
}

func (s *Opt_maxvalueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_maxvalueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_maxvalueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_maxvalue(s)
	}
}

func (s *Opt_maxvalueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_maxvalue(s)
	}
}

func (s *Opt_maxvalueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_maxvalue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_maxvalue() (localctx IOpt_maxvalueContext) {
	localctx = NewOpt_maxvalueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 496, GoogleSQLParserRULE_opt_maxvalue)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3544)
		p.Match(GoogleSQLParserMAXVALUE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3545)
		p.Signed_numeric_literal()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_minvalueContext is an interface to support dynamic dispatch.
type IOpt_minvalueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MINVALUE_SYMBOL() antlr.TerminalNode
	Signed_numeric_literal() ISigned_numeric_literalContext

	// IsOpt_minvalueContext differentiates from other interfaces.
	IsOpt_minvalueContext()
}

type Opt_minvalueContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_minvalueContext() *Opt_minvalueContext {
	var p = new(Opt_minvalueContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_minvalue
	return p
}

func InitEmptyOpt_minvalueContext(p *Opt_minvalueContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_minvalue
}

func (*Opt_minvalueContext) IsOpt_minvalueContext() {}

func NewOpt_minvalueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_minvalueContext {
	var p = new(Opt_minvalueContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_minvalue

	return p
}

func (s *Opt_minvalueContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_minvalueContext) MINVALUE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMINVALUE_SYMBOL, 0)
}

func (s *Opt_minvalueContext) Signed_numeric_literal() ISigned_numeric_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISigned_numeric_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISigned_numeric_literalContext)
}

func (s *Opt_minvalueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_minvalueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_minvalueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_minvalue(s)
	}
}

func (s *Opt_minvalueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_minvalue(s)
	}
}

func (s *Opt_minvalueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_minvalue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_minvalue() (localctx IOpt_minvalueContext) {
	localctx = NewOpt_minvalueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 498, GoogleSQLParserRULE_opt_minvalue)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3547)
		p.Match(GoogleSQLParserMINVALUE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3548)
		p.Signed_numeric_literal()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_cycleContext is an interface to support dynamic dispatch.
type IOpt_cycleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CYCLE_SYMBOL() antlr.TerminalNode
	NO_SYMBOL() antlr.TerminalNode

	// IsOpt_cycleContext differentiates from other interfaces.
	IsOpt_cycleContext()
}

type Opt_cycleContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_cycleContext() *Opt_cycleContext {
	var p = new(Opt_cycleContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_cycle
	return p
}

func InitEmptyOpt_cycleContext(p *Opt_cycleContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_cycle
}

func (*Opt_cycleContext) IsOpt_cycleContext() {}

func NewOpt_cycleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_cycleContext {
	var p = new(Opt_cycleContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_cycle

	return p
}

func (s *Opt_cycleContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_cycleContext) CYCLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCYCLE_SYMBOL, 0)
}

func (s *Opt_cycleContext) NO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNO_SYMBOL, 0)
}

func (s *Opt_cycleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_cycleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_cycleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_cycle(s)
	}
}

func (s *Opt_cycleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_cycle(s)
	}
}

func (s *Opt_cycleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_cycle(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_cycle() (localctx IOpt_cycleContext) {
	localctx = NewOpt_cycleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 500, GoogleSQLParserRULE_opt_cycle)
	p.SetState(3553)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserCYCLE_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3550)
			p.Match(GoogleSQLParserCYCLE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserNO_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3551)
			p.Match(GoogleSQLParserNO_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3552)
			p.Match(GoogleSQLParserCYCLE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISigned_numeric_literalContext is an interface to support dynamic dispatch.
type ISigned_numeric_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Integer_literal() IInteger_literalContext
	Numeric_literal() INumeric_literalContext
	Bignumeric_literal() IBignumeric_literalContext
	Floating_point_literal() IFloating_point_literalContext
	MINUS_OPERATOR() antlr.TerminalNode

	// IsSigned_numeric_literalContext differentiates from other interfaces.
	IsSigned_numeric_literalContext()
}

type Signed_numeric_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySigned_numeric_literalContext() *Signed_numeric_literalContext {
	var p = new(Signed_numeric_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_signed_numeric_literal
	return p
}

func InitEmptySigned_numeric_literalContext(p *Signed_numeric_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_signed_numeric_literal
}

func (*Signed_numeric_literalContext) IsSigned_numeric_literalContext() {}

func NewSigned_numeric_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Signed_numeric_literalContext {
	var p = new(Signed_numeric_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_signed_numeric_literal

	return p
}

func (s *Signed_numeric_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Signed_numeric_literalContext) Integer_literal() IInteger_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInteger_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInteger_literalContext)
}

func (s *Signed_numeric_literalContext) Numeric_literal() INumeric_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumeric_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumeric_literalContext)
}

func (s *Signed_numeric_literalContext) Bignumeric_literal() IBignumeric_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBignumeric_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBignumeric_literalContext)
}

func (s *Signed_numeric_literalContext) Floating_point_literal() IFloating_point_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFloating_point_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFloating_point_literalContext)
}

func (s *Signed_numeric_literalContext) MINUS_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMINUS_OPERATOR, 0)
}

func (s *Signed_numeric_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Signed_numeric_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Signed_numeric_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSigned_numeric_literal(s)
	}
}

func (s *Signed_numeric_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSigned_numeric_literal(s)
	}
}

func (s *Signed_numeric_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSigned_numeric_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Signed_numeric_literal() (localctx ISigned_numeric_literalContext) {
	localctx = NewSigned_numeric_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 502, GoogleSQLParserRULE_signed_numeric_literal)
	p.SetState(3563)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 407, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3555)
			p.Integer_literal()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3556)
			p.Numeric_literal()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3557)
			p.Bignumeric_literal()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3558)
			p.Floating_point_literal()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3559)
			p.Match(GoogleSQLParserMINUS_OPERATOR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3560)
			p.Integer_literal()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3561)
			p.Match(GoogleSQLParserMINUS_OPERATOR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3562)
			p.Floating_point_literal()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStored_modeContext is an interface to support dynamic dispatch.
type IStored_modeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	STORED_SYMBOL() antlr.TerminalNode
	VOLATILE_SYMBOL() antlr.TerminalNode

	// IsStored_modeContext differentiates from other interfaces.
	IsStored_modeContext()
}

type Stored_modeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStored_modeContext() *Stored_modeContext {
	var p = new(Stored_modeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_stored_mode
	return p
}

func InitEmptyStored_modeContext(p *Stored_modeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_stored_mode
}

func (*Stored_modeContext) IsStored_modeContext() {}

func NewStored_modeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Stored_modeContext {
	var p = new(Stored_modeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_stored_mode

	return p
}

func (s *Stored_modeContext) GetParser() antlr.Parser { return s.parser }

func (s *Stored_modeContext) STORED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTORED_SYMBOL, 0)
}

func (s *Stored_modeContext) VOLATILE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserVOLATILE_SYMBOL, 0)
}

func (s *Stored_modeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stored_modeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Stored_modeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStored_mode(s)
	}
}

func (s *Stored_modeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStored_mode(s)
	}
}

func (s *Stored_modeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStored_mode(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Stored_mode() (localctx IStored_modeContext) {
	localctx = NewStored_modeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 504, GoogleSQLParserRULE_stored_mode)
	p.SetState(3568)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 408, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3565)
			p.Match(GoogleSQLParserSTORED_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3566)
			p.Match(GoogleSQLParserVOLATILE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3567)
			p.Match(GoogleSQLParserSTORED_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGenerated_modeContext is an interface to support dynamic dispatch.
type IGenerated_modeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	GENERATED_SYMBOL() antlr.TerminalNode
	AS_SYMBOL() antlr.TerminalNode
	ALWAYS_SYMBOL() antlr.TerminalNode
	BY_SYMBOL() antlr.TerminalNode
	DEFAULT_SYMBOL() antlr.TerminalNode

	// IsGenerated_modeContext differentiates from other interfaces.
	IsGenerated_modeContext()
}

type Generated_modeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenerated_modeContext() *Generated_modeContext {
	var p = new(Generated_modeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_generated_mode
	return p
}

func InitEmptyGenerated_modeContext(p *Generated_modeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_generated_mode
}

func (*Generated_modeContext) IsGenerated_modeContext() {}

func NewGenerated_modeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Generated_modeContext {
	var p = new(Generated_modeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_generated_mode

	return p
}

func (s *Generated_modeContext) GetParser() antlr.Parser { return s.parser }

func (s *Generated_modeContext) GENERATED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGENERATED_SYMBOL, 0)
}

func (s *Generated_modeContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Generated_modeContext) ALWAYS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserALWAYS_SYMBOL, 0)
}

func (s *Generated_modeContext) BY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBY_SYMBOL, 0)
}

func (s *Generated_modeContext) DEFAULT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDEFAULT_SYMBOL, 0)
}

func (s *Generated_modeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Generated_modeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Generated_modeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGenerated_mode(s)
	}
}

func (s *Generated_modeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGenerated_mode(s)
	}
}

func (s *Generated_modeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGenerated_mode(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Generated_mode() (localctx IGenerated_modeContext) {
	localctx = NewGenerated_modeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 506, GoogleSQLParserRULE_generated_mode)
	p.SetState(3580)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 409, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3570)
			p.Match(GoogleSQLParserGENERATED_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3571)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3572)
			p.Match(GoogleSQLParserGENERATED_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3573)
			p.Match(GoogleSQLParserALWAYS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3574)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3575)
			p.Match(GoogleSQLParserGENERATED_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3576)
			p.Match(GoogleSQLParserBY_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3577)
			p.Match(GoogleSQLParserDEFAULT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3578)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3579)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumn_schema_innerContext is an interface to support dynamic dispatch.
type IColumn_schema_innerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Raw_column_schema_inner() IRaw_column_schema_innerContext
	Opt_type_parameters() IOpt_type_parametersContext

	// IsColumn_schema_innerContext differentiates from other interfaces.
	IsColumn_schema_innerContext()
}

type Column_schema_innerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_schema_innerContext() *Column_schema_innerContext {
	var p = new(Column_schema_innerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_column_schema_inner
	return p
}

func InitEmptyColumn_schema_innerContext(p *Column_schema_innerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_column_schema_inner
}

func (*Column_schema_innerContext) IsColumn_schema_innerContext() {}

func NewColumn_schema_innerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_schema_innerContext {
	var p = new(Column_schema_innerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_column_schema_inner

	return p
}

func (s *Column_schema_innerContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_schema_innerContext) Raw_column_schema_inner() IRaw_column_schema_innerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRaw_column_schema_innerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRaw_column_schema_innerContext)
}

func (s *Column_schema_innerContext) Opt_type_parameters() IOpt_type_parametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_type_parametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_type_parametersContext)
}

func (s *Column_schema_innerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_schema_innerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_schema_innerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterColumn_schema_inner(s)
	}
}

func (s *Column_schema_innerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitColumn_schema_inner(s)
	}
}

func (s *Column_schema_innerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitColumn_schema_inner(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Column_schema_inner() (localctx IColumn_schema_innerContext) {
	localctx = NewColumn_schema_innerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 508, GoogleSQLParserRULE_column_schema_inner)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3582)
		p.Raw_column_schema_inner()
	}
	p.SetState(3584)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserLR_BRACKET_SYMBOL {
		{
			p.SetState(3583)
			p.Opt_type_parameters()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRaw_column_schema_innerContext is an interface to support dynamic dispatch.
type IRaw_column_schema_innerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Simple_column_schema_inner() ISimple_column_schema_innerContext
	Array_column_schema_inner() IArray_column_schema_innerContext
	Struct_column_schema_inner() IStruct_column_schema_innerContext
	Range_column_schema_inner() IRange_column_schema_innerContext

	// IsRaw_column_schema_innerContext differentiates from other interfaces.
	IsRaw_column_schema_innerContext()
}

type Raw_column_schema_innerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRaw_column_schema_innerContext() *Raw_column_schema_innerContext {
	var p = new(Raw_column_schema_innerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_raw_column_schema_inner
	return p
}

func InitEmptyRaw_column_schema_innerContext(p *Raw_column_schema_innerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_raw_column_schema_inner
}

func (*Raw_column_schema_innerContext) IsRaw_column_schema_innerContext() {}

func NewRaw_column_schema_innerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Raw_column_schema_innerContext {
	var p = new(Raw_column_schema_innerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_raw_column_schema_inner

	return p
}

func (s *Raw_column_schema_innerContext) GetParser() antlr.Parser { return s.parser }

func (s *Raw_column_schema_innerContext) Simple_column_schema_inner() ISimple_column_schema_innerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimple_column_schema_innerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimple_column_schema_innerContext)
}

func (s *Raw_column_schema_innerContext) Array_column_schema_inner() IArray_column_schema_innerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArray_column_schema_innerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArray_column_schema_innerContext)
}

func (s *Raw_column_schema_innerContext) Struct_column_schema_inner() IStruct_column_schema_innerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_column_schema_innerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_column_schema_innerContext)
}

func (s *Raw_column_schema_innerContext) Range_column_schema_inner() IRange_column_schema_innerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRange_column_schema_innerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRange_column_schema_innerContext)
}

func (s *Raw_column_schema_innerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Raw_column_schema_innerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Raw_column_schema_innerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRaw_column_schema_inner(s)
	}
}

func (s *Raw_column_schema_innerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRaw_column_schema_inner(s)
	}
}

func (s *Raw_column_schema_innerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRaw_column_schema_inner(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Raw_column_schema_inner() (localctx IRaw_column_schema_innerContext) {
	localctx = NewRaw_column_schema_innerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 510, GoogleSQLParserRULE_raw_column_schema_inner)
	p.SetState(3590)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserINTERVAL_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserCONFLICT_SYMBOL, GoogleSQLParserDESTINATION_SYMBOL, GoogleSQLParserPROPERTY_SYMBOL, GoogleSQLParserGRAPH_SYMBOL, GoogleSQLParserNODE_SYMBOL, GoogleSQLParserPROPERTIES_SYMBOL, GoogleSQLParserLABEL_SYMBOL, GoogleSQLParserEDGE_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3586)
			p.Simple_column_schema_inner()
		}

	case GoogleSQLParserARRAY_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3587)
			p.Array_column_schema_inner()
		}

	case GoogleSQLParserSTRUCT_SYMBOL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3588)
			p.Struct_column_schema_inner()
		}

	case GoogleSQLParserRANGE_SYMBOL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3589)
			p.Range_column_schema_inner()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRange_column_schema_innerContext is an interface to support dynamic dispatch.
type IRange_column_schema_innerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RANGE_SYMBOL() antlr.TerminalNode
	Template_type_open() ITemplate_type_openContext
	Field_schema() IField_schemaContext
	Template_type_close() ITemplate_type_closeContext

	// IsRange_column_schema_innerContext differentiates from other interfaces.
	IsRange_column_schema_innerContext()
}

type Range_column_schema_innerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRange_column_schema_innerContext() *Range_column_schema_innerContext {
	var p = new(Range_column_schema_innerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_range_column_schema_inner
	return p
}

func InitEmptyRange_column_schema_innerContext(p *Range_column_schema_innerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_range_column_schema_inner
}

func (*Range_column_schema_innerContext) IsRange_column_schema_innerContext() {}

func NewRange_column_schema_innerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Range_column_schema_innerContext {
	var p = new(Range_column_schema_innerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_range_column_schema_inner

	return p
}

func (s *Range_column_schema_innerContext) GetParser() antlr.Parser { return s.parser }

func (s *Range_column_schema_innerContext) RANGE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRANGE_SYMBOL, 0)
}

func (s *Range_column_schema_innerContext) Template_type_open() ITemplate_type_openContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_openContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_openContext)
}

func (s *Range_column_schema_innerContext) Field_schema() IField_schemaContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IField_schemaContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IField_schemaContext)
}

func (s *Range_column_schema_innerContext) Template_type_close() ITemplate_type_closeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_closeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_closeContext)
}

func (s *Range_column_schema_innerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Range_column_schema_innerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Range_column_schema_innerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRange_column_schema_inner(s)
	}
}

func (s *Range_column_schema_innerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRange_column_schema_inner(s)
	}
}

func (s *Range_column_schema_innerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRange_column_schema_inner(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Range_column_schema_inner() (localctx IRange_column_schema_innerContext) {
	localctx = NewRange_column_schema_innerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 512, GoogleSQLParserRULE_range_column_schema_inner)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3592)
		p.Match(GoogleSQLParserRANGE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3593)
		p.Template_type_open()
	}
	{
		p.SetState(3594)
		p.Field_schema()
	}
	{
		p.SetState(3595)
		p.Template_type_close()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStruct_column_schema_innerContext is an interface to support dynamic dispatch.
type IStruct_column_schema_innerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	STRUCT_SYMBOL() antlr.TerminalNode
	Template_type_open() ITemplate_type_openContext
	Template_type_close() ITemplate_type_closeContext
	AllStruct_column_field() []IStruct_column_fieldContext
	Struct_column_field(i int) IStruct_column_fieldContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsStruct_column_schema_innerContext differentiates from other interfaces.
	IsStruct_column_schema_innerContext()
}

type Struct_column_schema_innerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStruct_column_schema_innerContext() *Struct_column_schema_innerContext {
	var p = new(Struct_column_schema_innerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_column_schema_inner
	return p
}

func InitEmptyStruct_column_schema_innerContext(p *Struct_column_schema_innerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_column_schema_inner
}

func (*Struct_column_schema_innerContext) IsStruct_column_schema_innerContext() {}

func NewStruct_column_schema_innerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Struct_column_schema_innerContext {
	var p = new(Struct_column_schema_innerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_struct_column_schema_inner

	return p
}

func (s *Struct_column_schema_innerContext) GetParser() antlr.Parser { return s.parser }

func (s *Struct_column_schema_innerContext) STRUCT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTRUCT_SYMBOL, 0)
}

func (s *Struct_column_schema_innerContext) Template_type_open() ITemplate_type_openContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_openContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_openContext)
}

func (s *Struct_column_schema_innerContext) Template_type_close() ITemplate_type_closeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_closeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_closeContext)
}

func (s *Struct_column_schema_innerContext) AllStruct_column_field() []IStruct_column_fieldContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStruct_column_fieldContext); ok {
			len++
		}
	}

	tst := make([]IStruct_column_fieldContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStruct_column_fieldContext); ok {
			tst[i] = t.(IStruct_column_fieldContext)
			i++
		}
	}

	return tst
}

func (s *Struct_column_schema_innerContext) Struct_column_field(i int) IStruct_column_fieldContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_column_fieldContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_column_fieldContext)
}

func (s *Struct_column_schema_innerContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Struct_column_schema_innerContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Struct_column_schema_innerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Struct_column_schema_innerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Struct_column_schema_innerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStruct_column_schema_inner(s)
	}
}

func (s *Struct_column_schema_innerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStruct_column_schema_inner(s)
	}
}

func (s *Struct_column_schema_innerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStruct_column_schema_inner(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Struct_column_schema_inner() (localctx IStruct_column_schema_innerContext) {
	localctx = NewStruct_column_schema_innerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 514, GoogleSQLParserRULE_struct_column_schema_inner)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3597)
		p.Match(GoogleSQLParserSTRUCT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3598)
		p.Template_type_open()
	}
	p.SetState(3607)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64((_la-54)) & ^0x3f) == 0 && ((int64(1)<<(_la-54))&-254304519003570175) != 0) || ((int64((_la-118)) & ^0x3f) == 0 && ((int64(1)<<(_la-118))&-1) != 0) || ((int64((_la-182)) & ^0x3f) == 0 && ((int64(1)<<(_la-182))&-1) != 0) || ((int64((_la-246)) & ^0x3f) == 0 && ((int64(1)<<(_la-246))&140737488354815) != 0) || ((int64((_la-338)) & ^0x3f) == 0 && ((int64(1)<<(_la-338))&8161) != 0) {
		{
			p.SetState(3599)
			p.Struct_column_field()
		}
		p.SetState(3604)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == GoogleSQLParserCOMMA_SYMBOL {
			{
				p.SetState(3600)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(3601)
				p.Struct_column_field()
			}

			p.SetState(3606)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(3609)
		p.Template_type_close()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStruct_column_fieldContext is an interface to support dynamic dispatch.
type IStruct_column_fieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Column_schema_inner() IColumn_schema_innerContext
	Collate_clause() ICollate_clauseContext
	Opt_field_attributes() IOpt_field_attributesContext
	Identifier() IIdentifierContext
	Field_schema() IField_schemaContext

	// IsStruct_column_fieldContext differentiates from other interfaces.
	IsStruct_column_fieldContext()
}

type Struct_column_fieldContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStruct_column_fieldContext() *Struct_column_fieldContext {
	var p = new(Struct_column_fieldContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_column_field
	return p
}

func InitEmptyStruct_column_fieldContext(p *Struct_column_fieldContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_column_field
}

func (*Struct_column_fieldContext) IsStruct_column_fieldContext() {}

func NewStruct_column_fieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Struct_column_fieldContext {
	var p = new(Struct_column_fieldContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_struct_column_field

	return p
}

func (s *Struct_column_fieldContext) GetParser() antlr.Parser { return s.parser }

func (s *Struct_column_fieldContext) Column_schema_inner() IColumn_schema_innerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_schema_innerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_schema_innerContext)
}

func (s *Struct_column_fieldContext) Collate_clause() ICollate_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollate_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollate_clauseContext)
}

func (s *Struct_column_fieldContext) Opt_field_attributes() IOpt_field_attributesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_field_attributesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_field_attributesContext)
}

func (s *Struct_column_fieldContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Struct_column_fieldContext) Field_schema() IField_schemaContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IField_schemaContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IField_schemaContext)
}

func (s *Struct_column_fieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Struct_column_fieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Struct_column_fieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStruct_column_field(s)
	}
}

func (s *Struct_column_fieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStruct_column_field(s)
	}
}

func (s *Struct_column_fieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStruct_column_field(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Struct_column_field() (localctx IStruct_column_fieldContext) {
	localctx = NewStruct_column_fieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 516, GoogleSQLParserRULE_struct_column_field)
	var _la int

	p.SetState(3621)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 416, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3611)
			p.Column_schema_inner()
		}
		p.SetState(3613)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserCOLLATE_SYMBOL {
			{
				p.SetState(3612)
				p.Collate_clause()
			}

		}
		p.SetState(3616)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserNOT_SYMBOL {
			{
				p.SetState(3615)
				p.Opt_field_attributes()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3618)
			p.Identifier()
		}
		{
			p.SetState(3619)
			p.Field_schema()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISimple_column_schema_innerContext is an interface to support dynamic dispatch.
type ISimple_column_schema_innerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Path_expression() IPath_expressionContext
	INTERVAL_SYMBOL() antlr.TerminalNode

	// IsSimple_column_schema_innerContext differentiates from other interfaces.
	IsSimple_column_schema_innerContext()
}

type Simple_column_schema_innerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimple_column_schema_innerContext() *Simple_column_schema_innerContext {
	var p = new(Simple_column_schema_innerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_simple_column_schema_inner
	return p
}

func InitEmptySimple_column_schema_innerContext(p *Simple_column_schema_innerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_simple_column_schema_inner
}

func (*Simple_column_schema_innerContext) IsSimple_column_schema_innerContext() {}

func NewSimple_column_schema_innerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Simple_column_schema_innerContext {
	var p = new(Simple_column_schema_innerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_simple_column_schema_inner

	return p
}

func (s *Simple_column_schema_innerContext) GetParser() antlr.Parser { return s.parser }

func (s *Simple_column_schema_innerContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Simple_column_schema_innerContext) INTERVAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINTERVAL_SYMBOL, 0)
}

func (s *Simple_column_schema_innerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Simple_column_schema_innerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Simple_column_schema_innerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSimple_column_schema_inner(s)
	}
}

func (s *Simple_column_schema_innerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSimple_column_schema_inner(s)
	}
}

func (s *Simple_column_schema_innerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSimple_column_schema_inner(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Simple_column_schema_inner() (localctx ISimple_column_schema_innerContext) {
	localctx = NewSimple_column_schema_innerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 518, GoogleSQLParserRULE_simple_column_schema_inner)
	p.SetState(3625)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserCONFLICT_SYMBOL, GoogleSQLParserDESTINATION_SYMBOL, GoogleSQLParserPROPERTY_SYMBOL, GoogleSQLParserGRAPH_SYMBOL, GoogleSQLParserNODE_SYMBOL, GoogleSQLParserPROPERTIES_SYMBOL, GoogleSQLParserLABEL_SYMBOL, GoogleSQLParserEDGE_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3623)
			p.Path_expression()
		}

	case GoogleSQLParserINTERVAL_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3624)
			p.Match(GoogleSQLParserINTERVAL_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArray_column_schema_innerContext is an interface to support dynamic dispatch.
type IArray_column_schema_innerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ARRAY_SYMBOL() antlr.TerminalNode
	Template_type_open() ITemplate_type_openContext
	Field_schema() IField_schemaContext
	Template_type_close() ITemplate_type_closeContext

	// IsArray_column_schema_innerContext differentiates from other interfaces.
	IsArray_column_schema_innerContext()
}

type Array_column_schema_innerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArray_column_schema_innerContext() *Array_column_schema_innerContext {
	var p = new(Array_column_schema_innerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_array_column_schema_inner
	return p
}

func InitEmptyArray_column_schema_innerContext(p *Array_column_schema_innerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_array_column_schema_inner
}

func (*Array_column_schema_innerContext) IsArray_column_schema_innerContext() {}

func NewArray_column_schema_innerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_column_schema_innerContext {
	var p = new(Array_column_schema_innerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_array_column_schema_inner

	return p
}

func (s *Array_column_schema_innerContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_column_schema_innerContext) ARRAY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserARRAY_SYMBOL, 0)
}

func (s *Array_column_schema_innerContext) Template_type_open() ITemplate_type_openContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_openContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_openContext)
}

func (s *Array_column_schema_innerContext) Field_schema() IField_schemaContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IField_schemaContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IField_schemaContext)
}

func (s *Array_column_schema_innerContext) Template_type_close() ITemplate_type_closeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_closeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_closeContext)
}

func (s *Array_column_schema_innerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_column_schema_innerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Array_column_schema_innerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterArray_column_schema_inner(s)
	}
}

func (s *Array_column_schema_innerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitArray_column_schema_inner(s)
	}
}

func (s *Array_column_schema_innerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitArray_column_schema_inner(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Array_column_schema_inner() (localctx IArray_column_schema_innerContext) {
	localctx = NewArray_column_schema_innerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 520, GoogleSQLParserRULE_array_column_schema_inner)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3627)
		p.Match(GoogleSQLParserARRAY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3628)
		p.Template_type_open()
	}
	{
		p.SetState(3629)
		p.Field_schema()
	}
	{
		p.SetState(3630)
		p.Template_type_close()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IField_schemaContext is an interface to support dynamic dispatch.
type IField_schemaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Column_schema_inner() IColumn_schema_innerContext
	Collate_clause() ICollate_clauseContext
	Opt_field_attributes() IOpt_field_attributesContext
	Opt_options_list() IOpt_options_listContext

	// IsField_schemaContext differentiates from other interfaces.
	IsField_schemaContext()
}

type Field_schemaContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyField_schemaContext() *Field_schemaContext {
	var p = new(Field_schemaContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_field_schema
	return p
}

func InitEmptyField_schemaContext(p *Field_schemaContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_field_schema
}

func (*Field_schemaContext) IsField_schemaContext() {}

func NewField_schemaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Field_schemaContext {
	var p = new(Field_schemaContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_field_schema

	return p
}

func (s *Field_schemaContext) GetParser() antlr.Parser { return s.parser }

func (s *Field_schemaContext) Column_schema_inner() IColumn_schema_innerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_schema_innerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_schema_innerContext)
}

func (s *Field_schemaContext) Collate_clause() ICollate_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollate_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollate_clauseContext)
}

func (s *Field_schemaContext) Opt_field_attributes() IOpt_field_attributesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_field_attributesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_field_attributesContext)
}

func (s *Field_schemaContext) Opt_options_list() IOpt_options_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_options_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_options_listContext)
}

func (s *Field_schemaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Field_schemaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Field_schemaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterField_schema(s)
	}
}

func (s *Field_schemaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitField_schema(s)
	}
}

func (s *Field_schemaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitField_schema(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Field_schema() (localctx IField_schemaContext) {
	localctx = NewField_schemaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 522, GoogleSQLParserRULE_field_schema)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3632)
		p.Column_schema_inner()
	}
	p.SetState(3634)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserCOLLATE_SYMBOL {
		{
			p.SetState(3633)
			p.Collate_clause()
		}

	}
	p.SetState(3637)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserNOT_SYMBOL {
		{
			p.SetState(3636)
			p.Opt_field_attributes()
		}

	}
	p.SetState(3640)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOPTIONS_SYMBOL {
		{
			p.SetState(3639)
			p.Opt_options_list()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_field_attributesContext is an interface to support dynamic dispatch.
type IOpt_field_attributesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Not_null_column_attribute() INot_null_column_attributeContext

	// IsOpt_field_attributesContext differentiates from other interfaces.
	IsOpt_field_attributesContext()
}

type Opt_field_attributesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_field_attributesContext() *Opt_field_attributesContext {
	var p = new(Opt_field_attributesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_field_attributes
	return p
}

func InitEmptyOpt_field_attributesContext(p *Opt_field_attributesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_field_attributes
}

func (*Opt_field_attributesContext) IsOpt_field_attributesContext() {}

func NewOpt_field_attributesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_field_attributesContext {
	var p = new(Opt_field_attributesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_field_attributes

	return p
}

func (s *Opt_field_attributesContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_field_attributesContext) Not_null_column_attribute() INot_null_column_attributeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INot_null_column_attributeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INot_null_column_attributeContext)
}

func (s *Opt_field_attributesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_field_attributesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_field_attributesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_field_attributes(s)
	}
}

func (s *Opt_field_attributesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_field_attributes(s)
	}
}

func (s *Opt_field_attributesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_field_attributes(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_field_attributes() (localctx IOpt_field_attributesContext) {
	localctx = NewOpt_field_attributesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 524, GoogleSQLParserRULE_opt_field_attributes)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3642)
		p.Not_null_column_attribute()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INot_null_column_attributeContext is an interface to support dynamic dispatch.
type INot_null_column_attributeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NOT_SYMBOL() antlr.TerminalNode
	NULL_SYMBOL() antlr.TerminalNode

	// IsNot_null_column_attributeContext differentiates from other interfaces.
	IsNot_null_column_attributeContext()
}

type Not_null_column_attributeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNot_null_column_attributeContext() *Not_null_column_attributeContext {
	var p = new(Not_null_column_attributeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_not_null_column_attribute
	return p
}

func InitEmptyNot_null_column_attributeContext(p *Not_null_column_attributeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_not_null_column_attribute
}

func (*Not_null_column_attributeContext) IsNot_null_column_attributeContext() {}

func NewNot_null_column_attributeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Not_null_column_attributeContext {
	var p = new(Not_null_column_attributeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_not_null_column_attribute

	return p
}

func (s *Not_null_column_attributeContext) GetParser() antlr.Parser { return s.parser }

func (s *Not_null_column_attributeContext) NOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNOT_SYMBOL, 0)
}

func (s *Not_null_column_attributeContext) NULL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNULL_SYMBOL, 0)
}

func (s *Not_null_column_attributeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Not_null_column_attributeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Not_null_column_attributeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterNot_null_column_attribute(s)
	}
}

func (s *Not_null_column_attributeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitNot_null_column_attribute(s)
	}
}

func (s *Not_null_column_attributeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitNot_null_column_attribute(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Not_null_column_attribute() (localctx INot_null_column_attributeContext) {
	localctx = NewNot_null_column_attributeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 526, GoogleSQLParserRULE_not_null_column_attribute)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3644)
		p.Match(GoogleSQLParserNOT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3645)
		p.Match(GoogleSQLParserNULL_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrimary_key_or_table_constraint_specContext is an interface to support dynamic dispatch.
type IPrimary_key_or_table_constraint_specContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Primary_key_spec() IPrimary_key_specContext
	Table_constraint_spec() ITable_constraint_specContext

	// IsPrimary_key_or_table_constraint_specContext differentiates from other interfaces.
	IsPrimary_key_or_table_constraint_specContext()
}

type Primary_key_or_table_constraint_specContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimary_key_or_table_constraint_specContext() *Primary_key_or_table_constraint_specContext {
	var p = new(Primary_key_or_table_constraint_specContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_primary_key_or_table_constraint_spec
	return p
}

func InitEmptyPrimary_key_or_table_constraint_specContext(p *Primary_key_or_table_constraint_specContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_primary_key_or_table_constraint_spec
}

func (*Primary_key_or_table_constraint_specContext) IsPrimary_key_or_table_constraint_specContext() {}

func NewPrimary_key_or_table_constraint_specContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Primary_key_or_table_constraint_specContext {
	var p = new(Primary_key_or_table_constraint_specContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_primary_key_or_table_constraint_spec

	return p
}

func (s *Primary_key_or_table_constraint_specContext) GetParser() antlr.Parser { return s.parser }

func (s *Primary_key_or_table_constraint_specContext) Primary_key_spec() IPrimary_key_specContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimary_key_specContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimary_key_specContext)
}

func (s *Primary_key_or_table_constraint_specContext) Table_constraint_spec() ITable_constraint_specContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_constraint_specContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_constraint_specContext)
}

func (s *Primary_key_or_table_constraint_specContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Primary_key_or_table_constraint_specContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Primary_key_or_table_constraint_specContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPrimary_key_or_table_constraint_spec(s)
	}
}

func (s *Primary_key_or_table_constraint_specContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPrimary_key_or_table_constraint_spec(s)
	}
}

func (s *Primary_key_or_table_constraint_specContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPrimary_key_or_table_constraint_spec(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Primary_key_or_table_constraint_spec() (localctx IPrimary_key_or_table_constraint_specContext) {
	localctx = NewPrimary_key_or_table_constraint_specContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 528, GoogleSQLParserRULE_primary_key_or_table_constraint_spec)
	p.SetState(3649)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserPRIMARY_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3647)
			p.Primary_key_spec()
		}

	case GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3648)
			p.Table_constraint_spec()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_if_not_existsContext is an interface to support dynamic dispatch.
type IOpt_if_not_existsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IF_SYMBOL() antlr.TerminalNode
	NOT_SYMBOL() antlr.TerminalNode
	EXISTS_SYMBOL() antlr.TerminalNode

	// IsOpt_if_not_existsContext differentiates from other interfaces.
	IsOpt_if_not_existsContext()
}

type Opt_if_not_existsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_if_not_existsContext() *Opt_if_not_existsContext {
	var p = new(Opt_if_not_existsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_if_not_exists
	return p
}

func InitEmptyOpt_if_not_existsContext(p *Opt_if_not_existsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_if_not_exists
}

func (*Opt_if_not_existsContext) IsOpt_if_not_existsContext() {}

func NewOpt_if_not_existsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_if_not_existsContext {
	var p = new(Opt_if_not_existsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_if_not_exists

	return p
}

func (s *Opt_if_not_existsContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_if_not_existsContext) IF_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIF_SYMBOL, 0)
}

func (s *Opt_if_not_existsContext) NOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNOT_SYMBOL, 0)
}

func (s *Opt_if_not_existsContext) EXISTS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXISTS_SYMBOL, 0)
}

func (s *Opt_if_not_existsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_if_not_existsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_if_not_existsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_if_not_exists(s)
	}
}

func (s *Opt_if_not_existsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_if_not_exists(s)
	}
}

func (s *Opt_if_not_existsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_if_not_exists(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_if_not_exists() (localctx IOpt_if_not_existsContext) {
	localctx = NewOpt_if_not_existsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 530, GoogleSQLParserRULE_opt_if_not_exists)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3651)
		p.Match(GoogleSQLParserIF_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3652)
		p.Match(GoogleSQLParserNOT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3653)
		p.Match(GoogleSQLParserEXISTS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrimary_key_specContext is an interface to support dynamic dispatch.
type IPrimary_key_specContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PRIMARY_SYMBOL() antlr.TerminalNode
	KEY_SYMBOL() antlr.TerminalNode
	Primary_key_element_list() IPrimary_key_element_listContext
	Constraint_enforcement() IConstraint_enforcementContext
	Opt_options_list() IOpt_options_listContext

	// IsPrimary_key_specContext differentiates from other interfaces.
	IsPrimary_key_specContext()
}

type Primary_key_specContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimary_key_specContext() *Primary_key_specContext {
	var p = new(Primary_key_specContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_primary_key_spec
	return p
}

func InitEmptyPrimary_key_specContext(p *Primary_key_specContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_primary_key_spec
}

func (*Primary_key_specContext) IsPrimary_key_specContext() {}

func NewPrimary_key_specContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Primary_key_specContext {
	var p = new(Primary_key_specContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_primary_key_spec

	return p
}

func (s *Primary_key_specContext) GetParser() antlr.Parser { return s.parser }

func (s *Primary_key_specContext) PRIMARY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPRIMARY_SYMBOL, 0)
}

func (s *Primary_key_specContext) KEY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserKEY_SYMBOL, 0)
}

func (s *Primary_key_specContext) Primary_key_element_list() IPrimary_key_element_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimary_key_element_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimary_key_element_listContext)
}

func (s *Primary_key_specContext) Constraint_enforcement() IConstraint_enforcementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstraint_enforcementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstraint_enforcementContext)
}

func (s *Primary_key_specContext) Opt_options_list() IOpt_options_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_options_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_options_listContext)
}

func (s *Primary_key_specContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Primary_key_specContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Primary_key_specContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPrimary_key_spec(s)
	}
}

func (s *Primary_key_specContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPrimary_key_spec(s)
	}
}

func (s *Primary_key_specContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPrimary_key_spec(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Primary_key_spec() (localctx IPrimary_key_specContext) {
	localctx = NewPrimary_key_specContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 532, GoogleSQLParserRULE_primary_key_spec)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3655)
		p.Match(GoogleSQLParserPRIMARY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3656)
		p.Match(GoogleSQLParserKEY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3657)
		p.Primary_key_element_list()
	}
	p.SetState(3659)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserNOT_SYMBOL || _la == GoogleSQLParserENFORCED_SYMBOL {
		{
			p.SetState(3658)
			p.Constraint_enforcement()
		}

	}
	p.SetState(3662)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserOPTIONS_SYMBOL {
		{
			p.SetState(3661)
			p.Opt_options_list()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrimary_key_element_listContext is an interface to support dynamic dispatch.
type IPrimary_key_element_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	AllPrimary_key_element() []IPrimary_key_elementContext
	Primary_key_element(i int) IPrimary_key_elementContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsPrimary_key_element_listContext differentiates from other interfaces.
	IsPrimary_key_element_listContext()
}

type Primary_key_element_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimary_key_element_listContext() *Primary_key_element_listContext {
	var p = new(Primary_key_element_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_primary_key_element_list
	return p
}

func InitEmptyPrimary_key_element_listContext(p *Primary_key_element_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_primary_key_element_list
}

func (*Primary_key_element_listContext) IsPrimary_key_element_listContext() {}

func NewPrimary_key_element_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Primary_key_element_listContext {
	var p = new(Primary_key_element_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_primary_key_element_list

	return p
}

func (s *Primary_key_element_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Primary_key_element_listContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Primary_key_element_listContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Primary_key_element_listContext) AllPrimary_key_element() []IPrimary_key_elementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPrimary_key_elementContext); ok {
			len++
		}
	}

	tst := make([]IPrimary_key_elementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPrimary_key_elementContext); ok {
			tst[i] = t.(IPrimary_key_elementContext)
			i++
		}
	}

	return tst
}

func (s *Primary_key_element_listContext) Primary_key_element(i int) IPrimary_key_elementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimary_key_elementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimary_key_elementContext)
}

func (s *Primary_key_element_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Primary_key_element_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Primary_key_element_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Primary_key_element_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Primary_key_element_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPrimary_key_element_list(s)
	}
}

func (s *Primary_key_element_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPrimary_key_element_list(s)
	}
}

func (s *Primary_key_element_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPrimary_key_element_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Primary_key_element_list() (localctx IPrimary_key_element_listContext) {
	localctx = NewPrimary_key_element_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 534, GoogleSQLParserRULE_primary_key_element_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3664)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(3673)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64((_la-72)) & ^0x3f) == 0 && ((int64(1)<<(_la-72))&-106523215214079) != 0) || ((int64((_la-136)) & ^0x3f) == 0 && ((int64(1)<<(_la-136))&-1) != 0) || ((int64((_la-200)) & ^0x3f) == 0 && ((int64(1)<<(_la-200))&-36028797018963969) != 0) || ((int64((_la-264)) & ^0x3f) == 0 && ((int64(1)<<(_la-264))&536870911) != 0) || ((int64((_la-338)) & ^0x3f) == 0 && ((int64(1)<<(_la-338))&8161) != 0) {
		{
			p.SetState(3665)
			p.Primary_key_element()
		}
		p.SetState(3670)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == GoogleSQLParserCOMMA_SYMBOL {
			{
				p.SetState(3666)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(3667)
				p.Primary_key_element()
			}

			p.SetState(3672)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(3675)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrimary_key_elementContext is an interface to support dynamic dispatch.
type IPrimary_key_elementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	Asc_or_desc() IAsc_or_descContext
	Null_order() INull_orderContext

	// IsPrimary_key_elementContext differentiates from other interfaces.
	IsPrimary_key_elementContext()
}

type Primary_key_elementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimary_key_elementContext() *Primary_key_elementContext {
	var p = new(Primary_key_elementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_primary_key_element
	return p
}

func InitEmptyPrimary_key_elementContext(p *Primary_key_elementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_primary_key_element
}

func (*Primary_key_elementContext) IsPrimary_key_elementContext() {}

func NewPrimary_key_elementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Primary_key_elementContext {
	var p = new(Primary_key_elementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_primary_key_element

	return p
}

func (s *Primary_key_elementContext) GetParser() antlr.Parser { return s.parser }

func (s *Primary_key_elementContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Primary_key_elementContext) Asc_or_desc() IAsc_or_descContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAsc_or_descContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAsc_or_descContext)
}

func (s *Primary_key_elementContext) Null_order() INull_orderContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INull_orderContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INull_orderContext)
}

func (s *Primary_key_elementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Primary_key_elementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Primary_key_elementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPrimary_key_element(s)
	}
}

func (s *Primary_key_elementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPrimary_key_element(s)
	}
}

func (s *Primary_key_elementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPrimary_key_element(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Primary_key_element() (localctx IPrimary_key_elementContext) {
	localctx = NewPrimary_key_elementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 536, GoogleSQLParserRULE_primary_key_element)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3677)
		p.Identifier()
	}
	p.SetState(3679)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserASC_SYMBOL || _la == GoogleSQLParserDESC_SYMBOL {
		{
			p.SetState(3678)
			p.Asc_or_desc()
		}

	}
	p.SetState(3682)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserNULLS_SYMBOL {
		{
			p.SetState(3681)
			p.Null_order()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_constraint_specContext is an interface to support dynamic dispatch.
type ITable_constraint_specContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CHECK_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Constraint_enforcement() IConstraint_enforcementContext
	Opt_options_list() IOpt_options_listContext
	FOREIGN_SYMBOL() antlr.TerminalNode
	KEY_SYMBOL() antlr.TerminalNode
	Column_list() IColumn_listContext
	Foreign_key_reference() IForeign_key_referenceContext

	// IsTable_constraint_specContext differentiates from other interfaces.
	IsTable_constraint_specContext()
}

type Table_constraint_specContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_constraint_specContext() *Table_constraint_specContext {
	var p = new(Table_constraint_specContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_constraint_spec
	return p
}

func InitEmptyTable_constraint_specContext(p *Table_constraint_specContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_constraint_spec
}

func (*Table_constraint_specContext) IsTable_constraint_specContext() {}

func NewTable_constraint_specContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_constraint_specContext {
	var p = new(Table_constraint_specContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_table_constraint_spec

	return p
}

func (s *Table_constraint_specContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_constraint_specContext) CHECK_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCHECK_SYMBOL, 0)
}

func (s *Table_constraint_specContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Table_constraint_specContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Table_constraint_specContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Table_constraint_specContext) Constraint_enforcement() IConstraint_enforcementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstraint_enforcementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstraint_enforcementContext)
}

func (s *Table_constraint_specContext) Opt_options_list() IOpt_options_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_options_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_options_listContext)
}

func (s *Table_constraint_specContext) FOREIGN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFOREIGN_SYMBOL, 0)
}

func (s *Table_constraint_specContext) KEY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserKEY_SYMBOL, 0)
}

func (s *Table_constraint_specContext) Column_list() IColumn_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_listContext)
}

func (s *Table_constraint_specContext) Foreign_key_reference() IForeign_key_referenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeign_key_referenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeign_key_referenceContext)
}

func (s *Table_constraint_specContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_constraint_specContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_constraint_specContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTable_constraint_spec(s)
	}
}

func (s *Table_constraint_specContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTable_constraint_spec(s)
	}
}

func (s *Table_constraint_specContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTable_constraint_spec(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Table_constraint_spec() (localctx ITable_constraint_specContext) {
	localctx = NewTable_constraint_specContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 538, GoogleSQLParserRULE_table_constraint_spec)
	var _la int

	p.SetState(3704)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserCHECK_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3684)
			p.Match(GoogleSQLParserCHECK_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3685)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3686)
			p.expression(0)
		}
		{
			p.SetState(3687)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(3689)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserNOT_SYMBOL || _la == GoogleSQLParserENFORCED_SYMBOL {
			{
				p.SetState(3688)
				p.Constraint_enforcement()
			}

		}
		p.SetState(3692)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserOPTIONS_SYMBOL {
			{
				p.SetState(3691)
				p.Opt_options_list()
			}

		}

	case GoogleSQLParserFOREIGN_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3694)
			p.Match(GoogleSQLParserFOREIGN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3695)
			p.Match(GoogleSQLParserKEY_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3696)
			p.Column_list()
		}
		{
			p.SetState(3697)
			p.Foreign_key_reference()
		}
		p.SetState(3699)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserNOT_SYMBOL || _la == GoogleSQLParserENFORCED_SYMBOL {
			{
				p.SetState(3698)
				p.Constraint_enforcement()
			}

		}
		p.SetState(3702)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserOPTIONS_SYMBOL {
			{
				p.SetState(3701)
				p.Opt_options_list()
			}

		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IForeign_key_referenceContext is an interface to support dynamic dispatch.
type IForeign_key_referenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	REFERENCES_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext
	Column_list() IColumn_listContext
	Opt_foreign_key_match() IOpt_foreign_key_matchContext
	Opt_foreign_key_action() IOpt_foreign_key_actionContext

	// IsForeign_key_referenceContext differentiates from other interfaces.
	IsForeign_key_referenceContext()
}

type Foreign_key_referenceContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForeign_key_referenceContext() *Foreign_key_referenceContext {
	var p = new(Foreign_key_referenceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_reference
	return p
}

func InitEmptyForeign_key_referenceContext(p *Foreign_key_referenceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_reference
}

func (*Foreign_key_referenceContext) IsForeign_key_referenceContext() {}

func NewForeign_key_referenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Foreign_key_referenceContext {
	var p = new(Foreign_key_referenceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_reference

	return p
}

func (s *Foreign_key_referenceContext) GetParser() antlr.Parser { return s.parser }

func (s *Foreign_key_referenceContext) REFERENCES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREFERENCES_SYMBOL, 0)
}

func (s *Foreign_key_referenceContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Foreign_key_referenceContext) Column_list() IColumn_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_listContext)
}

func (s *Foreign_key_referenceContext) Opt_foreign_key_match() IOpt_foreign_key_matchContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_foreign_key_matchContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_foreign_key_matchContext)
}

func (s *Foreign_key_referenceContext) Opt_foreign_key_action() IOpt_foreign_key_actionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_foreign_key_actionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_foreign_key_actionContext)
}

func (s *Foreign_key_referenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Foreign_key_referenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Foreign_key_referenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterForeign_key_reference(s)
	}
}

func (s *Foreign_key_referenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitForeign_key_reference(s)
	}
}

func (s *Foreign_key_referenceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitForeign_key_reference(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Foreign_key_reference() (localctx IForeign_key_referenceContext) {
	localctx = NewForeign_key_referenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 540, GoogleSQLParserRULE_foreign_key_reference)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3706)
		p.Match(GoogleSQLParserREFERENCES_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3707)
		p.Path_expression()
	}
	{
		p.SetState(3708)
		p.Column_list()
	}
	p.SetState(3710)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserMATCH_SYMBOL {
		{
			p.SetState(3709)
			p.Opt_foreign_key_match()
		}

	}
	p.SetState(3713)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserON_SYMBOL {
		{
			p.SetState(3712)
			p.Opt_foreign_key_action()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_foreign_key_actionContext is an interface to support dynamic dispatch.
type IOpt_foreign_key_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Foreign_key_on_update() IForeign_key_on_updateContext
	Foreign_key_on_delete() IForeign_key_on_deleteContext

	// IsOpt_foreign_key_actionContext differentiates from other interfaces.
	IsOpt_foreign_key_actionContext()
}

type Opt_foreign_key_actionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_foreign_key_actionContext() *Opt_foreign_key_actionContext {
	var p = new(Opt_foreign_key_actionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_foreign_key_action
	return p
}

func InitEmptyOpt_foreign_key_actionContext(p *Opt_foreign_key_actionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_foreign_key_action
}

func (*Opt_foreign_key_actionContext) IsOpt_foreign_key_actionContext() {}

func NewOpt_foreign_key_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_foreign_key_actionContext {
	var p = new(Opt_foreign_key_actionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_foreign_key_action

	return p
}

func (s *Opt_foreign_key_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_foreign_key_actionContext) Foreign_key_on_update() IForeign_key_on_updateContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeign_key_on_updateContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeign_key_on_updateContext)
}

func (s *Opt_foreign_key_actionContext) Foreign_key_on_delete() IForeign_key_on_deleteContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeign_key_on_deleteContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeign_key_on_deleteContext)
}

func (s *Opt_foreign_key_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_foreign_key_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_foreign_key_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_foreign_key_action(s)
	}
}

func (s *Opt_foreign_key_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_foreign_key_action(s)
	}
}

func (s *Opt_foreign_key_actionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_foreign_key_action(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_foreign_key_action() (localctx IOpt_foreign_key_actionContext) {
	localctx = NewOpt_foreign_key_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 542, GoogleSQLParserRULE_opt_foreign_key_action)
	var _la int

	p.SetState(3723)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 437, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3715)
			p.Foreign_key_on_update()
		}
		p.SetState(3717)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserON_SYMBOL {
			{
				p.SetState(3716)
				p.Foreign_key_on_delete()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3719)
			p.Foreign_key_on_delete()
		}
		p.SetState(3721)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserON_SYMBOL {
			{
				p.SetState(3720)
				p.Foreign_key_on_update()
			}

		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IForeign_key_on_updateContext is an interface to support dynamic dispatch.
type IForeign_key_on_updateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ON_SYMBOL() antlr.TerminalNode
	UPDATE_SYMBOL() antlr.TerminalNode
	Foreign_key_action() IForeign_key_actionContext

	// IsForeign_key_on_updateContext differentiates from other interfaces.
	IsForeign_key_on_updateContext()
}

type Foreign_key_on_updateContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForeign_key_on_updateContext() *Foreign_key_on_updateContext {
	var p = new(Foreign_key_on_updateContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_on_update
	return p
}

func InitEmptyForeign_key_on_updateContext(p *Foreign_key_on_updateContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_on_update
}

func (*Foreign_key_on_updateContext) IsForeign_key_on_updateContext() {}

func NewForeign_key_on_updateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Foreign_key_on_updateContext {
	var p = new(Foreign_key_on_updateContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_on_update

	return p
}

func (s *Foreign_key_on_updateContext) GetParser() antlr.Parser { return s.parser }

func (s *Foreign_key_on_updateContext) ON_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserON_SYMBOL, 0)
}

func (s *Foreign_key_on_updateContext) UPDATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUPDATE_SYMBOL, 0)
}

func (s *Foreign_key_on_updateContext) Foreign_key_action() IForeign_key_actionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeign_key_actionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeign_key_actionContext)
}

func (s *Foreign_key_on_updateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Foreign_key_on_updateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Foreign_key_on_updateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterForeign_key_on_update(s)
	}
}

func (s *Foreign_key_on_updateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitForeign_key_on_update(s)
	}
}

func (s *Foreign_key_on_updateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitForeign_key_on_update(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Foreign_key_on_update() (localctx IForeign_key_on_updateContext) {
	localctx = NewForeign_key_on_updateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 544, GoogleSQLParserRULE_foreign_key_on_update)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3725)
		p.Match(GoogleSQLParserON_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3726)
		p.Match(GoogleSQLParserUPDATE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3727)
		p.Foreign_key_action()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IForeign_key_on_deleteContext is an interface to support dynamic dispatch.
type IForeign_key_on_deleteContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ON_SYMBOL() antlr.TerminalNode
	DELETE_SYMBOL() antlr.TerminalNode
	Foreign_key_action() IForeign_key_actionContext

	// IsForeign_key_on_deleteContext differentiates from other interfaces.
	IsForeign_key_on_deleteContext()
}

type Foreign_key_on_deleteContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForeign_key_on_deleteContext() *Foreign_key_on_deleteContext {
	var p = new(Foreign_key_on_deleteContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_on_delete
	return p
}

func InitEmptyForeign_key_on_deleteContext(p *Foreign_key_on_deleteContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_on_delete
}

func (*Foreign_key_on_deleteContext) IsForeign_key_on_deleteContext() {}

func NewForeign_key_on_deleteContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Foreign_key_on_deleteContext {
	var p = new(Foreign_key_on_deleteContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_on_delete

	return p
}

func (s *Foreign_key_on_deleteContext) GetParser() antlr.Parser { return s.parser }

func (s *Foreign_key_on_deleteContext) ON_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserON_SYMBOL, 0)
}

func (s *Foreign_key_on_deleteContext) DELETE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDELETE_SYMBOL, 0)
}

func (s *Foreign_key_on_deleteContext) Foreign_key_action() IForeign_key_actionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeign_key_actionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeign_key_actionContext)
}

func (s *Foreign_key_on_deleteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Foreign_key_on_deleteContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Foreign_key_on_deleteContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterForeign_key_on_delete(s)
	}
}

func (s *Foreign_key_on_deleteContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitForeign_key_on_delete(s)
	}
}

func (s *Foreign_key_on_deleteContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitForeign_key_on_delete(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Foreign_key_on_delete() (localctx IForeign_key_on_deleteContext) {
	localctx = NewForeign_key_on_deleteContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 546, GoogleSQLParserRULE_foreign_key_on_delete)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3729)
		p.Match(GoogleSQLParserON_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3730)
		p.Match(GoogleSQLParserDELETE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3731)
		p.Foreign_key_action()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IForeign_key_actionContext is an interface to support dynamic dispatch.
type IForeign_key_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NO_SYMBOL() antlr.TerminalNode
	ACTION_SYMBOL() antlr.TerminalNode
	RESTRICT_SYMBOL() antlr.TerminalNode
	CASCADE_SYMBOL() antlr.TerminalNode
	SET_SYMBOL() antlr.TerminalNode
	NULL_SYMBOL() antlr.TerminalNode

	// IsForeign_key_actionContext differentiates from other interfaces.
	IsForeign_key_actionContext()
}

type Foreign_key_actionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForeign_key_actionContext() *Foreign_key_actionContext {
	var p = new(Foreign_key_actionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_action
	return p
}

func InitEmptyForeign_key_actionContext(p *Foreign_key_actionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_action
}

func (*Foreign_key_actionContext) IsForeign_key_actionContext() {}

func NewForeign_key_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Foreign_key_actionContext {
	var p = new(Foreign_key_actionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_action

	return p
}

func (s *Foreign_key_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Foreign_key_actionContext) NO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNO_SYMBOL, 0)
}

func (s *Foreign_key_actionContext) ACTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserACTION_SYMBOL, 0)
}

func (s *Foreign_key_actionContext) RESTRICT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRESTRICT_SYMBOL, 0)
}

func (s *Foreign_key_actionContext) CASCADE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCASCADE_SYMBOL, 0)
}

func (s *Foreign_key_actionContext) SET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSET_SYMBOL, 0)
}

func (s *Foreign_key_actionContext) NULL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNULL_SYMBOL, 0)
}

func (s *Foreign_key_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Foreign_key_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Foreign_key_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterForeign_key_action(s)
	}
}

func (s *Foreign_key_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitForeign_key_action(s)
	}
}

func (s *Foreign_key_actionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitForeign_key_action(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Foreign_key_action() (localctx IForeign_key_actionContext) {
	localctx = NewForeign_key_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 548, GoogleSQLParserRULE_foreign_key_action)
	p.SetState(3739)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserNO_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3733)
			p.Match(GoogleSQLParserNO_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3734)
			p.Match(GoogleSQLParserACTION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserRESTRICT_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3735)
			p.Match(GoogleSQLParserRESTRICT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserCASCADE_SYMBOL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3736)
			p.Match(GoogleSQLParserCASCADE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserSET_SYMBOL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3737)
			p.Match(GoogleSQLParserSET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3738)
			p.Match(GoogleSQLParserNULL_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_foreign_key_matchContext is an interface to support dynamic dispatch.
type IOpt_foreign_key_matchContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MATCH_SYMBOL() antlr.TerminalNode
	Foreign_key_match_mode() IForeign_key_match_modeContext

	// IsOpt_foreign_key_matchContext differentiates from other interfaces.
	IsOpt_foreign_key_matchContext()
}

type Opt_foreign_key_matchContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_foreign_key_matchContext() *Opt_foreign_key_matchContext {
	var p = new(Opt_foreign_key_matchContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_foreign_key_match
	return p
}

func InitEmptyOpt_foreign_key_matchContext(p *Opt_foreign_key_matchContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_foreign_key_match
}

func (*Opt_foreign_key_matchContext) IsOpt_foreign_key_matchContext() {}

func NewOpt_foreign_key_matchContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_foreign_key_matchContext {
	var p = new(Opt_foreign_key_matchContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_foreign_key_match

	return p
}

func (s *Opt_foreign_key_matchContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_foreign_key_matchContext) MATCH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMATCH_SYMBOL, 0)
}

func (s *Opt_foreign_key_matchContext) Foreign_key_match_mode() IForeign_key_match_modeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeign_key_match_modeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeign_key_match_modeContext)
}

func (s *Opt_foreign_key_matchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_foreign_key_matchContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_foreign_key_matchContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_foreign_key_match(s)
	}
}

func (s *Opt_foreign_key_matchContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_foreign_key_match(s)
	}
}

func (s *Opt_foreign_key_matchContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_foreign_key_match(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_foreign_key_match() (localctx IOpt_foreign_key_matchContext) {
	localctx = NewOpt_foreign_key_matchContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 550, GoogleSQLParserRULE_opt_foreign_key_match)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3741)
		p.Match(GoogleSQLParserMATCH_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3742)
		p.Foreign_key_match_mode()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IForeign_key_match_modeContext is an interface to support dynamic dispatch.
type IForeign_key_match_modeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SIMPLE_SYMBOL() antlr.TerminalNode
	FULL_SYMBOL() antlr.TerminalNode
	NOT_SYMBOL() antlr.TerminalNode
	DISTINCT_SYMBOL() antlr.TerminalNode

	// IsForeign_key_match_modeContext differentiates from other interfaces.
	IsForeign_key_match_modeContext()
}

type Foreign_key_match_modeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForeign_key_match_modeContext() *Foreign_key_match_modeContext {
	var p = new(Foreign_key_match_modeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_match_mode
	return p
}

func InitEmptyForeign_key_match_modeContext(p *Foreign_key_match_modeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_match_mode
}

func (*Foreign_key_match_modeContext) IsForeign_key_match_modeContext() {}

func NewForeign_key_match_modeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Foreign_key_match_modeContext {
	var p = new(Foreign_key_match_modeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_foreign_key_match_mode

	return p
}

func (s *Foreign_key_match_modeContext) GetParser() antlr.Parser { return s.parser }

func (s *Foreign_key_match_modeContext) SIMPLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSIMPLE_SYMBOL, 0)
}

func (s *Foreign_key_match_modeContext) FULL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFULL_SYMBOL, 0)
}

func (s *Foreign_key_match_modeContext) NOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNOT_SYMBOL, 0)
}

func (s *Foreign_key_match_modeContext) DISTINCT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDISTINCT_SYMBOL, 0)
}

func (s *Foreign_key_match_modeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Foreign_key_match_modeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Foreign_key_match_modeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterForeign_key_match_mode(s)
	}
}

func (s *Foreign_key_match_modeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitForeign_key_match_mode(s)
	}
}

func (s *Foreign_key_match_modeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitForeign_key_match_mode(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Foreign_key_match_mode() (localctx IForeign_key_match_modeContext) {
	localctx = NewForeign_key_match_modeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 552, GoogleSQLParserRULE_foreign_key_match_mode)
	p.SetState(3748)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserSIMPLE_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3744)
			p.Match(GoogleSQLParserSIMPLE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserFULL_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3745)
			p.Match(GoogleSQLParserFULL_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserNOT_SYMBOL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3746)
			p.Match(GoogleSQLParserNOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3747)
			p.Match(GoogleSQLParserDISTINCT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumn_listContext is an interface to support dynamic dispatch.
type IColumn_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsColumn_listContext differentiates from other interfaces.
	IsColumn_listContext()
}

type Column_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_listContext() *Column_listContext {
	var p = new(Column_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_column_list
	return p
}

func InitEmptyColumn_listContext(p *Column_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_column_list
}

func (*Column_listContext) IsColumn_listContext() {}

func NewColumn_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_listContext {
	var p = new(Column_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_column_list

	return p
}

func (s *Column_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_listContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Column_listContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Column_listContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Column_listContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Column_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Column_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Column_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterColumn_list(s)
	}
}

func (s *Column_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitColumn_list(s)
	}
}

func (s *Column_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitColumn_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Column_list() (localctx IColumn_listContext) {
	localctx = NewColumn_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 554, GoogleSQLParserRULE_column_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3750)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3751)
		p.Identifier()
	}
	p.SetState(3756)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(3752)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3753)
			p.Identifier()
		}

		p.SetState(3758)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(3759)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_options_listContext is an interface to support dynamic dispatch.
type IOpt_options_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OPTIONS_SYMBOL() antlr.TerminalNode
	Options_list() IOptions_listContext

	// IsOpt_options_listContext differentiates from other interfaces.
	IsOpt_options_listContext()
}

type Opt_options_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_options_listContext() *Opt_options_listContext {
	var p = new(Opt_options_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_options_list
	return p
}

func InitEmptyOpt_options_listContext(p *Opt_options_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_options_list
}

func (*Opt_options_listContext) IsOpt_options_listContext() {}

func NewOpt_options_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_options_listContext {
	var p = new(Opt_options_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_options_list

	return p
}

func (s *Opt_options_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_options_listContext) OPTIONS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOPTIONS_SYMBOL, 0)
}

func (s *Opt_options_listContext) Options_list() IOptions_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOptions_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOptions_listContext)
}

func (s *Opt_options_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_options_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_options_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_options_list(s)
	}
}

func (s *Opt_options_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_options_list(s)
	}
}

func (s *Opt_options_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_options_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_options_list() (localctx IOpt_options_listContext) {
	localctx = NewOpt_options_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 556, GoogleSQLParserRULE_opt_options_list)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3761)
		p.Match(GoogleSQLParserOPTIONS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3762)
		p.Options_list()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConstraint_enforcementContext is an interface to support dynamic dispatch.
type IConstraint_enforcementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ENFORCED_SYMBOL() antlr.TerminalNode
	NOT_SYMBOL() antlr.TerminalNode

	// IsConstraint_enforcementContext differentiates from other interfaces.
	IsConstraint_enforcementContext()
}

type Constraint_enforcementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstraint_enforcementContext() *Constraint_enforcementContext {
	var p = new(Constraint_enforcementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_constraint_enforcement
	return p
}

func InitEmptyConstraint_enforcementContext(p *Constraint_enforcementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_constraint_enforcement
}

func (*Constraint_enforcementContext) IsConstraint_enforcementContext() {}

func NewConstraint_enforcementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Constraint_enforcementContext {
	var p = new(Constraint_enforcementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_constraint_enforcement

	return p
}

func (s *Constraint_enforcementContext) GetParser() antlr.Parser { return s.parser }

func (s *Constraint_enforcementContext) ENFORCED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserENFORCED_SYMBOL, 0)
}

func (s *Constraint_enforcementContext) NOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNOT_SYMBOL, 0)
}

func (s *Constraint_enforcementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Constraint_enforcementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Constraint_enforcementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterConstraint_enforcement(s)
	}
}

func (s *Constraint_enforcementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitConstraint_enforcement(s)
	}
}

func (s *Constraint_enforcementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitConstraint_enforcement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Constraint_enforcement() (localctx IConstraint_enforcementContext) {
	localctx = NewConstraint_enforcementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 558, GoogleSQLParserRULE_constraint_enforcement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3765)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserNOT_SYMBOL {
		{
			p.SetState(3764)
			p.Match(GoogleSQLParserNOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(3767)
		p.Match(GoogleSQLParserENFORCED_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGeneric_entity_bodyContext is an interface to support dynamic dispatch.
type IGeneric_entity_bodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Json_literal() IJson_literalContext
	String_literal() IString_literalContext

	// IsGeneric_entity_bodyContext differentiates from other interfaces.
	IsGeneric_entity_bodyContext()
}

type Generic_entity_bodyContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGeneric_entity_bodyContext() *Generic_entity_bodyContext {
	var p = new(Generic_entity_bodyContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_generic_entity_body
	return p
}

func InitEmptyGeneric_entity_bodyContext(p *Generic_entity_bodyContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_generic_entity_body
}

func (*Generic_entity_bodyContext) IsGeneric_entity_bodyContext() {}

func NewGeneric_entity_bodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Generic_entity_bodyContext {
	var p = new(Generic_entity_bodyContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_generic_entity_body

	return p
}

func (s *Generic_entity_bodyContext) GetParser() antlr.Parser { return s.parser }

func (s *Generic_entity_bodyContext) Json_literal() IJson_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJson_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJson_literalContext)
}

func (s *Generic_entity_bodyContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Generic_entity_bodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Generic_entity_bodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Generic_entity_bodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGeneric_entity_body(s)
	}
}

func (s *Generic_entity_bodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGeneric_entity_body(s)
	}
}

func (s *Generic_entity_bodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGeneric_entity_body(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Generic_entity_body() (localctx IGeneric_entity_bodyContext) {
	localctx = NewGeneric_entity_bodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 560, GoogleSQLParserRULE_generic_entity_body)
	p.SetState(3771)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserJSON_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3769)
			p.Json_literal()
		}

	case GoogleSQLParserSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3770)
			p.string_literal(0)
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_if_existsContext is an interface to support dynamic dispatch.
type IOpt_if_existsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IF_SYMBOL() antlr.TerminalNode
	EXISTS_SYMBOL() antlr.TerminalNode

	// IsOpt_if_existsContext differentiates from other interfaces.
	IsOpt_if_existsContext()
}

type Opt_if_existsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_if_existsContext() *Opt_if_existsContext {
	var p = new(Opt_if_existsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_if_exists
	return p
}

func InitEmptyOpt_if_existsContext(p *Opt_if_existsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_if_exists
}

func (*Opt_if_existsContext) IsOpt_if_existsContext() {}

func NewOpt_if_existsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_if_existsContext {
	var p = new(Opt_if_existsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_if_exists

	return p
}

func (s *Opt_if_existsContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_if_existsContext) IF_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIF_SYMBOL, 0)
}

func (s *Opt_if_existsContext) EXISTS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXISTS_SYMBOL, 0)
}

func (s *Opt_if_existsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_if_existsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_if_existsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_if_exists(s)
	}
}

func (s *Opt_if_existsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_if_exists(s)
	}
}

func (s *Opt_if_existsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_if_exists(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_if_exists() (localctx IOpt_if_existsContext) {
	localctx = NewOpt_if_existsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 562, GoogleSQLParserRULE_opt_if_exists)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3773)
		p.Match(GoogleSQLParserIF_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3774)
		p.Match(GoogleSQLParserEXISTS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_or_table_functionContext is an interface to support dynamic dispatch.
type ITable_or_table_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TABLE_SYMBOL() antlr.TerminalNode
	FUNCTION_SYMBOL() antlr.TerminalNode

	// IsTable_or_table_functionContext differentiates from other interfaces.
	IsTable_or_table_functionContext()
}

type Table_or_table_functionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_or_table_functionContext() *Table_or_table_functionContext {
	var p = new(Table_or_table_functionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_or_table_function
	return p
}

func InitEmptyTable_or_table_functionContext(p *Table_or_table_functionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_or_table_function
}

func (*Table_or_table_functionContext) IsTable_or_table_functionContext() {}

func NewTable_or_table_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_or_table_functionContext {
	var p = new(Table_or_table_functionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_table_or_table_function

	return p
}

func (s *Table_or_table_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_or_table_functionContext) TABLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTABLE_SYMBOL, 0)
}

func (s *Table_or_table_functionContext) FUNCTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFUNCTION_SYMBOL, 0)
}

func (s *Table_or_table_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_or_table_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_or_table_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTable_or_table_function(s)
	}
}

func (s *Table_or_table_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTable_or_table_function(s)
	}
}

func (s *Table_or_table_functionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTable_or_table_function(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Table_or_table_function() (localctx ITable_or_table_functionContext) {
	localctx = NewTable_or_table_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 564, GoogleSQLParserRULE_table_or_table_function)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3776)
		p.Match(GoogleSQLParserTABLE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(3778)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 443, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3777)
			p.Match(GoogleSQLParserFUNCTION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQueryContext is an interface to support dynamic dispatch.
type IQueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Query_without_pipe_operators() IQuery_without_pipe_operatorsContext

	// IsQueryContext differentiates from other interfaces.
	IsQueryContext()
}

type QueryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQueryContext() *QueryContext {
	var p = new(QueryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query
	return p
}

func InitEmptyQueryContext(p *QueryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query
}

func (*QueryContext) IsQueryContext() {}

func NewQueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QueryContext {
	var p = new(QueryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_query

	return p
}

func (s *QueryContext) GetParser() antlr.Parser { return s.parser }

func (s *QueryContext) Query_without_pipe_operators() IQuery_without_pipe_operatorsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuery_without_pipe_operatorsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuery_without_pipe_operatorsContext)
}

func (s *QueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterQuery(s)
	}
}

func (s *QueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitQuery(s)
	}
}

func (s *QueryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitQuery(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Query() (localctx IQueryContext) {
	localctx = NewQueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 566, GoogleSQLParserRULE_query)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3780)
		p.Query_without_pipe_operators()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQuery_without_pipe_operatorsContext is an interface to support dynamic dispatch.
type IQuery_without_pipe_operatorsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	With_clause() IWith_clauseContext
	Query_primary_or_set_operation() IQuery_primary_or_set_operationContext
	Order_by_clause() IOrder_by_clauseContext
	Limit_offset_clause() ILimit_offset_clauseContext
	With_clause_with_trailing_comma() IWith_clause_with_trailing_commaContext
	Select_or_from_keyword() ISelect_or_from_keywordContext
	PIPE_SYMBOL() antlr.TerminalNode
	From_clause() IFrom_clauseContext
	Bad_keyword_after_from_query() IBad_keyword_after_from_queryContext
	Bad_keyword_after_from_query_allows_parens() IBad_keyword_after_from_query_allows_parensContext

	// IsQuery_without_pipe_operatorsContext differentiates from other interfaces.
	IsQuery_without_pipe_operatorsContext()
}

type Query_without_pipe_operatorsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuery_without_pipe_operatorsContext() *Query_without_pipe_operatorsContext {
	var p = new(Query_without_pipe_operatorsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_without_pipe_operators
	return p
}

func InitEmptyQuery_without_pipe_operatorsContext(p *Query_without_pipe_operatorsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_without_pipe_operators
}

func (*Query_without_pipe_operatorsContext) IsQuery_without_pipe_operatorsContext() {}

func NewQuery_without_pipe_operatorsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Query_without_pipe_operatorsContext {
	var p = new(Query_without_pipe_operatorsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_query_without_pipe_operators

	return p
}

func (s *Query_without_pipe_operatorsContext) GetParser() antlr.Parser { return s.parser }

func (s *Query_without_pipe_operatorsContext) With_clause() IWith_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Query_without_pipe_operatorsContext) Query_primary_or_set_operation() IQuery_primary_or_set_operationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuery_primary_or_set_operationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuery_primary_or_set_operationContext)
}

func (s *Query_without_pipe_operatorsContext) Order_by_clause() IOrder_by_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrder_by_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrder_by_clauseContext)
}

func (s *Query_without_pipe_operatorsContext) Limit_offset_clause() ILimit_offset_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILimit_offset_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILimit_offset_clauseContext)
}

func (s *Query_without_pipe_operatorsContext) With_clause_with_trailing_comma() IWith_clause_with_trailing_commaContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_clause_with_trailing_commaContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_clause_with_trailing_commaContext)
}

func (s *Query_without_pipe_operatorsContext) Select_or_from_keyword() ISelect_or_from_keywordContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_or_from_keywordContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_or_from_keywordContext)
}

func (s *Query_without_pipe_operatorsContext) PIPE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPIPE_SYMBOL, 0)
}

func (s *Query_without_pipe_operatorsContext) From_clause() IFrom_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrom_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrom_clauseContext)
}

func (s *Query_without_pipe_operatorsContext) Bad_keyword_after_from_query() IBad_keyword_after_from_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBad_keyword_after_from_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBad_keyword_after_from_queryContext)
}

func (s *Query_without_pipe_operatorsContext) Bad_keyword_after_from_query_allows_parens() IBad_keyword_after_from_query_allows_parensContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBad_keyword_after_from_query_allows_parensContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBad_keyword_after_from_query_allows_parensContext)
}

func (s *Query_without_pipe_operatorsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_without_pipe_operatorsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Query_without_pipe_operatorsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterQuery_without_pipe_operators(s)
	}
}

func (s *Query_without_pipe_operatorsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitQuery_without_pipe_operators(s)
	}
}

func (s *Query_without_pipe_operatorsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitQuery_without_pipe_operators(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Query_without_pipe_operators() (localctx IQuery_without_pipe_operatorsContext) {
	localctx = NewQuery_without_pipe_operatorsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 568, GoogleSQLParserRULE_query_without_pipe_operators)
	var _la int

	p.SetState(3825)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 451, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3782)
			p.With_clause()
		}
		{
			p.SetState(3783)
			p.Query_primary_or_set_operation()
		}
		p.SetState(3785)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserORDER_SYMBOL {
			{
				p.SetState(3784)
				p.Order_by_clause()
			}

		}
		p.SetState(3788)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserLIMIT_SYMBOL {
			{
				p.SetState(3787)
				p.Limit_offset_clause()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3790)
			p.With_clause_with_trailing_comma()
		}
		{
			p.SetState(3791)
			p.Select_or_from_keyword()
		}
		p.NotifyErrorListeners("Syntax error: Trailing comma after the WITH clause before the main query is not allowed", nil, nil)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3794)
			p.With_clause()
		}
		{
			p.SetState(3795)
			p.Match(GoogleSQLParserPIPE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Syntax error: A pipe operator cannot follow the WITH clause before the main query; The main query usually starts with SELECT or FROM here", nil, nil)

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3798)
			p.Query_primary_or_set_operation()
		}
		p.SetState(3800)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserORDER_SYMBOL {
			{
				p.SetState(3799)
				p.Order_by_clause()
			}

		}
		p.SetState(3803)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserLIMIT_SYMBOL {
			{
				p.SetState(3802)
				p.Limit_offset_clause()
			}

		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		p.SetState(3806)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserWITH_SYMBOL {
			{
				p.SetState(3805)
				p.With_clause()
			}

		}
		{
			p.SetState(3808)
			p.From_clause()
		}
		p.NotifyErrorListeners("Syntax error: Unexpected FROM", nil, nil)

	case 6:
		p.EnterOuterAlt(localctx, 6)
		p.SetState(3812)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserWITH_SYMBOL {
			{
				p.SetState(3811)
				p.With_clause()
			}

		}
		{
			p.SetState(3814)
			p.From_clause()
		}
		{
			p.SetState(3815)
			p.Bad_keyword_after_from_query()
		}
		p.NotifyErrorListeners("Syntax error: <KEYWORD> not supported after FROM query; Consider using pipe operator `|>` ", nil, nil)

	case 7:
		p.EnterOuterAlt(localctx, 7)
		p.SetState(3819)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserWITH_SYMBOL {
			{
				p.SetState(3818)
				p.With_clause()
			}

		}
		{
			p.SetState(3821)
			p.From_clause()
		}
		{
			p.SetState(3822)
			p.Bad_keyword_after_from_query_allows_parens()
		}
		p.NotifyErrorListeners("Syntax error: <KEYWORD> not supported after FROM query; Consider using pipe operator `|>` ", nil, nil)

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBad_keyword_after_from_queryContext is an interface to support dynamic dispatch.
type IBad_keyword_after_from_queryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WHERE_SYMBOL() antlr.TerminalNode
	SELECT_SYMBOL() antlr.TerminalNode
	GROUP_SYMBOL() antlr.TerminalNode

	// IsBad_keyword_after_from_queryContext differentiates from other interfaces.
	IsBad_keyword_after_from_queryContext()
}

type Bad_keyword_after_from_queryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBad_keyword_after_from_queryContext() *Bad_keyword_after_from_queryContext {
	var p = new(Bad_keyword_after_from_queryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_bad_keyword_after_from_query
	return p
}

func InitEmptyBad_keyword_after_from_queryContext(p *Bad_keyword_after_from_queryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_bad_keyword_after_from_query
}

func (*Bad_keyword_after_from_queryContext) IsBad_keyword_after_from_queryContext() {}

func NewBad_keyword_after_from_queryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bad_keyword_after_from_queryContext {
	var p = new(Bad_keyword_after_from_queryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_bad_keyword_after_from_query

	return p
}

func (s *Bad_keyword_after_from_queryContext) GetParser() antlr.Parser { return s.parser }

func (s *Bad_keyword_after_from_queryContext) WHERE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWHERE_SYMBOL, 0)
}

func (s *Bad_keyword_after_from_queryContext) SELECT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSELECT_SYMBOL, 0)
}

func (s *Bad_keyword_after_from_queryContext) GROUP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGROUP_SYMBOL, 0)
}

func (s *Bad_keyword_after_from_queryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bad_keyword_after_from_queryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bad_keyword_after_from_queryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBad_keyword_after_from_query(s)
	}
}

func (s *Bad_keyword_after_from_queryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBad_keyword_after_from_query(s)
	}
}

func (s *Bad_keyword_after_from_queryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBad_keyword_after_from_query(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Bad_keyword_after_from_query() (localctx IBad_keyword_after_from_queryContext) {
	localctx = NewBad_keyword_after_from_queryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 570, GoogleSQLParserRULE_bad_keyword_after_from_query)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3827)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserSELECT_SYMBOL || _la == GoogleSQLParserGROUP_SYMBOL || _la == GoogleSQLParserWHERE_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBad_keyword_after_from_query_allows_parensContext is an interface to support dynamic dispatch.
type IBad_keyword_after_from_query_allows_parensContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ORDER_SYMBOL() antlr.TerminalNode
	UNION_SYMBOL() antlr.TerminalNode
	INTERSECT_SYMBOL() antlr.TerminalNode
	EXCEPT_SYMBOL() antlr.TerminalNode
	LIMIT_SYMBOL() antlr.TerminalNode

	// IsBad_keyword_after_from_query_allows_parensContext differentiates from other interfaces.
	IsBad_keyword_after_from_query_allows_parensContext()
}

type Bad_keyword_after_from_query_allows_parensContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBad_keyword_after_from_query_allows_parensContext() *Bad_keyword_after_from_query_allows_parensContext {
	var p = new(Bad_keyword_after_from_query_allows_parensContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_bad_keyword_after_from_query_allows_parens
	return p
}

func InitEmptyBad_keyword_after_from_query_allows_parensContext(p *Bad_keyword_after_from_query_allows_parensContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_bad_keyword_after_from_query_allows_parens
}

func (*Bad_keyword_after_from_query_allows_parensContext) IsBad_keyword_after_from_query_allows_parensContext() {
}

func NewBad_keyword_after_from_query_allows_parensContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bad_keyword_after_from_query_allows_parensContext {
	var p = new(Bad_keyword_after_from_query_allows_parensContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_bad_keyword_after_from_query_allows_parens

	return p
}

func (s *Bad_keyword_after_from_query_allows_parensContext) GetParser() antlr.Parser { return s.parser }

func (s *Bad_keyword_after_from_query_allows_parensContext) ORDER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserORDER_SYMBOL, 0)
}

func (s *Bad_keyword_after_from_query_allows_parensContext) UNION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNION_SYMBOL, 0)
}

func (s *Bad_keyword_after_from_query_allows_parensContext) INTERSECT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINTERSECT_SYMBOL, 0)
}

func (s *Bad_keyword_after_from_query_allows_parensContext) EXCEPT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXCEPT_SYMBOL, 0)
}

func (s *Bad_keyword_after_from_query_allows_parensContext) LIMIT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLIMIT_SYMBOL, 0)
}

func (s *Bad_keyword_after_from_query_allows_parensContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bad_keyword_after_from_query_allows_parensContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bad_keyword_after_from_query_allows_parensContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBad_keyword_after_from_query_allows_parens(s)
	}
}

func (s *Bad_keyword_after_from_query_allows_parensContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBad_keyword_after_from_query_allows_parens(s)
	}
}

func (s *Bad_keyword_after_from_query_allows_parensContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBad_keyword_after_from_query_allows_parens(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Bad_keyword_after_from_query_allows_parens() (localctx IBad_keyword_after_from_query_allows_parensContext) {
	localctx = NewBad_keyword_after_from_query_allows_parensContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 572, GoogleSQLParserRULE_bad_keyword_after_from_query_allows_parens)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3829)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-66)) & ^0x3f) == 0 && ((int64(1)<<(_la-66))&4295230721) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWith_clause_with_trailing_commaContext is an interface to support dynamic dispatch.
type IWith_clause_with_trailing_commaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	With_clause() IWith_clauseContext
	COMMA_SYMBOL() antlr.TerminalNode

	// IsWith_clause_with_trailing_commaContext differentiates from other interfaces.
	IsWith_clause_with_trailing_commaContext()
}

type With_clause_with_trailing_commaContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_clause_with_trailing_commaContext() *With_clause_with_trailing_commaContext {
	var p = new(With_clause_with_trailing_commaContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_clause_with_trailing_comma
	return p
}

func InitEmptyWith_clause_with_trailing_commaContext(p *With_clause_with_trailing_commaContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_clause_with_trailing_comma
}

func (*With_clause_with_trailing_commaContext) IsWith_clause_with_trailing_commaContext() {}

func NewWith_clause_with_trailing_commaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_clause_with_trailing_commaContext {
	var p = new(With_clause_with_trailing_commaContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_with_clause_with_trailing_comma

	return p
}

func (s *With_clause_with_trailing_commaContext) GetParser() antlr.Parser { return s.parser }

func (s *With_clause_with_trailing_commaContext) With_clause() IWith_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *With_clause_with_trailing_commaContext) COMMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, 0)
}

func (s *With_clause_with_trailing_commaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_clause_with_trailing_commaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_clause_with_trailing_commaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWith_clause_with_trailing_comma(s)
	}
}

func (s *With_clause_with_trailing_commaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWith_clause_with_trailing_comma(s)
	}
}

func (s *With_clause_with_trailing_commaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWith_clause_with_trailing_comma(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) With_clause_with_trailing_comma() (localctx IWith_clause_with_trailing_commaContext) {
	localctx = NewWith_clause_with_trailing_commaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 574, GoogleSQLParserRULE_with_clause_with_trailing_comma)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3831)
		p.With_clause()
	}
	{
		p.SetState(3832)
		p.Match(GoogleSQLParserCOMMA_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelect_or_from_keywordContext is an interface to support dynamic dispatch.
type ISelect_or_from_keywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SELECT_SYMBOL() antlr.TerminalNode
	FROM_SYMBOL() antlr.TerminalNode

	// IsSelect_or_from_keywordContext differentiates from other interfaces.
	IsSelect_or_from_keywordContext()
}

type Select_or_from_keywordContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_or_from_keywordContext() *Select_or_from_keywordContext {
	var p = new(Select_or_from_keywordContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_or_from_keyword
	return p
}

func InitEmptySelect_or_from_keywordContext(p *Select_or_from_keywordContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_or_from_keyword
}

func (*Select_or_from_keywordContext) IsSelect_or_from_keywordContext() {}

func NewSelect_or_from_keywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_or_from_keywordContext {
	var p = new(Select_or_from_keywordContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_select_or_from_keyword

	return p
}

func (s *Select_or_from_keywordContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_or_from_keywordContext) SELECT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSELECT_SYMBOL, 0)
}

func (s *Select_or_from_keywordContext) FROM_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFROM_SYMBOL, 0)
}

func (s *Select_or_from_keywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_or_from_keywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_or_from_keywordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSelect_or_from_keyword(s)
	}
}

func (s *Select_or_from_keywordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSelect_or_from_keyword(s)
	}
}

func (s *Select_or_from_keywordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSelect_or_from_keyword(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Select_or_from_keyword() (localctx ISelect_or_from_keywordContext) {
	localctx = NewSelect_or_from_keywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 576, GoogleSQLParserRULE_select_or_from_keyword)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3834)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserFROM_SYMBOL || _la == GoogleSQLParserSELECT_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQuery_primary_or_set_operationContext is an interface to support dynamic dispatch.
type IQuery_primary_or_set_operationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Query_primary() IQuery_primaryContext
	Query_set_operation() IQuery_set_operationContext

	// IsQuery_primary_or_set_operationContext differentiates from other interfaces.
	IsQuery_primary_or_set_operationContext()
}

type Query_primary_or_set_operationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuery_primary_or_set_operationContext() *Query_primary_or_set_operationContext {
	var p = new(Query_primary_or_set_operationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_primary_or_set_operation
	return p
}

func InitEmptyQuery_primary_or_set_operationContext(p *Query_primary_or_set_operationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_primary_or_set_operation
}

func (*Query_primary_or_set_operationContext) IsQuery_primary_or_set_operationContext() {}

func NewQuery_primary_or_set_operationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Query_primary_or_set_operationContext {
	var p = new(Query_primary_or_set_operationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_query_primary_or_set_operation

	return p
}

func (s *Query_primary_or_set_operationContext) GetParser() antlr.Parser { return s.parser }

func (s *Query_primary_or_set_operationContext) Query_primary() IQuery_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuery_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuery_primaryContext)
}

func (s *Query_primary_or_set_operationContext) Query_set_operation() IQuery_set_operationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuery_set_operationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuery_set_operationContext)
}

func (s *Query_primary_or_set_operationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_primary_or_set_operationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Query_primary_or_set_operationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterQuery_primary_or_set_operation(s)
	}
}

func (s *Query_primary_or_set_operationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitQuery_primary_or_set_operation(s)
	}
}

func (s *Query_primary_or_set_operationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitQuery_primary_or_set_operation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Query_primary_or_set_operation() (localctx IQuery_primary_or_set_operationContext) {
	localctx = NewQuery_primary_or_set_operationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 578, GoogleSQLParserRULE_query_primary_or_set_operation)
	p.SetState(3838)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 452, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3836)
			p.Query_primary()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3837)
			p.Query_set_operation()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQuery_set_operationContext is an interface to support dynamic dispatch.
type IQuery_set_operationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Query_set_operation_prefix() IQuery_set_operation_prefixContext

	// IsQuery_set_operationContext differentiates from other interfaces.
	IsQuery_set_operationContext()
}

type Query_set_operationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuery_set_operationContext() *Query_set_operationContext {
	var p = new(Query_set_operationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_set_operation
	return p
}

func InitEmptyQuery_set_operationContext(p *Query_set_operationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_set_operation
}

func (*Query_set_operationContext) IsQuery_set_operationContext() {}

func NewQuery_set_operationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Query_set_operationContext {
	var p = new(Query_set_operationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_query_set_operation

	return p
}

func (s *Query_set_operationContext) GetParser() antlr.Parser { return s.parser }

func (s *Query_set_operationContext) Query_set_operation_prefix() IQuery_set_operation_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuery_set_operation_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuery_set_operation_prefixContext)
}

func (s *Query_set_operationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_set_operationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Query_set_operationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterQuery_set_operation(s)
	}
}

func (s *Query_set_operationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitQuery_set_operation(s)
	}
}

func (s *Query_set_operationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitQuery_set_operation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Query_set_operation() (localctx IQuery_set_operationContext) {
	localctx = NewQuery_set_operationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 580, GoogleSQLParserRULE_query_set_operation)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3840)
		p.query_set_operation_prefix(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQuery_set_operation_prefixContext is an interface to support dynamic dispatch.
type IQuery_set_operation_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Query_primary() IQuery_primaryContext
	AllQuery_set_operation_item() []IQuery_set_operation_itemContext
	Query_set_operation_item(i int) IQuery_set_operation_itemContext
	Set_operation_metadata() ISet_operation_metadataContext
	FROM_SYMBOL() antlr.TerminalNode
	Query_set_operation_prefix() IQuery_set_operation_prefixContext

	// IsQuery_set_operation_prefixContext differentiates from other interfaces.
	IsQuery_set_operation_prefixContext()
}

type Query_set_operation_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuery_set_operation_prefixContext() *Query_set_operation_prefixContext {
	var p = new(Query_set_operation_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_set_operation_prefix
	return p
}

func InitEmptyQuery_set_operation_prefixContext(p *Query_set_operation_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_set_operation_prefix
}

func (*Query_set_operation_prefixContext) IsQuery_set_operation_prefixContext() {}

func NewQuery_set_operation_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Query_set_operation_prefixContext {
	var p = new(Query_set_operation_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_query_set_operation_prefix

	return p
}

func (s *Query_set_operation_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Query_set_operation_prefixContext) Query_primary() IQuery_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuery_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuery_primaryContext)
}

func (s *Query_set_operation_prefixContext) AllQuery_set_operation_item() []IQuery_set_operation_itemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IQuery_set_operation_itemContext); ok {
			len++
		}
	}

	tst := make([]IQuery_set_operation_itemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IQuery_set_operation_itemContext); ok {
			tst[i] = t.(IQuery_set_operation_itemContext)
			i++
		}
	}

	return tst
}

func (s *Query_set_operation_prefixContext) Query_set_operation_item(i int) IQuery_set_operation_itemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuery_set_operation_itemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuery_set_operation_itemContext)
}

func (s *Query_set_operation_prefixContext) Set_operation_metadata() ISet_operation_metadataContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISet_operation_metadataContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISet_operation_metadataContext)
}

func (s *Query_set_operation_prefixContext) FROM_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFROM_SYMBOL, 0)
}

func (s *Query_set_operation_prefixContext) Query_set_operation_prefix() IQuery_set_operation_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuery_set_operation_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuery_set_operation_prefixContext)
}

func (s *Query_set_operation_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_set_operation_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Query_set_operation_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterQuery_set_operation_prefix(s)
	}
}

func (s *Query_set_operation_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitQuery_set_operation_prefix(s)
	}
}

func (s *Query_set_operation_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitQuery_set_operation_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Query_set_operation_prefix() (localctx IQuery_set_operation_prefixContext) {
	return p.query_set_operation_prefix(0)
}

func (p *GoogleSQLParser) query_set_operation_prefix(_p int) (localctx IQuery_set_operation_prefixContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewQuery_set_operation_prefixContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IQuery_set_operation_prefixContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 582
	p.EnterRecursionRule(localctx, 582, GoogleSQLParserRULE_query_set_operation_prefix, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3854)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 454, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(3843)
			p.Query_primary()
		}
		p.SetState(3845)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(3844)
					p.Query_set_operation_item()
				}

			default:
				p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				goto errorExit
			}

			p.SetState(3847)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 453, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

	case 2:
		{
			p.SetState(3849)
			p.Query_primary()
		}
		{
			p.SetState(3850)
			p.Set_operation_metadata()
		}
		{
			p.SetState(3851)
			p.Match(GoogleSQLParserFROM_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Syntax error: Unexpected FROM;FROM queries following a set operation must be parenthesized", nil, nil)

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(3863)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 455, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewQuery_set_operation_prefixContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_query_set_operation_prefix)
			p.SetState(3856)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				goto errorExit
			}
			{
				p.SetState(3857)
				p.Set_operation_metadata()
			}
			{
				p.SetState(3858)
				p.Match(GoogleSQLParserFROM_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.NotifyErrorListeners("Syntax error: Unexpected FROM;FROM queries following a set operation must be parenthesized", nil, nil)

		}
		p.SetState(3865)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 455, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQuery_set_operation_itemContext is an interface to support dynamic dispatch.
type IQuery_set_operation_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Set_operation_metadata() ISet_operation_metadataContext
	Query_primary() IQuery_primaryContext

	// IsQuery_set_operation_itemContext differentiates from other interfaces.
	IsQuery_set_operation_itemContext()
}

type Query_set_operation_itemContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuery_set_operation_itemContext() *Query_set_operation_itemContext {
	var p = new(Query_set_operation_itemContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_set_operation_item
	return p
}

func InitEmptyQuery_set_operation_itemContext(p *Query_set_operation_itemContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_set_operation_item
}

func (*Query_set_operation_itemContext) IsQuery_set_operation_itemContext() {}

func NewQuery_set_operation_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Query_set_operation_itemContext {
	var p = new(Query_set_operation_itemContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_query_set_operation_item

	return p
}

func (s *Query_set_operation_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Query_set_operation_itemContext) Set_operation_metadata() ISet_operation_metadataContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISet_operation_metadataContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISet_operation_metadataContext)
}

func (s *Query_set_operation_itemContext) Query_primary() IQuery_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuery_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuery_primaryContext)
}

func (s *Query_set_operation_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_set_operation_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Query_set_operation_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterQuery_set_operation_item(s)
	}
}

func (s *Query_set_operation_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitQuery_set_operation_item(s)
	}
}

func (s *Query_set_operation_itemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitQuery_set_operation_item(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Query_set_operation_item() (localctx IQuery_set_operation_itemContext) {
	localctx = NewQuery_set_operation_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 584, GoogleSQLParserRULE_query_set_operation_item)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3866)
		p.Set_operation_metadata()
	}
	{
		p.SetState(3867)
		p.Query_primary()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQuery_primaryContext is an interface to support dynamic dispatch.
type IQuery_primaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Select_() ISelectContext
	Parenthesized_query() IParenthesized_queryContext
	Opt_as_alias_with_required_as() IOpt_as_alias_with_required_asContext

	// IsQuery_primaryContext differentiates from other interfaces.
	IsQuery_primaryContext()
}

type Query_primaryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuery_primaryContext() *Query_primaryContext {
	var p = new(Query_primaryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_primary
	return p
}

func InitEmptyQuery_primaryContext(p *Query_primaryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_primary
}

func (*Query_primaryContext) IsQuery_primaryContext() {}

func NewQuery_primaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Query_primaryContext {
	var p = new(Query_primaryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_query_primary

	return p
}

func (s *Query_primaryContext) GetParser() antlr.Parser { return s.parser }

func (s *Query_primaryContext) Select_() ISelectContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelectContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelectContext)
}

func (s *Query_primaryContext) Parenthesized_query() IParenthesized_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesized_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesized_queryContext)
}

func (s *Query_primaryContext) Opt_as_alias_with_required_as() IOpt_as_alias_with_required_asContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_as_alias_with_required_asContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_as_alias_with_required_asContext)
}

func (s *Query_primaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_primaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Query_primaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterQuery_primary(s)
	}
}

func (s *Query_primaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitQuery_primary(s)
	}
}

func (s *Query_primaryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitQuery_primary(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Query_primary() (localctx IQuery_primaryContext) {
	localctx = NewQuery_primaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 586, GoogleSQLParserRULE_query_primary)
	p.SetState(3874)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserSELECT_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3869)
			p.Select_()
		}

	case GoogleSQLParserLR_BRACKET_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3870)
			p.Parenthesized_query()
		}
		p.SetState(3872)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 456, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3871)
				p.Opt_as_alias_with_required_as()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISet_operation_metadataContext is an interface to support dynamic dispatch.
type ISet_operation_metadataContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Query_set_operation_type() IQuery_set_operation_typeContext
	All_or_distinct() IAll_or_distinctContext
	Opt_corresponding_outer_mode() IOpt_corresponding_outer_modeContext
	Hint() IHintContext
	Opt_strict() IOpt_strictContext
	Opt_column_match_suffix() IOpt_column_match_suffixContext

	// IsSet_operation_metadataContext differentiates from other interfaces.
	IsSet_operation_metadataContext()
}

type Set_operation_metadataContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySet_operation_metadataContext() *Set_operation_metadataContext {
	var p = new(Set_operation_metadataContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_set_operation_metadata
	return p
}

func InitEmptySet_operation_metadataContext(p *Set_operation_metadataContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_set_operation_metadata
}

func (*Set_operation_metadataContext) IsSet_operation_metadataContext() {}

func NewSet_operation_metadataContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Set_operation_metadataContext {
	var p = new(Set_operation_metadataContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_set_operation_metadata

	return p
}

func (s *Set_operation_metadataContext) GetParser() antlr.Parser { return s.parser }

func (s *Set_operation_metadataContext) Query_set_operation_type() IQuery_set_operation_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuery_set_operation_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuery_set_operation_typeContext)
}

func (s *Set_operation_metadataContext) All_or_distinct() IAll_or_distinctContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAll_or_distinctContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAll_or_distinctContext)
}

func (s *Set_operation_metadataContext) Opt_corresponding_outer_mode() IOpt_corresponding_outer_modeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_corresponding_outer_modeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_corresponding_outer_modeContext)
}

func (s *Set_operation_metadataContext) Hint() IHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHintContext)
}

func (s *Set_operation_metadataContext) Opt_strict() IOpt_strictContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_strictContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_strictContext)
}

func (s *Set_operation_metadataContext) Opt_column_match_suffix() IOpt_column_match_suffixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_column_match_suffixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_column_match_suffixContext)
}

func (s *Set_operation_metadataContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Set_operation_metadataContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Set_operation_metadataContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSet_operation_metadata(s)
	}
}

func (s *Set_operation_metadataContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSet_operation_metadata(s)
	}
}

func (s *Set_operation_metadataContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSet_operation_metadata(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Set_operation_metadata() (localctx ISet_operation_metadataContext) {
	localctx = NewSet_operation_metadataContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 588, GoogleSQLParserRULE_set_operation_metadata)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3877)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-70)) & ^0x3f) == 0 && ((int64(1)<<(_la-70))&32801) != 0 {
		{
			p.SetState(3876)
			p.Opt_corresponding_outer_mode()
		}

	}
	{
		p.SetState(3879)
		p.Query_set_operation_type()
	}
	p.SetState(3881)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAT_SYMBOL {
		{
			p.SetState(3880)
			p.Hint()
		}

	}
	{
		p.SetState(3883)
		p.All_or_distinct()
	}
	p.SetState(3885)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserSTRICT_SYMBOL {
		{
			p.SetState(3884)
			p.Opt_strict()
		}

	}
	p.SetState(3888)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserCORRESPONDING_SYMBOL {
		{
			p.SetState(3887)
			p.Opt_column_match_suffix()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_column_match_suffixContext is an interface to support dynamic dispatch.
type IOpt_column_match_suffixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CORRESPONDING_SYMBOL() antlr.TerminalNode
	BY_SYMBOL() antlr.TerminalNode

	// IsOpt_column_match_suffixContext differentiates from other interfaces.
	IsOpt_column_match_suffixContext()
}

type Opt_column_match_suffixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_column_match_suffixContext() *Opt_column_match_suffixContext {
	var p = new(Opt_column_match_suffixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_column_match_suffix
	return p
}

func InitEmptyOpt_column_match_suffixContext(p *Opt_column_match_suffixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_column_match_suffix
}

func (*Opt_column_match_suffixContext) IsOpt_column_match_suffixContext() {}

func NewOpt_column_match_suffixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_column_match_suffixContext {
	var p = new(Opt_column_match_suffixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_column_match_suffix

	return p
}

func (s *Opt_column_match_suffixContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_column_match_suffixContext) CORRESPONDING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCORRESPONDING_SYMBOL, 0)
}

func (s *Opt_column_match_suffixContext) BY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBY_SYMBOL, 0)
}

func (s *Opt_column_match_suffixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_column_match_suffixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_column_match_suffixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_column_match_suffix(s)
	}
}

func (s *Opt_column_match_suffixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_column_match_suffix(s)
	}
}

func (s *Opt_column_match_suffixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_column_match_suffix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_column_match_suffix() (localctx IOpt_column_match_suffixContext) {
	localctx = NewOpt_column_match_suffixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 590, GoogleSQLParserRULE_opt_column_match_suffix)
	p.SetState(3893)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 462, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3890)
			p.Match(GoogleSQLParserCORRESPONDING_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3891)
			p.Match(GoogleSQLParserCORRESPONDING_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3892)
			p.Match(GoogleSQLParserBY_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_strictContext is an interface to support dynamic dispatch.
type IOpt_strictContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	STRICT_SYMBOL() antlr.TerminalNode

	// IsOpt_strictContext differentiates from other interfaces.
	IsOpt_strictContext()
}

type Opt_strictContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_strictContext() *Opt_strictContext {
	var p = new(Opt_strictContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_strict
	return p
}

func InitEmptyOpt_strictContext(p *Opt_strictContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_strict
}

func (*Opt_strictContext) IsOpt_strictContext() {}

func NewOpt_strictContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_strictContext {
	var p = new(Opt_strictContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_strict

	return p
}

func (s *Opt_strictContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_strictContext) STRICT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTRICT_SYMBOL, 0)
}

func (s *Opt_strictContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_strictContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_strictContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_strict(s)
	}
}

func (s *Opt_strictContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_strict(s)
	}
}

func (s *Opt_strictContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_strict(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_strict() (localctx IOpt_strictContext) {
	localctx = NewOpt_strictContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 592, GoogleSQLParserRULE_opt_strict)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3895)
		p.Match(GoogleSQLParserSTRICT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAll_or_distinctContext is an interface to support dynamic dispatch.
type IAll_or_distinctContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ALL_SYMBOL() antlr.TerminalNode
	DISTINCT_SYMBOL() antlr.TerminalNode

	// IsAll_or_distinctContext differentiates from other interfaces.
	IsAll_or_distinctContext()
}

type All_or_distinctContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAll_or_distinctContext() *All_or_distinctContext {
	var p = new(All_or_distinctContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_all_or_distinct
	return p
}

func InitEmptyAll_or_distinctContext(p *All_or_distinctContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_all_or_distinct
}

func (*All_or_distinctContext) IsAll_or_distinctContext() {}

func NewAll_or_distinctContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *All_or_distinctContext {
	var p = new(All_or_distinctContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_all_or_distinct

	return p
}

func (s *All_or_distinctContext) GetParser() antlr.Parser { return s.parser }

func (s *All_or_distinctContext) ALL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserALL_SYMBOL, 0)
}

func (s *All_or_distinctContext) DISTINCT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDISTINCT_SYMBOL, 0)
}

func (s *All_or_distinctContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *All_or_distinctContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *All_or_distinctContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAll_or_distinct(s)
	}
}

func (s *All_or_distinctContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAll_or_distinct(s)
	}
}

func (s *All_or_distinctContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAll_or_distinct(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) All_or_distinct() (localctx IAll_or_distinctContext) {
	localctx = NewAll_or_distinctContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 594, GoogleSQLParserRULE_all_or_distinct)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3897)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserALL_SYMBOL || _la == GoogleSQLParserDISTINCT_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQuery_set_operation_typeContext is an interface to support dynamic dispatch.
type IQuery_set_operation_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UNION_SYMBOL() antlr.TerminalNode
	EXCEPT_SYMBOL() antlr.TerminalNode
	INTERSECT_SYMBOL() antlr.TerminalNode

	// IsQuery_set_operation_typeContext differentiates from other interfaces.
	IsQuery_set_operation_typeContext()
}

type Query_set_operation_typeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuery_set_operation_typeContext() *Query_set_operation_typeContext {
	var p = new(Query_set_operation_typeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_set_operation_type
	return p
}

func InitEmptyQuery_set_operation_typeContext(p *Query_set_operation_typeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_set_operation_type
}

func (*Query_set_operation_typeContext) IsQuery_set_operation_typeContext() {}

func NewQuery_set_operation_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Query_set_operation_typeContext {
	var p = new(Query_set_operation_typeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_query_set_operation_type

	return p
}

func (s *Query_set_operation_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Query_set_operation_typeContext) UNION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNION_SYMBOL, 0)
}

func (s *Query_set_operation_typeContext) EXCEPT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXCEPT_SYMBOL, 0)
}

func (s *Query_set_operation_typeContext) INTERSECT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINTERSECT_SYMBOL, 0)
}

func (s *Query_set_operation_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_set_operation_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Query_set_operation_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterQuery_set_operation_type(s)
	}
}

func (s *Query_set_operation_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitQuery_set_operation_type(s)
	}
}

func (s *Query_set_operation_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitQuery_set_operation_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Query_set_operation_type() (localctx IQuery_set_operation_typeContext) {
	localctx = NewQuery_set_operation_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 596, GoogleSQLParserRULE_query_set_operation_type)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3899)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-66)) & ^0x3f) == 0 && ((int64(1)<<(_la-66))&4294967553) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_corresponding_outer_modeContext is an interface to support dynamic dispatch.
type IOpt_corresponding_outer_modeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FULL_SYMBOL() antlr.TerminalNode
	Opt_outer() IOpt_outerContext
	OUTER_SYMBOL() antlr.TerminalNode
	LEFT_SYMBOL() antlr.TerminalNode

	// IsOpt_corresponding_outer_modeContext differentiates from other interfaces.
	IsOpt_corresponding_outer_modeContext()
}

type Opt_corresponding_outer_modeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_corresponding_outer_modeContext() *Opt_corresponding_outer_modeContext {
	var p = new(Opt_corresponding_outer_modeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_corresponding_outer_mode
	return p
}

func InitEmptyOpt_corresponding_outer_modeContext(p *Opt_corresponding_outer_modeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_corresponding_outer_mode
}

func (*Opt_corresponding_outer_modeContext) IsOpt_corresponding_outer_modeContext() {}

func NewOpt_corresponding_outer_modeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_corresponding_outer_modeContext {
	var p = new(Opt_corresponding_outer_modeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_corresponding_outer_mode

	return p
}

func (s *Opt_corresponding_outer_modeContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_corresponding_outer_modeContext) FULL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFULL_SYMBOL, 0)
}

func (s *Opt_corresponding_outer_modeContext) Opt_outer() IOpt_outerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_outerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_outerContext)
}

func (s *Opt_corresponding_outer_modeContext) OUTER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOUTER_SYMBOL, 0)
}

func (s *Opt_corresponding_outer_modeContext) LEFT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLEFT_SYMBOL, 0)
}

func (s *Opt_corresponding_outer_modeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_corresponding_outer_modeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_corresponding_outer_modeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_corresponding_outer_mode(s)
	}
}

func (s *Opt_corresponding_outer_modeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_corresponding_outer_mode(s)
	}
}

func (s *Opt_corresponding_outer_modeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_corresponding_outer_mode(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_corresponding_outer_mode() (localctx IOpt_corresponding_outer_modeContext) {
	localctx = NewOpt_corresponding_outer_modeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 598, GoogleSQLParserRULE_opt_corresponding_outer_mode)
	var _la int

	p.SetState(3910)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserFULL_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3901)
			p.Match(GoogleSQLParserFULL_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(3903)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserOUTER_SYMBOL {
			{
				p.SetState(3902)
				p.Opt_outer()
			}

		}

	case GoogleSQLParserOUTER_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3905)
			p.Match(GoogleSQLParserOUTER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserLEFT_SYMBOL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3906)
			p.Match(GoogleSQLParserLEFT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(3908)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserOUTER_SYMBOL {
			{
				p.SetState(3907)
				p.Opt_outer()
			}

		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_outerContext is an interface to support dynamic dispatch.
type IOpt_outerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OUTER_SYMBOL() antlr.TerminalNode

	// IsOpt_outerContext differentiates from other interfaces.
	IsOpt_outerContext()
}

type Opt_outerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_outerContext() *Opt_outerContext {
	var p = new(Opt_outerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_outer
	return p
}

func InitEmptyOpt_outerContext(p *Opt_outerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_outer
}

func (*Opt_outerContext) IsOpt_outerContext() {}

func NewOpt_outerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_outerContext {
	var p = new(Opt_outerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_outer

	return p
}

func (s *Opt_outerContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_outerContext) OUTER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOUTER_SYMBOL, 0)
}

func (s *Opt_outerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_outerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_outerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_outer(s)
	}
}

func (s *Opt_outerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_outer(s)
	}
}

func (s *Opt_outerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_outer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_outer() (localctx IOpt_outerContext) {
	localctx = NewOpt_outerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 600, GoogleSQLParserRULE_opt_outer)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3912)
		p.Match(GoogleSQLParserOUTER_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWith_clauseContext is an interface to support dynamic dispatch.
type IWith_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WITH_SYMBOL() antlr.TerminalNode
	AllAliased_query() []IAliased_queryContext
	Aliased_query(i int) IAliased_queryContext
	RECURSIVE_SYMBOL() antlr.TerminalNode
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsWith_clauseContext differentiates from other interfaces.
	IsWith_clauseContext()
}

type With_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_clauseContext() *With_clauseContext {
	var p = new(With_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_clause
	return p
}

func InitEmptyWith_clauseContext(p *With_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_clause
}

func (*With_clauseContext) IsWith_clauseContext() {}

func NewWith_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_clauseContext {
	var p = new(With_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_with_clause

	return p
}

func (s *With_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *With_clauseContext) WITH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWITH_SYMBOL, 0)
}

func (s *With_clauseContext) AllAliased_query() []IAliased_queryContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAliased_queryContext); ok {
			len++
		}
	}

	tst := make([]IAliased_queryContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAliased_queryContext); ok {
			tst[i] = t.(IAliased_queryContext)
			i++
		}
	}

	return tst
}

func (s *With_clauseContext) Aliased_query(i int) IAliased_queryContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAliased_queryContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAliased_queryContext)
}

func (s *With_clauseContext) RECURSIVE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRECURSIVE_SYMBOL, 0)
}

func (s *With_clauseContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *With_clauseContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *With_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWith_clause(s)
	}
}

func (s *With_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWith_clause(s)
	}
}

func (s *With_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWith_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) With_clause() (localctx IWith_clauseContext) {
	localctx = NewWith_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 602, GoogleSQLParserRULE_with_clause)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3914)
		p.Match(GoogleSQLParserWITH_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(3916)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserRECURSIVE_SYMBOL {
		{
			p.SetState(3915)
			p.Match(GoogleSQLParserRECURSIVE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(3918)
		p.Aliased_query()
	}
	p.SetState(3923)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 467, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(3919)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(3920)
				p.Aliased_query()
			}

		}
		p.SetState(3925)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 467, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAliased_queryContext is an interface to support dynamic dispatch.
type IAliased_queryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	AS_SYMBOL() antlr.TerminalNode
	Parenthesized_query() IParenthesized_queryContext
	Opt_aliased_query_modifiers() IOpt_aliased_query_modifiersContext

	// IsAliased_queryContext differentiates from other interfaces.
	IsAliased_queryContext()
}

type Aliased_queryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAliased_queryContext() *Aliased_queryContext {
	var p = new(Aliased_queryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_aliased_query
	return p
}

func InitEmptyAliased_queryContext(p *Aliased_queryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_aliased_query
}

func (*Aliased_queryContext) IsAliased_queryContext() {}

func NewAliased_queryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Aliased_queryContext {
	var p = new(Aliased_queryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_aliased_query

	return p
}

func (s *Aliased_queryContext) GetParser() antlr.Parser { return s.parser }

func (s *Aliased_queryContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Aliased_queryContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Aliased_queryContext) Parenthesized_query() IParenthesized_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesized_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesized_queryContext)
}

func (s *Aliased_queryContext) Opt_aliased_query_modifiers() IOpt_aliased_query_modifiersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_aliased_query_modifiersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_aliased_query_modifiersContext)
}

func (s *Aliased_queryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Aliased_queryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Aliased_queryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAliased_query(s)
	}
}

func (s *Aliased_queryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAliased_query(s)
	}
}

func (s *Aliased_queryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAliased_query(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Aliased_query() (localctx IAliased_queryContext) {
	localctx = NewAliased_queryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 604, GoogleSQLParserRULE_aliased_query)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3926)
		p.Identifier()
	}
	{
		p.SetState(3927)
		p.Match(GoogleSQLParserAS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3928)
		p.Parenthesized_query()
	}
	p.SetState(3930)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserWITH_SYMBOL {
		{
			p.SetState(3929)
			p.Opt_aliased_query_modifiers()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_aliased_query_modifiersContext is an interface to support dynamic dispatch.
type IOpt_aliased_query_modifiersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Recursion_depth_modifier() IRecursion_depth_modifierContext

	// IsOpt_aliased_query_modifiersContext differentiates from other interfaces.
	IsOpt_aliased_query_modifiersContext()
}

type Opt_aliased_query_modifiersContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_aliased_query_modifiersContext() *Opt_aliased_query_modifiersContext {
	var p = new(Opt_aliased_query_modifiersContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_aliased_query_modifiers
	return p
}

func InitEmptyOpt_aliased_query_modifiersContext(p *Opt_aliased_query_modifiersContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_aliased_query_modifiers
}

func (*Opt_aliased_query_modifiersContext) IsOpt_aliased_query_modifiersContext() {}

func NewOpt_aliased_query_modifiersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_aliased_query_modifiersContext {
	var p = new(Opt_aliased_query_modifiersContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_aliased_query_modifiers

	return p
}

func (s *Opt_aliased_query_modifiersContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_aliased_query_modifiersContext) Recursion_depth_modifier() IRecursion_depth_modifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRecursion_depth_modifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRecursion_depth_modifierContext)
}

func (s *Opt_aliased_query_modifiersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_aliased_query_modifiersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_aliased_query_modifiersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_aliased_query_modifiers(s)
	}
}

func (s *Opt_aliased_query_modifiersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_aliased_query_modifiers(s)
	}
}

func (s *Opt_aliased_query_modifiersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_aliased_query_modifiers(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_aliased_query_modifiers() (localctx IOpt_aliased_query_modifiersContext) {
	localctx = NewOpt_aliased_query_modifiersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 606, GoogleSQLParserRULE_opt_aliased_query_modifiers)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3932)
		p.Recursion_depth_modifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRecursion_depth_modifierContext is an interface to support dynamic dispatch.
type IRecursion_depth_modifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WITH_SYMBOL() antlr.TerminalNode
	DEPTH_SYMBOL() antlr.TerminalNode
	Opt_as_alias_with_required_as() IOpt_as_alias_with_required_asContext
	BETWEEN_SYMBOL() antlr.TerminalNode
	AllPossibly_unbounded_int_literal_or_parameter() []IPossibly_unbounded_int_literal_or_parameterContext
	Possibly_unbounded_int_literal_or_parameter(i int) IPossibly_unbounded_int_literal_or_parameterContext
	AND_SYMBOL() antlr.TerminalNode
	MAX_SYMBOL() antlr.TerminalNode

	// IsRecursion_depth_modifierContext differentiates from other interfaces.
	IsRecursion_depth_modifierContext()
}

type Recursion_depth_modifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRecursion_depth_modifierContext() *Recursion_depth_modifierContext {
	var p = new(Recursion_depth_modifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_recursion_depth_modifier
	return p
}

func InitEmptyRecursion_depth_modifierContext(p *Recursion_depth_modifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_recursion_depth_modifier
}

func (*Recursion_depth_modifierContext) IsRecursion_depth_modifierContext() {}

func NewRecursion_depth_modifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Recursion_depth_modifierContext {
	var p = new(Recursion_depth_modifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_recursion_depth_modifier

	return p
}

func (s *Recursion_depth_modifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Recursion_depth_modifierContext) WITH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWITH_SYMBOL, 0)
}

func (s *Recursion_depth_modifierContext) DEPTH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDEPTH_SYMBOL, 0)
}

func (s *Recursion_depth_modifierContext) Opt_as_alias_with_required_as() IOpt_as_alias_with_required_asContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_as_alias_with_required_asContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_as_alias_with_required_asContext)
}

func (s *Recursion_depth_modifierContext) BETWEEN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBETWEEN_SYMBOL, 0)
}

func (s *Recursion_depth_modifierContext) AllPossibly_unbounded_int_literal_or_parameter() []IPossibly_unbounded_int_literal_or_parameterContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPossibly_unbounded_int_literal_or_parameterContext); ok {
			len++
		}
	}

	tst := make([]IPossibly_unbounded_int_literal_or_parameterContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPossibly_unbounded_int_literal_or_parameterContext); ok {
			tst[i] = t.(IPossibly_unbounded_int_literal_or_parameterContext)
			i++
		}
	}

	return tst
}

func (s *Recursion_depth_modifierContext) Possibly_unbounded_int_literal_or_parameter(i int) IPossibly_unbounded_int_literal_or_parameterContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPossibly_unbounded_int_literal_or_parameterContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPossibly_unbounded_int_literal_or_parameterContext)
}

func (s *Recursion_depth_modifierContext) AND_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAND_SYMBOL, 0)
}

func (s *Recursion_depth_modifierContext) MAX_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMAX_SYMBOL, 0)
}

func (s *Recursion_depth_modifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Recursion_depth_modifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Recursion_depth_modifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRecursion_depth_modifier(s)
	}
}

func (s *Recursion_depth_modifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRecursion_depth_modifier(s)
	}
}

func (s *Recursion_depth_modifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRecursion_depth_modifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Recursion_depth_modifier() (localctx IRecursion_depth_modifierContext) {
	localctx = NewRecursion_depth_modifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 608, GoogleSQLParserRULE_recursion_depth_modifier)
	var _la int

	p.SetState(3956)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 472, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3934)
			p.Match(GoogleSQLParserWITH_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3935)
			p.Match(GoogleSQLParserDEPTH_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(3937)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAS_SYMBOL {
			{
				p.SetState(3936)
				p.Opt_as_alias_with_required_as()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3939)
			p.Match(GoogleSQLParserWITH_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3940)
			p.Match(GoogleSQLParserDEPTH_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(3942)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAS_SYMBOL {
			{
				p.SetState(3941)
				p.Opt_as_alias_with_required_as()
			}

		}
		{
			p.SetState(3944)
			p.Match(GoogleSQLParserBETWEEN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3945)
			p.Possibly_unbounded_int_literal_or_parameter()
		}
		{
			p.SetState(3946)
			p.Match(GoogleSQLParserAND_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3947)
			p.Possibly_unbounded_int_literal_or_parameter()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3949)
			p.Match(GoogleSQLParserWITH_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3950)
			p.Match(GoogleSQLParserDEPTH_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(3952)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAS_SYMBOL {
			{
				p.SetState(3951)
				p.Opt_as_alias_with_required_as()
			}

		}
		{
			p.SetState(3954)
			p.Match(GoogleSQLParserMAX_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3955)
			p.Possibly_unbounded_int_literal_or_parameter()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPossibly_unbounded_int_literal_or_parameterContext is an interface to support dynamic dispatch.
type IPossibly_unbounded_int_literal_or_parameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Int_literal_or_parameter() IInt_literal_or_parameterContext
	UNBOUNDED_SYMBOL() antlr.TerminalNode

	// IsPossibly_unbounded_int_literal_or_parameterContext differentiates from other interfaces.
	IsPossibly_unbounded_int_literal_or_parameterContext()
}

type Possibly_unbounded_int_literal_or_parameterContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPossibly_unbounded_int_literal_or_parameterContext() *Possibly_unbounded_int_literal_or_parameterContext {
	var p = new(Possibly_unbounded_int_literal_or_parameterContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_possibly_unbounded_int_literal_or_parameter
	return p
}

func InitEmptyPossibly_unbounded_int_literal_or_parameterContext(p *Possibly_unbounded_int_literal_or_parameterContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_possibly_unbounded_int_literal_or_parameter
}

func (*Possibly_unbounded_int_literal_or_parameterContext) IsPossibly_unbounded_int_literal_or_parameterContext() {
}

func NewPossibly_unbounded_int_literal_or_parameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Possibly_unbounded_int_literal_or_parameterContext {
	var p = new(Possibly_unbounded_int_literal_or_parameterContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_possibly_unbounded_int_literal_or_parameter

	return p
}

func (s *Possibly_unbounded_int_literal_or_parameterContext) GetParser() antlr.Parser {
	return s.parser
}

func (s *Possibly_unbounded_int_literal_or_parameterContext) Int_literal_or_parameter() IInt_literal_or_parameterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInt_literal_or_parameterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInt_literal_or_parameterContext)
}

func (s *Possibly_unbounded_int_literal_or_parameterContext) UNBOUNDED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNBOUNDED_SYMBOL, 0)
}

func (s *Possibly_unbounded_int_literal_or_parameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Possibly_unbounded_int_literal_or_parameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Possibly_unbounded_int_literal_or_parameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPossibly_unbounded_int_literal_or_parameter(s)
	}
}

func (s *Possibly_unbounded_int_literal_or_parameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPossibly_unbounded_int_literal_or_parameter(s)
	}
}

func (s *Possibly_unbounded_int_literal_or_parameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPossibly_unbounded_int_literal_or_parameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Possibly_unbounded_int_literal_or_parameter() (localctx IPossibly_unbounded_int_literal_or_parameterContext) {
	localctx = NewPossibly_unbounded_int_literal_or_parameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 610, GoogleSQLParserRULE_possibly_unbounded_int_literal_or_parameter)
	p.SetState(3960)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserQUESTION_SYMBOL, GoogleSQLParserAT_SYMBOL, GoogleSQLParserATAT_SYMBOL, GoogleSQLParserINTEGER_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3958)
			p.Int_literal_or_parameter()
		}

	case GoogleSQLParserUNBOUNDED_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3959)
			p.Match(GoogleSQLParserUNBOUNDED_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInt_literal_or_parameterContext is an interface to support dynamic dispatch.
type IInt_literal_or_parameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Integer_literal() IInteger_literalContext
	Parameter_expression() IParameter_expressionContext
	System_variable_expression() ISystem_variable_expressionContext

	// IsInt_literal_or_parameterContext differentiates from other interfaces.
	IsInt_literal_or_parameterContext()
}

type Int_literal_or_parameterContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInt_literal_or_parameterContext() *Int_literal_or_parameterContext {
	var p = new(Int_literal_or_parameterContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_int_literal_or_parameter
	return p
}

func InitEmptyInt_literal_or_parameterContext(p *Int_literal_or_parameterContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_int_literal_or_parameter
}

func (*Int_literal_or_parameterContext) IsInt_literal_or_parameterContext() {}

func NewInt_literal_or_parameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Int_literal_or_parameterContext {
	var p = new(Int_literal_or_parameterContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_int_literal_or_parameter

	return p
}

func (s *Int_literal_or_parameterContext) GetParser() antlr.Parser { return s.parser }

func (s *Int_literal_or_parameterContext) Integer_literal() IInteger_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInteger_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInteger_literalContext)
}

func (s *Int_literal_or_parameterContext) Parameter_expression() IParameter_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParameter_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParameter_expressionContext)
}

func (s *Int_literal_or_parameterContext) System_variable_expression() ISystem_variable_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISystem_variable_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISystem_variable_expressionContext)
}

func (s *Int_literal_or_parameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Int_literal_or_parameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Int_literal_or_parameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterInt_literal_or_parameter(s)
	}
}

func (s *Int_literal_or_parameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitInt_literal_or_parameter(s)
	}
}

func (s *Int_literal_or_parameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitInt_literal_or_parameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Int_literal_or_parameter() (localctx IInt_literal_or_parameterContext) {
	localctx = NewInt_literal_or_parameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 612, GoogleSQLParserRULE_int_literal_or_parameter)
	p.SetState(3965)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINTEGER_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3962)
			p.Integer_literal()
		}

	case GoogleSQLParserQUESTION_SYMBOL, GoogleSQLParserAT_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3963)
			p.Parameter_expression()
		}

	case GoogleSQLParserATAT_SYMBOL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3964)
			p.System_variable_expression()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOrder_by_clauseContext is an interface to support dynamic dispatch.
type IOrder_by_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Order_by_clause_prefix() IOrder_by_clause_prefixContext

	// IsOrder_by_clauseContext differentiates from other interfaces.
	IsOrder_by_clauseContext()
}

type Order_by_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrder_by_clauseContext() *Order_by_clauseContext {
	var p = new(Order_by_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_order_by_clause
	return p
}

func InitEmptyOrder_by_clauseContext(p *Order_by_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_order_by_clause
}

func (*Order_by_clauseContext) IsOrder_by_clauseContext() {}

func NewOrder_by_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Order_by_clauseContext {
	var p = new(Order_by_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_order_by_clause

	return p
}

func (s *Order_by_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Order_by_clauseContext) Order_by_clause_prefix() IOrder_by_clause_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrder_by_clause_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrder_by_clause_prefixContext)
}

func (s *Order_by_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Order_by_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Order_by_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOrder_by_clause(s)
	}
}

func (s *Order_by_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOrder_by_clause(s)
	}
}

func (s *Order_by_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOrder_by_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Order_by_clause() (localctx IOrder_by_clauseContext) {
	localctx = NewOrder_by_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 614, GoogleSQLParserRULE_order_by_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3967)
		p.Order_by_clause_prefix()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOrder_by_clause_prefixContext is an interface to support dynamic dispatch.
type IOrder_by_clause_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ORDER_SYMBOL() antlr.TerminalNode
	BY_SYMBOL() antlr.TerminalNode
	AllOrdering_expression() []IOrdering_expressionContext
	Ordering_expression(i int) IOrdering_expressionContext
	Hint() IHintContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsOrder_by_clause_prefixContext differentiates from other interfaces.
	IsOrder_by_clause_prefixContext()
}

type Order_by_clause_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrder_by_clause_prefixContext() *Order_by_clause_prefixContext {
	var p = new(Order_by_clause_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_order_by_clause_prefix
	return p
}

func InitEmptyOrder_by_clause_prefixContext(p *Order_by_clause_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_order_by_clause_prefix
}

func (*Order_by_clause_prefixContext) IsOrder_by_clause_prefixContext() {}

func NewOrder_by_clause_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Order_by_clause_prefixContext {
	var p = new(Order_by_clause_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_order_by_clause_prefix

	return p
}

func (s *Order_by_clause_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Order_by_clause_prefixContext) ORDER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserORDER_SYMBOL, 0)
}

func (s *Order_by_clause_prefixContext) BY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBY_SYMBOL, 0)
}

func (s *Order_by_clause_prefixContext) AllOrdering_expression() []IOrdering_expressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOrdering_expressionContext); ok {
			len++
		}
	}

	tst := make([]IOrdering_expressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOrdering_expressionContext); ok {
			tst[i] = t.(IOrdering_expressionContext)
			i++
		}
	}

	return tst
}

func (s *Order_by_clause_prefixContext) Ordering_expression(i int) IOrdering_expressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrdering_expressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrdering_expressionContext)
}

func (s *Order_by_clause_prefixContext) Hint() IHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHintContext)
}

func (s *Order_by_clause_prefixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Order_by_clause_prefixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Order_by_clause_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Order_by_clause_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Order_by_clause_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOrder_by_clause_prefix(s)
	}
}

func (s *Order_by_clause_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOrder_by_clause_prefix(s)
	}
}

func (s *Order_by_clause_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOrder_by_clause_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Order_by_clause_prefix() (localctx IOrder_by_clause_prefixContext) {
	localctx = NewOrder_by_clause_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 616, GoogleSQLParserRULE_order_by_clause_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3969)
		p.Match(GoogleSQLParserORDER_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(3971)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAT_SYMBOL {
		{
			p.SetState(3970)
			p.Hint()
		}

	}
	{
		p.SetState(3973)
		p.Match(GoogleSQLParserBY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(3974)
		p.Ordering_expression()
	}
	p.SetState(3979)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(3975)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(3976)
			p.Ordering_expression()
		}

		p.SetState(3981)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOrdering_expressionContext is an interface to support dynamic dispatch.
type IOrdering_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	Collate_clause() ICollate_clauseContext
	Asc_or_desc() IAsc_or_descContext
	Null_order() INull_orderContext

	// IsOrdering_expressionContext differentiates from other interfaces.
	IsOrdering_expressionContext()
}

type Ordering_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrdering_expressionContext() *Ordering_expressionContext {
	var p = new(Ordering_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_ordering_expression
	return p
}

func InitEmptyOrdering_expressionContext(p *Ordering_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_ordering_expression
}

func (*Ordering_expressionContext) IsOrdering_expressionContext() {}

func NewOrdering_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ordering_expressionContext {
	var p = new(Ordering_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_ordering_expression

	return p
}

func (s *Ordering_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Ordering_expressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Ordering_expressionContext) Collate_clause() ICollate_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollate_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollate_clauseContext)
}

func (s *Ordering_expressionContext) Asc_or_desc() IAsc_or_descContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAsc_or_descContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAsc_or_descContext)
}

func (s *Ordering_expressionContext) Null_order() INull_orderContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INull_orderContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INull_orderContext)
}

func (s *Ordering_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ordering_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ordering_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOrdering_expression(s)
	}
}

func (s *Ordering_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOrdering_expression(s)
	}
}

func (s *Ordering_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOrdering_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Ordering_expression() (localctx IOrdering_expressionContext) {
	localctx = NewOrdering_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 618, GoogleSQLParserRULE_ordering_expression)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3982)
		p.expression(0)
	}
	p.SetState(3984)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserCOLLATE_SYMBOL {
		{
			p.SetState(3983)
			p.Collate_clause()
		}

	}
	p.SetState(3987)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserASC_SYMBOL || _la == GoogleSQLParserDESC_SYMBOL {
		{
			p.SetState(3986)
			p.Asc_or_desc()
		}

	}
	p.SetState(3990)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserNULLS_SYMBOL {
		{
			p.SetState(3989)
			p.Null_order()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelectContext is an interface to support dynamic dispatch.
type ISelectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Select_clause() ISelect_clauseContext
	From_clause() IFrom_clauseContext
	Opt_clauses_following_from() IOpt_clauses_following_fromContext

	// IsSelectContext differentiates from other interfaces.
	IsSelectContext()
}

type SelectContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectContext() *SelectContext {
	var p = new(SelectContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select
	return p
}

func InitEmptySelectContext(p *SelectContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select
}

func (*SelectContext) IsSelectContext() {}

func NewSelectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectContext {
	var p = new(SelectContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_select

	return p
}

func (s *SelectContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectContext) Select_clause() ISelect_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_clauseContext)
}

func (s *SelectContext) From_clause() IFrom_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrom_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrom_clauseContext)
}

func (s *SelectContext) Opt_clauses_following_from() IOpt_clauses_following_fromContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_clauses_following_fromContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_clauses_following_fromContext)
}

func (s *SelectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSelect(s)
	}
}

func (s *SelectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSelect(s)
	}
}

func (s *SelectContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSelect(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Select_() (localctx ISelectContext) {
	localctx = NewSelectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 620, GoogleSQLParserRULE_select)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3992)
		p.Select_clause()
	}
	p.SetState(3994)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 480, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3993)
			p.From_clause()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(3997)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 481, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3996)
			p.Opt_clauses_following_from()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_clauses_following_fromContext is an interface to support dynamic dispatch.
type IOpt_clauses_following_fromContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Where_clause() IWhere_clauseContext
	Group_by_clause() IGroup_by_clauseContext
	Having_clause() IHaving_clauseContext
	Qualify_clause_nonreserved() IQualify_clause_nonreservedContext
	Window_clause() IWindow_clauseContext
	Opt_clauses_following_where() IOpt_clauses_following_whereContext

	// IsOpt_clauses_following_fromContext differentiates from other interfaces.
	IsOpt_clauses_following_fromContext()
}

type Opt_clauses_following_fromContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_clauses_following_fromContext() *Opt_clauses_following_fromContext {
	var p = new(Opt_clauses_following_fromContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_clauses_following_from
	return p
}

func InitEmptyOpt_clauses_following_fromContext(p *Opt_clauses_following_fromContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_clauses_following_from
}

func (*Opt_clauses_following_fromContext) IsOpt_clauses_following_fromContext() {}

func NewOpt_clauses_following_fromContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_clauses_following_fromContext {
	var p = new(Opt_clauses_following_fromContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_clauses_following_from

	return p
}

func (s *Opt_clauses_following_fromContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_clauses_following_fromContext) Where_clause() IWhere_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhere_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhere_clauseContext)
}

func (s *Opt_clauses_following_fromContext) Group_by_clause() IGroup_by_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGroup_by_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGroup_by_clauseContext)
}

func (s *Opt_clauses_following_fromContext) Having_clause() IHaving_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHaving_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHaving_clauseContext)
}

func (s *Opt_clauses_following_fromContext) Qualify_clause_nonreserved() IQualify_clause_nonreservedContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualify_clause_nonreservedContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualify_clause_nonreservedContext)
}

func (s *Opt_clauses_following_fromContext) Window_clause() IWindow_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindow_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindow_clauseContext)
}

func (s *Opt_clauses_following_fromContext) Opt_clauses_following_where() IOpt_clauses_following_whereContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_clauses_following_whereContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_clauses_following_whereContext)
}

func (s *Opt_clauses_following_fromContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_clauses_following_fromContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_clauses_following_fromContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_clauses_following_from(s)
	}
}

func (s *Opt_clauses_following_fromContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_clauses_following_from(s)
	}
}

func (s *Opt_clauses_following_fromContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_clauses_following_from(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_clauses_following_from() (localctx IOpt_clauses_following_fromContext) {
	localctx = NewOpt_clauses_following_fromContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 622, GoogleSQLParserRULE_opt_clauses_following_from)
	p.SetState(4013)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserWHERE_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3999)
			p.Where_clause()
		}
		p.SetState(4001)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 482, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4000)
				p.Group_by_clause()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(4004)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 483, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4003)
				p.Having_clause()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(4007)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 484, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4006)
				p.Qualify_clause_nonreserved()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(4010)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 485, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4009)
				p.Window_clause()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case GoogleSQLParserHAVING_SYMBOL, GoogleSQLParserGROUP_SYMBOL, GoogleSQLParserQUALIFY_SYMBOL, GoogleSQLParserWINDOW_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4012)
			p.Opt_clauses_following_where()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_clauses_following_whereContext is an interface to support dynamic dispatch.
type IOpt_clauses_following_whereContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Group_by_clause() IGroup_by_clauseContext
	Having_clause() IHaving_clauseContext
	Qualify_clause_nonreserved() IQualify_clause_nonreservedContext
	Window_clause() IWindow_clauseContext
	Opt_clauses_following_group_by() IOpt_clauses_following_group_byContext

	// IsOpt_clauses_following_whereContext differentiates from other interfaces.
	IsOpt_clauses_following_whereContext()
}

type Opt_clauses_following_whereContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_clauses_following_whereContext() *Opt_clauses_following_whereContext {
	var p = new(Opt_clauses_following_whereContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_clauses_following_where
	return p
}

func InitEmptyOpt_clauses_following_whereContext(p *Opt_clauses_following_whereContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_clauses_following_where
}

func (*Opt_clauses_following_whereContext) IsOpt_clauses_following_whereContext() {}

func NewOpt_clauses_following_whereContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_clauses_following_whereContext {
	var p = new(Opt_clauses_following_whereContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_clauses_following_where

	return p
}

func (s *Opt_clauses_following_whereContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_clauses_following_whereContext) Group_by_clause() IGroup_by_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGroup_by_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGroup_by_clauseContext)
}

func (s *Opt_clauses_following_whereContext) Having_clause() IHaving_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHaving_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHaving_clauseContext)
}

func (s *Opt_clauses_following_whereContext) Qualify_clause_nonreserved() IQualify_clause_nonreservedContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualify_clause_nonreservedContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualify_clause_nonreservedContext)
}

func (s *Opt_clauses_following_whereContext) Window_clause() IWindow_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindow_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindow_clauseContext)
}

func (s *Opt_clauses_following_whereContext) Opt_clauses_following_group_by() IOpt_clauses_following_group_byContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_clauses_following_group_byContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_clauses_following_group_byContext)
}

func (s *Opt_clauses_following_whereContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_clauses_following_whereContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_clauses_following_whereContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_clauses_following_where(s)
	}
}

func (s *Opt_clauses_following_whereContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_clauses_following_where(s)
	}
}

func (s *Opt_clauses_following_whereContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_clauses_following_where(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_clauses_following_where() (localctx IOpt_clauses_following_whereContext) {
	localctx = NewOpt_clauses_following_whereContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 624, GoogleSQLParserRULE_opt_clauses_following_where)
	p.SetState(4026)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserGROUP_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4015)
			p.Group_by_clause()
		}
		p.SetState(4017)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 487, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4016)
				p.Having_clause()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(4020)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 488, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4019)
				p.Qualify_clause_nonreserved()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(4023)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 489, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4022)
				p.Window_clause()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case GoogleSQLParserHAVING_SYMBOL, GoogleSQLParserQUALIFY_SYMBOL, GoogleSQLParserWINDOW_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4025)
			p.Opt_clauses_following_group_by()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_clauses_following_group_byContext is an interface to support dynamic dispatch.
type IOpt_clauses_following_group_byContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Having_clause() IHaving_clauseContext
	Qualify_clause_nonreserved() IQualify_clause_nonreservedContext
	Window_clause() IWindow_clauseContext

	// IsOpt_clauses_following_group_byContext differentiates from other interfaces.
	IsOpt_clauses_following_group_byContext()
}

type Opt_clauses_following_group_byContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_clauses_following_group_byContext() *Opt_clauses_following_group_byContext {
	var p = new(Opt_clauses_following_group_byContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_clauses_following_group_by
	return p
}

func InitEmptyOpt_clauses_following_group_byContext(p *Opt_clauses_following_group_byContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_clauses_following_group_by
}

func (*Opt_clauses_following_group_byContext) IsOpt_clauses_following_group_byContext() {}

func NewOpt_clauses_following_group_byContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_clauses_following_group_byContext {
	var p = new(Opt_clauses_following_group_byContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_clauses_following_group_by

	return p
}

func (s *Opt_clauses_following_group_byContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_clauses_following_group_byContext) Having_clause() IHaving_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHaving_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHaving_clauseContext)
}

func (s *Opt_clauses_following_group_byContext) Qualify_clause_nonreserved() IQualify_clause_nonreservedContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualify_clause_nonreservedContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualify_clause_nonreservedContext)
}

func (s *Opt_clauses_following_group_byContext) Window_clause() IWindow_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindow_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindow_clauseContext)
}

func (s *Opt_clauses_following_group_byContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_clauses_following_group_byContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_clauses_following_group_byContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_clauses_following_group_by(s)
	}
}

func (s *Opt_clauses_following_group_byContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_clauses_following_group_by(s)
	}
}

func (s *Opt_clauses_following_group_byContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_clauses_following_group_by(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_clauses_following_group_by() (localctx IOpt_clauses_following_group_byContext) {
	localctx = NewOpt_clauses_following_group_byContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 626, GoogleSQLParserRULE_opt_clauses_following_group_by)
	p.SetState(4040)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserHAVING_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4028)
			p.Having_clause()
		}
		p.SetState(4030)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 491, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4029)
				p.Qualify_clause_nonreserved()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(4033)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 492, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4032)
				p.Window_clause()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case GoogleSQLParserQUALIFY_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4035)
			p.Qualify_clause_nonreserved()
		}
		p.SetState(4037)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 493, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4036)
				p.Window_clause()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case GoogleSQLParserWINDOW_SYMBOL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4039)
			p.Window_clause()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWindow_clauseContext is an interface to support dynamic dispatch.
type IWindow_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Window_clause_prefix() IWindow_clause_prefixContext

	// IsWindow_clauseContext differentiates from other interfaces.
	IsWindow_clauseContext()
}

type Window_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_clauseContext() *Window_clauseContext {
	var p = new(Window_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_window_clause
	return p
}

func InitEmptyWindow_clauseContext(p *Window_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_window_clause
}

func (*Window_clauseContext) IsWindow_clauseContext() {}

func NewWindow_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_clauseContext {
	var p = new(Window_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_window_clause

	return p
}

func (s *Window_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_clauseContext) Window_clause_prefix() IWindow_clause_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindow_clause_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindow_clause_prefixContext)
}

func (s *Window_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWindow_clause(s)
	}
}

func (s *Window_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWindow_clause(s)
	}
}

func (s *Window_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWindow_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Window_clause() (localctx IWindow_clauseContext) {
	localctx = NewWindow_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 628, GoogleSQLParserRULE_window_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4042)
		p.Window_clause_prefix()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWindow_clause_prefixContext is an interface to support dynamic dispatch.
type IWindow_clause_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WINDOW_SYMBOL() antlr.TerminalNode
	AllWindow_definition() []IWindow_definitionContext
	Window_definition(i int) IWindow_definitionContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsWindow_clause_prefixContext differentiates from other interfaces.
	IsWindow_clause_prefixContext()
}

type Window_clause_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_clause_prefixContext() *Window_clause_prefixContext {
	var p = new(Window_clause_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_window_clause_prefix
	return p
}

func InitEmptyWindow_clause_prefixContext(p *Window_clause_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_window_clause_prefix
}

func (*Window_clause_prefixContext) IsWindow_clause_prefixContext() {}

func NewWindow_clause_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_clause_prefixContext {
	var p = new(Window_clause_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_window_clause_prefix

	return p
}

func (s *Window_clause_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_clause_prefixContext) WINDOW_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWINDOW_SYMBOL, 0)
}

func (s *Window_clause_prefixContext) AllWindow_definition() []IWindow_definitionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWindow_definitionContext); ok {
			len++
		}
	}

	tst := make([]IWindow_definitionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWindow_definitionContext); ok {
			tst[i] = t.(IWindow_definitionContext)
			i++
		}
	}

	return tst
}

func (s *Window_clause_prefixContext) Window_definition(i int) IWindow_definitionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindow_definitionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindow_definitionContext)
}

func (s *Window_clause_prefixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Window_clause_prefixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Window_clause_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_clause_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_clause_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWindow_clause_prefix(s)
	}
}

func (s *Window_clause_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWindow_clause_prefix(s)
	}
}

func (s *Window_clause_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWindow_clause_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Window_clause_prefix() (localctx IWindow_clause_prefixContext) {
	localctx = NewWindow_clause_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 630, GoogleSQLParserRULE_window_clause_prefix)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4044)
		p.Match(GoogleSQLParserWINDOW_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4045)
		p.Window_definition()
	}
	p.SetState(4050)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 495, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(4046)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(4047)
				p.Window_definition()
			}

		}
		p.SetState(4052)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 495, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWindow_definitionContext is an interface to support dynamic dispatch.
type IWindow_definitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	AS_SYMBOL() antlr.TerminalNode
	Window_specification() IWindow_specificationContext

	// IsWindow_definitionContext differentiates from other interfaces.
	IsWindow_definitionContext()
}

type Window_definitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_definitionContext() *Window_definitionContext {
	var p = new(Window_definitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_window_definition
	return p
}

func InitEmptyWindow_definitionContext(p *Window_definitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_window_definition
}

func (*Window_definitionContext) IsWindow_definitionContext() {}

func NewWindow_definitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_definitionContext {
	var p = new(Window_definitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_window_definition

	return p
}

func (s *Window_definitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_definitionContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Window_definitionContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Window_definitionContext) Window_specification() IWindow_specificationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindow_specificationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindow_specificationContext)
}

func (s *Window_definitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_definitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_definitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWindow_definition(s)
	}
}

func (s *Window_definitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWindow_definition(s)
	}
}

func (s *Window_definitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWindow_definition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Window_definition() (localctx IWindow_definitionContext) {
	localctx = NewWindow_definitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 632, GoogleSQLParserRULE_window_definition)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4053)
		p.Identifier()
	}
	{
		p.SetState(4054)
		p.Match(GoogleSQLParserAS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4055)
		p.Window_specification()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWhere_clauseContext is an interface to support dynamic dispatch.
type IWhere_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WHERE_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsWhere_clauseContext differentiates from other interfaces.
	IsWhere_clauseContext()
}

type Where_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhere_clauseContext() *Where_clauseContext {
	var p = new(Where_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_where_clause
	return p
}

func InitEmptyWhere_clauseContext(p *Where_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_where_clause
}

func (*Where_clauseContext) IsWhere_clauseContext() {}

func NewWhere_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Where_clauseContext {
	var p = new(Where_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_where_clause

	return p
}

func (s *Where_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Where_clauseContext) WHERE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWHERE_SYMBOL, 0)
}

func (s *Where_clauseContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Where_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Where_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Where_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWhere_clause(s)
	}
}

func (s *Where_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWhere_clause(s)
	}
}

func (s *Where_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWhere_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Where_clause() (localctx IWhere_clauseContext) {
	localctx = NewWhere_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 634, GoogleSQLParserRULE_where_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4057)
		p.Match(GoogleSQLParserWHERE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4058)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IHaving_clauseContext is an interface to support dynamic dispatch.
type IHaving_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	HAVING_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsHaving_clauseContext differentiates from other interfaces.
	IsHaving_clauseContext()
}

type Having_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHaving_clauseContext() *Having_clauseContext {
	var p = new(Having_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_having_clause
	return p
}

func InitEmptyHaving_clauseContext(p *Having_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_having_clause
}

func (*Having_clauseContext) IsHaving_clauseContext() {}

func NewHaving_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Having_clauseContext {
	var p = new(Having_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_having_clause

	return p
}

func (s *Having_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Having_clauseContext) HAVING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserHAVING_SYMBOL, 0)
}

func (s *Having_clauseContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Having_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Having_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Having_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterHaving_clause(s)
	}
}

func (s *Having_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitHaving_clause(s)
	}
}

func (s *Having_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitHaving_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Having_clause() (localctx IHaving_clauseContext) {
	localctx = NewHaving_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 636, GoogleSQLParserRULE_having_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4060)
		p.Match(GoogleSQLParserHAVING_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4061)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGroup_by_clauseContext is an interface to support dynamic dispatch.
type IGroup_by_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Group_by_all() IGroup_by_allContext
	Group_by_clause_prefix() IGroup_by_clause_prefixContext

	// IsGroup_by_clauseContext differentiates from other interfaces.
	IsGroup_by_clauseContext()
}

type Group_by_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroup_by_clauseContext() *Group_by_clauseContext {
	var p = new(Group_by_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_group_by_clause
	return p
}

func InitEmptyGroup_by_clauseContext(p *Group_by_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_group_by_clause
}

func (*Group_by_clauseContext) IsGroup_by_clauseContext() {}

func NewGroup_by_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Group_by_clauseContext {
	var p = new(Group_by_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_group_by_clause

	return p
}

func (s *Group_by_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Group_by_clauseContext) Group_by_all() IGroup_by_allContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGroup_by_allContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGroup_by_allContext)
}

func (s *Group_by_clauseContext) Group_by_clause_prefix() IGroup_by_clause_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGroup_by_clause_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGroup_by_clause_prefixContext)
}

func (s *Group_by_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Group_by_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Group_by_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGroup_by_clause(s)
	}
}

func (s *Group_by_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGroup_by_clause(s)
	}
}

func (s *Group_by_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGroup_by_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Group_by_clause() (localctx IGroup_by_clauseContext) {
	localctx = NewGroup_by_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 638, GoogleSQLParserRULE_group_by_clause)
	p.SetState(4065)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 496, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4063)
			p.Group_by_all()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4064)
			p.Group_by_clause_prefix()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGroup_by_allContext is an interface to support dynamic dispatch.
type IGroup_by_allContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Group_by_preamble() IGroup_by_preambleContext
	ALL_SYMBOL() antlr.TerminalNode

	// IsGroup_by_allContext differentiates from other interfaces.
	IsGroup_by_allContext()
}

type Group_by_allContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroup_by_allContext() *Group_by_allContext {
	var p = new(Group_by_allContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_group_by_all
	return p
}

func InitEmptyGroup_by_allContext(p *Group_by_allContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_group_by_all
}

func (*Group_by_allContext) IsGroup_by_allContext() {}

func NewGroup_by_allContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Group_by_allContext {
	var p = new(Group_by_allContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_group_by_all

	return p
}

func (s *Group_by_allContext) GetParser() antlr.Parser { return s.parser }

func (s *Group_by_allContext) Group_by_preamble() IGroup_by_preambleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGroup_by_preambleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGroup_by_preambleContext)
}

func (s *Group_by_allContext) ALL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserALL_SYMBOL, 0)
}

func (s *Group_by_allContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Group_by_allContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Group_by_allContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGroup_by_all(s)
	}
}

func (s *Group_by_allContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGroup_by_all(s)
	}
}

func (s *Group_by_allContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGroup_by_all(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Group_by_all() (localctx IGroup_by_allContext) {
	localctx = NewGroup_by_allContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 640, GoogleSQLParserRULE_group_by_all)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4067)
		p.Group_by_preamble()
	}
	{
		p.SetState(4068)
		p.Match(GoogleSQLParserALL_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelect_clauseContext is an interface to support dynamic dispatch.
type ISelect_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SELECT_SYMBOL() antlr.TerminalNode
	Select_list() ISelect_listContext
	Hint() IHintContext
	Opt_select_with() IOpt_select_withContext
	All_or_distinct() IAll_or_distinctContext
	Opt_select_as_clause() IOpt_select_as_clauseContext
	FROM_SYMBOL() antlr.TerminalNode

	// IsSelect_clauseContext differentiates from other interfaces.
	IsSelect_clauseContext()
}

type Select_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_clauseContext() *Select_clauseContext {
	var p = new(Select_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_clause
	return p
}

func InitEmptySelect_clauseContext(p *Select_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_clause
}

func (*Select_clauseContext) IsSelect_clauseContext() {}

func NewSelect_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_clauseContext {
	var p = new(Select_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_select_clause

	return p
}

func (s *Select_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_clauseContext) SELECT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSELECT_SYMBOL, 0)
}

func (s *Select_clauseContext) Select_list() ISelect_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_listContext)
}

func (s *Select_clauseContext) Hint() IHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHintContext)
}

func (s *Select_clauseContext) Opt_select_with() IOpt_select_withContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_select_withContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_select_withContext)
}

func (s *Select_clauseContext) All_or_distinct() IAll_or_distinctContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAll_or_distinctContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAll_or_distinctContext)
}

func (s *Select_clauseContext) Opt_select_as_clause() IOpt_select_as_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_select_as_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_select_as_clauseContext)
}

func (s *Select_clauseContext) FROM_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFROM_SYMBOL, 0)
}

func (s *Select_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSelect_clause(s)
	}
}

func (s *Select_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSelect_clause(s)
	}
}

func (s *Select_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSelect_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Select_clause() (localctx ISelect_clauseContext) {
	localctx = NewSelect_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 642, GoogleSQLParserRULE_select_clause)
	var _la int

	p.SetState(4099)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 505, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4070)
			p.Match(GoogleSQLParserSELECT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(4072)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 497, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4071)
				p.Hint()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(4075)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 498, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4074)
				p.Opt_select_with()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(4078)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserALL_SYMBOL || _la == GoogleSQLParserDISTINCT_SYMBOL {
			{
				p.SetState(4077)
				p.All_or_distinct()
			}

		}
		p.SetState(4081)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAS_SYMBOL {
			{
				p.SetState(4080)
				p.Opt_select_as_clause()
			}

		}
		{
			p.SetState(4083)
			p.Select_list()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4084)
			p.Match(GoogleSQLParserSELECT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(4086)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAT_SYMBOL {
			{
				p.SetState(4085)
				p.Hint()
			}

		}
		p.SetState(4089)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserWITH_SYMBOL {
			{
				p.SetState(4088)
				p.Opt_select_with()
			}

		}
		p.SetState(4092)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserALL_SYMBOL || _la == GoogleSQLParserDISTINCT_SYMBOL {
			{
				p.SetState(4091)
				p.All_or_distinct()
			}

		}
		p.SetState(4095)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAS_SYMBOL {
			{
				p.SetState(4094)
				p.Opt_select_as_clause()
			}

		}
		{
			p.SetState(4097)
			p.Match(GoogleSQLParserFROM_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Syntax error: SELECT list must not be empty", nil, nil)

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_select_as_clauseContext is an interface to support dynamic dispatch.
type IOpt_select_as_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AS_SYMBOL() antlr.TerminalNode
	STRUCT_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext

	// IsOpt_select_as_clauseContext differentiates from other interfaces.
	IsOpt_select_as_clauseContext()
}

type Opt_select_as_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_select_as_clauseContext() *Opt_select_as_clauseContext {
	var p = new(Opt_select_as_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_select_as_clause
	return p
}

func InitEmptyOpt_select_as_clauseContext(p *Opt_select_as_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_select_as_clause
}

func (*Opt_select_as_clauseContext) IsOpt_select_as_clauseContext() {}

func NewOpt_select_as_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_select_as_clauseContext {
	var p = new(Opt_select_as_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_select_as_clause

	return p
}

func (s *Opt_select_as_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_select_as_clauseContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Opt_select_as_clauseContext) STRUCT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTRUCT_SYMBOL, 0)
}

func (s *Opt_select_as_clauseContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Opt_select_as_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_select_as_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_select_as_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_select_as_clause(s)
	}
}

func (s *Opt_select_as_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_select_as_clause(s)
	}
}

func (s *Opt_select_as_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_select_as_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_select_as_clause() (localctx IOpt_select_as_clauseContext) {
	localctx = NewOpt_select_as_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 644, GoogleSQLParserRULE_opt_select_as_clause)
	p.SetState(4105)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 506, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4101)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4102)
			p.Match(GoogleSQLParserSTRUCT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4103)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4104)
			p.Path_expression()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_select_withContext is an interface to support dynamic dispatch.
type IOpt_select_withContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WITH_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext
	OPTIONS_SYMBOL() antlr.TerminalNode
	Options_list() IOptions_listContext

	// IsOpt_select_withContext differentiates from other interfaces.
	IsOpt_select_withContext()
}

type Opt_select_withContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_select_withContext() *Opt_select_withContext {
	var p = new(Opt_select_withContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_select_with
	return p
}

func InitEmptyOpt_select_withContext(p *Opt_select_withContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_select_with
}

func (*Opt_select_withContext) IsOpt_select_withContext() {}

func NewOpt_select_withContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_select_withContext {
	var p = new(Opt_select_withContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_select_with

	return p
}

func (s *Opt_select_withContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_select_withContext) WITH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWITH_SYMBOL, 0)
}

func (s *Opt_select_withContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Opt_select_withContext) OPTIONS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOPTIONS_SYMBOL, 0)
}

func (s *Opt_select_withContext) Options_list() IOptions_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOptions_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOptions_listContext)
}

func (s *Opt_select_withContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_select_withContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_select_withContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_select_with(s)
	}
}

func (s *Opt_select_withContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_select_with(s)
	}
}

func (s *Opt_select_withContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_select_with(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_select_with() (localctx IOpt_select_withContext) {
	localctx = NewOpt_select_withContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 646, GoogleSQLParserRULE_opt_select_with)
	p.SetState(4114)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 507, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4107)
			p.Match(GoogleSQLParserWITH_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4108)
			p.Identifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4109)
			p.Match(GoogleSQLParserWITH_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4110)
			p.Identifier()
		}
		{
			p.SetState(4111)
			p.Match(GoogleSQLParserOPTIONS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4112)
			p.Options_list()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFrom_clauseContext is an interface to support dynamic dispatch.
type IFrom_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FROM_SYMBOL() antlr.TerminalNode
	From_clause_contents() IFrom_clause_contentsContext

	// IsFrom_clauseContext differentiates from other interfaces.
	IsFrom_clauseContext()
}

type From_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrom_clauseContext() *From_clauseContext {
	var p = new(From_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_from_clause
	return p
}

func InitEmptyFrom_clauseContext(p *From_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_from_clause
}

func (*From_clauseContext) IsFrom_clauseContext() {}

func NewFrom_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *From_clauseContext {
	var p = new(From_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_from_clause

	return p
}

func (s *From_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *From_clauseContext) FROM_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFROM_SYMBOL, 0)
}

func (s *From_clauseContext) From_clause_contents() IFrom_clause_contentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrom_clause_contentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrom_clause_contentsContext)
}

func (s *From_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *From_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *From_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFrom_clause(s)
	}
}

func (s *From_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFrom_clause(s)
	}
}

func (s *From_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFrom_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) From_clause() (localctx IFrom_clauseContext) {
	localctx = NewFrom_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 648, GoogleSQLParserRULE_from_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4116)
		p.Match(GoogleSQLParserFROM_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4117)
		p.From_clause_contents()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFrom_clause_contentsContext is an interface to support dynamic dispatch.
type IFrom_clause_contentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Table_primary() ITable_primaryContext
	AllFrom_clause_contents_suffix() []IFrom_clause_contents_suffixContext
	From_clause_contents_suffix(i int) IFrom_clause_contents_suffixContext
	AT_SYMBOL() antlr.TerminalNode
	QUESTION_SYMBOL() antlr.TerminalNode
	ATAT_SYMBOL() antlr.TerminalNode

	// IsFrom_clause_contentsContext differentiates from other interfaces.
	IsFrom_clause_contentsContext()
}

type From_clause_contentsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrom_clause_contentsContext() *From_clause_contentsContext {
	var p = new(From_clause_contentsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_from_clause_contents
	return p
}

func InitEmptyFrom_clause_contentsContext(p *From_clause_contentsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_from_clause_contents
}

func (*From_clause_contentsContext) IsFrom_clause_contentsContext() {}

func NewFrom_clause_contentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *From_clause_contentsContext {
	var p = new(From_clause_contentsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_from_clause_contents

	return p
}

func (s *From_clause_contentsContext) GetParser() antlr.Parser { return s.parser }

func (s *From_clause_contentsContext) Table_primary() ITable_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_primaryContext)
}

func (s *From_clause_contentsContext) AllFrom_clause_contents_suffix() []IFrom_clause_contents_suffixContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFrom_clause_contents_suffixContext); ok {
			len++
		}
	}

	tst := make([]IFrom_clause_contents_suffixContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFrom_clause_contents_suffixContext); ok {
			tst[i] = t.(IFrom_clause_contents_suffixContext)
			i++
		}
	}

	return tst
}

func (s *From_clause_contentsContext) From_clause_contents_suffix(i int) IFrom_clause_contents_suffixContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrom_clause_contents_suffixContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrom_clause_contents_suffixContext)
}

func (s *From_clause_contentsContext) AT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAT_SYMBOL, 0)
}

func (s *From_clause_contentsContext) QUESTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserQUESTION_SYMBOL, 0)
}

func (s *From_clause_contentsContext) ATAT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserATAT_SYMBOL, 0)
}

func (s *From_clause_contentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *From_clause_contentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *From_clause_contentsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFrom_clause_contents(s)
	}
}

func (s *From_clause_contentsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFrom_clause_contents(s)
	}
}

func (s *From_clause_contentsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFrom_clause_contents(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) From_clause_contents() (localctx IFrom_clause_contentsContext) {
	localctx = NewFrom_clause_contentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 650, GoogleSQLParserRULE_from_clause_contents)
	var _alt int

	p.SetState(4132)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserLR_BRACKET_SYMBOL, GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserUNNEST_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserIF_SYMBOL, GoogleSQLParserSLASH_SYMBOL, GoogleSQLParserCONFLICT_SYMBOL, GoogleSQLParserDESTINATION_SYMBOL, GoogleSQLParserPROPERTY_SYMBOL, GoogleSQLParserGRAPH_SYMBOL, GoogleSQLParserNODE_SYMBOL, GoogleSQLParserPROPERTIES_SYMBOL, GoogleSQLParserLABEL_SYMBOL, GoogleSQLParserEDGE_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4119)
			p.table_primary(0)
		}
		p.SetState(4123)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 508, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(4120)
					p.From_clause_contents_suffix()
				}

			}
			p.SetState(4125)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 508, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

	case GoogleSQLParserAT_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4126)
			p.Match(GoogleSQLParserAT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Query parameters cannot be used in place of table names", nil, nil)

	case GoogleSQLParserQUESTION_SYMBOL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4128)
			p.Match(GoogleSQLParserQUESTION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Query parameters cannot be used in place of table names", nil, nil)

	case GoogleSQLParserATAT_SYMBOL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4130)
			p.Match(GoogleSQLParserATAT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("System variables cannot be used in place of table names", nil, nil)

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFrom_clause_contents_suffixContext is an interface to support dynamic dispatch.
type IFrom_clause_contents_suffixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	COMMA_SYMBOL() antlr.TerminalNode
	Table_primary() ITable_primaryContext
	JOIN_SYMBOL() antlr.TerminalNode
	Opt_natural() IOpt_naturalContext
	Join_type() IJoin_typeContext
	Join_hint() IJoin_hintContext
	Hint() IHintContext
	On_or_using_clause_list() IOn_or_using_clause_listContext

	// IsFrom_clause_contents_suffixContext differentiates from other interfaces.
	IsFrom_clause_contents_suffixContext()
}

type From_clause_contents_suffixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrom_clause_contents_suffixContext() *From_clause_contents_suffixContext {
	var p = new(From_clause_contents_suffixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_from_clause_contents_suffix
	return p
}

func InitEmptyFrom_clause_contents_suffixContext(p *From_clause_contents_suffixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_from_clause_contents_suffix
}

func (*From_clause_contents_suffixContext) IsFrom_clause_contents_suffixContext() {}

func NewFrom_clause_contents_suffixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *From_clause_contents_suffixContext {
	var p = new(From_clause_contents_suffixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_from_clause_contents_suffix

	return p
}

func (s *From_clause_contents_suffixContext) GetParser() antlr.Parser { return s.parser }

func (s *From_clause_contents_suffixContext) COMMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, 0)
}

func (s *From_clause_contents_suffixContext) Table_primary() ITable_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_primaryContext)
}

func (s *From_clause_contents_suffixContext) JOIN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserJOIN_SYMBOL, 0)
}

func (s *From_clause_contents_suffixContext) Opt_natural() IOpt_naturalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_naturalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_naturalContext)
}

func (s *From_clause_contents_suffixContext) Join_type() IJoin_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoin_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoin_typeContext)
}

func (s *From_clause_contents_suffixContext) Join_hint() IJoin_hintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoin_hintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoin_hintContext)
}

func (s *From_clause_contents_suffixContext) Hint() IHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHintContext)
}

func (s *From_clause_contents_suffixContext) On_or_using_clause_list() IOn_or_using_clause_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOn_or_using_clause_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOn_or_using_clause_listContext)
}

func (s *From_clause_contents_suffixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *From_clause_contents_suffixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *From_clause_contents_suffixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFrom_clause_contents_suffix(s)
	}
}

func (s *From_clause_contents_suffixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFrom_clause_contents_suffix(s)
	}
}

func (s *From_clause_contents_suffixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFrom_clause_contents_suffix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) From_clause_contents_suffix() (localctx IFrom_clause_contents_suffixContext) {
	localctx = NewFrom_clause_contents_suffixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 652, GoogleSQLParserRULE_from_clause_contents_suffix)
	var _la int

	p.SetState(4153)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserCOMMA_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4134)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4135)
			p.table_primary(0)
		}

	case GoogleSQLParserCROSS_SYMBOL, GoogleSQLParserJOIN_SYMBOL, GoogleSQLParserFULL_SYMBOL, GoogleSQLParserINNER_SYMBOL, GoogleSQLParserLEFT_SYMBOL, GoogleSQLParserRIGHT_SYMBOL, GoogleSQLParserHASH_SYMBOL, GoogleSQLParserNATURAL_SYMBOL, GoogleSQLParserLOOKUP_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(4137)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserNATURAL_SYMBOL {
			{
				p.SetState(4136)
				p.Opt_natural()
			}

		}
		p.SetState(4140)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if (int64((_la-59)) & ^0x3f) == 0 && ((int64(1)<<(_la-59))&1073825793) != 0 {
			{
				p.SetState(4139)
				p.Join_type()
			}

		}
		p.SetState(4143)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserHASH_SYMBOL || _la == GoogleSQLParserLOOKUP_SYMBOL {
			{
				p.SetState(4142)
				p.Join_hint()
			}

		}
		{
			p.SetState(4145)
			p.Match(GoogleSQLParserJOIN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(4147)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAT_SYMBOL {
			{
				p.SetState(4146)
				p.Hint()
			}

		}
		{
			p.SetState(4149)
			p.table_primary(0)
		}
		p.SetState(4151)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 514, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4150)
				p.On_or_using_clause_list()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_primaryContext is an interface to support dynamic dispatch.
type ITable_primaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Tvf_with_suffixes() ITvf_with_suffixesContext
	Table_path_expression() ITable_path_expressionContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Join() IJoinContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Table_subquery() ITable_subqueryContext
	Table_primary() ITable_primaryContext
	Match_recognize_clause() IMatch_recognize_clauseContext
	Sample_clause() ISample_clauseContext

	// IsTable_primaryContext differentiates from other interfaces.
	IsTable_primaryContext()
}

type Table_primaryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_primaryContext() *Table_primaryContext {
	var p = new(Table_primaryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_primary
	return p
}

func InitEmptyTable_primaryContext(p *Table_primaryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_primary
}

func (*Table_primaryContext) IsTable_primaryContext() {}

func NewTable_primaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_primaryContext {
	var p = new(Table_primaryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_table_primary

	return p
}

func (s *Table_primaryContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_primaryContext) Tvf_with_suffixes() ITvf_with_suffixesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITvf_with_suffixesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITvf_with_suffixesContext)
}

func (s *Table_primaryContext) Table_path_expression() ITable_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_path_expressionContext)
}

func (s *Table_primaryContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Table_primaryContext) Join() IJoinContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoinContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoinContext)
}

func (s *Table_primaryContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Table_primaryContext) Table_subquery() ITable_subqueryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_subqueryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_subqueryContext)
}

func (s *Table_primaryContext) Table_primary() ITable_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_primaryContext)
}

func (s *Table_primaryContext) Match_recognize_clause() IMatch_recognize_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatch_recognize_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatch_recognize_clauseContext)
}

func (s *Table_primaryContext) Sample_clause() ISample_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISample_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISample_clauseContext)
}

func (s *Table_primaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_primaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_primaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTable_primary(s)
	}
}

func (s *Table_primaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTable_primary(s)
	}
}

func (s *Table_primaryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTable_primary(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Table_primary() (localctx ITable_primaryContext) {
	return p.table_primary(0)
}

func (p *GoogleSQLParser) table_primary(_p int) (localctx ITable_primaryContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewTable_primaryContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ITable_primaryContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 654
	p.EnterRecursionRule(localctx, 654, GoogleSQLParserRULE_table_primary, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4163)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 516, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(4156)
			p.Tvf_with_suffixes()
		}

	case 2:
		{
			p.SetState(4157)
			p.Table_path_expression()
		}

	case 3:
		{
			p.SetState(4158)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4159)
			p.Join()
		}
		{
			p.SetState(4160)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		{
			p.SetState(4162)
			p.Table_subquery()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4171)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 518, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(4169)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 517, p.GetParserRuleContext()) {
			case 1:
				localctx = NewTable_primaryContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_table_primary)
				p.SetState(4165)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
					goto errorExit
				}
				{
					p.SetState(4166)
					p.Match_recognize_clause()
				}

			case 2:
				localctx = NewTable_primaryContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_table_primary)
				p.SetState(4167)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
					goto errorExit
				}
				{
					p.SetState(4168)
					p.Sample_clause()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(4173)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 518, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITvf_with_suffixesContext is an interface to support dynamic dispatch.
type ITvf_with_suffixesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Tvf_prefix_no_args() ITvf_prefix_no_argsContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Hint() IHintContext
	Pivot_or_unpivot_clause_and_aliases() IPivot_or_unpivot_clause_and_aliasesContext
	Tvf_prefix() ITvf_prefixContext

	// IsTvf_with_suffixesContext differentiates from other interfaces.
	IsTvf_with_suffixesContext()
}

type Tvf_with_suffixesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTvf_with_suffixesContext() *Tvf_with_suffixesContext {
	var p = new(Tvf_with_suffixesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_tvf_with_suffixes
	return p
}

func InitEmptyTvf_with_suffixesContext(p *Tvf_with_suffixesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_tvf_with_suffixes
}

func (*Tvf_with_suffixesContext) IsTvf_with_suffixesContext() {}

func NewTvf_with_suffixesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tvf_with_suffixesContext {
	var p = new(Tvf_with_suffixesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_tvf_with_suffixes

	return p
}

func (s *Tvf_with_suffixesContext) GetParser() antlr.Parser { return s.parser }

func (s *Tvf_with_suffixesContext) Tvf_prefix_no_args() ITvf_prefix_no_argsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITvf_prefix_no_argsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITvf_prefix_no_argsContext)
}

func (s *Tvf_with_suffixesContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Tvf_with_suffixesContext) Hint() IHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHintContext)
}

func (s *Tvf_with_suffixesContext) Pivot_or_unpivot_clause_and_aliases() IPivot_or_unpivot_clause_and_aliasesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPivot_or_unpivot_clause_and_aliasesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPivot_or_unpivot_clause_and_aliasesContext)
}

func (s *Tvf_with_suffixesContext) Tvf_prefix() ITvf_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITvf_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITvf_prefixContext)
}

func (s *Tvf_with_suffixesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tvf_with_suffixesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tvf_with_suffixesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTvf_with_suffixes(s)
	}
}

func (s *Tvf_with_suffixesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTvf_with_suffixes(s)
	}
}

func (s *Tvf_with_suffixesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTvf_with_suffixes(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Tvf_with_suffixes() (localctx ITvf_with_suffixesContext) {
	localctx = NewTvf_with_suffixesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 656, GoogleSQLParserRULE_tvf_with_suffixes)
	p.SetState(4190)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 523, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4174)
			p.Tvf_prefix_no_args()
		}
		{
			p.SetState(4175)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(4177)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 519, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4176)
				p.Hint()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(4180)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 520, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4179)
				p.Pivot_or_unpivot_clause_and_aliases()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4182)
			p.Tvf_prefix()
		}
		{
			p.SetState(4183)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(4185)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 521, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4184)
				p.Hint()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(4188)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 522, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4187)
				p.Pivot_or_unpivot_clause_and_aliases()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPivot_or_unpivot_clause_and_aliasesContext is an interface to support dynamic dispatch.
type IPivot_or_unpivot_clause_and_aliasesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AS_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext
	Pivot_clause() IPivot_clauseContext
	As_alias() IAs_aliasContext
	Unpivot_clause() IUnpivot_clauseContext
	Qualify_clause_nonreserved() IQualify_clause_nonreservedContext

	// IsPivot_or_unpivot_clause_and_aliasesContext differentiates from other interfaces.
	IsPivot_or_unpivot_clause_and_aliasesContext()
}

type Pivot_or_unpivot_clause_and_aliasesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPivot_or_unpivot_clause_and_aliasesContext() *Pivot_or_unpivot_clause_and_aliasesContext {
	var p = new(Pivot_or_unpivot_clause_and_aliasesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_pivot_or_unpivot_clause_and_aliases
	return p
}

func InitEmptyPivot_or_unpivot_clause_and_aliasesContext(p *Pivot_or_unpivot_clause_and_aliasesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_pivot_or_unpivot_clause_and_aliases
}

func (*Pivot_or_unpivot_clause_and_aliasesContext) IsPivot_or_unpivot_clause_and_aliasesContext() {}

func NewPivot_or_unpivot_clause_and_aliasesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pivot_or_unpivot_clause_and_aliasesContext {
	var p = new(Pivot_or_unpivot_clause_and_aliasesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_pivot_or_unpivot_clause_and_aliases

	return p
}

func (s *Pivot_or_unpivot_clause_and_aliasesContext) GetParser() antlr.Parser { return s.parser }

func (s *Pivot_or_unpivot_clause_and_aliasesContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Pivot_or_unpivot_clause_and_aliasesContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Pivot_or_unpivot_clause_and_aliasesContext) Pivot_clause() IPivot_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPivot_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPivot_clauseContext)
}

func (s *Pivot_or_unpivot_clause_and_aliasesContext) As_alias() IAs_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_aliasContext)
}

func (s *Pivot_or_unpivot_clause_and_aliasesContext) Unpivot_clause() IUnpivot_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnpivot_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnpivot_clauseContext)
}

func (s *Pivot_or_unpivot_clause_and_aliasesContext) Qualify_clause_nonreserved() IQualify_clause_nonreservedContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualify_clause_nonreservedContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualify_clause_nonreservedContext)
}

func (s *Pivot_or_unpivot_clause_and_aliasesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pivot_or_unpivot_clause_and_aliasesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pivot_or_unpivot_clause_and_aliasesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPivot_or_unpivot_clause_and_aliases(s)
	}
}

func (s *Pivot_or_unpivot_clause_and_aliasesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPivot_or_unpivot_clause_and_aliases(s)
	}
}

func (s *Pivot_or_unpivot_clause_and_aliasesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPivot_or_unpivot_clause_and_aliases(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Pivot_or_unpivot_clause_and_aliases() (localctx IPivot_or_unpivot_clause_and_aliasesContext) {
	localctx = NewPivot_or_unpivot_clause_and_aliasesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 658, GoogleSQLParserRULE_pivot_or_unpivot_clause_and_aliases)
	p.SetState(4235)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 528, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4192)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4193)
			p.Identifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4194)
			p.Identifier()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4195)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4196)
			p.Identifier()
		}
		{
			p.SetState(4197)
			p.Pivot_clause()
		}
		p.SetState(4199)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 524, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4198)
				p.As_alias()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4201)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4202)
			p.Identifier()
		}
		{
			p.SetState(4203)
			p.Unpivot_clause()
		}
		p.SetState(4205)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 525, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4204)
				p.As_alias()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4207)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4208)
			p.Identifier()
		}
		{
			p.SetState(4209)
			p.Qualify_clause_nonreserved()
		}

		p.NotifyErrorListeners("QUALIFY clause must be used in conjunction with WHERE or GROUP BY or HAVING clause", nil, nil)

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4212)
			p.Identifier()
		}
		{
			p.SetState(4213)
			p.Pivot_clause()
		}
		{
			p.SetState(4214)
			p.As_alias()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(4216)
			p.Identifier()
		}
		{
			p.SetState(4217)
			p.Unpivot_clause()
		}
		{
			p.SetState(4218)
			p.As_alias()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(4220)
			p.Identifier()
		}
		{
			p.SetState(4221)
			p.Qualify_clause_nonreserved()
		}

		p.NotifyErrorListeners("QUALIFY clause must be used in conjunction with WHERE or GROUP BY or HAVING clause", nil, nil)

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(4224)
			p.Pivot_clause()
		}
		p.SetState(4226)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 526, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4225)
				p.As_alias()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(4228)
			p.Unpivot_clause()
		}
		p.SetState(4230)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 527, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4229)
				p.As_alias()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(4232)
			p.Qualify_clause_nonreserved()
		}

		p.NotifyErrorListeners("QUALIFY clause must be used in conjunction with WHERE or GROUP BY or HAVING clause", nil, nil)

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAs_aliasContext is an interface to support dynamic dispatch.
type IAs_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	AS_SYMBOL() antlr.TerminalNode

	// IsAs_aliasContext differentiates from other interfaces.
	IsAs_aliasContext()
}

type As_aliasContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAs_aliasContext() *As_aliasContext {
	var p = new(As_aliasContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_as_alias
	return p
}

func InitEmptyAs_aliasContext(p *As_aliasContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_as_alias
}

func (*As_aliasContext) IsAs_aliasContext() {}

func NewAs_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *As_aliasContext {
	var p = new(As_aliasContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_as_alias

	return p
}

func (s *As_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *As_aliasContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *As_aliasContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *As_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *As_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *As_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAs_alias(s)
	}
}

func (s *As_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAs_alias(s)
	}
}

func (s *As_aliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAs_alias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) As_alias() (localctx IAs_aliasContext) {
	localctx = NewAs_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 660, GoogleSQLParserRULE_as_alias)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4238)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAS_SYMBOL {
		{
			p.SetState(4237)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(4240)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISample_clauseContext is an interface to support dynamic dispatch.
type ISample_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TABLESAMPLE_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Sample_size() ISample_sizeContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Opt_sample_clause_suffix() IOpt_sample_clause_suffixContext

	// IsSample_clauseContext differentiates from other interfaces.
	IsSample_clauseContext()
}

type Sample_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySample_clauseContext() *Sample_clauseContext {
	var p = new(Sample_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_sample_clause
	return p
}

func InitEmptySample_clauseContext(p *Sample_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_sample_clause
}

func (*Sample_clauseContext) IsSample_clauseContext() {}

func NewSample_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sample_clauseContext {
	var p = new(Sample_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_sample_clause

	return p
}

func (s *Sample_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Sample_clauseContext) TABLESAMPLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTABLESAMPLE_SYMBOL, 0)
}

func (s *Sample_clauseContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Sample_clauseContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Sample_clauseContext) Sample_size() ISample_sizeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISample_sizeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISample_sizeContext)
}

func (s *Sample_clauseContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Sample_clauseContext) Opt_sample_clause_suffix() IOpt_sample_clause_suffixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_sample_clause_suffixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_sample_clause_suffixContext)
}

func (s *Sample_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sample_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sample_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSample_clause(s)
	}
}

func (s *Sample_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSample_clause(s)
	}
}

func (s *Sample_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSample_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Sample_clause() (localctx ISample_clauseContext) {
	localctx = NewSample_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 662, GoogleSQLParserRULE_sample_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4242)
		p.Match(GoogleSQLParserTABLESAMPLE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4243)
		p.Identifier()
	}
	{
		p.SetState(4244)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4245)
		p.Sample_size()
	}
	{
		p.SetState(4246)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4247)
		p.Opt_sample_clause_suffix()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_sample_clause_suffixContext is an interface to support dynamic dispatch.
type IOpt_sample_clause_suffixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Repeatable_clause() IRepeatable_clauseContext
	WITH_SYMBOL() antlr.TerminalNode
	WEIGHT_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext
	AS_SYMBOL() antlr.TerminalNode

	// IsOpt_sample_clause_suffixContext differentiates from other interfaces.
	IsOpt_sample_clause_suffixContext()
}

type Opt_sample_clause_suffixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_sample_clause_suffixContext() *Opt_sample_clause_suffixContext {
	var p = new(Opt_sample_clause_suffixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_sample_clause_suffix
	return p
}

func InitEmptyOpt_sample_clause_suffixContext(p *Opt_sample_clause_suffixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_sample_clause_suffix
}

func (*Opt_sample_clause_suffixContext) IsOpt_sample_clause_suffixContext() {}

func NewOpt_sample_clause_suffixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_sample_clause_suffixContext {
	var p = new(Opt_sample_clause_suffixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_sample_clause_suffix

	return p
}

func (s *Opt_sample_clause_suffixContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_sample_clause_suffixContext) Repeatable_clause() IRepeatable_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRepeatable_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRepeatable_clauseContext)
}

func (s *Opt_sample_clause_suffixContext) WITH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWITH_SYMBOL, 0)
}

func (s *Opt_sample_clause_suffixContext) WEIGHT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWEIGHT_SYMBOL, 0)
}

func (s *Opt_sample_clause_suffixContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Opt_sample_clause_suffixContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Opt_sample_clause_suffixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_sample_clause_suffixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_sample_clause_suffixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_sample_clause_suffix(s)
	}
}

func (s *Opt_sample_clause_suffixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_sample_clause_suffix(s)
	}
}

func (s *Opt_sample_clause_suffixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_sample_clause_suffix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_sample_clause_suffix() (localctx IOpt_sample_clause_suffixContext) {
	localctx = NewOpt_sample_clause_suffixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 664, GoogleSQLParserRULE_opt_sample_clause_suffix)
	p.SetState(4268)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 533, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4249)
			p.Repeatable_clause()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4250)
			p.Match(GoogleSQLParserWITH_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4251)
			p.Match(GoogleSQLParserWEIGHT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(4253)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 530, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4252)
				p.Repeatable_clause()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4255)
			p.Match(GoogleSQLParserWITH_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4256)
			p.Match(GoogleSQLParserWEIGHT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4257)
			p.Identifier()
		}
		p.SetState(4259)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 531, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4258)
				p.Repeatable_clause()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4261)
			p.Match(GoogleSQLParserWITH_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4262)
			p.Match(GoogleSQLParserWEIGHT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4263)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4264)
			p.Identifier()
		}
		p.SetState(4266)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 532, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4265)
				p.Repeatable_clause()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRepeatable_clauseContext is an interface to support dynamic dispatch.
type IRepeatable_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	REPEATABLE_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Possibly_cast_int_literal_or_parameter() IPossibly_cast_int_literal_or_parameterContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsRepeatable_clauseContext differentiates from other interfaces.
	IsRepeatable_clauseContext()
}

type Repeatable_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRepeatable_clauseContext() *Repeatable_clauseContext {
	var p = new(Repeatable_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_repeatable_clause
	return p
}

func InitEmptyRepeatable_clauseContext(p *Repeatable_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_repeatable_clause
}

func (*Repeatable_clauseContext) IsRepeatable_clauseContext() {}

func NewRepeatable_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Repeatable_clauseContext {
	var p = new(Repeatable_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_repeatable_clause

	return p
}

func (s *Repeatable_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Repeatable_clauseContext) REPEATABLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPEATABLE_SYMBOL, 0)
}

func (s *Repeatable_clauseContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Repeatable_clauseContext) Possibly_cast_int_literal_or_parameter() IPossibly_cast_int_literal_or_parameterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPossibly_cast_int_literal_or_parameterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPossibly_cast_int_literal_or_parameterContext)
}

func (s *Repeatable_clauseContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Repeatable_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Repeatable_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Repeatable_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRepeatable_clause(s)
	}
}

func (s *Repeatable_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRepeatable_clause(s)
	}
}

func (s *Repeatable_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRepeatable_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Repeatable_clause() (localctx IRepeatable_clauseContext) {
	localctx = NewRepeatable_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 666, GoogleSQLParserRULE_repeatable_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4270)
		p.Match(GoogleSQLParserREPEATABLE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4271)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4272)
		p.Possibly_cast_int_literal_or_parameter()
	}
	{
		p.SetState(4273)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPossibly_cast_int_literal_or_parameterContext is an interface to support dynamic dispatch.
type IPossibly_cast_int_literal_or_parameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Cast_int_literal_or_parameter() ICast_int_literal_or_parameterContext
	Int_literal_or_parameter() IInt_literal_or_parameterContext

	// IsPossibly_cast_int_literal_or_parameterContext differentiates from other interfaces.
	IsPossibly_cast_int_literal_or_parameterContext()
}

type Possibly_cast_int_literal_or_parameterContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPossibly_cast_int_literal_or_parameterContext() *Possibly_cast_int_literal_or_parameterContext {
	var p = new(Possibly_cast_int_literal_or_parameterContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_possibly_cast_int_literal_or_parameter
	return p
}

func InitEmptyPossibly_cast_int_literal_or_parameterContext(p *Possibly_cast_int_literal_or_parameterContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_possibly_cast_int_literal_or_parameter
}

func (*Possibly_cast_int_literal_or_parameterContext) IsPossibly_cast_int_literal_or_parameterContext() {
}

func NewPossibly_cast_int_literal_or_parameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Possibly_cast_int_literal_or_parameterContext {
	var p = new(Possibly_cast_int_literal_or_parameterContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_possibly_cast_int_literal_or_parameter

	return p
}

func (s *Possibly_cast_int_literal_or_parameterContext) GetParser() antlr.Parser { return s.parser }

func (s *Possibly_cast_int_literal_or_parameterContext) Cast_int_literal_or_parameter() ICast_int_literal_or_parameterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICast_int_literal_or_parameterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICast_int_literal_or_parameterContext)
}

func (s *Possibly_cast_int_literal_or_parameterContext) Int_literal_or_parameter() IInt_literal_or_parameterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInt_literal_or_parameterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInt_literal_or_parameterContext)
}

func (s *Possibly_cast_int_literal_or_parameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Possibly_cast_int_literal_or_parameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Possibly_cast_int_literal_or_parameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPossibly_cast_int_literal_or_parameter(s)
	}
}

func (s *Possibly_cast_int_literal_or_parameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPossibly_cast_int_literal_or_parameter(s)
	}
}

func (s *Possibly_cast_int_literal_or_parameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPossibly_cast_int_literal_or_parameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Possibly_cast_int_literal_or_parameter() (localctx IPossibly_cast_int_literal_or_parameterContext) {
	localctx = NewPossibly_cast_int_literal_or_parameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 668, GoogleSQLParserRULE_possibly_cast_int_literal_or_parameter)
	p.SetState(4277)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserCAST_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4275)
			p.Cast_int_literal_or_parameter()
		}

	case GoogleSQLParserQUESTION_SYMBOL, GoogleSQLParserAT_SYMBOL, GoogleSQLParserATAT_SYMBOL, GoogleSQLParserINTEGER_LITERAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4276)
			p.Int_literal_or_parameter()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICast_int_literal_or_parameterContext is an interface to support dynamic dispatch.
type ICast_int_literal_or_parameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CAST_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Int_literal_or_parameter() IInt_literal_or_parameterContext
	AS_SYMBOL() antlr.TerminalNode
	Type_() ITypeContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Opt_format() IOpt_formatContext

	// IsCast_int_literal_or_parameterContext differentiates from other interfaces.
	IsCast_int_literal_or_parameterContext()
}

type Cast_int_literal_or_parameterContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCast_int_literal_or_parameterContext() *Cast_int_literal_or_parameterContext {
	var p = new(Cast_int_literal_or_parameterContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_cast_int_literal_or_parameter
	return p
}

func InitEmptyCast_int_literal_or_parameterContext(p *Cast_int_literal_or_parameterContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_cast_int_literal_or_parameter
}

func (*Cast_int_literal_or_parameterContext) IsCast_int_literal_or_parameterContext() {}

func NewCast_int_literal_or_parameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cast_int_literal_or_parameterContext {
	var p = new(Cast_int_literal_or_parameterContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_cast_int_literal_or_parameter

	return p
}

func (s *Cast_int_literal_or_parameterContext) GetParser() antlr.Parser { return s.parser }

func (s *Cast_int_literal_or_parameterContext) CAST_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCAST_SYMBOL, 0)
}

func (s *Cast_int_literal_or_parameterContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Cast_int_literal_or_parameterContext) Int_literal_or_parameter() IInt_literal_or_parameterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInt_literal_or_parameterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInt_literal_or_parameterContext)
}

func (s *Cast_int_literal_or_parameterContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Cast_int_literal_or_parameterContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Cast_int_literal_or_parameterContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Cast_int_literal_or_parameterContext) Opt_format() IOpt_formatContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_formatContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_formatContext)
}

func (s *Cast_int_literal_or_parameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cast_int_literal_or_parameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cast_int_literal_or_parameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCast_int_literal_or_parameter(s)
	}
}

func (s *Cast_int_literal_or_parameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCast_int_literal_or_parameter(s)
	}
}

func (s *Cast_int_literal_or_parameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCast_int_literal_or_parameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Cast_int_literal_or_parameter() (localctx ICast_int_literal_or_parameterContext) {
	localctx = NewCast_int_literal_or_parameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 670, GoogleSQLParserRULE_cast_int_literal_or_parameter)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4279)
		p.Match(GoogleSQLParserCAST_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4280)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4281)
		p.Int_literal_or_parameter()
	}
	{
		p.SetState(4282)
		p.Match(GoogleSQLParserAS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4283)
		p.Type_()
	}
	p.SetState(4285)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserFORMAT_SYMBOL {
		{
			p.SetState(4284)
			p.Opt_format()
		}

	}
	{
		p.SetState(4287)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISample_sizeContext is an interface to support dynamic dispatch.
type ISample_sizeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Sample_size_value() ISample_size_valueContext
	Sample_size_unit() ISample_size_unitContext
	Partition_by_clause_prefix_no_hint() IPartition_by_clause_prefix_no_hintContext

	// IsSample_sizeContext differentiates from other interfaces.
	IsSample_sizeContext()
}

type Sample_sizeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySample_sizeContext() *Sample_sizeContext {
	var p = new(Sample_sizeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_sample_size
	return p
}

func InitEmptySample_sizeContext(p *Sample_sizeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_sample_size
}

func (*Sample_sizeContext) IsSample_sizeContext() {}

func NewSample_sizeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sample_sizeContext {
	var p = new(Sample_sizeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_sample_size

	return p
}

func (s *Sample_sizeContext) GetParser() antlr.Parser { return s.parser }

func (s *Sample_sizeContext) Sample_size_value() ISample_size_valueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISample_size_valueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISample_size_valueContext)
}

func (s *Sample_sizeContext) Sample_size_unit() ISample_size_unitContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISample_size_unitContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISample_size_unitContext)
}

func (s *Sample_sizeContext) Partition_by_clause_prefix_no_hint() IPartition_by_clause_prefix_no_hintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartition_by_clause_prefix_no_hintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartition_by_clause_prefix_no_hintContext)
}

func (s *Sample_sizeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sample_sizeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sample_sizeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSample_size(s)
	}
}

func (s *Sample_sizeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSample_size(s)
	}
}

func (s *Sample_sizeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSample_size(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Sample_size() (localctx ISample_sizeContext) {
	localctx = NewSample_sizeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 672, GoogleSQLParserRULE_sample_size)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4289)
		p.Sample_size_value()
	}
	{
		p.SetState(4290)
		p.Sample_size_unit()
	}
	p.SetState(4292)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserPARTITION_SYMBOL {
		{
			p.SetState(4291)
			p.Partition_by_clause_prefix_no_hint()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISample_size_valueContext is an interface to support dynamic dispatch.
type ISample_size_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Possibly_cast_int_literal_or_parameter() IPossibly_cast_int_literal_or_parameterContext
	Floating_point_literal() IFloating_point_literalContext

	// IsSample_size_valueContext differentiates from other interfaces.
	IsSample_size_valueContext()
}

type Sample_size_valueContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySample_size_valueContext() *Sample_size_valueContext {
	var p = new(Sample_size_valueContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_sample_size_value
	return p
}

func InitEmptySample_size_valueContext(p *Sample_size_valueContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_sample_size_value
}

func (*Sample_size_valueContext) IsSample_size_valueContext() {}

func NewSample_size_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sample_size_valueContext {
	var p = new(Sample_size_valueContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_sample_size_value

	return p
}

func (s *Sample_size_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Sample_size_valueContext) Possibly_cast_int_literal_or_parameter() IPossibly_cast_int_literal_or_parameterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPossibly_cast_int_literal_or_parameterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPossibly_cast_int_literal_or_parameterContext)
}

func (s *Sample_size_valueContext) Floating_point_literal() IFloating_point_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFloating_point_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFloating_point_literalContext)
}

func (s *Sample_size_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sample_size_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sample_size_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSample_size_value(s)
	}
}

func (s *Sample_size_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSample_size_value(s)
	}
}

func (s *Sample_size_valueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSample_size_value(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Sample_size_value() (localctx ISample_size_valueContext) {
	localctx = NewSample_size_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 674, GoogleSQLParserRULE_sample_size_value)
	p.SetState(4296)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserQUESTION_SYMBOL, GoogleSQLParserAT_SYMBOL, GoogleSQLParserATAT_SYMBOL, GoogleSQLParserINTEGER_LITERAL, GoogleSQLParserCAST_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4294)
			p.Possibly_cast_int_literal_or_parameter()
		}

	case GoogleSQLParserFLOATING_POINT_LITERAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4295)
			p.Floating_point_literal()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISample_size_unitContext is an interface to support dynamic dispatch.
type ISample_size_unitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ROWS_SYMBOL() antlr.TerminalNode
	PERCENT_SYMBOL() antlr.TerminalNode

	// IsSample_size_unitContext differentiates from other interfaces.
	IsSample_size_unitContext()
}

type Sample_size_unitContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySample_size_unitContext() *Sample_size_unitContext {
	var p = new(Sample_size_unitContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_sample_size_unit
	return p
}

func InitEmptySample_size_unitContext(p *Sample_size_unitContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_sample_size_unit
}

func (*Sample_size_unitContext) IsSample_size_unitContext() {}

func NewSample_size_unitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sample_size_unitContext {
	var p = new(Sample_size_unitContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_sample_size_unit

	return p
}

func (s *Sample_size_unitContext) GetParser() antlr.Parser { return s.parser }

func (s *Sample_size_unitContext) ROWS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserROWS_SYMBOL, 0)
}

func (s *Sample_size_unitContext) PERCENT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPERCENT_SYMBOL, 0)
}

func (s *Sample_size_unitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sample_size_unitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sample_size_unitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSample_size_unit(s)
	}
}

func (s *Sample_size_unitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSample_size_unit(s)
	}
}

func (s *Sample_size_unitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSample_size_unit(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Sample_size_unit() (localctx ISample_size_unitContext) {
	localctx = NewSample_size_unitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 676, GoogleSQLParserRULE_sample_size_unit)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4298)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserPERCENT_SYMBOL || _la == GoogleSQLParserROWS_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPartition_by_clause_prefix_no_hintContext is an interface to support dynamic dispatch.
type IPartition_by_clause_prefix_no_hintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PARTITION_SYMBOL() antlr.TerminalNode
	BY_SYMBOL() antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsPartition_by_clause_prefix_no_hintContext differentiates from other interfaces.
	IsPartition_by_clause_prefix_no_hintContext()
}

type Partition_by_clause_prefix_no_hintContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartition_by_clause_prefix_no_hintContext() *Partition_by_clause_prefix_no_hintContext {
	var p = new(Partition_by_clause_prefix_no_hintContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_partition_by_clause_prefix_no_hint
	return p
}

func InitEmptyPartition_by_clause_prefix_no_hintContext(p *Partition_by_clause_prefix_no_hintContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_partition_by_clause_prefix_no_hint
}

func (*Partition_by_clause_prefix_no_hintContext) IsPartition_by_clause_prefix_no_hintContext() {}

func NewPartition_by_clause_prefix_no_hintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Partition_by_clause_prefix_no_hintContext {
	var p = new(Partition_by_clause_prefix_no_hintContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_partition_by_clause_prefix_no_hint

	return p
}

func (s *Partition_by_clause_prefix_no_hintContext) GetParser() antlr.Parser { return s.parser }

func (s *Partition_by_clause_prefix_no_hintContext) PARTITION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPARTITION_SYMBOL, 0)
}

func (s *Partition_by_clause_prefix_no_hintContext) BY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBY_SYMBOL, 0)
}

func (s *Partition_by_clause_prefix_no_hintContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *Partition_by_clause_prefix_no_hintContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Partition_by_clause_prefix_no_hintContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Partition_by_clause_prefix_no_hintContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Partition_by_clause_prefix_no_hintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Partition_by_clause_prefix_no_hintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Partition_by_clause_prefix_no_hintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPartition_by_clause_prefix_no_hint(s)
	}
}

func (s *Partition_by_clause_prefix_no_hintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPartition_by_clause_prefix_no_hint(s)
	}
}

func (s *Partition_by_clause_prefix_no_hintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPartition_by_clause_prefix_no_hint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Partition_by_clause_prefix_no_hint() (localctx IPartition_by_clause_prefix_no_hintContext) {
	localctx = NewPartition_by_clause_prefix_no_hintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 678, GoogleSQLParserRULE_partition_by_clause_prefix_no_hint)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4300)
		p.Match(GoogleSQLParserPARTITION_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4301)
		p.Match(GoogleSQLParserBY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4302)
		p.expression(0)
	}
	p.SetState(4307)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(4303)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4304)
			p.expression(0)
		}

		p.SetState(4309)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMatch_recognize_clauseContext is an interface to support dynamic dispatch.
type IMatch_recognize_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MATCH_RECOGNIZE_SYMBOL() antlr.TerminalNode
	AllLR_BRACKET_SYMBOL() []antlr.TerminalNode
	LR_BRACKET_SYMBOL(i int) antlr.TerminalNode
	Order_by_clause() IOrder_by_clauseContext
	MEASURES_SYMBOL() antlr.TerminalNode
	Select_list_prefix_with_as_aliases() ISelect_list_prefix_with_as_aliasesContext
	PATTERN_SYMBOL() antlr.TerminalNode
	Row_pattern_expr() IRow_pattern_exprContext
	AllRR_BRACKET_SYMBOL() []antlr.TerminalNode
	RR_BRACKET_SYMBOL(i int) antlr.TerminalNode
	DEFINE_SYMBOL() antlr.TerminalNode
	With_expression_variable_prefix() IWith_expression_variable_prefixContext
	Partition_by_clause_prefix() IPartition_by_clause_prefixContext
	As_alias() IAs_aliasContext

	// IsMatch_recognize_clauseContext differentiates from other interfaces.
	IsMatch_recognize_clauseContext()
}

type Match_recognize_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatch_recognize_clauseContext() *Match_recognize_clauseContext {
	var p = new(Match_recognize_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_match_recognize_clause
	return p
}

func InitEmptyMatch_recognize_clauseContext(p *Match_recognize_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_match_recognize_clause
}

func (*Match_recognize_clauseContext) IsMatch_recognize_clauseContext() {}

func NewMatch_recognize_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Match_recognize_clauseContext {
	var p = new(Match_recognize_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_match_recognize_clause

	return p
}

func (s *Match_recognize_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Match_recognize_clauseContext) MATCH_RECOGNIZE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMATCH_RECOGNIZE_SYMBOL, 0)
}

func (s *Match_recognize_clauseContext) AllLR_BRACKET_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserLR_BRACKET_SYMBOL)
}

func (s *Match_recognize_clauseContext) LR_BRACKET_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, i)
}

func (s *Match_recognize_clauseContext) Order_by_clause() IOrder_by_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrder_by_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrder_by_clauseContext)
}

func (s *Match_recognize_clauseContext) MEASURES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMEASURES_SYMBOL, 0)
}

func (s *Match_recognize_clauseContext) Select_list_prefix_with_as_aliases() ISelect_list_prefix_with_as_aliasesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_list_prefix_with_as_aliasesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_list_prefix_with_as_aliasesContext)
}

func (s *Match_recognize_clauseContext) PATTERN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPATTERN_SYMBOL, 0)
}

func (s *Match_recognize_clauseContext) Row_pattern_expr() IRow_pattern_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRow_pattern_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRow_pattern_exprContext)
}

func (s *Match_recognize_clauseContext) AllRR_BRACKET_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserRR_BRACKET_SYMBOL)
}

func (s *Match_recognize_clauseContext) RR_BRACKET_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, i)
}

func (s *Match_recognize_clauseContext) DEFINE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDEFINE_SYMBOL, 0)
}

func (s *Match_recognize_clauseContext) With_expression_variable_prefix() IWith_expression_variable_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_expression_variable_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_expression_variable_prefixContext)
}

func (s *Match_recognize_clauseContext) Partition_by_clause_prefix() IPartition_by_clause_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartition_by_clause_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartition_by_clause_prefixContext)
}

func (s *Match_recognize_clauseContext) As_alias() IAs_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_aliasContext)
}

func (s *Match_recognize_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Match_recognize_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Match_recognize_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterMatch_recognize_clause(s)
	}
}

func (s *Match_recognize_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitMatch_recognize_clause(s)
	}
}

func (s *Match_recognize_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitMatch_recognize_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Match_recognize_clause() (localctx IMatch_recognize_clauseContext) {
	localctx = NewMatch_recognize_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 680, GoogleSQLParserRULE_match_recognize_clause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4310)
		p.Match(GoogleSQLParserMATCH_RECOGNIZE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4311)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(4313)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserPARTITION_SYMBOL {
		{
			p.SetState(4312)
			p.Partition_by_clause_prefix()
		}

	}
	{
		p.SetState(4315)
		p.Order_by_clause()
	}
	{
		p.SetState(4316)
		p.Match(GoogleSQLParserMEASURES_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4317)
		p.Select_list_prefix_with_as_aliases()
	}
	{
		p.SetState(4318)
		p.Match(GoogleSQLParserPATTERN_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4319)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4320)
		p.row_pattern_expr(0)
	}
	{
		p.SetState(4321)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4322)
		p.Match(GoogleSQLParserDEFINE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4323)
		p.With_expression_variable_prefix()
	}
	{
		p.SetState(4324)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(4326)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 540, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4325)
			p.As_alias()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRow_pattern_exprContext is an interface to support dynamic dispatch.
type IRow_pattern_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Row_pattern_concatenation() IRow_pattern_concatenationContext
	Row_pattern_expr() IRow_pattern_exprContext
	STROKE_SYMBOL() antlr.TerminalNode

	// IsRow_pattern_exprContext differentiates from other interfaces.
	IsRow_pattern_exprContext()
}

type Row_pattern_exprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRow_pattern_exprContext() *Row_pattern_exprContext {
	var p = new(Row_pattern_exprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_row_pattern_expr
	return p
}

func InitEmptyRow_pattern_exprContext(p *Row_pattern_exprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_row_pattern_expr
}

func (*Row_pattern_exprContext) IsRow_pattern_exprContext() {}

func NewRow_pattern_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Row_pattern_exprContext {
	var p = new(Row_pattern_exprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_row_pattern_expr

	return p
}

func (s *Row_pattern_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Row_pattern_exprContext) Row_pattern_concatenation() IRow_pattern_concatenationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRow_pattern_concatenationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRow_pattern_concatenationContext)
}

func (s *Row_pattern_exprContext) Row_pattern_expr() IRow_pattern_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRow_pattern_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRow_pattern_exprContext)
}

func (s *Row_pattern_exprContext) STROKE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTROKE_SYMBOL, 0)
}

func (s *Row_pattern_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Row_pattern_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Row_pattern_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRow_pattern_expr(s)
	}
}

func (s *Row_pattern_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRow_pattern_expr(s)
	}
}

func (s *Row_pattern_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRow_pattern_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Row_pattern_expr() (localctx IRow_pattern_exprContext) {
	return p.row_pattern_expr(0)
}

func (p *GoogleSQLParser) row_pattern_expr(_p int) (localctx IRow_pattern_exprContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewRow_pattern_exprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IRow_pattern_exprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 682
	p.EnterRecursionRule(localctx, 682, GoogleSQLParserRULE_row_pattern_expr, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4329)
		p.row_pattern_concatenation(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4336)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 541, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewRow_pattern_exprContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_row_pattern_expr)
			p.SetState(4331)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				goto errorExit
			}
			{
				p.SetState(4332)
				p.Match(GoogleSQLParserSTROKE_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(4333)
				p.row_pattern_concatenation(0)
			}

		}
		p.SetState(4338)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 541, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRow_pattern_concatenationContext is an interface to support dynamic dispatch.
type IRow_pattern_concatenationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Row_pattern_factor() IRow_pattern_factorContext
	Row_pattern_concatenation() IRow_pattern_concatenationContext

	// IsRow_pattern_concatenationContext differentiates from other interfaces.
	IsRow_pattern_concatenationContext()
}

type Row_pattern_concatenationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRow_pattern_concatenationContext() *Row_pattern_concatenationContext {
	var p = new(Row_pattern_concatenationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_row_pattern_concatenation
	return p
}

func InitEmptyRow_pattern_concatenationContext(p *Row_pattern_concatenationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_row_pattern_concatenation
}

func (*Row_pattern_concatenationContext) IsRow_pattern_concatenationContext() {}

func NewRow_pattern_concatenationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Row_pattern_concatenationContext {
	var p = new(Row_pattern_concatenationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_row_pattern_concatenation

	return p
}

func (s *Row_pattern_concatenationContext) GetParser() antlr.Parser { return s.parser }

func (s *Row_pattern_concatenationContext) Row_pattern_factor() IRow_pattern_factorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRow_pattern_factorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRow_pattern_factorContext)
}

func (s *Row_pattern_concatenationContext) Row_pattern_concatenation() IRow_pattern_concatenationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRow_pattern_concatenationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRow_pattern_concatenationContext)
}

func (s *Row_pattern_concatenationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Row_pattern_concatenationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Row_pattern_concatenationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRow_pattern_concatenation(s)
	}
}

func (s *Row_pattern_concatenationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRow_pattern_concatenation(s)
	}
}

func (s *Row_pattern_concatenationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRow_pattern_concatenation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Row_pattern_concatenation() (localctx IRow_pattern_concatenationContext) {
	return p.row_pattern_concatenation(0)
}

func (p *GoogleSQLParser) row_pattern_concatenation(_p int) (localctx IRow_pattern_concatenationContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewRow_pattern_concatenationContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IRow_pattern_concatenationContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 684
	p.EnterRecursionRule(localctx, 684, GoogleSQLParserRULE_row_pattern_concatenation, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4340)
		p.Row_pattern_factor()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4346)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 542, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewRow_pattern_concatenationContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_row_pattern_concatenation)
			p.SetState(4342)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				goto errorExit
			}
			{
				p.SetState(4343)
				p.Row_pattern_factor()
			}

		}
		p.SetState(4348)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 542, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRow_pattern_factorContext is an interface to support dynamic dispatch.
type IRow_pattern_factorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Row_pattern_expr() IRow_pattern_exprContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsRow_pattern_factorContext differentiates from other interfaces.
	IsRow_pattern_factorContext()
}

type Row_pattern_factorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRow_pattern_factorContext() *Row_pattern_factorContext {
	var p = new(Row_pattern_factorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_row_pattern_factor
	return p
}

func InitEmptyRow_pattern_factorContext(p *Row_pattern_factorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_row_pattern_factor
}

func (*Row_pattern_factorContext) IsRow_pattern_factorContext() {}

func NewRow_pattern_factorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Row_pattern_factorContext {
	var p = new(Row_pattern_factorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_row_pattern_factor

	return p
}

func (s *Row_pattern_factorContext) GetParser() antlr.Parser { return s.parser }

func (s *Row_pattern_factorContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Row_pattern_factorContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Row_pattern_factorContext) Row_pattern_expr() IRow_pattern_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRow_pattern_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRow_pattern_exprContext)
}

func (s *Row_pattern_factorContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Row_pattern_factorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Row_pattern_factorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Row_pattern_factorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRow_pattern_factor(s)
	}
}

func (s *Row_pattern_factorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRow_pattern_factor(s)
	}
}

func (s *Row_pattern_factorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRow_pattern_factor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Row_pattern_factor() (localctx IRow_pattern_factorContext) {
	localctx = NewRow_pattern_factorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 686, GoogleSQLParserRULE_row_pattern_factor)
	p.SetState(4354)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserCONFLICT_SYMBOL, GoogleSQLParserDESTINATION_SYMBOL, GoogleSQLParserPROPERTY_SYMBOL, GoogleSQLParserGRAPH_SYMBOL, GoogleSQLParserNODE_SYMBOL, GoogleSQLParserPROPERTIES_SYMBOL, GoogleSQLParserLABEL_SYMBOL, GoogleSQLParserEDGE_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4349)
			p.Identifier()
		}

	case GoogleSQLParserLR_BRACKET_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4350)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4351)
			p.row_pattern_expr(0)
		}
		{
			p.SetState(4352)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelect_list_prefix_with_as_aliasesContext is an interface to support dynamic dispatch.
type ISelect_list_prefix_with_as_aliasesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllSelect_column_expr_with_as_alias() []ISelect_column_expr_with_as_aliasContext
	Select_column_expr_with_as_alias(i int) ISelect_column_expr_with_as_aliasContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsSelect_list_prefix_with_as_aliasesContext differentiates from other interfaces.
	IsSelect_list_prefix_with_as_aliasesContext()
}

type Select_list_prefix_with_as_aliasesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_list_prefix_with_as_aliasesContext() *Select_list_prefix_with_as_aliasesContext {
	var p = new(Select_list_prefix_with_as_aliasesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_list_prefix_with_as_aliases
	return p
}

func InitEmptySelect_list_prefix_with_as_aliasesContext(p *Select_list_prefix_with_as_aliasesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_list_prefix_with_as_aliases
}

func (*Select_list_prefix_with_as_aliasesContext) IsSelect_list_prefix_with_as_aliasesContext() {}

func NewSelect_list_prefix_with_as_aliasesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_list_prefix_with_as_aliasesContext {
	var p = new(Select_list_prefix_with_as_aliasesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_select_list_prefix_with_as_aliases

	return p
}

func (s *Select_list_prefix_with_as_aliasesContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_list_prefix_with_as_aliasesContext) AllSelect_column_expr_with_as_alias() []ISelect_column_expr_with_as_aliasContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISelect_column_expr_with_as_aliasContext); ok {
			len++
		}
	}

	tst := make([]ISelect_column_expr_with_as_aliasContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISelect_column_expr_with_as_aliasContext); ok {
			tst[i] = t.(ISelect_column_expr_with_as_aliasContext)
			i++
		}
	}

	return tst
}

func (s *Select_list_prefix_with_as_aliasesContext) Select_column_expr_with_as_alias(i int) ISelect_column_expr_with_as_aliasContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_column_expr_with_as_aliasContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_column_expr_with_as_aliasContext)
}

func (s *Select_list_prefix_with_as_aliasesContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Select_list_prefix_with_as_aliasesContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Select_list_prefix_with_as_aliasesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_list_prefix_with_as_aliasesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_list_prefix_with_as_aliasesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSelect_list_prefix_with_as_aliases(s)
	}
}

func (s *Select_list_prefix_with_as_aliasesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSelect_list_prefix_with_as_aliases(s)
	}
}

func (s *Select_list_prefix_with_as_aliasesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSelect_list_prefix_with_as_aliases(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Select_list_prefix_with_as_aliases() (localctx ISelect_list_prefix_with_as_aliasesContext) {
	localctx = NewSelect_list_prefix_with_as_aliasesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 688, GoogleSQLParserRULE_select_list_prefix_with_as_aliases)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4356)
		p.Select_column_expr_with_as_alias()
	}
	p.SetState(4361)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(4357)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4358)
			p.Select_column_expr_with_as_alias()
		}

		p.SetState(4363)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelect_column_expr_with_as_aliasContext is an interface to support dynamic dispatch.
type ISelect_column_expr_with_as_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	AS_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext

	// IsSelect_column_expr_with_as_aliasContext differentiates from other interfaces.
	IsSelect_column_expr_with_as_aliasContext()
}

type Select_column_expr_with_as_aliasContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_column_expr_with_as_aliasContext() *Select_column_expr_with_as_aliasContext {
	var p = new(Select_column_expr_with_as_aliasContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_column_expr_with_as_alias
	return p
}

func InitEmptySelect_column_expr_with_as_aliasContext(p *Select_column_expr_with_as_aliasContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_column_expr_with_as_alias
}

func (*Select_column_expr_with_as_aliasContext) IsSelect_column_expr_with_as_aliasContext() {}

func NewSelect_column_expr_with_as_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_column_expr_with_as_aliasContext {
	var p = new(Select_column_expr_with_as_aliasContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_select_column_expr_with_as_alias

	return p
}

func (s *Select_column_expr_with_as_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_column_expr_with_as_aliasContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Select_column_expr_with_as_aliasContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Select_column_expr_with_as_aliasContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Select_column_expr_with_as_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_column_expr_with_as_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_column_expr_with_as_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSelect_column_expr_with_as_alias(s)
	}
}

func (s *Select_column_expr_with_as_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSelect_column_expr_with_as_alias(s)
	}
}

func (s *Select_column_expr_with_as_aliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSelect_column_expr_with_as_alias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Select_column_expr_with_as_alias() (localctx ISelect_column_expr_with_as_aliasContext) {
	localctx = NewSelect_column_expr_with_as_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 690, GoogleSQLParserRULE_select_column_expr_with_as_alias)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4364)
		p.expression(0)
	}
	{
		p.SetState(4365)
		p.Match(GoogleSQLParserAS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4366)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_subqueryContext is an interface to support dynamic dispatch.
type ITable_subqueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Parenthesized_query() IParenthesized_queryContext
	Opt_pivot_or_unpivot_clause_and_alias() IOpt_pivot_or_unpivot_clause_and_aliasContext

	// IsTable_subqueryContext differentiates from other interfaces.
	IsTable_subqueryContext()
}

type Table_subqueryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_subqueryContext() *Table_subqueryContext {
	var p = new(Table_subqueryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_subquery
	return p
}

func InitEmptyTable_subqueryContext(p *Table_subqueryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_subquery
}

func (*Table_subqueryContext) IsTable_subqueryContext() {}

func NewTable_subqueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_subqueryContext {
	var p = new(Table_subqueryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_table_subquery

	return p
}

func (s *Table_subqueryContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_subqueryContext) Parenthesized_query() IParenthesized_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesized_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesized_queryContext)
}

func (s *Table_subqueryContext) Opt_pivot_or_unpivot_clause_and_alias() IOpt_pivot_or_unpivot_clause_and_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_pivot_or_unpivot_clause_and_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_pivot_or_unpivot_clause_and_aliasContext)
}

func (s *Table_subqueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_subqueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_subqueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTable_subquery(s)
	}
}

func (s *Table_subqueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTable_subquery(s)
	}
}

func (s *Table_subqueryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTable_subquery(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Table_subquery() (localctx ITable_subqueryContext) {
	localctx = NewTable_subqueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 692, GoogleSQLParserRULE_table_subquery)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4368)
		p.Parenthesized_query()
	}
	p.SetState(4370)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 545, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4369)
			p.Opt_pivot_or_unpivot_clause_and_alias()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJoinContext is an interface to support dynamic dispatch.
type IJoinContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Table_primary() ITable_primaryContext
	AllJoin_item() []IJoin_itemContext
	Join_item(i int) IJoin_itemContext

	// IsJoinContext differentiates from other interfaces.
	IsJoinContext()
}

type JoinContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoinContext() *JoinContext {
	var p = new(JoinContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_join
	return p
}

func InitEmptyJoinContext(p *JoinContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_join
}

func (*JoinContext) IsJoinContext() {}

func NewJoinContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JoinContext {
	var p = new(JoinContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_join

	return p
}

func (s *JoinContext) GetParser() antlr.Parser { return s.parser }

func (s *JoinContext) Table_primary() ITable_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_primaryContext)
}

func (s *JoinContext) AllJoin_item() []IJoin_itemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IJoin_itemContext); ok {
			len++
		}
	}

	tst := make([]IJoin_itemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IJoin_itemContext); ok {
			tst[i] = t.(IJoin_itemContext)
			i++
		}
	}

	return tst
}

func (s *JoinContext) Join_item(i int) IJoin_itemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoin_itemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoin_itemContext)
}

func (s *JoinContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JoinContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterJoin(s)
	}
}

func (s *JoinContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitJoin(s)
	}
}

func (s *JoinContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitJoin(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Join() (localctx IJoinContext) {
	localctx = NewJoinContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 694, GoogleSQLParserRULE_join)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4372)
		p.table_primary(0)
	}
	p.SetState(4376)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64((_la-59)) & ^0x3f) == 0 && ((int64(1)<<(_la-59))&1073825795) != 0) || ((int64((_la-308)) & ^0x3f) == 0 && ((int64(1)<<(_la-308))&266241) != 0) {
		{
			p.SetState(4373)
			p.Join_item()
		}

		p.SetState(4378)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJoin_itemContext is an interface to support dynamic dispatch.
type IJoin_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	JOIN_SYMBOL() antlr.TerminalNode
	Table_primary() ITable_primaryContext
	Opt_natural() IOpt_naturalContext
	Join_type() IJoin_typeContext
	Join_hint() IJoin_hintContext
	Hint() IHintContext
	On_or_using_clause_list() IOn_or_using_clause_listContext

	// IsJoin_itemContext differentiates from other interfaces.
	IsJoin_itemContext()
}

type Join_itemContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoin_itemContext() *Join_itemContext {
	var p = new(Join_itemContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_join_item
	return p
}

func InitEmptyJoin_itemContext(p *Join_itemContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_join_item
}

func (*Join_itemContext) IsJoin_itemContext() {}

func NewJoin_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Join_itemContext {
	var p = new(Join_itemContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_join_item

	return p
}

func (s *Join_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Join_itemContext) JOIN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserJOIN_SYMBOL, 0)
}

func (s *Join_itemContext) Table_primary() ITable_primaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_primaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_primaryContext)
}

func (s *Join_itemContext) Opt_natural() IOpt_naturalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_naturalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_naturalContext)
}

func (s *Join_itemContext) Join_type() IJoin_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoin_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoin_typeContext)
}

func (s *Join_itemContext) Join_hint() IJoin_hintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoin_hintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoin_hintContext)
}

func (s *Join_itemContext) Hint() IHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHintContext)
}

func (s *Join_itemContext) On_or_using_clause_list() IOn_or_using_clause_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOn_or_using_clause_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOn_or_using_clause_listContext)
}

func (s *Join_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Join_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Join_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterJoin_item(s)
	}
}

func (s *Join_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitJoin_item(s)
	}
}

func (s *Join_itemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitJoin_item(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Join_item() (localctx IJoin_itemContext) {
	localctx = NewJoin_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 696, GoogleSQLParserRULE_join_item)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4380)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserNATURAL_SYMBOL {
		{
			p.SetState(4379)
			p.Opt_natural()
		}

	}
	p.SetState(4383)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-59)) & ^0x3f) == 0 && ((int64(1)<<(_la-59))&1073825793) != 0 {
		{
			p.SetState(4382)
			p.Join_type()
		}

	}
	p.SetState(4386)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserHASH_SYMBOL || _la == GoogleSQLParserLOOKUP_SYMBOL {
		{
			p.SetState(4385)
			p.Join_hint()
		}

	}
	{
		p.SetState(4388)
		p.Match(GoogleSQLParserJOIN_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(4390)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAT_SYMBOL {
		{
			p.SetState(4389)
			p.Hint()
		}

	}
	{
		p.SetState(4392)
		p.table_primary(0)
	}
	p.SetState(4394)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserON_SYMBOL || _la == GoogleSQLParserUSING_SYMBOL {
		{
			p.SetState(4393)
			p.On_or_using_clause_list()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOn_or_using_clause_listContext is an interface to support dynamic dispatch.
type IOn_or_using_clause_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllOn_or_using_clause() []IOn_or_using_clauseContext
	On_or_using_clause(i int) IOn_or_using_clauseContext

	// IsOn_or_using_clause_listContext differentiates from other interfaces.
	IsOn_or_using_clause_listContext()
}

type On_or_using_clause_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOn_or_using_clause_listContext() *On_or_using_clause_listContext {
	var p = new(On_or_using_clause_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_on_or_using_clause_list
	return p
}

func InitEmptyOn_or_using_clause_listContext(p *On_or_using_clause_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_on_or_using_clause_list
}

func (*On_or_using_clause_listContext) IsOn_or_using_clause_listContext() {}

func NewOn_or_using_clause_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *On_or_using_clause_listContext {
	var p = new(On_or_using_clause_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_on_or_using_clause_list

	return p
}

func (s *On_or_using_clause_listContext) GetParser() antlr.Parser { return s.parser }

func (s *On_or_using_clause_listContext) AllOn_or_using_clause() []IOn_or_using_clauseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOn_or_using_clauseContext); ok {
			len++
		}
	}

	tst := make([]IOn_or_using_clauseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOn_or_using_clauseContext); ok {
			tst[i] = t.(IOn_or_using_clauseContext)
			i++
		}
	}

	return tst
}

func (s *On_or_using_clause_listContext) On_or_using_clause(i int) IOn_or_using_clauseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOn_or_using_clauseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOn_or_using_clauseContext)
}

func (s *On_or_using_clause_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *On_or_using_clause_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *On_or_using_clause_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOn_or_using_clause_list(s)
	}
}

func (s *On_or_using_clause_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOn_or_using_clause_list(s)
	}
}

func (s *On_or_using_clause_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOn_or_using_clause_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) On_or_using_clause_list() (localctx IOn_or_using_clause_listContext) {
	localctx = NewOn_or_using_clause_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 698, GoogleSQLParserRULE_on_or_using_clause_list)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4397)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(4396)
				p.On_or_using_clause()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(4399)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 552, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOn_or_using_clauseContext is an interface to support dynamic dispatch.
type IOn_or_using_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	On_clause() IOn_clauseContext
	Using_clause() IUsing_clauseContext

	// IsOn_or_using_clauseContext differentiates from other interfaces.
	IsOn_or_using_clauseContext()
}

type On_or_using_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOn_or_using_clauseContext() *On_or_using_clauseContext {
	var p = new(On_or_using_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_on_or_using_clause
	return p
}

func InitEmptyOn_or_using_clauseContext(p *On_or_using_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_on_or_using_clause
}

func (*On_or_using_clauseContext) IsOn_or_using_clauseContext() {}

func NewOn_or_using_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *On_or_using_clauseContext {
	var p = new(On_or_using_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_on_or_using_clause

	return p
}

func (s *On_or_using_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *On_or_using_clauseContext) On_clause() IOn_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOn_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOn_clauseContext)
}

func (s *On_or_using_clauseContext) Using_clause() IUsing_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUsing_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUsing_clauseContext)
}

func (s *On_or_using_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *On_or_using_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *On_or_using_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOn_or_using_clause(s)
	}
}

func (s *On_or_using_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOn_or_using_clause(s)
	}
}

func (s *On_or_using_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOn_or_using_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) On_or_using_clause() (localctx IOn_or_using_clauseContext) {
	localctx = NewOn_or_using_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 700, GoogleSQLParserRULE_on_or_using_clause)
	p.SetState(4403)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserON_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4401)
			p.On_clause()
		}

	case GoogleSQLParserUSING_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4402)
			p.Using_clause()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUsing_clauseContext is an interface to support dynamic dispatch.
type IUsing_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	USING_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	AllDOT_SYMBOL() []antlr.TerminalNode
	DOT_SYMBOL(i int) antlr.TerminalNode

	// IsUsing_clauseContext differentiates from other interfaces.
	IsUsing_clauseContext()
}

type Using_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUsing_clauseContext() *Using_clauseContext {
	var p = new(Using_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_using_clause
	return p
}

func InitEmptyUsing_clauseContext(p *Using_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_using_clause
}

func (*Using_clauseContext) IsUsing_clauseContext() {}

func NewUsing_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Using_clauseContext {
	var p = new(Using_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_using_clause

	return p
}

func (s *Using_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Using_clauseContext) USING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUSING_SYMBOL, 0)
}

func (s *Using_clauseContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Using_clauseContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Using_clauseContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Using_clauseContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Using_clauseContext) AllDOT_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserDOT_SYMBOL)
}

func (s *Using_clauseContext) DOT_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDOT_SYMBOL, i)
}

func (s *Using_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Using_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Using_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUsing_clause(s)
	}
}

func (s *Using_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUsing_clause(s)
	}
}

func (s *Using_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUsing_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Using_clause() (localctx IUsing_clauseContext) {
	localctx = NewUsing_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 702, GoogleSQLParserRULE_using_clause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4405)
		p.Match(GoogleSQLParserUSING_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4406)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4407)
		p.Identifier()
	}
	p.SetState(4412)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserDOT_SYMBOL {
		{
			p.SetState(4408)
			p.Match(GoogleSQLParserDOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4409)
			p.Identifier()
		}

		p.SetState(4414)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(4415)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJoin_hintContext is an interface to support dynamic dispatch.
type IJoin_hintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	HASH_SYMBOL() antlr.TerminalNode
	LOOKUP_SYMBOL() antlr.TerminalNode

	// IsJoin_hintContext differentiates from other interfaces.
	IsJoin_hintContext()
}

type Join_hintContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoin_hintContext() *Join_hintContext {
	var p = new(Join_hintContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_join_hint
	return p
}

func InitEmptyJoin_hintContext(p *Join_hintContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_join_hint
}

func (*Join_hintContext) IsJoin_hintContext() {}

func NewJoin_hintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Join_hintContext {
	var p = new(Join_hintContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_join_hint

	return p
}

func (s *Join_hintContext) GetParser() antlr.Parser { return s.parser }

func (s *Join_hintContext) HASH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserHASH_SYMBOL, 0)
}

func (s *Join_hintContext) LOOKUP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLOOKUP_SYMBOL, 0)
}

func (s *Join_hintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Join_hintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Join_hintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterJoin_hint(s)
	}
}

func (s *Join_hintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitJoin_hint(s)
	}
}

func (s *Join_hintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitJoin_hint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Join_hint() (localctx IJoin_hintContext) {
	localctx = NewJoin_hintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 704, GoogleSQLParserRULE_join_hint)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4417)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserHASH_SYMBOL || _la == GoogleSQLParserLOOKUP_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_path_expressionContext is an interface to support dynamic dispatch.
type ITable_path_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Table_path_expression_base() ITable_path_expression_baseContext
	Hint() IHintContext
	Opt_pivot_or_unpivot_clause_and_alias() IOpt_pivot_or_unpivot_clause_and_aliasContext
	Opt_with_offset_and_alias() IOpt_with_offset_and_aliasContext
	Opt_at_system_time() IOpt_at_system_timeContext

	// IsTable_path_expressionContext differentiates from other interfaces.
	IsTable_path_expressionContext()
}

type Table_path_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_path_expressionContext() *Table_path_expressionContext {
	var p = new(Table_path_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_path_expression
	return p
}

func InitEmptyTable_path_expressionContext(p *Table_path_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_path_expression
}

func (*Table_path_expressionContext) IsTable_path_expressionContext() {}

func NewTable_path_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_path_expressionContext {
	var p = new(Table_path_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_table_path_expression

	return p
}

func (s *Table_path_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_path_expressionContext) Table_path_expression_base() ITable_path_expression_baseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_path_expression_baseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_path_expression_baseContext)
}

func (s *Table_path_expressionContext) Hint() IHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHintContext)
}

func (s *Table_path_expressionContext) Opt_pivot_or_unpivot_clause_and_alias() IOpt_pivot_or_unpivot_clause_and_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_pivot_or_unpivot_clause_and_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_pivot_or_unpivot_clause_and_aliasContext)
}

func (s *Table_path_expressionContext) Opt_with_offset_and_alias() IOpt_with_offset_and_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_with_offset_and_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_with_offset_and_aliasContext)
}

func (s *Table_path_expressionContext) Opt_at_system_time() IOpt_at_system_timeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_at_system_timeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_at_system_timeContext)
}

func (s *Table_path_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_path_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_path_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTable_path_expression(s)
	}
}

func (s *Table_path_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTable_path_expression(s)
	}
}

func (s *Table_path_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTable_path_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Table_path_expression() (localctx ITable_path_expressionContext) {
	localctx = NewTable_path_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 706, GoogleSQLParserRULE_table_path_expression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4419)
		p.Table_path_expression_base()
	}
	p.SetState(4421)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 555, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4420)
			p.Hint()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(4424)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 556, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4423)
			p.Opt_pivot_or_unpivot_clause_and_alias()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(4427)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 557, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4426)
			p.Opt_with_offset_and_alias()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(4430)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 558, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4429)
			p.Opt_at_system_time()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_at_system_timeContext is an interface to support dynamic dispatch.
type IOpt_at_system_timeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FOR_SYMBOL() antlr.TerminalNode
	SYSTEM_SYMBOL() antlr.TerminalNode
	TIME_SYMBOL() antlr.TerminalNode
	AS_SYMBOL() antlr.TerminalNode
	OF_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	SYSTEM_TIME_SYMBOL() antlr.TerminalNode

	// IsOpt_at_system_timeContext differentiates from other interfaces.
	IsOpt_at_system_timeContext()
}

type Opt_at_system_timeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_at_system_timeContext() *Opt_at_system_timeContext {
	var p = new(Opt_at_system_timeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_at_system_time
	return p
}

func InitEmptyOpt_at_system_timeContext(p *Opt_at_system_timeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_at_system_time
}

func (*Opt_at_system_timeContext) IsOpt_at_system_timeContext() {}

func NewOpt_at_system_timeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_at_system_timeContext {
	var p = new(Opt_at_system_timeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_at_system_time

	return p
}

func (s *Opt_at_system_timeContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_at_system_timeContext) FOR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFOR_SYMBOL, 0)
}

func (s *Opt_at_system_timeContext) SYSTEM_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSYSTEM_SYMBOL, 0)
}

func (s *Opt_at_system_timeContext) TIME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTIME_SYMBOL, 0)
}

func (s *Opt_at_system_timeContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Opt_at_system_timeContext) OF_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOF_SYMBOL, 0)
}

func (s *Opt_at_system_timeContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Opt_at_system_timeContext) SYSTEM_TIME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSYSTEM_TIME_SYMBOL, 0)
}

func (s *Opt_at_system_timeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_at_system_timeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_at_system_timeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_at_system_time(s)
	}
}

func (s *Opt_at_system_timeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_at_system_time(s)
	}
}

func (s *Opt_at_system_timeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_at_system_time(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_at_system_time() (localctx IOpt_at_system_timeContext) {
	localctx = NewOpt_at_system_timeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 708, GoogleSQLParserRULE_opt_at_system_time)
	p.SetState(4443)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 559, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4432)
			p.Match(GoogleSQLParserFOR_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4433)
			p.Match(GoogleSQLParserSYSTEM_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4434)
			p.Match(GoogleSQLParserTIME_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4435)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4436)
			p.Match(GoogleSQLParserOF_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4437)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4438)
			p.Match(GoogleSQLParserFOR_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4439)
			p.Match(GoogleSQLParserSYSTEM_TIME_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4440)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4441)
			p.Match(GoogleSQLParserOF_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4442)
			p.expression(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_with_offset_and_aliasContext is an interface to support dynamic dispatch.
type IOpt_with_offset_and_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WITH_SYMBOL() antlr.TerminalNode
	OFFSET_SYMBOL() antlr.TerminalNode
	As_alias() IAs_aliasContext

	// IsOpt_with_offset_and_aliasContext differentiates from other interfaces.
	IsOpt_with_offset_and_aliasContext()
}

type Opt_with_offset_and_aliasContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_with_offset_and_aliasContext() *Opt_with_offset_and_aliasContext {
	var p = new(Opt_with_offset_and_aliasContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_with_offset_and_alias
	return p
}

func InitEmptyOpt_with_offset_and_aliasContext(p *Opt_with_offset_and_aliasContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_with_offset_and_alias
}

func (*Opt_with_offset_and_aliasContext) IsOpt_with_offset_and_aliasContext() {}

func NewOpt_with_offset_and_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_with_offset_and_aliasContext {
	var p = new(Opt_with_offset_and_aliasContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_with_offset_and_alias

	return p
}

func (s *Opt_with_offset_and_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_with_offset_and_aliasContext) WITH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWITH_SYMBOL, 0)
}

func (s *Opt_with_offset_and_aliasContext) OFFSET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOFFSET_SYMBOL, 0)
}

func (s *Opt_with_offset_and_aliasContext) As_alias() IAs_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_aliasContext)
}

func (s *Opt_with_offset_and_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_with_offset_and_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_with_offset_and_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_with_offset_and_alias(s)
	}
}

func (s *Opt_with_offset_and_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_with_offset_and_alias(s)
	}
}

func (s *Opt_with_offset_and_aliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_with_offset_and_alias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_with_offset_and_alias() (localctx IOpt_with_offset_and_aliasContext) {
	localctx = NewOpt_with_offset_and_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 710, GoogleSQLParserRULE_opt_with_offset_and_alias)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4445)
		p.Match(GoogleSQLParserWITH_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4446)
		p.Match(GoogleSQLParserOFFSET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(4448)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 560, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4447)
			p.As_alias()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_pivot_or_unpivot_clause_and_aliasContext is an interface to support dynamic dispatch.
type IOpt_pivot_or_unpivot_clause_and_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AS_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext
	Pivot_clause() IPivot_clauseContext
	As_alias() IAs_aliasContext
	Unpivot_clause() IUnpivot_clauseContext
	Qualify_clause_nonreserved() IQualify_clause_nonreservedContext

	// IsOpt_pivot_or_unpivot_clause_and_aliasContext differentiates from other interfaces.
	IsOpt_pivot_or_unpivot_clause_and_aliasContext()
}

type Opt_pivot_or_unpivot_clause_and_aliasContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_pivot_or_unpivot_clause_and_aliasContext() *Opt_pivot_or_unpivot_clause_and_aliasContext {
	var p = new(Opt_pivot_or_unpivot_clause_and_aliasContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_pivot_or_unpivot_clause_and_alias
	return p
}

func InitEmptyOpt_pivot_or_unpivot_clause_and_aliasContext(p *Opt_pivot_or_unpivot_clause_and_aliasContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_pivot_or_unpivot_clause_and_alias
}

func (*Opt_pivot_or_unpivot_clause_and_aliasContext) IsOpt_pivot_or_unpivot_clause_and_aliasContext() {
}

func NewOpt_pivot_or_unpivot_clause_and_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_pivot_or_unpivot_clause_and_aliasContext {
	var p = new(Opt_pivot_or_unpivot_clause_and_aliasContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_pivot_or_unpivot_clause_and_alias

	return p
}

func (s *Opt_pivot_or_unpivot_clause_and_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_pivot_or_unpivot_clause_and_aliasContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Opt_pivot_or_unpivot_clause_and_aliasContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Opt_pivot_or_unpivot_clause_and_aliasContext) Pivot_clause() IPivot_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPivot_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPivot_clauseContext)
}

func (s *Opt_pivot_or_unpivot_clause_and_aliasContext) As_alias() IAs_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_aliasContext)
}

func (s *Opt_pivot_or_unpivot_clause_and_aliasContext) Unpivot_clause() IUnpivot_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnpivot_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnpivot_clauseContext)
}

func (s *Opt_pivot_or_unpivot_clause_and_aliasContext) Qualify_clause_nonreserved() IQualify_clause_nonreservedContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualify_clause_nonreservedContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualify_clause_nonreservedContext)
}

func (s *Opt_pivot_or_unpivot_clause_and_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_pivot_or_unpivot_clause_and_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_pivot_or_unpivot_clause_and_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_pivot_or_unpivot_clause_and_alias(s)
	}
}

func (s *Opt_pivot_or_unpivot_clause_and_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_pivot_or_unpivot_clause_and_alias(s)
	}
}

func (s *Opt_pivot_or_unpivot_clause_and_aliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_pivot_or_unpivot_clause_and_alias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_pivot_or_unpivot_clause_and_alias() (localctx IOpt_pivot_or_unpivot_clause_and_aliasContext) {
	localctx = NewOpt_pivot_or_unpivot_clause_and_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 712, GoogleSQLParserRULE_opt_pivot_or_unpivot_clause_and_alias)
	p.SetState(4495)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 567, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4450)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4451)
			p.Identifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4452)
			p.Identifier()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4453)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4454)
			p.Identifier()
		}
		{
			p.SetState(4455)
			p.Pivot_clause()
		}
		p.SetState(4457)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 561, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4456)
				p.As_alias()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4459)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4460)
			p.Identifier()
		}
		{
			p.SetState(4461)
			p.Unpivot_clause()
		}
		p.SetState(4463)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 562, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4462)
				p.As_alias()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4465)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4466)
			p.Identifier()
		}
		{
			p.SetState(4467)
			p.Qualify_clause_nonreserved()
		}
		p.NotifyErrorListeners("QUALIFY clause must be used in conjunction with WHERE or GROUP BY or HAVING clause", nil, nil)

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4470)
			p.Identifier()
		}
		{
			p.SetState(4471)
			p.Pivot_clause()
		}
		p.SetState(4473)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 563, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4472)
				p.As_alias()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(4475)
			p.Identifier()
		}
		{
			p.SetState(4476)
			p.Unpivot_clause()
		}
		p.SetState(4478)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 564, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4477)
				p.As_alias()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(4480)
			p.Identifier()
		}
		{
			p.SetState(4481)
			p.Qualify_clause_nonreserved()
		}
		p.NotifyErrorListeners("QUALIFY clause must be used in conjunction with WHERE or GROUP BY or HAVING clause", nil, nil)

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(4484)
			p.Pivot_clause()
		}
		p.SetState(4486)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 565, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4485)
				p.As_alias()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(4488)
			p.Unpivot_clause()
		}
		p.SetState(4490)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 566, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4489)
				p.As_alias()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(4492)
			p.Qualify_clause_nonreserved()
		}
		p.NotifyErrorListeners("QUALIFY clause must be used in conjunction with WHERE or GROUP BY or HAVING clause", nil, nil)

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_path_expression_baseContext is an interface to support dynamic dispatch.
type ITable_path_expression_baseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Unnest_expression() IUnnest_expressionContext
	Maybe_slashed_or_dashed_path_expression() IMaybe_slashed_or_dashed_path_expressionContext
	Path_expression() IPath_expressionContext
	LS_BRACKET_SYMBOL() antlr.TerminalNode
	DOT_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsTable_path_expression_baseContext differentiates from other interfaces.
	IsTable_path_expression_baseContext()
}

type Table_path_expression_baseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_path_expression_baseContext() *Table_path_expression_baseContext {
	var p = new(Table_path_expression_baseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_path_expression_base
	return p
}

func InitEmptyTable_path_expression_baseContext(p *Table_path_expression_baseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_path_expression_base
}

func (*Table_path_expression_baseContext) IsTable_path_expression_baseContext() {}

func NewTable_path_expression_baseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_path_expression_baseContext {
	var p = new(Table_path_expression_baseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_table_path_expression_base

	return p
}

func (s *Table_path_expression_baseContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_path_expression_baseContext) Unnest_expression() IUnnest_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnnest_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnnest_expressionContext)
}

func (s *Table_path_expression_baseContext) Maybe_slashed_or_dashed_path_expression() IMaybe_slashed_or_dashed_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMaybe_slashed_or_dashed_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMaybe_slashed_or_dashed_path_expressionContext)
}

func (s *Table_path_expression_baseContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Table_path_expression_baseContext) LS_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLS_BRACKET_SYMBOL, 0)
}

func (s *Table_path_expression_baseContext) DOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDOT_SYMBOL, 0)
}

func (s *Table_path_expression_baseContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Table_path_expression_baseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_path_expression_baseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_path_expression_baseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTable_path_expression_base(s)
	}
}

func (s *Table_path_expression_baseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTable_path_expression_base(s)
	}
}

func (s *Table_path_expression_baseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTable_path_expression_base(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Table_path_expression_base() (localctx ITable_path_expression_baseContext) {
	localctx = NewTable_path_expression_baseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 714, GoogleSQLParserRULE_table_path_expression_base)
	p.SetState(4517)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 568, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4497)
			p.Unnest_expression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4498)
			p.Maybe_slashed_or_dashed_path_expression()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4499)
			p.Path_expression()
		}
		{
			p.SetState(4500)
			p.Match(GoogleSQLParserLS_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Syntax error: Array element access is not allowed in the FROM clause without UNNEST; Use UNNEST(<expression>)", nil, nil)

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4503)
			p.Path_expression()
		}
		{
			p.SetState(4504)
			p.Match(GoogleSQLParserDOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4505)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Syntax error: Generalized field access is not allowed in the FROM clause without UNNEST; Use UNNEST(<expression>)", nil, nil)

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4508)
			p.Unnest_expression()
		}
		{
			p.SetState(4509)
			p.Match(GoogleSQLParserLS_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Syntax error: Array element access is not allowed in the FROM clause without UNNEST; Use UNNEST(<expression>)", nil, nil)

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4512)
			p.Unnest_expression()
		}
		{
			p.SetState(4513)
			p.Match(GoogleSQLParserDOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4514)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Syntax error: Generalized field access is not allowed in the FROM clause without UNNEST; Use UNNEST(<expression>)", nil, nil)

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMaybe_slashed_or_dashed_path_expressionContext is an interface to support dynamic dispatch.
type IMaybe_slashed_or_dashed_path_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext
	Slashed_path_expression() ISlashed_path_expressionContext

	// IsMaybe_slashed_or_dashed_path_expressionContext differentiates from other interfaces.
	IsMaybe_slashed_or_dashed_path_expressionContext()
}

type Maybe_slashed_or_dashed_path_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMaybe_slashed_or_dashed_path_expressionContext() *Maybe_slashed_or_dashed_path_expressionContext {
	var p = new(Maybe_slashed_or_dashed_path_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_maybe_slashed_or_dashed_path_expression
	return p
}

func InitEmptyMaybe_slashed_or_dashed_path_expressionContext(p *Maybe_slashed_or_dashed_path_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_maybe_slashed_or_dashed_path_expression
}

func (*Maybe_slashed_or_dashed_path_expressionContext) IsMaybe_slashed_or_dashed_path_expressionContext() {
}

func NewMaybe_slashed_or_dashed_path_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Maybe_slashed_or_dashed_path_expressionContext {
	var p = new(Maybe_slashed_or_dashed_path_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_maybe_slashed_or_dashed_path_expression

	return p
}

func (s *Maybe_slashed_or_dashed_path_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Maybe_slashed_or_dashed_path_expressionContext) Maybe_dashed_path_expression() IMaybe_dashed_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMaybe_dashed_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMaybe_dashed_path_expressionContext)
}

func (s *Maybe_slashed_or_dashed_path_expressionContext) Slashed_path_expression() ISlashed_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISlashed_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISlashed_path_expressionContext)
}

func (s *Maybe_slashed_or_dashed_path_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Maybe_slashed_or_dashed_path_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Maybe_slashed_or_dashed_path_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterMaybe_slashed_or_dashed_path_expression(s)
	}
}

func (s *Maybe_slashed_or_dashed_path_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitMaybe_slashed_or_dashed_path_expression(s)
	}
}

func (s *Maybe_slashed_or_dashed_path_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitMaybe_slashed_or_dashed_path_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Maybe_slashed_or_dashed_path_expression() (localctx IMaybe_slashed_or_dashed_path_expressionContext) {
	localctx = NewMaybe_slashed_or_dashed_path_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 716, GoogleSQLParserRULE_maybe_slashed_or_dashed_path_expression)
	p.SetState(4521)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserCONFLICT_SYMBOL, GoogleSQLParserDESTINATION_SYMBOL, GoogleSQLParserPROPERTY_SYMBOL, GoogleSQLParserGRAPH_SYMBOL, GoogleSQLParserNODE_SYMBOL, GoogleSQLParserPROPERTIES_SYMBOL, GoogleSQLParserLABEL_SYMBOL, GoogleSQLParserEDGE_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4519)
			p.Maybe_dashed_path_expression()
		}

	case GoogleSQLParserSLASH_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4520)
			p.Slashed_path_expression()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMaybe_dashed_path_expressionContext is an interface to support dynamic dispatch.
type IMaybe_dashed_path_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Path_expression() IPath_expressionContext
	Dashed_path_expression() IDashed_path_expressionContext

	// IsMaybe_dashed_path_expressionContext differentiates from other interfaces.
	IsMaybe_dashed_path_expressionContext()
}

type Maybe_dashed_path_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMaybe_dashed_path_expressionContext() *Maybe_dashed_path_expressionContext {
	var p = new(Maybe_dashed_path_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_maybe_dashed_path_expression
	return p
}

func InitEmptyMaybe_dashed_path_expressionContext(p *Maybe_dashed_path_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_maybe_dashed_path_expression
}

func (*Maybe_dashed_path_expressionContext) IsMaybe_dashed_path_expressionContext() {}

func NewMaybe_dashed_path_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Maybe_dashed_path_expressionContext {
	var p = new(Maybe_dashed_path_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_maybe_dashed_path_expression

	return p
}

func (s *Maybe_dashed_path_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Maybe_dashed_path_expressionContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Maybe_dashed_path_expressionContext) Dashed_path_expression() IDashed_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDashed_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDashed_path_expressionContext)
}

func (s *Maybe_dashed_path_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Maybe_dashed_path_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Maybe_dashed_path_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterMaybe_dashed_path_expression(s)
	}
}

func (s *Maybe_dashed_path_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitMaybe_dashed_path_expression(s)
	}
}

func (s *Maybe_dashed_path_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitMaybe_dashed_path_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Maybe_dashed_path_expression() (localctx IMaybe_dashed_path_expressionContext) {
	localctx = NewMaybe_dashed_path_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 718, GoogleSQLParserRULE_maybe_dashed_path_expression)
	p.SetState(4525)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 570, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4523)
			p.Path_expression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4524)
			p.dashed_path_expression(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDashed_path_expressionContext is an interface to support dynamic dispatch.
type IDashed_path_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Dashed_identifier() IDashed_identifierContext
	Dashed_path_expression() IDashed_path_expressionContext
	DOT_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext

	// IsDashed_path_expressionContext differentiates from other interfaces.
	IsDashed_path_expressionContext()
}

type Dashed_path_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDashed_path_expressionContext() *Dashed_path_expressionContext {
	var p = new(Dashed_path_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_dashed_path_expression
	return p
}

func InitEmptyDashed_path_expressionContext(p *Dashed_path_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_dashed_path_expression
}

func (*Dashed_path_expressionContext) IsDashed_path_expressionContext() {}

func NewDashed_path_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dashed_path_expressionContext {
	var p = new(Dashed_path_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_dashed_path_expression

	return p
}

func (s *Dashed_path_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Dashed_path_expressionContext) Dashed_identifier() IDashed_identifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDashed_identifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDashed_identifierContext)
}

func (s *Dashed_path_expressionContext) Dashed_path_expression() IDashed_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDashed_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDashed_path_expressionContext)
}

func (s *Dashed_path_expressionContext) DOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDOT_SYMBOL, 0)
}

func (s *Dashed_path_expressionContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Dashed_path_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dashed_path_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dashed_path_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterDashed_path_expression(s)
	}
}

func (s *Dashed_path_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitDashed_path_expression(s)
	}
}

func (s *Dashed_path_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitDashed_path_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Dashed_path_expression() (localctx IDashed_path_expressionContext) {
	return p.dashed_path_expression(0)
}

func (p *GoogleSQLParser) dashed_path_expression(_p int) (localctx IDashed_path_expressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewDashed_path_expressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IDashed_path_expressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 720
	p.EnterRecursionRule(localctx, 720, GoogleSQLParserRULE_dashed_path_expression, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4528)
		p.dashed_identifier(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4535)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 571, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewDashed_path_expressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_dashed_path_expression)
			p.SetState(4530)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				goto errorExit
			}
			{
				p.SetState(4531)
				p.Match(GoogleSQLParserDOT_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(4532)
				p.Identifier()
			}

		}
		p.SetState(4537)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 571, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDashed_identifierContext is an interface to support dynamic dispatch.
type IDashed_identifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	MINUS_OPERATOR() antlr.TerminalNode
	INTEGER_LITERAL() antlr.TerminalNode
	Floating_point_literal() IFloating_point_literalContext
	AllDashed_identifier() []IDashed_identifierContext
	Dashed_identifier(i int) IDashed_identifierContext

	// IsDashed_identifierContext differentiates from other interfaces.
	IsDashed_identifierContext()
}

type Dashed_identifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDashed_identifierContext() *Dashed_identifierContext {
	var p = new(Dashed_identifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_dashed_identifier
	return p
}

func InitEmptyDashed_identifierContext(p *Dashed_identifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_dashed_identifier
}

func (*Dashed_identifierContext) IsDashed_identifierContext() {}

func NewDashed_identifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dashed_identifierContext {
	var p = new(Dashed_identifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_dashed_identifier

	return p
}

func (s *Dashed_identifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Dashed_identifierContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Dashed_identifierContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Dashed_identifierContext) MINUS_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMINUS_OPERATOR, 0)
}

func (s *Dashed_identifierContext) INTEGER_LITERAL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINTEGER_LITERAL, 0)
}

func (s *Dashed_identifierContext) Floating_point_literal() IFloating_point_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFloating_point_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFloating_point_literalContext)
}

func (s *Dashed_identifierContext) AllDashed_identifier() []IDashed_identifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDashed_identifierContext); ok {
			len++
		}
	}

	tst := make([]IDashed_identifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDashed_identifierContext); ok {
			tst[i] = t.(IDashed_identifierContext)
			i++
		}
	}

	return tst
}

func (s *Dashed_identifierContext) Dashed_identifier(i int) IDashed_identifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDashed_identifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDashed_identifierContext)
}

func (s *Dashed_identifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dashed_identifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dashed_identifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterDashed_identifier(s)
	}
}

func (s *Dashed_identifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitDashed_identifier(s)
	}
}

func (s *Dashed_identifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitDashed_identifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Dashed_identifier() (localctx IDashed_identifierContext) {
	return p.dashed_identifier(0)
}

func (p *GoogleSQLParser) dashed_identifier(_p int) (localctx IDashed_identifierContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewDashed_identifierContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IDashed_identifierContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 722
	p.EnterRecursionRule(localctx, 722, GoogleSQLParserRULE_dashed_identifier, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4552)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 572, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(4539)
			p.Identifier()
		}
		{
			p.SetState(4540)
			p.Match(GoogleSQLParserMINUS_OPERATOR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4541)
			p.Identifier()
		}

	case 2:
		{
			p.SetState(4543)
			p.Identifier()
		}
		{
			p.SetState(4544)
			p.Match(GoogleSQLParserMINUS_OPERATOR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4545)
			p.Match(GoogleSQLParserINTEGER_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		{
			p.SetState(4547)
			p.Identifier()
		}
		{
			p.SetState(4548)
			p.Match(GoogleSQLParserMINUS_OPERATOR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4549)
			p.Floating_point_literal()
		}
		{
			p.SetState(4550)
			p.Identifier()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4567)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 574, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(4565)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 573, p.GetParserRuleContext()) {
			case 1:
				localctx = NewDashed_identifierContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_dashed_identifier)
				p.SetState(4554)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
					goto errorExit
				}
				{
					p.SetState(4555)
					p.Match(GoogleSQLParserMINUS_OPERATOR)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(4556)
					p.dashed_identifier(6)
				}

			case 2:
				localctx = NewDashed_identifierContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_dashed_identifier)
				p.SetState(4557)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
					goto errorExit
				}
				{
					p.SetState(4558)
					p.Match(GoogleSQLParserMINUS_OPERATOR)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(4559)
					p.Match(GoogleSQLParserINTEGER_LITERAL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 3:
				localctx = NewDashed_identifierContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_dashed_identifier)
				p.SetState(4560)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
					goto errorExit
				}
				{
					p.SetState(4561)
					p.Match(GoogleSQLParserMINUS_OPERATOR)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(4562)
					p.Floating_point_literal()
				}
				{
					p.SetState(4563)
					p.Identifier()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(4569)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 574, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISlashed_identifierContext is an interface to support dynamic dispatch.
type ISlashed_identifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SLASH_SYMBOL() antlr.TerminalNode
	Identifier_or_integer() IIdentifier_or_integerContext
	Slashed_identifier() ISlashed_identifierContext
	AllSlashed_identifier_separator() []ISlashed_identifier_separatorContext
	Slashed_identifier_separator(i int) ISlashed_identifier_separatorContext
	Floating_point_literal() IFloating_point_literalContext

	// IsSlashed_identifierContext differentiates from other interfaces.
	IsSlashed_identifierContext()
}

type Slashed_identifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySlashed_identifierContext() *Slashed_identifierContext {
	var p = new(Slashed_identifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_slashed_identifier
	return p
}

func InitEmptySlashed_identifierContext(p *Slashed_identifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_slashed_identifier
}

func (*Slashed_identifierContext) IsSlashed_identifierContext() {}

func NewSlashed_identifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Slashed_identifierContext {
	var p = new(Slashed_identifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_slashed_identifier

	return p
}

func (s *Slashed_identifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Slashed_identifierContext) SLASH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSLASH_SYMBOL, 0)
}

func (s *Slashed_identifierContext) Identifier_or_integer() IIdentifier_or_integerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifier_or_integerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifier_or_integerContext)
}

func (s *Slashed_identifierContext) Slashed_identifier() ISlashed_identifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISlashed_identifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISlashed_identifierContext)
}

func (s *Slashed_identifierContext) AllSlashed_identifier_separator() []ISlashed_identifier_separatorContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISlashed_identifier_separatorContext); ok {
			len++
		}
	}

	tst := make([]ISlashed_identifier_separatorContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISlashed_identifier_separatorContext); ok {
			tst[i] = t.(ISlashed_identifier_separatorContext)
			i++
		}
	}

	return tst
}

func (s *Slashed_identifierContext) Slashed_identifier_separator(i int) ISlashed_identifier_separatorContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISlashed_identifier_separatorContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISlashed_identifier_separatorContext)
}

func (s *Slashed_identifierContext) Floating_point_literal() IFloating_point_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFloating_point_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFloating_point_literalContext)
}

func (s *Slashed_identifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Slashed_identifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Slashed_identifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSlashed_identifier(s)
	}
}

func (s *Slashed_identifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSlashed_identifier(s)
	}
}

func (s *Slashed_identifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSlashed_identifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Slashed_identifier() (localctx ISlashed_identifierContext) {
	return p.slashed_identifier(0)
}

func (p *GoogleSQLParser) slashed_identifier(_p int) (localctx ISlashed_identifierContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewSlashed_identifierContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ISlashed_identifierContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 724
	p.EnterRecursionRule(localctx, 724, GoogleSQLParserRULE_slashed_identifier, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4571)
		p.Match(GoogleSQLParserSLASH_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4572)
		p.Identifier_or_integer()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4586)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 576, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(4584)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 575, p.GetParserRuleContext()) {
			case 1:
				localctx = NewSlashed_identifierContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_slashed_identifier)
				p.SetState(4574)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
					goto errorExit
				}
				{
					p.SetState(4575)
					p.Slashed_identifier_separator()
				}
				{
					p.SetState(4576)
					p.Identifier_or_integer()
				}

			case 2:
				localctx = NewSlashed_identifierContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_slashed_identifier)
				p.SetState(4578)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
					goto errorExit
				}
				{
					p.SetState(4579)
					p.Slashed_identifier_separator()
				}
				{
					p.SetState(4580)
					p.Floating_point_literal()
				}
				{
					p.SetState(4581)
					p.Slashed_identifier_separator()
				}
				{
					p.SetState(4582)
					p.Identifier_or_integer()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(4588)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 576, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIdentifier_or_integerContext is an interface to support dynamic dispatch.
type IIdentifier_or_integerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	INTEGER_LITERAL() antlr.TerminalNode

	// IsIdentifier_or_integerContext differentiates from other interfaces.
	IsIdentifier_or_integerContext()
}

type Identifier_or_integerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifier_or_integerContext() *Identifier_or_integerContext {
	var p = new(Identifier_or_integerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_identifier_or_integer
	return p
}

func InitEmptyIdentifier_or_integerContext(p *Identifier_or_integerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_identifier_or_integer
}

func (*Identifier_or_integerContext) IsIdentifier_or_integerContext() {}

func NewIdentifier_or_integerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Identifier_or_integerContext {
	var p = new(Identifier_or_integerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_identifier_or_integer

	return p
}

func (s *Identifier_or_integerContext) GetParser() antlr.Parser { return s.parser }

func (s *Identifier_or_integerContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Identifier_or_integerContext) INTEGER_LITERAL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINTEGER_LITERAL, 0)
}

func (s *Identifier_or_integerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Identifier_or_integerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Identifier_or_integerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterIdentifier_or_integer(s)
	}
}

func (s *Identifier_or_integerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitIdentifier_or_integer(s)
	}
}

func (s *Identifier_or_integerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitIdentifier_or_integer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Identifier_or_integer() (localctx IIdentifier_or_integerContext) {
	localctx = NewIdentifier_or_integerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 726, GoogleSQLParserRULE_identifier_or_integer)
	p.SetState(4591)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserCONFLICT_SYMBOL, GoogleSQLParserDESTINATION_SYMBOL, GoogleSQLParserPROPERTY_SYMBOL, GoogleSQLParserGRAPH_SYMBOL, GoogleSQLParserNODE_SYMBOL, GoogleSQLParserPROPERTIES_SYMBOL, GoogleSQLParserLABEL_SYMBOL, GoogleSQLParserEDGE_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4589)
			p.Identifier()
		}

	case GoogleSQLParserINTEGER_LITERAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4590)
			p.Match(GoogleSQLParserINTEGER_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISlashed_identifier_separatorContext is an interface to support dynamic dispatch.
type ISlashed_identifier_separatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MINUS_OPERATOR() antlr.TerminalNode
	SLASH_SYMBOL() antlr.TerminalNode
	COLON_SYMBOL() antlr.TerminalNode

	// IsSlashed_identifier_separatorContext differentiates from other interfaces.
	IsSlashed_identifier_separatorContext()
}

type Slashed_identifier_separatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySlashed_identifier_separatorContext() *Slashed_identifier_separatorContext {
	var p = new(Slashed_identifier_separatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_slashed_identifier_separator
	return p
}

func InitEmptySlashed_identifier_separatorContext(p *Slashed_identifier_separatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_slashed_identifier_separator
}

func (*Slashed_identifier_separatorContext) IsSlashed_identifier_separatorContext() {}

func NewSlashed_identifier_separatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Slashed_identifier_separatorContext {
	var p = new(Slashed_identifier_separatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_slashed_identifier_separator

	return p
}

func (s *Slashed_identifier_separatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Slashed_identifier_separatorContext) MINUS_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMINUS_OPERATOR, 0)
}

func (s *Slashed_identifier_separatorContext) SLASH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSLASH_SYMBOL, 0)
}

func (s *Slashed_identifier_separatorContext) COLON_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOLON_SYMBOL, 0)
}

func (s *Slashed_identifier_separatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Slashed_identifier_separatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Slashed_identifier_separatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSlashed_identifier_separator(s)
	}
}

func (s *Slashed_identifier_separatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSlashed_identifier_separator(s)
	}
}

func (s *Slashed_identifier_separatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSlashed_identifier_separator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Slashed_identifier_separator() (localctx ISlashed_identifier_separatorContext) {
	localctx = NewSlashed_identifier_separatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 728, GoogleSQLParserRULE_slashed_identifier_separator)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4593)
		p.Match(GoogleSQLParserMINUS_OPERATOR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4594)
		p.Match(GoogleSQLParserSLASH_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4595)
		p.Match(GoogleSQLParserCOLON_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISlashed_path_expressionContext is an interface to support dynamic dispatch.
type ISlashed_path_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Slashed_identifier() ISlashed_identifierContext
	Slashed_identifier_separator() ISlashed_identifier_separatorContext
	Floating_point_literal() IFloating_point_literalContext
	Identifier() IIdentifierContext

	// IsSlashed_path_expressionContext differentiates from other interfaces.
	IsSlashed_path_expressionContext()
}

type Slashed_path_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySlashed_path_expressionContext() *Slashed_path_expressionContext {
	var p = new(Slashed_path_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_slashed_path_expression
	return p
}

func InitEmptySlashed_path_expressionContext(p *Slashed_path_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_slashed_path_expression
}

func (*Slashed_path_expressionContext) IsSlashed_path_expressionContext() {}

func NewSlashed_path_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Slashed_path_expressionContext {
	var p = new(Slashed_path_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_slashed_path_expression

	return p
}

func (s *Slashed_path_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Slashed_path_expressionContext) Slashed_identifier() ISlashed_identifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISlashed_identifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISlashed_identifierContext)
}

func (s *Slashed_path_expressionContext) Slashed_identifier_separator() ISlashed_identifier_separatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISlashed_identifier_separatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISlashed_identifier_separatorContext)
}

func (s *Slashed_path_expressionContext) Floating_point_literal() IFloating_point_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFloating_point_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFloating_point_literalContext)
}

func (s *Slashed_path_expressionContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Slashed_path_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Slashed_path_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Slashed_path_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSlashed_path_expression(s)
	}
}

func (s *Slashed_path_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSlashed_path_expression(s)
	}
}

func (s *Slashed_path_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSlashed_path_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Slashed_path_expression() (localctx ISlashed_path_expressionContext) {
	localctx = NewSlashed_path_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 730, GoogleSQLParserRULE_slashed_path_expression)
	p.SetState(4603)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 578, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4597)
			p.slashed_identifier(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4598)
			p.slashed_identifier(0)
		}
		{
			p.SetState(4599)
			p.Slashed_identifier_separator()
		}
		{
			p.SetState(4600)
			p.Floating_point_literal()
		}
		{
			p.SetState(4601)
			p.Identifier()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnnest_expressionContext is an interface to support dynamic dispatch.
type IUnnest_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Unnest_expression_prefix() IUnnest_expression_prefixContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Opt_array_zip_mode() IOpt_array_zip_modeContext
	UNNEST_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	SELECT_SYMBOL() antlr.TerminalNode

	// IsUnnest_expressionContext differentiates from other interfaces.
	IsUnnest_expressionContext()
}

type Unnest_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnnest_expressionContext() *Unnest_expressionContext {
	var p = new(Unnest_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unnest_expression
	return p
}

func InitEmptyUnnest_expressionContext(p *Unnest_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unnest_expression
}

func (*Unnest_expressionContext) IsUnnest_expressionContext() {}

func NewUnnest_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unnest_expressionContext {
	var p = new(Unnest_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_unnest_expression

	return p
}

func (s *Unnest_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Unnest_expressionContext) Unnest_expression_prefix() IUnnest_expression_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnnest_expression_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnnest_expression_prefixContext)
}

func (s *Unnest_expressionContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Unnest_expressionContext) Opt_array_zip_mode() IOpt_array_zip_modeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_array_zip_modeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_array_zip_modeContext)
}

func (s *Unnest_expressionContext) UNNEST_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNNEST_SYMBOL, 0)
}

func (s *Unnest_expressionContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Unnest_expressionContext) SELECT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSELECT_SYMBOL, 0)
}

func (s *Unnest_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unnest_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unnest_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUnnest_expression(s)
	}
}

func (s *Unnest_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUnnest_expression(s)
	}
}

func (s *Unnest_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUnnest_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Unnest_expression() (localctx IUnnest_expressionContext) {
	localctx = NewUnnest_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 732, GoogleSQLParserRULE_unnest_expression)
	var _la int

	p.SetState(4615)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 580, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4605)
			p.Unnest_expression_prefix()
		}
		p.SetState(4607)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserCOMMA_SYMBOL {
			{
				p.SetState(4606)
				p.Opt_array_zip_mode()
			}

		}
		{
			p.SetState(4609)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4611)
			p.Match(GoogleSQLParserUNNEST_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4612)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4613)
			p.Match(GoogleSQLParserSELECT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("The argument to UNNEST is an expression, not a query; to use a query as an expression, the query must be wrapped with additional parentheses to make it a scalar subquery expression", nil, nil)

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnnest_expression_prefixContext is an interface to support dynamic dispatch.
type IUnnest_expression_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UNNEST_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllExpression_with_opt_alias() []IExpression_with_opt_aliasContext
	Expression_with_opt_alias(i int) IExpression_with_opt_aliasContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsUnnest_expression_prefixContext differentiates from other interfaces.
	IsUnnest_expression_prefixContext()
}

type Unnest_expression_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnnest_expression_prefixContext() *Unnest_expression_prefixContext {
	var p = new(Unnest_expression_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unnest_expression_prefix
	return p
}

func InitEmptyUnnest_expression_prefixContext(p *Unnest_expression_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unnest_expression_prefix
}

func (*Unnest_expression_prefixContext) IsUnnest_expression_prefixContext() {}

func NewUnnest_expression_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unnest_expression_prefixContext {
	var p = new(Unnest_expression_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_unnest_expression_prefix

	return p
}

func (s *Unnest_expression_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Unnest_expression_prefixContext) UNNEST_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNNEST_SYMBOL, 0)
}

func (s *Unnest_expression_prefixContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Unnest_expression_prefixContext) AllExpression_with_opt_alias() []IExpression_with_opt_aliasContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpression_with_opt_aliasContext); ok {
			len++
		}
	}

	tst := make([]IExpression_with_opt_aliasContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpression_with_opt_aliasContext); ok {
			tst[i] = t.(IExpression_with_opt_aliasContext)
			i++
		}
	}

	return tst
}

func (s *Unnest_expression_prefixContext) Expression_with_opt_alias(i int) IExpression_with_opt_aliasContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpression_with_opt_aliasContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpression_with_opt_aliasContext)
}

func (s *Unnest_expression_prefixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Unnest_expression_prefixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Unnest_expression_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unnest_expression_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unnest_expression_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUnnest_expression_prefix(s)
	}
}

func (s *Unnest_expression_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUnnest_expression_prefix(s)
	}
}

func (s *Unnest_expression_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUnnest_expression_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Unnest_expression_prefix() (localctx IUnnest_expression_prefixContext) {
	localctx = NewUnnest_expression_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 734, GoogleSQLParserRULE_unnest_expression_prefix)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4617)
		p.Match(GoogleSQLParserUNNEST_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4618)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4619)
		p.Expression_with_opt_alias()
	}
	p.SetState(4624)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 581, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(4620)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(4621)
				p.Expression_with_opt_alias()
			}

		}
		p.SetState(4626)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 581, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_array_zip_modeContext is an interface to support dynamic dispatch.
type IOpt_array_zip_modeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	COMMA_SYMBOL() antlr.TerminalNode
	Named_argument() INamed_argumentContext

	// IsOpt_array_zip_modeContext differentiates from other interfaces.
	IsOpt_array_zip_modeContext()
}

type Opt_array_zip_modeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_array_zip_modeContext() *Opt_array_zip_modeContext {
	var p = new(Opt_array_zip_modeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_array_zip_mode
	return p
}

func InitEmptyOpt_array_zip_modeContext(p *Opt_array_zip_modeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_array_zip_mode
}

func (*Opt_array_zip_modeContext) IsOpt_array_zip_modeContext() {}

func NewOpt_array_zip_modeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_array_zip_modeContext {
	var p = new(Opt_array_zip_modeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_array_zip_mode

	return p
}

func (s *Opt_array_zip_modeContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_array_zip_modeContext) COMMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, 0)
}

func (s *Opt_array_zip_modeContext) Named_argument() INamed_argumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamed_argumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamed_argumentContext)
}

func (s *Opt_array_zip_modeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_array_zip_modeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_array_zip_modeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_array_zip_mode(s)
	}
}

func (s *Opt_array_zip_modeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_array_zip_mode(s)
	}
}

func (s *Opt_array_zip_modeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_array_zip_mode(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_array_zip_mode() (localctx IOpt_array_zip_modeContext) {
	localctx = NewOpt_array_zip_modeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 736, GoogleSQLParserRULE_opt_array_zip_mode)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4627)
		p.Match(GoogleSQLParserCOMMA_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4628)
		p.Named_argument()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpression_with_opt_aliasContext is an interface to support dynamic dispatch.
type IExpression_with_opt_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	Opt_as_alias_with_required_as() IOpt_as_alias_with_required_asContext

	// IsExpression_with_opt_aliasContext differentiates from other interfaces.
	IsExpression_with_opt_aliasContext()
}

type Expression_with_opt_aliasContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_with_opt_aliasContext() *Expression_with_opt_aliasContext {
	var p = new(Expression_with_opt_aliasContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expression_with_opt_alias
	return p
}

func InitEmptyExpression_with_opt_aliasContext(p *Expression_with_opt_aliasContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expression_with_opt_alias
}

func (*Expression_with_opt_aliasContext) IsExpression_with_opt_aliasContext() {}

func NewExpression_with_opt_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_with_opt_aliasContext {
	var p = new(Expression_with_opt_aliasContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_expression_with_opt_alias

	return p
}

func (s *Expression_with_opt_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_with_opt_aliasContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Expression_with_opt_aliasContext) Opt_as_alias_with_required_as() IOpt_as_alias_with_required_asContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_as_alias_with_required_asContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_as_alias_with_required_asContext)
}

func (s *Expression_with_opt_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_with_opt_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expression_with_opt_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterExpression_with_opt_alias(s)
	}
}

func (s *Expression_with_opt_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitExpression_with_opt_alias(s)
	}
}

func (s *Expression_with_opt_aliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitExpression_with_opt_alias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Expression_with_opt_alias() (localctx IExpression_with_opt_aliasContext) {
	localctx = NewExpression_with_opt_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 738, GoogleSQLParserRULE_expression_with_opt_alias)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4630)
		p.expression(0)
	}
	p.SetState(4632)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAS_SYMBOL {
		{
			p.SetState(4631)
			p.Opt_as_alias_with_required_as()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITvf_prefixContext is an interface to support dynamic dispatch.
type ITvf_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Tvf_prefix_no_args() ITvf_prefix_no_argsContext
	AllTvf_argument() []ITvf_argumentContext
	Tvf_argument(i int) ITvf_argumentContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsTvf_prefixContext differentiates from other interfaces.
	IsTvf_prefixContext()
}

type Tvf_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTvf_prefixContext() *Tvf_prefixContext {
	var p = new(Tvf_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_tvf_prefix
	return p
}

func InitEmptyTvf_prefixContext(p *Tvf_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_tvf_prefix
}

func (*Tvf_prefixContext) IsTvf_prefixContext() {}

func NewTvf_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tvf_prefixContext {
	var p = new(Tvf_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_tvf_prefix

	return p
}

func (s *Tvf_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Tvf_prefixContext) Tvf_prefix_no_args() ITvf_prefix_no_argsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITvf_prefix_no_argsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITvf_prefix_no_argsContext)
}

func (s *Tvf_prefixContext) AllTvf_argument() []ITvf_argumentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITvf_argumentContext); ok {
			len++
		}
	}

	tst := make([]ITvf_argumentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITvf_argumentContext); ok {
			tst[i] = t.(ITvf_argumentContext)
			i++
		}
	}

	return tst
}

func (s *Tvf_prefixContext) Tvf_argument(i int) ITvf_argumentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITvf_argumentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITvf_argumentContext)
}

func (s *Tvf_prefixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Tvf_prefixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Tvf_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tvf_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tvf_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTvf_prefix(s)
	}
}

func (s *Tvf_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTvf_prefix(s)
	}
}

func (s *Tvf_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTvf_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Tvf_prefix() (localctx ITvf_prefixContext) {
	localctx = NewTvf_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 740, GoogleSQLParserRULE_tvf_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4634)
		p.Tvf_prefix_no_args()
	}
	{
		p.SetState(4635)
		p.Tvf_argument()
	}
	p.SetState(4640)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(4636)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4637)
			p.Tvf_argument()
		}

		p.SetState(4642)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITvf_argumentContext is an interface to support dynamic dispatch.
type ITvf_argumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	Descriptor_argument() IDescriptor_argumentContext
	Table_clause() ITable_clauseContext
	Model_clause() IModel_clauseContext
	Connection_clause() IConnection_clauseContext
	Named_argument() INamed_argumentContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	SELECT_SYMBOL() antlr.TerminalNode
	WITH_SYMBOL() antlr.TerminalNode

	// IsTvf_argumentContext differentiates from other interfaces.
	IsTvf_argumentContext()
}

type Tvf_argumentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTvf_argumentContext() *Tvf_argumentContext {
	var p = new(Tvf_argumentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_tvf_argument
	return p
}

func InitEmptyTvf_argumentContext(p *Tvf_argumentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_tvf_argument
}

func (*Tvf_argumentContext) IsTvf_argumentContext() {}

func NewTvf_argumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tvf_argumentContext {
	var p = new(Tvf_argumentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_tvf_argument

	return p
}

func (s *Tvf_argumentContext) GetParser() antlr.Parser { return s.parser }

func (s *Tvf_argumentContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Tvf_argumentContext) Descriptor_argument() IDescriptor_argumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescriptor_argumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescriptor_argumentContext)
}

func (s *Tvf_argumentContext) Table_clause() ITable_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_clauseContext)
}

func (s *Tvf_argumentContext) Model_clause() IModel_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IModel_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IModel_clauseContext)
}

func (s *Tvf_argumentContext) Connection_clause() IConnection_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConnection_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConnection_clauseContext)
}

func (s *Tvf_argumentContext) Named_argument() INamed_argumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamed_argumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamed_argumentContext)
}

func (s *Tvf_argumentContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Tvf_argumentContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Tvf_argumentContext) SELECT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSELECT_SYMBOL, 0)
}

func (s *Tvf_argumentContext) WITH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWITH_SYMBOL, 0)
}

func (s *Tvf_argumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tvf_argumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tvf_argumentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTvf_argument(s)
	}
}

func (s *Tvf_argumentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTvf_argument(s)
	}
}

func (s *Tvf_argumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTvf_argument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Tvf_argument() (localctx ITvf_argumentContext) {
	localctx = NewTvf_argumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 742, GoogleSQLParserRULE_tvf_argument)
	p.SetState(4673)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 584, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4643)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4644)
			p.Descriptor_argument()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4645)
			p.Table_clause()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4646)
			p.Model_clause()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4647)
			p.Connection_clause()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4648)
			p.Named_argument()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(4649)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4650)
			p.Table_clause()
		}
		{
			p.SetState(4651)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Syntax error: Table arguments for table-valued function calls written as \"TABLE path\" must not be enclosed in parentheses. To fix this, replace (TABLE path) with TABLE path", nil, nil)

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(4654)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4655)
			p.Model_clause()
		}
		{
			p.SetState(4656)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Syntax error: Model arguments for table-valued function calls written as \"MODEL path\" must not be enclosed in parentheses. To fix this, replace (MODEL path) with MODEL path", nil, nil)

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(4659)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4660)
			p.Connection_clause()
		}
		{
			p.SetState(4661)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Syntax error: Connection arguments for table-valued function calls written as \"CONNECTION path\" must not be enclosed in parentheses. To fix this, replace (CONNECTION path) with CONNECTION path", nil, nil)

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(4664)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4665)
			p.Named_argument()
		}
		{
			p.SetState(4666)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Syntax error: Named arguments for table-valued function calls written as \"name => value\" must not be enclosed in parentheses. To fix this, replace (name => value) with name => value", nil, nil)

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(4669)
			p.Match(GoogleSQLParserSELECT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Syntax error: Each subquery argument for table-valued function calls must be enclosed in parentheses. To fix this, replace SELECT... with (SELECT...)", nil, nil)

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(4671)
			p.Match(GoogleSQLParserWITH_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Syntax error: Each subquery argument for table-valued function calls must be enclosed in parentheses. To fix this, replace WITH... with (WITH...)", nil, nil)

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConnection_clauseContext is an interface to support dynamic dispatch.
type IConnection_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CONNECTION_SYMBOL() antlr.TerminalNode
	Path_expression_or_default() IPath_expression_or_defaultContext

	// IsConnection_clauseContext differentiates from other interfaces.
	IsConnection_clauseContext()
}

type Connection_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConnection_clauseContext() *Connection_clauseContext {
	var p = new(Connection_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_connection_clause
	return p
}

func InitEmptyConnection_clauseContext(p *Connection_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_connection_clause
}

func (*Connection_clauseContext) IsConnection_clauseContext() {}

func NewConnection_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Connection_clauseContext {
	var p = new(Connection_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_connection_clause

	return p
}

func (s *Connection_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Connection_clauseContext) CONNECTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCONNECTION_SYMBOL, 0)
}

func (s *Connection_clauseContext) Path_expression_or_default() IPath_expression_or_defaultContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expression_or_defaultContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expression_or_defaultContext)
}

func (s *Connection_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Connection_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Connection_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterConnection_clause(s)
	}
}

func (s *Connection_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitConnection_clause(s)
	}
}

func (s *Connection_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitConnection_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Connection_clause() (localctx IConnection_clauseContext) {
	localctx = NewConnection_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 744, GoogleSQLParserRULE_connection_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4675)
		p.Match(GoogleSQLParserCONNECTION_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4676)
		p.Path_expression_or_default()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPath_expression_or_defaultContext is an interface to support dynamic dispatch.
type IPath_expression_or_defaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Path_expression() IPath_expressionContext
	DEFAULT_SYMBOL() antlr.TerminalNode

	// IsPath_expression_or_defaultContext differentiates from other interfaces.
	IsPath_expression_or_defaultContext()
}

type Path_expression_or_defaultContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPath_expression_or_defaultContext() *Path_expression_or_defaultContext {
	var p = new(Path_expression_or_defaultContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_path_expression_or_default
	return p
}

func InitEmptyPath_expression_or_defaultContext(p *Path_expression_or_defaultContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_path_expression_or_default
}

func (*Path_expression_or_defaultContext) IsPath_expression_or_defaultContext() {}

func NewPath_expression_or_defaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Path_expression_or_defaultContext {
	var p = new(Path_expression_or_defaultContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_path_expression_or_default

	return p
}

func (s *Path_expression_or_defaultContext) GetParser() antlr.Parser { return s.parser }

func (s *Path_expression_or_defaultContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Path_expression_or_defaultContext) DEFAULT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDEFAULT_SYMBOL, 0)
}

func (s *Path_expression_or_defaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Path_expression_or_defaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Path_expression_or_defaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPath_expression_or_default(s)
	}
}

func (s *Path_expression_or_defaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPath_expression_or_default(s)
	}
}

func (s *Path_expression_or_defaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPath_expression_or_default(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Path_expression_or_default() (localctx IPath_expression_or_defaultContext) {
	localctx = NewPath_expression_or_defaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 746, GoogleSQLParserRULE_path_expression_or_default)
	p.SetState(4680)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserCONFLICT_SYMBOL, GoogleSQLParserDESTINATION_SYMBOL, GoogleSQLParserPROPERTY_SYMBOL, GoogleSQLParserGRAPH_SYMBOL, GoogleSQLParserNODE_SYMBOL, GoogleSQLParserPROPERTIES_SYMBOL, GoogleSQLParserLABEL_SYMBOL, GoogleSQLParserEDGE_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4678)
			p.Path_expression()
		}

	case GoogleSQLParserDEFAULT_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4679)
			p.Match(GoogleSQLParserDEFAULT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDescriptor_argumentContext is an interface to support dynamic dispatch.
type IDescriptor_argumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DESCRIPTOR_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Descriptor_column_list() IDescriptor_column_listContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsDescriptor_argumentContext differentiates from other interfaces.
	IsDescriptor_argumentContext()
}

type Descriptor_argumentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescriptor_argumentContext() *Descriptor_argumentContext {
	var p = new(Descriptor_argumentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_descriptor_argument
	return p
}

func InitEmptyDescriptor_argumentContext(p *Descriptor_argumentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_descriptor_argument
}

func (*Descriptor_argumentContext) IsDescriptor_argumentContext() {}

func NewDescriptor_argumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Descriptor_argumentContext {
	var p = new(Descriptor_argumentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_descriptor_argument

	return p
}

func (s *Descriptor_argumentContext) GetParser() antlr.Parser { return s.parser }

func (s *Descriptor_argumentContext) DESCRIPTOR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDESCRIPTOR_SYMBOL, 0)
}

func (s *Descriptor_argumentContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Descriptor_argumentContext) Descriptor_column_list() IDescriptor_column_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescriptor_column_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescriptor_column_listContext)
}

func (s *Descriptor_argumentContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Descriptor_argumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Descriptor_argumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Descriptor_argumentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterDescriptor_argument(s)
	}
}

func (s *Descriptor_argumentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitDescriptor_argument(s)
	}
}

func (s *Descriptor_argumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitDescriptor_argument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Descriptor_argument() (localctx IDescriptor_argumentContext) {
	localctx = NewDescriptor_argumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 748, GoogleSQLParserRULE_descriptor_argument)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4682)
		p.Match(GoogleSQLParserDESCRIPTOR_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4683)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4684)
		p.Descriptor_column_list()
	}
	{
		p.SetState(4685)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDescriptor_column_listContext is an interface to support dynamic dispatch.
type IDescriptor_column_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllDescriptor_column() []IDescriptor_columnContext
	Descriptor_column(i int) IDescriptor_columnContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsDescriptor_column_listContext differentiates from other interfaces.
	IsDescriptor_column_listContext()
}

type Descriptor_column_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescriptor_column_listContext() *Descriptor_column_listContext {
	var p = new(Descriptor_column_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_descriptor_column_list
	return p
}

func InitEmptyDescriptor_column_listContext(p *Descriptor_column_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_descriptor_column_list
}

func (*Descriptor_column_listContext) IsDescriptor_column_listContext() {}

func NewDescriptor_column_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Descriptor_column_listContext {
	var p = new(Descriptor_column_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_descriptor_column_list

	return p
}

func (s *Descriptor_column_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Descriptor_column_listContext) AllDescriptor_column() []IDescriptor_columnContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDescriptor_columnContext); ok {
			len++
		}
	}

	tst := make([]IDescriptor_columnContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDescriptor_columnContext); ok {
			tst[i] = t.(IDescriptor_columnContext)
			i++
		}
	}

	return tst
}

func (s *Descriptor_column_listContext) Descriptor_column(i int) IDescriptor_columnContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDescriptor_columnContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDescriptor_columnContext)
}

func (s *Descriptor_column_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Descriptor_column_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Descriptor_column_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Descriptor_column_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Descriptor_column_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterDescriptor_column_list(s)
	}
}

func (s *Descriptor_column_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitDescriptor_column_list(s)
	}
}

func (s *Descriptor_column_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitDescriptor_column_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Descriptor_column_list() (localctx IDescriptor_column_listContext) {
	localctx = NewDescriptor_column_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 750, GoogleSQLParserRULE_descriptor_column_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4687)
		p.Descriptor_column()
	}
	p.SetState(4692)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(4688)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4689)
			p.Descriptor_column()
		}

		p.SetState(4694)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDescriptor_columnContext is an interface to support dynamic dispatch.
type IDescriptor_columnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext

	// IsDescriptor_columnContext differentiates from other interfaces.
	IsDescriptor_columnContext()
}

type Descriptor_columnContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescriptor_columnContext() *Descriptor_columnContext {
	var p = new(Descriptor_columnContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_descriptor_column
	return p
}

func InitEmptyDescriptor_columnContext(p *Descriptor_columnContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_descriptor_column
}

func (*Descriptor_columnContext) IsDescriptor_columnContext() {}

func NewDescriptor_columnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Descriptor_columnContext {
	var p = new(Descriptor_columnContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_descriptor_column

	return p
}

func (s *Descriptor_columnContext) GetParser() antlr.Parser { return s.parser }

func (s *Descriptor_columnContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Descriptor_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Descriptor_columnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Descriptor_columnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterDescriptor_column(s)
	}
}

func (s *Descriptor_columnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitDescriptor_column(s)
	}
}

func (s *Descriptor_columnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitDescriptor_column(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Descriptor_column() (localctx IDescriptor_columnContext) {
	localctx = NewDescriptor_columnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 752, GoogleSQLParserRULE_descriptor_column)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4695)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_clauseContext is an interface to support dynamic dispatch.
type ITable_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TABLE_SYMBOL() antlr.TerminalNode
	Tvf_with_suffixes() ITvf_with_suffixesContext
	Path_expression() IPath_expressionContext

	// IsTable_clauseContext differentiates from other interfaces.
	IsTable_clauseContext()
}

type Table_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_clauseContext() *Table_clauseContext {
	var p = new(Table_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_clause
	return p
}

func InitEmptyTable_clauseContext(p *Table_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_clause
}

func (*Table_clauseContext) IsTable_clauseContext() {}

func NewTable_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_clauseContext {
	var p = new(Table_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_table_clause

	return p
}

func (s *Table_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_clauseContext) TABLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTABLE_SYMBOL, 0)
}

func (s *Table_clauseContext) Tvf_with_suffixes() ITvf_with_suffixesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITvf_with_suffixesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITvf_with_suffixesContext)
}

func (s *Table_clauseContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Table_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTable_clause(s)
	}
}

func (s *Table_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTable_clause(s)
	}
}

func (s *Table_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTable_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Table_clause() (localctx ITable_clauseContext) {
	localctx = NewTable_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 754, GoogleSQLParserRULE_table_clause)
	p.SetState(4701)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 587, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4697)
			p.Match(GoogleSQLParserTABLE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4698)
			p.Tvf_with_suffixes()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4699)
			p.Match(GoogleSQLParserTABLE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4700)
			p.Path_expression()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IModel_clauseContext is an interface to support dynamic dispatch.
type IModel_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MODEL_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext

	// IsModel_clauseContext differentiates from other interfaces.
	IsModel_clauseContext()
}

type Model_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModel_clauseContext() *Model_clauseContext {
	var p = new(Model_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_model_clause
	return p
}

func InitEmptyModel_clauseContext(p *Model_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_model_clause
}

func (*Model_clauseContext) IsModel_clauseContext() {}

func NewModel_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Model_clauseContext {
	var p = new(Model_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_model_clause

	return p
}

func (s *Model_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Model_clauseContext) MODEL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMODEL_SYMBOL, 0)
}

func (s *Model_clauseContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Model_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Model_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Model_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterModel_clause(s)
	}
}

func (s *Model_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitModel_clause(s)
	}
}

func (s *Model_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitModel_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Model_clause() (localctx IModel_clauseContext) {
	localctx = NewModel_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 756, GoogleSQLParserRULE_model_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4703)
		p.Match(GoogleSQLParserMODEL_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4704)
		p.Path_expression()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQualify_clause_nonreservedContext is an interface to support dynamic dispatch.
type IQualify_clause_nonreservedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	QUALIFY_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsQualify_clause_nonreservedContext differentiates from other interfaces.
	IsQualify_clause_nonreservedContext()
}

type Qualify_clause_nonreservedContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQualify_clause_nonreservedContext() *Qualify_clause_nonreservedContext {
	var p = new(Qualify_clause_nonreservedContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_qualify_clause_nonreserved
	return p
}

func InitEmptyQualify_clause_nonreservedContext(p *Qualify_clause_nonreservedContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_qualify_clause_nonreserved
}

func (*Qualify_clause_nonreservedContext) IsQualify_clause_nonreservedContext() {}

func NewQualify_clause_nonreservedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Qualify_clause_nonreservedContext {
	var p = new(Qualify_clause_nonreservedContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_qualify_clause_nonreserved

	return p
}

func (s *Qualify_clause_nonreservedContext) GetParser() antlr.Parser { return s.parser }

func (s *Qualify_clause_nonreservedContext) QUALIFY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserQUALIFY_SYMBOL, 0)
}

func (s *Qualify_clause_nonreservedContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Qualify_clause_nonreservedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Qualify_clause_nonreservedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Qualify_clause_nonreservedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterQualify_clause_nonreserved(s)
	}
}

func (s *Qualify_clause_nonreservedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitQualify_clause_nonreserved(s)
	}
}

func (s *Qualify_clause_nonreservedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitQualify_clause_nonreserved(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Qualify_clause_nonreserved() (localctx IQualify_clause_nonreservedContext) {
	localctx = NewQualify_clause_nonreservedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 758, GoogleSQLParserRULE_qualify_clause_nonreserved)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4706)
		p.Match(GoogleSQLParserQUALIFY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4707)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnpivot_clauseContext is an interface to support dynamic dispatch.
type IUnpivot_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UNPIVOT_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Path_expression_list_with_opt_parens() IPath_expression_list_with_opt_parensContext
	FOR_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext
	IN_SYMBOL() antlr.TerminalNode
	Unpivot_in_item_list() IUnpivot_in_item_listContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Unpivot_nulls_filter() IUnpivot_nulls_filterContext

	// IsUnpivot_clauseContext differentiates from other interfaces.
	IsUnpivot_clauseContext()
}

type Unpivot_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnpivot_clauseContext() *Unpivot_clauseContext {
	var p = new(Unpivot_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unpivot_clause
	return p
}

func InitEmptyUnpivot_clauseContext(p *Unpivot_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unpivot_clause
}

func (*Unpivot_clauseContext) IsUnpivot_clauseContext() {}

func NewUnpivot_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unpivot_clauseContext {
	var p = new(Unpivot_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_unpivot_clause

	return p
}

func (s *Unpivot_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Unpivot_clauseContext) UNPIVOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNPIVOT_SYMBOL, 0)
}

func (s *Unpivot_clauseContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Unpivot_clauseContext) Path_expression_list_with_opt_parens() IPath_expression_list_with_opt_parensContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expression_list_with_opt_parensContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expression_list_with_opt_parensContext)
}

func (s *Unpivot_clauseContext) FOR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFOR_SYMBOL, 0)
}

func (s *Unpivot_clauseContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Unpivot_clauseContext) IN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIN_SYMBOL, 0)
}

func (s *Unpivot_clauseContext) Unpivot_in_item_list() IUnpivot_in_item_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnpivot_in_item_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnpivot_in_item_listContext)
}

func (s *Unpivot_clauseContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Unpivot_clauseContext) Unpivot_nulls_filter() IUnpivot_nulls_filterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnpivot_nulls_filterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnpivot_nulls_filterContext)
}

func (s *Unpivot_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unpivot_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unpivot_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUnpivot_clause(s)
	}
}

func (s *Unpivot_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUnpivot_clause(s)
	}
}

func (s *Unpivot_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUnpivot_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Unpivot_clause() (localctx IUnpivot_clauseContext) {
	localctx = NewUnpivot_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 760, GoogleSQLParserRULE_unpivot_clause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4709)
		p.Match(GoogleSQLParserUNPIVOT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(4711)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserEXCLUDE_SYMBOL || _la == GoogleSQLParserINCLUDE_SYMBOL {
		{
			p.SetState(4710)
			p.Unpivot_nulls_filter()
		}

	}
	{
		p.SetState(4713)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4714)
		p.Path_expression_list_with_opt_parens()
	}
	{
		p.SetState(4715)
		p.Match(GoogleSQLParserFOR_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4716)
		p.Path_expression()
	}
	{
		p.SetState(4717)
		p.Match(GoogleSQLParserIN_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4718)
		p.Unpivot_in_item_list()
	}
	{
		p.SetState(4719)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnpivot_in_item_listContext is an interface to support dynamic dispatch.
type IUnpivot_in_item_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Unpivot_in_item_list_prefix() IUnpivot_in_item_list_prefixContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsUnpivot_in_item_listContext differentiates from other interfaces.
	IsUnpivot_in_item_listContext()
}

type Unpivot_in_item_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnpivot_in_item_listContext() *Unpivot_in_item_listContext {
	var p = new(Unpivot_in_item_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unpivot_in_item_list
	return p
}

func InitEmptyUnpivot_in_item_listContext(p *Unpivot_in_item_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unpivot_in_item_list
}

func (*Unpivot_in_item_listContext) IsUnpivot_in_item_listContext() {}

func NewUnpivot_in_item_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unpivot_in_item_listContext {
	var p = new(Unpivot_in_item_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_unpivot_in_item_list

	return p
}

func (s *Unpivot_in_item_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Unpivot_in_item_listContext) Unpivot_in_item_list_prefix() IUnpivot_in_item_list_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnpivot_in_item_list_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnpivot_in_item_list_prefixContext)
}

func (s *Unpivot_in_item_listContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Unpivot_in_item_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unpivot_in_item_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unpivot_in_item_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUnpivot_in_item_list(s)
	}
}

func (s *Unpivot_in_item_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUnpivot_in_item_list(s)
	}
}

func (s *Unpivot_in_item_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUnpivot_in_item_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Unpivot_in_item_list() (localctx IUnpivot_in_item_listContext) {
	localctx = NewUnpivot_in_item_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 762, GoogleSQLParserRULE_unpivot_in_item_list)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4721)
		p.unpivot_in_item_list_prefix(0)
	}
	{
		p.SetState(4722)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnpivot_in_item_list_prefixContext is an interface to support dynamic dispatch.
type IUnpivot_in_item_list_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Unpivot_in_item() IUnpivot_in_itemContext
	Unpivot_in_item_list_prefix() IUnpivot_in_item_list_prefixContext
	COMMA_SYMBOL() antlr.TerminalNode

	// IsUnpivot_in_item_list_prefixContext differentiates from other interfaces.
	IsUnpivot_in_item_list_prefixContext()
}

type Unpivot_in_item_list_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnpivot_in_item_list_prefixContext() *Unpivot_in_item_list_prefixContext {
	var p = new(Unpivot_in_item_list_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unpivot_in_item_list_prefix
	return p
}

func InitEmptyUnpivot_in_item_list_prefixContext(p *Unpivot_in_item_list_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unpivot_in_item_list_prefix
}

func (*Unpivot_in_item_list_prefixContext) IsUnpivot_in_item_list_prefixContext() {}

func NewUnpivot_in_item_list_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unpivot_in_item_list_prefixContext {
	var p = new(Unpivot_in_item_list_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_unpivot_in_item_list_prefix

	return p
}

func (s *Unpivot_in_item_list_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Unpivot_in_item_list_prefixContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Unpivot_in_item_list_prefixContext) Unpivot_in_item() IUnpivot_in_itemContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnpivot_in_itemContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnpivot_in_itemContext)
}

func (s *Unpivot_in_item_list_prefixContext) Unpivot_in_item_list_prefix() IUnpivot_in_item_list_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnpivot_in_item_list_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnpivot_in_item_list_prefixContext)
}

func (s *Unpivot_in_item_list_prefixContext) COMMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, 0)
}

func (s *Unpivot_in_item_list_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unpivot_in_item_list_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unpivot_in_item_list_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUnpivot_in_item_list_prefix(s)
	}
}

func (s *Unpivot_in_item_list_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUnpivot_in_item_list_prefix(s)
	}
}

func (s *Unpivot_in_item_list_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUnpivot_in_item_list_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Unpivot_in_item_list_prefix() (localctx IUnpivot_in_item_list_prefixContext) {
	return p.unpivot_in_item_list_prefix(0)
}

func (p *GoogleSQLParser) unpivot_in_item_list_prefix(_p int) (localctx IUnpivot_in_item_list_prefixContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewUnpivot_in_item_list_prefixContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IUnpivot_in_item_list_prefixContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 764
	p.EnterRecursionRule(localctx, 764, GoogleSQLParserRULE_unpivot_in_item_list_prefix, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4725)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4726)
		p.Unpivot_in_item()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4733)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 589, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewUnpivot_in_item_list_prefixContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_unpivot_in_item_list_prefix)
			p.SetState(4728)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				goto errorExit
			}
			{
				p.SetState(4729)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(4730)
				p.Unpivot_in_item()
			}

		}
		p.SetState(4735)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 589, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnpivot_in_itemContext is an interface to support dynamic dispatch.
type IUnpivot_in_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Path_expression_list_with_opt_parens() IPath_expression_list_with_opt_parensContext
	Opt_as_string_or_integer() IOpt_as_string_or_integerContext

	// IsUnpivot_in_itemContext differentiates from other interfaces.
	IsUnpivot_in_itemContext()
}

type Unpivot_in_itemContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnpivot_in_itemContext() *Unpivot_in_itemContext {
	var p = new(Unpivot_in_itemContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unpivot_in_item
	return p
}

func InitEmptyUnpivot_in_itemContext(p *Unpivot_in_itemContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unpivot_in_item
}

func (*Unpivot_in_itemContext) IsUnpivot_in_itemContext() {}

func NewUnpivot_in_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unpivot_in_itemContext {
	var p = new(Unpivot_in_itemContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_unpivot_in_item

	return p
}

func (s *Unpivot_in_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Unpivot_in_itemContext) Path_expression_list_with_opt_parens() IPath_expression_list_with_opt_parensContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expression_list_with_opt_parensContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expression_list_with_opt_parensContext)
}

func (s *Unpivot_in_itemContext) Opt_as_string_or_integer() IOpt_as_string_or_integerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_as_string_or_integerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_as_string_or_integerContext)
}

func (s *Unpivot_in_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unpivot_in_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unpivot_in_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUnpivot_in_item(s)
	}
}

func (s *Unpivot_in_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUnpivot_in_item(s)
	}
}

func (s *Unpivot_in_itemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUnpivot_in_item(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Unpivot_in_item() (localctx IUnpivot_in_itemContext) {
	localctx = NewUnpivot_in_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 766, GoogleSQLParserRULE_unpivot_in_item)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4736)
		p.Path_expression_list_with_opt_parens()
	}
	p.SetState(4738)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 590, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4737)
			p.Opt_as_string_or_integer()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_as_string_or_integerContext is an interface to support dynamic dispatch.
type IOpt_as_string_or_integerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	String_literal() IString_literalContext
	AS_SYMBOL() antlr.TerminalNode
	Integer_literal() IInteger_literalContext

	// IsOpt_as_string_or_integerContext differentiates from other interfaces.
	IsOpt_as_string_or_integerContext()
}

type Opt_as_string_or_integerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_as_string_or_integerContext() *Opt_as_string_or_integerContext {
	var p = new(Opt_as_string_or_integerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_as_string_or_integer
	return p
}

func InitEmptyOpt_as_string_or_integerContext(p *Opt_as_string_or_integerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_as_string_or_integer
}

func (*Opt_as_string_or_integerContext) IsOpt_as_string_or_integerContext() {}

func NewOpt_as_string_or_integerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_as_string_or_integerContext {
	var p = new(Opt_as_string_or_integerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_as_string_or_integer

	return p
}

func (s *Opt_as_string_or_integerContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_as_string_or_integerContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Opt_as_string_or_integerContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Opt_as_string_or_integerContext) Integer_literal() IInteger_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInteger_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInteger_literalContext)
}

func (s *Opt_as_string_or_integerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_as_string_or_integerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_as_string_or_integerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_as_string_or_integer(s)
	}
}

func (s *Opt_as_string_or_integerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_as_string_or_integer(s)
	}
}

func (s *Opt_as_string_or_integerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_as_string_or_integer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_as_string_or_integer() (localctx IOpt_as_string_or_integerContext) {
	localctx = NewOpt_as_string_or_integerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 768, GoogleSQLParserRULE_opt_as_string_or_integer)
	var _la int

	p.SetState(4748)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 593, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(4741)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAS_SYMBOL {
			{
				p.SetState(4740)
				p.Match(GoogleSQLParserAS_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(4743)
			p.string_literal(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(4745)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAS_SYMBOL {
			{
				p.SetState(4744)
				p.Match(GoogleSQLParserAS_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(4747)
			p.Integer_literal()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPath_expression_list_with_opt_parensContext is an interface to support dynamic dispatch.
type IPath_expression_list_with_opt_parensContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Path_expression_list() IPath_expression_listContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsPath_expression_list_with_opt_parensContext differentiates from other interfaces.
	IsPath_expression_list_with_opt_parensContext()
}

type Path_expression_list_with_opt_parensContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPath_expression_list_with_opt_parensContext() *Path_expression_list_with_opt_parensContext {
	var p = new(Path_expression_list_with_opt_parensContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_path_expression_list_with_opt_parens
	return p
}

func InitEmptyPath_expression_list_with_opt_parensContext(p *Path_expression_list_with_opt_parensContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_path_expression_list_with_opt_parens
}

func (*Path_expression_list_with_opt_parensContext) IsPath_expression_list_with_opt_parensContext() {}

func NewPath_expression_list_with_opt_parensContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Path_expression_list_with_opt_parensContext {
	var p = new(Path_expression_list_with_opt_parensContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_path_expression_list_with_opt_parens

	return p
}

func (s *Path_expression_list_with_opt_parensContext) GetParser() antlr.Parser { return s.parser }

func (s *Path_expression_list_with_opt_parensContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Path_expression_list_with_opt_parensContext) Path_expression_list() IPath_expression_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expression_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expression_listContext)
}

func (s *Path_expression_list_with_opt_parensContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Path_expression_list_with_opt_parensContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Path_expression_list_with_opt_parensContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Path_expression_list_with_opt_parensContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPath_expression_list_with_opt_parens(s)
	}
}

func (s *Path_expression_list_with_opt_parensContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPath_expression_list_with_opt_parens(s)
	}
}

func (s *Path_expression_list_with_opt_parensContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPath_expression_list_with_opt_parens(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Path_expression_list_with_opt_parens() (localctx IPath_expression_list_with_opt_parensContext) {
	localctx = NewPath_expression_list_with_opt_parensContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 770, GoogleSQLParserRULE_path_expression_list_with_opt_parens)
	p.SetState(4755)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserLR_BRACKET_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4750)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4751)
			p.Path_expression_list()
		}
		{
			p.SetState(4752)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserCONFLICT_SYMBOL, GoogleSQLParserDESTINATION_SYMBOL, GoogleSQLParserPROPERTY_SYMBOL, GoogleSQLParserGRAPH_SYMBOL, GoogleSQLParserNODE_SYMBOL, GoogleSQLParserPROPERTIES_SYMBOL, GoogleSQLParserLABEL_SYMBOL, GoogleSQLParserEDGE_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4754)
			p.Path_expression_list()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPath_expression_listContext is an interface to support dynamic dispatch.
type IPath_expression_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllPath_expression() []IPath_expressionContext
	Path_expression(i int) IPath_expressionContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsPath_expression_listContext differentiates from other interfaces.
	IsPath_expression_listContext()
}

type Path_expression_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPath_expression_listContext() *Path_expression_listContext {
	var p = new(Path_expression_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_path_expression_list
	return p
}

func InitEmptyPath_expression_listContext(p *Path_expression_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_path_expression_list
}

func (*Path_expression_listContext) IsPath_expression_listContext() {}

func NewPath_expression_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Path_expression_listContext {
	var p = new(Path_expression_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_path_expression_list

	return p
}

func (s *Path_expression_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Path_expression_listContext) AllPath_expression() []IPath_expressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPath_expressionContext); ok {
			len++
		}
	}

	tst := make([]IPath_expressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPath_expressionContext); ok {
			tst[i] = t.(IPath_expressionContext)
			i++
		}
	}

	return tst
}

func (s *Path_expression_listContext) Path_expression(i int) IPath_expressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Path_expression_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Path_expression_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Path_expression_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Path_expression_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Path_expression_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPath_expression_list(s)
	}
}

func (s *Path_expression_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPath_expression_list(s)
	}
}

func (s *Path_expression_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPath_expression_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Path_expression_list() (localctx IPath_expression_listContext) {
	localctx = NewPath_expression_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 772, GoogleSQLParserRULE_path_expression_list)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4757)
		p.Path_expression()
	}
	p.SetState(4762)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 595, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(4758)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(4759)
				p.Path_expression()
			}

		}
		p.SetState(4764)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 595, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnpivot_nulls_filterContext is an interface to support dynamic dispatch.
type IUnpivot_nulls_filterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EXCLUDE_SYMBOL() antlr.TerminalNode
	NULLS_SYMBOL() antlr.TerminalNode
	INCLUDE_SYMBOL() antlr.TerminalNode

	// IsUnpivot_nulls_filterContext differentiates from other interfaces.
	IsUnpivot_nulls_filterContext()
}

type Unpivot_nulls_filterContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnpivot_nulls_filterContext() *Unpivot_nulls_filterContext {
	var p = new(Unpivot_nulls_filterContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unpivot_nulls_filter
	return p
}

func InitEmptyUnpivot_nulls_filterContext(p *Unpivot_nulls_filterContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unpivot_nulls_filter
}

func (*Unpivot_nulls_filterContext) IsUnpivot_nulls_filterContext() {}

func NewUnpivot_nulls_filterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unpivot_nulls_filterContext {
	var p = new(Unpivot_nulls_filterContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_unpivot_nulls_filter

	return p
}

func (s *Unpivot_nulls_filterContext) GetParser() antlr.Parser { return s.parser }

func (s *Unpivot_nulls_filterContext) EXCLUDE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXCLUDE_SYMBOL, 0)
}

func (s *Unpivot_nulls_filterContext) NULLS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNULLS_SYMBOL, 0)
}

func (s *Unpivot_nulls_filterContext) INCLUDE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINCLUDE_SYMBOL, 0)
}

func (s *Unpivot_nulls_filterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unpivot_nulls_filterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unpivot_nulls_filterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUnpivot_nulls_filter(s)
	}
}

func (s *Unpivot_nulls_filterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUnpivot_nulls_filter(s)
	}
}

func (s *Unpivot_nulls_filterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUnpivot_nulls_filter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Unpivot_nulls_filter() (localctx IUnpivot_nulls_filterContext) {
	localctx = NewUnpivot_nulls_filterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 774, GoogleSQLParserRULE_unpivot_nulls_filter)
	p.SetState(4769)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserEXCLUDE_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4765)
			p.Match(GoogleSQLParserEXCLUDE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4766)
			p.Match(GoogleSQLParserNULLS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserINCLUDE_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4767)
			p.Match(GoogleSQLParserINCLUDE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4768)
			p.Match(GoogleSQLParserNULLS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPivot_clauseContext is an interface to support dynamic dispatch.
type IPivot_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PIVOT_SYMBOL() antlr.TerminalNode
	AllLR_BRACKET_SYMBOL() []antlr.TerminalNode
	LR_BRACKET_SYMBOL(i int) antlr.TerminalNode
	Pivot_expression_list() IPivot_expression_listContext
	FOR_SYMBOL() antlr.TerminalNode
	Expression_higher_prec_than_and() IExpression_higher_prec_than_andContext
	IN_SYMBOL() antlr.TerminalNode
	Pivot_value_list() IPivot_value_listContext
	AllRR_BRACKET_SYMBOL() []antlr.TerminalNode
	RR_BRACKET_SYMBOL(i int) antlr.TerminalNode

	// IsPivot_clauseContext differentiates from other interfaces.
	IsPivot_clauseContext()
}

type Pivot_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPivot_clauseContext() *Pivot_clauseContext {
	var p = new(Pivot_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_pivot_clause
	return p
}

func InitEmptyPivot_clauseContext(p *Pivot_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_pivot_clause
}

func (*Pivot_clauseContext) IsPivot_clauseContext() {}

func NewPivot_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pivot_clauseContext {
	var p = new(Pivot_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_pivot_clause

	return p
}

func (s *Pivot_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Pivot_clauseContext) PIVOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPIVOT_SYMBOL, 0)
}

func (s *Pivot_clauseContext) AllLR_BRACKET_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserLR_BRACKET_SYMBOL)
}

func (s *Pivot_clauseContext) LR_BRACKET_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, i)
}

func (s *Pivot_clauseContext) Pivot_expression_list() IPivot_expression_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPivot_expression_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPivot_expression_listContext)
}

func (s *Pivot_clauseContext) FOR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFOR_SYMBOL, 0)
}

func (s *Pivot_clauseContext) Expression_higher_prec_than_and() IExpression_higher_prec_than_andContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpression_higher_prec_than_andContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpression_higher_prec_than_andContext)
}

func (s *Pivot_clauseContext) IN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIN_SYMBOL, 0)
}

func (s *Pivot_clauseContext) Pivot_value_list() IPivot_value_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPivot_value_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPivot_value_listContext)
}

func (s *Pivot_clauseContext) AllRR_BRACKET_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserRR_BRACKET_SYMBOL)
}

func (s *Pivot_clauseContext) RR_BRACKET_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, i)
}

func (s *Pivot_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pivot_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pivot_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPivot_clause(s)
	}
}

func (s *Pivot_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPivot_clause(s)
	}
}

func (s *Pivot_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPivot_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Pivot_clause() (localctx IPivot_clauseContext) {
	localctx = NewPivot_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 776, GoogleSQLParserRULE_pivot_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4771)
		p.Match(GoogleSQLParserPIVOT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4772)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4773)
		p.Pivot_expression_list()
	}
	{
		p.SetState(4774)
		p.Match(GoogleSQLParserFOR_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4775)
		p.expression_higher_prec_than_and(0)
	}
	{
		p.SetState(4776)
		p.Match(GoogleSQLParserIN_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4777)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4778)
		p.Pivot_value_list()
	}
	{
		p.SetState(4779)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4780)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPivot_expression_listContext is an interface to support dynamic dispatch.
type IPivot_expression_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllPivot_expression() []IPivot_expressionContext
	Pivot_expression(i int) IPivot_expressionContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsPivot_expression_listContext differentiates from other interfaces.
	IsPivot_expression_listContext()
}

type Pivot_expression_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPivot_expression_listContext() *Pivot_expression_listContext {
	var p = new(Pivot_expression_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_pivot_expression_list
	return p
}

func InitEmptyPivot_expression_listContext(p *Pivot_expression_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_pivot_expression_list
}

func (*Pivot_expression_listContext) IsPivot_expression_listContext() {}

func NewPivot_expression_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pivot_expression_listContext {
	var p = new(Pivot_expression_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_pivot_expression_list

	return p
}

func (s *Pivot_expression_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Pivot_expression_listContext) AllPivot_expression() []IPivot_expressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPivot_expressionContext); ok {
			len++
		}
	}

	tst := make([]IPivot_expressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPivot_expressionContext); ok {
			tst[i] = t.(IPivot_expressionContext)
			i++
		}
	}

	return tst
}

func (s *Pivot_expression_listContext) Pivot_expression(i int) IPivot_expressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPivot_expressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPivot_expressionContext)
}

func (s *Pivot_expression_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Pivot_expression_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Pivot_expression_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pivot_expression_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pivot_expression_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPivot_expression_list(s)
	}
}

func (s *Pivot_expression_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPivot_expression_list(s)
	}
}

func (s *Pivot_expression_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPivot_expression_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Pivot_expression_list() (localctx IPivot_expression_listContext) {
	localctx = NewPivot_expression_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 778, GoogleSQLParserRULE_pivot_expression_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4782)
		p.Pivot_expression()
	}
	p.SetState(4787)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(4783)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4784)
			p.Pivot_expression()
		}

		p.SetState(4789)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPivot_expressionContext is an interface to support dynamic dispatch.
type IPivot_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	As_alias() IAs_aliasContext

	// IsPivot_expressionContext differentiates from other interfaces.
	IsPivot_expressionContext()
}

type Pivot_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPivot_expressionContext() *Pivot_expressionContext {
	var p = new(Pivot_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_pivot_expression
	return p
}

func InitEmptyPivot_expressionContext(p *Pivot_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_pivot_expression
}

func (*Pivot_expressionContext) IsPivot_expressionContext() {}

func NewPivot_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pivot_expressionContext {
	var p = new(Pivot_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_pivot_expression

	return p
}

func (s *Pivot_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Pivot_expressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Pivot_expressionContext) As_alias() IAs_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_aliasContext)
}

func (s *Pivot_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pivot_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pivot_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPivot_expression(s)
	}
}

func (s *Pivot_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPivot_expression(s)
	}
}

func (s *Pivot_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPivot_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Pivot_expression() (localctx IPivot_expressionContext) {
	localctx = NewPivot_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 780, GoogleSQLParserRULE_pivot_expression)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4790)
		p.expression(0)
	}
	p.SetState(4792)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64((_la-56)) & ^0x3f) == 0 && ((int64(1)<<(_la-56))&-6981105432269881343) != 0) || ((int64((_la-120)) & ^0x3f) == 0 && ((int64(1)<<(_la-120))&-1) != 0) || ((int64((_la-184)) & ^0x3f) == 0 && ((int64(1)<<(_la-184))&-1) != 0) || ((int64((_la-248)) & ^0x3f) == 0 && ((int64(1)<<(_la-248))&35184372088703) != 0) || ((int64((_la-338)) & ^0x3f) == 0 && ((int64(1)<<(_la-338))&8161) != 0) {
		{
			p.SetState(4791)
			p.As_alias()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPivot_value_listContext is an interface to support dynamic dispatch.
type IPivot_value_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllPivot_value() []IPivot_valueContext
	Pivot_value(i int) IPivot_valueContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsPivot_value_listContext differentiates from other interfaces.
	IsPivot_value_listContext()
}

type Pivot_value_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPivot_value_listContext() *Pivot_value_listContext {
	var p = new(Pivot_value_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_pivot_value_list
	return p
}

func InitEmptyPivot_value_listContext(p *Pivot_value_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_pivot_value_list
}

func (*Pivot_value_listContext) IsPivot_value_listContext() {}

func NewPivot_value_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pivot_value_listContext {
	var p = new(Pivot_value_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_pivot_value_list

	return p
}

func (s *Pivot_value_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Pivot_value_listContext) AllPivot_value() []IPivot_valueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPivot_valueContext); ok {
			len++
		}
	}

	tst := make([]IPivot_valueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPivot_valueContext); ok {
			tst[i] = t.(IPivot_valueContext)
			i++
		}
	}

	return tst
}

func (s *Pivot_value_listContext) Pivot_value(i int) IPivot_valueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPivot_valueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPivot_valueContext)
}

func (s *Pivot_value_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Pivot_value_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Pivot_value_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pivot_value_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pivot_value_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPivot_value_list(s)
	}
}

func (s *Pivot_value_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPivot_value_list(s)
	}
}

func (s *Pivot_value_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPivot_value_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Pivot_value_list() (localctx IPivot_value_listContext) {
	localctx = NewPivot_value_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 782, GoogleSQLParserRULE_pivot_value_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4794)
		p.Pivot_value()
	}
	p.SetState(4799)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(4795)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4796)
			p.Pivot_value()
		}

		p.SetState(4801)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPivot_valueContext is an interface to support dynamic dispatch.
type IPivot_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	As_alias() IAs_aliasContext

	// IsPivot_valueContext differentiates from other interfaces.
	IsPivot_valueContext()
}

type Pivot_valueContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPivot_valueContext() *Pivot_valueContext {
	var p = new(Pivot_valueContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_pivot_value
	return p
}

func InitEmptyPivot_valueContext(p *Pivot_valueContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_pivot_value
}

func (*Pivot_valueContext) IsPivot_valueContext() {}

func NewPivot_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pivot_valueContext {
	var p = new(Pivot_valueContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_pivot_value

	return p
}

func (s *Pivot_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Pivot_valueContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Pivot_valueContext) As_alias() IAs_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_aliasContext)
}

func (s *Pivot_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pivot_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pivot_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPivot_value(s)
	}
}

func (s *Pivot_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPivot_value(s)
	}
}

func (s *Pivot_valueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPivot_value(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Pivot_value() (localctx IPivot_valueContext) {
	localctx = NewPivot_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 784, GoogleSQLParserRULE_pivot_value)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4802)
		p.expression(0)
	}
	p.SetState(4804)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64((_la-56)) & ^0x3f) == 0 && ((int64(1)<<(_la-56))&-6981105432269881343) != 0) || ((int64((_la-120)) & ^0x3f) == 0 && ((int64(1)<<(_la-120))&-1) != 0) || ((int64((_la-184)) & ^0x3f) == 0 && ((int64(1)<<(_la-184))&-1) != 0) || ((int64((_la-248)) & ^0x3f) == 0 && ((int64(1)<<(_la-248))&35184372088703) != 0) || ((int64((_la-338)) & ^0x3f) == 0 && ((int64(1)<<(_la-338))&8161) != 0) {
		{
			p.SetState(4803)
			p.As_alias()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITvf_prefix_no_argsContext is an interface to support dynamic dispatch.
type ITvf_prefix_no_argsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Path_expression() IPath_expressionContext
	IF_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsTvf_prefix_no_argsContext differentiates from other interfaces.
	IsTvf_prefix_no_argsContext()
}

type Tvf_prefix_no_argsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTvf_prefix_no_argsContext() *Tvf_prefix_no_argsContext {
	var p = new(Tvf_prefix_no_argsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_tvf_prefix_no_args
	return p
}

func InitEmptyTvf_prefix_no_argsContext(p *Tvf_prefix_no_argsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_tvf_prefix_no_args
}

func (*Tvf_prefix_no_argsContext) IsTvf_prefix_no_argsContext() {}

func NewTvf_prefix_no_argsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tvf_prefix_no_argsContext {
	var p = new(Tvf_prefix_no_argsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_tvf_prefix_no_args

	return p
}

func (s *Tvf_prefix_no_argsContext) GetParser() antlr.Parser { return s.parser }

func (s *Tvf_prefix_no_argsContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Tvf_prefix_no_argsContext) IF_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIF_SYMBOL, 0)
}

func (s *Tvf_prefix_no_argsContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Tvf_prefix_no_argsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tvf_prefix_no_argsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tvf_prefix_no_argsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTvf_prefix_no_args(s)
	}
}

func (s *Tvf_prefix_no_argsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTvf_prefix_no_args(s)
	}
}

func (s *Tvf_prefix_no_argsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTvf_prefix_no_args(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Tvf_prefix_no_args() (localctx ITvf_prefix_no_argsContext) {
	localctx = NewTvf_prefix_no_argsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 786, GoogleSQLParserRULE_tvf_prefix_no_args)
	p.SetState(4809)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserCONFLICT_SYMBOL, GoogleSQLParserDESTINATION_SYMBOL, GoogleSQLParserPROPERTY_SYMBOL, GoogleSQLParserGRAPH_SYMBOL, GoogleSQLParserNODE_SYMBOL, GoogleSQLParserPROPERTIES_SYMBOL, GoogleSQLParserLABEL_SYMBOL, GoogleSQLParserEDGE_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4806)
			p.Path_expression()
		}

	case GoogleSQLParserIF_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4807)
			p.Match(GoogleSQLParserIF_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4808)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJoin_typeContext is an interface to support dynamic dispatch.
type IJoin_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CROSS_SYMBOL() antlr.TerminalNode
	FULL_SYMBOL() antlr.TerminalNode
	Opt_outer() IOpt_outerContext
	INNER_SYMBOL() antlr.TerminalNode
	LEFT_SYMBOL() antlr.TerminalNode
	RIGHT_SYMBOL() antlr.TerminalNode

	// IsJoin_typeContext differentiates from other interfaces.
	IsJoin_typeContext()
}

type Join_typeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoin_typeContext() *Join_typeContext {
	var p = new(Join_typeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_join_type
	return p
}

func InitEmptyJoin_typeContext(p *Join_typeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_join_type
}

func (*Join_typeContext) IsJoin_typeContext() {}

func NewJoin_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Join_typeContext {
	var p = new(Join_typeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_join_type

	return p
}

func (s *Join_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Join_typeContext) CROSS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCROSS_SYMBOL, 0)
}

func (s *Join_typeContext) FULL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFULL_SYMBOL, 0)
}

func (s *Join_typeContext) Opt_outer() IOpt_outerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_outerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_outerContext)
}

func (s *Join_typeContext) INNER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINNER_SYMBOL, 0)
}

func (s *Join_typeContext) LEFT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLEFT_SYMBOL, 0)
}

func (s *Join_typeContext) RIGHT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRIGHT_SYMBOL, 0)
}

func (s *Join_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Join_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Join_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterJoin_type(s)
	}
}

func (s *Join_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitJoin_type(s)
	}
}

func (s *Join_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitJoin_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Join_type() (localctx IJoin_typeContext) {
	localctx = NewJoin_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 788, GoogleSQLParserRULE_join_type)
	var _la int

	p.SetState(4825)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserCROSS_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4811)
			p.Match(GoogleSQLParserCROSS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserFULL_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4812)
			p.Match(GoogleSQLParserFULL_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(4814)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserOUTER_SYMBOL {
			{
				p.SetState(4813)
				p.Opt_outer()
			}

		}

	case GoogleSQLParserINNER_SYMBOL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4816)
			p.Match(GoogleSQLParserINNER_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserLEFT_SYMBOL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4817)
			p.Match(GoogleSQLParserLEFT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(4819)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserOUTER_SYMBOL {
			{
				p.SetState(4818)
				p.Opt_outer()
			}

		}

	case GoogleSQLParserRIGHT_SYMBOL:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4821)
			p.Match(GoogleSQLParserRIGHT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(4823)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserOUTER_SYMBOL {
			{
				p.SetState(4822)
				p.Opt_outer()
			}

		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_naturalContext is an interface to support dynamic dispatch.
type IOpt_naturalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NATURAL_SYMBOL() antlr.TerminalNode

	// IsOpt_naturalContext differentiates from other interfaces.
	IsOpt_naturalContext()
}

type Opt_naturalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_naturalContext() *Opt_naturalContext {
	var p = new(Opt_naturalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_natural
	return p
}

func InitEmptyOpt_naturalContext(p *Opt_naturalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_natural
}

func (*Opt_naturalContext) IsOpt_naturalContext() {}

func NewOpt_naturalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_naturalContext {
	var p = new(Opt_naturalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_natural

	return p
}

func (s *Opt_naturalContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_naturalContext) NATURAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNATURAL_SYMBOL, 0)
}

func (s *Opt_naturalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_naturalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_naturalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_natural(s)
	}
}

func (s *Opt_naturalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_natural(s)
	}
}

func (s *Opt_naturalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_natural(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_natural() (localctx IOpt_naturalContext) {
	localctx = NewOpt_naturalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 790, GoogleSQLParserRULE_opt_natural)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4827)
		p.Match(GoogleSQLParserNATURAL_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOn_clauseContext is an interface to support dynamic dispatch.
type IOn_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ON_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsOn_clauseContext differentiates from other interfaces.
	IsOn_clauseContext()
}

type On_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOn_clauseContext() *On_clauseContext {
	var p = new(On_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_on_clause
	return p
}

func InitEmptyOn_clauseContext(p *On_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_on_clause
}

func (*On_clauseContext) IsOn_clauseContext() {}

func NewOn_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *On_clauseContext {
	var p = new(On_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_on_clause

	return p
}

func (s *On_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *On_clauseContext) ON_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserON_SYMBOL, 0)
}

func (s *On_clauseContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *On_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *On_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *On_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOn_clause(s)
	}
}

func (s *On_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOn_clause(s)
	}
}

func (s *On_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOn_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) On_clause() (localctx IOn_clauseContext) {
	localctx = NewOn_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 792, GoogleSQLParserRULE_on_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4829)
		p.Match(GoogleSQLParserON_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4830)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelect_listContext is an interface to support dynamic dispatch.
type ISelect_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllSelect_list_item() []ISelect_list_itemContext
	Select_list_item(i int) ISelect_list_itemContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsSelect_listContext differentiates from other interfaces.
	IsSelect_listContext()
}

type Select_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_listContext() *Select_listContext {
	var p = new(Select_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_list
	return p
}

func InitEmptySelect_listContext(p *Select_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_list
}

func (*Select_listContext) IsSelect_listContext() {}

func NewSelect_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_listContext {
	var p = new(Select_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_select_list

	return p
}

func (s *Select_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_listContext) AllSelect_list_item() []ISelect_list_itemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISelect_list_itemContext); ok {
			len++
		}
	}

	tst := make([]ISelect_list_itemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISelect_list_itemContext); ok {
			tst[i] = t.(ISelect_list_itemContext)
			i++
		}
	}

	return tst
}

func (s *Select_listContext) Select_list_item(i int) ISelect_list_itemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_list_itemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_list_itemContext)
}

func (s *Select_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Select_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Select_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSelect_list(s)
	}
}

func (s *Select_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSelect_list(s)
	}
}

func (s *Select_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSelect_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Select_list() (localctx ISelect_listContext) {
	localctx = NewSelect_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 794, GoogleSQLParserRULE_select_list)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4832)
		p.Select_list_item()
	}
	p.SetState(4837)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 606, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(4833)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(4834)
				p.Select_list_item()
			}

		}
		p.SetState(4839)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 606, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(4841)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 607, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4840)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelect_list_itemContext is an interface to support dynamic dispatch.
type ISelect_list_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Select_column_expr() ISelect_column_exprContext
	Select_column_dot_star() ISelect_column_dot_starContext
	Select_column_star() ISelect_column_starContext

	// IsSelect_list_itemContext differentiates from other interfaces.
	IsSelect_list_itemContext()
}

type Select_list_itemContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_list_itemContext() *Select_list_itemContext {
	var p = new(Select_list_itemContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_list_item
	return p
}

func InitEmptySelect_list_itemContext(p *Select_list_itemContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_list_item
}

func (*Select_list_itemContext) IsSelect_list_itemContext() {}

func NewSelect_list_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_list_itemContext {
	var p = new(Select_list_itemContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_select_list_item

	return p
}

func (s *Select_list_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_list_itemContext) Select_column_expr() ISelect_column_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_column_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_column_exprContext)
}

func (s *Select_list_itemContext) Select_column_dot_star() ISelect_column_dot_starContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_column_dot_starContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_column_dot_starContext)
}

func (s *Select_list_itemContext) Select_column_star() ISelect_column_starContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_column_starContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_column_starContext)
}

func (s *Select_list_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_list_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_list_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSelect_list_item(s)
	}
}

func (s *Select_list_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSelect_list_item(s)
	}
}

func (s *Select_list_itemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSelect_list_item(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Select_list_item() (localctx ISelect_list_itemContext) {
	localctx = NewSelect_list_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 796, GoogleSQLParserRULE_select_list_item)
	p.SetState(4846)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 608, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4843)
			p.Select_column_expr()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4844)
			p.Select_column_dot_star()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4845)
			p.Select_column_star()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelect_column_starContext is an interface to support dynamic dispatch.
type ISelect_column_starContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MULTIPLY_OPERATOR() antlr.TerminalNode
	Star_modifiers() IStar_modifiersContext

	// IsSelect_column_starContext differentiates from other interfaces.
	IsSelect_column_starContext()
}

type Select_column_starContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_column_starContext() *Select_column_starContext {
	var p = new(Select_column_starContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_column_star
	return p
}

func InitEmptySelect_column_starContext(p *Select_column_starContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_column_star
}

func (*Select_column_starContext) IsSelect_column_starContext() {}

func NewSelect_column_starContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_column_starContext {
	var p = new(Select_column_starContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_select_column_star

	return p
}

func (s *Select_column_starContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_column_starContext) MULTIPLY_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMULTIPLY_OPERATOR, 0)
}

func (s *Select_column_starContext) Star_modifiers() IStar_modifiersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStar_modifiersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStar_modifiersContext)
}

func (s *Select_column_starContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_column_starContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_column_starContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSelect_column_star(s)
	}
}

func (s *Select_column_starContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSelect_column_star(s)
	}
}

func (s *Select_column_starContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSelect_column_star(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Select_column_star() (localctx ISelect_column_starContext) {
	localctx = NewSelect_column_starContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 798, GoogleSQLParserRULE_select_column_star)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4848)
		p.Match(GoogleSQLParserMULTIPLY_OPERATOR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(4850)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 609, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4849)
			p.Star_modifiers()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelect_column_exprContext is an interface to support dynamic dispatch.
type ISelect_column_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	Select_column_expr_with_as_alias() ISelect_column_expr_with_as_aliasContext
	Identifier() IIdentifierContext

	// IsSelect_column_exprContext differentiates from other interfaces.
	IsSelect_column_exprContext()
}

type Select_column_exprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_column_exprContext() *Select_column_exprContext {
	var p = new(Select_column_exprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_column_expr
	return p
}

func InitEmptySelect_column_exprContext(p *Select_column_exprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_column_expr
}

func (*Select_column_exprContext) IsSelect_column_exprContext() {}

func NewSelect_column_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_column_exprContext {
	var p = new(Select_column_exprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_select_column_expr

	return p
}

func (s *Select_column_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_column_exprContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Select_column_exprContext) Select_column_expr_with_as_alias() ISelect_column_expr_with_as_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_column_expr_with_as_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_column_expr_with_as_aliasContext)
}

func (s *Select_column_exprContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Select_column_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_column_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_column_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSelect_column_expr(s)
	}
}

func (s *Select_column_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSelect_column_expr(s)
	}
}

func (s *Select_column_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSelect_column_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Select_column_expr() (localctx ISelect_column_exprContext) {
	localctx = NewSelect_column_exprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 800, GoogleSQLParserRULE_select_column_expr)
	p.SetState(4857)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 610, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4852)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4853)
			p.Select_column_expr_with_as_alias()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4854)
			p.expression(0)
		}
		{
			p.SetState(4855)
			p.Identifier()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelect_column_dot_starContext is an interface to support dynamic dispatch.
type ISelect_column_dot_starContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression_higher_prec_than_and() IExpression_higher_prec_than_andContext
	DOT_SYMBOL() antlr.TerminalNode
	MULTIPLY_OPERATOR() antlr.TerminalNode
	Star_modifiers() IStar_modifiersContext

	// IsSelect_column_dot_starContext differentiates from other interfaces.
	IsSelect_column_dot_starContext()
}

type Select_column_dot_starContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_column_dot_starContext() *Select_column_dot_starContext {
	var p = new(Select_column_dot_starContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_column_dot_star
	return p
}

func InitEmptySelect_column_dot_starContext(p *Select_column_dot_starContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_column_dot_star
}

func (*Select_column_dot_starContext) IsSelect_column_dot_starContext() {}

func NewSelect_column_dot_starContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_column_dot_starContext {
	var p = new(Select_column_dot_starContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_select_column_dot_star

	return p
}

func (s *Select_column_dot_starContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_column_dot_starContext) Expression_higher_prec_than_and() IExpression_higher_prec_than_andContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpression_higher_prec_than_andContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpression_higher_prec_than_andContext)
}

func (s *Select_column_dot_starContext) DOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDOT_SYMBOL, 0)
}

func (s *Select_column_dot_starContext) MULTIPLY_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMULTIPLY_OPERATOR, 0)
}

func (s *Select_column_dot_starContext) Star_modifiers() IStar_modifiersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStar_modifiersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStar_modifiersContext)
}

func (s *Select_column_dot_starContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_column_dot_starContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_column_dot_starContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSelect_column_dot_star(s)
	}
}

func (s *Select_column_dot_starContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSelect_column_dot_star(s)
	}
}

func (s *Select_column_dot_starContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSelect_column_dot_star(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Select_column_dot_star() (localctx ISelect_column_dot_starContext) {
	localctx = NewSelect_column_dot_starContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 802, GoogleSQLParserRULE_select_column_dot_star)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4859)
		p.expression_higher_prec_than_and(0)
	}
	{
		p.SetState(4860)
		p.Match(GoogleSQLParserDOT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4861)
		p.Match(GoogleSQLParserMULTIPLY_OPERATOR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(4863)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 611, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4862)
			p.Star_modifiers()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStar_modifiersContext is an interface to support dynamic dispatch.
type IStar_modifiersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Star_except_list() IStar_except_listContext
	Star_replace_list() IStar_replace_listContext

	// IsStar_modifiersContext differentiates from other interfaces.
	IsStar_modifiersContext()
}

type Star_modifiersContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStar_modifiersContext() *Star_modifiersContext {
	var p = new(Star_modifiersContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_star_modifiers
	return p
}

func InitEmptyStar_modifiersContext(p *Star_modifiersContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_star_modifiers
}

func (*Star_modifiersContext) IsStar_modifiersContext() {}

func NewStar_modifiersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Star_modifiersContext {
	var p = new(Star_modifiersContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_star_modifiers

	return p
}

func (s *Star_modifiersContext) GetParser() antlr.Parser { return s.parser }

func (s *Star_modifiersContext) Star_except_list() IStar_except_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStar_except_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStar_except_listContext)
}

func (s *Star_modifiersContext) Star_replace_list() IStar_replace_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStar_replace_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStar_replace_listContext)
}

func (s *Star_modifiersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Star_modifiersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Star_modifiersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStar_modifiers(s)
	}
}

func (s *Star_modifiersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStar_modifiers(s)
	}
}

func (s *Star_modifiersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStar_modifiers(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Star_modifiers() (localctx IStar_modifiersContext) {
	localctx = NewStar_modifiersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 804, GoogleSQLParserRULE_star_modifiers)
	var _la int

	p.SetState(4870)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 613, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4865)
			p.Star_except_list()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(4867)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserEXCEPT_SYMBOL {
			{
				p.SetState(4866)
				p.Star_except_list()
			}

		}
		{
			p.SetState(4869)
			p.Star_replace_list()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStar_except_listContext is an interface to support dynamic dispatch.
type IStar_except_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EXCEPT_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsStar_except_listContext differentiates from other interfaces.
	IsStar_except_listContext()
}

type Star_except_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStar_except_listContext() *Star_except_listContext {
	var p = new(Star_except_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_star_except_list
	return p
}

func InitEmptyStar_except_listContext(p *Star_except_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_star_except_list
}

func (*Star_except_listContext) IsStar_except_listContext() {}

func NewStar_except_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Star_except_listContext {
	var p = new(Star_except_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_star_except_list

	return p
}

func (s *Star_except_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Star_except_listContext) EXCEPT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXCEPT_SYMBOL, 0)
}

func (s *Star_except_listContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Star_except_listContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Star_except_listContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Star_except_listContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Star_except_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Star_except_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Star_except_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Star_except_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Star_except_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStar_except_list(s)
	}
}

func (s *Star_except_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStar_except_list(s)
	}
}

func (s *Star_except_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStar_except_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Star_except_list() (localctx IStar_except_listContext) {
	localctx = NewStar_except_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 806, GoogleSQLParserRULE_star_except_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4872)
		p.Match(GoogleSQLParserEXCEPT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4873)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4874)
		p.Identifier()
	}
	p.SetState(4879)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(4875)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4876)
			p.Identifier()
		}

		p.SetState(4881)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(4882)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStar_replace_listContext is an interface to support dynamic dispatch.
type IStar_replace_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	REPLACE_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllStar_replace_item() []IStar_replace_itemContext
	Star_replace_item(i int) IStar_replace_itemContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsStar_replace_listContext differentiates from other interfaces.
	IsStar_replace_listContext()
}

type Star_replace_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStar_replace_listContext() *Star_replace_listContext {
	var p = new(Star_replace_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_star_replace_list
	return p
}

func InitEmptyStar_replace_listContext(p *Star_replace_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_star_replace_list
}

func (*Star_replace_listContext) IsStar_replace_listContext() {}

func NewStar_replace_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Star_replace_listContext {
	var p = new(Star_replace_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_star_replace_list

	return p
}

func (s *Star_replace_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Star_replace_listContext) REPLACE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPLACE_SYMBOL, 0)
}

func (s *Star_replace_listContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Star_replace_listContext) AllStar_replace_item() []IStar_replace_itemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStar_replace_itemContext); ok {
			len++
		}
	}

	tst := make([]IStar_replace_itemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStar_replace_itemContext); ok {
			tst[i] = t.(IStar_replace_itemContext)
			i++
		}
	}

	return tst
}

func (s *Star_replace_listContext) Star_replace_item(i int) IStar_replace_itemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStar_replace_itemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStar_replace_itemContext)
}

func (s *Star_replace_listContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Star_replace_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Star_replace_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Star_replace_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Star_replace_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Star_replace_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStar_replace_list(s)
	}
}

func (s *Star_replace_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStar_replace_list(s)
	}
}

func (s *Star_replace_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStar_replace_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Star_replace_list() (localctx IStar_replace_listContext) {
	localctx = NewStar_replace_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 808, GoogleSQLParserRULE_star_replace_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4884)
		p.Match(GoogleSQLParserREPLACE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4885)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4886)
		p.Star_replace_item()
	}
	p.SetState(4891)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(4887)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4888)
			p.Star_replace_item()
		}

		p.SetState(4893)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(4894)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStar_replace_itemContext is an interface to support dynamic dispatch.
type IStar_replace_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	AS_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext

	// IsStar_replace_itemContext differentiates from other interfaces.
	IsStar_replace_itemContext()
}

type Star_replace_itemContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStar_replace_itemContext() *Star_replace_itemContext {
	var p = new(Star_replace_itemContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_star_replace_item
	return p
}

func InitEmptyStar_replace_itemContext(p *Star_replace_itemContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_star_replace_item
}

func (*Star_replace_itemContext) IsStar_replace_itemContext() {}

func NewStar_replace_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Star_replace_itemContext {
	var p = new(Star_replace_itemContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_star_replace_item

	return p
}

func (s *Star_replace_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Star_replace_itemContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Star_replace_itemContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Star_replace_itemContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Star_replace_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Star_replace_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Star_replace_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStar_replace_item(s)
	}
}

func (s *Star_replace_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStar_replace_item(s)
	}
}

func (s *Star_replace_itemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStar_replace_item(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Star_replace_item() (localctx IStar_replace_itemContext) {
	localctx = NewStar_replace_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 810, GoogleSQLParserRULE_star_replace_item)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4896)
		p.expression(0)
	}
	{
		p.SetState(4897)
		p.Match(GoogleSQLParserAS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(4898)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression_higher_prec_than_and() IExpression_higher_prec_than_andContext
	And_expression() IAnd_expressionContext
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	OR_SYMBOL() antlr.TerminalNode

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expression
	return p
}

func InitEmptyExpressionContext(p *ExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expression
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) Expression_higher_prec_than_and() IExpression_higher_prec_than_andContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpression_higher_prec_than_andContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpression_higher_prec_than_andContext)
}

func (s *ExpressionContext) And_expression() IAnd_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnd_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnd_expressionContext)
}

func (s *ExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *ExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionContext) OR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOR_SYMBOL, 0)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterExpression(s)
	}
}

func (s *ExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitExpression(s)
	}
}

func (s *ExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *GoogleSQLParser) expression(_p int) (localctx IExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 812
	p.EnterRecursionRule(localctx, 812, GoogleSQLParserRULE_expression, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4903)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 616, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(4901)
			p.expression_higher_prec_than_and(0)
		}

	case 2:
		{
			p.SetState(4902)
			p.And_expression()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(4910)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 617, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewExpressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression)
			p.SetState(4905)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				goto errorExit
			}
			{
				p.SetState(4906)
				p.Match(GoogleSQLParserOR_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(4907)
				p.expression(2)
			}

		}
		p.SetState(4912)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 617, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpression_higher_prec_than_andContext is an interface to support dynamic dispatch.
type IExpression_higher_prec_than_andContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Null_literal() INull_literalContext
	Boolean_literal() IBoolean_literalContext
	String_literal() IString_literalContext
	Bytes_literal() IBytes_literalContext
	Integer_literal() IInteger_literalContext
	Numeric_literal() INumeric_literalContext
	Bignumeric_literal() IBignumeric_literalContext
	Json_literal() IJson_literalContext
	Floating_point_literal() IFloating_point_literalContext
	Date_or_time_literal() IDate_or_time_literalContext
	Range_literal() IRange_literalContext
	Parameter_expression() IParameter_expressionContext
	System_variable_expression() ISystem_variable_expressionContext
	Array_constructor() IArray_constructorContext
	New_constructor() INew_constructorContext
	Braced_constructor() IBraced_constructorContext
	Braced_new_constructor() IBraced_new_constructorContext
	Struct_braced_constructor() IStruct_braced_constructorContext
	Case_expression() ICase_expressionContext
	Cast_expression() ICast_expressionContext
	Extract_expression() IExtract_expressionContext
	With_expression() IWith_expressionContext
	Replace_fields_expression() IReplace_fields_expressionContext
	Function_call_expression_with_clauses() IFunction_call_expression_with_clausesContext
	Interval_expression() IInterval_expressionContext
	Identifier() IIdentifierContext
	Struct_constructor() IStruct_constructorContext
	Expression_subquery_with_keyword() IExpression_subquery_with_keywordContext
	NOT_SYMBOL() antlr.TerminalNode
	AllExpression_higher_prec_than_and() []IExpression_higher_prec_than_andContext
	Expression_higher_prec_than_and(i int) IExpression_higher_prec_than_andContext
	Unary_operator() IUnary_operatorContext
	Parenthesized_expression_not_a_query() IParenthesized_expression_not_a_queryContext
	Parenthesized_query() IParenthesized_queryContext
	Like_operator() ILike_operatorContext
	Distinct_operator() IDistinct_operatorContext
	Between_operator() IBetween_operatorContext
	AND_SYMBOL() antlr.TerminalNode
	Comparative_operator() IComparative_operatorContext
	STROKE_SYMBOL() antlr.TerminalNode
	CIRCUMFLEX_SYMBOL() antlr.TerminalNode
	BIT_AND_SYMBOL() antlr.TerminalNode
	BOOL_OR_SYMBOL() antlr.TerminalNode
	Shift_operator() IShift_operatorContext
	Additive_operator() IAdditive_operatorContext
	Multiplicative_operator() IMultiplicative_operatorContext
	LS_BRACKET_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	RS_BRACKET_SYMBOL() antlr.TerminalNode
	DOT_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Any_some_all() IAny_some_allContext
	Unnest_expression() IUnnest_expressionContext
	Hint() IHintContext
	Parenthesized_anysomeall_list_in_rhs() IParenthesized_anysomeall_list_in_rhsContext
	In_operator() IIn_operatorContext
	Parenthesized_in_rhs() IParenthesized_in_rhsContext
	OR_SYMBOL() antlr.TerminalNode
	Is_operator() IIs_operatorContext
	UNKNOWN_SYMBOL() antlr.TerminalNode

	// IsExpression_higher_prec_than_andContext differentiates from other interfaces.
	IsExpression_higher_prec_than_andContext()
}

type Expression_higher_prec_than_andContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_higher_prec_than_andContext() *Expression_higher_prec_than_andContext {
	var p = new(Expression_higher_prec_than_andContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expression_higher_prec_than_and
	return p
}

func InitEmptyExpression_higher_prec_than_andContext(p *Expression_higher_prec_than_andContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expression_higher_prec_than_and
}

func (*Expression_higher_prec_than_andContext) IsExpression_higher_prec_than_andContext() {}

func NewExpression_higher_prec_than_andContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_higher_prec_than_andContext {
	var p = new(Expression_higher_prec_than_andContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_expression_higher_prec_than_and

	return p
}

func (s *Expression_higher_prec_than_andContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_higher_prec_than_andContext) Null_literal() INull_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INull_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INull_literalContext)
}

func (s *Expression_higher_prec_than_andContext) Boolean_literal() IBoolean_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBoolean_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBoolean_literalContext)
}

func (s *Expression_higher_prec_than_andContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Expression_higher_prec_than_andContext) Bytes_literal() IBytes_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBytes_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBytes_literalContext)
}

func (s *Expression_higher_prec_than_andContext) Integer_literal() IInteger_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInteger_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInteger_literalContext)
}

func (s *Expression_higher_prec_than_andContext) Numeric_literal() INumeric_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumeric_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumeric_literalContext)
}

func (s *Expression_higher_prec_than_andContext) Bignumeric_literal() IBignumeric_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBignumeric_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBignumeric_literalContext)
}

func (s *Expression_higher_prec_than_andContext) Json_literal() IJson_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJson_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJson_literalContext)
}

func (s *Expression_higher_prec_than_andContext) Floating_point_literal() IFloating_point_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFloating_point_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFloating_point_literalContext)
}

func (s *Expression_higher_prec_than_andContext) Date_or_time_literal() IDate_or_time_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDate_or_time_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDate_or_time_literalContext)
}

func (s *Expression_higher_prec_than_andContext) Range_literal() IRange_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRange_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRange_literalContext)
}

func (s *Expression_higher_prec_than_andContext) Parameter_expression() IParameter_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParameter_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParameter_expressionContext)
}

func (s *Expression_higher_prec_than_andContext) System_variable_expression() ISystem_variable_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISystem_variable_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISystem_variable_expressionContext)
}

func (s *Expression_higher_prec_than_andContext) Array_constructor() IArray_constructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArray_constructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArray_constructorContext)
}

func (s *Expression_higher_prec_than_andContext) New_constructor() INew_constructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INew_constructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INew_constructorContext)
}

func (s *Expression_higher_prec_than_andContext) Braced_constructor() IBraced_constructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBraced_constructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBraced_constructorContext)
}

func (s *Expression_higher_prec_than_andContext) Braced_new_constructor() IBraced_new_constructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBraced_new_constructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBraced_new_constructorContext)
}

func (s *Expression_higher_prec_than_andContext) Struct_braced_constructor() IStruct_braced_constructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_braced_constructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_braced_constructorContext)
}

func (s *Expression_higher_prec_than_andContext) Case_expression() ICase_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICase_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICase_expressionContext)
}

func (s *Expression_higher_prec_than_andContext) Cast_expression() ICast_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICast_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICast_expressionContext)
}

func (s *Expression_higher_prec_than_andContext) Extract_expression() IExtract_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExtract_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExtract_expressionContext)
}

func (s *Expression_higher_prec_than_andContext) With_expression() IWith_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_expressionContext)
}

func (s *Expression_higher_prec_than_andContext) Replace_fields_expression() IReplace_fields_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReplace_fields_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReplace_fields_expressionContext)
}

func (s *Expression_higher_prec_than_andContext) Function_call_expression_with_clauses() IFunction_call_expression_with_clausesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunction_call_expression_with_clausesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunction_call_expression_with_clausesContext)
}

func (s *Expression_higher_prec_than_andContext) Interval_expression() IInterval_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterval_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterval_expressionContext)
}

func (s *Expression_higher_prec_than_andContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Expression_higher_prec_than_andContext) Struct_constructor() IStruct_constructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_constructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_constructorContext)
}

func (s *Expression_higher_prec_than_andContext) Expression_subquery_with_keyword() IExpression_subquery_with_keywordContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpression_subquery_with_keywordContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpression_subquery_with_keywordContext)
}

func (s *Expression_higher_prec_than_andContext) NOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNOT_SYMBOL, 0)
}

func (s *Expression_higher_prec_than_andContext) AllExpression_higher_prec_than_and() []IExpression_higher_prec_than_andContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpression_higher_prec_than_andContext); ok {
			len++
		}
	}

	tst := make([]IExpression_higher_prec_than_andContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpression_higher_prec_than_andContext); ok {
			tst[i] = t.(IExpression_higher_prec_than_andContext)
			i++
		}
	}

	return tst
}

func (s *Expression_higher_prec_than_andContext) Expression_higher_prec_than_and(i int) IExpression_higher_prec_than_andContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpression_higher_prec_than_andContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpression_higher_prec_than_andContext)
}

func (s *Expression_higher_prec_than_andContext) Unary_operator() IUnary_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnary_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnary_operatorContext)
}

func (s *Expression_higher_prec_than_andContext) Parenthesized_expression_not_a_query() IParenthesized_expression_not_a_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesized_expression_not_a_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesized_expression_not_a_queryContext)
}

func (s *Expression_higher_prec_than_andContext) Parenthesized_query() IParenthesized_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesized_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesized_queryContext)
}

func (s *Expression_higher_prec_than_andContext) Like_operator() ILike_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_operatorContext)
}

func (s *Expression_higher_prec_than_andContext) Distinct_operator() IDistinct_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDistinct_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDistinct_operatorContext)
}

func (s *Expression_higher_prec_than_andContext) Between_operator() IBetween_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBetween_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBetween_operatorContext)
}

func (s *Expression_higher_prec_than_andContext) AND_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAND_SYMBOL, 0)
}

func (s *Expression_higher_prec_than_andContext) Comparative_operator() IComparative_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComparative_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComparative_operatorContext)
}

func (s *Expression_higher_prec_than_andContext) STROKE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTROKE_SYMBOL, 0)
}

func (s *Expression_higher_prec_than_andContext) CIRCUMFLEX_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCIRCUMFLEX_SYMBOL, 0)
}

func (s *Expression_higher_prec_than_andContext) BIT_AND_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBIT_AND_SYMBOL, 0)
}

func (s *Expression_higher_prec_than_andContext) BOOL_OR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBOOL_OR_SYMBOL, 0)
}

func (s *Expression_higher_prec_than_andContext) Shift_operator() IShift_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShift_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShift_operatorContext)
}

func (s *Expression_higher_prec_than_andContext) Additive_operator() IAdditive_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAdditive_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAdditive_operatorContext)
}

func (s *Expression_higher_prec_than_andContext) Multiplicative_operator() IMultiplicative_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMultiplicative_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMultiplicative_operatorContext)
}

func (s *Expression_higher_prec_than_andContext) LS_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLS_BRACKET_SYMBOL, 0)
}

func (s *Expression_higher_prec_than_andContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Expression_higher_prec_than_andContext) RS_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRS_BRACKET_SYMBOL, 0)
}

func (s *Expression_higher_prec_than_andContext) DOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDOT_SYMBOL, 0)
}

func (s *Expression_higher_prec_than_andContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Expression_higher_prec_than_andContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Expression_higher_prec_than_andContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Expression_higher_prec_than_andContext) Any_some_all() IAny_some_allContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_some_allContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_some_allContext)
}

func (s *Expression_higher_prec_than_andContext) Unnest_expression() IUnnest_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnnest_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnnest_expressionContext)
}

func (s *Expression_higher_prec_than_andContext) Hint() IHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHintContext)
}

func (s *Expression_higher_prec_than_andContext) Parenthesized_anysomeall_list_in_rhs() IParenthesized_anysomeall_list_in_rhsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesized_anysomeall_list_in_rhsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesized_anysomeall_list_in_rhsContext)
}

func (s *Expression_higher_prec_than_andContext) In_operator() IIn_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIn_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIn_operatorContext)
}

func (s *Expression_higher_prec_than_andContext) Parenthesized_in_rhs() IParenthesized_in_rhsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesized_in_rhsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesized_in_rhsContext)
}

func (s *Expression_higher_prec_than_andContext) OR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOR_SYMBOL, 0)
}

func (s *Expression_higher_prec_than_andContext) Is_operator() IIs_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIs_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIs_operatorContext)
}

func (s *Expression_higher_prec_than_andContext) UNKNOWN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNKNOWN_SYMBOL, 0)
}

func (s *Expression_higher_prec_than_andContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_higher_prec_than_andContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expression_higher_prec_than_andContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterExpression_higher_prec_than_and(s)
	}
}

func (s *Expression_higher_prec_than_andContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitExpression_higher_prec_than_and(s)
	}
}

func (s *Expression_higher_prec_than_andContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitExpression_higher_prec_than_and(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Expression_higher_prec_than_and() (localctx IExpression_higher_prec_than_andContext) {
	return p.expression_higher_prec_than_and(0)
}

func (p *GoogleSQLParser) expression_higher_prec_than_and(_p int) (localctx IExpression_higher_prec_than_andContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewExpression_higher_prec_than_andContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpression_higher_prec_than_andContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 814
	p.EnterRecursionRule(localctx, 814, GoogleSQLParserRULE_expression_higher_prec_than_and, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4949)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 618, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(4914)
			p.Null_literal()
		}

	case 2:
		{
			p.SetState(4915)
			p.Boolean_literal()
		}

	case 3:
		{
			p.SetState(4916)
			p.string_literal(0)
		}

	case 4:
		{
			p.SetState(4917)
			p.bytes_literal(0)
		}

	case 5:
		{
			p.SetState(4918)
			p.Integer_literal()
		}

	case 6:
		{
			p.SetState(4919)
			p.Numeric_literal()
		}

	case 7:
		{
			p.SetState(4920)
			p.Bignumeric_literal()
		}

	case 8:
		{
			p.SetState(4921)
			p.Json_literal()
		}

	case 9:
		{
			p.SetState(4922)
			p.Floating_point_literal()
		}

	case 10:
		{
			p.SetState(4923)
			p.Date_or_time_literal()
		}

	case 11:
		{
			p.SetState(4924)
			p.Range_literal()
		}

	case 12:
		{
			p.SetState(4925)
			p.Parameter_expression()
		}

	case 13:
		{
			p.SetState(4926)
			p.System_variable_expression()
		}

	case 14:
		{
			p.SetState(4927)
			p.Array_constructor()
		}

	case 15:
		{
			p.SetState(4928)
			p.New_constructor()
		}

	case 16:
		{
			p.SetState(4929)
			p.Braced_constructor()
		}

	case 17:
		{
			p.SetState(4930)
			p.Braced_new_constructor()
		}

	case 18:
		{
			p.SetState(4931)
			p.Struct_braced_constructor()
		}

	case 19:
		{
			p.SetState(4932)
			p.Case_expression()
		}

	case 20:
		{
			p.SetState(4933)
			p.Cast_expression()
		}

	case 21:
		{
			p.SetState(4934)
			p.Extract_expression()
		}

	case 22:
		{
			p.SetState(4935)
			p.With_expression()
		}

	case 23:
		{
			p.SetState(4936)
			p.Replace_fields_expression()
		}

	case 24:
		{
			p.SetState(4937)
			p.Function_call_expression_with_clauses()
		}

	case 25:
		{
			p.SetState(4938)
			p.Interval_expression()
		}

	case 26:
		{
			p.SetState(4939)
			p.Identifier()
		}

	case 27:
		{
			p.SetState(4940)
			p.Struct_constructor()
		}

	case 28:
		{
			p.SetState(4941)
			p.Expression_subquery_with_keyword()
		}

	case 29:
		{
			p.SetState(4942)
			p.Match(GoogleSQLParserNOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(4943)
			p.expression_higher_prec_than_and(23)
		}

	case 30:
		{
			p.SetState(4944)
			p.Unary_operator()
		}
		{
			p.SetState(4945)
			p.expression_higher_prec_than_and(3)
		}

	case 31:
		{
			p.SetState(4947)
			p.Parenthesized_expression_not_a_query()
		}

	case 32:
		{
			p.SetState(4948)
			p.Parenthesized_query()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(5058)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 624, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(5056)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 623, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(4951)

				if !(p.Precpred(p.GetParserRuleContext(), 20)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 20)", ""))
					goto errorExit
				}
				{
					p.SetState(4952)
					p.Like_operator()
				}
				{
					p.SetState(4953)
					p.expression_higher_prec_than_and(21)
				}

			case 2:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(4955)

				if !(p.Precpred(p.GetParserRuleContext(), 19)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 19)", ""))
					goto errorExit
				}
				{
					p.SetState(4956)
					p.Distinct_operator()
				}
				{
					p.SetState(4957)
					p.expression_higher_prec_than_and(20)
				}

			case 3:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(4959)

				if !(p.Precpred(p.GetParserRuleContext(), 16)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 16)", ""))
					goto errorExit
				}
				{
					p.SetState(4960)
					p.Between_operator()
				}
				{
					p.SetState(4961)
					p.expression_higher_prec_than_and(0)
				}
				{
					p.SetState(4962)
					p.Match(GoogleSQLParserAND_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(4963)
					p.expression_higher_prec_than_and(17)
				}

			case 4:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(4965)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
					goto errorExit
				}
				{
					p.SetState(4966)
					p.Comparative_operator()
				}
				{
					p.SetState(4967)
					p.expression_higher_prec_than_and(12)
				}

			case 5:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(4969)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
					goto errorExit
				}
				{
					p.SetState(4970)
					p.Match(GoogleSQLParserSTROKE_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(4971)
					p.expression_higher_prec_than_and(11)
				}

			case 6:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(4972)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
					goto errorExit
				}
				{
					p.SetState(4973)
					p.Match(GoogleSQLParserCIRCUMFLEX_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(4974)
					p.expression_higher_prec_than_and(10)
				}

			case 7:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(4975)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
					goto errorExit
				}
				{
					p.SetState(4976)
					p.Match(GoogleSQLParserBIT_AND_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(4977)
					p.expression_higher_prec_than_and(9)
				}

			case 8:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(4978)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
					goto errorExit
				}
				{
					p.SetState(4979)
					p.Match(GoogleSQLParserBOOL_OR_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(4980)
					p.expression_higher_prec_than_and(8)
				}

			case 9:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(4981)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
					goto errorExit
				}
				{
					p.SetState(4982)
					p.Shift_operator()
				}
				{
					p.SetState(4983)
					p.expression_higher_prec_than_and(7)
				}

			case 10:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(4985)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
					goto errorExit
				}
				{
					p.SetState(4986)
					p.Additive_operator()
				}
				{
					p.SetState(4987)
					p.expression_higher_prec_than_and(6)
				}

			case 11:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(4989)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
					goto errorExit
				}
				{
					p.SetState(4990)
					p.Multiplicative_operator()
				}
				{
					p.SetState(4991)
					p.expression_higher_prec_than_and(5)
				}

			case 12:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(4993)

				if !(p.Precpred(p.GetParserRuleContext(), 26)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 26)", ""))
					goto errorExit
				}
				{
					p.SetState(4994)
					p.Match(GoogleSQLParserLS_BRACKET_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(4995)
					p.expression(0)
				}
				{
					p.SetState(4996)
					p.Match(GoogleSQLParserRS_BRACKET_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 13:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(4998)

				if !(p.Precpred(p.GetParserRuleContext(), 25)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 25)", ""))
					goto errorExit
				}
				{
					p.SetState(4999)
					p.Match(GoogleSQLParserDOT_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(5000)
					p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(5001)
					p.Path_expression()
				}
				{
					p.SetState(5002)
					p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 14:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(5004)

				if !(p.Precpred(p.GetParserRuleContext(), 24)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 24)", ""))
					goto errorExit
				}
				{
					p.SetState(5005)
					p.Match(GoogleSQLParserDOT_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(5006)
					p.Identifier()
				}

			case 15:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(5007)

				if !(p.Precpred(p.GetParserRuleContext(), 22)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 22)", ""))
					goto errorExit
				}
				{
					p.SetState(5008)
					p.Like_operator()
				}
				{
					p.SetState(5009)
					p.Any_some_all()
				}
				p.SetState(5011)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == GoogleSQLParserAT_SYMBOL {
					{
						p.SetState(5010)
						p.Hint()
					}

				}
				{
					p.SetState(5013)
					p.Unnest_expression()
				}

			case 16:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(5015)

				if !(p.Precpred(p.GetParserRuleContext(), 21)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 21)", ""))
					goto errorExit
				}
				{
					p.SetState(5016)
					p.Like_operator()
				}
				{
					p.SetState(5017)
					p.Any_some_all()
				}
				p.SetState(5019)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == GoogleSQLParserAT_SYMBOL {
					{
						p.SetState(5018)
						p.Hint()
					}

				}
				{
					p.SetState(5021)
					p.Parenthesized_anysomeall_list_in_rhs()
				}

			case 17:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(5023)

				if !(p.Precpred(p.GetParserRuleContext(), 18)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 18)", ""))
					goto errorExit
				}
				{
					p.SetState(5024)
					p.In_operator()
				}
				p.SetState(5026)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == GoogleSQLParserAT_SYMBOL {
					{
						p.SetState(5025)
						p.Hint()
					}

				}
				{
					p.SetState(5028)
					p.Unnest_expression()
				}

				if localctx.Hint() != nil {
					p.NotifyErrorListeners("Syntax error: HINTs cannot be specified on IN clause with UNNEST", nil, nil)
				}

			case 18:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(5031)

				if !(p.Precpred(p.GetParserRuleContext(), 17)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 17)", ""))
					goto errorExit
				}
				{
					p.SetState(5032)
					p.In_operator()
				}
				p.SetState(5034)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == GoogleSQLParserAT_SYMBOL {
					{
						p.SetState(5033)
						p.Hint()
					}

				}
				{
					p.SetState(5036)
					p.Parenthesized_in_rhs()
				}

			case 19:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(5038)

				if !(p.Precpred(p.GetParserRuleContext(), 15)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 15)", ""))
					goto errorExit
				}
				{
					p.SetState(5039)
					p.Between_operator()
				}
				{
					p.SetState(5040)
					p.expression_higher_prec_than_and(0)
				}
				{
					p.SetState(5041)
					p.Match(GoogleSQLParserOR_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.NotifyErrorListeners("Syntax error: Expression in BETWEEN must be parenthesized", nil, nil)

			case 20:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(5044)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
					goto errorExit
				}
				{
					p.SetState(5045)
					p.Is_operator()
				}
				{
					p.SetState(5046)
					p.Match(GoogleSQLParserUNKNOWN_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 21:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(5048)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
					goto errorExit
				}
				{
					p.SetState(5049)
					p.Is_operator()
				}
				{
					p.SetState(5050)
					p.Null_literal()
				}

			case 22:
				localctx = NewExpression_higher_prec_than_andContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_expression_higher_prec_than_and)
				p.SetState(5052)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
					goto errorExit
				}
				{
					p.SetState(5053)
					p.Is_operator()
				}
				{
					p.SetState(5054)
					p.Boolean_literal()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(5060)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 624, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpression_maybe_parenthesized_not_a_queryContext is an interface to support dynamic dispatch.
type IExpression_maybe_parenthesized_not_a_queryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Parenthesized_expression_not_a_query() IParenthesized_expression_not_a_queryContext
	Null_literal() INull_literalContext
	Boolean_literal() IBoolean_literalContext
	String_literal() IString_literalContext
	Bytes_literal() IBytes_literalContext
	Integer_literal() IInteger_literalContext
	Numeric_literal() INumeric_literalContext
	Bignumeric_literal() IBignumeric_literalContext
	Json_literal() IJson_literalContext
	Floating_point_literal() IFloating_point_literalContext
	Date_or_time_literal() IDate_or_time_literalContext
	Range_literal() IRange_literalContext
	Parameter_expression() IParameter_expressionContext
	System_variable_expression() ISystem_variable_expressionContext
	Array_constructor() IArray_constructorContext
	New_constructor() INew_constructorContext
	Braced_constructor() IBraced_constructorContext
	Braced_new_constructor() IBraced_new_constructorContext
	Struct_braced_constructor() IStruct_braced_constructorContext
	Case_expression() ICase_expressionContext
	Cast_expression() ICast_expressionContext
	Extract_expression() IExtract_expressionContext
	With_expression() IWith_expressionContext
	Replace_fields_expression() IReplace_fields_expressionContext
	Function_call_expression_with_clauses() IFunction_call_expression_with_clausesContext
	Interval_expression() IInterval_expressionContext
	Identifier() IIdentifierContext
	Struct_constructor() IStruct_constructorContext
	Expression_subquery_with_keyword() IExpression_subquery_with_keywordContext
	AllExpression_higher_prec_than_and() []IExpression_higher_prec_than_andContext
	Expression_higher_prec_than_and(i int) IExpression_higher_prec_than_andContext
	LS_BRACKET_SYMBOL() antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	RS_BRACKET_SYMBOL() antlr.TerminalNode
	DOT_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	NOT_SYMBOL() antlr.TerminalNode
	Like_operator() ILike_operatorContext
	Any_some_all() IAny_some_allContext
	Unnest_expression() IUnnest_expressionContext
	Hint() IHintContext
	Parenthesized_anysomeall_list_in_rhs() IParenthesized_anysomeall_list_in_rhsContext
	Distinct_operator() IDistinct_operatorContext
	In_operator() IIn_operatorContext
	Parenthesized_in_rhs() IParenthesized_in_rhsContext
	Between_operator() IBetween_operatorContext
	AND_SYMBOL() antlr.TerminalNode
	OR_SYMBOL() antlr.TerminalNode
	Is_operator() IIs_operatorContext
	UNKNOWN_SYMBOL() antlr.TerminalNode
	Comparative_operator() IComparative_operatorContext
	STROKE_SYMBOL() antlr.TerminalNode
	CIRCUMFLEX_SYMBOL() antlr.TerminalNode
	BIT_AND_SYMBOL() antlr.TerminalNode
	BOOL_OR_SYMBOL() antlr.TerminalNode
	Shift_operator() IShift_operatorContext
	Additive_operator() IAdditive_operatorContext
	Multiplicative_operator() IMultiplicative_operatorContext
	Unary_operator() IUnary_operatorContext
	And_expression() IAnd_expressionContext

	// IsExpression_maybe_parenthesized_not_a_queryContext differentiates from other interfaces.
	IsExpression_maybe_parenthesized_not_a_queryContext()
}

type Expression_maybe_parenthesized_not_a_queryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_maybe_parenthesized_not_a_queryContext() *Expression_maybe_parenthesized_not_a_queryContext {
	var p = new(Expression_maybe_parenthesized_not_a_queryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expression_maybe_parenthesized_not_a_query
	return p
}

func InitEmptyExpression_maybe_parenthesized_not_a_queryContext(p *Expression_maybe_parenthesized_not_a_queryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expression_maybe_parenthesized_not_a_query
}

func (*Expression_maybe_parenthesized_not_a_queryContext) IsExpression_maybe_parenthesized_not_a_queryContext() {
}

func NewExpression_maybe_parenthesized_not_a_queryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_maybe_parenthesized_not_a_queryContext {
	var p = new(Expression_maybe_parenthesized_not_a_queryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_expression_maybe_parenthesized_not_a_query

	return p
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_maybe_parenthesized_not_a_queryContext) Parenthesized_expression_not_a_query() IParenthesized_expression_not_a_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesized_expression_not_a_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesized_expression_not_a_queryContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Null_literal() INull_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INull_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INull_literalContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Boolean_literal() IBoolean_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBoolean_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBoolean_literalContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Bytes_literal() IBytes_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBytes_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBytes_literalContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Integer_literal() IInteger_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInteger_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInteger_literalContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Numeric_literal() INumeric_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumeric_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumeric_literalContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Bignumeric_literal() IBignumeric_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBignumeric_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBignumeric_literalContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Json_literal() IJson_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJson_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJson_literalContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Floating_point_literal() IFloating_point_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFloating_point_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFloating_point_literalContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Date_or_time_literal() IDate_or_time_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDate_or_time_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDate_or_time_literalContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Range_literal() IRange_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRange_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRange_literalContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Parameter_expression() IParameter_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParameter_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParameter_expressionContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) System_variable_expression() ISystem_variable_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISystem_variable_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISystem_variable_expressionContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Array_constructor() IArray_constructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArray_constructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArray_constructorContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) New_constructor() INew_constructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INew_constructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INew_constructorContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Braced_constructor() IBraced_constructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBraced_constructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBraced_constructorContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Braced_new_constructor() IBraced_new_constructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBraced_new_constructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBraced_new_constructorContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Struct_braced_constructor() IStruct_braced_constructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_braced_constructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_braced_constructorContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Case_expression() ICase_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICase_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICase_expressionContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Cast_expression() ICast_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICast_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICast_expressionContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Extract_expression() IExtract_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExtract_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExtract_expressionContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) With_expression() IWith_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_expressionContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Replace_fields_expression() IReplace_fields_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReplace_fields_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReplace_fields_expressionContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Function_call_expression_with_clauses() IFunction_call_expression_with_clausesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunction_call_expression_with_clausesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunction_call_expression_with_clausesContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Interval_expression() IInterval_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterval_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterval_expressionContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Struct_constructor() IStruct_constructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_constructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_constructorContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Expression_subquery_with_keyword() IExpression_subquery_with_keywordContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpression_subquery_with_keywordContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpression_subquery_with_keywordContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) AllExpression_higher_prec_than_and() []IExpression_higher_prec_than_andContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpression_higher_prec_than_andContext); ok {
			len++
		}
	}

	tst := make([]IExpression_higher_prec_than_andContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpression_higher_prec_than_andContext); ok {
			tst[i] = t.(IExpression_higher_prec_than_andContext)
			i++
		}
	}

	return tst
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Expression_higher_prec_than_and(i int) IExpression_higher_prec_than_andContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpression_higher_prec_than_andContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpression_higher_prec_than_andContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) LS_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLS_BRACKET_SYMBOL, 0)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) RS_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRS_BRACKET_SYMBOL, 0)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) DOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDOT_SYMBOL, 0)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) NOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNOT_SYMBOL, 0)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Like_operator() ILike_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILike_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILike_operatorContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Any_some_all() IAny_some_allContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_some_allContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_some_allContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Unnest_expression() IUnnest_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnnest_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnnest_expressionContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Hint() IHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHintContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Parenthesized_anysomeall_list_in_rhs() IParenthesized_anysomeall_list_in_rhsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesized_anysomeall_list_in_rhsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesized_anysomeall_list_in_rhsContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Distinct_operator() IDistinct_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDistinct_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDistinct_operatorContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) In_operator() IIn_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIn_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIn_operatorContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Parenthesized_in_rhs() IParenthesized_in_rhsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesized_in_rhsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesized_in_rhsContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Between_operator() IBetween_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBetween_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBetween_operatorContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) AND_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAND_SYMBOL, 0)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) OR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOR_SYMBOL, 0)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Is_operator() IIs_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIs_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIs_operatorContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) UNKNOWN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNKNOWN_SYMBOL, 0)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Comparative_operator() IComparative_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComparative_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComparative_operatorContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) STROKE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTROKE_SYMBOL, 0)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) CIRCUMFLEX_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCIRCUMFLEX_SYMBOL, 0)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) BIT_AND_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBIT_AND_SYMBOL, 0)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) BOOL_OR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBOOL_OR_SYMBOL, 0)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Shift_operator() IShift_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShift_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShift_operatorContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Additive_operator() IAdditive_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAdditive_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAdditive_operatorContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Multiplicative_operator() IMultiplicative_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMultiplicative_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMultiplicative_operatorContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Unary_operator() IUnary_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnary_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnary_operatorContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) And_expression() IAnd_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnd_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnd_expressionContext)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterExpression_maybe_parenthesized_not_a_query(s)
	}
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitExpression_maybe_parenthesized_not_a_query(s)
	}
}

func (s *Expression_maybe_parenthesized_not_a_queryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitExpression_maybe_parenthesized_not_a_query(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Expression_maybe_parenthesized_not_a_query() (localctx IExpression_maybe_parenthesized_not_a_queryContext) {
	localctx = NewExpression_maybe_parenthesized_not_a_queryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 816, GoogleSQLParserRULE_expression_maybe_parenthesized_not_a_query)
	var _la int

	p.SetState(5210)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 629, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5061)
			p.Parenthesized_expression_not_a_query()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5062)
			p.Null_literal()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5063)
			p.Boolean_literal()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5064)
			p.string_literal(0)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5065)
			p.bytes_literal(0)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5066)
			p.Integer_literal()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5067)
			p.Numeric_literal()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5068)
			p.Bignumeric_literal()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(5069)
			p.Json_literal()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(5070)
			p.Floating_point_literal()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(5071)
			p.Date_or_time_literal()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(5072)
			p.Range_literal()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(5073)
			p.Parameter_expression()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(5074)
			p.System_variable_expression()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(5075)
			p.Array_constructor()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(5076)
			p.New_constructor()
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(5077)
			p.Braced_constructor()
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(5078)
			p.Braced_new_constructor()
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(5079)
			p.Struct_braced_constructor()
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(5080)
			p.Case_expression()
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(5081)
			p.Cast_expression()
		}

	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(5082)
			p.Extract_expression()
		}

	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(5083)
			p.With_expression()
		}

	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(5084)
			p.Replace_fields_expression()
		}

	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(5085)
			p.Function_call_expression_with_clauses()
		}

	case 26:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(5086)
			p.Interval_expression()
		}

	case 27:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(5087)
			p.Identifier()
		}

	case 28:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(5088)
			p.Struct_constructor()
		}

	case 29:
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(5089)
			p.Expression_subquery_with_keyword()
		}

	case 30:
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(5090)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(5091)
			p.Match(GoogleSQLParserLS_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5092)
			p.expression(0)
		}
		{
			p.SetState(5093)
			p.Match(GoogleSQLParserRS_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 31:
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(5095)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(5096)
			p.Match(GoogleSQLParserDOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5097)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5098)
			p.Path_expression()
		}
		{
			p.SetState(5099)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 32:
		p.EnterOuterAlt(localctx, 32)
		{
			p.SetState(5101)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(5102)
			p.Match(GoogleSQLParserDOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5103)
			p.Identifier()
		}

	case 33:
		p.EnterOuterAlt(localctx, 33)
		{
			p.SetState(5105)
			p.Match(GoogleSQLParserNOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5106)
			p.expression_higher_prec_than_and(0)
		}

	case 34:
		p.EnterOuterAlt(localctx, 34)
		{
			p.SetState(5107)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(5108)
			p.Like_operator()
		}
		{
			p.SetState(5109)
			p.Any_some_all()
		}
		p.SetState(5111)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAT_SYMBOL {
			{
				p.SetState(5110)
				p.Hint()
			}

		}
		{
			p.SetState(5113)
			p.Unnest_expression()
		}

	case 35:
		p.EnterOuterAlt(localctx, 35)
		{
			p.SetState(5115)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(5116)
			p.Like_operator()
		}
		{
			p.SetState(5117)
			p.Any_some_all()
		}
		p.SetState(5119)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAT_SYMBOL {
			{
				p.SetState(5118)
				p.Hint()
			}

		}
		{
			p.SetState(5121)
			p.Parenthesized_anysomeall_list_in_rhs()
		}

	case 36:
		p.EnterOuterAlt(localctx, 36)
		{
			p.SetState(5123)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(5124)
			p.Like_operator()
		}
		{
			p.SetState(5125)
			p.expression_higher_prec_than_and(0)
		}

	case 37:
		p.EnterOuterAlt(localctx, 37)
		{
			p.SetState(5127)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(5128)
			p.Distinct_operator()
		}
		{
			p.SetState(5129)
			p.expression_higher_prec_than_and(0)
		}

	case 38:
		p.EnterOuterAlt(localctx, 38)
		{
			p.SetState(5131)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(5132)
			p.In_operator()
		}
		p.SetState(5134)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAT_SYMBOL {
			{
				p.SetState(5133)
				p.Hint()
			}

		}
		{
			p.SetState(5136)
			p.Unnest_expression()
		}

		if localctx.Hint() != nil {
			p.NotifyErrorListeners("Syntax error: HINTs cannot be specified on IN clause with UNNEST", nil, nil)
		}

	case 39:
		p.EnterOuterAlt(localctx, 39)
		{
			p.SetState(5139)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(5140)
			p.In_operator()
		}
		p.SetState(5142)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAT_SYMBOL {
			{
				p.SetState(5141)
				p.Hint()
			}

		}
		{
			p.SetState(5144)
			p.Parenthesized_in_rhs()
		}

	case 40:
		p.EnterOuterAlt(localctx, 40)
		{
			p.SetState(5146)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(5147)
			p.Between_operator()
		}
		{
			p.SetState(5148)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(5149)
			p.Match(GoogleSQLParserAND_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5150)
			p.expression_higher_prec_than_and(0)
		}

	case 41:
		p.EnterOuterAlt(localctx, 41)
		{
			p.SetState(5152)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(5153)
			p.Between_operator()
		}
		{
			p.SetState(5154)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(5155)
			p.Match(GoogleSQLParserOR_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.NotifyErrorListeners("Syntax error: Expression in BETWEEN must be parenthesized", nil, nil)

	case 42:
		p.EnterOuterAlt(localctx, 42)
		{
			p.SetState(5158)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(5159)
			p.Is_operator()
		}
		{
			p.SetState(5160)
			p.Match(GoogleSQLParserUNKNOWN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 43:
		p.EnterOuterAlt(localctx, 43)
		{
			p.SetState(5162)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(5163)
			p.Is_operator()
		}
		{
			p.SetState(5164)
			p.Null_literal()
		}

	case 44:
		p.EnterOuterAlt(localctx, 44)
		{
			p.SetState(5166)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(5167)
			p.Is_operator()
		}
		{
			p.SetState(5168)
			p.Boolean_literal()
		}

	case 45:
		p.EnterOuterAlt(localctx, 45)
		{
			p.SetState(5170)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(5171)
			p.Comparative_operator()
		}
		{
			p.SetState(5172)
			p.expression_higher_prec_than_and(0)
		}

	case 46:
		p.EnterOuterAlt(localctx, 46)
		{
			p.SetState(5174)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(5175)
			p.Match(GoogleSQLParserSTROKE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5176)
			p.expression_higher_prec_than_and(0)
		}

	case 47:
		p.EnterOuterAlt(localctx, 47)
		{
			p.SetState(5178)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(5179)
			p.Match(GoogleSQLParserCIRCUMFLEX_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5180)
			p.expression_higher_prec_than_and(0)
		}

	case 48:
		p.EnterOuterAlt(localctx, 48)
		{
			p.SetState(5182)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(5183)
			p.Match(GoogleSQLParserBIT_AND_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5184)
			p.expression_higher_prec_than_and(0)
		}

	case 49:
		p.EnterOuterAlt(localctx, 49)
		{
			p.SetState(5186)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(5187)
			p.Match(GoogleSQLParserBOOL_OR_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5188)
			p.expression_higher_prec_than_and(0)
		}

	case 50:
		p.EnterOuterAlt(localctx, 50)
		{
			p.SetState(5190)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(5191)
			p.Shift_operator()
		}
		{
			p.SetState(5192)
			p.expression_higher_prec_than_and(0)
		}

	case 51:
		p.EnterOuterAlt(localctx, 51)
		{
			p.SetState(5194)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(5195)
			p.Additive_operator()
		}
		{
			p.SetState(5196)
			p.expression_higher_prec_than_and(0)
		}

	case 52:
		p.EnterOuterAlt(localctx, 52)
		{
			p.SetState(5198)
			p.expression_higher_prec_than_and(0)
		}
		{
			p.SetState(5199)
			p.Multiplicative_operator()
		}
		{
			p.SetState(5200)
			p.expression_higher_prec_than_and(0)
		}

	case 53:
		p.EnterOuterAlt(localctx, 53)
		{
			p.SetState(5202)
			p.Unary_operator()
		}
		{
			p.SetState(5203)
			p.expression_higher_prec_than_and(0)
		}

	case 54:
		p.EnterOuterAlt(localctx, 54)
		{
			p.SetState(5205)
			p.And_expression()
		}

	case 55:
		p.EnterOuterAlt(localctx, 55)
		{
			p.SetState(5206)
			p.expression(0)
		}
		{
			p.SetState(5207)
			p.Match(GoogleSQLParserOR_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5208)
			p.expression(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IParenthesized_in_rhsContext is an interface to support dynamic dispatch.
type IParenthesized_in_rhsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Parenthesized_query() IParenthesized_queryContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Expression_maybe_parenthesized_not_a_query() IExpression_maybe_parenthesized_not_a_queryContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	In_list_two_or_more_prefix() IIn_list_two_or_more_prefixContext

	// IsParenthesized_in_rhsContext differentiates from other interfaces.
	IsParenthesized_in_rhsContext()
}

type Parenthesized_in_rhsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParenthesized_in_rhsContext() *Parenthesized_in_rhsContext {
	var p = new(Parenthesized_in_rhsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_parenthesized_in_rhs
	return p
}

func InitEmptyParenthesized_in_rhsContext(p *Parenthesized_in_rhsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_parenthesized_in_rhs
}

func (*Parenthesized_in_rhsContext) IsParenthesized_in_rhsContext() {}

func NewParenthesized_in_rhsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parenthesized_in_rhsContext {
	var p = new(Parenthesized_in_rhsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_parenthesized_in_rhs

	return p
}

func (s *Parenthesized_in_rhsContext) GetParser() antlr.Parser { return s.parser }

func (s *Parenthesized_in_rhsContext) Parenthesized_query() IParenthesized_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesized_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesized_queryContext)
}

func (s *Parenthesized_in_rhsContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Parenthesized_in_rhsContext) Expression_maybe_parenthesized_not_a_query() IExpression_maybe_parenthesized_not_a_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpression_maybe_parenthesized_not_a_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpression_maybe_parenthesized_not_a_queryContext)
}

func (s *Parenthesized_in_rhsContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Parenthesized_in_rhsContext) In_list_two_or_more_prefix() IIn_list_two_or_more_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIn_list_two_or_more_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIn_list_two_or_more_prefixContext)
}

func (s *Parenthesized_in_rhsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parenthesized_in_rhsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Parenthesized_in_rhsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterParenthesized_in_rhs(s)
	}
}

func (s *Parenthesized_in_rhsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitParenthesized_in_rhs(s)
	}
}

func (s *Parenthesized_in_rhsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitParenthesized_in_rhs(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Parenthesized_in_rhs() (localctx IParenthesized_in_rhsContext) {
	localctx = NewParenthesized_in_rhsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 818, GoogleSQLParserRULE_parenthesized_in_rhs)
	p.SetState(5220)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 630, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5212)
			p.Parenthesized_query()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5213)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5214)
			p.Expression_maybe_parenthesized_not_a_query()
		}
		{
			p.SetState(5215)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5217)
			p.In_list_two_or_more_prefix()
		}
		{
			p.SetState(5218)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnary_operatorContext is an interface to support dynamic dispatch.
type IUnary_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PLUS_OPERATOR() antlr.TerminalNode
	MINUS_OPERATOR() antlr.TerminalNode
	BITWISE_NOT_OPERATOR() antlr.TerminalNode

	// IsUnary_operatorContext differentiates from other interfaces.
	IsUnary_operatorContext()
}

type Unary_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnary_operatorContext() *Unary_operatorContext {
	var p = new(Unary_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unary_operator
	return p
}

func InitEmptyUnary_operatorContext(p *Unary_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unary_operator
}

func (*Unary_operatorContext) IsUnary_operatorContext() {}

func NewUnary_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unary_operatorContext {
	var p = new(Unary_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_unary_operator

	return p
}

func (s *Unary_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Unary_operatorContext) PLUS_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPLUS_OPERATOR, 0)
}

func (s *Unary_operatorContext) MINUS_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMINUS_OPERATOR, 0)
}

func (s *Unary_operatorContext) BITWISE_NOT_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBITWISE_NOT_OPERATOR, 0)
}

func (s *Unary_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unary_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unary_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUnary_operator(s)
	}
}

func (s *Unary_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUnary_operator(s)
	}
}

func (s *Unary_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUnary_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Unary_operator() (localctx IUnary_operatorContext) {
	localctx = NewUnary_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 820, GoogleSQLParserRULE_unary_operator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5222)
		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&19456) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IComparative_operatorContext is an interface to support dynamic dispatch.
type IComparative_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EQUAL_OPERATOR() antlr.TerminalNode
	NOT_EQUAL_OPERATOR() antlr.TerminalNode
	NOT_EQUAL2_OPERATOR() antlr.TerminalNode
	LT_OPERATOR() antlr.TerminalNode
	LE_OPERATOR() antlr.TerminalNode
	GT_OPERATOR() antlr.TerminalNode
	GE_OPERATOR() antlr.TerminalNode

	// IsComparative_operatorContext differentiates from other interfaces.
	IsComparative_operatorContext()
}

type Comparative_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComparative_operatorContext() *Comparative_operatorContext {
	var p = new(Comparative_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_comparative_operator
	return p
}

func InitEmptyComparative_operatorContext(p *Comparative_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_comparative_operator
}

func (*Comparative_operatorContext) IsComparative_operatorContext() {}

func NewComparative_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Comparative_operatorContext {
	var p = new(Comparative_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_comparative_operator

	return p
}

func (s *Comparative_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Comparative_operatorContext) EQUAL_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEQUAL_OPERATOR, 0)
}

func (s *Comparative_operatorContext) NOT_EQUAL_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNOT_EQUAL_OPERATOR, 0)
}

func (s *Comparative_operatorContext) NOT_EQUAL2_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNOT_EQUAL2_OPERATOR, 0)
}

func (s *Comparative_operatorContext) LT_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLT_OPERATOR, 0)
}

func (s *Comparative_operatorContext) LE_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLE_OPERATOR, 0)
}

func (s *Comparative_operatorContext) GT_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGT_OPERATOR, 0)
}

func (s *Comparative_operatorContext) GE_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGE_OPERATOR, 0)
}

func (s *Comparative_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Comparative_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Comparative_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterComparative_operator(s)
	}
}

func (s *Comparative_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitComparative_operator(s)
	}
}

func (s *Comparative_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitComparative_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Comparative_operator() (localctx IComparative_operatorContext) {
	localctx = NewComparative_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 822, GoogleSQLParserRULE_comparative_operator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5224)
		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&254) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IShift_operatorContext is an interface to support dynamic dispatch.
type IShift_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	KL_OPERATOR() antlr.TerminalNode
	KR_OPERATOR() antlr.TerminalNode

	// IsShift_operatorContext differentiates from other interfaces.
	IsShift_operatorContext()
}

type Shift_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShift_operatorContext() *Shift_operatorContext {
	var p = new(Shift_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_shift_operator
	return p
}

func InitEmptyShift_operatorContext(p *Shift_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_shift_operator
}

func (*Shift_operatorContext) IsShift_operatorContext() {}

func NewShift_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Shift_operatorContext {
	var p = new(Shift_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_shift_operator

	return p
}

func (s *Shift_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Shift_operatorContext) KL_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserKL_OPERATOR, 0)
}

func (s *Shift_operatorContext) KR_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserKR_OPERATOR, 0)
}

func (s *Shift_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Shift_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Shift_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterShift_operator(s)
	}
}

func (s *Shift_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitShift_operator(s)
	}
}

func (s *Shift_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitShift_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Shift_operator() (localctx IShift_operatorContext) {
	localctx = NewShift_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 824, GoogleSQLParserRULE_shift_operator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5226)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserKL_OPERATOR || _la == GoogleSQLParserKR_OPERATOR) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAdditive_operatorContext is an interface to support dynamic dispatch.
type IAdditive_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PLUS_OPERATOR() antlr.TerminalNode
	MINUS_OPERATOR() antlr.TerminalNode

	// IsAdditive_operatorContext differentiates from other interfaces.
	IsAdditive_operatorContext()
}

type Additive_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAdditive_operatorContext() *Additive_operatorContext {
	var p = new(Additive_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_additive_operator
	return p
}

func InitEmptyAdditive_operatorContext(p *Additive_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_additive_operator
}

func (*Additive_operatorContext) IsAdditive_operatorContext() {}

func NewAdditive_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Additive_operatorContext {
	var p = new(Additive_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_additive_operator

	return p
}

func (s *Additive_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Additive_operatorContext) PLUS_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPLUS_OPERATOR, 0)
}

func (s *Additive_operatorContext) MINUS_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMINUS_OPERATOR, 0)
}

func (s *Additive_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Additive_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Additive_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAdditive_operator(s)
	}
}

func (s *Additive_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAdditive_operator(s)
	}
}

func (s *Additive_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAdditive_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Additive_operator() (localctx IAdditive_operatorContext) {
	localctx = NewAdditive_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 826, GoogleSQLParserRULE_additive_operator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5228)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserPLUS_OPERATOR || _la == GoogleSQLParserMINUS_OPERATOR) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMultiplicative_operatorContext is an interface to support dynamic dispatch.
type IMultiplicative_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MULTIPLY_OPERATOR() antlr.TerminalNode
	DIVIDE_OPERATOR() antlr.TerminalNode

	// IsMultiplicative_operatorContext differentiates from other interfaces.
	IsMultiplicative_operatorContext()
}

type Multiplicative_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMultiplicative_operatorContext() *Multiplicative_operatorContext {
	var p = new(Multiplicative_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_multiplicative_operator
	return p
}

func InitEmptyMultiplicative_operatorContext(p *Multiplicative_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_multiplicative_operator
}

func (*Multiplicative_operatorContext) IsMultiplicative_operatorContext() {}

func NewMultiplicative_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Multiplicative_operatorContext {
	var p = new(Multiplicative_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_multiplicative_operator

	return p
}

func (s *Multiplicative_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Multiplicative_operatorContext) MULTIPLY_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMULTIPLY_OPERATOR, 0)
}

func (s *Multiplicative_operatorContext) DIVIDE_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDIVIDE_OPERATOR, 0)
}

func (s *Multiplicative_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Multiplicative_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Multiplicative_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterMultiplicative_operator(s)
	}
}

func (s *Multiplicative_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitMultiplicative_operator(s)
	}
}

func (s *Multiplicative_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitMultiplicative_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Multiplicative_operator() (localctx IMultiplicative_operatorContext) {
	localctx = NewMultiplicative_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 828, GoogleSQLParserRULE_multiplicative_operator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5230)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserMULTIPLY_OPERATOR || _la == GoogleSQLParserDIVIDE_OPERATOR) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIs_operatorContext is an interface to support dynamic dispatch.
type IIs_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IS_SYMBOL() antlr.TerminalNode
	NOT_SYMBOL() antlr.TerminalNode

	// IsIs_operatorContext differentiates from other interfaces.
	IsIs_operatorContext()
}

type Is_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIs_operatorContext() *Is_operatorContext {
	var p = new(Is_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_is_operator
	return p
}

func InitEmptyIs_operatorContext(p *Is_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_is_operator
}

func (*Is_operatorContext) IsIs_operatorContext() {}

func NewIs_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Is_operatorContext {
	var p = new(Is_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_is_operator

	return p
}

func (s *Is_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Is_operatorContext) IS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIS_SYMBOL, 0)
}

func (s *Is_operatorContext) NOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNOT_SYMBOL, 0)
}

func (s *Is_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Is_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Is_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterIs_operator(s)
	}
}

func (s *Is_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitIs_operator(s)
	}
}

func (s *Is_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitIs_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Is_operator() (localctx IIs_operatorContext) {
	localctx = NewIs_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 830, GoogleSQLParserRULE_is_operator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5232)
		p.Match(GoogleSQLParserIS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(5234)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserNOT_SYMBOL {
		{
			p.SetState(5233)
			p.Match(GoogleSQLParserNOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBetween_operatorContext is an interface to support dynamic dispatch.
type IBetween_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BETWEEN_SYMBOL() antlr.TerminalNode
	NOT_SYMBOL() antlr.TerminalNode

	// IsBetween_operatorContext differentiates from other interfaces.
	IsBetween_operatorContext()
}

type Between_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBetween_operatorContext() *Between_operatorContext {
	var p = new(Between_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_between_operator
	return p
}

func InitEmptyBetween_operatorContext(p *Between_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_between_operator
}

func (*Between_operatorContext) IsBetween_operatorContext() {}

func NewBetween_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Between_operatorContext {
	var p = new(Between_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_between_operator

	return p
}

func (s *Between_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Between_operatorContext) BETWEEN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBETWEEN_SYMBOL, 0)
}

func (s *Between_operatorContext) NOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNOT_SYMBOL, 0)
}

func (s *Between_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Between_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Between_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBetween_operator(s)
	}
}

func (s *Between_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBetween_operator(s)
	}
}

func (s *Between_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBetween_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Between_operator() (localctx IBetween_operatorContext) {
	localctx = NewBetween_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 832, GoogleSQLParserRULE_between_operator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5237)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserNOT_SYMBOL {
		{
			p.SetState(5236)
			p.Match(GoogleSQLParserNOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(5239)
		p.Match(GoogleSQLParserBETWEEN_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIn_operatorContext is an interface to support dynamic dispatch.
type IIn_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IN_SYMBOL() antlr.TerminalNode
	NOT_SYMBOL() antlr.TerminalNode

	// IsIn_operatorContext differentiates from other interfaces.
	IsIn_operatorContext()
}

type In_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIn_operatorContext() *In_operatorContext {
	var p = new(In_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_in_operator
	return p
}

func InitEmptyIn_operatorContext(p *In_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_in_operator
}

func (*In_operatorContext) IsIn_operatorContext() {}

func NewIn_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *In_operatorContext {
	var p = new(In_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_in_operator

	return p
}

func (s *In_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *In_operatorContext) IN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIN_SYMBOL, 0)
}

func (s *In_operatorContext) NOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNOT_SYMBOL, 0)
}

func (s *In_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *In_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *In_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterIn_operator(s)
	}
}

func (s *In_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitIn_operator(s)
	}
}

func (s *In_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitIn_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) In_operator() (localctx IIn_operatorContext) {
	localctx = NewIn_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 834, GoogleSQLParserRULE_in_operator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5242)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserNOT_SYMBOL {
		{
			p.SetState(5241)
			p.Match(GoogleSQLParserNOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(5244)
		p.Match(GoogleSQLParserIN_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDistinct_operatorContext is an interface to support dynamic dispatch.
type IDistinct_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IS_SYMBOL() antlr.TerminalNode
	DISTINCT_SYMBOL() antlr.TerminalNode
	FROM_SYMBOL() antlr.TerminalNode
	NOT_SYMBOL() antlr.TerminalNode

	// IsDistinct_operatorContext differentiates from other interfaces.
	IsDistinct_operatorContext()
}

type Distinct_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDistinct_operatorContext() *Distinct_operatorContext {
	var p = new(Distinct_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_distinct_operator
	return p
}

func InitEmptyDistinct_operatorContext(p *Distinct_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_distinct_operator
}

func (*Distinct_operatorContext) IsDistinct_operatorContext() {}

func NewDistinct_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Distinct_operatorContext {
	var p = new(Distinct_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_distinct_operator

	return p
}

func (s *Distinct_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Distinct_operatorContext) IS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIS_SYMBOL, 0)
}

func (s *Distinct_operatorContext) DISTINCT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDISTINCT_SYMBOL, 0)
}

func (s *Distinct_operatorContext) FROM_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFROM_SYMBOL, 0)
}

func (s *Distinct_operatorContext) NOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNOT_SYMBOL, 0)
}

func (s *Distinct_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Distinct_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Distinct_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterDistinct_operator(s)
	}
}

func (s *Distinct_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitDistinct_operator(s)
	}
}

func (s *Distinct_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitDistinct_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Distinct_operator() (localctx IDistinct_operatorContext) {
	localctx = NewDistinct_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 836, GoogleSQLParserRULE_distinct_operator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5246)
		p.Match(GoogleSQLParserIS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(5248)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserNOT_SYMBOL {
		{
			p.SetState(5247)
			p.Match(GoogleSQLParserNOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(5250)
		p.Match(GoogleSQLParserDISTINCT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5251)
		p.Match(GoogleSQLParserFROM_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IParenthesized_queryContext is an interface to support dynamic dispatch.
type IParenthesized_queryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Query() IQueryContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsParenthesized_queryContext differentiates from other interfaces.
	IsParenthesized_queryContext()
}

type Parenthesized_queryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParenthesized_queryContext() *Parenthesized_queryContext {
	var p = new(Parenthesized_queryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_parenthesized_query
	return p
}

func InitEmptyParenthesized_queryContext(p *Parenthesized_queryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_parenthesized_query
}

func (*Parenthesized_queryContext) IsParenthesized_queryContext() {}

func NewParenthesized_queryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parenthesized_queryContext {
	var p = new(Parenthesized_queryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_parenthesized_query

	return p
}

func (s *Parenthesized_queryContext) GetParser() antlr.Parser { return s.parser }

func (s *Parenthesized_queryContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Parenthesized_queryContext) Query() IQueryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQueryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *Parenthesized_queryContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Parenthesized_queryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parenthesized_queryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Parenthesized_queryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterParenthesized_query(s)
	}
}

func (s *Parenthesized_queryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitParenthesized_query(s)
	}
}

func (s *Parenthesized_queryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitParenthesized_query(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Parenthesized_query() (localctx IParenthesized_queryContext) {
	localctx = NewParenthesized_queryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 838, GoogleSQLParserRULE_parenthesized_query)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5253)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5254)
		p.Query()
	}
	{
		p.SetState(5255)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IParenthesized_expression_not_a_queryContext is an interface to support dynamic dispatch.
type IParenthesized_expression_not_a_queryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Expression_maybe_parenthesized_not_a_query() IExpression_maybe_parenthesized_not_a_queryContext

	// IsParenthesized_expression_not_a_queryContext differentiates from other interfaces.
	IsParenthesized_expression_not_a_queryContext()
}

type Parenthesized_expression_not_a_queryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParenthesized_expression_not_a_queryContext() *Parenthesized_expression_not_a_queryContext {
	var p = new(Parenthesized_expression_not_a_queryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_parenthesized_expression_not_a_query
	return p
}

func InitEmptyParenthesized_expression_not_a_queryContext(p *Parenthesized_expression_not_a_queryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_parenthesized_expression_not_a_query
}

func (*Parenthesized_expression_not_a_queryContext) IsParenthesized_expression_not_a_queryContext() {}

func NewParenthesized_expression_not_a_queryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parenthesized_expression_not_a_queryContext {
	var p = new(Parenthesized_expression_not_a_queryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_parenthesized_expression_not_a_query

	return p
}

func (s *Parenthesized_expression_not_a_queryContext) GetParser() antlr.Parser { return s.parser }

func (s *Parenthesized_expression_not_a_queryContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Parenthesized_expression_not_a_queryContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Parenthesized_expression_not_a_queryContext) Expression_maybe_parenthesized_not_a_query() IExpression_maybe_parenthesized_not_a_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpression_maybe_parenthesized_not_a_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpression_maybe_parenthesized_not_a_queryContext)
}

func (s *Parenthesized_expression_not_a_queryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parenthesized_expression_not_a_queryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Parenthesized_expression_not_a_queryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterParenthesized_expression_not_a_query(s)
	}
}

func (s *Parenthesized_expression_not_a_queryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitParenthesized_expression_not_a_query(s)
	}
}

func (s *Parenthesized_expression_not_a_queryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitParenthesized_expression_not_a_query(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Parenthesized_expression_not_a_query() (localctx IParenthesized_expression_not_a_queryContext) {
	localctx = NewParenthesized_expression_not_a_queryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 840, GoogleSQLParserRULE_parenthesized_expression_not_a_query)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5257)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

	{
		p.SetState(5258)
		p.Expression_maybe_parenthesized_not_a_query()
	}

	{
		p.SetState(5259)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IParenthesized_anysomeall_list_in_rhsContext is an interface to support dynamic dispatch.
type IParenthesized_anysomeall_list_in_rhsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Parenthesized_query() IParenthesized_queryContext
	Parenthesized_expression_not_a_query() IParenthesized_expression_not_a_queryContext
	In_list_two_or_more_prefix() IIn_list_two_or_more_prefixContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsParenthesized_anysomeall_list_in_rhsContext differentiates from other interfaces.
	IsParenthesized_anysomeall_list_in_rhsContext()
}

type Parenthesized_anysomeall_list_in_rhsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParenthesized_anysomeall_list_in_rhsContext() *Parenthesized_anysomeall_list_in_rhsContext {
	var p = new(Parenthesized_anysomeall_list_in_rhsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_parenthesized_anysomeall_list_in_rhs
	return p
}

func InitEmptyParenthesized_anysomeall_list_in_rhsContext(p *Parenthesized_anysomeall_list_in_rhsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_parenthesized_anysomeall_list_in_rhs
}

func (*Parenthesized_anysomeall_list_in_rhsContext) IsParenthesized_anysomeall_list_in_rhsContext() {}

func NewParenthesized_anysomeall_list_in_rhsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parenthesized_anysomeall_list_in_rhsContext {
	var p = new(Parenthesized_anysomeall_list_in_rhsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_parenthesized_anysomeall_list_in_rhs

	return p
}

func (s *Parenthesized_anysomeall_list_in_rhsContext) GetParser() antlr.Parser { return s.parser }

func (s *Parenthesized_anysomeall_list_in_rhsContext) Parenthesized_query() IParenthesized_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesized_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesized_queryContext)
}

func (s *Parenthesized_anysomeall_list_in_rhsContext) Parenthesized_expression_not_a_query() IParenthesized_expression_not_a_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesized_expression_not_a_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesized_expression_not_a_queryContext)
}

func (s *Parenthesized_anysomeall_list_in_rhsContext) In_list_two_or_more_prefix() IIn_list_two_or_more_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIn_list_two_or_more_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIn_list_two_or_more_prefixContext)
}

func (s *Parenthesized_anysomeall_list_in_rhsContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Parenthesized_anysomeall_list_in_rhsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parenthesized_anysomeall_list_in_rhsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Parenthesized_anysomeall_list_in_rhsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterParenthesized_anysomeall_list_in_rhs(s)
	}
}

func (s *Parenthesized_anysomeall_list_in_rhsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitParenthesized_anysomeall_list_in_rhs(s)
	}
}

func (s *Parenthesized_anysomeall_list_in_rhsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitParenthesized_anysomeall_list_in_rhs(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Parenthesized_anysomeall_list_in_rhs() (localctx IParenthesized_anysomeall_list_in_rhsContext) {
	localctx = NewParenthesized_anysomeall_list_in_rhsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 842, GoogleSQLParserRULE_parenthesized_anysomeall_list_in_rhs)
	p.SetState(5266)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 635, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5261)
			p.Parenthesized_query()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5262)
			p.Parenthesized_expression_not_a_query()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5263)
			p.In_list_two_or_more_prefix()
		}
		{
			p.SetState(5264)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAnd_expressionContext is an interface to support dynamic dispatch.
type IAnd_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllExpression_higher_prec_than_and() []IExpression_higher_prec_than_andContext
	Expression_higher_prec_than_and(i int) IExpression_higher_prec_than_andContext
	AllAND_SYMBOL() []antlr.TerminalNode
	AND_SYMBOL(i int) antlr.TerminalNode

	// IsAnd_expressionContext differentiates from other interfaces.
	IsAnd_expressionContext()
}

type And_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnd_expressionContext() *And_expressionContext {
	var p = new(And_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_and_expression
	return p
}

func InitEmptyAnd_expressionContext(p *And_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_and_expression
}

func (*And_expressionContext) IsAnd_expressionContext() {}

func NewAnd_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *And_expressionContext {
	var p = new(And_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_and_expression

	return p
}

func (s *And_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *And_expressionContext) AllExpression_higher_prec_than_and() []IExpression_higher_prec_than_andContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpression_higher_prec_than_andContext); ok {
			len++
		}
	}

	tst := make([]IExpression_higher_prec_than_andContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpression_higher_prec_than_andContext); ok {
			tst[i] = t.(IExpression_higher_prec_than_andContext)
			i++
		}
	}

	return tst
}

func (s *And_expressionContext) Expression_higher_prec_than_and(i int) IExpression_higher_prec_than_andContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpression_higher_prec_than_andContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpression_higher_prec_than_andContext)
}

func (s *And_expressionContext) AllAND_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserAND_SYMBOL)
}

func (s *And_expressionContext) AND_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAND_SYMBOL, i)
}

func (s *And_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *And_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *And_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAnd_expression(s)
	}
}

func (s *And_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAnd_expression(s)
	}
}

func (s *And_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAnd_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) And_expression() (localctx IAnd_expressionContext) {
	localctx = NewAnd_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 844, GoogleSQLParserRULE_and_expression)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5268)
		p.expression_higher_prec_than_and(0)
	}
	{
		p.SetState(5269)
		p.Match(GoogleSQLParserAND_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5270)
		p.expression_higher_prec_than_and(0)
	}
	p.SetState(5275)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 636, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(5271)
				p.Match(GoogleSQLParserAND_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(5272)
				p.expression_higher_prec_than_and(0)
			}

		}
		p.SetState(5277)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 636, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIn_list_two_or_more_prefixContext is an interface to support dynamic dispatch.
type IIn_list_two_or_more_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsIn_list_two_or_more_prefixContext differentiates from other interfaces.
	IsIn_list_two_or_more_prefixContext()
}

type In_list_two_or_more_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIn_list_two_or_more_prefixContext() *In_list_two_or_more_prefixContext {
	var p = new(In_list_two_or_more_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_in_list_two_or_more_prefix
	return p
}

func InitEmptyIn_list_two_or_more_prefixContext(p *In_list_two_or_more_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_in_list_two_or_more_prefix
}

func (*In_list_two_or_more_prefixContext) IsIn_list_two_or_more_prefixContext() {}

func NewIn_list_two_or_more_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *In_list_two_or_more_prefixContext {
	var p = new(In_list_two_or_more_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_in_list_two_or_more_prefix

	return p
}

func (s *In_list_two_or_more_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *In_list_two_or_more_prefixContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *In_list_two_or_more_prefixContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *In_list_two_or_more_prefixContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *In_list_two_or_more_prefixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *In_list_two_or_more_prefixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *In_list_two_or_more_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *In_list_two_or_more_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *In_list_two_or_more_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterIn_list_two_or_more_prefix(s)
	}
}

func (s *In_list_two_or_more_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitIn_list_two_or_more_prefix(s)
	}
}

func (s *In_list_two_or_more_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitIn_list_two_or_more_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) In_list_two_or_more_prefix() (localctx IIn_list_two_or_more_prefixContext) {
	localctx = NewIn_list_two_or_more_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 846, GoogleSQLParserRULE_in_list_two_or_more_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5278)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5279)
		p.expression(0)
	}
	{
		p.SetState(5280)
		p.Match(GoogleSQLParserCOMMA_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5281)
		p.expression(0)
	}
	p.SetState(5286)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(5282)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5283)
			p.expression(0)
		}

		p.SetState(5288)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAny_some_allContext is an interface to support dynamic dispatch.
type IAny_some_allContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ANY_SYMBOL() antlr.TerminalNode
	SOME_SYMBOL() antlr.TerminalNode
	ALL_SYMBOL() antlr.TerminalNode

	// IsAny_some_allContext differentiates from other interfaces.
	IsAny_some_allContext()
}

type Any_some_allContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAny_some_allContext() *Any_some_allContext {
	var p = new(Any_some_allContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_any_some_all
	return p
}

func InitEmptyAny_some_allContext(p *Any_some_allContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_any_some_all
}

func (*Any_some_allContext) IsAny_some_allContext() {}

func NewAny_some_allContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Any_some_allContext {
	var p = new(Any_some_allContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_any_some_all

	return p
}

func (s *Any_some_allContext) GetParser() antlr.Parser { return s.parser }

func (s *Any_some_allContext) ANY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserANY_SYMBOL, 0)
}

func (s *Any_some_allContext) SOME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSOME_SYMBOL, 0)
}

func (s *Any_some_allContext) ALL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserALL_SYMBOL, 0)
}

func (s *Any_some_allContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Any_some_allContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Any_some_allContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAny_some_all(s)
	}
}

func (s *Any_some_allContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAny_some_all(s)
	}
}

func (s *Any_some_allContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAny_some_all(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Any_some_all() (localctx IAny_some_allContext) {
	localctx = NewAny_some_allContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 848, GoogleSQLParserRULE_any_some_all)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5289)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserALL_SYMBOL || _la == GoogleSQLParserANY_SYMBOL || _la == GoogleSQLParserSOME_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILike_operatorContext is an interface to support dynamic dispatch.
type ILike_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LIKE_SYMBOL() antlr.TerminalNode
	NOT_SYMBOL() antlr.TerminalNode

	// IsLike_operatorContext differentiates from other interfaces.
	IsLike_operatorContext()
}

type Like_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLike_operatorContext() *Like_operatorContext {
	var p = new(Like_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_like_operator
	return p
}

func InitEmptyLike_operatorContext(p *Like_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_like_operator
}

func (*Like_operatorContext) IsLike_operatorContext() {}

func NewLike_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Like_operatorContext {
	var p = new(Like_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_like_operator

	return p
}

func (s *Like_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Like_operatorContext) LIKE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLIKE_SYMBOL, 0)
}

func (s *Like_operatorContext) NOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNOT_SYMBOL, 0)
}

func (s *Like_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Like_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Like_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterLike_operator(s)
	}
}

func (s *Like_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitLike_operator(s)
	}
}

func (s *Like_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitLike_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Like_operator() (localctx ILike_operatorContext) {
	localctx = NewLike_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 850, GoogleSQLParserRULE_like_operator)
	p.SetState(5294)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserLIKE_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5291)
			p.Match(GoogleSQLParserLIKE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserNOT_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5292)
			p.Match(GoogleSQLParserNOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5293)
			p.Match(GoogleSQLParserLIKE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpression_subquery_with_keywordContext is an interface to support dynamic dispatch.
type IExpression_subquery_with_keywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ARRAY_SYMBOL() antlr.TerminalNode
	Parenthesized_query() IParenthesized_queryContext
	EXISTS_SYMBOL() antlr.TerminalNode
	Hint() IHintContext

	// IsExpression_subquery_with_keywordContext differentiates from other interfaces.
	IsExpression_subquery_with_keywordContext()
}

type Expression_subquery_with_keywordContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_subquery_with_keywordContext() *Expression_subquery_with_keywordContext {
	var p = new(Expression_subquery_with_keywordContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expression_subquery_with_keyword
	return p
}

func InitEmptyExpression_subquery_with_keywordContext(p *Expression_subquery_with_keywordContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expression_subquery_with_keyword
}

func (*Expression_subquery_with_keywordContext) IsExpression_subquery_with_keywordContext() {}

func NewExpression_subquery_with_keywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_subquery_with_keywordContext {
	var p = new(Expression_subquery_with_keywordContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_expression_subquery_with_keyword

	return p
}

func (s *Expression_subquery_with_keywordContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_subquery_with_keywordContext) ARRAY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserARRAY_SYMBOL, 0)
}

func (s *Expression_subquery_with_keywordContext) Parenthesized_query() IParenthesized_queryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesized_queryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesized_queryContext)
}

func (s *Expression_subquery_with_keywordContext) EXISTS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXISTS_SYMBOL, 0)
}

func (s *Expression_subquery_with_keywordContext) Hint() IHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHintContext)
}

func (s *Expression_subquery_with_keywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_subquery_with_keywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expression_subquery_with_keywordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterExpression_subquery_with_keyword(s)
	}
}

func (s *Expression_subquery_with_keywordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitExpression_subquery_with_keyword(s)
	}
}

func (s *Expression_subquery_with_keywordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitExpression_subquery_with_keyword(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Expression_subquery_with_keyword() (localctx IExpression_subquery_with_keywordContext) {
	localctx = NewExpression_subquery_with_keywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 852, GoogleSQLParserRULE_expression_subquery_with_keyword)
	var _la int

	p.SetState(5303)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserARRAY_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5296)
			p.Match(GoogleSQLParserARRAY_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5297)
			p.Parenthesized_query()
		}

	case GoogleSQLParserEXISTS_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5298)
			p.Match(GoogleSQLParserEXISTS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(5300)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAT_SYMBOL {
			{
				p.SetState(5299)
				p.Hint()
			}

		}
		{
			p.SetState(5302)
			p.Parenthesized_query()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStruct_constructorContext is an interface to support dynamic dispatch.
type IStruct_constructorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Struct_constructor_prefix_with_keyword() IStruct_constructor_prefix_with_keywordContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Struct_constructor_prefix_with_keyword_no_arg() IStruct_constructor_prefix_with_keyword_no_argContext
	Struct_constructor_prefix_without_keyword() IStruct_constructor_prefix_without_keywordContext

	// IsStruct_constructorContext differentiates from other interfaces.
	IsStruct_constructorContext()
}

type Struct_constructorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStruct_constructorContext() *Struct_constructorContext {
	var p = new(Struct_constructorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_constructor
	return p
}

func InitEmptyStruct_constructorContext(p *Struct_constructorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_constructor
}

func (*Struct_constructorContext) IsStruct_constructorContext() {}

func NewStruct_constructorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Struct_constructorContext {
	var p = new(Struct_constructorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_struct_constructor

	return p
}

func (s *Struct_constructorContext) GetParser() antlr.Parser { return s.parser }

func (s *Struct_constructorContext) Struct_constructor_prefix_with_keyword() IStruct_constructor_prefix_with_keywordContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_constructor_prefix_with_keywordContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_constructor_prefix_with_keywordContext)
}

func (s *Struct_constructorContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Struct_constructorContext) Struct_constructor_prefix_with_keyword_no_arg() IStruct_constructor_prefix_with_keyword_no_argContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_constructor_prefix_with_keyword_no_argContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_constructor_prefix_with_keyword_no_argContext)
}

func (s *Struct_constructorContext) Struct_constructor_prefix_without_keyword() IStruct_constructor_prefix_without_keywordContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_constructor_prefix_without_keywordContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_constructor_prefix_without_keywordContext)
}

func (s *Struct_constructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Struct_constructorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Struct_constructorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStruct_constructor(s)
	}
}

func (s *Struct_constructorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStruct_constructor(s)
	}
}

func (s *Struct_constructorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStruct_constructor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Struct_constructor() (localctx IStruct_constructorContext) {
	localctx = NewStruct_constructorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 854, GoogleSQLParserRULE_struct_constructor)
	p.SetState(5314)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 641, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5305)
			p.Struct_constructor_prefix_with_keyword()
		}
		{
			p.SetState(5306)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5308)
			p.Struct_constructor_prefix_with_keyword_no_arg()
		}
		{
			p.SetState(5309)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5311)
			p.Struct_constructor_prefix_without_keyword()
		}
		{
			p.SetState(5312)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStruct_constructor_prefix_with_keywordContext is an interface to support dynamic dispatch.
type IStruct_constructor_prefix_with_keywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Struct_constructor_prefix_with_keyword_no_arg() IStruct_constructor_prefix_with_keyword_no_argContext
	AllStruct_constructor_arg() []IStruct_constructor_argContext
	Struct_constructor_arg(i int) IStruct_constructor_argContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsStruct_constructor_prefix_with_keywordContext differentiates from other interfaces.
	IsStruct_constructor_prefix_with_keywordContext()
}

type Struct_constructor_prefix_with_keywordContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStruct_constructor_prefix_with_keywordContext() *Struct_constructor_prefix_with_keywordContext {
	var p = new(Struct_constructor_prefix_with_keywordContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_constructor_prefix_with_keyword
	return p
}

func InitEmptyStruct_constructor_prefix_with_keywordContext(p *Struct_constructor_prefix_with_keywordContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_constructor_prefix_with_keyword
}

func (*Struct_constructor_prefix_with_keywordContext) IsStruct_constructor_prefix_with_keywordContext() {
}

func NewStruct_constructor_prefix_with_keywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Struct_constructor_prefix_with_keywordContext {
	var p = new(Struct_constructor_prefix_with_keywordContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_struct_constructor_prefix_with_keyword

	return p
}

func (s *Struct_constructor_prefix_with_keywordContext) GetParser() antlr.Parser { return s.parser }

func (s *Struct_constructor_prefix_with_keywordContext) Struct_constructor_prefix_with_keyword_no_arg() IStruct_constructor_prefix_with_keyword_no_argContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_constructor_prefix_with_keyword_no_argContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_constructor_prefix_with_keyword_no_argContext)
}

func (s *Struct_constructor_prefix_with_keywordContext) AllStruct_constructor_arg() []IStruct_constructor_argContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStruct_constructor_argContext); ok {
			len++
		}
	}

	tst := make([]IStruct_constructor_argContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStruct_constructor_argContext); ok {
			tst[i] = t.(IStruct_constructor_argContext)
			i++
		}
	}

	return tst
}

func (s *Struct_constructor_prefix_with_keywordContext) Struct_constructor_arg(i int) IStruct_constructor_argContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_constructor_argContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_constructor_argContext)
}

func (s *Struct_constructor_prefix_with_keywordContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Struct_constructor_prefix_with_keywordContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Struct_constructor_prefix_with_keywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Struct_constructor_prefix_with_keywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Struct_constructor_prefix_with_keywordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStruct_constructor_prefix_with_keyword(s)
	}
}

func (s *Struct_constructor_prefix_with_keywordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStruct_constructor_prefix_with_keyword(s)
	}
}

func (s *Struct_constructor_prefix_with_keywordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStruct_constructor_prefix_with_keyword(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Struct_constructor_prefix_with_keyword() (localctx IStruct_constructor_prefix_with_keywordContext) {
	localctx = NewStruct_constructor_prefix_with_keywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 856, GoogleSQLParserRULE_struct_constructor_prefix_with_keyword)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5316)
		p.Struct_constructor_prefix_with_keyword_no_arg()
	}
	{
		p.SetState(5317)
		p.Struct_constructor_arg()
	}
	p.SetState(5322)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(5318)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5319)
			p.Struct_constructor_arg()
		}

		p.SetState(5324)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStruct_constructor_argContext is an interface to support dynamic dispatch.
type IStruct_constructor_argContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	Opt_as_alias_with_required_as() IOpt_as_alias_with_required_asContext

	// IsStruct_constructor_argContext differentiates from other interfaces.
	IsStruct_constructor_argContext()
}

type Struct_constructor_argContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStruct_constructor_argContext() *Struct_constructor_argContext {
	var p = new(Struct_constructor_argContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_constructor_arg
	return p
}

func InitEmptyStruct_constructor_argContext(p *Struct_constructor_argContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_constructor_arg
}

func (*Struct_constructor_argContext) IsStruct_constructor_argContext() {}

func NewStruct_constructor_argContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Struct_constructor_argContext {
	var p = new(Struct_constructor_argContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_struct_constructor_arg

	return p
}

func (s *Struct_constructor_argContext) GetParser() antlr.Parser { return s.parser }

func (s *Struct_constructor_argContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Struct_constructor_argContext) Opt_as_alias_with_required_as() IOpt_as_alias_with_required_asContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_as_alias_with_required_asContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_as_alias_with_required_asContext)
}

func (s *Struct_constructor_argContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Struct_constructor_argContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Struct_constructor_argContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStruct_constructor_arg(s)
	}
}

func (s *Struct_constructor_argContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStruct_constructor_arg(s)
	}
}

func (s *Struct_constructor_argContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStruct_constructor_arg(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Struct_constructor_arg() (localctx IStruct_constructor_argContext) {
	localctx = NewStruct_constructor_argContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 858, GoogleSQLParserRULE_struct_constructor_arg)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5325)
		p.expression(0)
	}
	p.SetState(5327)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAS_SYMBOL {
		{
			p.SetState(5326)
			p.Opt_as_alias_with_required_as()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStruct_constructor_prefix_without_keywordContext is an interface to support dynamic dispatch.
type IStruct_constructor_prefix_without_keywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsStruct_constructor_prefix_without_keywordContext differentiates from other interfaces.
	IsStruct_constructor_prefix_without_keywordContext()
}

type Struct_constructor_prefix_without_keywordContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStruct_constructor_prefix_without_keywordContext() *Struct_constructor_prefix_without_keywordContext {
	var p = new(Struct_constructor_prefix_without_keywordContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_constructor_prefix_without_keyword
	return p
}

func InitEmptyStruct_constructor_prefix_without_keywordContext(p *Struct_constructor_prefix_without_keywordContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_constructor_prefix_without_keyword
}

func (*Struct_constructor_prefix_without_keywordContext) IsStruct_constructor_prefix_without_keywordContext() {
}

func NewStruct_constructor_prefix_without_keywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Struct_constructor_prefix_without_keywordContext {
	var p = new(Struct_constructor_prefix_without_keywordContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_struct_constructor_prefix_without_keyword

	return p
}

func (s *Struct_constructor_prefix_without_keywordContext) GetParser() antlr.Parser { return s.parser }

func (s *Struct_constructor_prefix_without_keywordContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Struct_constructor_prefix_without_keywordContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *Struct_constructor_prefix_without_keywordContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Struct_constructor_prefix_without_keywordContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Struct_constructor_prefix_without_keywordContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Struct_constructor_prefix_without_keywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Struct_constructor_prefix_without_keywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Struct_constructor_prefix_without_keywordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStruct_constructor_prefix_without_keyword(s)
	}
}

func (s *Struct_constructor_prefix_without_keywordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStruct_constructor_prefix_without_keyword(s)
	}
}

func (s *Struct_constructor_prefix_without_keywordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStruct_constructor_prefix_without_keyword(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Struct_constructor_prefix_without_keyword() (localctx IStruct_constructor_prefix_without_keywordContext) {
	localctx = NewStruct_constructor_prefix_without_keywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 860, GoogleSQLParserRULE_struct_constructor_prefix_without_keyword)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5329)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5330)
		p.expression(0)
	}
	{
		p.SetState(5331)
		p.Match(GoogleSQLParserCOMMA_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5332)
		p.expression(0)
	}
	p.SetState(5337)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(5333)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5334)
			p.expression(0)
		}

		p.SetState(5339)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStruct_constructor_prefix_with_keyword_no_argContext is an interface to support dynamic dispatch.
type IStruct_constructor_prefix_with_keyword_no_argContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Struct_type() IStruct_typeContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	STRUCT_SYMBOL() antlr.TerminalNode

	// IsStruct_constructor_prefix_with_keyword_no_argContext differentiates from other interfaces.
	IsStruct_constructor_prefix_with_keyword_no_argContext()
}

type Struct_constructor_prefix_with_keyword_no_argContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStruct_constructor_prefix_with_keyword_no_argContext() *Struct_constructor_prefix_with_keyword_no_argContext {
	var p = new(Struct_constructor_prefix_with_keyword_no_argContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_constructor_prefix_with_keyword_no_arg
	return p
}

func InitEmptyStruct_constructor_prefix_with_keyword_no_argContext(p *Struct_constructor_prefix_with_keyword_no_argContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_constructor_prefix_with_keyword_no_arg
}

func (*Struct_constructor_prefix_with_keyword_no_argContext) IsStruct_constructor_prefix_with_keyword_no_argContext() {
}

func NewStruct_constructor_prefix_with_keyword_no_argContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Struct_constructor_prefix_with_keyword_no_argContext {
	var p = new(Struct_constructor_prefix_with_keyword_no_argContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_struct_constructor_prefix_with_keyword_no_arg

	return p
}

func (s *Struct_constructor_prefix_with_keyword_no_argContext) GetParser() antlr.Parser {
	return s.parser
}

func (s *Struct_constructor_prefix_with_keyword_no_argContext) Struct_type() IStruct_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_typeContext)
}

func (s *Struct_constructor_prefix_with_keyword_no_argContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Struct_constructor_prefix_with_keyword_no_argContext) STRUCT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTRUCT_SYMBOL, 0)
}

func (s *Struct_constructor_prefix_with_keyword_no_argContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Struct_constructor_prefix_with_keyword_no_argContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Struct_constructor_prefix_with_keyword_no_argContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStruct_constructor_prefix_with_keyword_no_arg(s)
	}
}

func (s *Struct_constructor_prefix_with_keyword_no_argContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStruct_constructor_prefix_with_keyword_no_arg(s)
	}
}

func (s *Struct_constructor_prefix_with_keyword_no_argContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStruct_constructor_prefix_with_keyword_no_arg(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Struct_constructor_prefix_with_keyword_no_arg() (localctx IStruct_constructor_prefix_with_keyword_no_argContext) {
	localctx = NewStruct_constructor_prefix_with_keyword_no_argContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 862, GoogleSQLParserRULE_struct_constructor_prefix_with_keyword_no_arg)
	p.SetState(5345)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 645, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5340)
			p.Struct_type()
		}
		{
			p.SetState(5341)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5343)
			p.Match(GoogleSQLParserSTRUCT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5344)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInterval_expressionContext is an interface to support dynamic dispatch.
type IInterval_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	INTERVAL_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	TO_SYMBOL() antlr.TerminalNode

	// IsInterval_expressionContext differentiates from other interfaces.
	IsInterval_expressionContext()
}

type Interval_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterval_expressionContext() *Interval_expressionContext {
	var p = new(Interval_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_interval_expression
	return p
}

func InitEmptyInterval_expressionContext(p *Interval_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_interval_expression
}

func (*Interval_expressionContext) IsInterval_expressionContext() {}

func NewInterval_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Interval_expressionContext {
	var p = new(Interval_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_interval_expression

	return p
}

func (s *Interval_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Interval_expressionContext) INTERVAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINTERVAL_SYMBOL, 0)
}

func (s *Interval_expressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Interval_expressionContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Interval_expressionContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Interval_expressionContext) TO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTO_SYMBOL, 0)
}

func (s *Interval_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Interval_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Interval_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterInterval_expression(s)
	}
}

func (s *Interval_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitInterval_expression(s)
	}
}

func (s *Interval_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitInterval_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Interval_expression() (localctx IInterval_expressionContext) {
	localctx = NewInterval_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 864, GoogleSQLParserRULE_interval_expression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5347)
		p.Match(GoogleSQLParserINTERVAL_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5348)
		p.expression(0)
	}
	{
		p.SetState(5349)
		p.Identifier()
	}
	p.SetState(5352)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 646, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5350)
			p.Match(GoogleSQLParserTO_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5351)
			p.Identifier()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunction_call_expression_with_clausesContext is an interface to support dynamic dispatch.
type IFunction_call_expression_with_clausesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Path_expression() IPath_expressionContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Function_call_expression_with_clauses_suffix() IFunction_call_expression_with_clauses_suffixContext
	DISTINCT_SYMBOL() antlr.TerminalNode
	Function_name_from_keyword() IFunction_name_from_keywordContext

	// IsFunction_call_expression_with_clausesContext differentiates from other interfaces.
	IsFunction_call_expression_with_clausesContext()
}

type Function_call_expression_with_clausesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_call_expression_with_clausesContext() *Function_call_expression_with_clausesContext {
	var p = new(Function_call_expression_with_clausesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_call_expression_with_clauses
	return p
}

func InitEmptyFunction_call_expression_with_clausesContext(p *Function_call_expression_with_clausesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_call_expression_with_clauses
}

func (*Function_call_expression_with_clausesContext) IsFunction_call_expression_with_clausesContext() {
}

func NewFunction_call_expression_with_clausesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_call_expression_with_clausesContext {
	var p = new(Function_call_expression_with_clausesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_function_call_expression_with_clauses

	return p
}

func (s *Function_call_expression_with_clausesContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_call_expression_with_clausesContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Function_call_expression_with_clausesContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Function_call_expression_with_clausesContext) Function_call_expression_with_clauses_suffix() IFunction_call_expression_with_clauses_suffixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunction_call_expression_with_clauses_suffixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunction_call_expression_with_clauses_suffixContext)
}

func (s *Function_call_expression_with_clausesContext) DISTINCT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDISTINCT_SYMBOL, 0)
}

func (s *Function_call_expression_with_clausesContext) Function_name_from_keyword() IFunction_name_from_keywordContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunction_name_from_keywordContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunction_name_from_keywordContext)
}

func (s *Function_call_expression_with_clausesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_call_expression_with_clausesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_call_expression_with_clausesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFunction_call_expression_with_clauses(s)
	}
}

func (s *Function_call_expression_with_clausesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFunction_call_expression_with_clauses(s)
	}
}

func (s *Function_call_expression_with_clausesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFunction_call_expression_with_clauses(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Function_call_expression_with_clauses() (localctx IFunction_call_expression_with_clausesContext) {
	localctx = NewFunction_call_expression_with_clausesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 866, GoogleSQLParserRULE_function_call_expression_with_clauses)
	var _la int

	p.SetState(5365)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserCONFLICT_SYMBOL, GoogleSQLParserDESTINATION_SYMBOL, GoogleSQLParserPROPERTY_SYMBOL, GoogleSQLParserGRAPH_SYMBOL, GoogleSQLParserNODE_SYMBOL, GoogleSQLParserPROPERTIES_SYMBOL, GoogleSQLParserLABEL_SYMBOL, GoogleSQLParserEDGE_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5354)
			p.Path_expression()
		}
		{
			p.SetState(5355)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(5357)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserDISTINCT_SYMBOL {
			{
				p.SetState(5356)
				p.Match(GoogleSQLParserDISTINCT_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(5359)
			p.Function_call_expression_with_clauses_suffix()
		}

	case GoogleSQLParserLEFT_SYMBOL, GoogleSQLParserRIGHT_SYMBOL, GoogleSQLParserRANGE_SYMBOL, GoogleSQLParserCOLLATE_SYMBOL, GoogleSQLParserIF_SYMBOL, GoogleSQLParserGROUPING_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5361)
			p.Function_name_from_keyword()
		}
		{
			p.SetState(5362)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5363)
			p.Function_call_expression_with_clauses_suffix()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunction_call_expression_with_clauses_suffixContext is an interface to support dynamic dispatch.
type IFunction_call_expression_with_clauses_suffixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Hint() IHintContext
	With_group_rows() IWith_group_rowsContext
	Over_clause() IOver_clauseContext
	Opt_having_or_group_by_modifier() IOpt_having_or_group_by_modifierContext
	Order_by_clause() IOrder_by_clauseContext
	Limit_offset_clause() ILimit_offset_clauseContext
	Opt_null_handling_modifier() IOpt_null_handling_modifierContext
	Clamped_between_modifier() IClamped_between_modifierContext
	With_report_modifier() IWith_report_modifierContext
	AllFunction_call_argument() []IFunction_call_argumentContext
	Function_call_argument(i int) IFunction_call_argumentContext
	MULTIPLY_OPERATOR() antlr.TerminalNode
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsFunction_call_expression_with_clauses_suffixContext differentiates from other interfaces.
	IsFunction_call_expression_with_clauses_suffixContext()
}

type Function_call_expression_with_clauses_suffixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_call_expression_with_clauses_suffixContext() *Function_call_expression_with_clauses_suffixContext {
	var p = new(Function_call_expression_with_clauses_suffixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_call_expression_with_clauses_suffix
	return p
}

func InitEmptyFunction_call_expression_with_clauses_suffixContext(p *Function_call_expression_with_clauses_suffixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_call_expression_with_clauses_suffix
}

func (*Function_call_expression_with_clauses_suffixContext) IsFunction_call_expression_with_clauses_suffixContext() {
}

func NewFunction_call_expression_with_clauses_suffixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_call_expression_with_clauses_suffixContext {
	var p = new(Function_call_expression_with_clauses_suffixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_function_call_expression_with_clauses_suffix

	return p
}

func (s *Function_call_expression_with_clauses_suffixContext) GetParser() antlr.Parser {
	return s.parser
}

func (s *Function_call_expression_with_clauses_suffixContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Function_call_expression_with_clauses_suffixContext) Hint() IHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHintContext)
}

func (s *Function_call_expression_with_clauses_suffixContext) With_group_rows() IWith_group_rowsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_group_rowsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_group_rowsContext)
}

func (s *Function_call_expression_with_clauses_suffixContext) Over_clause() IOver_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOver_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOver_clauseContext)
}

func (s *Function_call_expression_with_clauses_suffixContext) Opt_having_or_group_by_modifier() IOpt_having_or_group_by_modifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_having_or_group_by_modifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_having_or_group_by_modifierContext)
}

func (s *Function_call_expression_with_clauses_suffixContext) Order_by_clause() IOrder_by_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrder_by_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrder_by_clauseContext)
}

func (s *Function_call_expression_with_clauses_suffixContext) Limit_offset_clause() ILimit_offset_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILimit_offset_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILimit_offset_clauseContext)
}

func (s *Function_call_expression_with_clauses_suffixContext) Opt_null_handling_modifier() IOpt_null_handling_modifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_null_handling_modifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_null_handling_modifierContext)
}

func (s *Function_call_expression_with_clauses_suffixContext) Clamped_between_modifier() IClamped_between_modifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClamped_between_modifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClamped_between_modifierContext)
}

func (s *Function_call_expression_with_clauses_suffixContext) With_report_modifier() IWith_report_modifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_report_modifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_report_modifierContext)
}

func (s *Function_call_expression_with_clauses_suffixContext) AllFunction_call_argument() []IFunction_call_argumentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFunction_call_argumentContext); ok {
			len++
		}
	}

	tst := make([]IFunction_call_argumentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFunction_call_argumentContext); ok {
			tst[i] = t.(IFunction_call_argumentContext)
			i++
		}
	}

	return tst
}

func (s *Function_call_expression_with_clauses_suffixContext) Function_call_argument(i int) IFunction_call_argumentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunction_call_argumentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunction_call_argumentContext)
}

func (s *Function_call_expression_with_clauses_suffixContext) MULTIPLY_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMULTIPLY_OPERATOR, 0)
}

func (s *Function_call_expression_with_clauses_suffixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Function_call_expression_with_clauses_suffixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Function_call_expression_with_clauses_suffixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_call_expression_with_clauses_suffixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_call_expression_with_clauses_suffixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFunction_call_expression_with_clauses_suffix(s)
	}
}

func (s *Function_call_expression_with_clauses_suffixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFunction_call_expression_with_clauses_suffix(s)
	}
}

func (s *Function_call_expression_with_clauses_suffixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFunction_call_expression_with_clauses_suffix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Function_call_expression_with_clauses_suffix() (localctx IFunction_call_expression_with_clauses_suffixContext) {
	localctx = NewFunction_call_expression_with_clauses_suffixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 868, GoogleSQLParserRULE_function_call_expression_with_clauses_suffix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5407)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserRR_BRACKET_SYMBOL, GoogleSQLParserLIMIT_SYMBOL, GoogleSQLParserORDER_SYMBOL, GoogleSQLParserHAVING_SYMBOL:
		p.SetState(5368)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserHAVING_SYMBOL {
			{
				p.SetState(5367)
				p.Opt_having_or_group_by_modifier()
			}

		}
		p.SetState(5371)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserORDER_SYMBOL {
			{
				p.SetState(5370)
				p.Order_by_clause()
			}

		}
		p.SetState(5374)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserLIMIT_SYMBOL {
			{
				p.SetState(5373)
				p.Limit_offset_clause()
			}

		}
		{
			p.SetState(5376)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserPLUS_OPERATOR, GoogleSQLParserMINUS_OPERATOR, GoogleSQLParserMULTIPLY_OPERATOR, GoogleSQLParserBITWISE_NOT_OPERATOR, GoogleSQLParserRC_BRACKET_SYMBOL, GoogleSQLParserLR_BRACKET_SYMBOL, GoogleSQLParserLS_BRACKET_SYMBOL, GoogleSQLParserQUESTION_SYMBOL, GoogleSQLParserAT_SYMBOL, GoogleSQLParserATAT_SYMBOL, GoogleSQLParserSTRING_LITERAL, GoogleSQLParserBYTES_LITERAL, GoogleSQLParserFLOATING_POINT_LITERAL, GoogleSQLParserINTEGER_LITERAL, GoogleSQLParserARRAY_SYMBOL, GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserLEFT_SYMBOL, GoogleSQLParserNULL_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserRIGHT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSELECT_SYMBOL, GoogleSQLParserSTRUCT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserWITH_SYMBOL, GoogleSQLParserTRUE_SYMBOL, GoogleSQLParserFALSE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserNOT_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserRANGE_SYMBOL, GoogleSQLParserINTERVAL_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserNEW_SYMBOL, GoogleSQLParserCASE_SYMBOL, GoogleSQLParserCAST_SYMBOL, GoogleSQLParserEXTRACT_SYMBOL, GoogleSQLParserCOLLATE_SYMBOL, GoogleSQLParserIF_SYMBOL, GoogleSQLParserGROUPING_SYMBOL, GoogleSQLParserEXISTS_SYMBOL, GoogleSQLParserCONFLICT_SYMBOL, GoogleSQLParserDESTINATION_SYMBOL, GoogleSQLParserPROPERTY_SYMBOL, GoogleSQLParserGRAPH_SYMBOL, GoogleSQLParserNODE_SYMBOL, GoogleSQLParserPROPERTIES_SYMBOL, GoogleSQLParserLABEL_SYMBOL, GoogleSQLParserEDGE_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.SetState(5379)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case GoogleSQLParserPLUS_OPERATOR, GoogleSQLParserMINUS_OPERATOR, GoogleSQLParserBITWISE_NOT_OPERATOR, GoogleSQLParserRC_BRACKET_SYMBOL, GoogleSQLParserLR_BRACKET_SYMBOL, GoogleSQLParserLS_BRACKET_SYMBOL, GoogleSQLParserQUESTION_SYMBOL, GoogleSQLParserAT_SYMBOL, GoogleSQLParserATAT_SYMBOL, GoogleSQLParserSTRING_LITERAL, GoogleSQLParserBYTES_LITERAL, GoogleSQLParserFLOATING_POINT_LITERAL, GoogleSQLParserINTEGER_LITERAL, GoogleSQLParserARRAY_SYMBOL, GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserLEFT_SYMBOL, GoogleSQLParserNULL_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserRIGHT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSELECT_SYMBOL, GoogleSQLParserSTRUCT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserWITH_SYMBOL, GoogleSQLParserTRUE_SYMBOL, GoogleSQLParserFALSE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserNOT_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserRANGE_SYMBOL, GoogleSQLParserINTERVAL_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserNEW_SYMBOL, GoogleSQLParserCASE_SYMBOL, GoogleSQLParserCAST_SYMBOL, GoogleSQLParserEXTRACT_SYMBOL, GoogleSQLParserCOLLATE_SYMBOL, GoogleSQLParserIF_SYMBOL, GoogleSQLParserGROUPING_SYMBOL, GoogleSQLParserEXISTS_SYMBOL, GoogleSQLParserCONFLICT_SYMBOL, GoogleSQLParserDESTINATION_SYMBOL, GoogleSQLParserPROPERTY_SYMBOL, GoogleSQLParserGRAPH_SYMBOL, GoogleSQLParserNODE_SYMBOL, GoogleSQLParserPROPERTIES_SYMBOL, GoogleSQLParserLABEL_SYMBOL, GoogleSQLParserEDGE_SYMBOL, GoogleSQLParserIDENTIFIER:
			{
				p.SetState(5377)
				p.Function_call_argument()
			}

		case GoogleSQLParserMULTIPLY_OPERATOR:
			{
				p.SetState(5378)
				p.Match(GoogleSQLParserMULTIPLY_OPERATOR)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}
		p.SetState(5385)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == GoogleSQLParserCOMMA_SYMBOL {
			{
				p.SetState(5381)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(5382)
				p.Function_call_argument()
			}

			p.SetState(5387)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

		p.SetState(5389)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserIGNORE_SYMBOL || _la == GoogleSQLParserRESPECT_SYMBOL {
			{
				p.SetState(5388)
				p.Opt_null_handling_modifier()
			}

		}
		p.SetState(5392)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserHAVING_SYMBOL {
			{
				p.SetState(5391)
				p.Opt_having_or_group_by_modifier()
			}

		}
		p.SetState(5395)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserCLAMPED_SYMBOL {
			{
				p.SetState(5394)
				p.Clamped_between_modifier()
			}

		}
		p.SetState(5398)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserWITH_SYMBOL {
			{
				p.SetState(5397)
				p.With_report_modifier()
			}

		}
		p.SetState(5401)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserORDER_SYMBOL {
			{
				p.SetState(5400)
				p.Order_by_clause()
			}

		}
		p.SetState(5404)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserLIMIT_SYMBOL {
			{
				p.SetState(5403)
				p.Limit_offset_clause()
			}

		}
		{
			p.SetState(5406)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	p.SetState(5410)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 661, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5409)
			p.Hint()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(5413)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 662, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5412)
			p.With_group_rows()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(5416)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 663, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5415)
			p.Over_clause()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOver_clauseContext is an interface to support dynamic dispatch.
type IOver_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OVER_SYMBOL() antlr.TerminalNode
	Window_specification() IWindow_specificationContext

	// IsOver_clauseContext differentiates from other interfaces.
	IsOver_clauseContext()
}

type Over_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOver_clauseContext() *Over_clauseContext {
	var p = new(Over_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_over_clause
	return p
}

func InitEmptyOver_clauseContext(p *Over_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_over_clause
}

func (*Over_clauseContext) IsOver_clauseContext() {}

func NewOver_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Over_clauseContext {
	var p = new(Over_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_over_clause

	return p
}

func (s *Over_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Over_clauseContext) OVER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOVER_SYMBOL, 0)
}

func (s *Over_clauseContext) Window_specification() IWindow_specificationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindow_specificationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindow_specificationContext)
}

func (s *Over_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Over_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Over_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOver_clause(s)
	}
}

func (s *Over_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOver_clause(s)
	}
}

func (s *Over_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOver_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Over_clause() (localctx IOver_clauseContext) {
	localctx = NewOver_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 870, GoogleSQLParserRULE_over_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5418)
		p.Match(GoogleSQLParserOVER_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5419)
		p.Window_specification()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWindow_specificationContext is an interface to support dynamic dispatch.
type IWindow_specificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Partition_by_clause() IPartition_by_clauseContext
	Order_by_clause() IOrder_by_clauseContext
	Opt_window_frame_clause() IOpt_window_frame_clauseContext

	// IsWindow_specificationContext differentiates from other interfaces.
	IsWindow_specificationContext()
}

type Window_specificationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_specificationContext() *Window_specificationContext {
	var p = new(Window_specificationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_window_specification
	return p
}

func InitEmptyWindow_specificationContext(p *Window_specificationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_window_specification
}

func (*Window_specificationContext) IsWindow_specificationContext() {}

func NewWindow_specificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_specificationContext {
	var p = new(Window_specificationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_window_specification

	return p
}

func (s *Window_specificationContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_specificationContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Window_specificationContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Window_specificationContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Window_specificationContext) Partition_by_clause() IPartition_by_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartition_by_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartition_by_clauseContext)
}

func (s *Window_specificationContext) Order_by_clause() IOrder_by_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrder_by_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrder_by_clauseContext)
}

func (s *Window_specificationContext) Opt_window_frame_clause() IOpt_window_frame_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_window_frame_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_window_frame_clauseContext)
}

func (s *Window_specificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_specificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_specificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWindow_specification(s)
	}
}

func (s *Window_specificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWindow_specification(s)
	}
}

func (s *Window_specificationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWindow_specification(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Window_specification() (localctx IWindow_specificationContext) {
	localctx = NewWindow_specificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 872, GoogleSQLParserRULE_window_specification)
	var _la int

	p.SetState(5436)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserCONFLICT_SYMBOL, GoogleSQLParserDESTINATION_SYMBOL, GoogleSQLParserPROPERTY_SYMBOL, GoogleSQLParserGRAPH_SYMBOL, GoogleSQLParserNODE_SYMBOL, GoogleSQLParserPROPERTIES_SYMBOL, GoogleSQLParserLABEL_SYMBOL, GoogleSQLParserEDGE_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5421)
			p.Identifier()
		}

	case GoogleSQLParserLR_BRACKET_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5422)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(5424)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64((_la-72)) & ^0x3f) == 0 && ((int64(1)<<(_la-72))&-106523215214079) != 0) || ((int64((_la-136)) & ^0x3f) == 0 && ((int64(1)<<(_la-136))&-1) != 0) || ((int64((_la-200)) & ^0x3f) == 0 && ((int64(1)<<(_la-200))&-36028797018963969) != 0) || ((int64((_la-264)) & ^0x3f) == 0 && ((int64(1)<<(_la-264))&536870911) != 0) || ((int64((_la-338)) & ^0x3f) == 0 && ((int64(1)<<(_la-338))&8161) != 0) {
			{
				p.SetState(5423)
				p.Identifier()
			}

		}
		p.SetState(5427)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserPARTITION_SYMBOL {
			{
				p.SetState(5426)
				p.Partition_by_clause()
			}

		}
		p.SetState(5430)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserORDER_SYMBOL {
			{
				p.SetState(5429)
				p.Order_by_clause()
			}

		}
		p.SetState(5433)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserRANGE_SYMBOL || _la == GoogleSQLParserROWS_SYMBOL {
			{
				p.SetState(5432)
				p.Opt_window_frame_clause()
			}

		}
		{
			p.SetState(5435)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_window_frame_clauseContext is an interface to support dynamic dispatch.
type IOpt_window_frame_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Frame_unit() IFrame_unitContext
	BETWEEN_SYMBOL() antlr.TerminalNode
	AllWindow_frame_bound() []IWindow_frame_boundContext
	Window_frame_bound(i int) IWindow_frame_boundContext
	AND_SYMBOL() antlr.TerminalNode

	// IsOpt_window_frame_clauseContext differentiates from other interfaces.
	IsOpt_window_frame_clauseContext()
}

type Opt_window_frame_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_window_frame_clauseContext() *Opt_window_frame_clauseContext {
	var p = new(Opt_window_frame_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_window_frame_clause
	return p
}

func InitEmptyOpt_window_frame_clauseContext(p *Opt_window_frame_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_window_frame_clause
}

func (*Opt_window_frame_clauseContext) IsOpt_window_frame_clauseContext() {}

func NewOpt_window_frame_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_window_frame_clauseContext {
	var p = new(Opt_window_frame_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_window_frame_clause

	return p
}

func (s *Opt_window_frame_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_window_frame_clauseContext) Frame_unit() IFrame_unitContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrame_unitContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrame_unitContext)
}

func (s *Opt_window_frame_clauseContext) BETWEEN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBETWEEN_SYMBOL, 0)
}

func (s *Opt_window_frame_clauseContext) AllWindow_frame_bound() []IWindow_frame_boundContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWindow_frame_boundContext); ok {
			len++
		}
	}

	tst := make([]IWindow_frame_boundContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWindow_frame_boundContext); ok {
			tst[i] = t.(IWindow_frame_boundContext)
			i++
		}
	}

	return tst
}

func (s *Opt_window_frame_clauseContext) Window_frame_bound(i int) IWindow_frame_boundContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindow_frame_boundContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindow_frame_boundContext)
}

func (s *Opt_window_frame_clauseContext) AND_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAND_SYMBOL, 0)
}

func (s *Opt_window_frame_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_window_frame_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_window_frame_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_window_frame_clause(s)
	}
}

func (s *Opt_window_frame_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_window_frame_clause(s)
	}
}

func (s *Opt_window_frame_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_window_frame_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_window_frame_clause() (localctx IOpt_window_frame_clauseContext) {
	localctx = NewOpt_window_frame_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 874, GoogleSQLParserRULE_opt_window_frame_clause)
	p.SetState(5447)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 669, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5438)
			p.Frame_unit()
		}
		{
			p.SetState(5439)
			p.Match(GoogleSQLParserBETWEEN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5440)
			p.Window_frame_bound()
		}
		{
			p.SetState(5441)
			p.Match(GoogleSQLParserAND_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5442)
			p.Window_frame_bound()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5444)
			p.Frame_unit()
		}
		{
			p.SetState(5445)
			p.Window_frame_bound()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWindow_frame_boundContext is an interface to support dynamic dispatch.
type IWindow_frame_boundContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UNBOUNDED_SYMBOL() antlr.TerminalNode
	Preceding_or_following() IPreceding_or_followingContext
	CURRENT_SYMBOL() antlr.TerminalNode
	ROW_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsWindow_frame_boundContext differentiates from other interfaces.
	IsWindow_frame_boundContext()
}

type Window_frame_boundContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_frame_boundContext() *Window_frame_boundContext {
	var p = new(Window_frame_boundContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_window_frame_bound
	return p
}

func InitEmptyWindow_frame_boundContext(p *Window_frame_boundContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_window_frame_bound
}

func (*Window_frame_boundContext) IsWindow_frame_boundContext() {}

func NewWindow_frame_boundContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_frame_boundContext {
	var p = new(Window_frame_boundContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_window_frame_bound

	return p
}

func (s *Window_frame_boundContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_frame_boundContext) UNBOUNDED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNBOUNDED_SYMBOL, 0)
}

func (s *Window_frame_boundContext) Preceding_or_following() IPreceding_or_followingContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPreceding_or_followingContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPreceding_or_followingContext)
}

func (s *Window_frame_boundContext) CURRENT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCURRENT_SYMBOL, 0)
}

func (s *Window_frame_boundContext) ROW_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserROW_SYMBOL, 0)
}

func (s *Window_frame_boundContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Window_frame_boundContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_frame_boundContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_frame_boundContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWindow_frame_bound(s)
	}
}

func (s *Window_frame_boundContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWindow_frame_bound(s)
	}
}

func (s *Window_frame_boundContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWindow_frame_bound(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Window_frame_bound() (localctx IWindow_frame_boundContext) {
	localctx = NewWindow_frame_boundContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 876, GoogleSQLParserRULE_window_frame_bound)
	p.SetState(5456)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserUNBOUNDED_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5449)
			p.Match(GoogleSQLParserUNBOUNDED_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5450)
			p.Preceding_or_following()
		}

	case GoogleSQLParserCURRENT_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5451)
			p.Match(GoogleSQLParserCURRENT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5452)
			p.Match(GoogleSQLParserROW_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserPLUS_OPERATOR, GoogleSQLParserMINUS_OPERATOR, GoogleSQLParserBITWISE_NOT_OPERATOR, GoogleSQLParserRC_BRACKET_SYMBOL, GoogleSQLParserLR_BRACKET_SYMBOL, GoogleSQLParserLS_BRACKET_SYMBOL, GoogleSQLParserQUESTION_SYMBOL, GoogleSQLParserAT_SYMBOL, GoogleSQLParserATAT_SYMBOL, GoogleSQLParserSTRING_LITERAL, GoogleSQLParserBYTES_LITERAL, GoogleSQLParserFLOATING_POINT_LITERAL, GoogleSQLParserINTEGER_LITERAL, GoogleSQLParserARRAY_SYMBOL, GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserLEFT_SYMBOL, GoogleSQLParserNULL_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserRIGHT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSTRUCT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserWITH_SYMBOL, GoogleSQLParserTRUE_SYMBOL, GoogleSQLParserFALSE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserNOT_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserRANGE_SYMBOL, GoogleSQLParserINTERVAL_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserNEW_SYMBOL, GoogleSQLParserCASE_SYMBOL, GoogleSQLParserCAST_SYMBOL, GoogleSQLParserEXTRACT_SYMBOL, GoogleSQLParserCOLLATE_SYMBOL, GoogleSQLParserIF_SYMBOL, GoogleSQLParserGROUPING_SYMBOL, GoogleSQLParserEXISTS_SYMBOL, GoogleSQLParserCONFLICT_SYMBOL, GoogleSQLParserDESTINATION_SYMBOL, GoogleSQLParserPROPERTY_SYMBOL, GoogleSQLParserGRAPH_SYMBOL, GoogleSQLParserNODE_SYMBOL, GoogleSQLParserPROPERTIES_SYMBOL, GoogleSQLParserLABEL_SYMBOL, GoogleSQLParserEDGE_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5453)
			p.expression(0)
		}
		{
			p.SetState(5454)
			p.Preceding_or_following()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPreceding_or_followingContext is an interface to support dynamic dispatch.
type IPreceding_or_followingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PRECEDING_SYMBOL() antlr.TerminalNode
	FOLLOWING_SYMBOL() antlr.TerminalNode

	// IsPreceding_or_followingContext differentiates from other interfaces.
	IsPreceding_or_followingContext()
}

type Preceding_or_followingContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPreceding_or_followingContext() *Preceding_or_followingContext {
	var p = new(Preceding_or_followingContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_preceding_or_following
	return p
}

func InitEmptyPreceding_or_followingContext(p *Preceding_or_followingContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_preceding_or_following
}

func (*Preceding_or_followingContext) IsPreceding_or_followingContext() {}

func NewPreceding_or_followingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Preceding_or_followingContext {
	var p = new(Preceding_or_followingContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_preceding_or_following

	return p
}

func (s *Preceding_or_followingContext) GetParser() antlr.Parser { return s.parser }

func (s *Preceding_or_followingContext) PRECEDING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPRECEDING_SYMBOL, 0)
}

func (s *Preceding_or_followingContext) FOLLOWING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFOLLOWING_SYMBOL, 0)
}

func (s *Preceding_or_followingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Preceding_or_followingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Preceding_or_followingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPreceding_or_following(s)
	}
}

func (s *Preceding_or_followingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPreceding_or_following(s)
	}
}

func (s *Preceding_or_followingContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPreceding_or_following(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Preceding_or_following() (localctx IPreceding_or_followingContext) {
	localctx = NewPreceding_or_followingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 878, GoogleSQLParserRULE_preceding_or_following)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5458)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserPRECEDING_SYMBOL || _la == GoogleSQLParserFOLLOWING_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFrame_unitContext is an interface to support dynamic dispatch.
type IFrame_unitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ROWS_SYMBOL() antlr.TerminalNode
	RANGE_SYMBOL() antlr.TerminalNode

	// IsFrame_unitContext differentiates from other interfaces.
	IsFrame_unitContext()
}

type Frame_unitContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrame_unitContext() *Frame_unitContext {
	var p = new(Frame_unitContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_frame_unit
	return p
}

func InitEmptyFrame_unitContext(p *Frame_unitContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_frame_unit
}

func (*Frame_unitContext) IsFrame_unitContext() {}

func NewFrame_unitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Frame_unitContext {
	var p = new(Frame_unitContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_frame_unit

	return p
}

func (s *Frame_unitContext) GetParser() antlr.Parser { return s.parser }

func (s *Frame_unitContext) ROWS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserROWS_SYMBOL, 0)
}

func (s *Frame_unitContext) RANGE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRANGE_SYMBOL, 0)
}

func (s *Frame_unitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Frame_unitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Frame_unitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFrame_unit(s)
	}
}

func (s *Frame_unitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFrame_unit(s)
	}
}

func (s *Frame_unitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFrame_unit(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Frame_unit() (localctx IFrame_unitContext) {
	localctx = NewFrame_unitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 880, GoogleSQLParserRULE_frame_unit)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5460)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserRANGE_SYMBOL || _la == GoogleSQLParserROWS_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPartition_by_clauseContext is an interface to support dynamic dispatch.
type IPartition_by_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Partition_by_clause_prefix() IPartition_by_clause_prefixContext

	// IsPartition_by_clauseContext differentiates from other interfaces.
	IsPartition_by_clauseContext()
}

type Partition_by_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartition_by_clauseContext() *Partition_by_clauseContext {
	var p = new(Partition_by_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_partition_by_clause
	return p
}

func InitEmptyPartition_by_clauseContext(p *Partition_by_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_partition_by_clause
}

func (*Partition_by_clauseContext) IsPartition_by_clauseContext() {}

func NewPartition_by_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Partition_by_clauseContext {
	var p = new(Partition_by_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_partition_by_clause

	return p
}

func (s *Partition_by_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Partition_by_clauseContext) Partition_by_clause_prefix() IPartition_by_clause_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartition_by_clause_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartition_by_clause_prefixContext)
}

func (s *Partition_by_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Partition_by_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Partition_by_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPartition_by_clause(s)
	}
}

func (s *Partition_by_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPartition_by_clause(s)
	}
}

func (s *Partition_by_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPartition_by_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Partition_by_clause() (localctx IPartition_by_clauseContext) {
	localctx = NewPartition_by_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 882, GoogleSQLParserRULE_partition_by_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5462)
		p.Partition_by_clause_prefix()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPartition_by_clause_prefixContext is an interface to support dynamic dispatch.
type IPartition_by_clause_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PARTITION_SYMBOL() antlr.TerminalNode
	BY_SYMBOL() antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	Hint() IHintContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsPartition_by_clause_prefixContext differentiates from other interfaces.
	IsPartition_by_clause_prefixContext()
}

type Partition_by_clause_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartition_by_clause_prefixContext() *Partition_by_clause_prefixContext {
	var p = new(Partition_by_clause_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_partition_by_clause_prefix
	return p
}

func InitEmptyPartition_by_clause_prefixContext(p *Partition_by_clause_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_partition_by_clause_prefix
}

func (*Partition_by_clause_prefixContext) IsPartition_by_clause_prefixContext() {}

func NewPartition_by_clause_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Partition_by_clause_prefixContext {
	var p = new(Partition_by_clause_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_partition_by_clause_prefix

	return p
}

func (s *Partition_by_clause_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Partition_by_clause_prefixContext) PARTITION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPARTITION_SYMBOL, 0)
}

func (s *Partition_by_clause_prefixContext) BY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBY_SYMBOL, 0)
}

func (s *Partition_by_clause_prefixContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *Partition_by_clause_prefixContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Partition_by_clause_prefixContext) Hint() IHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHintContext)
}

func (s *Partition_by_clause_prefixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Partition_by_clause_prefixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Partition_by_clause_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Partition_by_clause_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Partition_by_clause_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPartition_by_clause_prefix(s)
	}
}

func (s *Partition_by_clause_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPartition_by_clause_prefix(s)
	}
}

func (s *Partition_by_clause_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPartition_by_clause_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Partition_by_clause_prefix() (localctx IPartition_by_clause_prefixContext) {
	localctx = NewPartition_by_clause_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 884, GoogleSQLParserRULE_partition_by_clause_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5464)
		p.Match(GoogleSQLParserPARTITION_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(5466)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAT_SYMBOL {
		{
			p.SetState(5465)
			p.Hint()
		}

	}
	{
		p.SetState(5468)
		p.Match(GoogleSQLParserBY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5469)
		p.expression(0)
	}
	p.SetState(5474)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(5470)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5471)
			p.expression(0)
		}

		p.SetState(5476)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWith_group_rowsContext is an interface to support dynamic dispatch.
type IWith_group_rowsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WITH_SYMBOL() antlr.TerminalNode
	GROUP_SYMBOL() antlr.TerminalNode
	ROWS_SYMBOL() antlr.TerminalNode

	// IsWith_group_rowsContext differentiates from other interfaces.
	IsWith_group_rowsContext()
}

type With_group_rowsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_group_rowsContext() *With_group_rowsContext {
	var p = new(With_group_rowsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_group_rows
	return p
}

func InitEmptyWith_group_rowsContext(p *With_group_rowsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_group_rows
}

func (*With_group_rowsContext) IsWith_group_rowsContext() {}

func NewWith_group_rowsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_group_rowsContext {
	var p = new(With_group_rowsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_with_group_rows

	return p
}

func (s *With_group_rowsContext) GetParser() antlr.Parser { return s.parser }

func (s *With_group_rowsContext) WITH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWITH_SYMBOL, 0)
}

func (s *With_group_rowsContext) GROUP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGROUP_SYMBOL, 0)
}

func (s *With_group_rowsContext) ROWS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserROWS_SYMBOL, 0)
}

func (s *With_group_rowsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_group_rowsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_group_rowsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWith_group_rows(s)
	}
}

func (s *With_group_rowsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWith_group_rows(s)
	}
}

func (s *With_group_rowsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWith_group_rows(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) With_group_rows() (localctx IWith_group_rowsContext) {
	localctx = NewWith_group_rowsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 886, GoogleSQLParserRULE_with_group_rows)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5477)
		p.Match(GoogleSQLParserWITH_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5478)
		p.Match(GoogleSQLParserGROUP_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5479)
		p.Match(GoogleSQLParserROWS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWith_report_modifierContext is an interface to support dynamic dispatch.
type IWith_report_modifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WITH_SYMBOL() antlr.TerminalNode
	REPORT_SYMBOL() antlr.TerminalNode
	With_report_format() IWith_report_formatContext

	// IsWith_report_modifierContext differentiates from other interfaces.
	IsWith_report_modifierContext()
}

type With_report_modifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_report_modifierContext() *With_report_modifierContext {
	var p = new(With_report_modifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_report_modifier
	return p
}

func InitEmptyWith_report_modifierContext(p *With_report_modifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_report_modifier
}

func (*With_report_modifierContext) IsWith_report_modifierContext() {}

func NewWith_report_modifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_report_modifierContext {
	var p = new(With_report_modifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_with_report_modifier

	return p
}

func (s *With_report_modifierContext) GetParser() antlr.Parser { return s.parser }

func (s *With_report_modifierContext) WITH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWITH_SYMBOL, 0)
}

func (s *With_report_modifierContext) REPORT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPORT_SYMBOL, 0)
}

func (s *With_report_modifierContext) With_report_format() IWith_report_formatContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_report_formatContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_report_formatContext)
}

func (s *With_report_modifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_report_modifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_report_modifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWith_report_modifier(s)
	}
}

func (s *With_report_modifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWith_report_modifier(s)
	}
}

func (s *With_report_modifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWith_report_modifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) With_report_modifier() (localctx IWith_report_modifierContext) {
	localctx = NewWith_report_modifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 888, GoogleSQLParserRULE_with_report_modifier)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5481)
		p.Match(GoogleSQLParserWITH_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5482)
		p.Match(GoogleSQLParserREPORT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5483)
		p.With_report_format()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IClamped_between_modifierContext is an interface to support dynamic dispatch.
type IClamped_between_modifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CLAMPED_SYMBOL() antlr.TerminalNode
	Expression_higher_prec_than_and() IExpression_higher_prec_than_andContext
	AND_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsClamped_between_modifierContext differentiates from other interfaces.
	IsClamped_between_modifierContext()
}

type Clamped_between_modifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClamped_between_modifierContext() *Clamped_between_modifierContext {
	var p = new(Clamped_between_modifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_clamped_between_modifier
	return p
}

func InitEmptyClamped_between_modifierContext(p *Clamped_between_modifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_clamped_between_modifier
}

func (*Clamped_between_modifierContext) IsClamped_between_modifierContext() {}

func NewClamped_between_modifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Clamped_between_modifierContext {
	var p = new(Clamped_between_modifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_clamped_between_modifier

	return p
}

func (s *Clamped_between_modifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Clamped_between_modifierContext) CLAMPED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCLAMPED_SYMBOL, 0)
}

func (s *Clamped_between_modifierContext) Expression_higher_prec_than_and() IExpression_higher_prec_than_andContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpression_higher_prec_than_andContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpression_higher_prec_than_andContext)
}

func (s *Clamped_between_modifierContext) AND_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAND_SYMBOL, 0)
}

func (s *Clamped_between_modifierContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Clamped_between_modifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Clamped_between_modifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Clamped_between_modifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterClamped_between_modifier(s)
	}
}

func (s *Clamped_between_modifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitClamped_between_modifier(s)
	}
}

func (s *Clamped_between_modifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitClamped_between_modifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Clamped_between_modifier() (localctx IClamped_between_modifierContext) {
	localctx = NewClamped_between_modifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 890, GoogleSQLParserRULE_clamped_between_modifier)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5485)
		p.Match(GoogleSQLParserCLAMPED_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5486)
		p.expression_higher_prec_than_and(0)
	}
	{
		p.SetState(5487)
		p.Match(GoogleSQLParserAND_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5488)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWith_report_formatContext is an interface to support dynamic dispatch.
type IWith_report_formatContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Options_list() IOptions_listContext

	// IsWith_report_formatContext differentiates from other interfaces.
	IsWith_report_formatContext()
}

type With_report_formatContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_report_formatContext() *With_report_formatContext {
	var p = new(With_report_formatContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_report_format
	return p
}

func InitEmptyWith_report_formatContext(p *With_report_formatContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_report_format
}

func (*With_report_formatContext) IsWith_report_formatContext() {}

func NewWith_report_formatContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_report_formatContext {
	var p = new(With_report_formatContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_with_report_format

	return p
}

func (s *With_report_formatContext) GetParser() antlr.Parser { return s.parser }

func (s *With_report_formatContext) Options_list() IOptions_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOptions_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOptions_listContext)
}

func (s *With_report_formatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_report_formatContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_report_formatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWith_report_format(s)
	}
}

func (s *With_report_formatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWith_report_format(s)
	}
}

func (s *With_report_formatContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWith_report_format(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) With_report_format() (localctx IWith_report_formatContext) {
	localctx = NewWith_report_formatContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 892, GoogleSQLParserRULE_with_report_format)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5490)
		p.Options_list()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOptions_listContext is an interface to support dynamic dispatch.
type IOptions_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Options_list_prefix() IOptions_list_prefixContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsOptions_listContext differentiates from other interfaces.
	IsOptions_listContext()
}

type Options_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOptions_listContext() *Options_listContext {
	var p = new(Options_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_options_list
	return p
}

func InitEmptyOptions_listContext(p *Options_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_options_list
}

func (*Options_listContext) IsOptions_listContext() {}

func NewOptions_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Options_listContext {
	var p = new(Options_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_options_list

	return p
}

func (s *Options_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Options_listContext) Options_list_prefix() IOptions_list_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOptions_list_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOptions_list_prefixContext)
}

func (s *Options_listContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Options_listContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Options_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Options_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Options_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOptions_list(s)
	}
}

func (s *Options_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOptions_list(s)
	}
}

func (s *Options_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOptions_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Options_list() (localctx IOptions_listContext) {
	localctx = NewOptions_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 894, GoogleSQLParserRULE_options_list)
	p.SetState(5497)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 673, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5492)
			p.Options_list_prefix()
		}
		{
			p.SetState(5493)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5495)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5496)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOptions_list_prefixContext is an interface to support dynamic dispatch.
type IOptions_list_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllOptions_entry() []IOptions_entryContext
	Options_entry(i int) IOptions_entryContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsOptions_list_prefixContext differentiates from other interfaces.
	IsOptions_list_prefixContext()
}

type Options_list_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOptions_list_prefixContext() *Options_list_prefixContext {
	var p = new(Options_list_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_options_list_prefix
	return p
}

func InitEmptyOptions_list_prefixContext(p *Options_list_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_options_list_prefix
}

func (*Options_list_prefixContext) IsOptions_list_prefixContext() {}

func NewOptions_list_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Options_list_prefixContext {
	var p = new(Options_list_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_options_list_prefix

	return p
}

func (s *Options_list_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Options_list_prefixContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Options_list_prefixContext) AllOptions_entry() []IOptions_entryContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOptions_entryContext); ok {
			len++
		}
	}

	tst := make([]IOptions_entryContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOptions_entryContext); ok {
			tst[i] = t.(IOptions_entryContext)
			i++
		}
	}

	return tst
}

func (s *Options_list_prefixContext) Options_entry(i int) IOptions_entryContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOptions_entryContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOptions_entryContext)
}

func (s *Options_list_prefixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Options_list_prefixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Options_list_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Options_list_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Options_list_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOptions_list_prefix(s)
	}
}

func (s *Options_list_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOptions_list_prefix(s)
	}
}

func (s *Options_list_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOptions_list_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Options_list_prefix() (localctx IOptions_list_prefixContext) {
	localctx = NewOptions_list_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 896, GoogleSQLParserRULE_options_list_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5499)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5500)
		p.Options_entry()
	}
	p.SetState(5505)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(5501)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5502)
			p.Options_entry()
		}

		p.SetState(5507)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOptions_entryContext is an interface to support dynamic dispatch.
type IOptions_entryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier_in_hints() IIdentifier_in_hintsContext
	Options_assignment_operator() IOptions_assignment_operatorContext
	Expression_or_proto() IExpression_or_protoContext

	// IsOptions_entryContext differentiates from other interfaces.
	IsOptions_entryContext()
}

type Options_entryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOptions_entryContext() *Options_entryContext {
	var p = new(Options_entryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_options_entry
	return p
}

func InitEmptyOptions_entryContext(p *Options_entryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_options_entry
}

func (*Options_entryContext) IsOptions_entryContext() {}

func NewOptions_entryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Options_entryContext {
	var p = new(Options_entryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_options_entry

	return p
}

func (s *Options_entryContext) GetParser() antlr.Parser { return s.parser }

func (s *Options_entryContext) Identifier_in_hints() IIdentifier_in_hintsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifier_in_hintsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifier_in_hintsContext)
}

func (s *Options_entryContext) Options_assignment_operator() IOptions_assignment_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOptions_assignment_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOptions_assignment_operatorContext)
}

func (s *Options_entryContext) Expression_or_proto() IExpression_or_protoContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpression_or_protoContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpression_or_protoContext)
}

func (s *Options_entryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Options_entryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Options_entryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOptions_entry(s)
	}
}

func (s *Options_entryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOptions_entry(s)
	}
}

func (s *Options_entryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOptions_entry(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Options_entry() (localctx IOptions_entryContext) {
	localctx = NewOptions_entryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 898, GoogleSQLParserRULE_options_entry)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5508)
		p.Identifier_in_hints()
	}
	{
		p.SetState(5509)
		p.Options_assignment_operator()
	}
	{
		p.SetState(5510)
		p.Expression_or_proto()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpression_or_protoContext is an interface to support dynamic dispatch.
type IExpression_or_protoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PROTO_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsExpression_or_protoContext differentiates from other interfaces.
	IsExpression_or_protoContext()
}

type Expression_or_protoContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_or_protoContext() *Expression_or_protoContext {
	var p = new(Expression_or_protoContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expression_or_proto
	return p
}

func InitEmptyExpression_or_protoContext(p *Expression_or_protoContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expression_or_proto
}

func (*Expression_or_protoContext) IsExpression_or_protoContext() {}

func NewExpression_or_protoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_or_protoContext {
	var p = new(Expression_or_protoContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_expression_or_proto

	return p
}

func (s *Expression_or_protoContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_or_protoContext) PROTO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPROTO_SYMBOL, 0)
}

func (s *Expression_or_protoContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Expression_or_protoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_or_protoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expression_or_protoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterExpression_or_proto(s)
	}
}

func (s *Expression_or_protoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitExpression_or_proto(s)
	}
}

func (s *Expression_or_protoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitExpression_or_proto(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Expression_or_proto() (localctx IExpression_or_protoContext) {
	localctx = NewExpression_or_protoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 900, GoogleSQLParserRULE_expression_or_proto)
	p.SetState(5514)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserPROTO_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5512)
			p.Match(GoogleSQLParserPROTO_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserPLUS_OPERATOR, GoogleSQLParserMINUS_OPERATOR, GoogleSQLParserBITWISE_NOT_OPERATOR, GoogleSQLParserRC_BRACKET_SYMBOL, GoogleSQLParserLR_BRACKET_SYMBOL, GoogleSQLParserLS_BRACKET_SYMBOL, GoogleSQLParserQUESTION_SYMBOL, GoogleSQLParserAT_SYMBOL, GoogleSQLParserATAT_SYMBOL, GoogleSQLParserSTRING_LITERAL, GoogleSQLParserBYTES_LITERAL, GoogleSQLParserFLOATING_POINT_LITERAL, GoogleSQLParserINTEGER_LITERAL, GoogleSQLParserARRAY_SYMBOL, GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserLEFT_SYMBOL, GoogleSQLParserNULL_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserRIGHT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSTRUCT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserWITH_SYMBOL, GoogleSQLParserTRUE_SYMBOL, GoogleSQLParserFALSE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserNOT_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserRANGE_SYMBOL, GoogleSQLParserINTERVAL_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserNEW_SYMBOL, GoogleSQLParserCASE_SYMBOL, GoogleSQLParserCAST_SYMBOL, GoogleSQLParserEXTRACT_SYMBOL, GoogleSQLParserCOLLATE_SYMBOL, GoogleSQLParserIF_SYMBOL, GoogleSQLParserGROUPING_SYMBOL, GoogleSQLParserEXISTS_SYMBOL, GoogleSQLParserCONFLICT_SYMBOL, GoogleSQLParserDESTINATION_SYMBOL, GoogleSQLParserPROPERTY_SYMBOL, GoogleSQLParserGRAPH_SYMBOL, GoogleSQLParserNODE_SYMBOL, GoogleSQLParserPROPERTIES_SYMBOL, GoogleSQLParserLABEL_SYMBOL, GoogleSQLParserEDGE_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5513)
			p.expression(0)
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOptions_assignment_operatorContext is an interface to support dynamic dispatch.
type IOptions_assignment_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EQUAL_OPERATOR() antlr.TerminalNode
	PLUS_EQUAL_SYMBOL() antlr.TerminalNode
	SUB_EQUAL_SYMBOL() antlr.TerminalNode

	// IsOptions_assignment_operatorContext differentiates from other interfaces.
	IsOptions_assignment_operatorContext()
}

type Options_assignment_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOptions_assignment_operatorContext() *Options_assignment_operatorContext {
	var p = new(Options_assignment_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_options_assignment_operator
	return p
}

func InitEmptyOptions_assignment_operatorContext(p *Options_assignment_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_options_assignment_operator
}

func (*Options_assignment_operatorContext) IsOptions_assignment_operatorContext() {}

func NewOptions_assignment_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Options_assignment_operatorContext {
	var p = new(Options_assignment_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_options_assignment_operator

	return p
}

func (s *Options_assignment_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Options_assignment_operatorContext) EQUAL_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEQUAL_OPERATOR, 0)
}

func (s *Options_assignment_operatorContext) PLUS_EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPLUS_EQUAL_SYMBOL, 0)
}

func (s *Options_assignment_operatorContext) SUB_EQUAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSUB_EQUAL_SYMBOL, 0)
}

func (s *Options_assignment_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Options_assignment_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Options_assignment_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOptions_assignment_operator(s)
	}
}

func (s *Options_assignment_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOptions_assignment_operator(s)
	}
}

func (s *Options_assignment_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOptions_assignment_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Options_assignment_operator() (localctx IOptions_assignment_operatorContext) {
	localctx = NewOptions_assignment_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 902, GoogleSQLParserRULE_options_assignment_operator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5516)
		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&206158430210) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_null_handling_modifierContext is an interface to support dynamic dispatch.
type IOpt_null_handling_modifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IGNORE_SYMBOL() antlr.TerminalNode
	NULLS_SYMBOL() antlr.TerminalNode
	RESPECT_SYMBOL() antlr.TerminalNode

	// IsOpt_null_handling_modifierContext differentiates from other interfaces.
	IsOpt_null_handling_modifierContext()
}

type Opt_null_handling_modifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_null_handling_modifierContext() *Opt_null_handling_modifierContext {
	var p = new(Opt_null_handling_modifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_null_handling_modifier
	return p
}

func InitEmptyOpt_null_handling_modifierContext(p *Opt_null_handling_modifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_null_handling_modifier
}

func (*Opt_null_handling_modifierContext) IsOpt_null_handling_modifierContext() {}

func NewOpt_null_handling_modifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_null_handling_modifierContext {
	var p = new(Opt_null_handling_modifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_null_handling_modifier

	return p
}

func (s *Opt_null_handling_modifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_null_handling_modifierContext) IGNORE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIGNORE_SYMBOL, 0)
}

func (s *Opt_null_handling_modifierContext) NULLS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNULLS_SYMBOL, 0)
}

func (s *Opt_null_handling_modifierContext) RESPECT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRESPECT_SYMBOL, 0)
}

func (s *Opt_null_handling_modifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_null_handling_modifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_null_handling_modifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_null_handling_modifier(s)
	}
}

func (s *Opt_null_handling_modifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_null_handling_modifier(s)
	}
}

func (s *Opt_null_handling_modifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_null_handling_modifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_null_handling_modifier() (localctx IOpt_null_handling_modifierContext) {
	localctx = NewOpt_null_handling_modifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 904, GoogleSQLParserRULE_opt_null_handling_modifier)
	p.SetState(5522)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserIGNORE_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5518)
			p.Match(GoogleSQLParserIGNORE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5519)
			p.Match(GoogleSQLParserNULLS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserRESPECT_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5520)
			p.Match(GoogleSQLParserRESPECT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5521)
			p.Match(GoogleSQLParserNULLS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunction_call_argumentContext is an interface to support dynamic dispatch.
type IFunction_call_argumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	Opt_as_alias_with_required_as() IOpt_as_alias_with_required_asContext
	Named_argument() INamed_argumentContext
	Lambda_argument() ILambda_argumentContext
	Sequence_arg() ISequence_argContext
	SELECT_SYMBOL() antlr.TerminalNode

	// IsFunction_call_argumentContext differentiates from other interfaces.
	IsFunction_call_argumentContext()
}

type Function_call_argumentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_call_argumentContext() *Function_call_argumentContext {
	var p = new(Function_call_argumentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_call_argument
	return p
}

func InitEmptyFunction_call_argumentContext(p *Function_call_argumentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_call_argument
}

func (*Function_call_argumentContext) IsFunction_call_argumentContext() {}

func NewFunction_call_argumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_call_argumentContext {
	var p = new(Function_call_argumentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_function_call_argument

	return p
}

func (s *Function_call_argumentContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_call_argumentContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Function_call_argumentContext) Opt_as_alias_with_required_as() IOpt_as_alias_with_required_asContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_as_alias_with_required_asContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_as_alias_with_required_asContext)
}

func (s *Function_call_argumentContext) Named_argument() INamed_argumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamed_argumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamed_argumentContext)
}

func (s *Function_call_argumentContext) Lambda_argument() ILambda_argumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILambda_argumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILambda_argumentContext)
}

func (s *Function_call_argumentContext) Sequence_arg() ISequence_argContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISequence_argContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISequence_argContext)
}

func (s *Function_call_argumentContext) SELECT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSELECT_SYMBOL, 0)
}

func (s *Function_call_argumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_call_argumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_call_argumentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFunction_call_argument(s)
	}
}

func (s *Function_call_argumentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFunction_call_argument(s)
	}
}

func (s *Function_call_argumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFunction_call_argument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Function_call_argument() (localctx IFunction_call_argumentContext) {
	localctx = NewFunction_call_argumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 906, GoogleSQLParserRULE_function_call_argument)
	var _la int

	p.SetState(5533)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 678, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5524)
			p.expression(0)
		}
		p.SetState(5526)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserAS_SYMBOL {
			{
				p.SetState(5525)
				p.Opt_as_alias_with_required_as()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5528)
			p.Named_argument()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5529)
			p.Lambda_argument()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5530)
			p.Sequence_arg()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5531)
			p.Match(GoogleSQLParserSELECT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Each function argument is an expression, not a query; to use a query as an expression, the query must be wrapped with additional parentheses to make it a scalar subquery expression", nil, nil)

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISequence_argContext is an interface to support dynamic dispatch.
type ISequence_argContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SEQUENCE_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext

	// IsSequence_argContext differentiates from other interfaces.
	IsSequence_argContext()
}

type Sequence_argContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySequence_argContext() *Sequence_argContext {
	var p = new(Sequence_argContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_sequence_arg
	return p
}

func InitEmptySequence_argContext(p *Sequence_argContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_sequence_arg
}

func (*Sequence_argContext) IsSequence_argContext() {}

func NewSequence_argContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sequence_argContext {
	var p = new(Sequence_argContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_sequence_arg

	return p
}

func (s *Sequence_argContext) GetParser() antlr.Parser { return s.parser }

func (s *Sequence_argContext) SEQUENCE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSEQUENCE_SYMBOL, 0)
}

func (s *Sequence_argContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Sequence_argContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sequence_argContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sequence_argContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSequence_arg(s)
	}
}

func (s *Sequence_argContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSequence_arg(s)
	}
}

func (s *Sequence_argContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSequence_arg(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Sequence_arg() (localctx ISequence_argContext) {
	localctx = NewSequence_argContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 908, GoogleSQLParserRULE_sequence_arg)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5535)
		p.Match(GoogleSQLParserSEQUENCE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5536)
		p.Path_expression()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INamed_argumentContext is an interface to support dynamic dispatch.
type INamed_argumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	EQUAL_GT_BRACKET_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	Lambda_argument() ILambda_argumentContext

	// IsNamed_argumentContext differentiates from other interfaces.
	IsNamed_argumentContext()
}

type Named_argumentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamed_argumentContext() *Named_argumentContext {
	var p = new(Named_argumentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_named_argument
	return p
}

func InitEmptyNamed_argumentContext(p *Named_argumentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_named_argument
}

func (*Named_argumentContext) IsNamed_argumentContext() {}

func NewNamed_argumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Named_argumentContext {
	var p = new(Named_argumentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_named_argument

	return p
}

func (s *Named_argumentContext) GetParser() antlr.Parser { return s.parser }

func (s *Named_argumentContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Named_argumentContext) EQUAL_GT_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEQUAL_GT_BRACKET_SYMBOL, 0)
}

func (s *Named_argumentContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Named_argumentContext) Lambda_argument() ILambda_argumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILambda_argumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILambda_argumentContext)
}

func (s *Named_argumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Named_argumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Named_argumentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterNamed_argument(s)
	}
}

func (s *Named_argumentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitNamed_argument(s)
	}
}

func (s *Named_argumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitNamed_argument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Named_argument() (localctx INamed_argumentContext) {
	localctx = NewNamed_argumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 910, GoogleSQLParserRULE_named_argument)
	p.SetState(5546)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 679, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5538)
			p.Identifier()
		}
		{
			p.SetState(5539)
			p.Match(GoogleSQLParserEQUAL_GT_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5540)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5542)
			p.Identifier()
		}
		{
			p.SetState(5543)
			p.Match(GoogleSQLParserEQUAL_GT_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5544)
			p.Lambda_argument()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILambda_argumentContext is an interface to support dynamic dispatch.
type ILambda_argumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Lambda_argument_list() ILambda_argument_listContext
	SUB_GT_BRACKET_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsLambda_argumentContext differentiates from other interfaces.
	IsLambda_argumentContext()
}

type Lambda_argumentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambda_argumentContext() *Lambda_argumentContext {
	var p = new(Lambda_argumentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_lambda_argument
	return p
}

func InitEmptyLambda_argumentContext(p *Lambda_argumentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_lambda_argument
}

func (*Lambda_argumentContext) IsLambda_argumentContext() {}

func NewLambda_argumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Lambda_argumentContext {
	var p = new(Lambda_argumentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_lambda_argument

	return p
}

func (s *Lambda_argumentContext) GetParser() antlr.Parser { return s.parser }

func (s *Lambda_argumentContext) Lambda_argument_list() ILambda_argument_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILambda_argument_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILambda_argument_listContext)
}

func (s *Lambda_argumentContext) SUB_GT_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSUB_GT_BRACKET_SYMBOL, 0)
}

func (s *Lambda_argumentContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Lambda_argumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Lambda_argumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Lambda_argumentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterLambda_argument(s)
	}
}

func (s *Lambda_argumentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitLambda_argument(s)
	}
}

func (s *Lambda_argumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitLambda_argument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Lambda_argument() (localctx ILambda_argumentContext) {
	localctx = NewLambda_argumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 912, GoogleSQLParserRULE_lambda_argument)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5548)
		p.Lambda_argument_list()
	}
	{
		p.SetState(5549)
		p.Match(GoogleSQLParserSUB_GT_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5550)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILambda_argument_listContext is an interface to support dynamic dispatch.
type ILambda_argument_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsLambda_argument_listContext differentiates from other interfaces.
	IsLambda_argument_listContext()
}

type Lambda_argument_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambda_argument_listContext() *Lambda_argument_listContext {
	var p = new(Lambda_argument_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_lambda_argument_list
	return p
}

func InitEmptyLambda_argument_listContext(p *Lambda_argument_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_lambda_argument_list
}

func (*Lambda_argument_listContext) IsLambda_argument_listContext() {}

func NewLambda_argument_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Lambda_argument_listContext {
	var p = new(Lambda_argument_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_lambda_argument_list

	return p
}

func (s *Lambda_argument_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Lambda_argument_listContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Lambda_argument_listContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Lambda_argument_listContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Lambda_argument_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Lambda_argument_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Lambda_argument_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterLambda_argument_list(s)
	}
}

func (s *Lambda_argument_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitLambda_argument_list(s)
	}
}

func (s *Lambda_argument_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitLambda_argument_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Lambda_argument_list() (localctx ILambda_argument_listContext) {
	localctx = NewLambda_argument_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 914, GoogleSQLParserRULE_lambda_argument_list)
	p.SetState(5555)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 680, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5552)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5553)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5554)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILimit_offset_clauseContext is an interface to support dynamic dispatch.
type ILimit_offset_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LIMIT_SYMBOL() antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	OFFSET_SYMBOL() antlr.TerminalNode

	// IsLimit_offset_clauseContext differentiates from other interfaces.
	IsLimit_offset_clauseContext()
}

type Limit_offset_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLimit_offset_clauseContext() *Limit_offset_clauseContext {
	var p = new(Limit_offset_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_limit_offset_clause
	return p
}

func InitEmptyLimit_offset_clauseContext(p *Limit_offset_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_limit_offset_clause
}

func (*Limit_offset_clauseContext) IsLimit_offset_clauseContext() {}

func NewLimit_offset_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Limit_offset_clauseContext {
	var p = new(Limit_offset_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_limit_offset_clause

	return p
}

func (s *Limit_offset_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Limit_offset_clauseContext) LIMIT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLIMIT_SYMBOL, 0)
}

func (s *Limit_offset_clauseContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *Limit_offset_clauseContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Limit_offset_clauseContext) OFFSET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOFFSET_SYMBOL, 0)
}

func (s *Limit_offset_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Limit_offset_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Limit_offset_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterLimit_offset_clause(s)
	}
}

func (s *Limit_offset_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitLimit_offset_clause(s)
	}
}

func (s *Limit_offset_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitLimit_offset_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Limit_offset_clause() (localctx ILimit_offset_clauseContext) {
	localctx = NewLimit_offset_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 916, GoogleSQLParserRULE_limit_offset_clause)
	p.SetState(5564)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 681, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5557)
			p.Match(GoogleSQLParserLIMIT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5558)
			p.expression(0)
		}
		{
			p.SetState(5559)
			p.Match(GoogleSQLParserOFFSET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5560)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5562)
			p.Match(GoogleSQLParserLIMIT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5563)
			p.expression(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_having_or_group_by_modifierContext is an interface to support dynamic dispatch.
type IOpt_having_or_group_by_modifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	HAVING_SYMBOL() antlr.TerminalNode
	MAX_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	MIN_SYMBOL() antlr.TerminalNode
	Group_by_clause_prefix() IGroup_by_clause_prefixContext

	// IsOpt_having_or_group_by_modifierContext differentiates from other interfaces.
	IsOpt_having_or_group_by_modifierContext()
}

type Opt_having_or_group_by_modifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_having_or_group_by_modifierContext() *Opt_having_or_group_by_modifierContext {
	var p = new(Opt_having_or_group_by_modifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_having_or_group_by_modifier
	return p
}

func InitEmptyOpt_having_or_group_by_modifierContext(p *Opt_having_or_group_by_modifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_having_or_group_by_modifier
}

func (*Opt_having_or_group_by_modifierContext) IsOpt_having_or_group_by_modifierContext() {}

func NewOpt_having_or_group_by_modifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_having_or_group_by_modifierContext {
	var p = new(Opt_having_or_group_by_modifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_having_or_group_by_modifier

	return p
}

func (s *Opt_having_or_group_by_modifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_having_or_group_by_modifierContext) HAVING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserHAVING_SYMBOL, 0)
}

func (s *Opt_having_or_group_by_modifierContext) MAX_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMAX_SYMBOL, 0)
}

func (s *Opt_having_or_group_by_modifierContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Opt_having_or_group_by_modifierContext) MIN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMIN_SYMBOL, 0)
}

func (s *Opt_having_or_group_by_modifierContext) Group_by_clause_prefix() IGroup_by_clause_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGroup_by_clause_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGroup_by_clause_prefixContext)
}

func (s *Opt_having_or_group_by_modifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_having_or_group_by_modifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_having_or_group_by_modifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_having_or_group_by_modifier(s)
	}
}

func (s *Opt_having_or_group_by_modifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_having_or_group_by_modifier(s)
	}
}

func (s *Opt_having_or_group_by_modifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_having_or_group_by_modifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_having_or_group_by_modifier() (localctx IOpt_having_or_group_by_modifierContext) {
	localctx = NewOpt_having_or_group_by_modifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 918, GoogleSQLParserRULE_opt_having_or_group_by_modifier)
	p.SetState(5574)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 682, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5566)
			p.Match(GoogleSQLParserHAVING_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5567)
			p.Match(GoogleSQLParserMAX_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5568)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5569)
			p.Match(GoogleSQLParserHAVING_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5570)
			p.Match(GoogleSQLParserMIN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5571)
			p.expression(0)
		}
		{
			p.SetState(5572)
			p.Group_by_clause_prefix()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGroup_by_clause_prefixContext is an interface to support dynamic dispatch.
type IGroup_by_clause_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Group_by_preamble() IGroup_by_preambleContext
	AllGrouping_item() []IGrouping_itemContext
	Grouping_item(i int) IGrouping_itemContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsGroup_by_clause_prefixContext differentiates from other interfaces.
	IsGroup_by_clause_prefixContext()
}

type Group_by_clause_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroup_by_clause_prefixContext() *Group_by_clause_prefixContext {
	var p = new(Group_by_clause_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_group_by_clause_prefix
	return p
}

func InitEmptyGroup_by_clause_prefixContext(p *Group_by_clause_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_group_by_clause_prefix
}

func (*Group_by_clause_prefixContext) IsGroup_by_clause_prefixContext() {}

func NewGroup_by_clause_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Group_by_clause_prefixContext {
	var p = new(Group_by_clause_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_group_by_clause_prefix

	return p
}

func (s *Group_by_clause_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Group_by_clause_prefixContext) Group_by_preamble() IGroup_by_preambleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGroup_by_preambleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGroup_by_preambleContext)
}

func (s *Group_by_clause_prefixContext) AllGrouping_item() []IGrouping_itemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IGrouping_itemContext); ok {
			len++
		}
	}

	tst := make([]IGrouping_itemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IGrouping_itemContext); ok {
			tst[i] = t.(IGrouping_itemContext)
			i++
		}
	}

	return tst
}

func (s *Group_by_clause_prefixContext) Grouping_item(i int) IGrouping_itemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGrouping_itemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGrouping_itemContext)
}

func (s *Group_by_clause_prefixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Group_by_clause_prefixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Group_by_clause_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Group_by_clause_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Group_by_clause_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGroup_by_clause_prefix(s)
	}
}

func (s *Group_by_clause_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGroup_by_clause_prefix(s)
	}
}

func (s *Group_by_clause_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGroup_by_clause_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Group_by_clause_prefix() (localctx IGroup_by_clause_prefixContext) {
	localctx = NewGroup_by_clause_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 920, GoogleSQLParserRULE_group_by_clause_prefix)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5576)
		p.Group_by_preamble()
	}
	{
		p.SetState(5577)
		p.Grouping_item()
	}
	p.SetState(5582)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 683, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(5578)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(5579)
				p.Grouping_item()
			}

		}
		p.SetState(5584)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 683, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGroup_by_preambleContext is an interface to support dynamic dispatch.
type IGroup_by_preambleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	GROUP_SYMBOL() antlr.TerminalNode
	BY_SYMBOL() antlr.TerminalNode
	Hint() IHintContext
	Opt_and_order() IOpt_and_orderContext

	// IsGroup_by_preambleContext differentiates from other interfaces.
	IsGroup_by_preambleContext()
}

type Group_by_preambleContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroup_by_preambleContext() *Group_by_preambleContext {
	var p = new(Group_by_preambleContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_group_by_preamble
	return p
}

func InitEmptyGroup_by_preambleContext(p *Group_by_preambleContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_group_by_preamble
}

func (*Group_by_preambleContext) IsGroup_by_preambleContext() {}

func NewGroup_by_preambleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Group_by_preambleContext {
	var p = new(Group_by_preambleContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_group_by_preamble

	return p
}

func (s *Group_by_preambleContext) GetParser() antlr.Parser { return s.parser }

func (s *Group_by_preambleContext) GROUP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGROUP_SYMBOL, 0)
}

func (s *Group_by_preambleContext) BY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBY_SYMBOL, 0)
}

func (s *Group_by_preambleContext) Hint() IHintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHintContext)
}

func (s *Group_by_preambleContext) Opt_and_order() IOpt_and_orderContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_and_orderContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_and_orderContext)
}

func (s *Group_by_preambleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Group_by_preambleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Group_by_preambleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGroup_by_preamble(s)
	}
}

func (s *Group_by_preambleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGroup_by_preamble(s)
	}
}

func (s *Group_by_preambleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGroup_by_preamble(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Group_by_preamble() (localctx IGroup_by_preambleContext) {
	localctx = NewGroup_by_preambleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 922, GoogleSQLParserRULE_group_by_preamble)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5585)
		p.Match(GoogleSQLParserGROUP_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(5587)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAT_SYMBOL {
		{
			p.SetState(5586)
			p.Hint()
		}

	}
	p.SetState(5590)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAND_SYMBOL {
		{
			p.SetState(5589)
			p.Opt_and_order()
		}

	}
	{
		p.SetState(5592)
		p.Match(GoogleSQLParserBY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_and_orderContext is an interface to support dynamic dispatch.
type IOpt_and_orderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AND_SYMBOL() antlr.TerminalNode
	ORDER_SYMBOL() antlr.TerminalNode

	// IsOpt_and_orderContext differentiates from other interfaces.
	IsOpt_and_orderContext()
}

type Opt_and_orderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_and_orderContext() *Opt_and_orderContext {
	var p = new(Opt_and_orderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_and_order
	return p
}

func InitEmptyOpt_and_orderContext(p *Opt_and_orderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_and_order
}

func (*Opt_and_orderContext) IsOpt_and_orderContext() {}

func NewOpt_and_orderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_and_orderContext {
	var p = new(Opt_and_orderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_and_order

	return p
}

func (s *Opt_and_orderContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_and_orderContext) AND_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAND_SYMBOL, 0)
}

func (s *Opt_and_orderContext) ORDER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserORDER_SYMBOL, 0)
}

func (s *Opt_and_orderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_and_orderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_and_orderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_and_order(s)
	}
}

func (s *Opt_and_orderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_and_order(s)
	}
}

func (s *Opt_and_orderContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_and_order(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_and_order() (localctx IOpt_and_orderContext) {
	localctx = NewOpt_and_orderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 924, GoogleSQLParserRULE_opt_and_order)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5594)
		p.Match(GoogleSQLParserAND_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5595)
		p.Match(GoogleSQLParserORDER_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IHintContext is an interface to support dynamic dispatch.
type IHintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AT_SYMBOL() antlr.TerminalNode
	Integer_literal() IInteger_literalContext
	Hint_with_body() IHint_with_bodyContext

	// IsHintContext differentiates from other interfaces.
	IsHintContext()
}

type HintContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHintContext() *HintContext {
	var p = new(HintContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_hint
	return p
}

func InitEmptyHintContext(p *HintContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_hint
}

func (*HintContext) IsHintContext() {}

func NewHintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HintContext {
	var p = new(HintContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_hint

	return p
}

func (s *HintContext) GetParser() antlr.Parser { return s.parser }

func (s *HintContext) AT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAT_SYMBOL, 0)
}

func (s *HintContext) Integer_literal() IInteger_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInteger_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInteger_literalContext)
}

func (s *HintContext) Hint_with_body() IHint_with_bodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHint_with_bodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHint_with_bodyContext)
}

func (s *HintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterHint(s)
	}
}

func (s *HintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitHint(s)
	}
}

func (s *HintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitHint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Hint() (localctx IHintContext) {
	localctx = NewHintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 926, GoogleSQLParserRULE_hint)
	p.SetState(5600)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 686, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5597)
			p.Match(GoogleSQLParserAT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5598)
			p.Integer_literal()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5599)
			p.Hint_with_body()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IHint_with_bodyContext is an interface to support dynamic dispatch.
type IHint_with_bodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Hint_with_body_prefix() IHint_with_body_prefixContext
	RC_BRACKET_SYMBOL() antlr.TerminalNode

	// IsHint_with_bodyContext differentiates from other interfaces.
	IsHint_with_bodyContext()
}

type Hint_with_bodyContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHint_with_bodyContext() *Hint_with_bodyContext {
	var p = new(Hint_with_bodyContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_hint_with_body
	return p
}

func InitEmptyHint_with_bodyContext(p *Hint_with_bodyContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_hint_with_body
}

func (*Hint_with_bodyContext) IsHint_with_bodyContext() {}

func NewHint_with_bodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Hint_with_bodyContext {
	var p = new(Hint_with_bodyContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_hint_with_body

	return p
}

func (s *Hint_with_bodyContext) GetParser() antlr.Parser { return s.parser }

func (s *Hint_with_bodyContext) Hint_with_body_prefix() IHint_with_body_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHint_with_body_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHint_with_body_prefixContext)
}

func (s *Hint_with_bodyContext) RC_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRC_BRACKET_SYMBOL, 0)
}

func (s *Hint_with_bodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Hint_with_bodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Hint_with_bodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterHint_with_body(s)
	}
}

func (s *Hint_with_bodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitHint_with_body(s)
	}
}

func (s *Hint_with_bodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitHint_with_body(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Hint_with_body() (localctx IHint_with_bodyContext) {
	localctx = NewHint_with_bodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 928, GoogleSQLParserRULE_hint_with_body)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5602)
		p.Hint_with_body_prefix()
	}
	{
		p.SetState(5603)
		p.Match(GoogleSQLParserRC_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IHint_with_body_prefixContext is an interface to support dynamic dispatch.
type IHint_with_body_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllAT_SYMBOL() []antlr.TerminalNode
	AT_SYMBOL(i int) antlr.TerminalNode
	LC_BRACKET_SYMBOL() antlr.TerminalNode
	AllHint_entry() []IHint_entryContext
	Hint_entry(i int) IHint_entryContext
	Integer_literal() IInteger_literalContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsHint_with_body_prefixContext differentiates from other interfaces.
	IsHint_with_body_prefixContext()
}

type Hint_with_body_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHint_with_body_prefixContext() *Hint_with_body_prefixContext {
	var p = new(Hint_with_body_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_hint_with_body_prefix
	return p
}

func InitEmptyHint_with_body_prefixContext(p *Hint_with_body_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_hint_with_body_prefix
}

func (*Hint_with_body_prefixContext) IsHint_with_body_prefixContext() {}

func NewHint_with_body_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Hint_with_body_prefixContext {
	var p = new(Hint_with_body_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_hint_with_body_prefix

	return p
}

func (s *Hint_with_body_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Hint_with_body_prefixContext) AllAT_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserAT_SYMBOL)
}

func (s *Hint_with_body_prefixContext) AT_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAT_SYMBOL, i)
}

func (s *Hint_with_body_prefixContext) LC_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLC_BRACKET_SYMBOL, 0)
}

func (s *Hint_with_body_prefixContext) AllHint_entry() []IHint_entryContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IHint_entryContext); ok {
			len++
		}
	}

	tst := make([]IHint_entryContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IHint_entryContext); ok {
			tst[i] = t.(IHint_entryContext)
			i++
		}
	}

	return tst
}

func (s *Hint_with_body_prefixContext) Hint_entry(i int) IHint_entryContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHint_entryContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHint_entryContext)
}

func (s *Hint_with_body_prefixContext) Integer_literal() IInteger_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInteger_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInteger_literalContext)
}

func (s *Hint_with_body_prefixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Hint_with_body_prefixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Hint_with_body_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Hint_with_body_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Hint_with_body_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterHint_with_body_prefix(s)
	}
}

func (s *Hint_with_body_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitHint_with_body_prefix(s)
	}
}

func (s *Hint_with_body_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitHint_with_body_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Hint_with_body_prefix() (localctx IHint_with_body_prefixContext) {
	localctx = NewHint_with_body_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 930, GoogleSQLParserRULE_hint_with_body_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5605)
		p.Match(GoogleSQLParserAT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(5609)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserINTEGER_LITERAL {
		{
			p.SetState(5606)
			p.Integer_literal()
		}
		{
			p.SetState(5607)
			p.Match(GoogleSQLParserAT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(5611)
		p.Match(GoogleSQLParserLC_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5612)
		p.Hint_entry()
	}
	p.SetState(5617)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(5613)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5614)
			p.Hint_entry()
		}

		p.SetState(5619)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IHint_entryContext is an interface to support dynamic dispatch.
type IHint_entryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIdentifier_in_hints() []IIdentifier_in_hintsContext
	Identifier_in_hints(i int) IIdentifier_in_hintsContext
	EQUAL_OPERATOR() antlr.TerminalNode
	Expression() IExpressionContext
	DOT_SYMBOL() antlr.TerminalNode

	// IsHint_entryContext differentiates from other interfaces.
	IsHint_entryContext()
}

type Hint_entryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHint_entryContext() *Hint_entryContext {
	var p = new(Hint_entryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_hint_entry
	return p
}

func InitEmptyHint_entryContext(p *Hint_entryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_hint_entry
}

func (*Hint_entryContext) IsHint_entryContext() {}

func NewHint_entryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Hint_entryContext {
	var p = new(Hint_entryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_hint_entry

	return p
}

func (s *Hint_entryContext) GetParser() antlr.Parser { return s.parser }

func (s *Hint_entryContext) AllIdentifier_in_hints() []IIdentifier_in_hintsContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifier_in_hintsContext); ok {
			len++
		}
	}

	tst := make([]IIdentifier_in_hintsContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifier_in_hintsContext); ok {
			tst[i] = t.(IIdentifier_in_hintsContext)
			i++
		}
	}

	return tst
}

func (s *Hint_entryContext) Identifier_in_hints(i int) IIdentifier_in_hintsContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifier_in_hintsContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifier_in_hintsContext)
}

func (s *Hint_entryContext) EQUAL_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEQUAL_OPERATOR, 0)
}

func (s *Hint_entryContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Hint_entryContext) DOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDOT_SYMBOL, 0)
}

func (s *Hint_entryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Hint_entryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Hint_entryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterHint_entry(s)
	}
}

func (s *Hint_entryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitHint_entry(s)
	}
}

func (s *Hint_entryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitHint_entry(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Hint_entry() (localctx IHint_entryContext) {
	localctx = NewHint_entryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 932, GoogleSQLParserRULE_hint_entry)
	p.SetState(5630)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 689, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5620)
			p.Identifier_in_hints()
		}
		{
			p.SetState(5621)
			p.Match(GoogleSQLParserEQUAL_OPERATOR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5622)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5624)
			p.Identifier_in_hints()
		}
		{
			p.SetState(5625)
			p.Match(GoogleSQLParserDOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5626)
			p.Identifier_in_hints()
		}
		{
			p.SetState(5627)
			p.Match(GoogleSQLParserEQUAL_OPERATOR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5628)
			p.expression(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIdentifier_in_hintsContext is an interface to support dynamic dispatch.
type IIdentifier_in_hintsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	Extra_identifier_in_hints_name() IExtra_identifier_in_hints_nameContext

	// IsIdentifier_in_hintsContext differentiates from other interfaces.
	IsIdentifier_in_hintsContext()
}

type Identifier_in_hintsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifier_in_hintsContext() *Identifier_in_hintsContext {
	var p = new(Identifier_in_hintsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_identifier_in_hints
	return p
}

func InitEmptyIdentifier_in_hintsContext(p *Identifier_in_hintsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_identifier_in_hints
}

func (*Identifier_in_hintsContext) IsIdentifier_in_hintsContext() {}

func NewIdentifier_in_hintsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Identifier_in_hintsContext {
	var p = new(Identifier_in_hintsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_identifier_in_hints

	return p
}

func (s *Identifier_in_hintsContext) GetParser() antlr.Parser { return s.parser }

func (s *Identifier_in_hintsContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Identifier_in_hintsContext) Extra_identifier_in_hints_name() IExtra_identifier_in_hints_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExtra_identifier_in_hints_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExtra_identifier_in_hints_nameContext)
}

func (s *Identifier_in_hintsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Identifier_in_hintsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Identifier_in_hintsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterIdentifier_in_hints(s)
	}
}

func (s *Identifier_in_hintsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitIdentifier_in_hints(s)
	}
}

func (s *Identifier_in_hintsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitIdentifier_in_hints(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Identifier_in_hints() (localctx IIdentifier_in_hintsContext) {
	localctx = NewIdentifier_in_hintsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 934, GoogleSQLParserRULE_identifier_in_hints)
	p.SetState(5634)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserCONFLICT_SYMBOL, GoogleSQLParserDESTINATION_SYMBOL, GoogleSQLParserPROPERTY_SYMBOL, GoogleSQLParserGRAPH_SYMBOL, GoogleSQLParserNODE_SYMBOL, GoogleSQLParserPROPERTIES_SYMBOL, GoogleSQLParserLABEL_SYMBOL, GoogleSQLParserEDGE_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5632)
			p.Identifier()
		}

	case GoogleSQLParserHASH_SYMBOL, GoogleSQLParserPROTO_SYMBOL, GoogleSQLParserPARTITION_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5633)
			p.Extra_identifier_in_hints_name()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExtra_identifier_in_hints_nameContext is an interface to support dynamic dispatch.
type IExtra_identifier_in_hints_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	HASH_SYMBOL() antlr.TerminalNode
	PROTO_SYMBOL() antlr.TerminalNode
	PARTITION_SYMBOL() antlr.TerminalNode

	// IsExtra_identifier_in_hints_nameContext differentiates from other interfaces.
	IsExtra_identifier_in_hints_nameContext()
}

type Extra_identifier_in_hints_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExtra_identifier_in_hints_nameContext() *Extra_identifier_in_hints_nameContext {
	var p = new(Extra_identifier_in_hints_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_extra_identifier_in_hints_name
	return p
}

func InitEmptyExtra_identifier_in_hints_nameContext(p *Extra_identifier_in_hints_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_extra_identifier_in_hints_name
}

func (*Extra_identifier_in_hints_nameContext) IsExtra_identifier_in_hints_nameContext() {}

func NewExtra_identifier_in_hints_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Extra_identifier_in_hints_nameContext {
	var p = new(Extra_identifier_in_hints_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_extra_identifier_in_hints_name

	return p
}

func (s *Extra_identifier_in_hints_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Extra_identifier_in_hints_nameContext) HASH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserHASH_SYMBOL, 0)
}

func (s *Extra_identifier_in_hints_nameContext) PROTO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPROTO_SYMBOL, 0)
}

func (s *Extra_identifier_in_hints_nameContext) PARTITION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPARTITION_SYMBOL, 0)
}

func (s *Extra_identifier_in_hints_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Extra_identifier_in_hints_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Extra_identifier_in_hints_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterExtra_identifier_in_hints_name(s)
	}
}

func (s *Extra_identifier_in_hints_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitExtra_identifier_in_hints_name(s)
	}
}

func (s *Extra_identifier_in_hints_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitExtra_identifier_in_hints_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Extra_identifier_in_hints_name() (localctx IExtra_identifier_in_hints_nameContext) {
	localctx = NewExtra_identifier_in_hints_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 936, GoogleSQLParserRULE_extra_identifier_in_hints_name)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5636)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-308)) & ^0x3f) == 0 && ((int64(1)<<(_la-308))&7) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGrouping_itemContext is an interface to support dynamic dispatch.
type IGrouping_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	Opt_as_alias_with_required_as() IOpt_as_alias_with_required_asContext
	Opt_grouping_item_order() IOpt_grouping_item_orderContext
	Rollup_list() IRollup_listContext
	Cube_list() ICube_listContext
	Grouping_set_list() IGrouping_set_listContext

	// IsGrouping_itemContext differentiates from other interfaces.
	IsGrouping_itemContext()
}

type Grouping_itemContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGrouping_itemContext() *Grouping_itemContext {
	var p = new(Grouping_itemContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_grouping_item
	return p
}

func InitEmptyGrouping_itemContext(p *Grouping_itemContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_grouping_item
}

func (*Grouping_itemContext) IsGrouping_itemContext() {}

func NewGrouping_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Grouping_itemContext {
	var p = new(Grouping_itemContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_grouping_item

	return p
}

func (s *Grouping_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Grouping_itemContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Grouping_itemContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Grouping_itemContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Grouping_itemContext) Opt_as_alias_with_required_as() IOpt_as_alias_with_required_asContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_as_alias_with_required_asContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_as_alias_with_required_asContext)
}

func (s *Grouping_itemContext) Opt_grouping_item_order() IOpt_grouping_item_orderContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_grouping_item_orderContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_grouping_item_orderContext)
}

func (s *Grouping_itemContext) Rollup_list() IRollup_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRollup_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRollup_listContext)
}

func (s *Grouping_itemContext) Cube_list() ICube_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICube_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICube_listContext)
}

func (s *Grouping_itemContext) Grouping_set_list() IGrouping_set_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGrouping_set_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGrouping_set_listContext)
}

func (s *Grouping_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Grouping_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Grouping_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGrouping_item(s)
	}
}

func (s *Grouping_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGrouping_item(s)
	}
}

func (s *Grouping_itemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGrouping_item(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Grouping_item() (localctx IGrouping_itemContext) {
	localctx = NewGrouping_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 938, GoogleSQLParserRULE_grouping_item)
	p.SetState(5656)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 693, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5638)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5639)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5640)
			p.expression(0)
		}
		p.SetState(5642)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 691, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5641)
				p.Opt_as_alias_with_required_as()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(5645)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 692, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5644)
				p.Opt_grouping_item_order()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5647)
			p.Rollup_list()
		}
		{
			p.SetState(5648)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5650)
			p.Cube_list()
		}
		{
			p.SetState(5651)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5653)
			p.Grouping_set_list()
		}
		{
			p.SetState(5654)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGrouping_set_listContext is an interface to support dynamic dispatch.
type IGrouping_set_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	GROUPING_SYMBOL() antlr.TerminalNode
	SETS_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllGrouping_set() []IGrouping_setContext
	Grouping_set(i int) IGrouping_setContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsGrouping_set_listContext differentiates from other interfaces.
	IsGrouping_set_listContext()
}

type Grouping_set_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGrouping_set_listContext() *Grouping_set_listContext {
	var p = new(Grouping_set_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_grouping_set_list
	return p
}

func InitEmptyGrouping_set_listContext(p *Grouping_set_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_grouping_set_list
}

func (*Grouping_set_listContext) IsGrouping_set_listContext() {}

func NewGrouping_set_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Grouping_set_listContext {
	var p = new(Grouping_set_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_grouping_set_list

	return p
}

func (s *Grouping_set_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Grouping_set_listContext) GROUPING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGROUPING_SYMBOL, 0)
}

func (s *Grouping_set_listContext) SETS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSETS_SYMBOL, 0)
}

func (s *Grouping_set_listContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Grouping_set_listContext) AllGrouping_set() []IGrouping_setContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IGrouping_setContext); ok {
			len++
		}
	}

	tst := make([]IGrouping_setContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IGrouping_setContext); ok {
			tst[i] = t.(IGrouping_setContext)
			i++
		}
	}

	return tst
}

func (s *Grouping_set_listContext) Grouping_set(i int) IGrouping_setContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGrouping_setContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGrouping_setContext)
}

func (s *Grouping_set_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Grouping_set_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Grouping_set_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Grouping_set_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Grouping_set_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGrouping_set_list(s)
	}
}

func (s *Grouping_set_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGrouping_set_list(s)
	}
}

func (s *Grouping_set_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGrouping_set_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Grouping_set_list() (localctx IGrouping_set_listContext) {
	localctx = NewGrouping_set_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 940, GoogleSQLParserRULE_grouping_set_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5658)
		p.Match(GoogleSQLParserGROUPING_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5659)
		p.Match(GoogleSQLParserSETS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5660)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5661)
		p.Grouping_set()
	}
	p.SetState(5666)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(5662)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5663)
			p.Grouping_set()
		}

		p.SetState(5668)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGrouping_setContext is an interface to support dynamic dispatch.
type IGrouping_setContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	Rollup_list() IRollup_listContext
	Cube_list() ICube_listContext

	// IsGrouping_setContext differentiates from other interfaces.
	IsGrouping_setContext()
}

type Grouping_setContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGrouping_setContext() *Grouping_setContext {
	var p = new(Grouping_setContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_grouping_set
	return p
}

func InitEmptyGrouping_setContext(p *Grouping_setContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_grouping_set
}

func (*Grouping_setContext) IsGrouping_setContext() {}

func NewGrouping_setContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Grouping_setContext {
	var p = new(Grouping_setContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_grouping_set

	return p
}

func (s *Grouping_setContext) GetParser() antlr.Parser { return s.parser }

func (s *Grouping_setContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Grouping_setContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Grouping_setContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Grouping_setContext) Rollup_list() IRollup_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRollup_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRollup_listContext)
}

func (s *Grouping_setContext) Cube_list() ICube_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICube_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICube_listContext)
}

func (s *Grouping_setContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Grouping_setContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Grouping_setContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGrouping_set(s)
	}
}

func (s *Grouping_setContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGrouping_set(s)
	}
}

func (s *Grouping_setContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGrouping_set(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Grouping_set() (localctx IGrouping_setContext) {
	localctx = NewGrouping_setContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 942, GoogleSQLParserRULE_grouping_set)
	p.SetState(5678)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 695, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5669)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5670)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5671)
			p.expression(0)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5672)
			p.Rollup_list()
		}
		{
			p.SetState(5673)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5675)
			p.Cube_list()
		}
		{
			p.SetState(5676)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICube_listContext is an interface to support dynamic dispatch.
type ICube_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CUBE_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext

	// IsCube_listContext differentiates from other interfaces.
	IsCube_listContext()
}

type Cube_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCube_listContext() *Cube_listContext {
	var p = new(Cube_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_cube_list
	return p
}

func InitEmptyCube_listContext(p *Cube_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_cube_list
}

func (*Cube_listContext) IsCube_listContext() {}

func NewCube_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cube_listContext {
	var p = new(Cube_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_cube_list

	return p
}

func (s *Cube_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Cube_listContext) CUBE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCUBE_SYMBOL, 0)
}

func (s *Cube_listContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Cube_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Cube_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Cube_listContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *Cube_listContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Cube_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cube_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cube_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCube_list(s)
	}
}

func (s *Cube_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCube_list(s)
	}
}

func (s *Cube_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCube_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Cube_list() (localctx ICube_listContext) {
	localctx = NewCube_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 944, GoogleSQLParserRULE_cube_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5680)
		p.Match(GoogleSQLParserCUBE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5681)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(5686)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(5682)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5683)
			p.expression(0)
		}

		p.SetState(5688)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRollup_listContext is an interface to support dynamic dispatch.
type IRollup_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ROLLUP_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsRollup_listContext differentiates from other interfaces.
	IsRollup_listContext()
}

type Rollup_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRollup_listContext() *Rollup_listContext {
	var p = new(Rollup_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_rollup_list
	return p
}

func InitEmptyRollup_listContext(p *Rollup_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_rollup_list
}

func (*Rollup_listContext) IsRollup_listContext() {}

func NewRollup_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rollup_listContext {
	var p = new(Rollup_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_rollup_list

	return p
}

func (s *Rollup_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Rollup_listContext) ROLLUP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserROLLUP_SYMBOL, 0)
}

func (s *Rollup_listContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Rollup_listContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *Rollup_listContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Rollup_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Rollup_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Rollup_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rollup_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Rollup_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRollup_list(s)
	}
}

func (s *Rollup_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRollup_list(s)
	}
}

func (s *Rollup_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRollup_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Rollup_list() (localctx IRollup_listContext) {
	localctx = NewRollup_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 946, GoogleSQLParserRULE_rollup_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5689)
		p.Match(GoogleSQLParserROLLUP_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5690)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5691)
		p.expression(0)
	}
	p.SetState(5696)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(5692)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5693)
			p.expression(0)
		}

		p.SetState(5698)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_as_alias_with_required_asContext is an interface to support dynamic dispatch.
type IOpt_as_alias_with_required_asContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AS_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext

	// IsOpt_as_alias_with_required_asContext differentiates from other interfaces.
	IsOpt_as_alias_with_required_asContext()
}

type Opt_as_alias_with_required_asContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_as_alias_with_required_asContext() *Opt_as_alias_with_required_asContext {
	var p = new(Opt_as_alias_with_required_asContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_as_alias_with_required_as
	return p
}

func InitEmptyOpt_as_alias_with_required_asContext(p *Opt_as_alias_with_required_asContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_as_alias_with_required_as
}

func (*Opt_as_alias_with_required_asContext) IsOpt_as_alias_with_required_asContext() {}

func NewOpt_as_alias_with_required_asContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_as_alias_with_required_asContext {
	var p = new(Opt_as_alias_with_required_asContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_as_alias_with_required_as

	return p
}

func (s *Opt_as_alias_with_required_asContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_as_alias_with_required_asContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Opt_as_alias_with_required_asContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Opt_as_alias_with_required_asContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_as_alias_with_required_asContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_as_alias_with_required_asContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_as_alias_with_required_as(s)
	}
}

func (s *Opt_as_alias_with_required_asContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_as_alias_with_required_as(s)
	}
}

func (s *Opt_as_alias_with_required_asContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_as_alias_with_required_as(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_as_alias_with_required_as() (localctx IOpt_as_alias_with_required_asContext) {
	localctx = NewOpt_as_alias_with_required_asContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 948, GoogleSQLParserRULE_opt_as_alias_with_required_as)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5699)
		p.Match(GoogleSQLParserAS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5700)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_grouping_item_orderContext is an interface to support dynamic dispatch.
type IOpt_grouping_item_orderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Opt_selection_item_order() IOpt_selection_item_orderContext
	Null_order() INull_orderContext

	// IsOpt_grouping_item_orderContext differentiates from other interfaces.
	IsOpt_grouping_item_orderContext()
}

type Opt_grouping_item_orderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_grouping_item_orderContext() *Opt_grouping_item_orderContext {
	var p = new(Opt_grouping_item_orderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_grouping_item_order
	return p
}

func InitEmptyOpt_grouping_item_orderContext(p *Opt_grouping_item_orderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_grouping_item_order
}

func (*Opt_grouping_item_orderContext) IsOpt_grouping_item_orderContext() {}

func NewOpt_grouping_item_orderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_grouping_item_orderContext {
	var p = new(Opt_grouping_item_orderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_grouping_item_order

	return p
}

func (s *Opt_grouping_item_orderContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_grouping_item_orderContext) Opt_selection_item_order() IOpt_selection_item_orderContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_selection_item_orderContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_selection_item_orderContext)
}

func (s *Opt_grouping_item_orderContext) Null_order() INull_orderContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INull_orderContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INull_orderContext)
}

func (s *Opt_grouping_item_orderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_grouping_item_orderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_grouping_item_orderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_grouping_item_order(s)
	}
}

func (s *Opt_grouping_item_orderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_grouping_item_order(s)
	}
}

func (s *Opt_grouping_item_orderContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_grouping_item_order(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_grouping_item_order() (localctx IOpt_grouping_item_orderContext) {
	localctx = NewOpt_grouping_item_orderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 950, GoogleSQLParserRULE_opt_grouping_item_order)
	p.SetState(5704)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserASC_SYMBOL, GoogleSQLParserDESC_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5702)
			p.Opt_selection_item_order()
		}

	case GoogleSQLParserNULLS_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5703)
			p.Null_order()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_selection_item_orderContext is an interface to support dynamic dispatch.
type IOpt_selection_item_orderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Asc_or_desc() IAsc_or_descContext
	Null_order() INull_orderContext

	// IsOpt_selection_item_orderContext differentiates from other interfaces.
	IsOpt_selection_item_orderContext()
}

type Opt_selection_item_orderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_selection_item_orderContext() *Opt_selection_item_orderContext {
	var p = new(Opt_selection_item_orderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_selection_item_order
	return p
}

func InitEmptyOpt_selection_item_orderContext(p *Opt_selection_item_orderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_selection_item_order
}

func (*Opt_selection_item_orderContext) IsOpt_selection_item_orderContext() {}

func NewOpt_selection_item_orderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_selection_item_orderContext {
	var p = new(Opt_selection_item_orderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_selection_item_order

	return p
}

func (s *Opt_selection_item_orderContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_selection_item_orderContext) Asc_or_desc() IAsc_or_descContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAsc_or_descContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAsc_or_descContext)
}

func (s *Opt_selection_item_orderContext) Null_order() INull_orderContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INull_orderContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INull_orderContext)
}

func (s *Opt_selection_item_orderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_selection_item_orderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_selection_item_orderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_selection_item_order(s)
	}
}

func (s *Opt_selection_item_orderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_selection_item_order(s)
	}
}

func (s *Opt_selection_item_orderContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_selection_item_order(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_selection_item_order() (localctx IOpt_selection_item_orderContext) {
	localctx = NewOpt_selection_item_orderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 952, GoogleSQLParserRULE_opt_selection_item_order)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5706)
		p.Asc_or_desc()
	}
	p.SetState(5708)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 699, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5707)
			p.Null_order()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAsc_or_descContext is an interface to support dynamic dispatch.
type IAsc_or_descContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ASC_SYMBOL() antlr.TerminalNode
	DESC_SYMBOL() antlr.TerminalNode

	// IsAsc_or_descContext differentiates from other interfaces.
	IsAsc_or_descContext()
}

type Asc_or_descContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsc_or_descContext() *Asc_or_descContext {
	var p = new(Asc_or_descContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_asc_or_desc
	return p
}

func InitEmptyAsc_or_descContext(p *Asc_or_descContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_asc_or_desc
}

func (*Asc_or_descContext) IsAsc_or_descContext() {}

func NewAsc_or_descContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Asc_or_descContext {
	var p = new(Asc_or_descContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_asc_or_desc

	return p
}

func (s *Asc_or_descContext) GetParser() antlr.Parser { return s.parser }

func (s *Asc_or_descContext) ASC_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserASC_SYMBOL, 0)
}

func (s *Asc_or_descContext) DESC_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDESC_SYMBOL, 0)
}

func (s *Asc_or_descContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Asc_or_descContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Asc_or_descContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAsc_or_desc(s)
	}
}

func (s *Asc_or_descContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAsc_or_desc(s)
	}
}

func (s *Asc_or_descContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAsc_or_desc(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Asc_or_desc() (localctx IAsc_or_descContext) {
	localctx = NewAsc_or_descContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 954, GoogleSQLParserRULE_asc_or_desc)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5710)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserASC_SYMBOL || _la == GoogleSQLParserDESC_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INull_orderContext is an interface to support dynamic dispatch.
type INull_orderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NULLS_SYMBOL() antlr.TerminalNode
	FIRST_SYMBOL() antlr.TerminalNode
	LAST_SYMBOL() antlr.TerminalNode

	// IsNull_orderContext differentiates from other interfaces.
	IsNull_orderContext()
}

type Null_orderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNull_orderContext() *Null_orderContext {
	var p = new(Null_orderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_null_order
	return p
}

func InitEmptyNull_orderContext(p *Null_orderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_null_order
}

func (*Null_orderContext) IsNull_orderContext() {}

func NewNull_orderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Null_orderContext {
	var p = new(Null_orderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_null_order

	return p
}

func (s *Null_orderContext) GetParser() antlr.Parser { return s.parser }

func (s *Null_orderContext) NULLS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNULLS_SYMBOL, 0)
}

func (s *Null_orderContext) FIRST_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFIRST_SYMBOL, 0)
}

func (s *Null_orderContext) LAST_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLAST_SYMBOL, 0)
}

func (s *Null_orderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Null_orderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Null_orderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterNull_order(s)
	}
}

func (s *Null_orderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitNull_order(s)
	}
}

func (s *Null_orderContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitNull_order(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Null_order() (localctx INull_orderContext) {
	localctx = NewNull_orderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 956, GoogleSQLParserRULE_null_order)
	p.SetState(5716)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 700, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5712)
			p.Match(GoogleSQLParserNULLS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5713)
			p.Match(GoogleSQLParserFIRST_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5714)
			p.Match(GoogleSQLParserNULLS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5715)
			p.Match(GoogleSQLParserLAST_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunction_name_from_keywordContext is an interface to support dynamic dispatch.
type IFunction_name_from_keywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IF_SYMBOL() antlr.TerminalNode
	GROUPING_SYMBOL() antlr.TerminalNode
	LEFT_SYMBOL() antlr.TerminalNode
	RIGHT_SYMBOL() antlr.TerminalNode
	COLLATE_SYMBOL() antlr.TerminalNode
	RANGE_SYMBOL() antlr.TerminalNode

	// IsFunction_name_from_keywordContext differentiates from other interfaces.
	IsFunction_name_from_keywordContext()
}

type Function_name_from_keywordContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_name_from_keywordContext() *Function_name_from_keywordContext {
	var p = new(Function_name_from_keywordContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_name_from_keyword
	return p
}

func InitEmptyFunction_name_from_keywordContext(p *Function_name_from_keywordContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_name_from_keyword
}

func (*Function_name_from_keywordContext) IsFunction_name_from_keywordContext() {}

func NewFunction_name_from_keywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_name_from_keywordContext {
	var p = new(Function_name_from_keywordContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_function_name_from_keyword

	return p
}

func (s *Function_name_from_keywordContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_name_from_keywordContext) IF_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIF_SYMBOL, 0)
}

func (s *Function_name_from_keywordContext) GROUPING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGROUPING_SYMBOL, 0)
}

func (s *Function_name_from_keywordContext) LEFT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLEFT_SYMBOL, 0)
}

func (s *Function_name_from_keywordContext) RIGHT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRIGHT_SYMBOL, 0)
}

func (s *Function_name_from_keywordContext) COLLATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOLLATE_SYMBOL, 0)
}

func (s *Function_name_from_keywordContext) RANGE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRANGE_SYMBOL, 0)
}

func (s *Function_name_from_keywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_name_from_keywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_name_from_keywordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFunction_name_from_keyword(s)
	}
}

func (s *Function_name_from_keywordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFunction_name_from_keyword(s)
	}
}

func (s *Function_name_from_keywordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFunction_name_from_keyword(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Function_name_from_keyword() (localctx IFunction_name_from_keywordContext) {
	localctx = NewFunction_name_from_keywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 958, GoogleSQLParserRULE_function_name_from_keyword)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5718)
		_la = p.GetTokenStream().LA(1)

		if !(((int64((_la-75)) & ^0x3f) == 0 && ((int64(1)<<(_la-75))&4398046527489) != 0) || ((int64((_la-301)) & ^0x3f) == 0 && ((int64(1)<<(_la-301))&7) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IReplace_fields_expressionContext is an interface to support dynamic dispatch.
type IReplace_fields_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Replace_fields_prefix() IReplace_fields_prefixContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsReplace_fields_expressionContext differentiates from other interfaces.
	IsReplace_fields_expressionContext()
}

type Replace_fields_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReplace_fields_expressionContext() *Replace_fields_expressionContext {
	var p = new(Replace_fields_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_replace_fields_expression
	return p
}

func InitEmptyReplace_fields_expressionContext(p *Replace_fields_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_replace_fields_expression
}

func (*Replace_fields_expressionContext) IsReplace_fields_expressionContext() {}

func NewReplace_fields_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Replace_fields_expressionContext {
	var p = new(Replace_fields_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_replace_fields_expression

	return p
}

func (s *Replace_fields_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Replace_fields_expressionContext) Replace_fields_prefix() IReplace_fields_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReplace_fields_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReplace_fields_prefixContext)
}

func (s *Replace_fields_expressionContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Replace_fields_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Replace_fields_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Replace_fields_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterReplace_fields_expression(s)
	}
}

func (s *Replace_fields_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitReplace_fields_expression(s)
	}
}

func (s *Replace_fields_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitReplace_fields_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Replace_fields_expression() (localctx IReplace_fields_expressionContext) {
	localctx = NewReplace_fields_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 960, GoogleSQLParserRULE_replace_fields_expression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5720)
		p.Replace_fields_prefix()
	}
	{
		p.SetState(5721)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IReplace_fields_prefixContext is an interface to support dynamic dispatch.
type IReplace_fields_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	REPLACE_FIELDS_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode
	AllReplace_fields_arg() []IReplace_fields_argContext
	Replace_fields_arg(i int) IReplace_fields_argContext

	// IsReplace_fields_prefixContext differentiates from other interfaces.
	IsReplace_fields_prefixContext()
}

type Replace_fields_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReplace_fields_prefixContext() *Replace_fields_prefixContext {
	var p = new(Replace_fields_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_replace_fields_prefix
	return p
}

func InitEmptyReplace_fields_prefixContext(p *Replace_fields_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_replace_fields_prefix
}

func (*Replace_fields_prefixContext) IsReplace_fields_prefixContext() {}

func NewReplace_fields_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Replace_fields_prefixContext {
	var p = new(Replace_fields_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_replace_fields_prefix

	return p
}

func (s *Replace_fields_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Replace_fields_prefixContext) REPLACE_FIELDS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPLACE_FIELDS_SYMBOL, 0)
}

func (s *Replace_fields_prefixContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Replace_fields_prefixContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Replace_fields_prefixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Replace_fields_prefixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Replace_fields_prefixContext) AllReplace_fields_arg() []IReplace_fields_argContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IReplace_fields_argContext); ok {
			len++
		}
	}

	tst := make([]IReplace_fields_argContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IReplace_fields_argContext); ok {
			tst[i] = t.(IReplace_fields_argContext)
			i++
		}
	}

	return tst
}

func (s *Replace_fields_prefixContext) Replace_fields_arg(i int) IReplace_fields_argContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReplace_fields_argContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReplace_fields_argContext)
}

func (s *Replace_fields_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Replace_fields_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Replace_fields_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterReplace_fields_prefix(s)
	}
}

func (s *Replace_fields_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitReplace_fields_prefix(s)
	}
}

func (s *Replace_fields_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitReplace_fields_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Replace_fields_prefix() (localctx IReplace_fields_prefixContext) {
	localctx = NewReplace_fields_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 962, GoogleSQLParserRULE_replace_fields_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5723)
		p.Match(GoogleSQLParserREPLACE_FIELDS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5724)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5725)
		p.expression(0)
	}
	{
		p.SetState(5726)
		p.Match(GoogleSQLParserCOMMA_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5727)
		p.Replace_fields_arg()
	}
	p.SetState(5732)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(5728)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5729)
			p.Replace_fields_arg()
		}

		p.SetState(5734)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IReplace_fields_argContext is an interface to support dynamic dispatch.
type IReplace_fields_argContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	AS_SYMBOL() antlr.TerminalNode
	Generalized_path_expression() IGeneralized_path_expressionContext
	Generalized_extension_path() IGeneralized_extension_pathContext

	// IsReplace_fields_argContext differentiates from other interfaces.
	IsReplace_fields_argContext()
}

type Replace_fields_argContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReplace_fields_argContext() *Replace_fields_argContext {
	var p = new(Replace_fields_argContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_replace_fields_arg
	return p
}

func InitEmptyReplace_fields_argContext(p *Replace_fields_argContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_replace_fields_arg
}

func (*Replace_fields_argContext) IsReplace_fields_argContext() {}

func NewReplace_fields_argContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Replace_fields_argContext {
	var p = new(Replace_fields_argContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_replace_fields_arg

	return p
}

func (s *Replace_fields_argContext) GetParser() antlr.Parser { return s.parser }

func (s *Replace_fields_argContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Replace_fields_argContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Replace_fields_argContext) Generalized_path_expression() IGeneralized_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGeneralized_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGeneralized_path_expressionContext)
}

func (s *Replace_fields_argContext) Generalized_extension_path() IGeneralized_extension_pathContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGeneralized_extension_pathContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGeneralized_extension_pathContext)
}

func (s *Replace_fields_argContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Replace_fields_argContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Replace_fields_argContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterReplace_fields_arg(s)
	}
}

func (s *Replace_fields_argContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitReplace_fields_arg(s)
	}
}

func (s *Replace_fields_argContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitReplace_fields_arg(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Replace_fields_arg() (localctx IReplace_fields_argContext) {
	localctx = NewReplace_fields_argContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 964, GoogleSQLParserRULE_replace_fields_arg)
	p.SetState(5743)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 702, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5735)
			p.expression(0)
		}
		{
			p.SetState(5736)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5737)
			p.generalized_path_expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5739)
			p.expression(0)
		}
		{
			p.SetState(5740)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5741)
			p.generalized_extension_path(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGeneralized_path_expressionContext is an interface to support dynamic dispatch.
type IGeneralized_path_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	Generalized_path_expression() IGeneralized_path_expressionContext
	DOT_SYMBOL() antlr.TerminalNode
	Generalized_extension_path() IGeneralized_extension_pathContext
	LS_BRACKET_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	RS_BRACKET_SYMBOL() antlr.TerminalNode

	// IsGeneralized_path_expressionContext differentiates from other interfaces.
	IsGeneralized_path_expressionContext()
}

type Generalized_path_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGeneralized_path_expressionContext() *Generalized_path_expressionContext {
	var p = new(Generalized_path_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_generalized_path_expression
	return p
}

func InitEmptyGeneralized_path_expressionContext(p *Generalized_path_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_generalized_path_expression
}

func (*Generalized_path_expressionContext) IsGeneralized_path_expressionContext() {}

func NewGeneralized_path_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Generalized_path_expressionContext {
	var p = new(Generalized_path_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_generalized_path_expression

	return p
}

func (s *Generalized_path_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Generalized_path_expressionContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Generalized_path_expressionContext) Generalized_path_expression() IGeneralized_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGeneralized_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGeneralized_path_expressionContext)
}

func (s *Generalized_path_expressionContext) DOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDOT_SYMBOL, 0)
}

func (s *Generalized_path_expressionContext) Generalized_extension_path() IGeneralized_extension_pathContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGeneralized_extension_pathContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGeneralized_extension_pathContext)
}

func (s *Generalized_path_expressionContext) LS_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLS_BRACKET_SYMBOL, 0)
}

func (s *Generalized_path_expressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Generalized_path_expressionContext) RS_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRS_BRACKET_SYMBOL, 0)
}

func (s *Generalized_path_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Generalized_path_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Generalized_path_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGeneralized_path_expression(s)
	}
}

func (s *Generalized_path_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGeneralized_path_expression(s)
	}
}

func (s *Generalized_path_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGeneralized_path_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Generalized_path_expression() (localctx IGeneralized_path_expressionContext) {
	return p.generalized_path_expression(0)
}

func (p *GoogleSQLParser) generalized_path_expression(_p int) (localctx IGeneralized_path_expressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewGeneralized_path_expressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IGeneralized_path_expressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 966
	p.EnterRecursionRule(localctx, 966, GoogleSQLParserRULE_generalized_path_expression, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5746)
		p.Identifier()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(5761)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 704, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(5759)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 703, p.GetParserRuleContext()) {
			case 1:
				localctx = NewGeneralized_path_expressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_generalized_path_expression)
				p.SetState(5748)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
					goto errorExit
				}
				{
					p.SetState(5749)
					p.Match(GoogleSQLParserDOT_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(5750)
					p.generalized_extension_path(0)
				}

			case 2:
				localctx = NewGeneralized_path_expressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_generalized_path_expression)
				p.SetState(5751)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
					goto errorExit
				}
				{
					p.SetState(5752)
					p.Match(GoogleSQLParserDOT_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(5753)
					p.Identifier()
				}

			case 3:
				localctx = NewGeneralized_path_expressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_generalized_path_expression)
				p.SetState(5754)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
					goto errorExit
				}
				{
					p.SetState(5755)
					p.Match(GoogleSQLParserLS_BRACKET_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(5756)
					p.expression(0)
				}
				{
					p.SetState(5757)
					p.Match(GoogleSQLParserRS_BRACKET_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(5763)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 704, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGeneralized_extension_pathContext is an interface to support dynamic dispatch.
type IGeneralized_extension_pathContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Generalized_extension_path() IGeneralized_extension_pathContext
	DOT_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext

	// IsGeneralized_extension_pathContext differentiates from other interfaces.
	IsGeneralized_extension_pathContext()
}

type Generalized_extension_pathContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGeneralized_extension_pathContext() *Generalized_extension_pathContext {
	var p = new(Generalized_extension_pathContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_generalized_extension_path
	return p
}

func InitEmptyGeneralized_extension_pathContext(p *Generalized_extension_pathContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_generalized_extension_path
}

func (*Generalized_extension_pathContext) IsGeneralized_extension_pathContext() {}

func NewGeneralized_extension_pathContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Generalized_extension_pathContext {
	var p = new(Generalized_extension_pathContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_generalized_extension_path

	return p
}

func (s *Generalized_extension_pathContext) GetParser() antlr.Parser { return s.parser }

func (s *Generalized_extension_pathContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Generalized_extension_pathContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Generalized_extension_pathContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Generalized_extension_pathContext) Generalized_extension_path() IGeneralized_extension_pathContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGeneralized_extension_pathContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGeneralized_extension_pathContext)
}

func (s *Generalized_extension_pathContext) DOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDOT_SYMBOL, 0)
}

func (s *Generalized_extension_pathContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Generalized_extension_pathContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Generalized_extension_pathContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Generalized_extension_pathContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterGeneralized_extension_path(s)
	}
}

func (s *Generalized_extension_pathContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitGeneralized_extension_path(s)
	}
}

func (s *Generalized_extension_pathContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitGeneralized_extension_path(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Generalized_extension_path() (localctx IGeneralized_extension_pathContext) {
	return p.generalized_extension_path(0)
}

func (p *GoogleSQLParser) generalized_extension_path(_p int) (localctx IGeneralized_extension_pathContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewGeneralized_extension_pathContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IGeneralized_extension_pathContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 968
	p.EnterRecursionRule(localctx, 968, GoogleSQLParserRULE_generalized_extension_path, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5765)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5766)
		p.Path_expression()
	}
	{
		p.SetState(5767)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(5780)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 706, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(5778)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 705, p.GetParserRuleContext()) {
			case 1:
				localctx = NewGeneralized_extension_pathContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_generalized_extension_path)
				p.SetState(5769)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
					goto errorExit
				}
				{
					p.SetState(5770)
					p.Match(GoogleSQLParserDOT_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(5771)
					p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(5772)
					p.Path_expression()
				}
				{
					p.SetState(5773)
					p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 2:
				localctx = NewGeneralized_extension_pathContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_generalized_extension_path)
				p.SetState(5775)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
					goto errorExit
				}
				{
					p.SetState(5776)
					p.Match(GoogleSQLParserDOT_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(5777)
					p.Identifier()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(5782)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 706, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWith_expressionContext is an interface to support dynamic dispatch.
type IWith_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WITH_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	With_expression_variable_prefix() IWith_expression_variable_prefixContext
	COMMA_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsWith_expressionContext differentiates from other interfaces.
	IsWith_expressionContext()
}

type With_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_expressionContext() *With_expressionContext {
	var p = new(With_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_expression
	return p
}

func InitEmptyWith_expressionContext(p *With_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_expression
}

func (*With_expressionContext) IsWith_expressionContext() {}

func NewWith_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_expressionContext {
	var p = new(With_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_with_expression

	return p
}

func (s *With_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *With_expressionContext) WITH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWITH_SYMBOL, 0)
}

func (s *With_expressionContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *With_expressionContext) With_expression_variable_prefix() IWith_expression_variable_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_expression_variable_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_expression_variable_prefixContext)
}

func (s *With_expressionContext) COMMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, 0)
}

func (s *With_expressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *With_expressionContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *With_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWith_expression(s)
	}
}

func (s *With_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWith_expression(s)
	}
}

func (s *With_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWith_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) With_expression() (localctx IWith_expressionContext) {
	localctx = NewWith_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 970, GoogleSQLParserRULE_with_expression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5783)
		p.Match(GoogleSQLParserWITH_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5784)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5785)
		p.With_expression_variable_prefix()
	}
	{
		p.SetState(5786)
		p.Match(GoogleSQLParserCOMMA_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5787)
		p.expression(0)
	}
	{
		p.SetState(5788)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWith_expression_variable_prefixContext is an interface to support dynamic dispatch.
type IWith_expression_variable_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllWith_expression_variable() []IWith_expression_variableContext
	With_expression_variable(i int) IWith_expression_variableContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsWith_expression_variable_prefixContext differentiates from other interfaces.
	IsWith_expression_variable_prefixContext()
}

type With_expression_variable_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_expression_variable_prefixContext() *With_expression_variable_prefixContext {
	var p = new(With_expression_variable_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_expression_variable_prefix
	return p
}

func InitEmptyWith_expression_variable_prefixContext(p *With_expression_variable_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_expression_variable_prefix
}

func (*With_expression_variable_prefixContext) IsWith_expression_variable_prefixContext() {}

func NewWith_expression_variable_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_expression_variable_prefixContext {
	var p = new(With_expression_variable_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_with_expression_variable_prefix

	return p
}

func (s *With_expression_variable_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *With_expression_variable_prefixContext) AllWith_expression_variable() []IWith_expression_variableContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWith_expression_variableContext); ok {
			len++
		}
	}

	tst := make([]IWith_expression_variableContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWith_expression_variableContext); ok {
			tst[i] = t.(IWith_expression_variableContext)
			i++
		}
	}

	return tst
}

func (s *With_expression_variable_prefixContext) With_expression_variable(i int) IWith_expression_variableContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_expression_variableContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_expression_variableContext)
}

func (s *With_expression_variable_prefixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *With_expression_variable_prefixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *With_expression_variable_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_expression_variable_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_expression_variable_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWith_expression_variable_prefix(s)
	}
}

func (s *With_expression_variable_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWith_expression_variable_prefix(s)
	}
}

func (s *With_expression_variable_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWith_expression_variable_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) With_expression_variable_prefix() (localctx IWith_expression_variable_prefixContext) {
	localctx = NewWith_expression_variable_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 972, GoogleSQLParserRULE_with_expression_variable_prefix)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5790)
		p.With_expression_variable()
	}
	p.SetState(5795)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 707, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(5791)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(5792)
				p.With_expression_variable()
			}

		}
		p.SetState(5797)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 707, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWith_expression_variableContext is an interface to support dynamic dispatch.
type IWith_expression_variableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	AS_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsWith_expression_variableContext differentiates from other interfaces.
	IsWith_expression_variableContext()
}

type With_expression_variableContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_expression_variableContext() *With_expression_variableContext {
	var p = new(With_expression_variableContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_expression_variable
	return p
}

func InitEmptyWith_expression_variableContext(p *With_expression_variableContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_expression_variable
}

func (*With_expression_variableContext) IsWith_expression_variableContext() {}

func NewWith_expression_variableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_expression_variableContext {
	var p = new(With_expression_variableContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_with_expression_variable

	return p
}

func (s *With_expression_variableContext) GetParser() antlr.Parser { return s.parser }

func (s *With_expression_variableContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *With_expression_variableContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *With_expression_variableContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *With_expression_variableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_expression_variableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_expression_variableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWith_expression_variable(s)
	}
}

func (s *With_expression_variableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWith_expression_variable(s)
	}
}

func (s *With_expression_variableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWith_expression_variable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) With_expression_variable() (localctx IWith_expression_variableContext) {
	localctx = NewWith_expression_variableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 974, GoogleSQLParserRULE_with_expression_variable)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5798)
		p.Identifier()
	}
	{
		p.SetState(5799)
		p.Match(GoogleSQLParserAS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5800)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExtract_expressionContext is an interface to support dynamic dispatch.
type IExtract_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Extract_expression_base() IExtract_expression_baseContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	AT_SYMBOL() antlr.TerminalNode
	TIME_SYMBOL() antlr.TerminalNode
	ZONE_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsExtract_expressionContext differentiates from other interfaces.
	IsExtract_expressionContext()
}

type Extract_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExtract_expressionContext() *Extract_expressionContext {
	var p = new(Extract_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_extract_expression
	return p
}

func InitEmptyExtract_expressionContext(p *Extract_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_extract_expression
}

func (*Extract_expressionContext) IsExtract_expressionContext() {}

func NewExtract_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Extract_expressionContext {
	var p = new(Extract_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_extract_expression

	return p
}

func (s *Extract_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Extract_expressionContext) Extract_expression_base() IExtract_expression_baseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExtract_expression_baseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExtract_expression_baseContext)
}

func (s *Extract_expressionContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Extract_expressionContext) AT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAT_SYMBOL, 0)
}

func (s *Extract_expressionContext) TIME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTIME_SYMBOL, 0)
}

func (s *Extract_expressionContext) ZONE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserZONE_SYMBOL, 0)
}

func (s *Extract_expressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Extract_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Extract_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Extract_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterExtract_expression(s)
	}
}

func (s *Extract_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitExtract_expression(s)
	}
}

func (s *Extract_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitExtract_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Extract_expression() (localctx IExtract_expressionContext) {
	localctx = NewExtract_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 976, GoogleSQLParserRULE_extract_expression)
	p.SetState(5812)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 708, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5802)
			p.Extract_expression_base()
		}
		{
			p.SetState(5803)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5805)
			p.Extract_expression_base()
		}
		{
			p.SetState(5806)
			p.Match(GoogleSQLParserAT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5807)
			p.Match(GoogleSQLParserTIME_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5808)
			p.Match(GoogleSQLParserZONE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5809)
			p.expression(0)
		}
		{
			p.SetState(5810)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExtract_expression_baseContext is an interface to support dynamic dispatch.
type IExtract_expression_baseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EXTRACT_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	FROM_SYMBOL() antlr.TerminalNode

	// IsExtract_expression_baseContext differentiates from other interfaces.
	IsExtract_expression_baseContext()
}

type Extract_expression_baseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExtract_expression_baseContext() *Extract_expression_baseContext {
	var p = new(Extract_expression_baseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_extract_expression_base
	return p
}

func InitEmptyExtract_expression_baseContext(p *Extract_expression_baseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_extract_expression_base
}

func (*Extract_expression_baseContext) IsExtract_expression_baseContext() {}

func NewExtract_expression_baseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Extract_expression_baseContext {
	var p = new(Extract_expression_baseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_extract_expression_base

	return p
}

func (s *Extract_expression_baseContext) GetParser() antlr.Parser { return s.parser }

func (s *Extract_expression_baseContext) EXTRACT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXTRACT_SYMBOL, 0)
}

func (s *Extract_expression_baseContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Extract_expression_baseContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *Extract_expression_baseContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Extract_expression_baseContext) FROM_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFROM_SYMBOL, 0)
}

func (s *Extract_expression_baseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Extract_expression_baseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Extract_expression_baseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterExtract_expression_base(s)
	}
}

func (s *Extract_expression_baseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitExtract_expression_base(s)
	}
}

func (s *Extract_expression_baseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitExtract_expression_base(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Extract_expression_base() (localctx IExtract_expression_baseContext) {
	localctx = NewExtract_expression_baseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 978, GoogleSQLParserRULE_extract_expression_base)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5814)
		p.Match(GoogleSQLParserEXTRACT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5815)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5816)
		p.expression(0)
	}
	{
		p.SetState(5817)
		p.Match(GoogleSQLParserFROM_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5818)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_formatContext is an interface to support dynamic dispatch.
type IOpt_formatContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FORMAT_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	Opt_at_time_zone() IOpt_at_time_zoneContext

	// IsOpt_formatContext differentiates from other interfaces.
	IsOpt_formatContext()
}

type Opt_formatContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_formatContext() *Opt_formatContext {
	var p = new(Opt_formatContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_format
	return p
}

func InitEmptyOpt_formatContext(p *Opt_formatContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_format
}

func (*Opt_formatContext) IsOpt_formatContext() {}

func NewOpt_formatContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_formatContext {
	var p = new(Opt_formatContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_format

	return p
}

func (s *Opt_formatContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_formatContext) FORMAT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFORMAT_SYMBOL, 0)
}

func (s *Opt_formatContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Opt_formatContext) Opt_at_time_zone() IOpt_at_time_zoneContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_at_time_zoneContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_at_time_zoneContext)
}

func (s *Opt_formatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_formatContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_formatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_format(s)
	}
}

func (s *Opt_formatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_format(s)
	}
}

func (s *Opt_formatContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_format(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_format() (localctx IOpt_formatContext) {
	localctx = NewOpt_formatContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 980, GoogleSQLParserRULE_opt_format)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5820)
		p.Match(GoogleSQLParserFORMAT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5821)
		p.expression(0)
	}
	p.SetState(5823)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAT_SYMBOL {
		{
			p.SetState(5822)
			p.Opt_at_time_zone()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_at_time_zoneContext is an interface to support dynamic dispatch.
type IOpt_at_time_zoneContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AT_SYMBOL() antlr.TerminalNode
	TIME_SYMBOL() antlr.TerminalNode
	ZONE_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsOpt_at_time_zoneContext differentiates from other interfaces.
	IsOpt_at_time_zoneContext()
}

type Opt_at_time_zoneContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_at_time_zoneContext() *Opt_at_time_zoneContext {
	var p = new(Opt_at_time_zoneContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_at_time_zone
	return p
}

func InitEmptyOpt_at_time_zoneContext(p *Opt_at_time_zoneContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_at_time_zone
}

func (*Opt_at_time_zoneContext) IsOpt_at_time_zoneContext() {}

func NewOpt_at_time_zoneContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_at_time_zoneContext {
	var p = new(Opt_at_time_zoneContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_at_time_zone

	return p
}

func (s *Opt_at_time_zoneContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_at_time_zoneContext) AT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAT_SYMBOL, 0)
}

func (s *Opt_at_time_zoneContext) TIME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTIME_SYMBOL, 0)
}

func (s *Opt_at_time_zoneContext) ZONE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserZONE_SYMBOL, 0)
}

func (s *Opt_at_time_zoneContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Opt_at_time_zoneContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_at_time_zoneContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_at_time_zoneContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_at_time_zone(s)
	}
}

func (s *Opt_at_time_zoneContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_at_time_zone(s)
	}
}

func (s *Opt_at_time_zoneContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_at_time_zone(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_at_time_zone() (localctx IOpt_at_time_zoneContext) {
	localctx = NewOpt_at_time_zoneContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 982, GoogleSQLParserRULE_opt_at_time_zone)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5825)
		p.Match(GoogleSQLParserAT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5826)
		p.Match(GoogleSQLParserTIME_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5827)
		p.Match(GoogleSQLParserZONE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5828)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICast_expressionContext is an interface to support dynamic dispatch.
type ICast_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllCAST_SYMBOL() []antlr.TerminalNode
	CAST_SYMBOL(i int) antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	AS_SYMBOL() antlr.TerminalNode
	Type_() ITypeContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Opt_format() IOpt_formatContext
	AllSAFE_CAST_SYMBOL() []antlr.TerminalNode
	SAFE_CAST_SYMBOL(i int) antlr.TerminalNode

	// IsCast_expressionContext differentiates from other interfaces.
	IsCast_expressionContext()
}

type Cast_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCast_expressionContext() *Cast_expressionContext {
	var p = new(Cast_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_cast_expression
	return p
}

func InitEmptyCast_expressionContext(p *Cast_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_cast_expression
}

func (*Cast_expressionContext) IsCast_expressionContext() {}

func NewCast_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cast_expressionContext {
	var p = new(Cast_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_cast_expression

	return p
}

func (s *Cast_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Cast_expressionContext) AllCAST_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCAST_SYMBOL)
}

func (s *Cast_expressionContext) CAST_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCAST_SYMBOL, i)
}

func (s *Cast_expressionContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Cast_expressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Cast_expressionContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Cast_expressionContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Cast_expressionContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Cast_expressionContext) Opt_format() IOpt_formatContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_formatContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_formatContext)
}

func (s *Cast_expressionContext) AllSAFE_CAST_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserSAFE_CAST_SYMBOL)
}

func (s *Cast_expressionContext) SAFE_CAST_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSAFE_CAST_SYMBOL, i)
}

func (s *Cast_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cast_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cast_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCast_expression(s)
	}
}

func (s *Cast_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCast_expression(s)
	}
}

func (s *Cast_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCast_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Cast_expression() (localctx ICast_expressionContext) {
	localctx = NewCast_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 984, GoogleSQLParserRULE_cast_expression)
	var _la int

	p.SetState(5858)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 712, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5830)
			p.Match(GoogleSQLParserCAST_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5831)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5832)
			p.expression(0)
		}
		{
			p.SetState(5833)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5834)
			p.Type_()
		}
		p.SetState(5836)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserFORMAT_SYMBOL {
			{
				p.SetState(5835)
				p.Opt_format()
			}

		}
		{
			p.SetState(5838)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5840)
			p.Match(GoogleSQLParserCAST_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5841)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5842)
			p.Match(GoogleSQLParserCAST_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("The argument to CAST is an expression, not a query; to use a query as an expression, the query must be wrapped with additional parentheses to make it a scalar subquery expression", nil, nil)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5844)
			p.Match(GoogleSQLParserSAFE_CAST_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5845)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5846)
			p.expression(0)
		}
		{
			p.SetState(5847)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5848)
			p.Type_()
		}
		p.SetState(5850)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserFORMAT_SYMBOL {
			{
				p.SetState(5849)
				p.Opt_format()
			}

		}
		{
			p.SetState(5852)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5854)
			p.Match(GoogleSQLParserSAFE_CAST_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5855)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5856)
			p.Match(GoogleSQLParserSAFE_CAST_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("The argument to CAST is an expression, not a query; to use a query as an expression, the query must be wrapped with additional parentheses to make it a scalar subquery expression", nil, nil)

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICase_expressionContext is an interface to support dynamic dispatch.
type ICase_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Case_expression_prefix() ICase_expression_prefixContext
	END_SYMBOL() antlr.TerminalNode
	ELSE_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsCase_expressionContext differentiates from other interfaces.
	IsCase_expressionContext()
}

type Case_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCase_expressionContext() *Case_expressionContext {
	var p = new(Case_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_case_expression
	return p
}

func InitEmptyCase_expressionContext(p *Case_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_case_expression
}

func (*Case_expressionContext) IsCase_expressionContext() {}

func NewCase_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Case_expressionContext {
	var p = new(Case_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_case_expression

	return p
}

func (s *Case_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Case_expressionContext) Case_expression_prefix() ICase_expression_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICase_expression_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICase_expression_prefixContext)
}

func (s *Case_expressionContext) END_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEND_SYMBOL, 0)
}

func (s *Case_expressionContext) ELSE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserELSE_SYMBOL, 0)
}

func (s *Case_expressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Case_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Case_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCase_expression(s)
	}
}

func (s *Case_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCase_expression(s)
	}
}

func (s *Case_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCase_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Case_expression() (localctx ICase_expressionContext) {
	localctx = NewCase_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 986, GoogleSQLParserRULE_case_expression)
	p.SetState(5868)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 713, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5860)
			p.Case_expression_prefix()
		}
		{
			p.SetState(5861)
			p.Match(GoogleSQLParserEND_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5863)
			p.Case_expression_prefix()
		}
		{
			p.SetState(5864)
			p.Match(GoogleSQLParserELSE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5865)
			p.expression(0)
		}
		{
			p.SetState(5866)
			p.Match(GoogleSQLParserEND_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICase_expression_prefixContext is an interface to support dynamic dispatch.
type ICase_expression_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Case_no_value_expression_prefix() ICase_no_value_expression_prefixContext
	Case_value_expression_prefix() ICase_value_expression_prefixContext

	// IsCase_expression_prefixContext differentiates from other interfaces.
	IsCase_expression_prefixContext()
}

type Case_expression_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCase_expression_prefixContext() *Case_expression_prefixContext {
	var p = new(Case_expression_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_case_expression_prefix
	return p
}

func InitEmptyCase_expression_prefixContext(p *Case_expression_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_case_expression_prefix
}

func (*Case_expression_prefixContext) IsCase_expression_prefixContext() {}

func NewCase_expression_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Case_expression_prefixContext {
	var p = new(Case_expression_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_case_expression_prefix

	return p
}

func (s *Case_expression_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Case_expression_prefixContext) Case_no_value_expression_prefix() ICase_no_value_expression_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICase_no_value_expression_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICase_no_value_expression_prefixContext)
}

func (s *Case_expression_prefixContext) Case_value_expression_prefix() ICase_value_expression_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICase_value_expression_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICase_value_expression_prefixContext)
}

func (s *Case_expression_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_expression_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Case_expression_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCase_expression_prefix(s)
	}
}

func (s *Case_expression_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCase_expression_prefix(s)
	}
}

func (s *Case_expression_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCase_expression_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Case_expression_prefix() (localctx ICase_expression_prefixContext) {
	localctx = NewCase_expression_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 988, GoogleSQLParserRULE_case_expression_prefix)
	p.SetState(5872)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 714, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5870)
			p.Case_no_value_expression_prefix()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5871)
			p.Case_value_expression_prefix()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICase_value_expression_prefixContext is an interface to support dynamic dispatch.
type ICase_value_expression_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CASE_SYMBOL() antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	AllWHEN_SYMBOL() []antlr.TerminalNode
	WHEN_SYMBOL(i int) antlr.TerminalNode
	AllTHEN_SYMBOL() []antlr.TerminalNode
	THEN_SYMBOL(i int) antlr.TerminalNode

	// IsCase_value_expression_prefixContext differentiates from other interfaces.
	IsCase_value_expression_prefixContext()
}

type Case_value_expression_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCase_value_expression_prefixContext() *Case_value_expression_prefixContext {
	var p = new(Case_value_expression_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_case_value_expression_prefix
	return p
}

func InitEmptyCase_value_expression_prefixContext(p *Case_value_expression_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_case_value_expression_prefix
}

func (*Case_value_expression_prefixContext) IsCase_value_expression_prefixContext() {}

func NewCase_value_expression_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Case_value_expression_prefixContext {
	var p = new(Case_value_expression_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_case_value_expression_prefix

	return p
}

func (s *Case_value_expression_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Case_value_expression_prefixContext) CASE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCASE_SYMBOL, 0)
}

func (s *Case_value_expression_prefixContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *Case_value_expression_prefixContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Case_value_expression_prefixContext) AllWHEN_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserWHEN_SYMBOL)
}

func (s *Case_value_expression_prefixContext) WHEN_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWHEN_SYMBOL, i)
}

func (s *Case_value_expression_prefixContext) AllTHEN_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserTHEN_SYMBOL)
}

func (s *Case_value_expression_prefixContext) THEN_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTHEN_SYMBOL, i)
}

func (s *Case_value_expression_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_value_expression_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Case_value_expression_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCase_value_expression_prefix(s)
	}
}

func (s *Case_value_expression_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCase_value_expression_prefix(s)
	}
}

func (s *Case_value_expression_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCase_value_expression_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Case_value_expression_prefix() (localctx ICase_value_expression_prefixContext) {
	localctx = NewCase_value_expression_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 990, GoogleSQLParserRULE_case_value_expression_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5874)
		p.Match(GoogleSQLParserCASE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5875)
		p.expression(0)
	}
	p.SetState(5881)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == GoogleSQLParserWHEN_SYMBOL {
		{
			p.SetState(5876)
			p.Match(GoogleSQLParserWHEN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5877)
			p.expression(0)
		}
		{
			p.SetState(5878)
			p.Match(GoogleSQLParserTHEN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5879)
			p.expression(0)
		}

		p.SetState(5883)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICase_no_value_expression_prefixContext is an interface to support dynamic dispatch.
type ICase_no_value_expression_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CASE_SYMBOL() antlr.TerminalNode
	AllWHEN_SYMBOL() []antlr.TerminalNode
	WHEN_SYMBOL(i int) antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	AllTHEN_SYMBOL() []antlr.TerminalNode
	THEN_SYMBOL(i int) antlr.TerminalNode

	// IsCase_no_value_expression_prefixContext differentiates from other interfaces.
	IsCase_no_value_expression_prefixContext()
}

type Case_no_value_expression_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCase_no_value_expression_prefixContext() *Case_no_value_expression_prefixContext {
	var p = new(Case_no_value_expression_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_case_no_value_expression_prefix
	return p
}

func InitEmptyCase_no_value_expression_prefixContext(p *Case_no_value_expression_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_case_no_value_expression_prefix
}

func (*Case_no_value_expression_prefixContext) IsCase_no_value_expression_prefixContext() {}

func NewCase_no_value_expression_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Case_no_value_expression_prefixContext {
	var p = new(Case_no_value_expression_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_case_no_value_expression_prefix

	return p
}

func (s *Case_no_value_expression_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Case_no_value_expression_prefixContext) CASE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCASE_SYMBOL, 0)
}

func (s *Case_no_value_expression_prefixContext) AllWHEN_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserWHEN_SYMBOL)
}

func (s *Case_no_value_expression_prefixContext) WHEN_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWHEN_SYMBOL, i)
}

func (s *Case_no_value_expression_prefixContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *Case_no_value_expression_prefixContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Case_no_value_expression_prefixContext) AllTHEN_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserTHEN_SYMBOL)
}

func (s *Case_no_value_expression_prefixContext) THEN_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTHEN_SYMBOL, i)
}

func (s *Case_no_value_expression_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_no_value_expression_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Case_no_value_expression_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCase_no_value_expression_prefix(s)
	}
}

func (s *Case_no_value_expression_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCase_no_value_expression_prefix(s)
	}
}

func (s *Case_no_value_expression_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCase_no_value_expression_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Case_no_value_expression_prefix() (localctx ICase_no_value_expression_prefixContext) {
	localctx = NewCase_no_value_expression_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 992, GoogleSQLParserRULE_case_no_value_expression_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5885)
		p.Match(GoogleSQLParserCASE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(5891)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == GoogleSQLParserWHEN_SYMBOL {
		{
			p.SetState(5886)
			p.Match(GoogleSQLParserWHEN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5887)
			p.expression(0)
		}
		{
			p.SetState(5888)
			p.Match(GoogleSQLParserTHEN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5889)
			p.expression(0)
		}

		p.SetState(5893)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStruct_braced_constructorContext is an interface to support dynamic dispatch.
type IStruct_braced_constructorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetStype returns the stype rule contexts.
	GetStype() IStruct_typeContext

	// GetCtor returns the ctor rule contexts.
	GetCtor() IBraced_constructorContext

	// SetStype sets the stype rule contexts.
	SetStype(IStruct_typeContext)

	// SetCtor sets the ctor rule contexts.
	SetCtor(IBraced_constructorContext)

	// Getter signatures
	Struct_type() IStruct_typeContext
	Braced_constructor() IBraced_constructorContext
	STRUCT_SYMBOL() antlr.TerminalNode

	// IsStruct_braced_constructorContext differentiates from other interfaces.
	IsStruct_braced_constructorContext()
}

type Struct_braced_constructorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	stype  IStruct_typeContext
	ctor   IBraced_constructorContext
}

func NewEmptyStruct_braced_constructorContext() *Struct_braced_constructorContext {
	var p = new(Struct_braced_constructorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_braced_constructor
	return p
}

func InitEmptyStruct_braced_constructorContext(p *Struct_braced_constructorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_braced_constructor
}

func (*Struct_braced_constructorContext) IsStruct_braced_constructorContext() {}

func NewStruct_braced_constructorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Struct_braced_constructorContext {
	var p = new(Struct_braced_constructorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_struct_braced_constructor

	return p
}

func (s *Struct_braced_constructorContext) GetParser() antlr.Parser { return s.parser }

func (s *Struct_braced_constructorContext) GetStype() IStruct_typeContext { return s.stype }

func (s *Struct_braced_constructorContext) GetCtor() IBraced_constructorContext { return s.ctor }

func (s *Struct_braced_constructorContext) SetStype(v IStruct_typeContext) { s.stype = v }

func (s *Struct_braced_constructorContext) SetCtor(v IBraced_constructorContext) { s.ctor = v }

func (s *Struct_braced_constructorContext) Struct_type() IStruct_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_typeContext)
}

func (s *Struct_braced_constructorContext) Braced_constructor() IBraced_constructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBraced_constructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBraced_constructorContext)
}

func (s *Struct_braced_constructorContext) STRUCT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTRUCT_SYMBOL, 0)
}

func (s *Struct_braced_constructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Struct_braced_constructorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Struct_braced_constructorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStruct_braced_constructor(s)
	}
}

func (s *Struct_braced_constructorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStruct_braced_constructor(s)
	}
}

func (s *Struct_braced_constructorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStruct_braced_constructor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Struct_braced_constructor() (localctx IStruct_braced_constructorContext) {
	localctx = NewStruct_braced_constructorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 994, GoogleSQLParserRULE_struct_braced_constructor)
	p.SetState(5900)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 717, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5895)

			var _x = p.Struct_type()

			localctx.(*Struct_braced_constructorContext).stype = _x
		}
		{
			p.SetState(5896)

			var _x = p.Braced_constructor()

			localctx.(*Struct_braced_constructorContext).ctor = _x
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5898)
			p.Match(GoogleSQLParserSTRUCT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5899)

			var _x = p.Braced_constructor()

			localctx.(*Struct_braced_constructorContext).ctor = _x
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBraced_new_constructorContext is an interface to support dynamic dispatch.
type IBraced_new_constructorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NEW_SYMBOL() antlr.TerminalNode
	Type_name() IType_nameContext
	New_constructor() INew_constructorContext

	// IsBraced_new_constructorContext differentiates from other interfaces.
	IsBraced_new_constructorContext()
}

type Braced_new_constructorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBraced_new_constructorContext() *Braced_new_constructorContext {
	var p = new(Braced_new_constructorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_braced_new_constructor
	return p
}

func InitEmptyBraced_new_constructorContext(p *Braced_new_constructorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_braced_new_constructor
}

func (*Braced_new_constructorContext) IsBraced_new_constructorContext() {}

func NewBraced_new_constructorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Braced_new_constructorContext {
	var p = new(Braced_new_constructorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_braced_new_constructor

	return p
}

func (s *Braced_new_constructorContext) GetParser() antlr.Parser { return s.parser }

func (s *Braced_new_constructorContext) NEW_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNEW_SYMBOL, 0)
}

func (s *Braced_new_constructorContext) Type_name() IType_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_nameContext)
}

func (s *Braced_new_constructorContext) New_constructor() INew_constructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INew_constructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INew_constructorContext)
}

func (s *Braced_new_constructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Braced_new_constructorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Braced_new_constructorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBraced_new_constructor(s)
	}
}

func (s *Braced_new_constructorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBraced_new_constructor(s)
	}
}

func (s *Braced_new_constructorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBraced_new_constructor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Braced_new_constructor() (localctx IBraced_new_constructorContext) {
	localctx = NewBraced_new_constructorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 996, GoogleSQLParserRULE_braced_new_constructor)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5902)
		p.Match(GoogleSQLParserNEW_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5903)
		p.Type_name()
	}
	{
		p.SetState(5904)
		p.New_constructor()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBraced_constructorContext is an interface to support dynamic dispatch.
type IBraced_constructorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Braced_constructor_start() IBraced_constructor_startContext
	AllRC_BRACKET_SYMBOL() []antlr.TerminalNode
	RC_BRACKET_SYMBOL(i int) antlr.TerminalNode
	Braced_constructor_prefix() IBraced_constructor_prefixContext
	COMMA_SYMBOL() antlr.TerminalNode

	// IsBraced_constructorContext differentiates from other interfaces.
	IsBraced_constructorContext()
}

type Braced_constructorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBraced_constructorContext() *Braced_constructorContext {
	var p = new(Braced_constructorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor
	return p
}

func InitEmptyBraced_constructorContext(p *Braced_constructorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor
}

func (*Braced_constructorContext) IsBraced_constructorContext() {}

func NewBraced_constructorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Braced_constructorContext {
	var p = new(Braced_constructorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor

	return p
}

func (s *Braced_constructorContext) GetParser() antlr.Parser { return s.parser }

func (s *Braced_constructorContext) Braced_constructor_start() IBraced_constructor_startContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBraced_constructor_startContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBraced_constructor_startContext)
}

func (s *Braced_constructorContext) AllRC_BRACKET_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserRC_BRACKET_SYMBOL)
}

func (s *Braced_constructorContext) RC_BRACKET_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRC_BRACKET_SYMBOL, i)
}

func (s *Braced_constructorContext) Braced_constructor_prefix() IBraced_constructor_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBraced_constructor_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBraced_constructor_prefixContext)
}

func (s *Braced_constructorContext) COMMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, 0)
}

func (s *Braced_constructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Braced_constructorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Braced_constructorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBraced_constructor(s)
	}
}

func (s *Braced_constructorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBraced_constructor(s)
	}
}

func (s *Braced_constructorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBraced_constructor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Braced_constructor() (localctx IBraced_constructorContext) {
	localctx = NewBraced_constructorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 998, GoogleSQLParserRULE_braced_constructor)
	p.SetState(5914)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 718, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5906)
			p.Braced_constructor_start()
		}
		{
			p.SetState(5907)
			p.Match(GoogleSQLParserRC_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5909)
			p.braced_constructor_prefix(0)
		}
		{
			p.SetState(5910)
			p.Match(GoogleSQLParserRC_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5911)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5912)
			p.Match(GoogleSQLParserRC_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBraced_constructor_startContext is an interface to support dynamic dispatch.
type IBraced_constructor_startContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RC_BRACKET_SYMBOL() antlr.TerminalNode

	// IsBraced_constructor_startContext differentiates from other interfaces.
	IsBraced_constructor_startContext()
}

type Braced_constructor_startContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBraced_constructor_startContext() *Braced_constructor_startContext {
	var p = new(Braced_constructor_startContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_start
	return p
}

func InitEmptyBraced_constructor_startContext(p *Braced_constructor_startContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_start
}

func (*Braced_constructor_startContext) IsBraced_constructor_startContext() {}

func NewBraced_constructor_startContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Braced_constructor_startContext {
	var p = new(Braced_constructor_startContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_start

	return p
}

func (s *Braced_constructor_startContext) GetParser() antlr.Parser { return s.parser }

func (s *Braced_constructor_startContext) RC_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRC_BRACKET_SYMBOL, 0)
}

func (s *Braced_constructor_startContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Braced_constructor_startContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Braced_constructor_startContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBraced_constructor_start(s)
	}
}

func (s *Braced_constructor_startContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBraced_constructor_start(s)
	}
}

func (s *Braced_constructor_startContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBraced_constructor_start(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Braced_constructor_start() (localctx IBraced_constructor_startContext) {
	localctx = NewBraced_constructor_startContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1000, GoogleSQLParserRULE_braced_constructor_start)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5916)
		p.Match(GoogleSQLParserRC_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBraced_constructor_prefixContext is an interface to support dynamic dispatch.
type IBraced_constructor_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Braced_constructor_start() IBraced_constructor_startContext
	Braced_constructor_field() IBraced_constructor_fieldContext
	Braced_constructor_extension() IBraced_constructor_extensionContext
	Braced_constructor_prefix() IBraced_constructor_prefixContext
	COMMA_SYMBOL() antlr.TerminalNode

	// IsBraced_constructor_prefixContext differentiates from other interfaces.
	IsBraced_constructor_prefixContext()
}

type Braced_constructor_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBraced_constructor_prefixContext() *Braced_constructor_prefixContext {
	var p = new(Braced_constructor_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_prefix
	return p
}

func InitEmptyBraced_constructor_prefixContext(p *Braced_constructor_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_prefix
}

func (*Braced_constructor_prefixContext) IsBraced_constructor_prefixContext() {}

func NewBraced_constructor_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Braced_constructor_prefixContext {
	var p = new(Braced_constructor_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_prefix

	return p
}

func (s *Braced_constructor_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Braced_constructor_prefixContext) Braced_constructor_start() IBraced_constructor_startContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBraced_constructor_startContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBraced_constructor_startContext)
}

func (s *Braced_constructor_prefixContext) Braced_constructor_field() IBraced_constructor_fieldContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBraced_constructor_fieldContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBraced_constructor_fieldContext)
}

func (s *Braced_constructor_prefixContext) Braced_constructor_extension() IBraced_constructor_extensionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBraced_constructor_extensionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBraced_constructor_extensionContext)
}

func (s *Braced_constructor_prefixContext) Braced_constructor_prefix() IBraced_constructor_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBraced_constructor_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBraced_constructor_prefixContext)
}

func (s *Braced_constructor_prefixContext) COMMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, 0)
}

func (s *Braced_constructor_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Braced_constructor_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Braced_constructor_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBraced_constructor_prefix(s)
	}
}

func (s *Braced_constructor_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBraced_constructor_prefix(s)
	}
}

func (s *Braced_constructor_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBraced_constructor_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Braced_constructor_prefix() (localctx IBraced_constructor_prefixContext) {
	return p.braced_constructor_prefix(0)
}

func (p *GoogleSQLParser) braced_constructor_prefix(_p int) (localctx IBraced_constructor_prefixContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewBraced_constructor_prefixContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBraced_constructor_prefixContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 1002
	p.EnterRecursionRule(localctx, 1002, GoogleSQLParserRULE_braced_constructor_prefix, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5925)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 719, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(5919)
			p.Braced_constructor_start()
		}
		{
			p.SetState(5920)
			p.Braced_constructor_field()
		}

	case 2:
		{
			p.SetState(5922)
			p.Braced_constructor_start()
		}
		{
			p.SetState(5923)
			p.Braced_constructor_extension()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(5937)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 721, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(5935)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 720, p.GetParserRuleContext()) {
			case 1:
				localctx = NewBraced_constructor_prefixContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_braced_constructor_prefix)
				p.SetState(5927)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
					goto errorExit
				}
				{
					p.SetState(5928)
					p.Match(GoogleSQLParserCOMMA_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(5929)
					p.Braced_constructor_field()
				}

			case 2:
				localctx = NewBraced_constructor_prefixContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_braced_constructor_prefix)
				p.SetState(5930)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
					goto errorExit
				}
				{
					p.SetState(5931)
					p.Braced_constructor_field()
				}

			case 3:
				localctx = NewBraced_constructor_prefixContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_braced_constructor_prefix)
				p.SetState(5932)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
					goto errorExit
				}
				{
					p.SetState(5933)
					p.Match(GoogleSQLParserCOMMA_SYMBOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(5934)
					p.Braced_constructor_extension()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(5939)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 721, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBraced_constructor_fieldContext is an interface to support dynamic dispatch.
type IBraced_constructor_fieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Braced_constructor_lhs() IBraced_constructor_lhsContext
	Braced_constructor_field_value() IBraced_constructor_field_valueContext

	// IsBraced_constructor_fieldContext differentiates from other interfaces.
	IsBraced_constructor_fieldContext()
}

type Braced_constructor_fieldContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBraced_constructor_fieldContext() *Braced_constructor_fieldContext {
	var p = new(Braced_constructor_fieldContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_field
	return p
}

func InitEmptyBraced_constructor_fieldContext(p *Braced_constructor_fieldContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_field
}

func (*Braced_constructor_fieldContext) IsBraced_constructor_fieldContext() {}

func NewBraced_constructor_fieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Braced_constructor_fieldContext {
	var p = new(Braced_constructor_fieldContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_field

	return p
}

func (s *Braced_constructor_fieldContext) GetParser() antlr.Parser { return s.parser }

func (s *Braced_constructor_fieldContext) Braced_constructor_lhs() IBraced_constructor_lhsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBraced_constructor_lhsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBraced_constructor_lhsContext)
}

func (s *Braced_constructor_fieldContext) Braced_constructor_field_value() IBraced_constructor_field_valueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBraced_constructor_field_valueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBraced_constructor_field_valueContext)
}

func (s *Braced_constructor_fieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Braced_constructor_fieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Braced_constructor_fieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBraced_constructor_field(s)
	}
}

func (s *Braced_constructor_fieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBraced_constructor_field(s)
	}
}

func (s *Braced_constructor_fieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBraced_constructor_field(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Braced_constructor_field() (localctx IBraced_constructor_fieldContext) {
	localctx = NewBraced_constructor_fieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1004, GoogleSQLParserRULE_braced_constructor_field)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5940)
		p.Braced_constructor_lhs()
	}
	{
		p.SetState(5941)
		p.Braced_constructor_field_value()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBraced_constructor_lhsContext is an interface to support dynamic dispatch.
type IBraced_constructor_lhsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Generalized_path_expression() IGeneralized_path_expressionContext

	// IsBraced_constructor_lhsContext differentiates from other interfaces.
	IsBraced_constructor_lhsContext()
}

type Braced_constructor_lhsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBraced_constructor_lhsContext() *Braced_constructor_lhsContext {
	var p = new(Braced_constructor_lhsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_lhs
	return p
}

func InitEmptyBraced_constructor_lhsContext(p *Braced_constructor_lhsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_lhs
}

func (*Braced_constructor_lhsContext) IsBraced_constructor_lhsContext() {}

func NewBraced_constructor_lhsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Braced_constructor_lhsContext {
	var p = new(Braced_constructor_lhsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_lhs

	return p
}

func (s *Braced_constructor_lhsContext) GetParser() antlr.Parser { return s.parser }

func (s *Braced_constructor_lhsContext) Generalized_path_expression() IGeneralized_path_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGeneralized_path_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGeneralized_path_expressionContext)
}

func (s *Braced_constructor_lhsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Braced_constructor_lhsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Braced_constructor_lhsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBraced_constructor_lhs(s)
	}
}

func (s *Braced_constructor_lhsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBraced_constructor_lhs(s)
	}
}

func (s *Braced_constructor_lhsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBraced_constructor_lhs(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Braced_constructor_lhs() (localctx IBraced_constructor_lhsContext) {
	localctx = NewBraced_constructor_lhsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1006, GoogleSQLParserRULE_braced_constructor_lhs)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5943)
		p.generalized_path_expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBraced_constructor_field_valueContext is an interface to support dynamic dispatch.
type IBraced_constructor_field_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	COLON_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	Braced_constructor() IBraced_constructorContext

	// IsBraced_constructor_field_valueContext differentiates from other interfaces.
	IsBraced_constructor_field_valueContext()
}

type Braced_constructor_field_valueContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBraced_constructor_field_valueContext() *Braced_constructor_field_valueContext {
	var p = new(Braced_constructor_field_valueContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_field_value
	return p
}

func InitEmptyBraced_constructor_field_valueContext(p *Braced_constructor_field_valueContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_field_value
}

func (*Braced_constructor_field_valueContext) IsBraced_constructor_field_valueContext() {}

func NewBraced_constructor_field_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Braced_constructor_field_valueContext {
	var p = new(Braced_constructor_field_valueContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_field_value

	return p
}

func (s *Braced_constructor_field_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Braced_constructor_field_valueContext) COLON_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOLON_SYMBOL, 0)
}

func (s *Braced_constructor_field_valueContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Braced_constructor_field_valueContext) Braced_constructor() IBraced_constructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBraced_constructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBraced_constructorContext)
}

func (s *Braced_constructor_field_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Braced_constructor_field_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Braced_constructor_field_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBraced_constructor_field_value(s)
	}
}

func (s *Braced_constructor_field_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBraced_constructor_field_value(s)
	}
}

func (s *Braced_constructor_field_valueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBraced_constructor_field_value(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Braced_constructor_field_value() (localctx IBraced_constructor_field_valueContext) {
	localctx = NewBraced_constructor_field_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1008, GoogleSQLParserRULE_braced_constructor_field_value)
	p.SetState(5948)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserCOLON_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5945)
			p.Match(GoogleSQLParserCOLON_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5946)
			p.expression(0)
		}

	case GoogleSQLParserRC_BRACKET_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5947)
			p.Braced_constructor()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBraced_constructor_extensionContext is an interface to support dynamic dispatch.
type IBraced_constructor_extensionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsBraced_constructor_extensionContext differentiates from other interfaces.
	IsBraced_constructor_extensionContext()
}

type Braced_constructor_extensionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBraced_constructor_extensionContext() *Braced_constructor_extensionContext {
	var p = new(Braced_constructor_extensionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_extension
	return p
}

func InitEmptyBraced_constructor_extensionContext(p *Braced_constructor_extensionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_extension
}

func (*Braced_constructor_extensionContext) IsBraced_constructor_extensionContext() {}

func NewBraced_constructor_extensionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Braced_constructor_extensionContext {
	var p = new(Braced_constructor_extensionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_braced_constructor_extension

	return p
}

func (s *Braced_constructor_extensionContext) GetParser() antlr.Parser { return s.parser }

func (s *Braced_constructor_extensionContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Braced_constructor_extensionContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Braced_constructor_extensionContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Braced_constructor_extensionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Braced_constructor_extensionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Braced_constructor_extensionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBraced_constructor_extension(s)
	}
}

func (s *Braced_constructor_extensionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBraced_constructor_extension(s)
	}
}

func (s *Braced_constructor_extensionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBraced_constructor_extension(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Braced_constructor_extension() (localctx IBraced_constructor_extensionContext) {
	localctx = NewBraced_constructor_extensionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1010, GoogleSQLParserRULE_braced_constructor_extension)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5950)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5951)
		p.Path_expression()
	}
	{
		p.SetState(5952)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INew_constructorContext is an interface to support dynamic dispatch.
type INew_constructorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	New_constructor_prefix() INew_constructor_prefixContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	New_constructor_prefix_no_arg() INew_constructor_prefix_no_argContext

	// IsNew_constructorContext differentiates from other interfaces.
	IsNew_constructorContext()
}

type New_constructorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNew_constructorContext() *New_constructorContext {
	var p = new(New_constructorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_new_constructor
	return p
}

func InitEmptyNew_constructorContext(p *New_constructorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_new_constructor
}

func (*New_constructorContext) IsNew_constructorContext() {}

func NewNew_constructorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *New_constructorContext {
	var p = new(New_constructorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_new_constructor

	return p
}

func (s *New_constructorContext) GetParser() antlr.Parser { return s.parser }

func (s *New_constructorContext) New_constructor_prefix() INew_constructor_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INew_constructor_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INew_constructor_prefixContext)
}

func (s *New_constructorContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *New_constructorContext) New_constructor_prefix_no_arg() INew_constructor_prefix_no_argContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INew_constructor_prefix_no_argContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INew_constructor_prefix_no_argContext)
}

func (s *New_constructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *New_constructorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *New_constructorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterNew_constructor(s)
	}
}

func (s *New_constructorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitNew_constructor(s)
	}
}

func (s *New_constructorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitNew_constructor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) New_constructor() (localctx INew_constructorContext) {
	localctx = NewNew_constructorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1012, GoogleSQLParserRULE_new_constructor)
	p.SetState(5960)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 723, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5954)
			p.New_constructor_prefix()
		}
		{
			p.SetState(5955)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5957)
			p.New_constructor_prefix_no_arg()
		}
		{
			p.SetState(5958)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INew_constructor_prefixContext is an interface to support dynamic dispatch.
type INew_constructor_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	New_constructor_prefix_no_arg() INew_constructor_prefix_no_argContext
	AllNew_constructor_arg() []INew_constructor_argContext
	New_constructor_arg(i int) INew_constructor_argContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsNew_constructor_prefixContext differentiates from other interfaces.
	IsNew_constructor_prefixContext()
}

type New_constructor_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNew_constructor_prefixContext() *New_constructor_prefixContext {
	var p = new(New_constructor_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_new_constructor_prefix
	return p
}

func InitEmptyNew_constructor_prefixContext(p *New_constructor_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_new_constructor_prefix
}

func (*New_constructor_prefixContext) IsNew_constructor_prefixContext() {}

func NewNew_constructor_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *New_constructor_prefixContext {
	var p = new(New_constructor_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_new_constructor_prefix

	return p
}

func (s *New_constructor_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *New_constructor_prefixContext) New_constructor_prefix_no_arg() INew_constructor_prefix_no_argContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INew_constructor_prefix_no_argContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INew_constructor_prefix_no_argContext)
}

func (s *New_constructor_prefixContext) AllNew_constructor_arg() []INew_constructor_argContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INew_constructor_argContext); ok {
			len++
		}
	}

	tst := make([]INew_constructor_argContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INew_constructor_argContext); ok {
			tst[i] = t.(INew_constructor_argContext)
			i++
		}
	}

	return tst
}

func (s *New_constructor_prefixContext) New_constructor_arg(i int) INew_constructor_argContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INew_constructor_argContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INew_constructor_argContext)
}

func (s *New_constructor_prefixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *New_constructor_prefixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *New_constructor_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *New_constructor_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *New_constructor_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterNew_constructor_prefix(s)
	}
}

func (s *New_constructor_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitNew_constructor_prefix(s)
	}
}

func (s *New_constructor_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitNew_constructor_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) New_constructor_prefix() (localctx INew_constructor_prefixContext) {
	localctx = NewNew_constructor_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1014, GoogleSQLParserRULE_new_constructor_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5962)
		p.New_constructor_prefix_no_arg()
	}
	{
		p.SetState(5963)
		p.New_constructor_arg()
	}
	p.SetState(5968)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(5964)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5965)
			p.New_constructor_arg()
		}

		p.SetState(5970)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INew_constructor_prefix_no_argContext is an interface to support dynamic dispatch.
type INew_constructor_prefix_no_argContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NEW_SYMBOL() antlr.TerminalNode
	Type_name() IType_nameContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsNew_constructor_prefix_no_argContext differentiates from other interfaces.
	IsNew_constructor_prefix_no_argContext()
}

type New_constructor_prefix_no_argContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNew_constructor_prefix_no_argContext() *New_constructor_prefix_no_argContext {
	var p = new(New_constructor_prefix_no_argContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_new_constructor_prefix_no_arg
	return p
}

func InitEmptyNew_constructor_prefix_no_argContext(p *New_constructor_prefix_no_argContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_new_constructor_prefix_no_arg
}

func (*New_constructor_prefix_no_argContext) IsNew_constructor_prefix_no_argContext() {}

func NewNew_constructor_prefix_no_argContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *New_constructor_prefix_no_argContext {
	var p = new(New_constructor_prefix_no_argContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_new_constructor_prefix_no_arg

	return p
}

func (s *New_constructor_prefix_no_argContext) GetParser() antlr.Parser { return s.parser }

func (s *New_constructor_prefix_no_argContext) NEW_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNEW_SYMBOL, 0)
}

func (s *New_constructor_prefix_no_argContext) Type_name() IType_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_nameContext)
}

func (s *New_constructor_prefix_no_argContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *New_constructor_prefix_no_argContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *New_constructor_prefix_no_argContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *New_constructor_prefix_no_argContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterNew_constructor_prefix_no_arg(s)
	}
}

func (s *New_constructor_prefix_no_argContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitNew_constructor_prefix_no_arg(s)
	}
}

func (s *New_constructor_prefix_no_argContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitNew_constructor_prefix_no_arg(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) New_constructor_prefix_no_arg() (localctx INew_constructor_prefix_no_argContext) {
	localctx = NewNew_constructor_prefix_no_argContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1016, GoogleSQLParserRULE_new_constructor_prefix_no_arg)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5971)
		p.Match(GoogleSQLParserNEW_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(5972)
		p.Type_name()
	}
	{
		p.SetState(5973)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INew_constructor_argContext is an interface to support dynamic dispatch.
type INew_constructor_argContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	AS_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsNew_constructor_argContext differentiates from other interfaces.
	IsNew_constructor_argContext()
}

type New_constructor_argContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNew_constructor_argContext() *New_constructor_argContext {
	var p = new(New_constructor_argContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_new_constructor_arg
	return p
}

func InitEmptyNew_constructor_argContext(p *New_constructor_argContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_new_constructor_arg
}

func (*New_constructor_argContext) IsNew_constructor_argContext() {}

func NewNew_constructor_argContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *New_constructor_argContext {
	var p = new(New_constructor_argContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_new_constructor_arg

	return p
}

func (s *New_constructor_argContext) GetParser() antlr.Parser { return s.parser }

func (s *New_constructor_argContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *New_constructor_argContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *New_constructor_argContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *New_constructor_argContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *New_constructor_argContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *New_constructor_argContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *New_constructor_argContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *New_constructor_argContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *New_constructor_argContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterNew_constructor_arg(s)
	}
}

func (s *New_constructor_argContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitNew_constructor_arg(s)
	}
}

func (s *New_constructor_argContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitNew_constructor_arg(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) New_constructor_arg() (localctx INew_constructor_argContext) {
	localctx = NewNew_constructor_argContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1018, GoogleSQLParserRULE_new_constructor_arg)
	p.SetState(5986)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 725, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5975)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5976)
			p.expression(0)
		}
		{
			p.SetState(5977)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5978)
			p.Identifier()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5980)
			p.expression(0)
		}
		{
			p.SetState(5981)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5982)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5983)
			p.Path_expression()
		}
		{
			p.SetState(5984)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArray_constructorContext is an interface to support dynamic dispatch.
type IArray_constructorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Array_constructor_prefix_no_expressions() IArray_constructor_prefix_no_expressionsContext
	RS_BRACKET_SYMBOL() antlr.TerminalNode
	Array_constructor_prefix() IArray_constructor_prefixContext

	// IsArray_constructorContext differentiates from other interfaces.
	IsArray_constructorContext()
}

type Array_constructorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArray_constructorContext() *Array_constructorContext {
	var p = new(Array_constructorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_array_constructor
	return p
}

func InitEmptyArray_constructorContext(p *Array_constructorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_array_constructor
}

func (*Array_constructorContext) IsArray_constructorContext() {}

func NewArray_constructorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_constructorContext {
	var p = new(Array_constructorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_array_constructor

	return p
}

func (s *Array_constructorContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_constructorContext) Array_constructor_prefix_no_expressions() IArray_constructor_prefix_no_expressionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArray_constructor_prefix_no_expressionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArray_constructor_prefix_no_expressionsContext)
}

func (s *Array_constructorContext) RS_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRS_BRACKET_SYMBOL, 0)
}

func (s *Array_constructorContext) Array_constructor_prefix() IArray_constructor_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArray_constructor_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArray_constructor_prefixContext)
}

func (s *Array_constructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_constructorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Array_constructorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterArray_constructor(s)
	}
}

func (s *Array_constructorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitArray_constructor(s)
	}
}

func (s *Array_constructorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitArray_constructor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Array_constructor() (localctx IArray_constructorContext) {
	localctx = NewArray_constructorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1020, GoogleSQLParserRULE_array_constructor)
	p.SetState(5994)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 726, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5988)
			p.Array_constructor_prefix_no_expressions()
		}
		{
			p.SetState(5989)
			p.Match(GoogleSQLParserRS_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5991)
			p.Array_constructor_prefix()
		}
		{
			p.SetState(5992)
			p.Match(GoogleSQLParserRS_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArray_constructor_prefixContext is an interface to support dynamic dispatch.
type IArray_constructor_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Array_constructor_prefix_no_expressions() IArray_constructor_prefix_no_expressionsContext
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsArray_constructor_prefixContext differentiates from other interfaces.
	IsArray_constructor_prefixContext()
}

type Array_constructor_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArray_constructor_prefixContext() *Array_constructor_prefixContext {
	var p = new(Array_constructor_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_array_constructor_prefix
	return p
}

func InitEmptyArray_constructor_prefixContext(p *Array_constructor_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_array_constructor_prefix
}

func (*Array_constructor_prefixContext) IsArray_constructor_prefixContext() {}

func NewArray_constructor_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_constructor_prefixContext {
	var p = new(Array_constructor_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_array_constructor_prefix

	return p
}

func (s *Array_constructor_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_constructor_prefixContext) Array_constructor_prefix_no_expressions() IArray_constructor_prefix_no_expressionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArray_constructor_prefix_no_expressionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArray_constructor_prefix_no_expressionsContext)
}

func (s *Array_constructor_prefixContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *Array_constructor_prefixContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Array_constructor_prefixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Array_constructor_prefixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Array_constructor_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_constructor_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Array_constructor_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterArray_constructor_prefix(s)
	}
}

func (s *Array_constructor_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitArray_constructor_prefix(s)
	}
}

func (s *Array_constructor_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitArray_constructor_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Array_constructor_prefix() (localctx IArray_constructor_prefixContext) {
	localctx = NewArray_constructor_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1022, GoogleSQLParserRULE_array_constructor_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5996)
		p.Array_constructor_prefix_no_expressions()
	}
	{
		p.SetState(5997)
		p.expression(0)
	}
	p.SetState(6002)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(5998)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(5999)
			p.expression(0)
		}

		p.SetState(6004)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArray_constructor_prefix_no_expressionsContext is an interface to support dynamic dispatch.
type IArray_constructor_prefix_no_expressionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ARRAY_SYMBOL() antlr.TerminalNode
	LS_BRACKET_SYMBOL() antlr.TerminalNode
	Array_type() IArray_typeContext

	// IsArray_constructor_prefix_no_expressionsContext differentiates from other interfaces.
	IsArray_constructor_prefix_no_expressionsContext()
}

type Array_constructor_prefix_no_expressionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArray_constructor_prefix_no_expressionsContext() *Array_constructor_prefix_no_expressionsContext {
	var p = new(Array_constructor_prefix_no_expressionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_array_constructor_prefix_no_expressions
	return p
}

func InitEmptyArray_constructor_prefix_no_expressionsContext(p *Array_constructor_prefix_no_expressionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_array_constructor_prefix_no_expressions
}

func (*Array_constructor_prefix_no_expressionsContext) IsArray_constructor_prefix_no_expressionsContext() {
}

func NewArray_constructor_prefix_no_expressionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_constructor_prefix_no_expressionsContext {
	var p = new(Array_constructor_prefix_no_expressionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_array_constructor_prefix_no_expressions

	return p
}

func (s *Array_constructor_prefix_no_expressionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_constructor_prefix_no_expressionsContext) ARRAY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserARRAY_SYMBOL, 0)
}

func (s *Array_constructor_prefix_no_expressionsContext) LS_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLS_BRACKET_SYMBOL, 0)
}

func (s *Array_constructor_prefix_no_expressionsContext) Array_type() IArray_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArray_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArray_typeContext)
}

func (s *Array_constructor_prefix_no_expressionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_constructor_prefix_no_expressionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Array_constructor_prefix_no_expressionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterArray_constructor_prefix_no_expressions(s)
	}
}

func (s *Array_constructor_prefix_no_expressionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitArray_constructor_prefix_no_expressions(s)
	}
}

func (s *Array_constructor_prefix_no_expressionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitArray_constructor_prefix_no_expressions(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Array_constructor_prefix_no_expressions() (localctx IArray_constructor_prefix_no_expressionsContext) {
	localctx = NewArray_constructor_prefix_no_expressionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1024, GoogleSQLParserRULE_array_constructor_prefix_no_expressions)
	p.SetState(6011)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 728, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6005)
			p.Match(GoogleSQLParserARRAY_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(6006)
			p.Match(GoogleSQLParserLS_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6007)
			p.Match(GoogleSQLParserLS_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6008)
			p.Array_type()
		}
		{
			p.SetState(6009)
			p.Match(GoogleSQLParserLS_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRange_literalContext is an interface to support dynamic dispatch.
type IRange_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Range_type() IRange_typeContext
	String_literal() IString_literalContext

	// IsRange_literalContext differentiates from other interfaces.
	IsRange_literalContext()
}

type Range_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRange_literalContext() *Range_literalContext {
	var p = new(Range_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_range_literal
	return p
}

func InitEmptyRange_literalContext(p *Range_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_range_literal
}

func (*Range_literalContext) IsRange_literalContext() {}

func NewRange_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Range_literalContext {
	var p = new(Range_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_range_literal

	return p
}

func (s *Range_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Range_literalContext) Range_type() IRange_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRange_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRange_typeContext)
}

func (s *Range_literalContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Range_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Range_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Range_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRange_literal(s)
	}
}

func (s *Range_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRange_literal(s)
	}
}

func (s *Range_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRange_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Range_literal() (localctx IRange_literalContext) {
	localctx = NewRange_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1026, GoogleSQLParserRULE_range_literal)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6013)
		p.Range_type()
	}
	{
		p.SetState(6014)
		p.string_literal(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRange_typeContext is an interface to support dynamic dispatch.
type IRange_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RANGE_SYMBOL() antlr.TerminalNode
	Template_type_open() ITemplate_type_openContext
	Type_() ITypeContext
	Template_type_close() ITemplate_type_closeContext

	// IsRange_typeContext differentiates from other interfaces.
	IsRange_typeContext()
}

type Range_typeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRange_typeContext() *Range_typeContext {
	var p = new(Range_typeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_range_type
	return p
}

func InitEmptyRange_typeContext(p *Range_typeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_range_type
}

func (*Range_typeContext) IsRange_typeContext() {}

func NewRange_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Range_typeContext {
	var p = new(Range_typeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_range_type

	return p
}

func (s *Range_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Range_typeContext) RANGE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRANGE_SYMBOL, 0)
}

func (s *Range_typeContext) Template_type_open() ITemplate_type_openContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_openContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_openContext)
}

func (s *Range_typeContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Range_typeContext) Template_type_close() ITemplate_type_closeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_closeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_closeContext)
}

func (s *Range_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Range_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Range_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRange_type(s)
	}
}

func (s *Range_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRange_type(s)
	}
}

func (s *Range_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRange_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Range_type() (localctx IRange_typeContext) {
	localctx = NewRange_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1028, GoogleSQLParserRULE_range_type)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6016)
		p.Match(GoogleSQLParserRANGE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(6017)
		p.Template_type_open()
	}
	{
		p.SetState(6018)
		p.Type_()
	}
	{
		p.SetState(6019)
		p.Template_type_close()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeContext is an interface to support dynamic dispatch.
type ITypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Raw_type() IRaw_typeContext
	Opt_type_parameters() IOpt_type_parametersContext
	Collate_clause() ICollate_clauseContext

	// IsTypeContext differentiates from other interfaces.
	IsTypeContext()
}

type TypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeContext() *TypeContext {
	var p = new(TypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_type
	return p
}

func InitEmptyTypeContext(p *TypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_type
}

func (*TypeContext) IsTypeContext() {}

func NewTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeContext {
	var p = new(TypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_type

	return p
}

func (s *TypeContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeContext) Raw_type() IRaw_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRaw_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRaw_typeContext)
}

func (s *TypeContext) Opt_type_parameters() IOpt_type_parametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_type_parametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_type_parametersContext)
}

func (s *TypeContext) Collate_clause() ICollate_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollate_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollate_clauseContext)
}

func (s *TypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterType(s)
	}
}

func (s *TypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitType(s)
	}
}

func (s *TypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Type_() (localctx ITypeContext) {
	localctx = NewTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1030, GoogleSQLParserRULE_type)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6021)
		p.Raw_type()
	}
	p.SetState(6023)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserLR_BRACKET_SYMBOL {
		{
			p.SetState(6022)
			p.Opt_type_parameters()
		}

	}
	p.SetState(6026)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserCOLLATE_SYMBOL {
		{
			p.SetState(6025)
			p.Collate_clause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICollate_clauseContext is an interface to support dynamic dispatch.
type ICollate_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	COLLATE_SYMBOL() antlr.TerminalNode
	String_literal_or_parameter() IString_literal_or_parameterContext

	// IsCollate_clauseContext differentiates from other interfaces.
	IsCollate_clauseContext()
}

type Collate_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCollate_clauseContext() *Collate_clauseContext {
	var p = new(Collate_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_collate_clause
	return p
}

func InitEmptyCollate_clauseContext(p *Collate_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_collate_clause
}

func (*Collate_clauseContext) IsCollate_clauseContext() {}

func NewCollate_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Collate_clauseContext {
	var p = new(Collate_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_collate_clause

	return p
}

func (s *Collate_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Collate_clauseContext) COLLATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOLLATE_SYMBOL, 0)
}

func (s *Collate_clauseContext) String_literal_or_parameter() IString_literal_or_parameterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literal_or_parameterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literal_or_parameterContext)
}

func (s *Collate_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Collate_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Collate_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCollate_clause(s)
	}
}

func (s *Collate_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCollate_clause(s)
	}
}

func (s *Collate_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCollate_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Collate_clause() (localctx ICollate_clauseContext) {
	localctx = NewCollate_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1032, GoogleSQLParserRULE_collate_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6028)
		p.Match(GoogleSQLParserCOLLATE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(6029)
		p.String_literal_or_parameter()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IString_literal_or_parameterContext is an interface to support dynamic dispatch.
type IString_literal_or_parameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	String_literal() IString_literalContext
	Parameter_expression() IParameter_expressionContext
	System_variable_expression() ISystem_variable_expressionContext

	// IsString_literal_or_parameterContext differentiates from other interfaces.
	IsString_literal_or_parameterContext()
}

type String_literal_or_parameterContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyString_literal_or_parameterContext() *String_literal_or_parameterContext {
	var p = new(String_literal_or_parameterContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_string_literal_or_parameter
	return p
}

func InitEmptyString_literal_or_parameterContext(p *String_literal_or_parameterContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_string_literal_or_parameter
}

func (*String_literal_or_parameterContext) IsString_literal_or_parameterContext() {}

func NewString_literal_or_parameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *String_literal_or_parameterContext {
	var p = new(String_literal_or_parameterContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_string_literal_or_parameter

	return p
}

func (s *String_literal_or_parameterContext) GetParser() antlr.Parser { return s.parser }

func (s *String_literal_or_parameterContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *String_literal_or_parameterContext) Parameter_expression() IParameter_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParameter_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParameter_expressionContext)
}

func (s *String_literal_or_parameterContext) System_variable_expression() ISystem_variable_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISystem_variable_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISystem_variable_expressionContext)
}

func (s *String_literal_or_parameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *String_literal_or_parameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *String_literal_or_parameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterString_literal_or_parameter(s)
	}
}

func (s *String_literal_or_parameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitString_literal_or_parameter(s)
	}
}

func (s *String_literal_or_parameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitString_literal_or_parameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) String_literal_or_parameter() (localctx IString_literal_or_parameterContext) {
	localctx = NewString_literal_or_parameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1034, GoogleSQLParserRULE_string_literal_or_parameter)
	p.SetState(6034)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6031)
			p.string_literal(0)
		}

	case GoogleSQLParserQUESTION_SYMBOL, GoogleSQLParserAT_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6032)
			p.Parameter_expression()
		}

	case GoogleSQLParserATAT_SYMBOL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6033)
			p.System_variable_expression()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISystem_variable_expressionContext is an interface to support dynamic dispatch.
type ISystem_variable_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ATAT_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext

	// IsSystem_variable_expressionContext differentiates from other interfaces.
	IsSystem_variable_expressionContext()
}

type System_variable_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySystem_variable_expressionContext() *System_variable_expressionContext {
	var p = new(System_variable_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_system_variable_expression
	return p
}

func InitEmptySystem_variable_expressionContext(p *System_variable_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_system_variable_expression
}

func (*System_variable_expressionContext) IsSystem_variable_expressionContext() {}

func NewSystem_variable_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *System_variable_expressionContext {
	var p = new(System_variable_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_system_variable_expression

	return p
}

func (s *System_variable_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *System_variable_expressionContext) ATAT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserATAT_SYMBOL, 0)
}

func (s *System_variable_expressionContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *System_variable_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *System_variable_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *System_variable_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSystem_variable_expression(s)
	}
}

func (s *System_variable_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSystem_variable_expression(s)
	}
}

func (s *System_variable_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSystem_variable_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) System_variable_expression() (localctx ISystem_variable_expressionContext) {
	localctx = NewSystem_variable_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1036, GoogleSQLParserRULE_system_variable_expression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6036)
		p.Match(GoogleSQLParserATAT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(6037)
		p.Path_expression()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IParameter_expressionContext is an interface to support dynamic dispatch.
type IParameter_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Named_parameter_expression() INamed_parameter_expressionContext
	QUESTION_SYMBOL() antlr.TerminalNode

	// IsParameter_expressionContext differentiates from other interfaces.
	IsParameter_expressionContext()
}

type Parameter_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameter_expressionContext() *Parameter_expressionContext {
	var p = new(Parameter_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_parameter_expression
	return p
}

func InitEmptyParameter_expressionContext(p *Parameter_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_parameter_expression
}

func (*Parameter_expressionContext) IsParameter_expressionContext() {}

func NewParameter_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parameter_expressionContext {
	var p = new(Parameter_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_parameter_expression

	return p
}

func (s *Parameter_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Parameter_expressionContext) Named_parameter_expression() INamed_parameter_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamed_parameter_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamed_parameter_expressionContext)
}

func (s *Parameter_expressionContext) QUESTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserQUESTION_SYMBOL, 0)
}

func (s *Parameter_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parameter_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Parameter_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterParameter_expression(s)
	}
}

func (s *Parameter_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitParameter_expression(s)
	}
}

func (s *Parameter_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitParameter_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Parameter_expression() (localctx IParameter_expressionContext) {
	localctx = NewParameter_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1038, GoogleSQLParserRULE_parameter_expression)
	p.SetState(6041)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserAT_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6039)
			p.Named_parameter_expression()
		}

	case GoogleSQLParserQUESTION_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6040)
			p.Match(GoogleSQLParserQUESTION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INamed_parameter_expressionContext is an interface to support dynamic dispatch.
type INamed_parameter_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AT_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext

	// IsNamed_parameter_expressionContext differentiates from other interfaces.
	IsNamed_parameter_expressionContext()
}

type Named_parameter_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamed_parameter_expressionContext() *Named_parameter_expressionContext {
	var p = new(Named_parameter_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_named_parameter_expression
	return p
}

func InitEmptyNamed_parameter_expressionContext(p *Named_parameter_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_named_parameter_expression
}

func (*Named_parameter_expressionContext) IsNamed_parameter_expressionContext() {}

func NewNamed_parameter_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Named_parameter_expressionContext {
	var p = new(Named_parameter_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_named_parameter_expression

	return p
}

func (s *Named_parameter_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Named_parameter_expressionContext) AT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAT_SYMBOL, 0)
}

func (s *Named_parameter_expressionContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Named_parameter_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Named_parameter_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Named_parameter_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterNamed_parameter_expression(s)
	}
}

func (s *Named_parameter_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitNamed_parameter_expression(s)
	}
}

func (s *Named_parameter_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitNamed_parameter_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Named_parameter_expression() (localctx INamed_parameter_expressionContext) {
	localctx = NewNamed_parameter_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1040, GoogleSQLParserRULE_named_parameter_expression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6043)
		p.Match(GoogleSQLParserAT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(6044)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_type_parametersContext is an interface to support dynamic dispatch.
type IOpt_type_parametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Type_parameters_prefix() IType_parameters_prefixContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	COMMA_SYMBOL() antlr.TerminalNode

	// IsOpt_type_parametersContext differentiates from other interfaces.
	IsOpt_type_parametersContext()
}

type Opt_type_parametersContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_type_parametersContext() *Opt_type_parametersContext {
	var p = new(Opt_type_parametersContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_type_parameters
	return p
}

func InitEmptyOpt_type_parametersContext(p *Opt_type_parametersContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_type_parameters
}

func (*Opt_type_parametersContext) IsOpt_type_parametersContext() {}

func NewOpt_type_parametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_type_parametersContext {
	var p = new(Opt_type_parametersContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_type_parameters

	return p
}

func (s *Opt_type_parametersContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_type_parametersContext) Type_parameters_prefix() IType_parameters_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_parameters_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_parameters_prefixContext)
}

func (s *Opt_type_parametersContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Opt_type_parametersContext) COMMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, 0)
}

func (s *Opt_type_parametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_type_parametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_type_parametersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_type_parameters(s)
	}
}

func (s *Opt_type_parametersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_type_parameters(s)
	}
}

func (s *Opt_type_parametersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_type_parameters(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_type_parameters() (localctx IOpt_type_parametersContext) {
	localctx = NewOpt_type_parametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1042, GoogleSQLParserRULE_opt_type_parameters)
	p.SetState(6054)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 733, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6046)
			p.Type_parameters_prefix()
		}
		{
			p.SetState(6047)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6049)
			p.Type_parameters_prefix()
		}
		{
			p.SetState(6050)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(6051)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.NotifyErrorListeners("Syntax error: Trailing comma in type parameters list is not allowed.", nil, nil)

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IType_parameters_prefixContext is an interface to support dynamic dispatch.
type IType_parameters_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllType_parameter() []IType_parameterContext
	Type_parameter(i int) IType_parameterContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsType_parameters_prefixContext differentiates from other interfaces.
	IsType_parameters_prefixContext()
}

type Type_parameters_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_parameters_prefixContext() *Type_parameters_prefixContext {
	var p = new(Type_parameters_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_type_parameters_prefix
	return p
}

func InitEmptyType_parameters_prefixContext(p *Type_parameters_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_type_parameters_prefix
}

func (*Type_parameters_prefixContext) IsType_parameters_prefixContext() {}

func NewType_parameters_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_parameters_prefixContext {
	var p = new(Type_parameters_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_type_parameters_prefix

	return p
}

func (s *Type_parameters_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_parameters_prefixContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Type_parameters_prefixContext) AllType_parameter() []IType_parameterContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IType_parameterContext); ok {
			len++
		}
	}

	tst := make([]IType_parameterContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IType_parameterContext); ok {
			tst[i] = t.(IType_parameterContext)
			i++
		}
	}

	return tst
}

func (s *Type_parameters_prefixContext) Type_parameter(i int) IType_parameterContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_parameterContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_parameterContext)
}

func (s *Type_parameters_prefixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Type_parameters_prefixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Type_parameters_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_parameters_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_parameters_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterType_parameters_prefix(s)
	}
}

func (s *Type_parameters_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitType_parameters_prefix(s)
	}
}

func (s *Type_parameters_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitType_parameters_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Type_parameters_prefix() (localctx IType_parameters_prefixContext) {
	localctx = NewType_parameters_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1044, GoogleSQLParserRULE_type_parameters_prefix)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6056)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(6057)
		p.Type_parameter()
	}
	p.SetState(6062)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 734, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(6058)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(6059)
				p.Type_parameter()
			}

		}
		p.SetState(6064)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 734, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IType_parameterContext is an interface to support dynamic dispatch.
type IType_parameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Integer_literal() IInteger_literalContext
	Boolean_literal() IBoolean_literalContext
	String_literal() IString_literalContext
	Bytes_literal() IBytes_literalContext
	Floating_point_literal() IFloating_point_literalContext
	MAX_SYMBOL() antlr.TerminalNode

	// IsType_parameterContext differentiates from other interfaces.
	IsType_parameterContext()
}

type Type_parameterContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_parameterContext() *Type_parameterContext {
	var p = new(Type_parameterContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_type_parameter
	return p
}

func InitEmptyType_parameterContext(p *Type_parameterContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_type_parameter
}

func (*Type_parameterContext) IsType_parameterContext() {}

func NewType_parameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_parameterContext {
	var p = new(Type_parameterContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_type_parameter

	return p
}

func (s *Type_parameterContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_parameterContext) Integer_literal() IInteger_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInteger_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInteger_literalContext)
}

func (s *Type_parameterContext) Boolean_literal() IBoolean_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBoolean_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBoolean_literalContext)
}

func (s *Type_parameterContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Type_parameterContext) Bytes_literal() IBytes_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBytes_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBytes_literalContext)
}

func (s *Type_parameterContext) Floating_point_literal() IFloating_point_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFloating_point_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFloating_point_literalContext)
}

func (s *Type_parameterContext) MAX_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMAX_SYMBOL, 0)
}

func (s *Type_parameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_parameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_parameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterType_parameter(s)
	}
}

func (s *Type_parameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitType_parameter(s)
	}
}

func (s *Type_parameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitType_parameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Type_parameter() (localctx IType_parameterContext) {
	localctx = NewType_parameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1046, GoogleSQLParserRULE_type_parameter)
	p.SetState(6071)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINTEGER_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6065)
			p.Integer_literal()
		}

	case GoogleSQLParserTRUE_SYMBOL, GoogleSQLParserFALSE_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6066)
			p.Boolean_literal()
		}

	case GoogleSQLParserSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6067)
			p.string_literal(0)
		}

	case GoogleSQLParserBYTES_LITERAL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6068)
			p.bytes_literal(0)
		}

	case GoogleSQLParserFLOATING_POINT_LITERAL:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6069)
			p.Floating_point_literal()
		}

	case GoogleSQLParserMAX_SYMBOL:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(6070)
			p.Match(GoogleSQLParserMAX_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRaw_typeContext is an interface to support dynamic dispatch.
type IRaw_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Array_type() IArray_typeContext
	Struct_type() IStruct_typeContext
	Type_name() IType_nameContext
	Range_type() IRange_typeContext
	Function_type() IFunction_typeContext
	Map_type() IMap_typeContext

	// IsRaw_typeContext differentiates from other interfaces.
	IsRaw_typeContext()
}

type Raw_typeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRaw_typeContext() *Raw_typeContext {
	var p = new(Raw_typeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_raw_type
	return p
}

func InitEmptyRaw_typeContext(p *Raw_typeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_raw_type
}

func (*Raw_typeContext) IsRaw_typeContext() {}

func NewRaw_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Raw_typeContext {
	var p = new(Raw_typeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_raw_type

	return p
}

func (s *Raw_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Raw_typeContext) Array_type() IArray_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArray_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArray_typeContext)
}

func (s *Raw_typeContext) Struct_type() IStruct_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_typeContext)
}

func (s *Raw_typeContext) Type_name() IType_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_nameContext)
}

func (s *Raw_typeContext) Range_type() IRange_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRange_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRange_typeContext)
}

func (s *Raw_typeContext) Function_type() IFunction_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunction_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunction_typeContext)
}

func (s *Raw_typeContext) Map_type() IMap_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMap_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMap_typeContext)
}

func (s *Raw_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Raw_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Raw_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRaw_type(s)
	}
}

func (s *Raw_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRaw_type(s)
	}
}

func (s *Raw_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRaw_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Raw_type() (localctx IRaw_typeContext) {
	localctx = NewRaw_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1048, GoogleSQLParserRULE_raw_type)
	p.SetState(6079)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 736, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6073)
			p.Array_type()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6074)
			p.Struct_type()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6075)
			p.Type_name()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6076)
			p.Range_type()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6077)
			p.Function_type()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(6078)
			p.Map_type()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMap_typeContext is an interface to support dynamic dispatch.
type IMap_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetKey_type returns the key_type rule contexts.
	GetKey_type() ITypeContext

	// GetValue_type returns the value_type rule contexts.
	GetValue_type() ITypeContext

	// SetKey_type sets the key_type rule contexts.
	SetKey_type(ITypeContext)

	// SetValue_type sets the value_type rule contexts.
	SetValue_type(ITypeContext)

	// Getter signatures
	MAP_SYMBOL() antlr.TerminalNode
	Template_type_open() ITemplate_type_openContext
	COMMA_SYMBOL() antlr.TerminalNode
	Template_type_close() ITemplate_type_closeContext
	AllType_() []ITypeContext
	Type_(i int) ITypeContext

	// IsMap_typeContext differentiates from other interfaces.
	IsMap_typeContext()
}

type Map_typeContext struct {
	antlr.BaseParserRuleContext
	parser     antlr.Parser
	key_type   ITypeContext
	value_type ITypeContext
}

func NewEmptyMap_typeContext() *Map_typeContext {
	var p = new(Map_typeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_map_type
	return p
}

func InitEmptyMap_typeContext(p *Map_typeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_map_type
}

func (*Map_typeContext) IsMap_typeContext() {}

func NewMap_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Map_typeContext {
	var p = new(Map_typeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_map_type

	return p
}

func (s *Map_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Map_typeContext) GetKey_type() ITypeContext { return s.key_type }

func (s *Map_typeContext) GetValue_type() ITypeContext { return s.value_type }

func (s *Map_typeContext) SetKey_type(v ITypeContext) { s.key_type = v }

func (s *Map_typeContext) SetValue_type(v ITypeContext) { s.value_type = v }

func (s *Map_typeContext) MAP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMAP_SYMBOL, 0)
}

func (s *Map_typeContext) Template_type_open() ITemplate_type_openContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_openContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_openContext)
}

func (s *Map_typeContext) COMMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, 0)
}

func (s *Map_typeContext) Template_type_close() ITemplate_type_closeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_closeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_closeContext)
}

func (s *Map_typeContext) AllType_() []ITypeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeContext); ok {
			len++
		}
	}

	tst := make([]ITypeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeContext); ok {
			tst[i] = t.(ITypeContext)
			i++
		}
	}

	return tst
}

func (s *Map_typeContext) Type_(i int) ITypeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Map_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Map_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Map_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterMap_type(s)
	}
}

func (s *Map_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitMap_type(s)
	}
}

func (s *Map_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitMap_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Map_type() (localctx IMap_typeContext) {
	localctx = NewMap_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1050, GoogleSQLParserRULE_map_type)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6081)
		p.Match(GoogleSQLParserMAP_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(6082)
		p.Template_type_open()
	}
	{
		p.SetState(6083)

		var _x = p.Type_()

		localctx.(*Map_typeContext).key_type = _x
	}
	{
		p.SetState(6084)
		p.Match(GoogleSQLParserCOMMA_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(6085)

		var _x = p.Type_()

		localctx.(*Map_typeContext).value_type = _x
	}
	{
		p.SetState(6086)
		p.Template_type_close()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunction_typeContext is an interface to support dynamic dispatch.
type IFunction_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetReturn_type returns the return_type rule contexts.
	GetReturn_type() ITypeContext

	// GetArg_type returns the arg_type rule contexts.
	GetArg_type() ITypeContext

	// GetArg_list returns the arg_list rule contexts.
	GetArg_list() IFunction_type_prefixContext

	// SetReturn_type sets the return_type rule contexts.
	SetReturn_type(ITypeContext)

	// SetArg_type sets the arg_type rule contexts.
	SetArg_type(ITypeContext)

	// SetArg_list sets the arg_list rule contexts.
	SetArg_list(IFunction_type_prefixContext)

	// Getter signatures
	FUNCTION_SYMBOL() antlr.TerminalNode
	Template_type_open() ITemplate_type_openContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	SUB_GT_BRACKET_SYMBOL() antlr.TerminalNode
	Template_type_close() ITemplate_type_closeContext
	AllType_() []ITypeContext
	Type_(i int) ITypeContext
	Function_type_prefix() IFunction_type_prefixContext

	// IsFunction_typeContext differentiates from other interfaces.
	IsFunction_typeContext()
}

type Function_typeContext struct {
	antlr.BaseParserRuleContext
	parser      antlr.Parser
	return_type ITypeContext
	arg_type    ITypeContext
	arg_list    IFunction_type_prefixContext
}

func NewEmptyFunction_typeContext() *Function_typeContext {
	var p = new(Function_typeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_type
	return p
}

func InitEmptyFunction_typeContext(p *Function_typeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_type
}

func (*Function_typeContext) IsFunction_typeContext() {}

func NewFunction_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_typeContext {
	var p = new(Function_typeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_function_type

	return p
}

func (s *Function_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_typeContext) GetReturn_type() ITypeContext { return s.return_type }

func (s *Function_typeContext) GetArg_type() ITypeContext { return s.arg_type }

func (s *Function_typeContext) GetArg_list() IFunction_type_prefixContext { return s.arg_list }

func (s *Function_typeContext) SetReturn_type(v ITypeContext) { s.return_type = v }

func (s *Function_typeContext) SetArg_type(v ITypeContext) { s.arg_type = v }

func (s *Function_typeContext) SetArg_list(v IFunction_type_prefixContext) { s.arg_list = v }

func (s *Function_typeContext) FUNCTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFUNCTION_SYMBOL, 0)
}

func (s *Function_typeContext) Template_type_open() ITemplate_type_openContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_openContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_openContext)
}

func (s *Function_typeContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Function_typeContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Function_typeContext) SUB_GT_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSUB_GT_BRACKET_SYMBOL, 0)
}

func (s *Function_typeContext) Template_type_close() ITemplate_type_closeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_closeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_closeContext)
}

func (s *Function_typeContext) AllType_() []ITypeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeContext); ok {
			len++
		}
	}

	tst := make([]ITypeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeContext); ok {
			tst[i] = t.(ITypeContext)
			i++
		}
	}

	return tst
}

func (s *Function_typeContext) Type_(i int) ITypeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Function_typeContext) Function_type_prefix() IFunction_type_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunction_type_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunction_type_prefixContext)
}

func (s *Function_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFunction_type(s)
	}
}

func (s *Function_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFunction_type(s)
	}
}

func (s *Function_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFunction_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Function_type() (localctx IFunction_typeContext) {
	localctx = NewFunction_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1052, GoogleSQLParserRULE_function_type)
	p.SetState(6109)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 737, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6088)
			p.Match(GoogleSQLParserFUNCTION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(6089)
			p.Template_type_open()
		}
		{
			p.SetState(6090)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(6091)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(6092)
			p.Match(GoogleSQLParserSUB_GT_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(6093)

			var _x = p.Type_()

			localctx.(*Function_typeContext).return_type = _x
		}
		{
			p.SetState(6094)
			p.Template_type_close()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6096)
			p.Match(GoogleSQLParserFUNCTION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(6097)
			p.Template_type_open()
		}
		{
			p.SetState(6098)

			var _x = p.Type_()

			localctx.(*Function_typeContext).arg_type = _x
		}
		{
			p.SetState(6099)
			p.Match(GoogleSQLParserSUB_GT_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(6100)

			var _x = p.Type_()

			localctx.(*Function_typeContext).return_type = _x
		}
		{
			p.SetState(6101)
			p.Template_type_close()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6103)

			var _x = p.Function_type_prefix()

			localctx.(*Function_typeContext).arg_list = _x
		}
		{
			p.SetState(6104)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(6105)
			p.Match(GoogleSQLParserSUB_GT_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(6106)

			var _x = p.Type_()

			localctx.(*Function_typeContext).return_type = _x
		}
		{
			p.SetState(6107)
			p.Template_type_close()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunction_type_prefixContext is an interface to support dynamic dispatch.
type IFunction_type_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FUNCTION_SYMBOL() antlr.TerminalNode
	Template_type_open() ITemplate_type_openContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllType_() []ITypeContext
	Type_(i int) ITypeContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsFunction_type_prefixContext differentiates from other interfaces.
	IsFunction_type_prefixContext()
}

type Function_type_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_type_prefixContext() *Function_type_prefixContext {
	var p = new(Function_type_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_type_prefix
	return p
}

func InitEmptyFunction_type_prefixContext(p *Function_type_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_type_prefix
}

func (*Function_type_prefixContext) IsFunction_type_prefixContext() {}

func NewFunction_type_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_type_prefixContext {
	var p = new(Function_type_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_function_type_prefix

	return p
}

func (s *Function_type_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_type_prefixContext) FUNCTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFUNCTION_SYMBOL, 0)
}

func (s *Function_type_prefixContext) Template_type_open() ITemplate_type_openContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_openContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_openContext)
}

func (s *Function_type_prefixContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Function_type_prefixContext) AllType_() []ITypeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeContext); ok {
			len++
		}
	}

	tst := make([]ITypeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeContext); ok {
			tst[i] = t.(ITypeContext)
			i++
		}
	}

	return tst
}

func (s *Function_type_prefixContext) Type_(i int) ITypeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Function_type_prefixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Function_type_prefixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Function_type_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_type_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_type_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFunction_type_prefix(s)
	}
}

func (s *Function_type_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFunction_type_prefix(s)
	}
}

func (s *Function_type_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFunction_type_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Function_type_prefix() (localctx IFunction_type_prefixContext) {
	localctx = NewFunction_type_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1054, GoogleSQLParserRULE_function_type_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6111)
		p.Match(GoogleSQLParserFUNCTION_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(6112)
		p.Template_type_open()
	}
	{
		p.SetState(6113)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(6114)
		p.Type_()
	}
	p.SetState(6119)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(6115)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(6116)
			p.Type_()
		}

		p.SetState(6121)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IType_nameContext is an interface to support dynamic dispatch.
type IType_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Path_expression() IPath_expressionContext
	INTERVAL_SYMBOL() antlr.TerminalNode

	// IsType_nameContext differentiates from other interfaces.
	IsType_nameContext()
}

type Type_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_nameContext() *Type_nameContext {
	var p = new(Type_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_type_name
	return p
}

func InitEmptyType_nameContext(p *Type_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_type_name
}

func (*Type_nameContext) IsType_nameContext() {}

func NewType_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_nameContext {
	var p = new(Type_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_type_name

	return p
}

func (s *Type_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_nameContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Type_nameContext) INTERVAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINTERVAL_SYMBOL, 0)
}

func (s *Type_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterType_name(s)
	}
}

func (s *Type_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitType_name(s)
	}
}

func (s *Type_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitType_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Type_name() (localctx IType_nameContext) {
	localctx = NewType_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1056, GoogleSQLParserRULE_type_name)
	p.SetState(6124)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserCONFLICT_SYMBOL, GoogleSQLParserDESTINATION_SYMBOL, GoogleSQLParserPROPERTY_SYMBOL, GoogleSQLParserGRAPH_SYMBOL, GoogleSQLParserNODE_SYMBOL, GoogleSQLParserPROPERTIES_SYMBOL, GoogleSQLParserLABEL_SYMBOL, GoogleSQLParserEDGE_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6122)
			p.Path_expression()
		}

	case GoogleSQLParserINTERVAL_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6123)
			p.Match(GoogleSQLParserINTERVAL_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPath_expressionContext is an interface to support dynamic dispatch.
type IPath_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	AllDOT_SYMBOL() []antlr.TerminalNode
	DOT_SYMBOL(i int) antlr.TerminalNode

	// IsPath_expressionContext differentiates from other interfaces.
	IsPath_expressionContext()
}

type Path_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPath_expressionContext() *Path_expressionContext {
	var p = new(Path_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_path_expression
	return p
}

func InitEmptyPath_expressionContext(p *Path_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_path_expression
}

func (*Path_expressionContext) IsPath_expressionContext() {}

func NewPath_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Path_expressionContext {
	var p = new(Path_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_path_expression

	return p
}

func (s *Path_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Path_expressionContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *Path_expressionContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Path_expressionContext) AllDOT_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserDOT_SYMBOL)
}

func (s *Path_expressionContext) DOT_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDOT_SYMBOL, i)
}

func (s *Path_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Path_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Path_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPath_expression(s)
	}
}

func (s *Path_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPath_expression(s)
	}
}

func (s *Path_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPath_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Path_expression() (localctx IPath_expressionContext) {
	localctx = NewPath_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1058, GoogleSQLParserRULE_path_expression)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6126)
		p.Identifier()
	}
	p.SetState(6131)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 740, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(6127)
				p.Match(GoogleSQLParserDOT_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(6128)
				p.Identifier()
			}

		}
		p.SetState(6133)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 740, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIdentifierContext is an interface to support dynamic dispatch.
type IIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Token_identifier() IToken_identifierContext
	Keyword_as_identifier() IKeyword_as_identifierContext

	// IsIdentifierContext differentiates from other interfaces.
	IsIdentifierContext()
}

type IdentifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierContext() *IdentifierContext {
	var p = new(IdentifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_identifier
	return p
}

func InitEmptyIdentifierContext(p *IdentifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_identifier
}

func (*IdentifierContext) IsIdentifierContext() {}

func NewIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierContext {
	var p = new(IdentifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_identifier

	return p
}

func (s *IdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierContext) Token_identifier() IToken_identifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IToken_identifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IToken_identifierContext)
}

func (s *IdentifierContext) Keyword_as_identifier() IKeyword_as_identifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKeyword_as_identifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKeyword_as_identifierContext)
}

func (s *IdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterIdentifier(s)
	}
}

func (s *IdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitIdentifier(s)
	}
}

func (s *IdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Identifier() (localctx IIdentifierContext) {
	localctx = NewIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1060, GoogleSQLParserRULE_identifier)
	p.SetState(6136)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6134)
			p.Token_identifier()
		}

	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserCONFLICT_SYMBOL, GoogleSQLParserDESTINATION_SYMBOL, GoogleSQLParserPROPERTY_SYMBOL, GoogleSQLParserGRAPH_SYMBOL, GoogleSQLParserNODE_SYMBOL, GoogleSQLParserPROPERTIES_SYMBOL, GoogleSQLParserLABEL_SYMBOL, GoogleSQLParserEDGE_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6135)
			p.Keyword_as_identifier()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IKeyword_as_identifierContext is an interface to support dynamic dispatch.
type IKeyword_as_identifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Common_keyword_as_identifier() ICommon_keyword_as_identifierContext
	SIMPLE_SYMBOL() antlr.TerminalNode

	// IsKeyword_as_identifierContext differentiates from other interfaces.
	IsKeyword_as_identifierContext()
}

type Keyword_as_identifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeyword_as_identifierContext() *Keyword_as_identifierContext {
	var p = new(Keyword_as_identifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_keyword_as_identifier
	return p
}

func InitEmptyKeyword_as_identifierContext(p *Keyword_as_identifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_keyword_as_identifier
}

func (*Keyword_as_identifierContext) IsKeyword_as_identifierContext() {}

func NewKeyword_as_identifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Keyword_as_identifierContext {
	var p = new(Keyword_as_identifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_keyword_as_identifier

	return p
}

func (s *Keyword_as_identifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Keyword_as_identifierContext) Common_keyword_as_identifier() ICommon_keyword_as_identifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICommon_keyword_as_identifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICommon_keyword_as_identifierContext)
}

func (s *Keyword_as_identifierContext) SIMPLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSIMPLE_SYMBOL, 0)
}

func (s *Keyword_as_identifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Keyword_as_identifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Keyword_as_identifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterKeyword_as_identifier(s)
	}
}

func (s *Keyword_as_identifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitKeyword_as_identifier(s)
	}
}

func (s *Keyword_as_identifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitKeyword_as_identifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Keyword_as_identifier() (localctx IKeyword_as_identifierContext) {
	localctx = NewKeyword_as_identifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1062, GoogleSQLParserRULE_keyword_as_identifier)
	p.SetState(6140)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserCONFLICT_SYMBOL, GoogleSQLParserDESTINATION_SYMBOL, GoogleSQLParserPROPERTY_SYMBOL, GoogleSQLParserGRAPH_SYMBOL, GoogleSQLParserNODE_SYMBOL, GoogleSQLParserPROPERTIES_SYMBOL, GoogleSQLParserLABEL_SYMBOL, GoogleSQLParserEDGE_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6138)
			p.Common_keyword_as_identifier()
		}

	case GoogleSQLParserSIMPLE_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6139)
			p.Match(GoogleSQLParserSIMPLE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICommon_keyword_as_identifierContext is an interface to support dynamic dispatch.
type ICommon_keyword_as_identifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ABORT_SYMBOL() antlr.TerminalNode
	ACCESS_SYMBOL() antlr.TerminalNode
	ACTION_SYMBOL() antlr.TerminalNode
	AGGREGATE_SYMBOL() antlr.TerminalNode
	ADD_SYMBOL() antlr.TerminalNode
	ALTER_SYMBOL() antlr.TerminalNode
	ALWAYS_SYMBOL() antlr.TerminalNode
	ANALYZE_SYMBOL() antlr.TerminalNode
	APPROX_SYMBOL() antlr.TerminalNode
	ARE_SYMBOL() antlr.TerminalNode
	ASSERT_SYMBOL() antlr.TerminalNode
	BATCH_SYMBOL() antlr.TerminalNode
	BEGIN_SYMBOL() antlr.TerminalNode
	BIGDECIMAL_SYMBOL() antlr.TerminalNode
	BIGNUMERIC_SYMBOL() antlr.TerminalNode
	BREAK_SYMBOL() antlr.TerminalNode
	CALL_SYMBOL() antlr.TerminalNode
	CASCADE_SYMBOL() antlr.TerminalNode
	CHECK_SYMBOL() antlr.TerminalNode
	CLAMPED_SYMBOL() antlr.TerminalNode
	CONFLICT_SYMBOL() antlr.TerminalNode
	CLONE_SYMBOL() antlr.TerminalNode
	COPY_SYMBOL() antlr.TerminalNode
	CLUSTER_SYMBOL() antlr.TerminalNode
	COLUMN_SYMBOL() antlr.TerminalNode
	COLUMNS_SYMBOL() antlr.TerminalNode
	COMMIT_SYMBOL() antlr.TerminalNode
	CONNECTION_SYMBOL() antlr.TerminalNode
	CONSTANT_SYMBOL() antlr.TerminalNode
	CONSTRAINT_SYMBOL() antlr.TerminalNode
	CONTINUE_SYMBOL() antlr.TerminalNode
	CORRESPONDING_SYMBOL() antlr.TerminalNode
	CYCLE_SYMBOL() antlr.TerminalNode
	DATA_SYMBOL() antlr.TerminalNode
	DATABASE_SYMBOL() antlr.TerminalNode
	DATE_SYMBOL() antlr.TerminalNode
	DATETIME_SYMBOL() antlr.TerminalNode
	DECIMAL_SYMBOL() antlr.TerminalNode
	DECLARE_SYMBOL() antlr.TerminalNode
	DEFINER_SYMBOL() antlr.TerminalNode
	DELETE_SYMBOL() antlr.TerminalNode
	DELETION_SYMBOL() antlr.TerminalNode
	DEPTH_SYMBOL() antlr.TerminalNode
	DESCRIBE_SYMBOL() antlr.TerminalNode
	DETERMINISTIC_SYMBOL() antlr.TerminalNode
	DO_SYMBOL() antlr.TerminalNode
	DROP_SYMBOL() antlr.TerminalNode
	ELSEIF_SYMBOL() antlr.TerminalNode
	ENFORCED_SYMBOL() antlr.TerminalNode
	ERROR_SYMBOL() antlr.TerminalNode
	EXCEPTION_SYMBOL() antlr.TerminalNode
	EXECUTE_SYMBOL() antlr.TerminalNode
	EXPLAIN_SYMBOL() antlr.TerminalNode
	EXPORT_SYMBOL() antlr.TerminalNode
	EXTEND_SYMBOL() antlr.TerminalNode
	EXTERNAL_SYMBOL() antlr.TerminalNode
	FILES_SYMBOL() antlr.TerminalNode
	FILTER_SYMBOL() antlr.TerminalNode
	FILL_SYMBOL() antlr.TerminalNode
	FIRST_SYMBOL() antlr.TerminalNode
	FOREIGN_SYMBOL() antlr.TerminalNode
	FORMAT_SYMBOL() antlr.TerminalNode
	FUNCTION_SYMBOL() antlr.TerminalNode
	GENERATED_SYMBOL() antlr.TerminalNode
	GRANT_SYMBOL() antlr.TerminalNode
	GROUP_ROWS_SYMBOL() antlr.TerminalNode
	HIDDEN_SYMBOL() antlr.TerminalNode
	IDENTITY_SYMBOL() antlr.TerminalNode
	IMMEDIATE_SYMBOL() antlr.TerminalNode
	IMMUTABLE_SYMBOL() antlr.TerminalNode
	IMPORT_SYMBOL() antlr.TerminalNode
	INCLUDE_SYMBOL() antlr.TerminalNode
	INCREMENT_SYMBOL() antlr.TerminalNode
	INDEX_SYMBOL() antlr.TerminalNode
	INOUT_SYMBOL() antlr.TerminalNode
	INPUT_SYMBOL() antlr.TerminalNode
	INSERT_SYMBOL() antlr.TerminalNode
	INVOKER_SYMBOL() antlr.TerminalNode
	ISOLATION_SYMBOL() antlr.TerminalNode
	ITERATE_SYMBOL() antlr.TerminalNode
	JSON_SYMBOL() antlr.TerminalNode
	KEY_SYMBOL() antlr.TerminalNode
	LANGUAGE_SYMBOL() antlr.TerminalNode
	LAST_SYMBOL() antlr.TerminalNode
	LEAVE_SYMBOL() antlr.TerminalNode
	LEVEL_SYMBOL() antlr.TerminalNode
	LOAD_SYMBOL() antlr.TerminalNode
	LOOP_SYMBOL() antlr.TerminalNode
	MACRO_SYMBOL() antlr.TerminalNode
	MAP_SYMBOL() antlr.TerminalNode
	MATCH_SYMBOL() antlr.TerminalNode
	KW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL() antlr.TerminalNode
	MATCHED_SYMBOL() antlr.TerminalNode
	MATERIALIZED_SYMBOL() antlr.TerminalNode
	MAX_SYMBOL() antlr.TerminalNode
	MAXVALUE_SYMBOL() antlr.TerminalNode
	MEASURES_SYMBOL() antlr.TerminalNode
	MESSAGE_SYMBOL() antlr.TerminalNode
	METADATA_SYMBOL() antlr.TerminalNode
	MIN_SYMBOL() antlr.TerminalNode
	MINVALUE_SYMBOL() antlr.TerminalNode
	MODEL_SYMBOL() antlr.TerminalNode
	MODULE_SYMBOL() antlr.TerminalNode
	NUMERIC_SYMBOL() antlr.TerminalNode
	OFFSET_SYMBOL() antlr.TerminalNode
	ONLY_SYMBOL() antlr.TerminalNode
	OPTIONS_SYMBOL() antlr.TerminalNode
	OUT_SYMBOL() antlr.TerminalNode
	OUTPUT_SYMBOL() antlr.TerminalNode
	OVERWRITE_SYMBOL() antlr.TerminalNode
	PARTITIONS_SYMBOL() antlr.TerminalNode
	PATTERN_SYMBOL() antlr.TerminalNode
	PERCENT_SYMBOL() antlr.TerminalNode
	PIVOT_SYMBOL() antlr.TerminalNode
	POLICIES_SYMBOL() antlr.TerminalNode
	POLICY_SYMBOL() antlr.TerminalNode
	PRIMARY_SYMBOL() antlr.TerminalNode
	PRIVATE_SYMBOL() antlr.TerminalNode
	PRIVILEGE_SYMBOL() antlr.TerminalNode
	PRIVILEGES_SYMBOL() antlr.TerminalNode
	PROCEDURE_SYMBOL() antlr.TerminalNode
	PROJECT_SYMBOL() antlr.TerminalNode
	PUBLIC_SYMBOL() antlr.TerminalNode
	RAISE_SYMBOL() antlr.TerminalNode
	READ_SYMBOL() antlr.TerminalNode
	REFERENCES_SYMBOL() antlr.TerminalNode
	REMOTE_SYMBOL() antlr.TerminalNode
	REMOVE_SYMBOL() antlr.TerminalNode
	RENAME_SYMBOL() antlr.TerminalNode
	REPEAT_SYMBOL() antlr.TerminalNode
	REPEATABLE_SYMBOL() antlr.TerminalNode
	REPLACE_SYMBOL() antlr.TerminalNode
	REPLACE_FIELDS_SYMBOL() antlr.TerminalNode
	REPLICA_SYMBOL() antlr.TerminalNode
	REPORT_SYMBOL() antlr.TerminalNode
	RESTRICT_SYMBOL() antlr.TerminalNode
	RESTRICTION_SYMBOL() antlr.TerminalNode
	RETURNS_SYMBOL() antlr.TerminalNode
	RETURN_SYMBOL() antlr.TerminalNode
	REVOKE_SYMBOL() antlr.TerminalNode
	ROLLBACK_SYMBOL() antlr.TerminalNode
	ROW_SYMBOL() antlr.TerminalNode
	RUN_SYMBOL() antlr.TerminalNode
	SAFE_CAST_SYMBOL() antlr.TerminalNode
	SCHEMA_SYMBOL() antlr.TerminalNode
	SEARCH_SYMBOL() antlr.TerminalNode
	SECURITY_SYMBOL() antlr.TerminalNode
	SEQUENCE_SYMBOL() antlr.TerminalNode
	SETS_SYMBOL() antlr.TerminalNode
	SHOW_SYMBOL() antlr.TerminalNode
	SNAPSHOT_SYMBOL() antlr.TerminalNode
	SOURCE_SYMBOL() antlr.TerminalNode
	SQL_SYMBOL() antlr.TerminalNode
	STABLE_SYMBOL() antlr.TerminalNode
	START_SYMBOL() antlr.TerminalNode
	STATIC_DESCRIBE_SYMBOL() antlr.TerminalNode
	STORED_SYMBOL() antlr.TerminalNode
	STORING_SYMBOL() antlr.TerminalNode
	STRICT_SYMBOL() antlr.TerminalNode
	SYSTEM_SYMBOL() antlr.TerminalNode
	SYSTEM_TIME_SYMBOL() antlr.TerminalNode
	TABLE_SYMBOL() antlr.TerminalNode
	TABLES_SYMBOL() antlr.TerminalNode
	TARGET_SYMBOL() antlr.TerminalNode
	TEMP_SYMBOL() antlr.TerminalNode
	TEMPORARY_SYMBOL() antlr.TerminalNode
	TIME_SYMBOL() antlr.TerminalNode
	TIMESTAMP_SYMBOL() antlr.TerminalNode
	TRANSACTION_SYMBOL() antlr.TerminalNode
	TRANSFORM_SYMBOL() antlr.TerminalNode
	TRUNCATE_SYMBOL() antlr.TerminalNode
	TYPE_SYMBOL() antlr.TerminalNode
	UNDROP_SYMBOL() antlr.TerminalNode
	UNIQUE_SYMBOL() antlr.TerminalNode
	UNKNOWN_SYMBOL() antlr.TerminalNode
	UNPIVOT_SYMBOL() antlr.TerminalNode
	UNTIL_SYMBOL() antlr.TerminalNode
	UPDATE_SYMBOL() antlr.TerminalNode
	VALUE_SYMBOL() antlr.TerminalNode
	VALUES_SYMBOL() antlr.TerminalNode
	VECTOR_SYMBOL() antlr.TerminalNode
	VIEW_SYMBOL() antlr.TerminalNode
	VIEWS_SYMBOL() antlr.TerminalNode
	VOLATILE_SYMBOL() antlr.TerminalNode
	WEIGHT_SYMBOL() antlr.TerminalNode
	WHILE_SYMBOL() antlr.TerminalNode
	WRITE_SYMBOL() antlr.TerminalNode
	ZONE_SYMBOL() antlr.TerminalNode
	DESCRIPTOR_SYMBOL() antlr.TerminalNode
	INTERLEAVE_SYMBOL() antlr.TerminalNode
	NULL_FILTERED_SYMBOL() antlr.TerminalNode
	PARENT_SYMBOL() antlr.TerminalNode
	DESTINATION_SYMBOL() antlr.TerminalNode
	PROPERTY_SYMBOL() antlr.TerminalNode
	GRAPH_SYMBOL() antlr.TerminalNode
	NODE_SYMBOL() antlr.TerminalNode
	PROPERTIES_SYMBOL() antlr.TerminalNode
	LABEL_SYMBOL() antlr.TerminalNode
	EDGE_SYMBOL() antlr.TerminalNode

	// IsCommon_keyword_as_identifierContext differentiates from other interfaces.
	IsCommon_keyword_as_identifierContext()
}

type Common_keyword_as_identifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCommon_keyword_as_identifierContext() *Common_keyword_as_identifierContext {
	var p = new(Common_keyword_as_identifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_common_keyword_as_identifier
	return p
}

func InitEmptyCommon_keyword_as_identifierContext(p *Common_keyword_as_identifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_common_keyword_as_identifier
}

func (*Common_keyword_as_identifierContext) IsCommon_keyword_as_identifierContext() {}

func NewCommon_keyword_as_identifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Common_keyword_as_identifierContext {
	var p = new(Common_keyword_as_identifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_common_keyword_as_identifier

	return p
}

func (s *Common_keyword_as_identifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Common_keyword_as_identifierContext) ABORT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserABORT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ACCESS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserACCESS_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ACTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserACTION_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) AGGREGATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAGGREGATE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ADD_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserADD_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ALTER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserALTER_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ALWAYS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserALWAYS_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ANALYZE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserANALYZE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) APPROX_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAPPROX_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ARE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserARE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ASSERT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserASSERT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) BATCH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBATCH_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) BEGIN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBEGIN_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) BIGDECIMAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBIGDECIMAL_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) BIGNUMERIC_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBIGNUMERIC_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) BREAK_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBREAK_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CALL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCALL_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CASCADE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCASCADE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CHECK_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCHECK_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CLAMPED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCLAMPED_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CONFLICT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCONFLICT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CLONE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCLONE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) COPY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOPY_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CLUSTER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCLUSTER_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) COLUMN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOLUMN_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) COLUMNS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOLUMNS_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) COMMIT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMIT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CONNECTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCONNECTION_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CONSTANT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCONSTANT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CONSTRAINT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCONSTRAINT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CONTINUE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCONTINUE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CORRESPONDING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCORRESPONDING_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CYCLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCYCLE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DATA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDATA_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DATABASE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDATABASE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDATE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DATETIME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDATETIME_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DECIMAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDECIMAL_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DECLARE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDECLARE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DEFINER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDEFINER_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DELETE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDELETE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DELETION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDELETION_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DEPTH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDEPTH_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DESCRIBE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDESCRIBE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DETERMINISTIC_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDETERMINISTIC_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDO_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DROP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDROP_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ELSEIF_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserELSEIF_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ENFORCED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserENFORCED_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ERROR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserERROR_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) EXCEPTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXCEPTION_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) EXECUTE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXECUTE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) EXPLAIN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXPLAIN_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) EXPORT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXPORT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) EXTEND_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXTEND_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) EXTERNAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXTERNAL_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) FILES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFILES_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) FILTER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFILTER_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) FILL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFILL_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) FIRST_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFIRST_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) FOREIGN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFOREIGN_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) FORMAT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFORMAT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) FUNCTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFUNCTION_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) GENERATED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGENERATED_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) GRANT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGRANT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) GROUP_ROWS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGROUP_ROWS_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) HIDDEN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserHIDDEN_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) IDENTITY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIDENTITY_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) IMMEDIATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIMMEDIATE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) IMMUTABLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIMMUTABLE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) IMPORT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIMPORT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) INCLUDE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINCLUDE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) INCREMENT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINCREMENT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) INDEX_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINDEX_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) INOUT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINOUT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) INPUT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINPUT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) INSERT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINSERT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) INVOKER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINVOKER_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ISOLATION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserISOLATION_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ITERATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserITERATE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) JSON_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserJSON_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) KEY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserKEY_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) LANGUAGE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLANGUAGE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) LAST_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLAST_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) LEAVE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLEAVE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) LEVEL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLEVEL_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) LOAD_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLOAD_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) LOOP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLOOP_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MACRO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMACRO_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MAP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMAP_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MATCH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMATCH_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) KW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MATCHED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMATCHED_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MATERIALIZED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMATERIALIZED_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MAX_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMAX_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MAXVALUE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMAXVALUE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MEASURES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMEASURES_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MESSAGE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMESSAGE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) METADATA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMETADATA_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MIN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMIN_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MINVALUE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMINVALUE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MODEL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMODEL_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MODULE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMODULE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) NUMERIC_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNUMERIC_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) OFFSET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOFFSET_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ONLY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserONLY_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) OPTIONS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOPTIONS_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) OUT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOUT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) OUTPUT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOUTPUT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) OVERWRITE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOVERWRITE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PARTITIONS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPARTITIONS_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PATTERN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPATTERN_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PERCENT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPERCENT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PIVOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPIVOT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) POLICIES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPOLICIES_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) POLICY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPOLICY_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PRIMARY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPRIMARY_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PRIVATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPRIVATE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PRIVILEGE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPRIVILEGE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PRIVILEGES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPRIVILEGES_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PROCEDURE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPROCEDURE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PROJECT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPROJECT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PUBLIC_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPUBLIC_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) RAISE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRAISE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) READ_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREAD_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) REFERENCES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREFERENCES_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) REMOTE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREMOTE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) REMOVE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREMOVE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) RENAME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRENAME_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) REPEAT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPEAT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) REPEATABLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPEATABLE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) REPLACE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPLACE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) REPLACE_FIELDS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPLACE_FIELDS_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) REPLICA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPLICA_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) REPORT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPORT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) RESTRICT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRESTRICT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) RESTRICTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRESTRICTION_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) RETURNS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRETURNS_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) RETURN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRETURN_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) REVOKE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREVOKE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ROLLBACK_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserROLLBACK_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ROW_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserROW_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) RUN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRUN_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SAFE_CAST_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSAFE_CAST_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SCHEMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSCHEMA_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SEARCH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSEARCH_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SECURITY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSECURITY_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SEQUENCE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSEQUENCE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SETS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSETS_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SHOW_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSHOW_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SNAPSHOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSNAPSHOT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SOURCE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSOURCE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SQL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSQL_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) STABLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTABLE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) START_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTART_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) STATIC_DESCRIBE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) STORED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTORED_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) STORING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTORING_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) STRICT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTRICT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SYSTEM_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSYSTEM_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SYSTEM_TIME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSYSTEM_TIME_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TABLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTABLE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TABLES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTABLES_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TARGET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTARGET_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TEMP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTEMP_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TEMPORARY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTEMPORARY_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TIME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTIME_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TIMESTAMP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTIMESTAMP_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TRANSACTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTRANSACTION_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TRANSFORM_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTRANSFORM_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TRUNCATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTRUNCATE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TYPE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTYPE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) UNDROP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNDROP_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) UNIQUE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNIQUE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) UNKNOWN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNKNOWN_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) UNPIVOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNPIVOT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) UNTIL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNTIL_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) UPDATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUPDATE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) VALUE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserVALUE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) VALUES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserVALUES_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) VECTOR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserVECTOR_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) VIEW_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserVIEW_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) VIEWS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserVIEWS_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) VOLATILE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserVOLATILE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) WEIGHT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWEIGHT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) WHILE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWHILE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) WRITE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWRITE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ZONE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserZONE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DESCRIPTOR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDESCRIPTOR_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) INTERLEAVE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINTERLEAVE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) NULL_FILTERED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNULL_FILTERED_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PARENT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPARENT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DESTINATION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDESTINATION_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PROPERTY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPROPERTY_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) GRAPH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGRAPH_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) NODE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNODE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PROPERTIES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPROPERTIES_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) LABEL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLABEL_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) EDGE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEDGE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Common_keyword_as_identifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Common_keyword_as_identifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCommon_keyword_as_identifier(s)
	}
}

func (s *Common_keyword_as_identifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCommon_keyword_as_identifier(s)
	}
}

func (s *Common_keyword_as_identifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCommon_keyword_as_identifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Common_keyword_as_identifier() (localctx ICommon_keyword_as_identifierContext) {
	localctx = NewCommon_keyword_as_identifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1064, GoogleSQLParserRULE_common_keyword_as_identifier)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6142)
		_la = p.GetTokenStream().LA(1)

		if !(((int64((_la-72)) & ^0x3f) == 0 && ((int64(1)<<(_la-72))&-247260703569407) != 0) || ((int64((_la-136)) & ^0x3f) == 0 && ((int64(1)<<(_la-136))&-1) != 0) || ((int64((_la-200)) & ^0x3f) == 0 && ((int64(1)<<(_la-200))&-36028797018963969) != 0) || ((int64((_la-264)) & ^0x3f) == 0 && ((int64(1)<<(_la-264))&536870911) != 0) || ((int64((_la-338)) & ^0x3f) == 0 && ((int64(1)<<(_la-338))&4065) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IToken_identifierContext is an interface to support dynamic dispatch.
type IToken_identifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode

	// IsToken_identifierContext differentiates from other interfaces.
	IsToken_identifierContext()
}

type Token_identifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyToken_identifierContext() *Token_identifierContext {
	var p = new(Token_identifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_token_identifier
	return p
}

func InitEmptyToken_identifierContext(p *Token_identifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_token_identifier
}

func (*Token_identifierContext) IsToken_identifierContext() {}

func NewToken_identifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Token_identifierContext {
	var p = new(Token_identifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_token_identifier

	return p
}

func (s *Token_identifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Token_identifierContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIDENTIFIER, 0)
}

func (s *Token_identifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Token_identifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Token_identifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterToken_identifier(s)
	}
}

func (s *Token_identifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitToken_identifier(s)
	}
}

func (s *Token_identifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitToken_identifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Token_identifier() (localctx IToken_identifierContext) {
	localctx = NewToken_identifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1066, GoogleSQLParserRULE_token_identifier)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6144)
		p.Match(GoogleSQLParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStruct_typeContext is an interface to support dynamic dispatch.
type IStruct_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	STRUCT_SYMBOL() antlr.TerminalNode
	Template_type_open() ITemplate_type_openContext
	Template_type_close() ITemplate_type_closeContext
	Struct_type_prefix() IStruct_type_prefixContext

	// IsStruct_typeContext differentiates from other interfaces.
	IsStruct_typeContext()
}

type Struct_typeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStruct_typeContext() *Struct_typeContext {
	var p = new(Struct_typeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_type
	return p
}

func InitEmptyStruct_typeContext(p *Struct_typeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_type
}

func (*Struct_typeContext) IsStruct_typeContext() {}

func NewStruct_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Struct_typeContext {
	var p = new(Struct_typeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_struct_type

	return p
}

func (s *Struct_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Struct_typeContext) STRUCT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTRUCT_SYMBOL, 0)
}

func (s *Struct_typeContext) Template_type_open() ITemplate_type_openContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_openContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_openContext)
}

func (s *Struct_typeContext) Template_type_close() ITemplate_type_closeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_closeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_closeContext)
}

func (s *Struct_typeContext) Struct_type_prefix() IStruct_type_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_type_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_type_prefixContext)
}

func (s *Struct_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Struct_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Struct_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStruct_type(s)
	}
}

func (s *Struct_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStruct_type(s)
	}
}

func (s *Struct_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStruct_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Struct_type() (localctx IStruct_typeContext) {
	localctx = NewStruct_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1068, GoogleSQLParserRULE_struct_type)
	p.SetState(6153)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 743, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6146)
			p.Match(GoogleSQLParserSTRUCT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(6147)
			p.Template_type_open()
		}
		{
			p.SetState(6148)
			p.Template_type_close()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6150)
			p.Struct_type_prefix()
		}
		{
			p.SetState(6151)
			p.Template_type_close()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStruct_type_prefixContext is an interface to support dynamic dispatch.
type IStruct_type_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	STRUCT_SYMBOL() antlr.TerminalNode
	Template_type_open() ITemplate_type_openContext
	AllStruct_field() []IStruct_fieldContext
	Struct_field(i int) IStruct_fieldContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsStruct_type_prefixContext differentiates from other interfaces.
	IsStruct_type_prefixContext()
}

type Struct_type_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStruct_type_prefixContext() *Struct_type_prefixContext {
	var p = new(Struct_type_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_type_prefix
	return p
}

func InitEmptyStruct_type_prefixContext(p *Struct_type_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_type_prefix
}

func (*Struct_type_prefixContext) IsStruct_type_prefixContext() {}

func NewStruct_type_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Struct_type_prefixContext {
	var p = new(Struct_type_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_struct_type_prefix

	return p
}

func (s *Struct_type_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Struct_type_prefixContext) STRUCT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTRUCT_SYMBOL, 0)
}

func (s *Struct_type_prefixContext) Template_type_open() ITemplate_type_openContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_openContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_openContext)
}

func (s *Struct_type_prefixContext) AllStruct_field() []IStruct_fieldContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStruct_fieldContext); ok {
			len++
		}
	}

	tst := make([]IStruct_fieldContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStruct_fieldContext); ok {
			tst[i] = t.(IStruct_fieldContext)
			i++
		}
	}

	return tst
}

func (s *Struct_type_prefixContext) Struct_field(i int) IStruct_fieldContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_fieldContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_fieldContext)
}

func (s *Struct_type_prefixContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Struct_type_prefixContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Struct_type_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Struct_type_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Struct_type_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStruct_type_prefix(s)
	}
}

func (s *Struct_type_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStruct_type_prefix(s)
	}
}

func (s *Struct_type_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStruct_type_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Struct_type_prefix() (localctx IStruct_type_prefixContext) {
	localctx = NewStruct_type_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1070, GoogleSQLParserRULE_struct_type_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6155)
		p.Match(GoogleSQLParserSTRUCT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(6156)
		p.Template_type_open()
	}
	{
		p.SetState(6157)
		p.Struct_field()
	}
	p.SetState(6162)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(6158)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(6159)
			p.Struct_field()
		}

		p.SetState(6164)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStruct_fieldContext is an interface to support dynamic dispatch.
type IStruct_fieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	Type_() ITypeContext

	// IsStruct_fieldContext differentiates from other interfaces.
	IsStruct_fieldContext()
}

type Struct_fieldContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStruct_fieldContext() *Struct_fieldContext {
	var p = new(Struct_fieldContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_field
	return p
}

func InitEmptyStruct_fieldContext(p *Struct_fieldContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_field
}

func (*Struct_fieldContext) IsStruct_fieldContext() {}

func NewStruct_fieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Struct_fieldContext {
	var p = new(Struct_fieldContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_struct_field

	return p
}

func (s *Struct_fieldContext) GetParser() antlr.Parser { return s.parser }

func (s *Struct_fieldContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Struct_fieldContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Struct_fieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Struct_fieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Struct_fieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStruct_field(s)
	}
}

func (s *Struct_fieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStruct_field(s)
	}
}

func (s *Struct_fieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStruct_field(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Struct_field() (localctx IStruct_fieldContext) {
	localctx = NewStruct_fieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1072, GoogleSQLParserRULE_struct_field)
	p.SetState(6169)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 745, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6165)
			p.Identifier()
		}
		{
			p.SetState(6166)
			p.Type_()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6168)
			p.Type_()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArray_typeContext is an interface to support dynamic dispatch.
type IArray_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ARRAY_SYMBOL() antlr.TerminalNode
	Template_type_open() ITemplate_type_openContext
	Type_() ITypeContext
	Template_type_close() ITemplate_type_closeContext

	// IsArray_typeContext differentiates from other interfaces.
	IsArray_typeContext()
}

type Array_typeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArray_typeContext() *Array_typeContext {
	var p = new(Array_typeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_array_type
	return p
}

func InitEmptyArray_typeContext(p *Array_typeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_array_type
}

func (*Array_typeContext) IsArray_typeContext() {}

func NewArray_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_typeContext {
	var p = new(Array_typeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_array_type

	return p
}

func (s *Array_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_typeContext) ARRAY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserARRAY_SYMBOL, 0)
}

func (s *Array_typeContext) Template_type_open() ITemplate_type_openContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_openContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_openContext)
}

func (s *Array_typeContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Array_typeContext) Template_type_close() ITemplate_type_closeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_closeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_closeContext)
}

func (s *Array_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Array_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterArray_type(s)
	}
}

func (s *Array_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitArray_type(s)
	}
}

func (s *Array_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitArray_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Array_type() (localctx IArray_typeContext) {
	localctx = NewArray_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1074, GoogleSQLParserRULE_array_type)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6171)
		p.Match(GoogleSQLParserARRAY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(6172)
		p.Template_type_open()
	}
	{
		p.SetState(6173)
		p.Type_()
	}
	{
		p.SetState(6174)
		p.Template_type_close()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITemplate_type_openContext is an interface to support dynamic dispatch.
type ITemplate_type_openContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LT_OPERATOR() antlr.TerminalNode

	// IsTemplate_type_openContext differentiates from other interfaces.
	IsTemplate_type_openContext()
}

type Template_type_openContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplate_type_openContext() *Template_type_openContext {
	var p = new(Template_type_openContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_template_type_open
	return p
}

func InitEmptyTemplate_type_openContext(p *Template_type_openContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_template_type_open
}

func (*Template_type_openContext) IsTemplate_type_openContext() {}

func NewTemplate_type_openContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Template_type_openContext {
	var p = new(Template_type_openContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_template_type_open

	return p
}

func (s *Template_type_openContext) GetParser() antlr.Parser { return s.parser }

func (s *Template_type_openContext) LT_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLT_OPERATOR, 0)
}

func (s *Template_type_openContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Template_type_openContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Template_type_openContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTemplate_type_open(s)
	}
}

func (s *Template_type_openContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTemplate_type_open(s)
	}
}

func (s *Template_type_openContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTemplate_type_open(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Template_type_open() (localctx ITemplate_type_openContext) {
	localctx = NewTemplate_type_openContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1076, GoogleSQLParserRULE_template_type_open)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6176)
		p.Match(GoogleSQLParserLT_OPERATOR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITemplate_type_closeContext is an interface to support dynamic dispatch.
type ITemplate_type_closeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	GT_OPERATOR() antlr.TerminalNode

	// IsTemplate_type_closeContext differentiates from other interfaces.
	IsTemplate_type_closeContext()
}

type Template_type_closeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplate_type_closeContext() *Template_type_closeContext {
	var p = new(Template_type_closeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_template_type_close
	return p
}

func InitEmptyTemplate_type_closeContext(p *Template_type_closeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_template_type_close
}

func (*Template_type_closeContext) IsTemplate_type_closeContext() {}

func NewTemplate_type_closeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Template_type_closeContext {
	var p = new(Template_type_closeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_template_type_close

	return p
}

func (s *Template_type_closeContext) GetParser() antlr.Parser { return s.parser }

func (s *Template_type_closeContext) GT_OPERATOR() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGT_OPERATOR, 0)
}

func (s *Template_type_closeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Template_type_closeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Template_type_closeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTemplate_type_close(s)
	}
}

func (s *Template_type_closeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTemplate_type_close(s)
	}
}

func (s *Template_type_closeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTemplate_type_close(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Template_type_close() (localctx ITemplate_type_closeContext) {
	localctx = NewTemplate_type_closeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1078, GoogleSQLParserRULE_template_type_close)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6178)
		p.Match(GoogleSQLParserGT_OPERATOR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDate_or_time_literalContext is an interface to support dynamic dispatch.
type IDate_or_time_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Date_or_time_literal_kind() IDate_or_time_literal_kindContext
	String_literal() IString_literalContext

	// IsDate_or_time_literalContext differentiates from other interfaces.
	IsDate_or_time_literalContext()
}

type Date_or_time_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDate_or_time_literalContext() *Date_or_time_literalContext {
	var p = new(Date_or_time_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_date_or_time_literal
	return p
}

func InitEmptyDate_or_time_literalContext(p *Date_or_time_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_date_or_time_literal
}

func (*Date_or_time_literalContext) IsDate_or_time_literalContext() {}

func NewDate_or_time_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Date_or_time_literalContext {
	var p = new(Date_or_time_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_date_or_time_literal

	return p
}

func (s *Date_or_time_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Date_or_time_literalContext) Date_or_time_literal_kind() IDate_or_time_literal_kindContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDate_or_time_literal_kindContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDate_or_time_literal_kindContext)
}

func (s *Date_or_time_literalContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Date_or_time_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Date_or_time_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Date_or_time_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterDate_or_time_literal(s)
	}
}

func (s *Date_or_time_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitDate_or_time_literal(s)
	}
}

func (s *Date_or_time_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitDate_or_time_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Date_or_time_literal() (localctx IDate_or_time_literalContext) {
	localctx = NewDate_or_time_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1080, GoogleSQLParserRULE_date_or_time_literal)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6180)
		p.Date_or_time_literal_kind()
	}
	{
		p.SetState(6181)
		p.string_literal(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDate_or_time_literal_kindContext is an interface to support dynamic dispatch.
type IDate_or_time_literal_kindContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DATE_SYMBOL() antlr.TerminalNode
	TIME_SYMBOL() antlr.TerminalNode
	DATETIME_SYMBOL() antlr.TerminalNode
	TIMESTAMP_SYMBOL() antlr.TerminalNode

	// IsDate_or_time_literal_kindContext differentiates from other interfaces.
	IsDate_or_time_literal_kindContext()
}

type Date_or_time_literal_kindContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDate_or_time_literal_kindContext() *Date_or_time_literal_kindContext {
	var p = new(Date_or_time_literal_kindContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_date_or_time_literal_kind
	return p
}

func InitEmptyDate_or_time_literal_kindContext(p *Date_or_time_literal_kindContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_date_or_time_literal_kind
}

func (*Date_or_time_literal_kindContext) IsDate_or_time_literal_kindContext() {}

func NewDate_or_time_literal_kindContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Date_or_time_literal_kindContext {
	var p = new(Date_or_time_literal_kindContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_date_or_time_literal_kind

	return p
}

func (s *Date_or_time_literal_kindContext) GetParser() antlr.Parser { return s.parser }

func (s *Date_or_time_literal_kindContext) DATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDATE_SYMBOL, 0)
}

func (s *Date_or_time_literal_kindContext) TIME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTIME_SYMBOL, 0)
}

func (s *Date_or_time_literal_kindContext) DATETIME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDATETIME_SYMBOL, 0)
}

func (s *Date_or_time_literal_kindContext) TIMESTAMP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTIMESTAMP_SYMBOL, 0)
}

func (s *Date_or_time_literal_kindContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Date_or_time_literal_kindContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Date_or_time_literal_kindContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterDate_or_time_literal_kind(s)
	}
}

func (s *Date_or_time_literal_kindContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitDate_or_time_literal_kind(s)
	}
}

func (s *Date_or_time_literal_kindContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitDate_or_time_literal_kind(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Date_or_time_literal_kind() (localctx IDate_or_time_literal_kindContext) {
	localctx = NewDate_or_time_literal_kindContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1082, GoogleSQLParserRULE_date_or_time_literal_kind)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6183)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-113)) & ^0x3f) == 0 && ((int64(1)<<(_la-113))&15) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFloating_point_literalContext is an interface to support dynamic dispatch.
type IFloating_point_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FLOATING_POINT_LITERAL() antlr.TerminalNode

	// IsFloating_point_literalContext differentiates from other interfaces.
	IsFloating_point_literalContext()
}

type Floating_point_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFloating_point_literalContext() *Floating_point_literalContext {
	var p = new(Floating_point_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_floating_point_literal
	return p
}

func InitEmptyFloating_point_literalContext(p *Floating_point_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_floating_point_literal
}

func (*Floating_point_literalContext) IsFloating_point_literalContext() {}

func NewFloating_point_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Floating_point_literalContext {
	var p = new(Floating_point_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_floating_point_literal

	return p
}

func (s *Floating_point_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Floating_point_literalContext) FLOATING_POINT_LITERAL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFLOATING_POINT_LITERAL, 0)
}

func (s *Floating_point_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Floating_point_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Floating_point_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFloating_point_literal(s)
	}
}

func (s *Floating_point_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFloating_point_literal(s)
	}
}

func (s *Floating_point_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFloating_point_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Floating_point_literal() (localctx IFloating_point_literalContext) {
	localctx = NewFloating_point_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1084, GoogleSQLParserRULE_floating_point_literal)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6185)
		p.Match(GoogleSQLParserFLOATING_POINT_LITERAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJson_literalContext is an interface to support dynamic dispatch.
type IJson_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	JSON_SYMBOL() antlr.TerminalNode
	String_literal() IString_literalContext

	// IsJson_literalContext differentiates from other interfaces.
	IsJson_literalContext()
}

type Json_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJson_literalContext() *Json_literalContext {
	var p = new(Json_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_json_literal
	return p
}

func InitEmptyJson_literalContext(p *Json_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_json_literal
}

func (*Json_literalContext) IsJson_literalContext() {}

func NewJson_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Json_literalContext {
	var p = new(Json_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_json_literal

	return p
}

func (s *Json_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Json_literalContext) JSON_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserJSON_SYMBOL, 0)
}

func (s *Json_literalContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Json_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Json_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Json_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterJson_literal(s)
	}
}

func (s *Json_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitJson_literal(s)
	}
}

func (s *Json_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitJson_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Json_literal() (localctx IJson_literalContext) {
	localctx = NewJson_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1086, GoogleSQLParserRULE_json_literal)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6187)
		p.Match(GoogleSQLParserJSON_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(6188)
		p.string_literal(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBignumeric_literalContext is an interface to support dynamic dispatch.
type IBignumeric_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Bignumeric_literal_prefix() IBignumeric_literal_prefixContext
	String_literal() IString_literalContext

	// IsBignumeric_literalContext differentiates from other interfaces.
	IsBignumeric_literalContext()
}

type Bignumeric_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBignumeric_literalContext() *Bignumeric_literalContext {
	var p = new(Bignumeric_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_bignumeric_literal
	return p
}

func InitEmptyBignumeric_literalContext(p *Bignumeric_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_bignumeric_literal
}

func (*Bignumeric_literalContext) IsBignumeric_literalContext() {}

func NewBignumeric_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bignumeric_literalContext {
	var p = new(Bignumeric_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_bignumeric_literal

	return p
}

func (s *Bignumeric_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Bignumeric_literalContext) Bignumeric_literal_prefix() IBignumeric_literal_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBignumeric_literal_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBignumeric_literal_prefixContext)
}

func (s *Bignumeric_literalContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Bignumeric_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bignumeric_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bignumeric_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBignumeric_literal(s)
	}
}

func (s *Bignumeric_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBignumeric_literal(s)
	}
}

func (s *Bignumeric_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBignumeric_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Bignumeric_literal() (localctx IBignumeric_literalContext) {
	localctx = NewBignumeric_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1088, GoogleSQLParserRULE_bignumeric_literal)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6190)
		p.Bignumeric_literal_prefix()
	}
	{
		p.SetState(6191)
		p.string_literal(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBignumeric_literal_prefixContext is an interface to support dynamic dispatch.
type IBignumeric_literal_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BIGNUMERIC_SYMBOL() antlr.TerminalNode
	BIGDECIMAL_SYMBOL() antlr.TerminalNode

	// IsBignumeric_literal_prefixContext differentiates from other interfaces.
	IsBignumeric_literal_prefixContext()
}

type Bignumeric_literal_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBignumeric_literal_prefixContext() *Bignumeric_literal_prefixContext {
	var p = new(Bignumeric_literal_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_bignumeric_literal_prefix
	return p
}

func InitEmptyBignumeric_literal_prefixContext(p *Bignumeric_literal_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_bignumeric_literal_prefix
}

func (*Bignumeric_literal_prefixContext) IsBignumeric_literal_prefixContext() {}

func NewBignumeric_literal_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bignumeric_literal_prefixContext {
	var p = new(Bignumeric_literal_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_bignumeric_literal_prefix

	return p
}

func (s *Bignumeric_literal_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Bignumeric_literal_prefixContext) BIGNUMERIC_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBIGNUMERIC_SYMBOL, 0)
}

func (s *Bignumeric_literal_prefixContext) BIGDECIMAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBIGDECIMAL_SYMBOL, 0)
}

func (s *Bignumeric_literal_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bignumeric_literal_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bignumeric_literal_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBignumeric_literal_prefix(s)
	}
}

func (s *Bignumeric_literal_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBignumeric_literal_prefix(s)
	}
}

func (s *Bignumeric_literal_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBignumeric_literal_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Bignumeric_literal_prefix() (localctx IBignumeric_literal_prefixContext) {
	localctx = NewBignumeric_literal_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1090, GoogleSQLParserRULE_bignumeric_literal_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6193)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserBIGNUMERIC_SYMBOL || _la == GoogleSQLParserBIGDECIMAL_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INumeric_literalContext is an interface to support dynamic dispatch.
type INumeric_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Numeric_literal_prefix() INumeric_literal_prefixContext
	String_literal() IString_literalContext

	// IsNumeric_literalContext differentiates from other interfaces.
	IsNumeric_literalContext()
}

type Numeric_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumeric_literalContext() *Numeric_literalContext {
	var p = new(Numeric_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_numeric_literal
	return p
}

func InitEmptyNumeric_literalContext(p *Numeric_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_numeric_literal
}

func (*Numeric_literalContext) IsNumeric_literalContext() {}

func NewNumeric_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Numeric_literalContext {
	var p = new(Numeric_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_numeric_literal

	return p
}

func (s *Numeric_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Numeric_literalContext) Numeric_literal_prefix() INumeric_literal_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumeric_literal_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumeric_literal_prefixContext)
}

func (s *Numeric_literalContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Numeric_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Numeric_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Numeric_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterNumeric_literal(s)
	}
}

func (s *Numeric_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitNumeric_literal(s)
	}
}

func (s *Numeric_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitNumeric_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Numeric_literal() (localctx INumeric_literalContext) {
	localctx = NewNumeric_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1092, GoogleSQLParserRULE_numeric_literal)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6195)
		p.Numeric_literal_prefix()
	}
	{
		p.SetState(6196)
		p.string_literal(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INumeric_literal_prefixContext is an interface to support dynamic dispatch.
type INumeric_literal_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NUMERIC_SYMBOL() antlr.TerminalNode
	DECIMAL_SYMBOL() antlr.TerminalNode

	// IsNumeric_literal_prefixContext differentiates from other interfaces.
	IsNumeric_literal_prefixContext()
}

type Numeric_literal_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumeric_literal_prefixContext() *Numeric_literal_prefixContext {
	var p = new(Numeric_literal_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_numeric_literal_prefix
	return p
}

func InitEmptyNumeric_literal_prefixContext(p *Numeric_literal_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_numeric_literal_prefix
}

func (*Numeric_literal_prefixContext) IsNumeric_literal_prefixContext() {}

func NewNumeric_literal_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Numeric_literal_prefixContext {
	var p = new(Numeric_literal_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_numeric_literal_prefix

	return p
}

func (s *Numeric_literal_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Numeric_literal_prefixContext) NUMERIC_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNUMERIC_SYMBOL, 0)
}

func (s *Numeric_literal_prefixContext) DECIMAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDECIMAL_SYMBOL, 0)
}

func (s *Numeric_literal_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Numeric_literal_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Numeric_literal_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterNumeric_literal_prefix(s)
	}
}

func (s *Numeric_literal_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitNumeric_literal_prefix(s)
	}
}

func (s *Numeric_literal_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitNumeric_literal_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Numeric_literal_prefix() (localctx INumeric_literal_prefixContext) {
	localctx = NewNumeric_literal_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1094, GoogleSQLParserRULE_numeric_literal_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6198)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserNUMERIC_SYMBOL || _la == GoogleSQLParserDECIMAL_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInteger_literalContext is an interface to support dynamic dispatch.
type IInteger_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	INTEGER_LITERAL() antlr.TerminalNode

	// IsInteger_literalContext differentiates from other interfaces.
	IsInteger_literalContext()
}

type Integer_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInteger_literalContext() *Integer_literalContext {
	var p = new(Integer_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_integer_literal
	return p
}

func InitEmptyInteger_literalContext(p *Integer_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_integer_literal
}

func (*Integer_literalContext) IsInteger_literalContext() {}

func NewInteger_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Integer_literalContext {
	var p = new(Integer_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_integer_literal

	return p
}

func (s *Integer_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Integer_literalContext) INTEGER_LITERAL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINTEGER_LITERAL, 0)
}

func (s *Integer_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Integer_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Integer_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterInteger_literal(s)
	}
}

func (s *Integer_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitInteger_literal(s)
	}
}

func (s *Integer_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitInteger_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Integer_literal() (localctx IInteger_literalContext) {
	localctx = NewInteger_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1096, GoogleSQLParserRULE_integer_literal)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6200)
		p.Match(GoogleSQLParserINTEGER_LITERAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBytes_literalContext is an interface to support dynamic dispatch.
type IBytes_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Bytes_literal_component() IBytes_literal_componentContext
	Bytes_literal() IBytes_literalContext
	String_literal_component() IString_literal_componentContext

	// IsBytes_literalContext differentiates from other interfaces.
	IsBytes_literalContext()
}

type Bytes_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBytes_literalContext() *Bytes_literalContext {
	var p = new(Bytes_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_bytes_literal
	return p
}

func InitEmptyBytes_literalContext(p *Bytes_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_bytes_literal
}

func (*Bytes_literalContext) IsBytes_literalContext() {}

func NewBytes_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bytes_literalContext {
	var p = new(Bytes_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_bytes_literal

	return p
}

func (s *Bytes_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Bytes_literalContext) Bytes_literal_component() IBytes_literal_componentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBytes_literal_componentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBytes_literal_componentContext)
}

func (s *Bytes_literalContext) Bytes_literal() IBytes_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBytes_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBytes_literalContext)
}

func (s *Bytes_literalContext) String_literal_component() IString_literal_componentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literal_componentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literal_componentContext)
}

func (s *Bytes_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bytes_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bytes_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBytes_literal(s)
	}
}

func (s *Bytes_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBytes_literal(s)
	}
}

func (s *Bytes_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBytes_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Bytes_literal() (localctx IBytes_literalContext) {
	return p.bytes_literal(0)
}

func (p *GoogleSQLParser) bytes_literal(_p int) (localctx IBytes_literalContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewBytes_literalContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBytes_literalContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 1098
	p.EnterRecursionRule(localctx, 1098, GoogleSQLParserRULE_bytes_literal, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6203)
		p.Bytes_literal_component()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(6215)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 747, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(6213)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 746, p.GetParserRuleContext()) {
			case 1:
				localctx = NewBytes_literalContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_bytes_literal)
				p.SetState(6205)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
					goto errorExit
				}
				{
					p.SetState(6206)
					p.Bytes_literal_component()
				}

				literalStopIndex, componentStartIndex := localctx.Bytes_literal().GetStop().GetStop(), localctx.Bytes_literal_component().GetStart().GetStart()
				if literalStopIndex+1 == componentStartIndex {
					p.NotifyErrorListeners("Syntax error: concatenated bytes literals must be separated by whitespace or comments.", nil, nil)
				}

			case 2:
				localctx = NewBytes_literalContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_bytes_literal)
				p.SetState(6209)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
					goto errorExit
				}
				{
					p.SetState(6210)
					p.String_literal_component()
				}
				p.NotifyErrorListeners("Syntax error: string and bytes literals cannot be concatenated.", nil,
					nil)

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(6217)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 747, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INull_literalContext is an interface to support dynamic dispatch.
type INull_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NULL_SYMBOL() antlr.TerminalNode

	// IsNull_literalContext differentiates from other interfaces.
	IsNull_literalContext()
}

type Null_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNull_literalContext() *Null_literalContext {
	var p = new(Null_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_null_literal
	return p
}

func InitEmptyNull_literalContext(p *Null_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_null_literal
}

func (*Null_literalContext) IsNull_literalContext() {}

func NewNull_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Null_literalContext {
	var p = new(Null_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_null_literal

	return p
}

func (s *Null_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Null_literalContext) NULL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNULL_SYMBOL, 0)
}

func (s *Null_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Null_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Null_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterNull_literal(s)
	}
}

func (s *Null_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitNull_literal(s)
	}
}

func (s *Null_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitNull_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Null_literal() (localctx INull_literalContext) {
	localctx = NewNull_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1100, GoogleSQLParserRULE_null_literal)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6218)
		p.Match(GoogleSQLParserNULL_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBoolean_literalContext is an interface to support dynamic dispatch.
type IBoolean_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TRUE_SYMBOL() antlr.TerminalNode
	FALSE_SYMBOL() antlr.TerminalNode

	// IsBoolean_literalContext differentiates from other interfaces.
	IsBoolean_literalContext()
}

type Boolean_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBoolean_literalContext() *Boolean_literalContext {
	var p = new(Boolean_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_boolean_literal
	return p
}

func InitEmptyBoolean_literalContext(p *Boolean_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_boolean_literal
}

func (*Boolean_literalContext) IsBoolean_literalContext() {}

func NewBoolean_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Boolean_literalContext {
	var p = new(Boolean_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_boolean_literal

	return p
}

func (s *Boolean_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Boolean_literalContext) TRUE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTRUE_SYMBOL, 0)
}

func (s *Boolean_literalContext) FALSE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFALSE_SYMBOL, 0)
}

func (s *Boolean_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Boolean_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Boolean_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBoolean_literal(s)
	}
}

func (s *Boolean_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBoolean_literal(s)
	}
}

func (s *Boolean_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBoolean_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Boolean_literal() (localctx IBoolean_literalContext) {
	localctx = NewBoolean_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1102, GoogleSQLParserRULE_boolean_literal)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6220)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserTRUE_SYMBOL || _la == GoogleSQLParserFALSE_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IString_literalContext is an interface to support dynamic dispatch.
type IString_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	String_literal_component() IString_literal_componentContext
	String_literal() IString_literalContext
	Bytes_literal_component() IBytes_literal_componentContext

	// IsString_literalContext differentiates from other interfaces.
	IsString_literalContext()
}

type String_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyString_literalContext() *String_literalContext {
	var p = new(String_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_string_literal
	return p
}

func InitEmptyString_literalContext(p *String_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_string_literal
}

func (*String_literalContext) IsString_literalContext() {}

func NewString_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *String_literalContext {
	var p = new(String_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_string_literal

	return p
}

func (s *String_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *String_literalContext) String_literal_component() IString_literal_componentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literal_componentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literal_componentContext)
}

func (s *String_literalContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *String_literalContext) Bytes_literal_component() IBytes_literal_componentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBytes_literal_componentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBytes_literal_componentContext)
}

func (s *String_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *String_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *String_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterString_literal(s)
	}
}

func (s *String_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitString_literal(s)
	}
}

func (s *String_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitString_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) String_literal() (localctx IString_literalContext) {
	return p.string_literal(0)
}

func (p *GoogleSQLParser) string_literal(_p int) (localctx IString_literalContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewString_literalContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IString_literalContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 1104
	p.EnterRecursionRule(localctx, 1104, GoogleSQLParserRULE_string_literal, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6223)
		p.String_literal_component()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(6235)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 749, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(6233)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 748, p.GetParserRuleContext()) {
			case 1:
				localctx = NewString_literalContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_string_literal)
				p.SetState(6225)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
					goto errorExit
				}
				{
					p.SetState(6226)
					p.String_literal_component()
				}

				literalStopIndex, componentStartIndex := localctx.String_literal().GetStop().GetStop(), localctx.String_literal_component().GetStart().GetStart()
				if literalStopIndex+1 == componentStartIndex {
					p.NotifyErrorListeners("Syntax error: concatenated string literals must be separated by whitespace or comments.", nil, nil)
				}

			case 2:
				localctx = NewString_literalContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_string_literal)
				p.SetState(6229)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
					goto errorExit
				}
				{
					p.SetState(6230)
					p.Bytes_literal_component()
				}
				p.NotifyErrorListeners("Syntax error: string and bytes literals cannot be concatenated.", nil, nil)

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(6237)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 749, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IString_literal_componentContext is an interface to support dynamic dispatch.
type IString_literal_componentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	STRING_LITERAL() antlr.TerminalNode

	// IsString_literal_componentContext differentiates from other interfaces.
	IsString_literal_componentContext()
}

type String_literal_componentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyString_literal_componentContext() *String_literal_componentContext {
	var p = new(String_literal_componentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_string_literal_component
	return p
}

func InitEmptyString_literal_componentContext(p *String_literal_componentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_string_literal_component
}

func (*String_literal_componentContext) IsString_literal_componentContext() {}

func NewString_literal_componentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *String_literal_componentContext {
	var p = new(String_literal_componentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_string_literal_component

	return p
}

func (s *String_literal_componentContext) GetParser() antlr.Parser { return s.parser }

func (s *String_literal_componentContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTRING_LITERAL, 0)
}

func (s *String_literal_componentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *String_literal_componentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *String_literal_componentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterString_literal_component(s)
	}
}

func (s *String_literal_componentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitString_literal_component(s)
	}
}

func (s *String_literal_componentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitString_literal_component(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) String_literal_component() (localctx IString_literal_componentContext) {
	localctx = NewString_literal_componentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1106, GoogleSQLParserRULE_string_literal_component)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6238)
		p.Match(GoogleSQLParserSTRING_LITERAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBytes_literal_componentContext is an interface to support dynamic dispatch.
type IBytes_literal_componentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BYTES_LITERAL() antlr.TerminalNode

	// IsBytes_literal_componentContext differentiates from other interfaces.
	IsBytes_literal_componentContext()
}

type Bytes_literal_componentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBytes_literal_componentContext() *Bytes_literal_componentContext {
	var p = new(Bytes_literal_componentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_bytes_literal_component
	return p
}

func InitEmptyBytes_literal_componentContext(p *Bytes_literal_componentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_bytes_literal_component
}

func (*Bytes_literal_componentContext) IsBytes_literal_componentContext() {}

func NewBytes_literal_componentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bytes_literal_componentContext {
	var p = new(Bytes_literal_componentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_bytes_literal_component

	return p
}

func (s *Bytes_literal_componentContext) GetParser() antlr.Parser { return s.parser }

func (s *Bytes_literal_componentContext) BYTES_LITERAL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBYTES_LITERAL, 0)
}

func (s *Bytes_literal_componentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bytes_literal_componentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bytes_literal_componentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBytes_literal_component(s)
	}
}

func (s *Bytes_literal_componentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBytes_literal_component(s)
	}
}

func (s *Bytes_literal_componentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBytes_literal_component(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Bytes_literal_component() (localctx IBytes_literal_componentContext) {
	localctx = NewBytes_literal_componentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 1108, GoogleSQLParserRULE_bytes_literal_component)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6240)
		p.Match(GoogleSQLParserBYTES_LITERAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

func (p *GoogleSQLParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 291:
		var t *Query_set_operation_prefixContext = nil
		if localctx != nil {
			t = localctx.(*Query_set_operation_prefixContext)
		}
		return p.Query_set_operation_prefix_Sempred(t, predIndex)

	case 327:
		var t *Table_primaryContext = nil
		if localctx != nil {
			t = localctx.(*Table_primaryContext)
		}
		return p.Table_primary_Sempred(t, predIndex)

	case 341:
		var t *Row_pattern_exprContext = nil
		if localctx != nil {
			t = localctx.(*Row_pattern_exprContext)
		}
		return p.Row_pattern_expr_Sempred(t, predIndex)

	case 342:
		var t *Row_pattern_concatenationContext = nil
		if localctx != nil {
			t = localctx.(*Row_pattern_concatenationContext)
		}
		return p.Row_pattern_concatenation_Sempred(t, predIndex)

	case 360:
		var t *Dashed_path_expressionContext = nil
		if localctx != nil {
			t = localctx.(*Dashed_path_expressionContext)
		}
		return p.Dashed_path_expression_Sempred(t, predIndex)

	case 361:
		var t *Dashed_identifierContext = nil
		if localctx != nil {
			t = localctx.(*Dashed_identifierContext)
		}
		return p.Dashed_identifier_Sempred(t, predIndex)

	case 362:
		var t *Slashed_identifierContext = nil
		if localctx != nil {
			t = localctx.(*Slashed_identifierContext)
		}
		return p.Slashed_identifier_Sempred(t, predIndex)

	case 382:
		var t *Unpivot_in_item_list_prefixContext = nil
		if localctx != nil {
			t = localctx.(*Unpivot_in_item_list_prefixContext)
		}
		return p.Unpivot_in_item_list_prefix_Sempred(t, predIndex)

	case 406:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	case 407:
		var t *Expression_higher_prec_than_andContext = nil
		if localctx != nil {
			t = localctx.(*Expression_higher_prec_than_andContext)
		}
		return p.Expression_higher_prec_than_and_Sempred(t, predIndex)

	case 483:
		var t *Generalized_path_expressionContext = nil
		if localctx != nil {
			t = localctx.(*Generalized_path_expressionContext)
		}
		return p.Generalized_path_expression_Sempred(t, predIndex)

	case 484:
		var t *Generalized_extension_pathContext = nil
		if localctx != nil {
			t = localctx.(*Generalized_extension_pathContext)
		}
		return p.Generalized_extension_path_Sempred(t, predIndex)

	case 501:
		var t *Braced_constructor_prefixContext = nil
		if localctx != nil {
			t = localctx.(*Braced_constructor_prefixContext)
		}
		return p.Braced_constructor_prefix_Sempred(t, predIndex)

	case 549:
		var t *Bytes_literalContext = nil
		if localctx != nil {
			t = localctx.(*Bytes_literalContext)
		}
		return p.Bytes_literal_Sempred(t, predIndex)

	case 552:
		var t *String_literalContext = nil
		if localctx != nil {
			t = localctx.(*String_literalContext)
		}
		return p.String_literal_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *GoogleSQLParser) Query_set_operation_prefix_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) Table_primary_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) Row_pattern_expr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 3:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) Row_pattern_concatenation_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 4:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) Dashed_path_expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 5:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) Dashed_identifier_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 6:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) Slashed_identifier_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 9:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) Unpivot_in_item_list_prefix_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 11:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 12:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) Expression_higher_prec_than_and_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 13:
		return p.Precpred(p.GetParserRuleContext(), 20)

	case 14:
		return p.Precpred(p.GetParserRuleContext(), 19)

	case 15:
		return p.Precpred(p.GetParserRuleContext(), 16)

	case 16:
		return p.Precpred(p.GetParserRuleContext(), 11)

	case 17:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 18:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 19:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 20:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 21:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 22:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 23:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 24:
		return p.Precpred(p.GetParserRuleContext(), 26)

	case 25:
		return p.Precpred(p.GetParserRuleContext(), 25)

	case 26:
		return p.Precpred(p.GetParserRuleContext(), 24)

	case 27:
		return p.Precpred(p.GetParserRuleContext(), 22)

	case 28:
		return p.Precpred(p.GetParserRuleContext(), 21)

	case 29:
		return p.Precpred(p.GetParserRuleContext(), 18)

	case 30:
		return p.Precpred(p.GetParserRuleContext(), 17)

	case 31:
		return p.Precpred(p.GetParserRuleContext(), 15)

	case 32:
		return p.Precpred(p.GetParserRuleContext(), 14)

	case 33:
		return p.Precpred(p.GetParserRuleContext(), 13)

	case 34:
		return p.Precpred(p.GetParserRuleContext(), 12)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) Generalized_path_expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 35:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 36:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 37:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) Generalized_extension_path_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 38:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 39:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) Braced_constructor_prefix_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 40:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 41:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 42:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) Bytes_literal_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 43:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 44:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) String_literal_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 45:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 46:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
