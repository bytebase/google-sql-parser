// Code generated from GoogleSQLParser.g4 by ANTLR 4.13.1. DO NOT EDIT.

package parser // GoogleSQLParser
import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr4-go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type GoogleSQLParser struct {
	*antlr.BaseParser
}

var GoogleSQLParserParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func googlesqlparserParserInit() {
	staticData := &GoogleSQLParserParserStaticData
	staticData.LiteralNames = []string{
		"", "'ARRAY'", "'ALL'", "'AS'", "'ASC'", "'BY'", "'CROSS'", "'JOIN'",
		"'DELTA'", "'DESC'", "'DIFFERENTIAL_PRIVACY'", "'DISTINCT'", "'EPSILON'",
		"'EXCEPT'", "'EXCLUDE'", "'FOR'", "'FROM'", "'FULL'", "'IN'", "'INCLUDE'",
		"'INNER'", "'INTERSECT'", "'LEFT'", "'LIMIT'", "'MAX_GROUPS_CONTRIBUTED'",
		"'NULL'", "'NULLS'", "'OF'", "'OFFSET'", "'ON'", "'OPTIONS'", "'ORDER'",
		"'OUTER'", "'PERCENT'", "'PIVOT'", "'PRIVACY_UNIT_COLUMN'", "'RIGHT'",
		"'RECURSIVE'", "'REPLACE'", "'UNPIVOT'", "'SELECT'", "'STRUCT'", "'SYSTEM'",
		"'SYSTEM_TIME'", "'TABLESAMPLE'", "'UNION'", "'UNNEST'", "'USING'",
		"'VALUE'", "'WITH'", "'TRUE'", "'FALSE'", "'NUMERIC'", "'DECIMAL'",
		"'BIGNUMERIC'", "'BIGDECIMAL'", "'NOT'", "'AND'", "'JSON'", "'DATE'",
		"'TIME'", "'DATETIME'", "'TIMESTAMP'", "'RANGE'", "'INTERVAL'", "'SIMPLE'",
		"'ABORT'", "'ACCESS'", "'ACTION'", "'AGGREGATE'", "'ADD'", "'ALTER'",
		"'ALWAYS'", "'ANALYZE'", "'APPROX'", "'ARE'", "'ASSERT'", "'BATCH'",
		"'BEGIN'", "'BREAK'", "'CALL'", "'CASCADE'", "'CHECK'", "'CLAMPED'",
		"'CLONE'", "'COPY'", "'CLUSTER'", "'COLUMN'", "'COLUMNS'", "'COMMIT'",
		"'CONNECTION'", "'CONSTANT'", "'CONSTRAINT'", "'CONTINUE'", "'CORRESPONDING'",
		"'CYCLE'", "'DATA'", "'DATABASE'", "'DECLARE'", "'DEFINER'", "'DELETE'",
		"'DELETION'", "'DEPTH'", "'DESCRIBE'", "'DETERMINISTIC'", "'DO'", "'DROP'",
		"'ELSEIF'", "'ENFORCED'", "'ERROR'", "'EXCEPTION'", "'EXECUTE'", "'EXPLAIN'",
		"'EXPORT'", "'EXTEND'", "'EXTERNAL'", "'FILES'", "'FILTER'", "'FILL'",
		"'FIRST'", "'FOREIGN'", "'FORMAT'", "'FUNCTION'", "'GENERATED'", "'GRANT'",
		"'GROUP_ROWS'", "'HIDDEN'", "'IDENTITY'", "'IMMEDIATE'", "'IMMUTABLE'",
		"'IMPORT'", "'INCREMENT'", "'INDEX'", "'INOUT'", "'INPUT'", "'INSERT'",
		"'INVOKER'", "'ISOLATION'", "'ITERATE'", "'KEY'", "'LANGUAGE'", "'LAST'",
		"'LEAVE'", "'LEVEL'", "'LOAD'", "'LOOP'", "'MACRO'", "'MAP'", "'MATCH'",
		"'KW_MATCH_RECOGNIZE_NONRESERVED'", "'MATCHED'", "'MATERIALIZED'", "'MAX'",
		"'MAXVALUE'", "'MEASURES'", "'MESSAGE'", "'METADATA'", "'MIN'", "'MINVALUE'",
		"'MODEL'", "'MODULE'", "'ONLY'", "'OUT'", "'OUTPUT'", "'OVERWRITE'",
		"'PARTITIONS'", "'PATTERN'", "'POLICIES'", "'POLICY'", "'PRIMARY'",
		"'PRIVATE'", "'PRIVILEGE'", "'PRIVILEGES'", "'PROCEDURE'", "'PROJECT'",
		"'PUBLIC'", "'RAISE'", "'READ'", "'REFERENCES'", "'REMOTE'", "'REMOVE'",
		"'RENAME'", "'REPEAT'", "'REPEATABLE'", "'REPLACE_FIELDS'", "'REPLICA'",
		"'REPORT'", "'RESTRICT'", "'RESTRICTION'", "'RETURNS'", "'RETURN'",
		"'REVOKE'", "'ROLLBACK'", "'ROW'", "'RUN'", "'SAFE_CAST'", "'SCHEMA'",
		"'SEARCH'", "'SECURITY'", "'SEQUENCE'", "'SETS'", "'SHOW'", "'SNAPSHOT'",
		"'SOURCE'", "'SQL'", "'STABLE'", "'START'", "'STATIC_DESCRIBE'", "'STORED'",
		"'STORING'", "'STRICT'", "'TABLE'", "'TABLES'", "'TARGET'", "'TEMP'",
		"'TEMPORARY'", "'TRANSACTION'", "'TRANSFORM'", "'TRUNCATE'", "'TYPE'",
		"'UNDROP'", "'UNIQUE'", "'UNKNOWN'", "'UNTIL'", "'UPDATE'", "'VALUES'",
		"'VECTOR'", "'VIEW'", "'VIEWS'", "'VOLATILE'", "'WEIGHT'", "'WHILE'",
		"'WRITE'", "'ZONE'", "'DESCRIPTOR'", "'INTERLEAVE'", "'NULL_FILTERED'",
		"'PARENT'", "'COLLATE'", "'*'", "','", "'.'", "'='", "'{'", "'}'", "'<'",
		"'>'", "'('", "')'", "'['", "']'", "';'", "'''", "'''''", "'\"'", "'\"\"\"'",
		"'`'", "'-'", "'?'", "'@'", "'@@'", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "'->'",
	}
	staticData.SymbolicNames = []string{
		"", "ARRAY_SYMBOL", "ALL_SYMBOL", "AS_SYMBOL", "ASC_SYMBOL", "BY_SYMBOL",
		"CROSS_SYMBOL", "JOIN_SYMBOL", "DELTA_SYMBOL", "DESC_SYMBOL", "DIFFERENTIAL_PRIVACY_SYMBOL",
		"DISTINCT_SYMBOL", "EPSILON_SYMBOL", "EXCEPT_SYMBOL", "EXCLUDE_SYMBOL",
		"FOR_SYMBOL", "FROM_SYMBOL", "FULL_SYMBOL", "IN_SYMBOL", "INCLUDE_SYMBOL",
		"INNER_SYMBOL", "INTERSECT_SYMBOL", "LEFT_SYMBOL", "LIMIT_SYMBOL", "MAX_GROUPS_CONTRIBUTED_SYMBOL",
		"NULL_SYMBOL", "NULLS_SYMBOL", "OF_SYMBOL", "OFFSET_SYMBOL", "ON_SYMBOL",
		"OPTIONS_SYMBOL", "ORDER_SYMBOL", "OUTER_SYMBOL", "PERCENT_SYMBOL",
		"PIVOT_SYMBOL", "PRIVACY_UNIT_COLUMN_SYMBOL", "RIGHT_SYMBOL", "RECURSIVE_SYMBOL",
		"REPLACE_SYMBOL", "UNPIVOT_SYMBOL", "SELECT_SYMBOL", "STRUCT_SYMBOL",
		"SYSTEM_SYMBOL", "SYSTEM_TIME_SYMBOL", "TABLESAMPLE_SYMBOL", "UNION_SYMBOL",
		"UNNEST_SYMBOL", "USING_SYMBOL", "VALUE_SYMBOL", "WITH_SYMBOL", "TRUE_SYMBOL",
		"FALSE_SYMBOL", "NUMERIC_SYMBOL", "DECIMAL_SYMBOL", "BIGNUMERIC_SYMBOL",
		"BIGDECIMAL_SYMBOL", "NOT_SYMBOL", "AND_SYMBOL", "JSON_SYMBOL", "DATE_SYMBOL",
		"TIME_SYMBOL", "DATETIME_SYMBOL", "TIMESTAMP_SYMBOL", "RANGE_SYMBOL",
		"INTERVAL_SYMBOL", "SIMPLE_SYMBOL", "ABORT_SYMBOL", "ACCESS_SYMBOL",
		"ACTION_SYMBOL", "AGGREGATE_SYMBOL", "ADD_SYMBOL", "ALTER_SYMBOL", "ALWAYS_SYMBOL",
		"ANALYZE_SYMBOL", "APPROX_SYMBOL", "ARE_SYMBOL", "ASSERT_SYMBOL", "BATCH_SYMBOL",
		"BEGIN_SYMBOL", "BREAK_SYMBOL", "CALL_SYMBOL", "CASCADE_SYMBOL", "CHECK_SYMBOL",
		"CLAMPED_SYMBOL", "CLONE_SYMBOL", "COPY_SYMBOL", "CLUSTER_SYMBOL", "COLUMN_SYMBOL",
		"COLUMNS_SYMBOL", "COMMIT_SYMBOL", "CONNECTION_SYMBOL", "CONSTANT_SYMBOL",
		"CONSTRAINT_SYMBOL", "CONTINUE_SYMBOL", "CORRESPONDING_SYMBOL", "CYCLE_SYMBOL",
		"DATA_SYMBOL", "DATABASE_SYMBOL", "DECLARE_SYMBOL", "DEFINER_SYMBOL",
		"DELETE_SYMBOL", "DELETION_SYMBOL", "DEPTH_SYMBOL", "DESCRIBE_SYMBOL",
		"DETERMINISTIC_SYMBOL", "DO_SYMBOL", "DROP_SYMBOL", "ELSEIF_SYMBOL",
		"ENFORCED_SYMBOL", "ERROR_SYMBOL", "EXCEPTION_SYMBOL", "EXECUTE_SYMBOL",
		"EXPLAIN_SYMBOL", "EXPORT_SYMBOL", "EXTEND_SYMBOL", "EXTERNAL_SYMBOL",
		"FILES_SYMBOL", "FILTER_SYMBOL", "FILL_SYMBOL", "FIRST_SYMBOL", "FOREIGN_SYMBOL",
		"FORMAT_SYMBOL", "FUNCTION_SYMBOL", "GENERATED_SYMBOL", "GRANT_SYMBOL",
		"GROUP_ROWS_SYMBOL", "HIDDEN_SYMBOL", "IDENTITY_SYMBOL", "IMMEDIATE_SYMBOL",
		"IMMUTABLE_SYMBOL", "IMPORT_SYMBOL", "INCREMENT_SYMBOL", "INDEX_SYMBOL",
		"INOUT_SYMBOL", "INPUT_SYMBOL", "INSERT_SYMBOL", "INVOKER_SYMBOL", "ISOLATION_SYMBOL",
		"ITERATE_SYMBOL", "KEY_SYMBOL", "LANGUAGE_SYMBOL", "LAST_SYMBOL", "LEAVE_SYMBOL",
		"LEVEL_SYMBOL", "LOAD_SYMBOL", "LOOP_SYMBOL", "MACRO_SYMBOL", "MAP_SYMBOL",
		"MATCH_SYMBOL", "KW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL", "MATCHED_SYMBOL",
		"MATERIALIZED_SYMBOL", "MAX_SYMBOL", "MAXVALUE_SYMBOL", "MEASURES_SYMBOL",
		"MESSAGE_SYMBOL", "METADATA_SYMBOL", "MIN_SYMBOL", "MINVALUE_SYMBOL",
		"MODEL_SYMBOL", "MODULE_SYMBOL", "ONLY_SYMBOL", "OUT_SYMBOL", "OUTPUT_SYMBOL",
		"OVERWRITE_SYMBOL", "PARTITIONS_SYMBOL", "PATTERN_SYMBOL", "POLICIES_SYMBOL",
		"POLICY_SYMBOL", "PRIMARY_SYMBOL", "PRIVATE_SYMBOL", "PRIVILEGE_SYMBOL",
		"PRIVILEGES_SYMBOL", "PROCEDURE_SYMBOL", "PROJECT_SYMBOL", "PUBLIC_SYMBOL",
		"RAISE_SYMBOL", "READ_SYMBOL", "REFERENCES_SYMBOL", "REMOTE_SYMBOL",
		"REMOVE_SYMBOL", "RENAME_SYMBOL", "REPEAT_SYMBOL", "REPEATABLE_SYMBOL",
		"REPLACE_FIELDS_SYMBOL", "REPLICA_SYMBOL", "REPORT_SYMBOL", "RESTRICT_SYMBOL",
		"RESTRICTION_SYMBOL", "RETURNS_SYMBOL", "RETURN_SYMBOL", "REVOKE_SYMBOL",
		"ROLLBACK_SYMBOL", "ROW_SYMBOL", "RUN_SYMBOL", "SAFE_CAST_SYMBOL", "SCHEMA_SYMBOL",
		"SEARCH_SYMBOL", "SECURITY_SYMBOL", "SEQUENCE_SYMBOL", "SETS_SYMBOL",
		"SHOW_SYMBOL", "SNAPSHOT_SYMBOL", "SOURCE_SYMBOL", "SQL_SYMBOL", "STABLE_SYMBOL",
		"START_SYMBOL", "STATIC_DESCRIBE_SYMBOL", "STORED_SYMBOL", "STORING_SYMBOL",
		"STRICT_SYMBOL", "TABLE_SYMBOL", "TABLES_SYMBOL", "TARGET_SYMBOL", "TEMP_SYMBOL",
		"TEMPORARY_SYMBOL", "TRANSACTION_SYMBOL", "TRANSFORM_SYMBOL", "TRUNCATE_SYMBOL",
		"TYPE_SYMBOL", "UNDROP_SYMBOL", "UNIQUE_SYMBOL", "UNKNOWN_SYMBOL", "UNTIL_SYMBOL",
		"UPDATE_SYMBOL", "VALUES_SYMBOL", "VECTOR_SYMBOL", "VIEW_SYMBOL", "VIEWS_SYMBOL",
		"VOLATILE_SYMBOL", "WEIGHT_SYMBOL", "WHILE_SYMBOL", "WRITE_SYMBOL",
		"ZONE_SYMBOL", "DESCRIPTOR_SYMBOL", "INTERLEAVE_SYMBOL", "NULL_FILTERED_SYMBOL",
		"PARENT_SYMBOL", "COLLATE_SYMBOL", "ASTERISK_SYMBOL", "COMMA_SYMBOL",
		"DOT_SYMBOL", "EQUAL_SYMBOL", "LC_BRACKET_SYMBOL", "RC_BRACKET_SYMBOL",
		"LT_BRACKET_SYMBOL", "GT_BRACKET_SYMBOL", "LR_BRACKET_SYMBOL", "RR_BRACKET_SYMBOL",
		"LS_BRACKET_SYMBOL", "RS_BRACKET_SYMBOL", "SEMI_SYMBOL", "SINGLE_QUOTE_SYMBOL",
		"SINGLE_QUOTE_3_SYMBOL", "DOUBLE_QUOTE_SYMBOL", "DOUBLE_QUOTE_3_SYMBOL",
		"BACKQUOTE_SYMBOL", "DASH_SYMBOL", "QUESTION_SYMBOL", "AT_SYMBOL", "ATAT_SYMBOL",
		"QUOTED_ID", "ID", "INT", "FLOAT", "STRING_LITERAL", "BYTES_LITERAL",
		"UNCLOSED_STRING_LITERAL", "UNCLOSED_TRIPLE_QUOTED_STRING_LITERAL",
		"UNCLOSED_RAW_STRING_LITERAL", "UNCLOSED_TRIPLE_QUOTED_RAW_STRING_LITERAL",
		"UNCLOSED_BYTES_LITERAL", "UNCLOSED_TRIPLE_QUOTED_BYTES_LITERAL", "UNCLOSED_RAW_BYTES_LITERAL",
		"UNCLOSED_TRIPLE_QUOTED_RAW_BYTES_LITERAL", "INTEGER_LITERAL", "IDENTIFIER",
		"UNCLOSED_ESCAPED_IDENTIFIER", "FUNCTION_RETURN", "WHITESPACE",
	}
	staticData.RuleNames = []string{
		"root", "stmts", "stmt", "query_statement", "query_expr", "query_primary",
		"limit_clause", "order_by_clause", "order_by_expr_list", "order_by_expr_list_item",
		"set_operator", "select", "from_clause", "tablesample_operator", "unpivot_operator",
		"single_column_unpivot", "multi_column_unpivot", "values_column_set",
		"columns_to_unpivot_list", "columns_to_unpivot_item", "column_sets_to_unpivot",
		"pivot_operator", "pivot_column_as_alias_list", "pivot_column_as_alias_list_item",
		"aggregate_function_call_as_alias_list", "aggregate_function_call_as_alias_list_item",
		"from_item", "unnest_operator", "cross_join_operator", "conditional_join_operator",
		"join_condition", "on_clause", "using_clause", "select_list", "select_list_item",
		"select_expression", "select_all", "select_all_except_clause", "select_all_replace_clause",
		"column_name_list", "expr_as_alias_list", "expr_as_alias_item", "as_alias",
		"differential_privacy_clause", "privacy_parameters", "with_statement",
		"cte", "non_recursive_cte", "recursive_cte", "recursive_union_operation",
		"base_term", "union_operator", "recursive_term", "expression", "expression_higher_prec_than_and",
		"unparenthesized_expression_higher_prec_than_and", "array_constructor",
		"array_constructor_prefix", "array_constructor_prefix_no_expressions",
		"range_literal", "range_type", "type", "collate_clause", "string_literal_or_parameter",
		"system_variable_expression", "parameter_expression", "named_parameter_expression",
		"opt_type_parameters", "type_parameters_prefix", "type_parameter", "raw_type",
		"map_type", "function_type", "function_type_prefix", "type_name", "path_expression",
		"identifier", "keyword_as_identifier", "common_keyword_as_identifier",
		"token_identifier", "struct_type", "array_type", "template_type_open",
		"template_type_close", "date_or_time_literal", "date_or_time_literal_kind",
		"floating_point_literal", "json_literal", "bignumeric_literal", "bignumeric_literal_prefix",
		"numeric_literal", "numeric_literal_prefix", "integer_literal", "bytes_literal",
		"boolean_literal", "string_literal", "string_literal_component", "bytes_literal_component",
		"count", "skip_rows", "name", "cte_name", "column_name", "alias_name",
		"table_name", "number", "integer_type", "float_type",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 279, 939, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7,
		4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7,
		10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15,
		2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2,
		21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26,
		7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7,
		31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36,
		2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 2,
		42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47,
		7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7,
		52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7, 57,
		2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62, 2,
		63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2, 68,
		7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73, 7,
		73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7, 78,
		2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83, 2,
		84, 7, 84, 2, 85, 7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2, 89,
		7, 89, 2, 90, 7, 90, 2, 91, 7, 91, 2, 92, 7, 92, 2, 93, 7, 93, 2, 94, 7,
		94, 2, 95, 7, 95, 2, 96, 7, 96, 2, 97, 7, 97, 2, 98, 7, 98, 2, 99, 7, 99,
		2, 100, 7, 100, 2, 101, 7, 101, 2, 102, 7, 102, 2, 103, 7, 103, 2, 104,
		7, 104, 2, 105, 7, 105, 2, 106, 7, 106, 2, 107, 7, 107, 1, 0, 1, 0, 1,
		0, 1, 1, 1, 1, 1, 1, 5, 1, 223, 8, 1, 10, 1, 12, 1, 226, 9, 1, 1, 1, 3,
		1, 229, 8, 1, 1, 2, 1, 2, 1, 3, 1, 3, 1, 4, 1, 4, 3, 4, 237, 8, 4, 1, 4,
		1, 4, 1, 4, 1, 4, 1, 4, 3, 4, 244, 8, 4, 1, 4, 3, 4, 247, 8, 4, 1, 4, 3,
		4, 250, 8, 4, 1, 4, 1, 4, 1, 4, 1, 4, 3, 4, 256, 8, 4, 1, 4, 3, 4, 259,
		8, 4, 5, 4, 261, 8, 4, 10, 4, 12, 4, 264, 9, 4, 1, 5, 1, 5, 1, 6, 1, 6,
		1, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 5, 8, 280,
		8, 8, 10, 8, 12, 8, 283, 9, 8, 1, 9, 1, 9, 3, 9, 287, 8, 9, 1, 10, 1, 10,
		1, 10, 1, 10, 1, 10, 1, 10, 3, 10, 295, 8, 10, 1, 11, 1, 11, 3, 11, 299,
		8, 11, 1, 11, 3, 11, 302, 8, 11, 1, 11, 1, 11, 3, 11, 306, 8, 11, 1, 11,
		1, 11, 3, 11, 310, 8, 11, 1, 12, 1, 12, 1, 12, 1, 12, 3, 12, 316, 8, 12,
		1, 12, 3, 12, 319, 8, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1,
		13, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 3, 14, 333, 8, 14, 1, 14, 1, 14,
		1, 14, 3, 14, 338, 8, 14, 1, 14, 3, 14, 341, 8, 14, 1, 15, 1, 15, 1, 15,
		1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1,
		16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 5, 17, 362, 8, 17, 10, 17, 12, 17,
		365, 9, 17, 1, 18, 1, 18, 1, 18, 5, 18, 370, 8, 18, 10, 18, 12, 18, 373,
		9, 18, 1, 19, 1, 19, 3, 19, 377, 8, 19, 1, 20, 1, 20, 1, 20, 1, 20, 1,
		21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21,
		3, 21, 394, 8, 21, 1, 22, 1, 22, 1, 22, 5, 22, 399, 8, 22, 10, 22, 12,
		22, 402, 9, 22, 1, 23, 1, 23, 3, 23, 406, 8, 23, 1, 24, 1, 24, 1, 24, 5,
		24, 411, 8, 24, 10, 24, 12, 24, 414, 9, 24, 1, 25, 3, 25, 417, 8, 25, 1,
		26, 1, 26, 1, 26, 3, 26, 422, 8, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26,
		3, 26, 429, 8, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1,
		26, 1, 26, 1, 26, 3, 26, 441, 8, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26,
		1, 26, 3, 26, 449, 8, 26, 1, 26, 1, 26, 1, 26, 3, 26, 454, 8, 26, 3, 26,
		456, 8, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1,
		26, 5, 26, 467, 8, 26, 10, 26, 12, 26, 470, 9, 26, 1, 27, 1, 27, 1, 27,
		1, 27, 3, 27, 476, 8, 27, 1, 27, 3, 27, 479, 8, 27, 1, 27, 1, 27, 1, 27,
		3, 27, 484, 8, 27, 3, 27, 486, 8, 27, 1, 28, 1, 28, 1, 28, 3, 28, 491,
		8, 28, 1, 29, 3, 29, 494, 8, 29, 1, 29, 1, 29, 1, 29, 3, 29, 499, 8, 29,
		1, 29, 1, 29, 1, 29, 3, 29, 504, 8, 29, 1, 29, 1, 29, 1, 29, 3, 29, 509,
		8, 29, 1, 29, 3, 29, 512, 8, 29, 1, 30, 1, 30, 3, 30, 516, 8, 30, 1, 31,
		1, 31, 1, 31, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 33, 1, 33, 1, 33, 5,
		33, 529, 8, 33, 10, 33, 12, 33, 532, 9, 33, 1, 34, 1, 34, 3, 34, 536, 8,
		34, 1, 35, 1, 35, 3, 35, 540, 8, 35, 1, 36, 1, 36, 1, 36, 3, 36, 545, 8,
		36, 1, 36, 1, 36, 3, 36, 549, 8, 36, 1, 36, 3, 36, 552, 8, 36, 1, 37, 1,
		37, 1, 37, 1, 37, 1, 37, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 39, 1, 39,
		1, 39, 5, 39, 567, 8, 39, 10, 39, 12, 39, 570, 9, 39, 1, 40, 1, 40, 1,
		40, 5, 40, 575, 8, 40, 10, 40, 12, 40, 578, 9, 40, 1, 41, 1, 41, 3, 41,
		582, 8, 41, 1, 41, 1, 41, 1, 42, 3, 42, 587, 8, 42, 1, 42, 1, 42, 1, 43,
		1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 44, 1, 44, 1, 44, 1, 44, 1,
		44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 44, 3, 44, 611,
		8, 44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 45, 1, 45, 3, 45, 619, 8, 45, 1,
		45, 1, 45, 1, 45, 5, 45, 624, 8, 45, 10, 45, 12, 45, 627, 9, 45, 1, 46,
		1, 46, 3, 46, 631, 8, 46, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1,
		48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 49, 1, 49, 1, 49, 1, 49, 1, 50,
		1, 50, 1, 51, 1, 51, 1, 51, 1, 52, 1, 52, 1, 53, 1, 53, 1, 54, 1, 54, 1,
		55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55,
		1, 55, 1, 55, 1, 55, 3, 55, 674, 8, 55, 1, 56, 1, 56, 1, 56, 1, 56, 1,
		56, 1, 56, 3, 56, 682, 8, 56, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57,
		1, 57, 5, 57, 691, 8, 57, 10, 57, 12, 57, 694, 9, 57, 1, 58, 1, 58, 1,
		58, 1, 58, 3, 58, 700, 8, 58, 1, 59, 1, 59, 1, 59, 1, 60, 1, 60, 1, 60,
		1, 60, 1, 60, 1, 61, 1, 61, 3, 61, 712, 8, 61, 1, 61, 3, 61, 715, 8, 61,
		1, 62, 1, 62, 1, 62, 1, 63, 1, 63, 1, 63, 3, 63, 723, 8, 63, 1, 64, 1,
		64, 1, 64, 1, 65, 1, 65, 3, 65, 730, 8, 65, 1, 66, 1, 66, 1, 66, 1, 67,
		1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 3, 67, 743, 8, 67, 1,
		68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 5, 68, 752, 8, 68, 10, 68,
		12, 68, 755, 9, 68, 1, 69, 1, 69, 1, 69, 1, 69, 1, 69, 1, 69, 3, 69, 763,
		8, 69, 1, 70, 1, 70, 1, 70, 1, 70, 1, 70, 1, 70, 3, 70, 771, 8, 70, 1,
		71, 1, 71, 1, 71, 1, 71, 1, 71, 1, 71, 1, 71, 1, 72, 1, 72, 1, 72, 1, 72,
		1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1,
		72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 3, 72, 801, 8, 72, 1, 73,
		1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 5, 73, 812, 8,
		73, 10, 73, 12, 73, 815, 9, 73, 1, 74, 1, 74, 3, 74, 819, 8, 74, 1, 75,
		1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 5, 75, 827, 8, 75, 10, 75, 12, 75, 830,
		9, 75, 1, 76, 1, 76, 3, 76, 834, 8, 76, 1, 77, 1, 77, 3, 77, 838, 8, 77,
		1, 78, 1, 78, 1, 79, 1, 79, 1, 80, 1, 80, 1, 80, 1, 80, 1, 81, 1, 81, 1,
		81, 1, 81, 1, 81, 1, 82, 1, 82, 1, 83, 1, 83, 1, 84, 1, 84, 1, 84, 1, 85,
		1, 85, 1, 86, 1, 86, 1, 87, 1, 87, 1, 87, 1, 88, 1, 88, 1, 88, 1, 89, 1,
		89, 1, 90, 1, 90, 1, 90, 1, 91, 1, 91, 1, 92, 1, 92, 1, 93, 1, 93, 1, 93,
		1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 5, 93, 890, 8,
		93, 10, 93, 12, 93, 893, 9, 93, 1, 94, 1, 94, 1, 95, 1, 95, 1, 95, 1, 95,
		1, 95, 1, 95, 1, 95, 1, 95, 1, 95, 1, 95, 1, 95, 5, 95, 908, 8, 95, 10,
		95, 12, 95, 911, 9, 95, 1, 96, 1, 96, 1, 97, 1, 97, 1, 98, 1, 98, 1, 99,
		1, 99, 1, 100, 1, 100, 1, 101, 1, 101, 1, 102, 1, 102, 1, 103, 1, 103,
		1, 104, 1, 104, 1, 105, 1, 105, 3, 105, 933, 8, 105, 1, 106, 1, 106, 1,
		107, 1, 107, 1, 107, 0, 8, 8, 52, 114, 136, 146, 150, 186, 190, 108, 0,
		2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38,
		40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74,
		76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108,
		110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138,
		140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168,
		170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198,
		200, 202, 204, 206, 208, 210, 212, 214, 0, 9, 2, 0, 4, 4, 9, 9, 2, 0, 2,
		2, 11, 11, 2, 0, 41, 41, 48, 48, 10, 0, 19, 19, 28, 28, 30, 30, 33, 34,
		38, 39, 42, 43, 48, 48, 52, 55, 58, 62, 66, 237, 1, 0, 59, 62, 1, 0, 54,
		55, 1, 0, 52, 53, 1, 0, 50, 51, 1, 0, 261, 262, 946, 0, 216, 1, 0, 0, 0,
		2, 219, 1, 0, 0, 0, 4, 230, 1, 0, 0, 0, 6, 232, 1, 0, 0, 0, 8, 234, 1,
		0, 0, 0, 10, 265, 1, 0, 0, 0, 12, 267, 1, 0, 0, 0, 14, 272, 1, 0, 0, 0,
		16, 276, 1, 0, 0, 0, 18, 284, 1, 0, 0, 0, 20, 294, 1, 0, 0, 0, 22, 296,
		1, 0, 0, 0, 24, 311, 1, 0, 0, 0, 26, 320, 1, 0, 0, 0, 28, 327, 1, 0, 0,
		0, 30, 342, 1, 0, 0, 0, 32, 350, 1, 0, 0, 0, 34, 358, 1, 0, 0, 0, 36, 366,
		1, 0, 0, 0, 38, 374, 1, 0, 0, 0, 40, 378, 1, 0, 0, 0, 42, 382, 1, 0, 0,
		0, 44, 395, 1, 0, 0, 0, 46, 403, 1, 0, 0, 0, 48, 407, 1, 0, 0, 0, 50, 416,
		1, 0, 0, 0, 52, 455, 1, 0, 0, 0, 54, 478, 1, 0, 0, 0, 56, 490, 1, 0, 0,
		0, 58, 511, 1, 0, 0, 0, 60, 515, 1, 0, 0, 0, 62, 517, 1, 0, 0, 0, 64, 520,
		1, 0, 0, 0, 66, 525, 1, 0, 0, 0, 68, 535, 1, 0, 0, 0, 70, 537, 1, 0, 0,
		0, 72, 544, 1, 0, 0, 0, 74, 553, 1, 0, 0, 0, 76, 558, 1, 0, 0, 0, 78, 563,
		1, 0, 0, 0, 80, 571, 1, 0, 0, 0, 82, 579, 1, 0, 0, 0, 84, 586, 1, 0, 0,
		0, 86, 590, 1, 0, 0, 0, 88, 597, 1, 0, 0, 0, 90, 616, 1, 0, 0, 0, 92, 630,
		1, 0, 0, 0, 94, 632, 1, 0, 0, 0, 96, 638, 1, 0, 0, 0, 98, 644, 1, 0, 0,
		0, 100, 648, 1, 0, 0, 0, 102, 650, 1, 0, 0, 0, 104, 653, 1, 0, 0, 0, 106,
		655, 1, 0, 0, 0, 108, 657, 1, 0, 0, 0, 110, 673, 1, 0, 0, 0, 112, 681,
		1, 0, 0, 0, 114, 683, 1, 0, 0, 0, 116, 699, 1, 0, 0, 0, 118, 701, 1, 0,
		0, 0, 120, 704, 1, 0, 0, 0, 122, 709, 1, 0, 0, 0, 124, 716, 1, 0, 0, 0,
		126, 722, 1, 0, 0, 0, 128, 724, 1, 0, 0, 0, 130, 729, 1, 0, 0, 0, 132,
		731, 1, 0, 0, 0, 134, 742, 1, 0, 0, 0, 136, 744, 1, 0, 0, 0, 138, 762,
		1, 0, 0, 0, 140, 770, 1, 0, 0, 0, 142, 772, 1, 0, 0, 0, 144, 800, 1, 0,
		0, 0, 146, 802, 1, 0, 0, 0, 148, 818, 1, 0, 0, 0, 150, 820, 1, 0, 0, 0,
		152, 833, 1, 0, 0, 0, 154, 837, 1, 0, 0, 0, 156, 839, 1, 0, 0, 0, 158,
		841, 1, 0, 0, 0, 160, 843, 1, 0, 0, 0, 162, 847, 1, 0, 0, 0, 164, 852,
		1, 0, 0, 0, 166, 854, 1, 0, 0, 0, 168, 856, 1, 0, 0, 0, 170, 859, 1, 0,
		0, 0, 172, 861, 1, 0, 0, 0, 174, 863, 1, 0, 0, 0, 176, 866, 1, 0, 0, 0,
		178, 869, 1, 0, 0, 0, 180, 871, 1, 0, 0, 0, 182, 874, 1, 0, 0, 0, 184,
		876, 1, 0, 0, 0, 186, 878, 1, 0, 0, 0, 188, 894, 1, 0, 0, 0, 190, 896,
		1, 0, 0, 0, 192, 912, 1, 0, 0, 0, 194, 914, 1, 0, 0, 0, 196, 916, 1, 0,
		0, 0, 198, 918, 1, 0, 0, 0, 200, 920, 1, 0, 0, 0, 202, 922, 1, 0, 0, 0,
		204, 924, 1, 0, 0, 0, 206, 926, 1, 0, 0, 0, 208, 928, 1, 0, 0, 0, 210,
		932, 1, 0, 0, 0, 212, 934, 1, 0, 0, 0, 214, 936, 1, 0, 0, 0, 216, 217,
		3, 2, 1, 0, 217, 218, 5, 0, 0, 1, 218, 1, 1, 0, 0, 0, 219, 224, 3, 4, 2,
		0, 220, 221, 5, 251, 0, 0, 221, 223, 3, 4, 2, 0, 222, 220, 1, 0, 0, 0,
		223, 226, 1, 0, 0, 0, 224, 222, 1, 0, 0, 0, 224, 225, 1, 0, 0, 0, 225,
		228, 1, 0, 0, 0, 226, 224, 1, 0, 0, 0, 227, 229, 5, 251, 0, 0, 228, 227,
		1, 0, 0, 0, 228, 229, 1, 0, 0, 0, 229, 3, 1, 0, 0, 0, 230, 231, 3, 6, 3,
		0, 231, 5, 1, 0, 0, 0, 232, 233, 3, 8, 4, 0, 233, 7, 1, 0, 0, 0, 234, 236,
		6, 4, -1, 0, 235, 237, 3, 90, 45, 0, 236, 235, 1, 0, 0, 0, 236, 237, 1,
		0, 0, 0, 237, 243, 1, 0, 0, 0, 238, 244, 3, 22, 11, 0, 239, 240, 5, 247,
		0, 0, 240, 241, 3, 8, 4, 0, 241, 242, 5, 248, 0, 0, 242, 244, 1, 0, 0,
		0, 243, 238, 1, 0, 0, 0, 243, 239, 1, 0, 0, 0, 244, 246, 1, 0, 0, 0, 245,
		247, 3, 14, 7, 0, 246, 245, 1, 0, 0, 0, 246, 247, 1, 0, 0, 0, 247, 249,
		1, 0, 0, 0, 248, 250, 3, 12, 6, 0, 249, 248, 1, 0, 0, 0, 249, 250, 1, 0,
		0, 0, 250, 262, 1, 0, 0, 0, 251, 252, 10, 1, 0, 0, 252, 253, 3, 20, 10,
		0, 253, 255, 3, 8, 4, 0, 254, 256, 3, 14, 7, 0, 255, 254, 1, 0, 0, 0, 255,
		256, 1, 0, 0, 0, 256, 258, 1, 0, 0, 0, 257, 259, 3, 12, 6, 0, 258, 257,
		1, 0, 0, 0, 258, 259, 1, 0, 0, 0, 259, 261, 1, 0, 0, 0, 260, 251, 1, 0,
		0, 0, 261, 264, 1, 0, 0, 0, 262, 260, 1, 0, 0, 0, 262, 263, 1, 0, 0, 0,
		263, 9, 1, 0, 0, 0, 264, 262, 1, 0, 0, 0, 265, 266, 3, 22, 11, 0, 266,
		11, 1, 0, 0, 0, 267, 268, 5, 23, 0, 0, 268, 269, 3, 196, 98, 0, 269, 270,
		5, 28, 0, 0, 270, 271, 3, 198, 99, 0, 271, 13, 1, 0, 0, 0, 272, 273, 5,
		31, 0, 0, 273, 274, 5, 5, 0, 0, 274, 275, 3, 16, 8, 0, 275, 15, 1, 0, 0,
		0, 276, 281, 3, 18, 9, 0, 277, 278, 5, 240, 0, 0, 278, 280, 3, 18, 9, 0,
		279, 277, 1, 0, 0, 0, 280, 283, 1, 0, 0, 0, 281, 279, 1, 0, 0, 0, 281,
		282, 1, 0, 0, 0, 282, 17, 1, 0, 0, 0, 283, 281, 1, 0, 0, 0, 284, 286, 3,
		106, 53, 0, 285, 287, 7, 0, 0, 0, 286, 285, 1, 0, 0, 0, 286, 287, 1, 0,
		0, 0, 287, 19, 1, 0, 0, 0, 288, 289, 5, 45, 0, 0, 289, 295, 7, 1, 0, 0,
		290, 291, 5, 21, 0, 0, 291, 295, 5, 11, 0, 0, 292, 293, 5, 13, 0, 0, 293,
		295, 5, 11, 0, 0, 294, 288, 1, 0, 0, 0, 294, 290, 1, 0, 0, 0, 294, 292,
		1, 0, 0, 0, 295, 21, 1, 0, 0, 0, 296, 298, 5, 40, 0, 0, 297, 299, 3, 86,
		43, 0, 298, 297, 1, 0, 0, 0, 298, 299, 1, 0, 0, 0, 299, 301, 1, 0, 0, 0,
		300, 302, 7, 1, 0, 0, 301, 300, 1, 0, 0, 0, 301, 302, 1, 0, 0, 0, 302,
		305, 1, 0, 0, 0, 303, 304, 5, 3, 0, 0, 304, 306, 7, 2, 0, 0, 305, 303,
		1, 0, 0, 0, 305, 306, 1, 0, 0, 0, 306, 307, 1, 0, 0, 0, 307, 309, 3, 66,
		33, 0, 308, 310, 3, 24, 12, 0, 309, 308, 1, 0, 0, 0, 309, 310, 1, 0, 0,
		0, 310, 23, 1, 0, 0, 0, 311, 312, 5, 16, 0, 0, 312, 315, 3, 52, 26, 0,
		313, 316, 3, 42, 21, 0, 314, 316, 3, 28, 14, 0, 315, 313, 1, 0, 0, 0, 315,
		314, 1, 0, 0, 0, 315, 316, 1, 0, 0, 0, 316, 318, 1, 0, 0, 0, 317, 319,
		3, 26, 13, 0, 318, 317, 1, 0, 0, 0, 318, 319, 1, 0, 0, 0, 319, 25, 1, 0,
		0, 0, 320, 321, 5, 44, 0, 0, 321, 322, 5, 42, 0, 0, 322, 323, 5, 247, 0,
		0, 323, 324, 3, 212, 106, 0, 324, 325, 5, 33, 0, 0, 325, 326, 5, 248, 0,
		0, 326, 27, 1, 0, 0, 0, 327, 332, 5, 39, 0, 0, 328, 329, 5, 19, 0, 0, 329,
		333, 5, 26, 0, 0, 330, 331, 5, 14, 0, 0, 331, 333, 5, 26, 0, 0, 332, 328,
		1, 0, 0, 0, 332, 330, 1, 0, 0, 0, 332, 333, 1, 0, 0, 0, 333, 334, 1, 0,
		0, 0, 334, 337, 5, 247, 0, 0, 335, 338, 3, 30, 15, 0, 336, 338, 3, 32,
		16, 0, 337, 335, 1, 0, 0, 0, 337, 336, 1, 0, 0, 0, 338, 340, 1, 0, 0, 0,
		339, 341, 3, 84, 42, 0, 340, 339, 1, 0, 0, 0, 340, 341, 1, 0, 0, 0, 341,
		29, 1, 0, 0, 0, 342, 343, 3, 204, 102, 0, 343, 344, 5, 15, 0, 0, 344, 345,
		3, 204, 102, 0, 345, 346, 5, 18, 0, 0, 346, 347, 5, 247, 0, 0, 347, 348,
		3, 36, 18, 0, 348, 349, 5, 248, 0, 0, 349, 31, 1, 0, 0, 0, 350, 351, 3,
		34, 17, 0, 351, 352, 5, 15, 0, 0, 352, 353, 3, 204, 102, 0, 353, 354, 5,
		18, 0, 0, 354, 355, 5, 247, 0, 0, 355, 356, 3, 40, 20, 0, 356, 357, 5,
		248, 0, 0, 357, 33, 1, 0, 0, 0, 358, 363, 3, 204, 102, 0, 359, 360, 5,
		240, 0, 0, 360, 362, 3, 204, 102, 0, 361, 359, 1, 0, 0, 0, 362, 365, 1,
		0, 0, 0, 363, 361, 1, 0, 0, 0, 363, 364, 1, 0, 0, 0, 364, 35, 1, 0, 0,
		0, 365, 363, 1, 0, 0, 0, 366, 371, 3, 38, 19, 0, 367, 368, 5, 240, 0, 0,
		368, 370, 3, 38, 19, 0, 369, 367, 1, 0, 0, 0, 370, 373, 1, 0, 0, 0, 371,
		369, 1, 0, 0, 0, 371, 372, 1, 0, 0, 0, 372, 37, 1, 0, 0, 0, 373, 371, 1,
		0, 0, 0, 374, 376, 3, 204, 102, 0, 375, 377, 3, 84, 42, 0, 376, 375, 1,
		0, 0, 0, 376, 377, 1, 0, 0, 0, 377, 39, 1, 0, 0, 0, 378, 379, 5, 247, 0,
		0, 379, 380, 3, 36, 18, 0, 380, 381, 5, 248, 0, 0, 381, 41, 1, 0, 0, 0,
		382, 383, 5, 34, 0, 0, 383, 384, 5, 247, 0, 0, 384, 385, 3, 48, 24, 0,
		385, 386, 5, 15, 0, 0, 386, 387, 3, 204, 102, 0, 387, 388, 5, 18, 0, 0,
		388, 389, 5, 247, 0, 0, 389, 390, 3, 44, 22, 0, 390, 391, 5, 248, 0, 0,
		391, 393, 5, 248, 0, 0, 392, 394, 3, 84, 42, 0, 393, 392, 1, 0, 0, 0, 393,
		394, 1, 0, 0, 0, 394, 43, 1, 0, 0, 0, 395, 400, 3, 46, 23, 0, 396, 397,
		5, 240, 0, 0, 397, 399, 3, 46, 23, 0, 398, 396, 1, 0, 0, 0, 399, 402, 1,
		0, 0, 0, 400, 398, 1, 0, 0, 0, 400, 401, 1, 0, 0, 0, 401, 45, 1, 0, 0,
		0, 402, 400, 1, 0, 0, 0, 403, 405, 3, 204, 102, 0, 404, 406, 3, 84, 42,
		0, 405, 404, 1, 0, 0, 0, 405, 406, 1, 0, 0, 0, 406, 47, 1, 0, 0, 0, 407,
		412, 3, 50, 25, 0, 408, 409, 5, 240, 0, 0, 409, 411, 3, 50, 25, 0, 410,
		408, 1, 0, 0, 0, 411, 414, 1, 0, 0, 0, 412, 410, 1, 0, 0, 0, 412, 413,
		1, 0, 0, 0, 413, 49, 1, 0, 0, 0, 414, 412, 1, 0, 0, 0, 415, 417, 3, 84,
		42, 0, 416, 415, 1, 0, 0, 0, 416, 417, 1, 0, 0, 0, 417, 51, 1, 0, 0, 0,
		418, 419, 6, 26, -1, 0, 419, 421, 3, 208, 104, 0, 420, 422, 3, 84, 42,
		0, 421, 420, 1, 0, 0, 0, 421, 422, 1, 0, 0, 0, 422, 428, 1, 0, 0, 0, 423,
		424, 5, 15, 0, 0, 424, 425, 5, 43, 0, 0, 425, 426, 5, 3, 0, 0, 426, 427,
		5, 27, 0, 0, 427, 429, 3, 106, 53, 0, 428, 423, 1, 0, 0, 0, 428, 429, 1,
		0, 0, 0, 429, 456, 1, 0, 0, 0, 430, 440, 5, 247, 0, 0, 431, 432, 3, 52,
		26, 0, 432, 433, 3, 56, 28, 0, 433, 434, 3, 52, 26, 0, 434, 441, 1, 0,
		0, 0, 435, 436, 3, 52, 26, 0, 436, 437, 3, 58, 29, 0, 437, 438, 3, 52,
		26, 0, 438, 439, 3, 60, 30, 0, 439, 441, 1, 0, 0, 0, 440, 431, 1, 0, 0,
		0, 440, 435, 1, 0, 0, 0, 441, 442, 1, 0, 0, 0, 442, 443, 5, 248, 0, 0,
		443, 456, 1, 0, 0, 0, 444, 445, 5, 247, 0, 0, 445, 446, 3, 8, 4, 0, 446,
		448, 5, 248, 0, 0, 447, 449, 3, 84, 42, 0, 448, 447, 1, 0, 0, 0, 448, 449,
		1, 0, 0, 0, 449, 456, 1, 0, 0, 0, 450, 456, 3, 54, 27, 0, 451, 453, 3,
		202, 101, 0, 452, 454, 3, 84, 42, 0, 453, 452, 1, 0, 0, 0, 453, 454, 1,
		0, 0, 0, 454, 456, 1, 0, 0, 0, 455, 418, 1, 0, 0, 0, 455, 430, 1, 0, 0,
		0, 455, 444, 1, 0, 0, 0, 455, 450, 1, 0, 0, 0, 455, 451, 1, 0, 0, 0, 456,
		468, 1, 0, 0, 0, 457, 458, 10, 6, 0, 0, 458, 459, 3, 56, 28, 0, 459, 460,
		3, 52, 26, 7, 460, 467, 1, 0, 0, 0, 461, 462, 10, 5, 0, 0, 462, 463, 3,
		58, 29, 0, 463, 464, 3, 52, 26, 0, 464, 465, 3, 60, 30, 0, 465, 467, 1,
		0, 0, 0, 466, 457, 1, 0, 0, 0, 466, 461, 1, 0, 0, 0, 467, 470, 1, 0, 0,
		0, 468, 466, 1, 0, 0, 0, 468, 469, 1, 0, 0, 0, 469, 53, 1, 0, 0, 0, 470,
		468, 1, 0, 0, 0, 471, 472, 5, 46, 0, 0, 472, 473, 5, 247, 0, 0, 473, 475,
		5, 248, 0, 0, 474, 476, 3, 84, 42, 0, 475, 474, 1, 0, 0, 0, 475, 476, 1,
		0, 0, 0, 476, 479, 1, 0, 0, 0, 477, 479, 3, 84, 42, 0, 478, 471, 1, 0,
		0, 0, 478, 477, 1, 0, 0, 0, 479, 485, 1, 0, 0, 0, 480, 481, 5, 49, 0, 0,
		481, 483, 5, 28, 0, 0, 482, 484, 3, 84, 42, 0, 483, 482, 1, 0, 0, 0, 483,
		484, 1, 0, 0, 0, 484, 486, 1, 0, 0, 0, 485, 480, 1, 0, 0, 0, 485, 486,
		1, 0, 0, 0, 486, 55, 1, 0, 0, 0, 487, 488, 5, 6, 0, 0, 488, 491, 5, 7,
		0, 0, 489, 491, 5, 240, 0, 0, 490, 487, 1, 0, 0, 0, 490, 489, 1, 0, 0,
		0, 491, 57, 1, 0, 0, 0, 492, 494, 5, 20, 0, 0, 493, 492, 1, 0, 0, 0, 493,
		494, 1, 0, 0, 0, 494, 495, 1, 0, 0, 0, 495, 512, 5, 7, 0, 0, 496, 498,
		5, 17, 0, 0, 497, 499, 5, 32, 0, 0, 498, 497, 1, 0, 0, 0, 498, 499, 1,
		0, 0, 0, 499, 500, 1, 0, 0, 0, 500, 512, 5, 7, 0, 0, 501, 503, 5, 22, 0,
		0, 502, 504, 5, 32, 0, 0, 503, 502, 1, 0, 0, 0, 503, 504, 1, 0, 0, 0, 504,
		505, 1, 0, 0, 0, 505, 512, 5, 7, 0, 0, 506, 508, 5, 36, 0, 0, 507, 509,
		5, 32, 0, 0, 508, 507, 1, 0, 0, 0, 508, 509, 1, 0, 0, 0, 509, 510, 1, 0,
		0, 0, 510, 512, 5, 7, 0, 0, 511, 493, 1, 0, 0, 0, 511, 496, 1, 0, 0, 0,
		511, 501, 1, 0, 0, 0, 511, 506, 1, 0, 0, 0, 512, 59, 1, 0, 0, 0, 513, 516,
		3, 62, 31, 0, 514, 516, 3, 64, 32, 0, 515, 513, 1, 0, 0, 0, 515, 514, 1,
		0, 0, 0, 516, 61, 1, 0, 0, 0, 517, 518, 5, 29, 0, 0, 518, 519, 3, 106,
		53, 0, 519, 63, 1, 0, 0, 0, 520, 521, 5, 47, 0, 0, 521, 522, 5, 247, 0,
		0, 522, 523, 3, 78, 39, 0, 523, 524, 5, 248, 0, 0, 524, 65, 1, 0, 0, 0,
		525, 530, 3, 68, 34, 0, 526, 527, 5, 240, 0, 0, 527, 529, 3, 68, 34, 0,
		528, 526, 1, 0, 0, 0, 529, 532, 1, 0, 0, 0, 530, 528, 1, 0, 0, 0, 530,
		531, 1, 0, 0, 0, 531, 67, 1, 0, 0, 0, 532, 530, 1, 0, 0, 0, 533, 536, 3,
		72, 36, 0, 534, 536, 3, 70, 35, 0, 535, 533, 1, 0, 0, 0, 535, 534, 1, 0,
		0, 0, 536, 69, 1, 0, 0, 0, 537, 539, 3, 106, 53, 0, 538, 540, 3, 84, 42,
		0, 539, 538, 1, 0, 0, 0, 539, 540, 1, 0, 0, 0, 540, 71, 1, 0, 0, 0, 541,
		542, 3, 106, 53, 0, 542, 543, 5, 241, 0, 0, 543, 545, 1, 0, 0, 0, 544,
		541, 1, 0, 0, 0, 544, 545, 1, 0, 0, 0, 545, 546, 1, 0, 0, 0, 546, 548,
		5, 239, 0, 0, 547, 549, 3, 74, 37, 0, 548, 547, 1, 0, 0, 0, 548, 549, 1,
		0, 0, 0, 549, 551, 1, 0, 0, 0, 550, 552, 3, 76, 38, 0, 551, 550, 1, 0,
		0, 0, 551, 552, 1, 0, 0, 0, 552, 73, 1, 0, 0, 0, 553, 554, 5, 13, 0, 0,
		554, 555, 5, 247, 0, 0, 555, 556, 3, 78, 39, 0, 556, 557, 5, 248, 0, 0,
		557, 75, 1, 0, 0, 0, 558, 559, 5, 38, 0, 0, 559, 560, 5, 247, 0, 0, 560,
		561, 3, 80, 40, 0, 561, 562, 5, 248, 0, 0, 562, 77, 1, 0, 0, 0, 563, 568,
		3, 204, 102, 0, 564, 565, 5, 240, 0, 0, 565, 567, 3, 204, 102, 0, 566,
		564, 1, 0, 0, 0, 567, 570, 1, 0, 0, 0, 568, 566, 1, 0, 0, 0, 568, 569,
		1, 0, 0, 0, 569, 79, 1, 0, 0, 0, 570, 568, 1, 0, 0, 0, 571, 576, 3, 82,
		41, 0, 572, 573, 5, 240, 0, 0, 573, 575, 3, 82, 41, 0, 574, 572, 1, 0,
		0, 0, 575, 578, 1, 0, 0, 0, 576, 574, 1, 0, 0, 0, 576, 577, 1, 0, 0, 0,
		577, 81, 1, 0, 0, 0, 578, 576, 1, 0, 0, 0, 579, 581, 3, 106, 53, 0, 580,
		582, 5, 3, 0, 0, 581, 580, 1, 0, 0, 0, 581, 582, 1, 0, 0, 0, 582, 583,
		1, 0, 0, 0, 583, 584, 3, 204, 102, 0, 584, 83, 1, 0, 0, 0, 585, 587, 5,
		3, 0, 0, 586, 585, 1, 0, 0, 0, 586, 587, 1, 0, 0, 0, 587, 588, 1, 0, 0,
		0, 588, 589, 3, 206, 103, 0, 589, 85, 1, 0, 0, 0, 590, 591, 5, 49, 0, 0,
		591, 592, 5, 10, 0, 0, 592, 593, 5, 30, 0, 0, 593, 594, 5, 247, 0, 0, 594,
		595, 3, 88, 44, 0, 595, 596, 5, 248, 0, 0, 596, 87, 1, 0, 0, 0, 597, 598,
		5, 12, 0, 0, 598, 599, 5, 242, 0, 0, 599, 600, 3, 106, 53, 0, 600, 601,
		5, 240, 0, 0, 601, 602, 5, 8, 0, 0, 602, 603, 5, 242, 0, 0, 603, 604, 3,
		106, 53, 0, 604, 610, 5, 240, 0, 0, 605, 606, 5, 24, 0, 0, 606, 607, 5,
		242, 0, 0, 607, 608, 3, 106, 53, 0, 608, 609, 5, 240, 0, 0, 609, 611, 1,
		0, 0, 0, 610, 605, 1, 0, 0, 0, 610, 611, 1, 0, 0, 0, 611, 612, 1, 0, 0,
		0, 612, 613, 5, 35, 0, 0, 613, 614, 5, 242, 0, 0, 614, 615, 3, 106, 53,
		0, 615, 89, 1, 0, 0, 0, 616, 618, 5, 49, 0, 0, 617, 619, 5, 37, 0, 0, 618,
		617, 1, 0, 0, 0, 618, 619, 1, 0, 0, 0, 619, 620, 1, 0, 0, 0, 620, 625,
		3, 92, 46, 0, 621, 622, 5, 240, 0, 0, 622, 624, 3, 92, 46, 0, 623, 621,
		1, 0, 0, 0, 624, 627, 1, 0, 0, 0, 625, 623, 1, 0, 0, 0, 625, 626, 1, 0,
		0, 0, 626, 91, 1, 0, 0, 0, 627, 625, 1, 0, 0, 0, 628, 631, 3, 94, 47, 0,
		629, 631, 3, 96, 48, 0, 630, 628, 1, 0, 0, 0, 630, 629, 1, 0, 0, 0, 631,
		93, 1, 0, 0, 0, 632, 633, 3, 202, 101, 0, 633, 634, 5, 3, 0, 0, 634, 635,
		5, 247, 0, 0, 635, 636, 3, 8, 4, 0, 636, 637, 5, 248, 0, 0, 637, 95, 1,
		0, 0, 0, 638, 639, 3, 202, 101, 0, 639, 640, 5, 3, 0, 0, 640, 641, 5, 247,
		0, 0, 641, 642, 3, 98, 49, 0, 642, 643, 5, 248, 0, 0, 643, 97, 1, 0, 0,
		0, 644, 645, 3, 100, 50, 0, 645, 646, 3, 102, 51, 0, 646, 647, 3, 104,
		52, 0, 647, 99, 1, 0, 0, 0, 648, 649, 3, 8, 4, 0, 649, 101, 1, 0, 0, 0,
		650, 651, 5, 45, 0, 0, 651, 652, 5, 2, 0, 0, 652, 103, 1, 0, 0, 0, 653,
		654, 3, 8, 4, 0, 654, 105, 1, 0, 0, 0, 655, 656, 3, 108, 54, 0, 656, 107,
		1, 0, 0, 0, 657, 658, 3, 110, 55, 0, 658, 109, 1, 0, 0, 0, 659, 674, 5,
		25, 0, 0, 660, 674, 3, 188, 94, 0, 661, 674, 3, 190, 95, 0, 662, 674, 3,
		186, 93, 0, 663, 674, 3, 184, 92, 0, 664, 674, 3, 180, 90, 0, 665, 674,
		3, 176, 88, 0, 666, 674, 3, 174, 87, 0, 667, 674, 3, 172, 86, 0, 668, 674,
		3, 168, 84, 0, 669, 674, 3, 118, 59, 0, 670, 674, 3, 130, 65, 0, 671, 674,
		3, 128, 64, 0, 672, 674, 3, 112, 56, 0, 673, 659, 1, 0, 0, 0, 673, 660,
		1, 0, 0, 0, 673, 661, 1, 0, 0, 0, 673, 662, 1, 0, 0, 0, 673, 663, 1, 0,
		0, 0, 673, 664, 1, 0, 0, 0, 673, 665, 1, 0, 0, 0, 673, 666, 1, 0, 0, 0,
		673, 667, 1, 0, 0, 0, 673, 668, 1, 0, 0, 0, 673, 669, 1, 0, 0, 0, 673,
		670, 1, 0, 0, 0, 673, 671, 1, 0, 0, 0, 673, 672, 1, 0, 0, 0, 674, 111,
		1, 0, 0, 0, 675, 676, 3, 116, 58, 0, 676, 677, 5, 250, 0, 0, 677, 682,
		1, 0, 0, 0, 678, 679, 3, 114, 57, 0, 679, 680, 5, 250, 0, 0, 680, 682,
		1, 0, 0, 0, 681, 675, 1, 0, 0, 0, 681, 678, 1, 0, 0, 0, 682, 113, 1, 0,
		0, 0, 683, 684, 6, 57, -1, 0, 684, 685, 3, 116, 58, 0, 685, 686, 3, 106,
		53, 0, 686, 692, 1, 0, 0, 0, 687, 688, 10, 1, 0, 0, 688, 689, 5, 240, 0,
		0, 689, 691, 3, 106, 53, 0, 690, 687, 1, 0, 0, 0, 691, 694, 1, 0, 0, 0,
		692, 690, 1, 0, 0, 0, 692, 693, 1, 0, 0, 0, 693, 115, 1, 0, 0, 0, 694,
		692, 1, 0, 0, 0, 695, 696, 5, 1, 0, 0, 696, 700, 5, 249, 0, 0, 697, 700,
		5, 249, 0, 0, 698, 700, 3, 162, 81, 0, 699, 695, 1, 0, 0, 0, 699, 697,
		1, 0, 0, 0, 699, 698, 1, 0, 0, 0, 700, 117, 1, 0, 0, 0, 701, 702, 3, 120,
		60, 0, 702, 703, 3, 190, 95, 0, 703, 119, 1, 0, 0, 0, 704, 705, 5, 63,
		0, 0, 705, 706, 3, 164, 82, 0, 706, 707, 3, 122, 61, 0, 707, 708, 3, 166,
		83, 0, 708, 121, 1, 0, 0, 0, 709, 711, 3, 140, 70, 0, 710, 712, 3, 134,
		67, 0, 711, 710, 1, 0, 0, 0, 711, 712, 1, 0, 0, 0, 712, 714, 1, 0, 0, 0,
		713, 715, 3, 124, 62, 0, 714, 713, 1, 0, 0, 0, 714, 715, 1, 0, 0, 0, 715,
		123, 1, 0, 0, 0, 716, 717, 5, 238, 0, 0, 717, 718, 3, 126, 63, 0, 718,
		125, 1, 0, 0, 0, 719, 723, 3, 190, 95, 0, 720, 723, 3, 130, 65, 0, 721,
		723, 3, 128, 64, 0, 722, 719, 1, 0, 0, 0, 722, 720, 1, 0, 0, 0, 722, 721,
		1, 0, 0, 0, 723, 127, 1, 0, 0, 0, 724, 725, 5, 260, 0, 0, 725, 726, 3,
		150, 75, 0, 726, 129, 1, 0, 0, 0, 727, 730, 3, 132, 66, 0, 728, 730, 5,
		258, 0, 0, 729, 727, 1, 0, 0, 0, 729, 728, 1, 0, 0, 0, 730, 131, 1, 0,
		0, 0, 731, 732, 5, 259, 0, 0, 732, 733, 3, 152, 76, 0, 733, 133, 1, 0,
		0, 0, 734, 735, 3, 136, 68, 0, 735, 736, 5, 248, 0, 0, 736, 743, 1, 0,
		0, 0, 737, 738, 3, 136, 68, 0, 738, 739, 5, 240, 0, 0, 739, 740, 5, 248,
		0, 0, 740, 741, 6, 67, -1, 0, 741, 743, 1, 0, 0, 0, 742, 734, 1, 0, 0,
		0, 742, 737, 1, 0, 0, 0, 743, 135, 1, 0, 0, 0, 744, 745, 6, 68, -1, 0,
		745, 746, 5, 247, 0, 0, 746, 747, 3, 138, 69, 0, 747, 753, 1, 0, 0, 0,
		748, 749, 10, 1, 0, 0, 749, 750, 5, 240, 0, 0, 750, 752, 3, 138, 69, 0,
		751, 748, 1, 0, 0, 0, 752, 755, 1, 0, 0, 0, 753, 751, 1, 0, 0, 0, 753,
		754, 1, 0, 0, 0, 754, 137, 1, 0, 0, 0, 755, 753, 1, 0, 0, 0, 756, 763,
		3, 184, 92, 0, 757, 763, 3, 188, 94, 0, 758, 763, 3, 190, 95, 0, 759, 763,
		3, 186, 93, 0, 760, 763, 3, 172, 86, 0, 761, 763, 5, 152, 0, 0, 762, 756,
		1, 0, 0, 0, 762, 757, 1, 0, 0, 0, 762, 758, 1, 0, 0, 0, 762, 759, 1, 0,
		0, 0, 762, 760, 1, 0, 0, 0, 762, 761, 1, 0, 0, 0, 763, 139, 1, 0, 0, 0,
		764, 771, 3, 162, 81, 0, 765, 771, 3, 160, 80, 0, 766, 771, 3, 148, 74,
		0, 767, 771, 3, 120, 60, 0, 768, 771, 3, 144, 72, 0, 769, 771, 3, 142,
		71, 0, 770, 764, 1, 0, 0, 0, 770, 765, 1, 0, 0, 0, 770, 766, 1, 0, 0, 0,
		770, 767, 1, 0, 0, 0, 770, 768, 1, 0, 0, 0, 770, 769, 1, 0, 0, 0, 771,
		141, 1, 0, 0, 0, 772, 773, 5, 147, 0, 0, 773, 774, 3, 164, 82, 0, 774,
		775, 3, 122, 61, 0, 775, 776, 5, 240, 0, 0, 776, 777, 3, 122, 61, 0, 777,
		778, 3, 166, 83, 0, 778, 143, 1, 0, 0, 0, 779, 780, 5, 122, 0, 0, 780,
		781, 3, 164, 82, 0, 781, 782, 5, 247, 0, 0, 782, 783, 5, 248, 0, 0, 783,
		784, 5, 278, 0, 0, 784, 785, 3, 122, 61, 0, 785, 786, 3, 166, 83, 0, 786,
		801, 1, 0, 0, 0, 787, 788, 5, 122, 0, 0, 788, 789, 3, 164, 82, 0, 789,
		790, 3, 122, 61, 0, 790, 791, 5, 278, 0, 0, 791, 792, 3, 122, 61, 0, 792,
		793, 3, 166, 83, 0, 793, 801, 1, 0, 0, 0, 794, 795, 3, 146, 73, 0, 795,
		796, 5, 248, 0, 0, 796, 797, 5, 278, 0, 0, 797, 798, 3, 122, 61, 0, 798,
		799, 3, 166, 83, 0, 799, 801, 1, 0, 0, 0, 800, 779, 1, 0, 0, 0, 800, 787,
		1, 0, 0, 0, 800, 794, 1, 0, 0, 0, 801, 145, 1, 0, 0, 0, 802, 803, 6, 73,
		-1, 0, 803, 804, 5, 122, 0, 0, 804, 805, 3, 164, 82, 0, 805, 806, 5, 247,
		0, 0, 806, 807, 3, 122, 61, 0, 807, 813, 1, 0, 0, 0, 808, 809, 10, 1, 0,
		0, 809, 810, 5, 240, 0, 0, 810, 812, 3, 122, 61, 0, 811, 808, 1, 0, 0,
		0, 812, 815, 1, 0, 0, 0, 813, 811, 1, 0, 0, 0, 813, 814, 1, 0, 0, 0, 814,
		147, 1, 0, 0, 0, 815, 813, 1, 0, 0, 0, 816, 819, 3, 150, 75, 0, 817, 819,
		5, 64, 0, 0, 818, 816, 1, 0, 0, 0, 818, 817, 1, 0, 0, 0, 819, 149, 1, 0,
		0, 0, 820, 821, 6, 75, -1, 0, 821, 822, 3, 152, 76, 0, 822, 828, 1, 0,
		0, 0, 823, 824, 10, 1, 0, 0, 824, 825, 5, 241, 0, 0, 825, 827, 3, 152,
		76, 0, 826, 823, 1, 0, 0, 0, 827, 830, 1, 0, 0, 0, 828, 826, 1, 0, 0, 0,
		828, 829, 1, 0, 0, 0, 829, 151, 1, 0, 0, 0, 830, 828, 1, 0, 0, 0, 831,
		834, 3, 158, 79, 0, 832, 834, 3, 154, 77, 0, 833, 831, 1, 0, 0, 0, 833,
		832, 1, 0, 0, 0, 834, 153, 1, 0, 0, 0, 835, 838, 3, 156, 78, 0, 836, 838,
		5, 65, 0, 0, 837, 835, 1, 0, 0, 0, 837, 836, 1, 0, 0, 0, 838, 155, 1, 0,
		0, 0, 839, 840, 7, 3, 0, 0, 840, 157, 1, 0, 0, 0, 841, 842, 5, 276, 0,
		0, 842, 159, 1, 0, 0, 0, 843, 844, 5, 41, 0, 0, 844, 845, 3, 164, 82, 0,
		845, 846, 3, 166, 83, 0, 846, 161, 1, 0, 0, 0, 847, 848, 5, 1, 0, 0, 848,
		849, 3, 164, 82, 0, 849, 850, 3, 122, 61, 0, 850, 851, 3, 166, 83, 0, 851,
		163, 1, 0, 0, 0, 852, 853, 5, 245, 0, 0, 853, 165, 1, 0, 0, 0, 854, 855,
		5, 246, 0, 0, 855, 167, 1, 0, 0, 0, 856, 857, 3, 170, 85, 0, 857, 858,
		3, 190, 95, 0, 858, 169, 1, 0, 0, 0, 859, 860, 7, 4, 0, 0, 860, 171, 1,
		0, 0, 0, 861, 862, 5, 264, 0, 0, 862, 173, 1, 0, 0, 0, 863, 864, 5, 58,
		0, 0, 864, 865, 3, 190, 95, 0, 865, 175, 1, 0, 0, 0, 866, 867, 3, 178,
		89, 0, 867, 868, 3, 190, 95, 0, 868, 177, 1, 0, 0, 0, 869, 870, 7, 5, 0,
		0, 870, 179, 1, 0, 0, 0, 871, 872, 3, 182, 91, 0, 872, 873, 3, 190, 95,
		0, 873, 181, 1, 0, 0, 0, 874, 875, 7, 6, 0, 0, 875, 183, 1, 0, 0, 0, 876,
		877, 5, 275, 0, 0, 877, 185, 1, 0, 0, 0, 878, 879, 6, 93, -1, 0, 879, 880,
		3, 194, 97, 0, 880, 891, 1, 0, 0, 0, 881, 882, 10, 2, 0, 0, 882, 883, 3,
		194, 97, 0, 883, 884, 6, 93, -1, 0, 884, 890, 1, 0, 0, 0, 885, 886, 10,
		1, 0, 0, 886, 887, 3, 192, 96, 0, 887, 888, 6, 93, -1, 0, 888, 890, 1,
		0, 0, 0, 889, 881, 1, 0, 0, 0, 889, 885, 1, 0, 0, 0, 890, 893, 1, 0, 0,
		0, 891, 889, 1, 0, 0, 0, 891, 892, 1, 0, 0, 0, 892, 187, 1, 0, 0, 0, 893,
		891, 1, 0, 0, 0, 894, 895, 7, 7, 0, 0, 895, 189, 1, 0, 0, 0, 896, 897,
		6, 95, -1, 0, 897, 898, 3, 192, 96, 0, 898, 909, 1, 0, 0, 0, 899, 900,
		10, 2, 0, 0, 900, 901, 3, 192, 96, 0, 901, 902, 6, 95, -1, 0, 902, 908,
		1, 0, 0, 0, 903, 904, 10, 1, 0, 0, 904, 905, 3, 194, 97, 0, 905, 906, 6,
		95, -1, 0, 906, 908, 1, 0, 0, 0, 907, 899, 1, 0, 0, 0, 907, 903, 1, 0,
		0, 0, 908, 911, 1, 0, 0, 0, 909, 907, 1, 0, 0, 0, 909, 910, 1, 0, 0, 0,
		910, 191, 1, 0, 0, 0, 911, 909, 1, 0, 0, 0, 912, 913, 5, 265, 0, 0, 913,
		193, 1, 0, 0, 0, 914, 915, 5, 266, 0, 0, 915, 195, 1, 0, 0, 0, 916, 917,
		3, 210, 105, 0, 917, 197, 1, 0, 0, 0, 918, 919, 3, 210, 105, 0, 919, 199,
		1, 0, 0, 0, 920, 921, 7, 8, 0, 0, 921, 201, 1, 0, 0, 0, 922, 923, 3, 200,
		100, 0, 923, 203, 1, 0, 0, 0, 924, 925, 3, 200, 100, 0, 925, 205, 1, 0,
		0, 0, 926, 927, 3, 200, 100, 0, 927, 207, 1, 0, 0, 0, 928, 929, 3, 200,
		100, 0, 929, 209, 1, 0, 0, 0, 930, 933, 3, 212, 106, 0, 931, 933, 3, 214,
		107, 0, 932, 930, 1, 0, 0, 0, 932, 931, 1, 0, 0, 0, 933, 211, 1, 0, 0,
		0, 934, 935, 5, 263, 0, 0, 935, 213, 1, 0, 0, 0, 936, 937, 5, 264, 0, 0,
		937, 215, 1, 0, 0, 0, 85, 224, 228, 236, 243, 246, 249, 255, 258, 262,
		281, 286, 294, 298, 301, 305, 309, 315, 318, 332, 337, 340, 363, 371, 376,
		393, 400, 405, 412, 416, 421, 428, 440, 448, 453, 455, 466, 468, 475, 478,
		483, 485, 490, 493, 498, 503, 508, 511, 515, 530, 535, 539, 544, 548, 551,
		568, 576, 581, 586, 610, 618, 625, 630, 673, 681, 692, 699, 711, 714, 722,
		729, 742, 753, 762, 770, 800, 813, 818, 828, 833, 837, 889, 891, 907, 909,
		932,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// GoogleSQLParserInit initializes any static state used to implement GoogleSQLParser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewGoogleSQLParser(). You can call this function if you wish to initialize the static state ahead
// of time.
func GoogleSQLParserInit() {
	staticData := &GoogleSQLParserParserStaticData
	staticData.once.Do(googlesqlparserParserInit)
}

// NewGoogleSQLParser produces a new parser instance for the optional input antlr.TokenStream.
func NewGoogleSQLParser(input antlr.TokenStream) *GoogleSQLParser {
	GoogleSQLParserInit()
	this := new(GoogleSQLParser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &GoogleSQLParserParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	this.RuleNames = staticData.RuleNames
	this.LiteralNames = staticData.LiteralNames
	this.SymbolicNames = staticData.SymbolicNames
	this.GrammarFileName = "GoogleSQLParser.g4"

	return this
}

// GoogleSQLParser tokens.
const (
	GoogleSQLParserEOF                                       = antlr.TokenEOF
	GoogleSQLParserARRAY_SYMBOL                              = 1
	GoogleSQLParserALL_SYMBOL                                = 2
	GoogleSQLParserAS_SYMBOL                                 = 3
	GoogleSQLParserASC_SYMBOL                                = 4
	GoogleSQLParserBY_SYMBOL                                 = 5
	GoogleSQLParserCROSS_SYMBOL                              = 6
	GoogleSQLParserJOIN_SYMBOL                               = 7
	GoogleSQLParserDELTA_SYMBOL                              = 8
	GoogleSQLParserDESC_SYMBOL                               = 9
	GoogleSQLParserDIFFERENTIAL_PRIVACY_SYMBOL               = 10
	GoogleSQLParserDISTINCT_SYMBOL                           = 11
	GoogleSQLParserEPSILON_SYMBOL                            = 12
	GoogleSQLParserEXCEPT_SYMBOL                             = 13
	GoogleSQLParserEXCLUDE_SYMBOL                            = 14
	GoogleSQLParserFOR_SYMBOL                                = 15
	GoogleSQLParserFROM_SYMBOL                               = 16
	GoogleSQLParserFULL_SYMBOL                               = 17
	GoogleSQLParserIN_SYMBOL                                 = 18
	GoogleSQLParserINCLUDE_SYMBOL                            = 19
	GoogleSQLParserINNER_SYMBOL                              = 20
	GoogleSQLParserINTERSECT_SYMBOL                          = 21
	GoogleSQLParserLEFT_SYMBOL                               = 22
	GoogleSQLParserLIMIT_SYMBOL                              = 23
	GoogleSQLParserMAX_GROUPS_CONTRIBUTED_SYMBOL             = 24
	GoogleSQLParserNULL_SYMBOL                               = 25
	GoogleSQLParserNULLS_SYMBOL                              = 26
	GoogleSQLParserOF_SYMBOL                                 = 27
	GoogleSQLParserOFFSET_SYMBOL                             = 28
	GoogleSQLParserON_SYMBOL                                 = 29
	GoogleSQLParserOPTIONS_SYMBOL                            = 30
	GoogleSQLParserORDER_SYMBOL                              = 31
	GoogleSQLParserOUTER_SYMBOL                              = 32
	GoogleSQLParserPERCENT_SYMBOL                            = 33
	GoogleSQLParserPIVOT_SYMBOL                              = 34
	GoogleSQLParserPRIVACY_UNIT_COLUMN_SYMBOL                = 35
	GoogleSQLParserRIGHT_SYMBOL                              = 36
	GoogleSQLParserRECURSIVE_SYMBOL                          = 37
	GoogleSQLParserREPLACE_SYMBOL                            = 38
	GoogleSQLParserUNPIVOT_SYMBOL                            = 39
	GoogleSQLParserSELECT_SYMBOL                             = 40
	GoogleSQLParserSTRUCT_SYMBOL                             = 41
	GoogleSQLParserSYSTEM_SYMBOL                             = 42
	GoogleSQLParserSYSTEM_TIME_SYMBOL                        = 43
	GoogleSQLParserTABLESAMPLE_SYMBOL                        = 44
	GoogleSQLParserUNION_SYMBOL                              = 45
	GoogleSQLParserUNNEST_SYMBOL                             = 46
	GoogleSQLParserUSING_SYMBOL                              = 47
	GoogleSQLParserVALUE_SYMBOL                              = 48
	GoogleSQLParserWITH_SYMBOL                               = 49
	GoogleSQLParserTRUE_SYMBOL                               = 50
	GoogleSQLParserFALSE_SYMBOL                              = 51
	GoogleSQLParserNUMERIC_SYMBOL                            = 52
	GoogleSQLParserDECIMAL_SYMBOL                            = 53
	GoogleSQLParserBIGNUMERIC_SYMBOL                         = 54
	GoogleSQLParserBIGDECIMAL_SYMBOL                         = 55
	GoogleSQLParserNOT_SYMBOL                                = 56
	GoogleSQLParserAND_SYMBOL                                = 57
	GoogleSQLParserJSON_SYMBOL                               = 58
	GoogleSQLParserDATE_SYMBOL                               = 59
	GoogleSQLParserTIME_SYMBOL                               = 60
	GoogleSQLParserDATETIME_SYMBOL                           = 61
	GoogleSQLParserTIMESTAMP_SYMBOL                          = 62
	GoogleSQLParserRANGE_SYMBOL                              = 63
	GoogleSQLParserINTERVAL_SYMBOL                           = 64
	GoogleSQLParserSIMPLE_SYMBOL                             = 65
	GoogleSQLParserABORT_SYMBOL                              = 66
	GoogleSQLParserACCESS_SYMBOL                             = 67
	GoogleSQLParserACTION_SYMBOL                             = 68
	GoogleSQLParserAGGREGATE_SYMBOL                          = 69
	GoogleSQLParserADD_SYMBOL                                = 70
	GoogleSQLParserALTER_SYMBOL                              = 71
	GoogleSQLParserALWAYS_SYMBOL                             = 72
	GoogleSQLParserANALYZE_SYMBOL                            = 73
	GoogleSQLParserAPPROX_SYMBOL                             = 74
	GoogleSQLParserARE_SYMBOL                                = 75
	GoogleSQLParserASSERT_SYMBOL                             = 76
	GoogleSQLParserBATCH_SYMBOL                              = 77
	GoogleSQLParserBEGIN_SYMBOL                              = 78
	GoogleSQLParserBREAK_SYMBOL                              = 79
	GoogleSQLParserCALL_SYMBOL                               = 80
	GoogleSQLParserCASCADE_SYMBOL                            = 81
	GoogleSQLParserCHECK_SYMBOL                              = 82
	GoogleSQLParserCLAMPED_SYMBOL                            = 83
	GoogleSQLParserCLONE_SYMBOL                              = 84
	GoogleSQLParserCOPY_SYMBOL                               = 85
	GoogleSQLParserCLUSTER_SYMBOL                            = 86
	GoogleSQLParserCOLUMN_SYMBOL                             = 87
	GoogleSQLParserCOLUMNS_SYMBOL                            = 88
	GoogleSQLParserCOMMIT_SYMBOL                             = 89
	GoogleSQLParserCONNECTION_SYMBOL                         = 90
	GoogleSQLParserCONSTANT_SYMBOL                           = 91
	GoogleSQLParserCONSTRAINT_SYMBOL                         = 92
	GoogleSQLParserCONTINUE_SYMBOL                           = 93
	GoogleSQLParserCORRESPONDING_SYMBOL                      = 94
	GoogleSQLParserCYCLE_SYMBOL                              = 95
	GoogleSQLParserDATA_SYMBOL                               = 96
	GoogleSQLParserDATABASE_SYMBOL                           = 97
	GoogleSQLParserDECLARE_SYMBOL                            = 98
	GoogleSQLParserDEFINER_SYMBOL                            = 99
	GoogleSQLParserDELETE_SYMBOL                             = 100
	GoogleSQLParserDELETION_SYMBOL                           = 101
	GoogleSQLParserDEPTH_SYMBOL                              = 102
	GoogleSQLParserDESCRIBE_SYMBOL                           = 103
	GoogleSQLParserDETERMINISTIC_SYMBOL                      = 104
	GoogleSQLParserDO_SYMBOL                                 = 105
	GoogleSQLParserDROP_SYMBOL                               = 106
	GoogleSQLParserELSEIF_SYMBOL                             = 107
	GoogleSQLParserENFORCED_SYMBOL                           = 108
	GoogleSQLParserERROR_SYMBOL                              = 109
	GoogleSQLParserEXCEPTION_SYMBOL                          = 110
	GoogleSQLParserEXECUTE_SYMBOL                            = 111
	GoogleSQLParserEXPLAIN_SYMBOL                            = 112
	GoogleSQLParserEXPORT_SYMBOL                             = 113
	GoogleSQLParserEXTEND_SYMBOL                             = 114
	GoogleSQLParserEXTERNAL_SYMBOL                           = 115
	GoogleSQLParserFILES_SYMBOL                              = 116
	GoogleSQLParserFILTER_SYMBOL                             = 117
	GoogleSQLParserFILL_SYMBOL                               = 118
	GoogleSQLParserFIRST_SYMBOL                              = 119
	GoogleSQLParserFOREIGN_SYMBOL                            = 120
	GoogleSQLParserFORMAT_SYMBOL                             = 121
	GoogleSQLParserFUNCTION_SYMBOL                           = 122
	GoogleSQLParserGENERATED_SYMBOL                          = 123
	GoogleSQLParserGRANT_SYMBOL                              = 124
	GoogleSQLParserGROUP_ROWS_SYMBOL                         = 125
	GoogleSQLParserHIDDEN_SYMBOL                             = 126
	GoogleSQLParserIDENTITY_SYMBOL                           = 127
	GoogleSQLParserIMMEDIATE_SYMBOL                          = 128
	GoogleSQLParserIMMUTABLE_SYMBOL                          = 129
	GoogleSQLParserIMPORT_SYMBOL                             = 130
	GoogleSQLParserINCREMENT_SYMBOL                          = 131
	GoogleSQLParserINDEX_SYMBOL                              = 132
	GoogleSQLParserINOUT_SYMBOL                              = 133
	GoogleSQLParserINPUT_SYMBOL                              = 134
	GoogleSQLParserINSERT_SYMBOL                             = 135
	GoogleSQLParserINVOKER_SYMBOL                            = 136
	GoogleSQLParserISOLATION_SYMBOL                          = 137
	GoogleSQLParserITERATE_SYMBOL                            = 138
	GoogleSQLParserKEY_SYMBOL                                = 139
	GoogleSQLParserLANGUAGE_SYMBOL                           = 140
	GoogleSQLParserLAST_SYMBOL                               = 141
	GoogleSQLParserLEAVE_SYMBOL                              = 142
	GoogleSQLParserLEVEL_SYMBOL                              = 143
	GoogleSQLParserLOAD_SYMBOL                               = 144
	GoogleSQLParserLOOP_SYMBOL                               = 145
	GoogleSQLParserMACRO_SYMBOL                              = 146
	GoogleSQLParserMAP_SYMBOL                                = 147
	GoogleSQLParserMATCH_SYMBOL                              = 148
	GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL     = 149
	GoogleSQLParserMATCHED_SYMBOL                            = 150
	GoogleSQLParserMATERIALIZED_SYMBOL                       = 151
	GoogleSQLParserMAX_SYMBOL                                = 152
	GoogleSQLParserMAXVALUE_SYMBOL                           = 153
	GoogleSQLParserMEASURES_SYMBOL                           = 154
	GoogleSQLParserMESSAGE_SYMBOL                            = 155
	GoogleSQLParserMETADATA_SYMBOL                           = 156
	GoogleSQLParserMIN_SYMBOL                                = 157
	GoogleSQLParserMINVALUE_SYMBOL                           = 158
	GoogleSQLParserMODEL_SYMBOL                              = 159
	GoogleSQLParserMODULE_SYMBOL                             = 160
	GoogleSQLParserONLY_SYMBOL                               = 161
	GoogleSQLParserOUT_SYMBOL                                = 162
	GoogleSQLParserOUTPUT_SYMBOL                             = 163
	GoogleSQLParserOVERWRITE_SYMBOL                          = 164
	GoogleSQLParserPARTITIONS_SYMBOL                         = 165
	GoogleSQLParserPATTERN_SYMBOL                            = 166
	GoogleSQLParserPOLICIES_SYMBOL                           = 167
	GoogleSQLParserPOLICY_SYMBOL                             = 168
	GoogleSQLParserPRIMARY_SYMBOL                            = 169
	GoogleSQLParserPRIVATE_SYMBOL                            = 170
	GoogleSQLParserPRIVILEGE_SYMBOL                          = 171
	GoogleSQLParserPRIVILEGES_SYMBOL                         = 172
	GoogleSQLParserPROCEDURE_SYMBOL                          = 173
	GoogleSQLParserPROJECT_SYMBOL                            = 174
	GoogleSQLParserPUBLIC_SYMBOL                             = 175
	GoogleSQLParserRAISE_SYMBOL                              = 176
	GoogleSQLParserREAD_SYMBOL                               = 177
	GoogleSQLParserREFERENCES_SYMBOL                         = 178
	GoogleSQLParserREMOTE_SYMBOL                             = 179
	GoogleSQLParserREMOVE_SYMBOL                             = 180
	GoogleSQLParserRENAME_SYMBOL                             = 181
	GoogleSQLParserREPEAT_SYMBOL                             = 182
	GoogleSQLParserREPEATABLE_SYMBOL                         = 183
	GoogleSQLParserREPLACE_FIELDS_SYMBOL                     = 184
	GoogleSQLParserREPLICA_SYMBOL                            = 185
	GoogleSQLParserREPORT_SYMBOL                             = 186
	GoogleSQLParserRESTRICT_SYMBOL                           = 187
	GoogleSQLParserRESTRICTION_SYMBOL                        = 188
	GoogleSQLParserRETURNS_SYMBOL                            = 189
	GoogleSQLParserRETURN_SYMBOL                             = 190
	GoogleSQLParserREVOKE_SYMBOL                             = 191
	GoogleSQLParserROLLBACK_SYMBOL                           = 192
	GoogleSQLParserROW_SYMBOL                                = 193
	GoogleSQLParserRUN_SYMBOL                                = 194
	GoogleSQLParserSAFE_CAST_SYMBOL                          = 195
	GoogleSQLParserSCHEMA_SYMBOL                             = 196
	GoogleSQLParserSEARCH_SYMBOL                             = 197
	GoogleSQLParserSECURITY_SYMBOL                           = 198
	GoogleSQLParserSEQUENCE_SYMBOL                           = 199
	GoogleSQLParserSETS_SYMBOL                               = 200
	GoogleSQLParserSHOW_SYMBOL                               = 201
	GoogleSQLParserSNAPSHOT_SYMBOL                           = 202
	GoogleSQLParserSOURCE_SYMBOL                             = 203
	GoogleSQLParserSQL_SYMBOL                                = 204
	GoogleSQLParserSTABLE_SYMBOL                             = 205
	GoogleSQLParserSTART_SYMBOL                              = 206
	GoogleSQLParserSTATIC_DESCRIBE_SYMBOL                    = 207
	GoogleSQLParserSTORED_SYMBOL                             = 208
	GoogleSQLParserSTORING_SYMBOL                            = 209
	GoogleSQLParserSTRICT_SYMBOL                             = 210
	GoogleSQLParserTABLE_SYMBOL                              = 211
	GoogleSQLParserTABLES_SYMBOL                             = 212
	GoogleSQLParserTARGET_SYMBOL                             = 213
	GoogleSQLParserTEMP_SYMBOL                               = 214
	GoogleSQLParserTEMPORARY_SYMBOL                          = 215
	GoogleSQLParserTRANSACTION_SYMBOL                        = 216
	GoogleSQLParserTRANSFORM_SYMBOL                          = 217
	GoogleSQLParserTRUNCATE_SYMBOL                           = 218
	GoogleSQLParserTYPE_SYMBOL                               = 219
	GoogleSQLParserUNDROP_SYMBOL                             = 220
	GoogleSQLParserUNIQUE_SYMBOL                             = 221
	GoogleSQLParserUNKNOWN_SYMBOL                            = 222
	GoogleSQLParserUNTIL_SYMBOL                              = 223
	GoogleSQLParserUPDATE_SYMBOL                             = 224
	GoogleSQLParserVALUES_SYMBOL                             = 225
	GoogleSQLParserVECTOR_SYMBOL                             = 226
	GoogleSQLParserVIEW_SYMBOL                               = 227
	GoogleSQLParserVIEWS_SYMBOL                              = 228
	GoogleSQLParserVOLATILE_SYMBOL                           = 229
	GoogleSQLParserWEIGHT_SYMBOL                             = 230
	GoogleSQLParserWHILE_SYMBOL                              = 231
	GoogleSQLParserWRITE_SYMBOL                              = 232
	GoogleSQLParserZONE_SYMBOL                               = 233
	GoogleSQLParserDESCRIPTOR_SYMBOL                         = 234
	GoogleSQLParserINTERLEAVE_SYMBOL                         = 235
	GoogleSQLParserNULL_FILTERED_SYMBOL                      = 236
	GoogleSQLParserPARENT_SYMBOL                             = 237
	GoogleSQLParserCOLLATE_SYMBOL                            = 238
	GoogleSQLParserASTERISK_SYMBOL                           = 239
	GoogleSQLParserCOMMA_SYMBOL                              = 240
	GoogleSQLParserDOT_SYMBOL                                = 241
	GoogleSQLParserEQUAL_SYMBOL                              = 242
	GoogleSQLParserLC_BRACKET_SYMBOL                         = 243
	GoogleSQLParserRC_BRACKET_SYMBOL                         = 244
	GoogleSQLParserLT_BRACKET_SYMBOL                         = 245
	GoogleSQLParserGT_BRACKET_SYMBOL                         = 246
	GoogleSQLParserLR_BRACKET_SYMBOL                         = 247
	GoogleSQLParserRR_BRACKET_SYMBOL                         = 248
	GoogleSQLParserLS_BRACKET_SYMBOL                         = 249
	GoogleSQLParserRS_BRACKET_SYMBOL                         = 250
	GoogleSQLParserSEMI_SYMBOL                               = 251
	GoogleSQLParserSINGLE_QUOTE_SYMBOL                       = 252
	GoogleSQLParserSINGLE_QUOTE_3_SYMBOL                     = 253
	GoogleSQLParserDOUBLE_QUOTE_SYMBOL                       = 254
	GoogleSQLParserDOUBLE_QUOTE_3_SYMBOL                     = 255
	GoogleSQLParserBACKQUOTE_SYMBOL                          = 256
	GoogleSQLParserDASH_SYMBOL                               = 257
	GoogleSQLParserQUESTION_SYMBOL                           = 258
	GoogleSQLParserAT_SYMBOL                                 = 259
	GoogleSQLParserATAT_SYMBOL                               = 260
	GoogleSQLParserQUOTED_ID                                 = 261
	GoogleSQLParserID                                        = 262
	GoogleSQLParserINT                                       = 263
	GoogleSQLParserFLOAT                                     = 264
	GoogleSQLParserSTRING_LITERAL                            = 265
	GoogleSQLParserBYTES_LITERAL                             = 266
	GoogleSQLParserUNCLOSED_STRING_LITERAL                   = 267
	GoogleSQLParserUNCLOSED_TRIPLE_QUOTED_STRING_LITERAL     = 268
	GoogleSQLParserUNCLOSED_RAW_STRING_LITERAL               = 269
	GoogleSQLParserUNCLOSED_TRIPLE_QUOTED_RAW_STRING_LITERAL = 270
	GoogleSQLParserUNCLOSED_BYTES_LITERAL                    = 271
	GoogleSQLParserUNCLOSED_TRIPLE_QUOTED_BYTES_LITERAL      = 272
	GoogleSQLParserUNCLOSED_RAW_BYTES_LITERAL                = 273
	GoogleSQLParserUNCLOSED_TRIPLE_QUOTED_RAW_BYTES_LITERAL  = 274
	GoogleSQLParserINTEGER_LITERAL                           = 275
	GoogleSQLParserIDENTIFIER                                = 276
	GoogleSQLParserUNCLOSED_ESCAPED_IDENTIFIER               = 277
	GoogleSQLParserFUNCTION_RETURN                           = 278
	GoogleSQLParserWHITESPACE                                = 279
)

// GoogleSQLParser rules.
const (
	GoogleSQLParserRULE_root                                            = 0
	GoogleSQLParserRULE_stmts                                           = 1
	GoogleSQLParserRULE_stmt                                            = 2
	GoogleSQLParserRULE_query_statement                                 = 3
	GoogleSQLParserRULE_query_expr                                      = 4
	GoogleSQLParserRULE_query_primary                                   = 5
	GoogleSQLParserRULE_limit_clause                                    = 6
	GoogleSQLParserRULE_order_by_clause                                 = 7
	GoogleSQLParserRULE_order_by_expr_list                              = 8
	GoogleSQLParserRULE_order_by_expr_list_item                         = 9
	GoogleSQLParserRULE_set_operator                                    = 10
	GoogleSQLParserRULE_select                                          = 11
	GoogleSQLParserRULE_from_clause                                     = 12
	GoogleSQLParserRULE_tablesample_operator                            = 13
	GoogleSQLParserRULE_unpivot_operator                                = 14
	GoogleSQLParserRULE_single_column_unpivot                           = 15
	GoogleSQLParserRULE_multi_column_unpivot                            = 16
	GoogleSQLParserRULE_values_column_set                               = 17
	GoogleSQLParserRULE_columns_to_unpivot_list                         = 18
	GoogleSQLParserRULE_columns_to_unpivot_item                         = 19
	GoogleSQLParserRULE_column_sets_to_unpivot                          = 20
	GoogleSQLParserRULE_pivot_operator                                  = 21
	GoogleSQLParserRULE_pivot_column_as_alias_list                      = 22
	GoogleSQLParserRULE_pivot_column_as_alias_list_item                 = 23
	GoogleSQLParserRULE_aggregate_function_call_as_alias_list           = 24
	GoogleSQLParserRULE_aggregate_function_call_as_alias_list_item      = 25
	GoogleSQLParserRULE_from_item                                       = 26
	GoogleSQLParserRULE_unnest_operator                                 = 27
	GoogleSQLParserRULE_cross_join_operator                             = 28
	GoogleSQLParserRULE_conditional_join_operator                       = 29
	GoogleSQLParserRULE_join_condition                                  = 30
	GoogleSQLParserRULE_on_clause                                       = 31
	GoogleSQLParserRULE_using_clause                                    = 32
	GoogleSQLParserRULE_select_list                                     = 33
	GoogleSQLParserRULE_select_list_item                                = 34
	GoogleSQLParserRULE_select_expression                               = 35
	GoogleSQLParserRULE_select_all                                      = 36
	GoogleSQLParserRULE_select_all_except_clause                        = 37
	GoogleSQLParserRULE_select_all_replace_clause                       = 38
	GoogleSQLParserRULE_column_name_list                                = 39
	GoogleSQLParserRULE_expr_as_alias_list                              = 40
	GoogleSQLParserRULE_expr_as_alias_item                              = 41
	GoogleSQLParserRULE_as_alias                                        = 42
	GoogleSQLParserRULE_differential_privacy_clause                     = 43
	GoogleSQLParserRULE_privacy_parameters                              = 44
	GoogleSQLParserRULE_with_statement                                  = 45
	GoogleSQLParserRULE_cte                                             = 46
	GoogleSQLParserRULE_non_recursive_cte                               = 47
	GoogleSQLParserRULE_recursive_cte                                   = 48
	GoogleSQLParserRULE_recursive_union_operation                       = 49
	GoogleSQLParserRULE_base_term                                       = 50
	GoogleSQLParserRULE_union_operator                                  = 51
	GoogleSQLParserRULE_recursive_term                                  = 52
	GoogleSQLParserRULE_expression                                      = 53
	GoogleSQLParserRULE_expression_higher_prec_than_and                 = 54
	GoogleSQLParserRULE_unparenthesized_expression_higher_prec_than_and = 55
	GoogleSQLParserRULE_array_constructor                               = 56
	GoogleSQLParserRULE_array_constructor_prefix                        = 57
	GoogleSQLParserRULE_array_constructor_prefix_no_expressions         = 58
	GoogleSQLParserRULE_range_literal                                   = 59
	GoogleSQLParserRULE_range_type                                      = 60
	GoogleSQLParserRULE_type                                            = 61
	GoogleSQLParserRULE_collate_clause                                  = 62
	GoogleSQLParserRULE_string_literal_or_parameter                     = 63
	GoogleSQLParserRULE_system_variable_expression                      = 64
	GoogleSQLParserRULE_parameter_expression                            = 65
	GoogleSQLParserRULE_named_parameter_expression                      = 66
	GoogleSQLParserRULE_opt_type_parameters                             = 67
	GoogleSQLParserRULE_type_parameters_prefix                          = 68
	GoogleSQLParserRULE_type_parameter                                  = 69
	GoogleSQLParserRULE_raw_type                                        = 70
	GoogleSQLParserRULE_map_type                                        = 71
	GoogleSQLParserRULE_function_type                                   = 72
	GoogleSQLParserRULE_function_type_prefix                            = 73
	GoogleSQLParserRULE_type_name                                       = 74
	GoogleSQLParserRULE_path_expression                                 = 75
	GoogleSQLParserRULE_identifier                                      = 76
	GoogleSQLParserRULE_keyword_as_identifier                           = 77
	GoogleSQLParserRULE_common_keyword_as_identifier                    = 78
	GoogleSQLParserRULE_token_identifier                                = 79
	GoogleSQLParserRULE_struct_type                                     = 80
	GoogleSQLParserRULE_array_type                                      = 81
	GoogleSQLParserRULE_template_type_open                              = 82
	GoogleSQLParserRULE_template_type_close                             = 83
	GoogleSQLParserRULE_date_or_time_literal                            = 84
	GoogleSQLParserRULE_date_or_time_literal_kind                       = 85
	GoogleSQLParserRULE_floating_point_literal                          = 86
	GoogleSQLParserRULE_json_literal                                    = 87
	GoogleSQLParserRULE_bignumeric_literal                              = 88
	GoogleSQLParserRULE_bignumeric_literal_prefix                       = 89
	GoogleSQLParserRULE_numeric_literal                                 = 90
	GoogleSQLParserRULE_numeric_literal_prefix                          = 91
	GoogleSQLParserRULE_integer_literal                                 = 92
	GoogleSQLParserRULE_bytes_literal                                   = 93
	GoogleSQLParserRULE_boolean_literal                                 = 94
	GoogleSQLParserRULE_string_literal                                  = 95
	GoogleSQLParserRULE_string_literal_component                        = 96
	GoogleSQLParserRULE_bytes_literal_component                         = 97
	GoogleSQLParserRULE_count                                           = 98
	GoogleSQLParserRULE_skip_rows                                       = 99
	GoogleSQLParserRULE_name                                            = 100
	GoogleSQLParserRULE_cte_name                                        = 101
	GoogleSQLParserRULE_column_name                                     = 102
	GoogleSQLParserRULE_alias_name                                      = 103
	GoogleSQLParserRULE_table_name                                      = 104
	GoogleSQLParserRULE_number                                          = 105
	GoogleSQLParserRULE_integer_type                                    = 106
	GoogleSQLParserRULE_float_type                                      = 107
)

// IRootContext is an interface to support dynamic dispatch.
type IRootContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Stmts() IStmtsContext
	EOF() antlr.TerminalNode

	// IsRootContext differentiates from other interfaces.
	IsRootContext()
}

type RootContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRootContext() *RootContext {
	var p = new(RootContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_root
	return p
}

func InitEmptyRootContext(p *RootContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_root
}

func (*RootContext) IsRootContext() {}

func NewRootContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RootContext {
	var p = new(RootContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_root

	return p
}

func (s *RootContext) GetParser() antlr.Parser { return s.parser }

func (s *RootContext) Stmts() IStmtsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStmtsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStmtsContext)
}

func (s *RootContext) EOF() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEOF, 0)
}

func (s *RootContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RootContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RootContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRoot(s)
	}
}

func (s *RootContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRoot(s)
	}
}

func (s *RootContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRoot(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Root() (localctx IRootContext) {
	localctx = NewRootContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, GoogleSQLParserRULE_root)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(216)
		p.Stmts()
	}
	{
		p.SetState(217)
		p.Match(GoogleSQLParserEOF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStmtsContext is an interface to support dynamic dispatch.
type IStmtsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllStmt() []IStmtContext
	Stmt(i int) IStmtContext
	AllSEMI_SYMBOL() []antlr.TerminalNode
	SEMI_SYMBOL(i int) antlr.TerminalNode

	// IsStmtsContext differentiates from other interfaces.
	IsStmtsContext()
}

type StmtsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStmtsContext() *StmtsContext {
	var p = new(StmtsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_stmts
	return p
}

func InitEmptyStmtsContext(p *StmtsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_stmts
}

func (*StmtsContext) IsStmtsContext() {}

func NewStmtsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StmtsContext {
	var p = new(StmtsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_stmts

	return p
}

func (s *StmtsContext) GetParser() antlr.Parser { return s.parser }

func (s *StmtsContext) AllStmt() []IStmtContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStmtContext); ok {
			len++
		}
	}

	tst := make([]IStmtContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStmtContext); ok {
			tst[i] = t.(IStmtContext)
			i++
		}
	}

	return tst
}

func (s *StmtsContext) Stmt(i int) IStmtContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStmtContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStmtContext)
}

func (s *StmtsContext) AllSEMI_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserSEMI_SYMBOL)
}

func (s *StmtsContext) SEMI_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSEMI_SYMBOL, i)
}

func (s *StmtsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StmtsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStmts(s)
	}
}

func (s *StmtsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStmts(s)
	}
}

func (s *StmtsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStmts(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Stmts() (localctx IStmtsContext) {
	localctx = NewStmtsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, GoogleSQLParserRULE_stmts)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(219)
		p.Stmt()
	}
	p.SetState(224)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 0, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(220)
				p.Match(GoogleSQLParserSEMI_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(221)
				p.Stmt()
			}

		}
		p.SetState(226)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 0, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(228)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserSEMI_SYMBOL {
		{
			p.SetState(227)
			p.Match(GoogleSQLParserSEMI_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStmtContext is an interface to support dynamic dispatch.
type IStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Query_statement() IQuery_statementContext

	// IsStmtContext differentiates from other interfaces.
	IsStmtContext()
}

type StmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStmtContext() *StmtContext {
	var p = new(StmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_stmt
	return p
}

func InitEmptyStmtContext(p *StmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_stmt
}

func (*StmtContext) IsStmtContext() {}

func NewStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StmtContext {
	var p = new(StmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_stmt

	return p
}

func (s *StmtContext) GetParser() antlr.Parser { return s.parser }

func (s *StmtContext) Query_statement() IQuery_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuery_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuery_statementContext)
}

func (s *StmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStmt(s)
	}
}

func (s *StmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStmt(s)
	}
}

func (s *StmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Stmt() (localctx IStmtContext) {
	localctx = NewStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, GoogleSQLParserRULE_stmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(230)
		p.Query_statement()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQuery_statementContext is an interface to support dynamic dispatch.
type IQuery_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Query_expr() IQuery_exprContext

	// IsQuery_statementContext differentiates from other interfaces.
	IsQuery_statementContext()
}

type Query_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuery_statementContext() *Query_statementContext {
	var p = new(Query_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_statement
	return p
}

func InitEmptyQuery_statementContext(p *Query_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_statement
}

func (*Query_statementContext) IsQuery_statementContext() {}

func NewQuery_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Query_statementContext {
	var p = new(Query_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_query_statement

	return p
}

func (s *Query_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Query_statementContext) Query_expr() IQuery_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuery_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuery_exprContext)
}

func (s *Query_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Query_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterQuery_statement(s)
	}
}

func (s *Query_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitQuery_statement(s)
	}
}

func (s *Query_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitQuery_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Query_statement() (localctx IQuery_statementContext) {
	localctx = NewQuery_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, GoogleSQLParserRULE_query_statement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(232)
		p.query_expr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQuery_exprContext is an interface to support dynamic dispatch.
type IQuery_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Select_() ISelectContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	AllQuery_expr() []IQuery_exprContext
	Query_expr(i int) IQuery_exprContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	With_statement() IWith_statementContext
	Order_by_clause() IOrder_by_clauseContext
	Limit_clause() ILimit_clauseContext
	Set_operator() ISet_operatorContext

	// IsQuery_exprContext differentiates from other interfaces.
	IsQuery_exprContext()
}

type Query_exprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuery_exprContext() *Query_exprContext {
	var p = new(Query_exprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_expr
	return p
}

func InitEmptyQuery_exprContext(p *Query_exprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_expr
}

func (*Query_exprContext) IsQuery_exprContext() {}

func NewQuery_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Query_exprContext {
	var p = new(Query_exprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_query_expr

	return p
}

func (s *Query_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Query_exprContext) Select_() ISelectContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelectContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelectContext)
}

func (s *Query_exprContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Query_exprContext) AllQuery_expr() []IQuery_exprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IQuery_exprContext); ok {
			len++
		}
	}

	tst := make([]IQuery_exprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IQuery_exprContext); ok {
			tst[i] = t.(IQuery_exprContext)
			i++
		}
	}

	return tst
}

func (s *Query_exprContext) Query_expr(i int) IQuery_exprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuery_exprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuery_exprContext)
}

func (s *Query_exprContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Query_exprContext) With_statement() IWith_statementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_statementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_statementContext)
}

func (s *Query_exprContext) Order_by_clause() IOrder_by_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrder_by_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrder_by_clauseContext)
}

func (s *Query_exprContext) Limit_clause() ILimit_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILimit_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILimit_clauseContext)
}

func (s *Query_exprContext) Set_operator() ISet_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISet_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISet_operatorContext)
}

func (s *Query_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Query_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterQuery_expr(s)
	}
}

func (s *Query_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitQuery_expr(s)
	}
}

func (s *Query_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitQuery_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Query_expr() (localctx IQuery_exprContext) {
	return p.query_expr(0)
}

func (p *GoogleSQLParser) query_expr(_p int) (localctx IQuery_exprContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewQuery_exprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IQuery_exprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 8
	p.EnterRecursionRule(localctx, 8, GoogleSQLParserRULE_query_expr, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(236)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserWITH_SYMBOL {
		{
			p.SetState(235)
			p.With_statement()
		}

	}
	p.SetState(243)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserSELECT_SYMBOL:
		{
			p.SetState(238)
			p.Select_()
		}

	case GoogleSQLParserLR_BRACKET_SYMBOL:
		{
			p.SetState(239)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(240)
			p.query_expr(0)
		}
		{
			p.SetState(241)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	p.SetState(246)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 4, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(245)
			p.Order_by_clause()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(249)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 5, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(248)
			p.Limit_clause()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(262)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 8, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewQuery_exprContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_query_expr)
			p.SetState(251)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				goto errorExit
			}
			{
				p.SetState(252)
				p.Set_operator()
			}
			{
				p.SetState(253)
				p.query_expr(0)
			}
			p.SetState(255)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 6, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(254)
					p.Order_by_clause()
				}

			} else if p.HasError() { // JIM
				goto errorExit
			}
			p.SetState(258)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 7, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(257)
					p.Limit_clause()
				}

			} else if p.HasError() { // JIM
				goto errorExit
			}

		}
		p.SetState(264)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 8, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQuery_primaryContext is an interface to support dynamic dispatch.
type IQuery_primaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Select_() ISelectContext

	// IsQuery_primaryContext differentiates from other interfaces.
	IsQuery_primaryContext()
}

type Query_primaryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuery_primaryContext() *Query_primaryContext {
	var p = new(Query_primaryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_primary
	return p
}

func InitEmptyQuery_primaryContext(p *Query_primaryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_query_primary
}

func (*Query_primaryContext) IsQuery_primaryContext() {}

func NewQuery_primaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Query_primaryContext {
	var p = new(Query_primaryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_query_primary

	return p
}

func (s *Query_primaryContext) GetParser() antlr.Parser { return s.parser }

func (s *Query_primaryContext) Select_() ISelectContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelectContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelectContext)
}

func (s *Query_primaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_primaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Query_primaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterQuery_primary(s)
	}
}

func (s *Query_primaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitQuery_primary(s)
	}
}

func (s *Query_primaryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitQuery_primary(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Query_primary() (localctx IQuery_primaryContext) {
	localctx = NewQuery_primaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, GoogleSQLParserRULE_query_primary)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(265)
		p.Select_()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILimit_clauseContext is an interface to support dynamic dispatch.
type ILimit_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LIMIT_SYMBOL() antlr.TerminalNode
	Count() ICountContext
	OFFSET_SYMBOL() antlr.TerminalNode
	Skip_rows() ISkip_rowsContext

	// IsLimit_clauseContext differentiates from other interfaces.
	IsLimit_clauseContext()
}

type Limit_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLimit_clauseContext() *Limit_clauseContext {
	var p = new(Limit_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_limit_clause
	return p
}

func InitEmptyLimit_clauseContext(p *Limit_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_limit_clause
}

func (*Limit_clauseContext) IsLimit_clauseContext() {}

func NewLimit_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Limit_clauseContext {
	var p = new(Limit_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_limit_clause

	return p
}

func (s *Limit_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Limit_clauseContext) LIMIT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLIMIT_SYMBOL, 0)
}

func (s *Limit_clauseContext) Count() ICountContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICountContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICountContext)
}

func (s *Limit_clauseContext) OFFSET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOFFSET_SYMBOL, 0)
}

func (s *Limit_clauseContext) Skip_rows() ISkip_rowsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISkip_rowsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISkip_rowsContext)
}

func (s *Limit_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Limit_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Limit_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterLimit_clause(s)
	}
}

func (s *Limit_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitLimit_clause(s)
	}
}

func (s *Limit_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitLimit_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Limit_clause() (localctx ILimit_clauseContext) {
	localctx = NewLimit_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, GoogleSQLParserRULE_limit_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(267)
		p.Match(GoogleSQLParserLIMIT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(268)
		p.Count()
	}

	{
		p.SetState(269)
		p.Match(GoogleSQLParserOFFSET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(270)
		p.Skip_rows()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOrder_by_clauseContext is an interface to support dynamic dispatch.
type IOrder_by_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ORDER_SYMBOL() antlr.TerminalNode
	BY_SYMBOL() antlr.TerminalNode
	Order_by_expr_list() IOrder_by_expr_listContext

	// IsOrder_by_clauseContext differentiates from other interfaces.
	IsOrder_by_clauseContext()
}

type Order_by_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrder_by_clauseContext() *Order_by_clauseContext {
	var p = new(Order_by_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_order_by_clause
	return p
}

func InitEmptyOrder_by_clauseContext(p *Order_by_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_order_by_clause
}

func (*Order_by_clauseContext) IsOrder_by_clauseContext() {}

func NewOrder_by_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Order_by_clauseContext {
	var p = new(Order_by_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_order_by_clause

	return p
}

func (s *Order_by_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Order_by_clauseContext) ORDER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserORDER_SYMBOL, 0)
}

func (s *Order_by_clauseContext) BY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBY_SYMBOL, 0)
}

func (s *Order_by_clauseContext) Order_by_expr_list() IOrder_by_expr_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrder_by_expr_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrder_by_expr_listContext)
}

func (s *Order_by_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Order_by_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Order_by_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOrder_by_clause(s)
	}
}

func (s *Order_by_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOrder_by_clause(s)
	}
}

func (s *Order_by_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOrder_by_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Order_by_clause() (localctx IOrder_by_clauseContext) {
	localctx = NewOrder_by_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, GoogleSQLParserRULE_order_by_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(272)
		p.Match(GoogleSQLParserORDER_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(273)
		p.Match(GoogleSQLParserBY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(274)
		p.Order_by_expr_list()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOrder_by_expr_listContext is an interface to support dynamic dispatch.
type IOrder_by_expr_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllOrder_by_expr_list_item() []IOrder_by_expr_list_itemContext
	Order_by_expr_list_item(i int) IOrder_by_expr_list_itemContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsOrder_by_expr_listContext differentiates from other interfaces.
	IsOrder_by_expr_listContext()
}

type Order_by_expr_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrder_by_expr_listContext() *Order_by_expr_listContext {
	var p = new(Order_by_expr_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_order_by_expr_list
	return p
}

func InitEmptyOrder_by_expr_listContext(p *Order_by_expr_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_order_by_expr_list
}

func (*Order_by_expr_listContext) IsOrder_by_expr_listContext() {}

func NewOrder_by_expr_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Order_by_expr_listContext {
	var p = new(Order_by_expr_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_order_by_expr_list

	return p
}

func (s *Order_by_expr_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Order_by_expr_listContext) AllOrder_by_expr_list_item() []IOrder_by_expr_list_itemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOrder_by_expr_list_itemContext); ok {
			len++
		}
	}

	tst := make([]IOrder_by_expr_list_itemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOrder_by_expr_list_itemContext); ok {
			tst[i] = t.(IOrder_by_expr_list_itemContext)
			i++
		}
	}

	return tst
}

func (s *Order_by_expr_listContext) Order_by_expr_list_item(i int) IOrder_by_expr_list_itemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrder_by_expr_list_itemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrder_by_expr_list_itemContext)
}

func (s *Order_by_expr_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Order_by_expr_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Order_by_expr_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Order_by_expr_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Order_by_expr_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOrder_by_expr_list(s)
	}
}

func (s *Order_by_expr_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOrder_by_expr_list(s)
	}
}

func (s *Order_by_expr_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOrder_by_expr_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Order_by_expr_list() (localctx IOrder_by_expr_listContext) {
	localctx = NewOrder_by_expr_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, GoogleSQLParserRULE_order_by_expr_list)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(276)
		p.Order_by_expr_list_item()
	}
	p.SetState(281)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 9, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(277)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(278)
				p.Order_by_expr_list_item()
			}

		}
		p.SetState(283)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 9, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOrder_by_expr_list_itemContext is an interface to support dynamic dispatch.
type IOrder_by_expr_list_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	ASC_SYMBOL() antlr.TerminalNode
	DESC_SYMBOL() antlr.TerminalNode

	// IsOrder_by_expr_list_itemContext differentiates from other interfaces.
	IsOrder_by_expr_list_itemContext()
}

type Order_by_expr_list_itemContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrder_by_expr_list_itemContext() *Order_by_expr_list_itemContext {
	var p = new(Order_by_expr_list_itemContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_order_by_expr_list_item
	return p
}

func InitEmptyOrder_by_expr_list_itemContext(p *Order_by_expr_list_itemContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_order_by_expr_list_item
}

func (*Order_by_expr_list_itemContext) IsOrder_by_expr_list_itemContext() {}

func NewOrder_by_expr_list_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Order_by_expr_list_itemContext {
	var p = new(Order_by_expr_list_itemContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_order_by_expr_list_item

	return p
}

func (s *Order_by_expr_list_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Order_by_expr_list_itemContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Order_by_expr_list_itemContext) ASC_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserASC_SYMBOL, 0)
}

func (s *Order_by_expr_list_itemContext) DESC_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDESC_SYMBOL, 0)
}

func (s *Order_by_expr_list_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Order_by_expr_list_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Order_by_expr_list_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOrder_by_expr_list_item(s)
	}
}

func (s *Order_by_expr_list_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOrder_by_expr_list_item(s)
	}
}

func (s *Order_by_expr_list_itemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOrder_by_expr_list_item(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Order_by_expr_list_item() (localctx IOrder_by_expr_list_itemContext) {
	localctx = NewOrder_by_expr_list_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, GoogleSQLParserRULE_order_by_expr_list_item)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(284)
		p.Expression()
	}
	p.SetState(286)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 10, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(285)
			_la = p.GetTokenStream().LA(1)

			if !(_la == GoogleSQLParserASC_SYMBOL || _la == GoogleSQLParserDESC_SYMBOL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISet_operatorContext is an interface to support dynamic dispatch.
type ISet_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UNION_SYMBOL() antlr.TerminalNode
	ALL_SYMBOL() antlr.TerminalNode
	DISTINCT_SYMBOL() antlr.TerminalNode
	INTERSECT_SYMBOL() antlr.TerminalNode
	EXCEPT_SYMBOL() antlr.TerminalNode

	// IsSet_operatorContext differentiates from other interfaces.
	IsSet_operatorContext()
}

type Set_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySet_operatorContext() *Set_operatorContext {
	var p = new(Set_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_set_operator
	return p
}

func InitEmptySet_operatorContext(p *Set_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_set_operator
}

func (*Set_operatorContext) IsSet_operatorContext() {}

func NewSet_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Set_operatorContext {
	var p = new(Set_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_set_operator

	return p
}

func (s *Set_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Set_operatorContext) UNION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNION_SYMBOL, 0)
}

func (s *Set_operatorContext) ALL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserALL_SYMBOL, 0)
}

func (s *Set_operatorContext) DISTINCT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDISTINCT_SYMBOL, 0)
}

func (s *Set_operatorContext) INTERSECT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINTERSECT_SYMBOL, 0)
}

func (s *Set_operatorContext) EXCEPT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXCEPT_SYMBOL, 0)
}

func (s *Set_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Set_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Set_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSet_operator(s)
	}
}

func (s *Set_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSet_operator(s)
	}
}

func (s *Set_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSet_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Set_operator() (localctx ISet_operatorContext) {
	localctx = NewSet_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, GoogleSQLParserRULE_set_operator)
	var _la int

	p.SetState(294)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserUNION_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(288)
			p.Match(GoogleSQLParserUNION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(289)
			_la = p.GetTokenStream().LA(1)

			if !(_la == GoogleSQLParserALL_SYMBOL || _la == GoogleSQLParserDISTINCT_SYMBOL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case GoogleSQLParserINTERSECT_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(290)
			p.Match(GoogleSQLParserINTERSECT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(291)
			p.Match(GoogleSQLParserDISTINCT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserEXCEPT_SYMBOL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(292)
			p.Match(GoogleSQLParserEXCEPT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(293)
			p.Match(GoogleSQLParserDISTINCT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelectContext is an interface to support dynamic dispatch.
type ISelectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SELECT_SYMBOL() antlr.TerminalNode
	Select_list() ISelect_listContext
	Differential_privacy_clause() IDifferential_privacy_clauseContext
	AS_SYMBOL() antlr.TerminalNode
	From_clause() IFrom_clauseContext
	ALL_SYMBOL() antlr.TerminalNode
	DISTINCT_SYMBOL() antlr.TerminalNode
	STRUCT_SYMBOL() antlr.TerminalNode
	VALUE_SYMBOL() antlr.TerminalNode

	// IsSelectContext differentiates from other interfaces.
	IsSelectContext()
}

type SelectContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectContext() *SelectContext {
	var p = new(SelectContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select
	return p
}

func InitEmptySelectContext(p *SelectContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select
}

func (*SelectContext) IsSelectContext() {}

func NewSelectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectContext {
	var p = new(SelectContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_select

	return p
}

func (s *SelectContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectContext) SELECT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSELECT_SYMBOL, 0)
}

func (s *SelectContext) Select_list() ISelect_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_listContext)
}

func (s *SelectContext) Differential_privacy_clause() IDifferential_privacy_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDifferential_privacy_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDifferential_privacy_clauseContext)
}

func (s *SelectContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *SelectContext) From_clause() IFrom_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrom_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrom_clauseContext)
}

func (s *SelectContext) ALL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserALL_SYMBOL, 0)
}

func (s *SelectContext) DISTINCT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDISTINCT_SYMBOL, 0)
}

func (s *SelectContext) STRUCT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTRUCT_SYMBOL, 0)
}

func (s *SelectContext) VALUE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserVALUE_SYMBOL, 0)
}

func (s *SelectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSelect(s)
	}
}

func (s *SelectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSelect(s)
	}
}

func (s *SelectContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSelect(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Select_() (localctx ISelectContext) {
	localctx = NewSelectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, GoogleSQLParserRULE_select)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(296)
		p.Match(GoogleSQLParserSELECT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(298)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserWITH_SYMBOL {
		{
			p.SetState(297)
			p.Differential_privacy_clause()
		}

	}
	p.SetState(301)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserALL_SYMBOL || _la == GoogleSQLParserDISTINCT_SYMBOL {
		{
			p.SetState(300)
			_la = p.GetTokenStream().LA(1)

			if !(_la == GoogleSQLParserALL_SYMBOL || _la == GoogleSQLParserDISTINCT_SYMBOL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(305)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAS_SYMBOL {
		{
			p.SetState(303)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(304)
			_la = p.GetTokenStream().LA(1)

			if !(_la == GoogleSQLParserSTRUCT_SYMBOL || _la == GoogleSQLParserVALUE_SYMBOL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(307)
		p.Select_list()
	}
	p.SetState(309)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 15, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(308)
			p.From_clause()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFrom_clauseContext is an interface to support dynamic dispatch.
type IFrom_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FROM_SYMBOL() antlr.TerminalNode
	From_item() IFrom_itemContext
	Pivot_operator() IPivot_operatorContext
	Unpivot_operator() IUnpivot_operatorContext
	Tablesample_operator() ITablesample_operatorContext

	// IsFrom_clauseContext differentiates from other interfaces.
	IsFrom_clauseContext()
}

type From_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrom_clauseContext() *From_clauseContext {
	var p = new(From_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_from_clause
	return p
}

func InitEmptyFrom_clauseContext(p *From_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_from_clause
}

func (*From_clauseContext) IsFrom_clauseContext() {}

func NewFrom_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *From_clauseContext {
	var p = new(From_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_from_clause

	return p
}

func (s *From_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *From_clauseContext) FROM_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFROM_SYMBOL, 0)
}

func (s *From_clauseContext) From_item() IFrom_itemContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrom_itemContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrom_itemContext)
}

func (s *From_clauseContext) Pivot_operator() IPivot_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPivot_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPivot_operatorContext)
}

func (s *From_clauseContext) Unpivot_operator() IUnpivot_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnpivot_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnpivot_operatorContext)
}

func (s *From_clauseContext) Tablesample_operator() ITablesample_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITablesample_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITablesample_operatorContext)
}

func (s *From_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *From_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *From_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFrom_clause(s)
	}
}

func (s *From_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFrom_clause(s)
	}
}

func (s *From_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFrom_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) From_clause() (localctx IFrom_clauseContext) {
	localctx = NewFrom_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, GoogleSQLParserRULE_from_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(311)
		p.Match(GoogleSQLParserFROM_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(312)
		p.from_item(0)
	}
	p.SetState(315)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 16, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(313)
			p.Pivot_operator()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	} else if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 16, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(314)
			p.Unpivot_operator()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(318)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 17, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(317)
			p.Tablesample_operator()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITablesample_operatorContext is an interface to support dynamic dispatch.
type ITablesample_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPercent returns the percent rule contexts.
	GetPercent() IInteger_typeContext

	// SetPercent sets the percent rule contexts.
	SetPercent(IInteger_typeContext)

	// Getter signatures
	TABLESAMPLE_SYMBOL() antlr.TerminalNode
	SYSTEM_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	PERCENT_SYMBOL() antlr.TerminalNode
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Integer_type() IInteger_typeContext

	// IsTablesample_operatorContext differentiates from other interfaces.
	IsTablesample_operatorContext()
}

type Tablesample_operatorContext struct {
	antlr.BaseParserRuleContext
	parser  antlr.Parser
	percent IInteger_typeContext
}

func NewEmptyTablesample_operatorContext() *Tablesample_operatorContext {
	var p = new(Tablesample_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_tablesample_operator
	return p
}

func InitEmptyTablesample_operatorContext(p *Tablesample_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_tablesample_operator
}

func (*Tablesample_operatorContext) IsTablesample_operatorContext() {}

func NewTablesample_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tablesample_operatorContext {
	var p = new(Tablesample_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_tablesample_operator

	return p
}

func (s *Tablesample_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Tablesample_operatorContext) GetPercent() IInteger_typeContext { return s.percent }

func (s *Tablesample_operatorContext) SetPercent(v IInteger_typeContext) { s.percent = v }

func (s *Tablesample_operatorContext) TABLESAMPLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTABLESAMPLE_SYMBOL, 0)
}

func (s *Tablesample_operatorContext) SYSTEM_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSYSTEM_SYMBOL, 0)
}

func (s *Tablesample_operatorContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Tablesample_operatorContext) PERCENT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPERCENT_SYMBOL, 0)
}

func (s *Tablesample_operatorContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Tablesample_operatorContext) Integer_type() IInteger_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInteger_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInteger_typeContext)
}

func (s *Tablesample_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tablesample_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tablesample_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTablesample_operator(s)
	}
}

func (s *Tablesample_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTablesample_operator(s)
	}
}

func (s *Tablesample_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTablesample_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Tablesample_operator() (localctx ITablesample_operatorContext) {
	localctx = NewTablesample_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, GoogleSQLParserRULE_tablesample_operator)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(320)
		p.Match(GoogleSQLParserTABLESAMPLE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(321)
		p.Match(GoogleSQLParserSYSTEM_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(322)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(323)

		var _x = p.Integer_type()

		localctx.(*Tablesample_operatorContext).percent = _x
	}
	{
		p.SetState(324)
		p.Match(GoogleSQLParserPERCENT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(325)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnpivot_operatorContext is an interface to support dynamic dispatch.
type IUnpivot_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetUnpivot_alias returns the unpivot_alias rule contexts.
	GetUnpivot_alias() IAs_aliasContext

	// SetUnpivot_alias sets the unpivot_alias rule contexts.
	SetUnpivot_alias(IAs_aliasContext)

	// Getter signatures
	UNPIVOT_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Single_column_unpivot() ISingle_column_unpivotContext
	Multi_column_unpivot() IMulti_column_unpivotContext
	INCLUDE_SYMBOL() antlr.TerminalNode
	NULLS_SYMBOL() antlr.TerminalNode
	EXCLUDE_SYMBOL() antlr.TerminalNode
	As_alias() IAs_aliasContext

	// IsUnpivot_operatorContext differentiates from other interfaces.
	IsUnpivot_operatorContext()
}

type Unpivot_operatorContext struct {
	antlr.BaseParserRuleContext
	parser        antlr.Parser
	unpivot_alias IAs_aliasContext
}

func NewEmptyUnpivot_operatorContext() *Unpivot_operatorContext {
	var p = new(Unpivot_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unpivot_operator
	return p
}

func InitEmptyUnpivot_operatorContext(p *Unpivot_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unpivot_operator
}

func (*Unpivot_operatorContext) IsUnpivot_operatorContext() {}

func NewUnpivot_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unpivot_operatorContext {
	var p = new(Unpivot_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_unpivot_operator

	return p
}

func (s *Unpivot_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Unpivot_operatorContext) GetUnpivot_alias() IAs_aliasContext { return s.unpivot_alias }

func (s *Unpivot_operatorContext) SetUnpivot_alias(v IAs_aliasContext) { s.unpivot_alias = v }

func (s *Unpivot_operatorContext) UNPIVOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNPIVOT_SYMBOL, 0)
}

func (s *Unpivot_operatorContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Unpivot_operatorContext) Single_column_unpivot() ISingle_column_unpivotContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISingle_column_unpivotContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISingle_column_unpivotContext)
}

func (s *Unpivot_operatorContext) Multi_column_unpivot() IMulti_column_unpivotContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMulti_column_unpivotContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMulti_column_unpivotContext)
}

func (s *Unpivot_operatorContext) INCLUDE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINCLUDE_SYMBOL, 0)
}

func (s *Unpivot_operatorContext) NULLS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNULLS_SYMBOL, 0)
}

func (s *Unpivot_operatorContext) EXCLUDE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXCLUDE_SYMBOL, 0)
}

func (s *Unpivot_operatorContext) As_alias() IAs_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_aliasContext)
}

func (s *Unpivot_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unpivot_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unpivot_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUnpivot_operator(s)
	}
}

func (s *Unpivot_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUnpivot_operator(s)
	}
}

func (s *Unpivot_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUnpivot_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Unpivot_operator() (localctx IUnpivot_operatorContext) {
	localctx = NewUnpivot_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, GoogleSQLParserRULE_unpivot_operator)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(327)
		p.Match(GoogleSQLParserUNPIVOT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(332)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINCLUDE_SYMBOL:
		{
			p.SetState(328)
			p.Match(GoogleSQLParserINCLUDE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(329)
			p.Match(GoogleSQLParserNULLS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserEXCLUDE_SYMBOL:
		{
			p.SetState(330)
			p.Match(GoogleSQLParserEXCLUDE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(331)
			p.Match(GoogleSQLParserNULLS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserLR_BRACKET_SYMBOL:

	default:
	}
	{
		p.SetState(334)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(337)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 19, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(335)
			p.Single_column_unpivot()
		}

	case 2:
		{
			p.SetState(336)
			p.Multi_column_unpivot()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.SetState(340)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 20, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(339)

			var _x = p.As_alias()

			localctx.(*Unpivot_operatorContext).unpivot_alias = _x
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISingle_column_unpivotContext is an interface to support dynamic dispatch.
type ISingle_column_unpivotContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetValues_column returns the values_column rule contexts.
	GetValues_column() IColumn_nameContext

	// GetName_column returns the name_column rule contexts.
	GetName_column() IColumn_nameContext

	// SetValues_column sets the values_column rule contexts.
	SetValues_column(IColumn_nameContext)

	// SetName_column sets the name_column rule contexts.
	SetName_column(IColumn_nameContext)

	// Getter signatures
	FOR_SYMBOL() antlr.TerminalNode
	IN_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Columns_to_unpivot_list() IColumns_to_unpivot_listContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	AllColumn_name() []IColumn_nameContext
	Column_name(i int) IColumn_nameContext

	// IsSingle_column_unpivotContext differentiates from other interfaces.
	IsSingle_column_unpivotContext()
}

type Single_column_unpivotContext struct {
	antlr.BaseParserRuleContext
	parser        antlr.Parser
	values_column IColumn_nameContext
	name_column   IColumn_nameContext
}

func NewEmptySingle_column_unpivotContext() *Single_column_unpivotContext {
	var p = new(Single_column_unpivotContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_single_column_unpivot
	return p
}

func InitEmptySingle_column_unpivotContext(p *Single_column_unpivotContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_single_column_unpivot
}

func (*Single_column_unpivotContext) IsSingle_column_unpivotContext() {}

func NewSingle_column_unpivotContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Single_column_unpivotContext {
	var p = new(Single_column_unpivotContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_single_column_unpivot

	return p
}

func (s *Single_column_unpivotContext) GetParser() antlr.Parser { return s.parser }

func (s *Single_column_unpivotContext) GetValues_column() IColumn_nameContext { return s.values_column }

func (s *Single_column_unpivotContext) GetName_column() IColumn_nameContext { return s.name_column }

func (s *Single_column_unpivotContext) SetValues_column(v IColumn_nameContext) { s.values_column = v }

func (s *Single_column_unpivotContext) SetName_column(v IColumn_nameContext) { s.name_column = v }

func (s *Single_column_unpivotContext) FOR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFOR_SYMBOL, 0)
}

func (s *Single_column_unpivotContext) IN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIN_SYMBOL, 0)
}

func (s *Single_column_unpivotContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Single_column_unpivotContext) Columns_to_unpivot_list() IColumns_to_unpivot_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumns_to_unpivot_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumns_to_unpivot_listContext)
}

func (s *Single_column_unpivotContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Single_column_unpivotContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Single_column_unpivotContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Single_column_unpivotContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Single_column_unpivotContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Single_column_unpivotContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSingle_column_unpivot(s)
	}
}

func (s *Single_column_unpivotContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSingle_column_unpivot(s)
	}
}

func (s *Single_column_unpivotContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSingle_column_unpivot(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Single_column_unpivot() (localctx ISingle_column_unpivotContext) {
	localctx = NewSingle_column_unpivotContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, GoogleSQLParserRULE_single_column_unpivot)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(342)

		var _x = p.Column_name()

		localctx.(*Single_column_unpivotContext).values_column = _x
	}
	{
		p.SetState(343)
		p.Match(GoogleSQLParserFOR_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(344)

		var _x = p.Column_name()

		localctx.(*Single_column_unpivotContext).name_column = _x
	}
	{
		p.SetState(345)
		p.Match(GoogleSQLParserIN_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(346)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(347)
		p.Columns_to_unpivot_list()
	}
	{
		p.SetState(348)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMulti_column_unpivotContext is an interface to support dynamic dispatch.
type IMulti_column_unpivotContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName_column returns the name_column rule contexts.
	GetName_column() IColumn_nameContext

	// SetName_column sets the name_column rule contexts.
	SetName_column(IColumn_nameContext)

	// Getter signatures
	Values_column_set() IValues_column_setContext
	FOR_SYMBOL() antlr.TerminalNode
	IN_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Column_sets_to_unpivot() IColumn_sets_to_unpivotContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	Column_name() IColumn_nameContext

	// IsMulti_column_unpivotContext differentiates from other interfaces.
	IsMulti_column_unpivotContext()
}

type Multi_column_unpivotContext struct {
	antlr.BaseParserRuleContext
	parser      antlr.Parser
	name_column IColumn_nameContext
}

func NewEmptyMulti_column_unpivotContext() *Multi_column_unpivotContext {
	var p = new(Multi_column_unpivotContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_multi_column_unpivot
	return p
}

func InitEmptyMulti_column_unpivotContext(p *Multi_column_unpivotContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_multi_column_unpivot
}

func (*Multi_column_unpivotContext) IsMulti_column_unpivotContext() {}

func NewMulti_column_unpivotContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Multi_column_unpivotContext {
	var p = new(Multi_column_unpivotContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_multi_column_unpivot

	return p
}

func (s *Multi_column_unpivotContext) GetParser() antlr.Parser { return s.parser }

func (s *Multi_column_unpivotContext) GetName_column() IColumn_nameContext { return s.name_column }

func (s *Multi_column_unpivotContext) SetName_column(v IColumn_nameContext) { s.name_column = v }

func (s *Multi_column_unpivotContext) Values_column_set() IValues_column_setContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IValues_column_setContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IValues_column_setContext)
}

func (s *Multi_column_unpivotContext) FOR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFOR_SYMBOL, 0)
}

func (s *Multi_column_unpivotContext) IN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIN_SYMBOL, 0)
}

func (s *Multi_column_unpivotContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Multi_column_unpivotContext) Column_sets_to_unpivot() IColumn_sets_to_unpivotContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_sets_to_unpivotContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_sets_to_unpivotContext)
}

func (s *Multi_column_unpivotContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Multi_column_unpivotContext) Column_name() IColumn_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Multi_column_unpivotContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Multi_column_unpivotContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Multi_column_unpivotContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterMulti_column_unpivot(s)
	}
}

func (s *Multi_column_unpivotContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitMulti_column_unpivot(s)
	}
}

func (s *Multi_column_unpivotContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitMulti_column_unpivot(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Multi_column_unpivot() (localctx IMulti_column_unpivotContext) {
	localctx = NewMulti_column_unpivotContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, GoogleSQLParserRULE_multi_column_unpivot)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(350)
		p.Values_column_set()
	}
	{
		p.SetState(351)
		p.Match(GoogleSQLParserFOR_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(352)

		var _x = p.Column_name()

		localctx.(*Multi_column_unpivotContext).name_column = _x
	}
	{
		p.SetState(353)
		p.Match(GoogleSQLParserIN_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(354)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(355)
		p.Column_sets_to_unpivot()
	}
	{
		p.SetState(356)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IValues_column_setContext is an interface to support dynamic dispatch.
type IValues_column_setContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetValues_column returns the values_column rule contexts.
	GetValues_column() IColumn_nameContext

	// SetValues_column sets the values_column rule contexts.
	SetValues_column(IColumn_nameContext)

	// Getter signatures
	AllColumn_name() []IColumn_nameContext
	Column_name(i int) IColumn_nameContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsValues_column_setContext differentiates from other interfaces.
	IsValues_column_setContext()
}

type Values_column_setContext struct {
	antlr.BaseParserRuleContext
	parser        antlr.Parser
	values_column IColumn_nameContext
}

func NewEmptyValues_column_setContext() *Values_column_setContext {
	var p = new(Values_column_setContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_values_column_set
	return p
}

func InitEmptyValues_column_setContext(p *Values_column_setContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_values_column_set
}

func (*Values_column_setContext) IsValues_column_setContext() {}

func NewValues_column_setContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Values_column_setContext {
	var p = new(Values_column_setContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_values_column_set

	return p
}

func (s *Values_column_setContext) GetParser() antlr.Parser { return s.parser }

func (s *Values_column_setContext) GetValues_column() IColumn_nameContext { return s.values_column }

func (s *Values_column_setContext) SetValues_column(v IColumn_nameContext) { s.values_column = v }

func (s *Values_column_setContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Values_column_setContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Values_column_setContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Values_column_setContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Values_column_setContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Values_column_setContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Values_column_setContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterValues_column_set(s)
	}
}

func (s *Values_column_setContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitValues_column_set(s)
	}
}

func (s *Values_column_setContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitValues_column_set(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Values_column_set() (localctx IValues_column_setContext) {
	localctx = NewValues_column_setContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, GoogleSQLParserRULE_values_column_set)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(358)

		var _x = p.Column_name()

		localctx.(*Values_column_setContext).values_column = _x
	}
	p.SetState(363)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(359)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(360)

			var _x = p.Column_name()

			localctx.(*Values_column_setContext).values_column = _x
		}

		p.SetState(365)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumns_to_unpivot_listContext is an interface to support dynamic dispatch.
type IColumns_to_unpivot_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllColumns_to_unpivot_item() []IColumns_to_unpivot_itemContext
	Columns_to_unpivot_item(i int) IColumns_to_unpivot_itemContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsColumns_to_unpivot_listContext differentiates from other interfaces.
	IsColumns_to_unpivot_listContext()
}

type Columns_to_unpivot_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumns_to_unpivot_listContext() *Columns_to_unpivot_listContext {
	var p = new(Columns_to_unpivot_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_columns_to_unpivot_list
	return p
}

func InitEmptyColumns_to_unpivot_listContext(p *Columns_to_unpivot_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_columns_to_unpivot_list
}

func (*Columns_to_unpivot_listContext) IsColumns_to_unpivot_listContext() {}

func NewColumns_to_unpivot_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Columns_to_unpivot_listContext {
	var p = new(Columns_to_unpivot_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_columns_to_unpivot_list

	return p
}

func (s *Columns_to_unpivot_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Columns_to_unpivot_listContext) AllColumns_to_unpivot_item() []IColumns_to_unpivot_itemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumns_to_unpivot_itemContext); ok {
			len++
		}
	}

	tst := make([]IColumns_to_unpivot_itemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumns_to_unpivot_itemContext); ok {
			tst[i] = t.(IColumns_to_unpivot_itemContext)
			i++
		}
	}

	return tst
}

func (s *Columns_to_unpivot_listContext) Columns_to_unpivot_item(i int) IColumns_to_unpivot_itemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumns_to_unpivot_itemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumns_to_unpivot_itemContext)
}

func (s *Columns_to_unpivot_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Columns_to_unpivot_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Columns_to_unpivot_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Columns_to_unpivot_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Columns_to_unpivot_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterColumns_to_unpivot_list(s)
	}
}

func (s *Columns_to_unpivot_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitColumns_to_unpivot_list(s)
	}
}

func (s *Columns_to_unpivot_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitColumns_to_unpivot_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Columns_to_unpivot_list() (localctx IColumns_to_unpivot_listContext) {
	localctx = NewColumns_to_unpivot_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, GoogleSQLParserRULE_columns_to_unpivot_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(366)
		p.Columns_to_unpivot_item()
	}
	p.SetState(371)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(367)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(368)
			p.Columns_to_unpivot_item()
		}

		p.SetState(373)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumns_to_unpivot_itemContext is an interface to support dynamic dispatch.
type IColumns_to_unpivot_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetUnpivot_column returns the unpivot_column rule contexts.
	GetUnpivot_column() IColumn_nameContext

	// GetRow_value_alias returns the row_value_alias rule contexts.
	GetRow_value_alias() IAs_aliasContext

	// SetUnpivot_column sets the unpivot_column rule contexts.
	SetUnpivot_column(IColumn_nameContext)

	// SetRow_value_alias sets the row_value_alias rule contexts.
	SetRow_value_alias(IAs_aliasContext)

	// Getter signatures
	Column_name() IColumn_nameContext
	As_alias() IAs_aliasContext

	// IsColumns_to_unpivot_itemContext differentiates from other interfaces.
	IsColumns_to_unpivot_itemContext()
}

type Columns_to_unpivot_itemContext struct {
	antlr.BaseParserRuleContext
	parser          antlr.Parser
	unpivot_column  IColumn_nameContext
	row_value_alias IAs_aliasContext
}

func NewEmptyColumns_to_unpivot_itemContext() *Columns_to_unpivot_itemContext {
	var p = new(Columns_to_unpivot_itemContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_columns_to_unpivot_item
	return p
}

func InitEmptyColumns_to_unpivot_itemContext(p *Columns_to_unpivot_itemContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_columns_to_unpivot_item
}

func (*Columns_to_unpivot_itemContext) IsColumns_to_unpivot_itemContext() {}

func NewColumns_to_unpivot_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Columns_to_unpivot_itemContext {
	var p = new(Columns_to_unpivot_itemContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_columns_to_unpivot_item

	return p
}

func (s *Columns_to_unpivot_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Columns_to_unpivot_itemContext) GetUnpivot_column() IColumn_nameContext {
	return s.unpivot_column
}

func (s *Columns_to_unpivot_itemContext) GetRow_value_alias() IAs_aliasContext {
	return s.row_value_alias
}

func (s *Columns_to_unpivot_itemContext) SetUnpivot_column(v IColumn_nameContext) {
	s.unpivot_column = v
}

func (s *Columns_to_unpivot_itemContext) SetRow_value_alias(v IAs_aliasContext) {
	s.row_value_alias = v
}

func (s *Columns_to_unpivot_itemContext) Column_name() IColumn_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Columns_to_unpivot_itemContext) As_alias() IAs_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_aliasContext)
}

func (s *Columns_to_unpivot_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Columns_to_unpivot_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Columns_to_unpivot_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterColumns_to_unpivot_item(s)
	}
}

func (s *Columns_to_unpivot_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitColumns_to_unpivot_item(s)
	}
}

func (s *Columns_to_unpivot_itemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitColumns_to_unpivot_item(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Columns_to_unpivot_item() (localctx IColumns_to_unpivot_itemContext) {
	localctx = NewColumns_to_unpivot_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, GoogleSQLParserRULE_columns_to_unpivot_item)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(374)

		var _x = p.Column_name()

		localctx.(*Columns_to_unpivot_itemContext).unpivot_column = _x
	}
	p.SetState(376)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAS_SYMBOL || _la == GoogleSQLParserQUOTED_ID || _la == GoogleSQLParserID {
		{
			p.SetState(375)

			var _x = p.As_alias()

			localctx.(*Columns_to_unpivot_itemContext).row_value_alias = _x
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumn_sets_to_unpivotContext is an interface to support dynamic dispatch.
type IColumn_sets_to_unpivotContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Columns_to_unpivot_list() IColumns_to_unpivot_listContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsColumn_sets_to_unpivotContext differentiates from other interfaces.
	IsColumn_sets_to_unpivotContext()
}

type Column_sets_to_unpivotContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_sets_to_unpivotContext() *Column_sets_to_unpivotContext {
	var p = new(Column_sets_to_unpivotContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_column_sets_to_unpivot
	return p
}

func InitEmptyColumn_sets_to_unpivotContext(p *Column_sets_to_unpivotContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_column_sets_to_unpivot
}

func (*Column_sets_to_unpivotContext) IsColumn_sets_to_unpivotContext() {}

func NewColumn_sets_to_unpivotContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_sets_to_unpivotContext {
	var p = new(Column_sets_to_unpivotContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_column_sets_to_unpivot

	return p
}

func (s *Column_sets_to_unpivotContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_sets_to_unpivotContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Column_sets_to_unpivotContext) Columns_to_unpivot_list() IColumns_to_unpivot_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumns_to_unpivot_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumns_to_unpivot_listContext)
}

func (s *Column_sets_to_unpivotContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Column_sets_to_unpivotContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_sets_to_unpivotContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_sets_to_unpivotContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterColumn_sets_to_unpivot(s)
	}
}

func (s *Column_sets_to_unpivotContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitColumn_sets_to_unpivot(s)
	}
}

func (s *Column_sets_to_unpivotContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitColumn_sets_to_unpivot(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Column_sets_to_unpivot() (localctx IColumn_sets_to_unpivotContext) {
	localctx = NewColumn_sets_to_unpivotContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, GoogleSQLParserRULE_column_sets_to_unpivot)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(378)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(379)
		p.Columns_to_unpivot_list()
	}
	{
		p.SetState(380)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPivot_operatorContext is an interface to support dynamic dispatch.
type IPivot_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetInput_column returns the input_column rule contexts.
	GetInput_column() IColumn_nameContext

	// SetInput_column sets the input_column rule contexts.
	SetInput_column(IColumn_nameContext)

	// Getter signatures
	PIVOT_SYMBOL() antlr.TerminalNode
	AllLR_BRACKET_SYMBOL() []antlr.TerminalNode
	LR_BRACKET_SYMBOL(i int) antlr.TerminalNode
	Aggregate_function_call_as_alias_list() IAggregate_function_call_as_alias_listContext
	FOR_SYMBOL() antlr.TerminalNode
	IN_SYMBOL() antlr.TerminalNode
	Pivot_column_as_alias_list() IPivot_column_as_alias_listContext
	AllRR_BRACKET_SYMBOL() []antlr.TerminalNode
	RR_BRACKET_SYMBOL(i int) antlr.TerminalNode
	Column_name() IColumn_nameContext
	As_alias() IAs_aliasContext

	// IsPivot_operatorContext differentiates from other interfaces.
	IsPivot_operatorContext()
}

type Pivot_operatorContext struct {
	antlr.BaseParserRuleContext
	parser       antlr.Parser
	input_column IColumn_nameContext
}

func NewEmptyPivot_operatorContext() *Pivot_operatorContext {
	var p = new(Pivot_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_pivot_operator
	return p
}

func InitEmptyPivot_operatorContext(p *Pivot_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_pivot_operator
}

func (*Pivot_operatorContext) IsPivot_operatorContext() {}

func NewPivot_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pivot_operatorContext {
	var p = new(Pivot_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_pivot_operator

	return p
}

func (s *Pivot_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Pivot_operatorContext) GetInput_column() IColumn_nameContext { return s.input_column }

func (s *Pivot_operatorContext) SetInput_column(v IColumn_nameContext) { s.input_column = v }

func (s *Pivot_operatorContext) PIVOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPIVOT_SYMBOL, 0)
}

func (s *Pivot_operatorContext) AllLR_BRACKET_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserLR_BRACKET_SYMBOL)
}

func (s *Pivot_operatorContext) LR_BRACKET_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, i)
}

func (s *Pivot_operatorContext) Aggregate_function_call_as_alias_list() IAggregate_function_call_as_alias_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAggregate_function_call_as_alias_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAggregate_function_call_as_alias_listContext)
}

func (s *Pivot_operatorContext) FOR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFOR_SYMBOL, 0)
}

func (s *Pivot_operatorContext) IN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIN_SYMBOL, 0)
}

func (s *Pivot_operatorContext) Pivot_column_as_alias_list() IPivot_column_as_alias_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPivot_column_as_alias_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPivot_column_as_alias_listContext)
}

func (s *Pivot_operatorContext) AllRR_BRACKET_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserRR_BRACKET_SYMBOL)
}

func (s *Pivot_operatorContext) RR_BRACKET_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, i)
}

func (s *Pivot_operatorContext) Column_name() IColumn_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Pivot_operatorContext) As_alias() IAs_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_aliasContext)
}

func (s *Pivot_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pivot_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pivot_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPivot_operator(s)
	}
}

func (s *Pivot_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPivot_operator(s)
	}
}

func (s *Pivot_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPivot_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Pivot_operator() (localctx IPivot_operatorContext) {
	localctx = NewPivot_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, GoogleSQLParserRULE_pivot_operator)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(382)
		p.Match(GoogleSQLParserPIVOT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(383)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(384)
		p.Aggregate_function_call_as_alias_list()
	}
	{
		p.SetState(385)
		p.Match(GoogleSQLParserFOR_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(386)

		var _x = p.Column_name()

		localctx.(*Pivot_operatorContext).input_column = _x
	}
	{
		p.SetState(387)
		p.Match(GoogleSQLParserIN_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(388)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(389)
		p.Pivot_column_as_alias_list()
	}
	{
		p.SetState(390)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(391)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(393)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 24, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(392)
			p.As_alias()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPivot_column_as_alias_listContext is an interface to support dynamic dispatch.
type IPivot_column_as_alias_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllPivot_column_as_alias_list_item() []IPivot_column_as_alias_list_itemContext
	Pivot_column_as_alias_list_item(i int) IPivot_column_as_alias_list_itemContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsPivot_column_as_alias_listContext differentiates from other interfaces.
	IsPivot_column_as_alias_listContext()
}

type Pivot_column_as_alias_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPivot_column_as_alias_listContext() *Pivot_column_as_alias_listContext {
	var p = new(Pivot_column_as_alias_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_pivot_column_as_alias_list
	return p
}

func InitEmptyPivot_column_as_alias_listContext(p *Pivot_column_as_alias_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_pivot_column_as_alias_list
}

func (*Pivot_column_as_alias_listContext) IsPivot_column_as_alias_listContext() {}

func NewPivot_column_as_alias_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pivot_column_as_alias_listContext {
	var p = new(Pivot_column_as_alias_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_pivot_column_as_alias_list

	return p
}

func (s *Pivot_column_as_alias_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Pivot_column_as_alias_listContext) AllPivot_column_as_alias_list_item() []IPivot_column_as_alias_list_itemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPivot_column_as_alias_list_itemContext); ok {
			len++
		}
	}

	tst := make([]IPivot_column_as_alias_list_itemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPivot_column_as_alias_list_itemContext); ok {
			tst[i] = t.(IPivot_column_as_alias_list_itemContext)
			i++
		}
	}

	return tst
}

func (s *Pivot_column_as_alias_listContext) Pivot_column_as_alias_list_item(i int) IPivot_column_as_alias_list_itemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPivot_column_as_alias_list_itemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPivot_column_as_alias_list_itemContext)
}

func (s *Pivot_column_as_alias_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Pivot_column_as_alias_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Pivot_column_as_alias_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pivot_column_as_alias_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pivot_column_as_alias_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPivot_column_as_alias_list(s)
	}
}

func (s *Pivot_column_as_alias_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPivot_column_as_alias_list(s)
	}
}

func (s *Pivot_column_as_alias_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPivot_column_as_alias_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Pivot_column_as_alias_list() (localctx IPivot_column_as_alias_listContext) {
	localctx = NewPivot_column_as_alias_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, GoogleSQLParserRULE_pivot_column_as_alias_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(395)
		p.Pivot_column_as_alias_list_item()
	}
	p.SetState(400)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(396)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(397)
			p.Pivot_column_as_alias_list_item()
		}

		p.SetState(402)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPivot_column_as_alias_list_itemContext is an interface to support dynamic dispatch.
type IPivot_column_as_alias_list_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPivot_column returns the pivot_column rule contexts.
	GetPivot_column() IColumn_nameContext

	// SetPivot_column sets the pivot_column rule contexts.
	SetPivot_column(IColumn_nameContext)

	// Getter signatures
	Column_name() IColumn_nameContext
	As_alias() IAs_aliasContext

	// IsPivot_column_as_alias_list_itemContext differentiates from other interfaces.
	IsPivot_column_as_alias_list_itemContext()
}

type Pivot_column_as_alias_list_itemContext struct {
	antlr.BaseParserRuleContext
	parser       antlr.Parser
	pivot_column IColumn_nameContext
}

func NewEmptyPivot_column_as_alias_list_itemContext() *Pivot_column_as_alias_list_itemContext {
	var p = new(Pivot_column_as_alias_list_itemContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_pivot_column_as_alias_list_item
	return p
}

func InitEmptyPivot_column_as_alias_list_itemContext(p *Pivot_column_as_alias_list_itemContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_pivot_column_as_alias_list_item
}

func (*Pivot_column_as_alias_list_itemContext) IsPivot_column_as_alias_list_itemContext() {}

func NewPivot_column_as_alias_list_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pivot_column_as_alias_list_itemContext {
	var p = new(Pivot_column_as_alias_list_itemContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_pivot_column_as_alias_list_item

	return p
}

func (s *Pivot_column_as_alias_list_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Pivot_column_as_alias_list_itemContext) GetPivot_column() IColumn_nameContext {
	return s.pivot_column
}

func (s *Pivot_column_as_alias_list_itemContext) SetPivot_column(v IColumn_nameContext) {
	s.pivot_column = v
}

func (s *Pivot_column_as_alias_list_itemContext) Column_name() IColumn_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Pivot_column_as_alias_list_itemContext) As_alias() IAs_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_aliasContext)
}

func (s *Pivot_column_as_alias_list_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pivot_column_as_alias_list_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pivot_column_as_alias_list_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPivot_column_as_alias_list_item(s)
	}
}

func (s *Pivot_column_as_alias_list_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPivot_column_as_alias_list_item(s)
	}
}

func (s *Pivot_column_as_alias_list_itemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPivot_column_as_alias_list_item(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Pivot_column_as_alias_list_item() (localctx IPivot_column_as_alias_list_itemContext) {
	localctx = NewPivot_column_as_alias_list_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, GoogleSQLParserRULE_pivot_column_as_alias_list_item)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(403)

		var _x = p.Column_name()

		localctx.(*Pivot_column_as_alias_list_itemContext).pivot_column = _x
	}
	p.SetState(405)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAS_SYMBOL || _la == GoogleSQLParserQUOTED_ID || _la == GoogleSQLParserID {
		{
			p.SetState(404)
			p.As_alias()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAggregate_function_call_as_alias_listContext is an interface to support dynamic dispatch.
type IAggregate_function_call_as_alias_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllAggregate_function_call_as_alias_list_item() []IAggregate_function_call_as_alias_list_itemContext
	Aggregate_function_call_as_alias_list_item(i int) IAggregate_function_call_as_alias_list_itemContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsAggregate_function_call_as_alias_listContext differentiates from other interfaces.
	IsAggregate_function_call_as_alias_listContext()
}

type Aggregate_function_call_as_alias_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAggregate_function_call_as_alias_listContext() *Aggregate_function_call_as_alias_listContext {
	var p = new(Aggregate_function_call_as_alias_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_aggregate_function_call_as_alias_list
	return p
}

func InitEmptyAggregate_function_call_as_alias_listContext(p *Aggregate_function_call_as_alias_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_aggregate_function_call_as_alias_list
}

func (*Aggregate_function_call_as_alias_listContext) IsAggregate_function_call_as_alias_listContext() {
}

func NewAggregate_function_call_as_alias_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Aggregate_function_call_as_alias_listContext {
	var p = new(Aggregate_function_call_as_alias_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_aggregate_function_call_as_alias_list

	return p
}

func (s *Aggregate_function_call_as_alias_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Aggregate_function_call_as_alias_listContext) AllAggregate_function_call_as_alias_list_item() []IAggregate_function_call_as_alias_list_itemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAggregate_function_call_as_alias_list_itemContext); ok {
			len++
		}
	}

	tst := make([]IAggregate_function_call_as_alias_list_itemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAggregate_function_call_as_alias_list_itemContext); ok {
			tst[i] = t.(IAggregate_function_call_as_alias_list_itemContext)
			i++
		}
	}

	return tst
}

func (s *Aggregate_function_call_as_alias_listContext) Aggregate_function_call_as_alias_list_item(i int) IAggregate_function_call_as_alias_list_itemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAggregate_function_call_as_alias_list_itemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAggregate_function_call_as_alias_list_itemContext)
}

func (s *Aggregate_function_call_as_alias_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Aggregate_function_call_as_alias_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Aggregate_function_call_as_alias_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Aggregate_function_call_as_alias_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Aggregate_function_call_as_alias_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAggregate_function_call_as_alias_list(s)
	}
}

func (s *Aggregate_function_call_as_alias_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAggregate_function_call_as_alias_list(s)
	}
}

func (s *Aggregate_function_call_as_alias_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAggregate_function_call_as_alias_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Aggregate_function_call_as_alias_list() (localctx IAggregate_function_call_as_alias_listContext) {
	localctx = NewAggregate_function_call_as_alias_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, GoogleSQLParserRULE_aggregate_function_call_as_alias_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(407)
		p.Aggregate_function_call_as_alias_list_item()
	}
	p.SetState(412)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(408)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(409)
			p.Aggregate_function_call_as_alias_list_item()
		}

		p.SetState(414)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAggregate_function_call_as_alias_list_itemContext is an interface to support dynamic dispatch.
type IAggregate_function_call_as_alias_list_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	As_alias() IAs_aliasContext

	// IsAggregate_function_call_as_alias_list_itemContext differentiates from other interfaces.
	IsAggregate_function_call_as_alias_list_itemContext()
}

type Aggregate_function_call_as_alias_list_itemContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAggregate_function_call_as_alias_list_itemContext() *Aggregate_function_call_as_alias_list_itemContext {
	var p = new(Aggregate_function_call_as_alias_list_itemContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_aggregate_function_call_as_alias_list_item
	return p
}

func InitEmptyAggregate_function_call_as_alias_list_itemContext(p *Aggregate_function_call_as_alias_list_itemContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_aggregate_function_call_as_alias_list_item
}

func (*Aggregate_function_call_as_alias_list_itemContext) IsAggregate_function_call_as_alias_list_itemContext() {
}

func NewAggregate_function_call_as_alias_list_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Aggregate_function_call_as_alias_list_itemContext {
	var p = new(Aggregate_function_call_as_alias_list_itemContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_aggregate_function_call_as_alias_list_item

	return p
}

func (s *Aggregate_function_call_as_alias_list_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Aggregate_function_call_as_alias_list_itemContext) As_alias() IAs_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_aliasContext)
}

func (s *Aggregate_function_call_as_alias_list_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Aggregate_function_call_as_alias_list_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Aggregate_function_call_as_alias_list_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAggregate_function_call_as_alias_list_item(s)
	}
}

func (s *Aggregate_function_call_as_alias_list_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAggregate_function_call_as_alias_list_item(s)
	}
}

func (s *Aggregate_function_call_as_alias_list_itemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAggregate_function_call_as_alias_list_item(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Aggregate_function_call_as_alias_list_item() (localctx IAggregate_function_call_as_alias_list_itemContext) {
	localctx = NewAggregate_function_call_as_alias_list_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, GoogleSQLParserRULE_aggregate_function_call_as_alias_list_item)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(416)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAS_SYMBOL || _la == GoogleSQLParserQUOTED_ID || _la == GoogleSQLParserID {
		{
			p.SetState(415)
			p.As_alias()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFrom_itemContext is an interface to support dynamic dispatch.
type IFrom_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Table_name() ITable_nameContext
	As_alias() IAs_aliasContext
	FOR_SYMBOL() antlr.TerminalNode
	SYSTEM_TIME_SYMBOL() antlr.TerminalNode
	AS_SYMBOL() antlr.TerminalNode
	OF_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	AllFrom_item() []IFrom_itemContext
	From_item(i int) IFrom_itemContext
	Cross_join_operator() ICross_join_operatorContext
	Conditional_join_operator() IConditional_join_operatorContext
	Join_condition() IJoin_conditionContext
	Query_expr() IQuery_exprContext
	Unnest_operator() IUnnest_operatorContext
	Cte_name() ICte_nameContext

	// IsFrom_itemContext differentiates from other interfaces.
	IsFrom_itemContext()
}

type From_itemContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrom_itemContext() *From_itemContext {
	var p = new(From_itemContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_from_item
	return p
}

func InitEmptyFrom_itemContext(p *From_itemContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_from_item
}

func (*From_itemContext) IsFrom_itemContext() {}

func NewFrom_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *From_itemContext {
	var p = new(From_itemContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_from_item

	return p
}

func (s *From_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *From_itemContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *From_itemContext) As_alias() IAs_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_aliasContext)
}

func (s *From_itemContext) FOR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFOR_SYMBOL, 0)
}

func (s *From_itemContext) SYSTEM_TIME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSYSTEM_TIME_SYMBOL, 0)
}

func (s *From_itemContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *From_itemContext) OF_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOF_SYMBOL, 0)
}

func (s *From_itemContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *From_itemContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *From_itemContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *From_itemContext) AllFrom_item() []IFrom_itemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFrom_itemContext); ok {
			len++
		}
	}

	tst := make([]IFrom_itemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFrom_itemContext); ok {
			tst[i] = t.(IFrom_itemContext)
			i++
		}
	}

	return tst
}

func (s *From_itemContext) From_item(i int) IFrom_itemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrom_itemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrom_itemContext)
}

func (s *From_itemContext) Cross_join_operator() ICross_join_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICross_join_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICross_join_operatorContext)
}

func (s *From_itemContext) Conditional_join_operator() IConditional_join_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConditional_join_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConditional_join_operatorContext)
}

func (s *From_itemContext) Join_condition() IJoin_conditionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoin_conditionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoin_conditionContext)
}

func (s *From_itemContext) Query_expr() IQuery_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuery_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuery_exprContext)
}

func (s *From_itemContext) Unnest_operator() IUnnest_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnnest_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnnest_operatorContext)
}

func (s *From_itemContext) Cte_name() ICte_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICte_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICte_nameContext)
}

func (s *From_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *From_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *From_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFrom_item(s)
	}
}

func (s *From_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFrom_item(s)
	}
}

func (s *From_itemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFrom_item(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) From_item() (localctx IFrom_itemContext) {
	return p.from_item(0)
}

func (p *GoogleSQLParser) from_item(_p int) (localctx IFrom_itemContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewFrom_itemContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IFrom_itemContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 52
	p.EnterRecursionRule(localctx, 52, GoogleSQLParserRULE_from_item, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(455)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 34, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(419)
			p.Table_name()
		}
		p.SetState(421)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 29, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(420)
				p.As_alias()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(428)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 30, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(423)
				p.Match(GoogleSQLParserFOR_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(424)
				p.Match(GoogleSQLParserSYSTEM_TIME_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(425)
				p.Match(GoogleSQLParserAS_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(426)
				p.Match(GoogleSQLParserOF_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(427)
				p.Expression()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 2:
		{
			p.SetState(430)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(440)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 31, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(431)
				p.from_item(0)
			}
			{
				p.SetState(432)
				p.Cross_join_operator()
			}
			{
				p.SetState(433)
				p.from_item(0)
			}

		case 2:
			{
				p.SetState(435)
				p.from_item(0)
			}
			{
				p.SetState(436)
				p.Conditional_join_operator()
			}
			{
				p.SetState(437)
				p.from_item(0)
			}
			{
				p.SetState(438)
				p.Join_condition()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}
		{
			p.SetState(442)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		{
			p.SetState(444)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(445)
			p.query_expr(0)
		}
		{
			p.SetState(446)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(448)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 32, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(447)
				p.As_alias()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 4:
		{
			p.SetState(450)
			p.Unnest_operator()
		}

	case 5:
		{
			p.SetState(451)
			p.Cte_name()
		}
		p.SetState(453)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 33, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(452)
				p.As_alias()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(468)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 36, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(466)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 35, p.GetParserRuleContext()) {
			case 1:
				localctx = NewFrom_itemContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_from_item)
				p.SetState(457)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
					goto errorExit
				}
				{
					p.SetState(458)
					p.Cross_join_operator()
				}
				{
					p.SetState(459)
					p.from_item(7)
				}

			case 2:
				localctx = NewFrom_itemContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_from_item)
				p.SetState(461)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
					goto errorExit
				}
				{
					p.SetState(462)
					p.Conditional_join_operator()
				}
				{
					p.SetState(463)
					p.from_item(0)
				}
				{
					p.SetState(464)
					p.Join_condition()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(470)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 36, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnnest_operatorContext is an interface to support dynamic dispatch.
type IUnnest_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UNNEST_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	AllAs_alias() []IAs_aliasContext
	As_alias(i int) IAs_aliasContext
	WITH_SYMBOL() antlr.TerminalNode
	OFFSET_SYMBOL() antlr.TerminalNode

	// IsUnnest_operatorContext differentiates from other interfaces.
	IsUnnest_operatorContext()
}

type Unnest_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnnest_operatorContext() *Unnest_operatorContext {
	var p = new(Unnest_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unnest_operator
	return p
}

func InitEmptyUnnest_operatorContext(p *Unnest_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unnest_operator
}

func (*Unnest_operatorContext) IsUnnest_operatorContext() {}

func NewUnnest_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unnest_operatorContext {
	var p = new(Unnest_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_unnest_operator

	return p
}

func (s *Unnest_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Unnest_operatorContext) UNNEST_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNNEST_SYMBOL, 0)
}

func (s *Unnest_operatorContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Unnest_operatorContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Unnest_operatorContext) AllAs_alias() []IAs_aliasContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAs_aliasContext); ok {
			len++
		}
	}

	tst := make([]IAs_aliasContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAs_aliasContext); ok {
			tst[i] = t.(IAs_aliasContext)
			i++
		}
	}

	return tst
}

func (s *Unnest_operatorContext) As_alias(i int) IAs_aliasContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_aliasContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_aliasContext)
}

func (s *Unnest_operatorContext) WITH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWITH_SYMBOL, 0)
}

func (s *Unnest_operatorContext) OFFSET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOFFSET_SYMBOL, 0)
}

func (s *Unnest_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unnest_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unnest_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUnnest_operator(s)
	}
}

func (s *Unnest_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUnnest_operator(s)
	}
}

func (s *Unnest_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUnnest_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Unnest_operator() (localctx IUnnest_operatorContext) {
	localctx = NewUnnest_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, GoogleSQLParserRULE_unnest_operator)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(478)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserUNNEST_SYMBOL:
		{
			p.SetState(471)
			p.Match(GoogleSQLParserUNNEST_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(472)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(473)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(475)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 37, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(474)
				p.As_alias()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case GoogleSQLParserAS_SYMBOL, GoogleSQLParserQUOTED_ID, GoogleSQLParserID:
		{
			p.SetState(477)
			p.As_alias()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	p.SetState(485)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 40, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(480)
			p.Match(GoogleSQLParserWITH_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(481)
			p.Match(GoogleSQLParserOFFSET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(483)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 39, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(482)
				p.As_alias()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICross_join_operatorContext is an interface to support dynamic dispatch.
type ICross_join_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CROSS_SYMBOL() antlr.TerminalNode
	JOIN_SYMBOL() antlr.TerminalNode
	COMMA_SYMBOL() antlr.TerminalNode

	// IsCross_join_operatorContext differentiates from other interfaces.
	IsCross_join_operatorContext()
}

type Cross_join_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCross_join_operatorContext() *Cross_join_operatorContext {
	var p = new(Cross_join_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_cross_join_operator
	return p
}

func InitEmptyCross_join_operatorContext(p *Cross_join_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_cross_join_operator
}

func (*Cross_join_operatorContext) IsCross_join_operatorContext() {}

func NewCross_join_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cross_join_operatorContext {
	var p = new(Cross_join_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_cross_join_operator

	return p
}

func (s *Cross_join_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Cross_join_operatorContext) CROSS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCROSS_SYMBOL, 0)
}

func (s *Cross_join_operatorContext) JOIN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserJOIN_SYMBOL, 0)
}

func (s *Cross_join_operatorContext) COMMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, 0)
}

func (s *Cross_join_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cross_join_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cross_join_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCross_join_operator(s)
	}
}

func (s *Cross_join_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCross_join_operator(s)
	}
}

func (s *Cross_join_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCross_join_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Cross_join_operator() (localctx ICross_join_operatorContext) {
	localctx = NewCross_join_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, GoogleSQLParserRULE_cross_join_operator)
	p.SetState(490)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserCROSS_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(487)
			p.Match(GoogleSQLParserCROSS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(488)
			p.Match(GoogleSQLParserJOIN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserCOMMA_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(489)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConditional_join_operatorContext is an interface to support dynamic dispatch.
type IConditional_join_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	JOIN_SYMBOL() antlr.TerminalNode
	INNER_SYMBOL() antlr.TerminalNode
	FULL_SYMBOL() antlr.TerminalNode
	OUTER_SYMBOL() antlr.TerminalNode
	LEFT_SYMBOL() antlr.TerminalNode
	RIGHT_SYMBOL() antlr.TerminalNode

	// IsConditional_join_operatorContext differentiates from other interfaces.
	IsConditional_join_operatorContext()
}

type Conditional_join_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditional_join_operatorContext() *Conditional_join_operatorContext {
	var p = new(Conditional_join_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_conditional_join_operator
	return p
}

func InitEmptyConditional_join_operatorContext(p *Conditional_join_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_conditional_join_operator
}

func (*Conditional_join_operatorContext) IsConditional_join_operatorContext() {}

func NewConditional_join_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Conditional_join_operatorContext {
	var p = new(Conditional_join_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_conditional_join_operator

	return p
}

func (s *Conditional_join_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Conditional_join_operatorContext) JOIN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserJOIN_SYMBOL, 0)
}

func (s *Conditional_join_operatorContext) INNER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINNER_SYMBOL, 0)
}

func (s *Conditional_join_operatorContext) FULL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFULL_SYMBOL, 0)
}

func (s *Conditional_join_operatorContext) OUTER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOUTER_SYMBOL, 0)
}

func (s *Conditional_join_operatorContext) LEFT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLEFT_SYMBOL, 0)
}

func (s *Conditional_join_operatorContext) RIGHT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRIGHT_SYMBOL, 0)
}

func (s *Conditional_join_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Conditional_join_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Conditional_join_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterConditional_join_operator(s)
	}
}

func (s *Conditional_join_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitConditional_join_operator(s)
	}
}

func (s *Conditional_join_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitConditional_join_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Conditional_join_operator() (localctx IConditional_join_operatorContext) {
	localctx = NewConditional_join_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, GoogleSQLParserRULE_conditional_join_operator)
	var _la int

	p.SetState(511)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserJOIN_SYMBOL, GoogleSQLParserINNER_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(493)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserINNER_SYMBOL {
			{
				p.SetState(492)
				p.Match(GoogleSQLParserINNER_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(495)
			p.Match(GoogleSQLParserJOIN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserFULL_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(496)
			p.Match(GoogleSQLParserFULL_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(498)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserOUTER_SYMBOL {
			{
				p.SetState(497)
				p.Match(GoogleSQLParserOUTER_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(500)
			p.Match(GoogleSQLParserJOIN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserLEFT_SYMBOL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(501)
			p.Match(GoogleSQLParserLEFT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(503)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserOUTER_SYMBOL {
			{
				p.SetState(502)
				p.Match(GoogleSQLParserOUTER_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(505)
			p.Match(GoogleSQLParserJOIN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserRIGHT_SYMBOL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(506)
			p.Match(GoogleSQLParserRIGHT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(508)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == GoogleSQLParserOUTER_SYMBOL {
			{
				p.SetState(507)
				p.Match(GoogleSQLParserOUTER_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(510)
			p.Match(GoogleSQLParserJOIN_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJoin_conditionContext is an interface to support dynamic dispatch.
type IJoin_conditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	On_clause() IOn_clauseContext
	Using_clause() IUsing_clauseContext

	// IsJoin_conditionContext differentiates from other interfaces.
	IsJoin_conditionContext()
}

type Join_conditionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoin_conditionContext() *Join_conditionContext {
	var p = new(Join_conditionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_join_condition
	return p
}

func InitEmptyJoin_conditionContext(p *Join_conditionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_join_condition
}

func (*Join_conditionContext) IsJoin_conditionContext() {}

func NewJoin_conditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Join_conditionContext {
	var p = new(Join_conditionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_join_condition

	return p
}

func (s *Join_conditionContext) GetParser() antlr.Parser { return s.parser }

func (s *Join_conditionContext) On_clause() IOn_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOn_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOn_clauseContext)
}

func (s *Join_conditionContext) Using_clause() IUsing_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUsing_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUsing_clauseContext)
}

func (s *Join_conditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Join_conditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Join_conditionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterJoin_condition(s)
	}
}

func (s *Join_conditionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitJoin_condition(s)
	}
}

func (s *Join_conditionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitJoin_condition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Join_condition() (localctx IJoin_conditionContext) {
	localctx = NewJoin_conditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, GoogleSQLParserRULE_join_condition)
	p.SetState(515)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserON_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(513)
			p.On_clause()
		}

	case GoogleSQLParserUSING_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(514)
			p.Using_clause()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOn_clauseContext is an interface to support dynamic dispatch.
type IOn_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ON_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsOn_clauseContext differentiates from other interfaces.
	IsOn_clauseContext()
}

type On_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOn_clauseContext() *On_clauseContext {
	var p = new(On_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_on_clause
	return p
}

func InitEmptyOn_clauseContext(p *On_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_on_clause
}

func (*On_clauseContext) IsOn_clauseContext() {}

func NewOn_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *On_clauseContext {
	var p = new(On_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_on_clause

	return p
}

func (s *On_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *On_clauseContext) ON_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserON_SYMBOL, 0)
}

func (s *On_clauseContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *On_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *On_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *On_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOn_clause(s)
	}
}

func (s *On_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOn_clause(s)
	}
}

func (s *On_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOn_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) On_clause() (localctx IOn_clauseContext) {
	localctx = NewOn_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, GoogleSQLParserRULE_on_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(517)
		p.Match(GoogleSQLParserON_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(518)
		p.Expression()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUsing_clauseContext is an interface to support dynamic dispatch.
type IUsing_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	USING_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Column_name_list() IColumn_name_listContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsUsing_clauseContext differentiates from other interfaces.
	IsUsing_clauseContext()
}

type Using_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUsing_clauseContext() *Using_clauseContext {
	var p = new(Using_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_using_clause
	return p
}

func InitEmptyUsing_clauseContext(p *Using_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_using_clause
}

func (*Using_clauseContext) IsUsing_clauseContext() {}

func NewUsing_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Using_clauseContext {
	var p = new(Using_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_using_clause

	return p
}

func (s *Using_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Using_clauseContext) USING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUSING_SYMBOL, 0)
}

func (s *Using_clauseContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Using_clauseContext) Column_name_list() IColumn_name_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_name_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Using_clauseContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Using_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Using_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Using_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUsing_clause(s)
	}
}

func (s *Using_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUsing_clause(s)
	}
}

func (s *Using_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUsing_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Using_clause() (localctx IUsing_clauseContext) {
	localctx = NewUsing_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, GoogleSQLParserRULE_using_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(520)
		p.Match(GoogleSQLParserUSING_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(521)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(522)
		p.Column_name_list()
	}
	{
		p.SetState(523)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelect_listContext is an interface to support dynamic dispatch.
type ISelect_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllSelect_list_item() []ISelect_list_itemContext
	Select_list_item(i int) ISelect_list_itemContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsSelect_listContext differentiates from other interfaces.
	IsSelect_listContext()
}

type Select_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_listContext() *Select_listContext {
	var p = new(Select_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_list
	return p
}

func InitEmptySelect_listContext(p *Select_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_list
}

func (*Select_listContext) IsSelect_listContext() {}

func NewSelect_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_listContext {
	var p = new(Select_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_select_list

	return p
}

func (s *Select_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_listContext) AllSelect_list_item() []ISelect_list_itemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISelect_list_itemContext); ok {
			len++
		}
	}

	tst := make([]ISelect_list_itemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISelect_list_itemContext); ok {
			tst[i] = t.(ISelect_list_itemContext)
			i++
		}
	}

	return tst
}

func (s *Select_listContext) Select_list_item(i int) ISelect_list_itemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_list_itemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_list_itemContext)
}

func (s *Select_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Select_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Select_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSelect_list(s)
	}
}

func (s *Select_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSelect_list(s)
	}
}

func (s *Select_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSelect_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Select_list() (localctx ISelect_listContext) {
	localctx = NewSelect_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, GoogleSQLParserRULE_select_list)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(525)
		p.Select_list_item()
	}
	p.SetState(530)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 48, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(526)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(527)
				p.Select_list_item()
			}

		}
		p.SetState(532)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 48, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelect_list_itemContext is an interface to support dynamic dispatch.
type ISelect_list_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Select_all() ISelect_allContext
	Select_expression() ISelect_expressionContext

	// IsSelect_list_itemContext differentiates from other interfaces.
	IsSelect_list_itemContext()
}

type Select_list_itemContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_list_itemContext() *Select_list_itemContext {
	var p = new(Select_list_itemContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_list_item
	return p
}

func InitEmptySelect_list_itemContext(p *Select_list_itemContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_list_item
}

func (*Select_list_itemContext) IsSelect_list_itemContext() {}

func NewSelect_list_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_list_itemContext {
	var p = new(Select_list_itemContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_select_list_item

	return p
}

func (s *Select_list_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_list_itemContext) Select_all() ISelect_allContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_allContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_allContext)
}

func (s *Select_list_itemContext) Select_expression() ISelect_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_expressionContext)
}

func (s *Select_list_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_list_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_list_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSelect_list_item(s)
	}
}

func (s *Select_list_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSelect_list_item(s)
	}
}

func (s *Select_list_itemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSelect_list_item(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Select_list_item() (localctx ISelect_list_itemContext) {
	localctx = NewSelect_list_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, GoogleSQLParserRULE_select_list_item)
	p.SetState(535)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 49, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(533)
			p.Select_all()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(534)
			p.Select_expression()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelect_expressionContext is an interface to support dynamic dispatch.
type ISelect_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	As_alias() IAs_aliasContext

	// IsSelect_expressionContext differentiates from other interfaces.
	IsSelect_expressionContext()
}

type Select_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_expressionContext() *Select_expressionContext {
	var p = new(Select_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_expression
	return p
}

func InitEmptySelect_expressionContext(p *Select_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_expression
}

func (*Select_expressionContext) IsSelect_expressionContext() {}

func NewSelect_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_expressionContext {
	var p = new(Select_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_select_expression

	return p
}

func (s *Select_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_expressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Select_expressionContext) As_alias() IAs_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAs_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAs_aliasContext)
}

func (s *Select_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSelect_expression(s)
	}
}

func (s *Select_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSelect_expression(s)
	}
}

func (s *Select_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSelect_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Select_expression() (localctx ISelect_expressionContext) {
	localctx = NewSelect_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, GoogleSQLParserRULE_select_expression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(537)
		p.Expression()
	}
	p.SetState(539)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 50, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(538)
			p.As_alias()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelect_allContext is an interface to support dynamic dispatch.
type ISelect_allContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ASTERISK_SYMBOL() antlr.TerminalNode
	Expression() IExpressionContext
	DOT_SYMBOL() antlr.TerminalNode
	Select_all_except_clause() ISelect_all_except_clauseContext
	Select_all_replace_clause() ISelect_all_replace_clauseContext

	// IsSelect_allContext differentiates from other interfaces.
	IsSelect_allContext()
}

type Select_allContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_allContext() *Select_allContext {
	var p = new(Select_allContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_all
	return p
}

func InitEmptySelect_allContext(p *Select_allContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_all
}

func (*Select_allContext) IsSelect_allContext() {}

func NewSelect_allContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_allContext {
	var p = new(Select_allContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_select_all

	return p
}

func (s *Select_allContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_allContext) ASTERISK_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserASTERISK_SYMBOL, 0)
}

func (s *Select_allContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Select_allContext) DOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDOT_SYMBOL, 0)
}

func (s *Select_allContext) Select_all_except_clause() ISelect_all_except_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_all_except_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_all_except_clauseContext)
}

func (s *Select_allContext) Select_all_replace_clause() ISelect_all_replace_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_all_replace_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_all_replace_clauseContext)
}

func (s *Select_allContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_allContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_allContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSelect_all(s)
	}
}

func (s *Select_allContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSelect_all(s)
	}
}

func (s *Select_allContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSelect_all(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Select_all() (localctx ISelect_allContext) {
	localctx = NewSelect_allContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, GoogleSQLParserRULE_select_all)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(544)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-217298681987071998) != 0) || ((int64((_la-249)) & ^0x3f) == 0 && ((int64(1)<<(_la-249))&67341825) != 0) {
		{
			p.SetState(541)
			p.Expression()
		}
		{
			p.SetState(542)
			p.Match(GoogleSQLParserDOT_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(546)
		p.Match(GoogleSQLParserASTERISK_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(548)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 52, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(547)
			p.Select_all_except_clause()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(551)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 53, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(550)
			p.Select_all_replace_clause()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelect_all_except_clauseContext is an interface to support dynamic dispatch.
type ISelect_all_except_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EXCEPT_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Column_name_list() IColumn_name_listContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsSelect_all_except_clauseContext differentiates from other interfaces.
	IsSelect_all_except_clauseContext()
}

type Select_all_except_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_all_except_clauseContext() *Select_all_except_clauseContext {
	var p = new(Select_all_except_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_all_except_clause
	return p
}

func InitEmptySelect_all_except_clauseContext(p *Select_all_except_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_all_except_clause
}

func (*Select_all_except_clauseContext) IsSelect_all_except_clauseContext() {}

func NewSelect_all_except_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_all_except_clauseContext {
	var p = new(Select_all_except_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_select_all_except_clause

	return p
}

func (s *Select_all_except_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_all_except_clauseContext) EXCEPT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXCEPT_SYMBOL, 0)
}

func (s *Select_all_except_clauseContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Select_all_except_clauseContext) Column_name_list() IColumn_name_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_name_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Select_all_except_clauseContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Select_all_except_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_all_except_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_all_except_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSelect_all_except_clause(s)
	}
}

func (s *Select_all_except_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSelect_all_except_clause(s)
	}
}

func (s *Select_all_except_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSelect_all_except_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Select_all_except_clause() (localctx ISelect_all_except_clauseContext) {
	localctx = NewSelect_all_except_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, GoogleSQLParserRULE_select_all_except_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(553)
		p.Match(GoogleSQLParserEXCEPT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(554)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(555)
		p.Column_name_list()
	}
	{
		p.SetState(556)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelect_all_replace_clauseContext is an interface to support dynamic dispatch.
type ISelect_all_replace_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	REPLACE_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Expr_as_alias_list() IExpr_as_alias_listContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsSelect_all_replace_clauseContext differentiates from other interfaces.
	IsSelect_all_replace_clauseContext()
}

type Select_all_replace_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_all_replace_clauseContext() *Select_all_replace_clauseContext {
	var p = new(Select_all_replace_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_all_replace_clause
	return p
}

func InitEmptySelect_all_replace_clauseContext(p *Select_all_replace_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_select_all_replace_clause
}

func (*Select_all_replace_clauseContext) IsSelect_all_replace_clauseContext() {}

func NewSelect_all_replace_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_all_replace_clauseContext {
	var p = new(Select_all_replace_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_select_all_replace_clause

	return p
}

func (s *Select_all_replace_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_all_replace_clauseContext) REPLACE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPLACE_SYMBOL, 0)
}

func (s *Select_all_replace_clauseContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Select_all_replace_clauseContext) Expr_as_alias_list() IExpr_as_alias_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_as_alias_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_as_alias_listContext)
}

func (s *Select_all_replace_clauseContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Select_all_replace_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_all_replace_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_all_replace_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSelect_all_replace_clause(s)
	}
}

func (s *Select_all_replace_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSelect_all_replace_clause(s)
	}
}

func (s *Select_all_replace_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSelect_all_replace_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Select_all_replace_clause() (localctx ISelect_all_replace_clauseContext) {
	localctx = NewSelect_all_replace_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, GoogleSQLParserRULE_select_all_replace_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(558)
		p.Match(GoogleSQLParserREPLACE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(559)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(560)
		p.Expr_as_alias_list()
	}
	{
		p.SetState(561)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumn_name_listContext is an interface to support dynamic dispatch.
type IColumn_name_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllColumn_name() []IColumn_nameContext
	Column_name(i int) IColumn_nameContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsColumn_name_listContext differentiates from other interfaces.
	IsColumn_name_listContext()
}

type Column_name_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_name_listContext() *Column_name_listContext {
	var p = new(Column_name_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_column_name_list
	return p
}

func InitEmptyColumn_name_listContext(p *Column_name_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_column_name_list
}

func (*Column_name_listContext) IsColumn_name_listContext() {}

func NewColumn_name_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_name_listContext {
	var p = new(Column_name_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_column_name_list

	return p
}

func (s *Column_name_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_name_listContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Column_name_listContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Column_name_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Column_name_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Column_name_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_name_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_name_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterColumn_name_list(s)
	}
}

func (s *Column_name_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitColumn_name_list(s)
	}
}

func (s *Column_name_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitColumn_name_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Column_name_list() (localctx IColumn_name_listContext) {
	localctx = NewColumn_name_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, GoogleSQLParserRULE_column_name_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(563)
		p.Column_name()
	}
	p.SetState(568)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(564)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(565)
			p.Column_name()
		}

		p.SetState(570)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpr_as_alias_listContext is an interface to support dynamic dispatch.
type IExpr_as_alias_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllExpr_as_alias_item() []IExpr_as_alias_itemContext
	Expr_as_alias_item(i int) IExpr_as_alias_itemContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsExpr_as_alias_listContext differentiates from other interfaces.
	IsExpr_as_alias_listContext()
}

type Expr_as_alias_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpr_as_alias_listContext() *Expr_as_alias_listContext {
	var p = new(Expr_as_alias_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expr_as_alias_list
	return p
}

func InitEmptyExpr_as_alias_listContext(p *Expr_as_alias_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expr_as_alias_list
}

func (*Expr_as_alias_listContext) IsExpr_as_alias_listContext() {}

func NewExpr_as_alias_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expr_as_alias_listContext {
	var p = new(Expr_as_alias_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_expr_as_alias_list

	return p
}

func (s *Expr_as_alias_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Expr_as_alias_listContext) AllExpr_as_alias_item() []IExpr_as_alias_itemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpr_as_alias_itemContext); ok {
			len++
		}
	}

	tst := make([]IExpr_as_alias_itemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpr_as_alias_itemContext); ok {
			tst[i] = t.(IExpr_as_alias_itemContext)
			i++
		}
	}

	return tst
}

func (s *Expr_as_alias_listContext) Expr_as_alias_item(i int) IExpr_as_alias_itemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_as_alias_itemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_as_alias_itemContext)
}

func (s *Expr_as_alias_listContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Expr_as_alias_listContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Expr_as_alias_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_as_alias_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expr_as_alias_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterExpr_as_alias_list(s)
	}
}

func (s *Expr_as_alias_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitExpr_as_alias_list(s)
	}
}

func (s *Expr_as_alias_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitExpr_as_alias_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Expr_as_alias_list() (localctx IExpr_as_alias_listContext) {
	localctx = NewExpr_as_alias_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, GoogleSQLParserRULE_expr_as_alias_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(571)
		p.Expr_as_alias_item()
	}
	p.SetState(576)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(572)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(573)
			p.Expr_as_alias_item()
		}

		p.SetState(578)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpr_as_alias_itemContext is an interface to support dynamic dispatch.
type IExpr_as_alias_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	Column_name() IColumn_nameContext
	AS_SYMBOL() antlr.TerminalNode

	// IsExpr_as_alias_itemContext differentiates from other interfaces.
	IsExpr_as_alias_itemContext()
}

type Expr_as_alias_itemContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpr_as_alias_itemContext() *Expr_as_alias_itemContext {
	var p = new(Expr_as_alias_itemContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expr_as_alias_item
	return p
}

func InitEmptyExpr_as_alias_itemContext(p *Expr_as_alias_itemContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expr_as_alias_item
}

func (*Expr_as_alias_itemContext) IsExpr_as_alias_itemContext() {}

func NewExpr_as_alias_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expr_as_alias_itemContext {
	var p = new(Expr_as_alias_itemContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_expr_as_alias_item

	return p
}

func (s *Expr_as_alias_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Expr_as_alias_itemContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Expr_as_alias_itemContext) Column_name() IColumn_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Expr_as_alias_itemContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Expr_as_alias_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_as_alias_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expr_as_alias_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterExpr_as_alias_item(s)
	}
}

func (s *Expr_as_alias_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitExpr_as_alias_item(s)
	}
}

func (s *Expr_as_alias_itemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitExpr_as_alias_item(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Expr_as_alias_item() (localctx IExpr_as_alias_itemContext) {
	localctx = NewExpr_as_alias_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, GoogleSQLParserRULE_expr_as_alias_item)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(579)
		p.Expression()
	}
	p.SetState(581)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAS_SYMBOL {
		{
			p.SetState(580)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(583)
		p.Column_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAs_aliasContext is an interface to support dynamic dispatch.
type IAs_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Alias_name() IAlias_nameContext
	AS_SYMBOL() antlr.TerminalNode

	// IsAs_aliasContext differentiates from other interfaces.
	IsAs_aliasContext()
}

type As_aliasContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAs_aliasContext() *As_aliasContext {
	var p = new(As_aliasContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_as_alias
	return p
}

func InitEmptyAs_aliasContext(p *As_aliasContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_as_alias
}

func (*As_aliasContext) IsAs_aliasContext() {}

func NewAs_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *As_aliasContext {
	var p = new(As_aliasContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_as_alias

	return p
}

func (s *As_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *As_aliasContext) Alias_name() IAlias_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlias_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlias_nameContext)
}

func (s *As_aliasContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *As_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *As_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *As_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAs_alias(s)
	}
}

func (s *As_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAs_alias(s)
	}
}

func (s *As_aliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAs_alias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) As_alias() (localctx IAs_aliasContext) {
	localctx = NewAs_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, GoogleSQLParserRULE_as_alias)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(586)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserAS_SYMBOL {
		{
			p.SetState(585)
			p.Match(GoogleSQLParserAS_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(588)
		p.Alias_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDifferential_privacy_clauseContext is an interface to support dynamic dispatch.
type IDifferential_privacy_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WITH_SYMBOL() antlr.TerminalNode
	DIFFERENTIAL_PRIVACY_SYMBOL() antlr.TerminalNode
	OPTIONS_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Privacy_parameters() IPrivacy_parametersContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsDifferential_privacy_clauseContext differentiates from other interfaces.
	IsDifferential_privacy_clauseContext()
}

type Differential_privacy_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDifferential_privacy_clauseContext() *Differential_privacy_clauseContext {
	var p = new(Differential_privacy_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_differential_privacy_clause
	return p
}

func InitEmptyDifferential_privacy_clauseContext(p *Differential_privacy_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_differential_privacy_clause
}

func (*Differential_privacy_clauseContext) IsDifferential_privacy_clauseContext() {}

func NewDifferential_privacy_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Differential_privacy_clauseContext {
	var p = new(Differential_privacy_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_differential_privacy_clause

	return p
}

func (s *Differential_privacy_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Differential_privacy_clauseContext) WITH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWITH_SYMBOL, 0)
}

func (s *Differential_privacy_clauseContext) DIFFERENTIAL_PRIVACY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDIFFERENTIAL_PRIVACY_SYMBOL, 0)
}

func (s *Differential_privacy_clauseContext) OPTIONS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOPTIONS_SYMBOL, 0)
}

func (s *Differential_privacy_clauseContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Differential_privacy_clauseContext) Privacy_parameters() IPrivacy_parametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrivacy_parametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrivacy_parametersContext)
}

func (s *Differential_privacy_clauseContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Differential_privacy_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Differential_privacy_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Differential_privacy_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterDifferential_privacy_clause(s)
	}
}

func (s *Differential_privacy_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitDifferential_privacy_clause(s)
	}
}

func (s *Differential_privacy_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitDifferential_privacy_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Differential_privacy_clause() (localctx IDifferential_privacy_clauseContext) {
	localctx = NewDifferential_privacy_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, GoogleSQLParserRULE_differential_privacy_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(590)
		p.Match(GoogleSQLParserWITH_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(591)
		p.Match(GoogleSQLParserDIFFERENTIAL_PRIVACY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(592)
		p.Match(GoogleSQLParserOPTIONS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(593)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(594)
		p.Privacy_parameters()
	}
	{
		p.SetState(595)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrivacy_parametersContext is an interface to support dynamic dispatch.
type IPrivacy_parametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EPSILON_SYMBOL() antlr.TerminalNode
	AllEQUAL_SYMBOL() []antlr.TerminalNode
	EQUAL_SYMBOL(i int) antlr.TerminalNode
	AllExpression() []IExpressionContext
	Expression(i int) IExpressionContext
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode
	DELTA_SYMBOL() antlr.TerminalNode
	PRIVACY_UNIT_COLUMN_SYMBOL() antlr.TerminalNode
	MAX_GROUPS_CONTRIBUTED_SYMBOL() antlr.TerminalNode

	// IsPrivacy_parametersContext differentiates from other interfaces.
	IsPrivacy_parametersContext()
}

type Privacy_parametersContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrivacy_parametersContext() *Privacy_parametersContext {
	var p = new(Privacy_parametersContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_privacy_parameters
	return p
}

func InitEmptyPrivacy_parametersContext(p *Privacy_parametersContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_privacy_parameters
}

func (*Privacy_parametersContext) IsPrivacy_parametersContext() {}

func NewPrivacy_parametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Privacy_parametersContext {
	var p = new(Privacy_parametersContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_privacy_parameters

	return p
}

func (s *Privacy_parametersContext) GetParser() antlr.Parser { return s.parser }

func (s *Privacy_parametersContext) EPSILON_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEPSILON_SYMBOL, 0)
}

func (s *Privacy_parametersContext) AllEQUAL_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserEQUAL_SYMBOL)
}

func (s *Privacy_parametersContext) EQUAL_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEQUAL_SYMBOL, i)
}

func (s *Privacy_parametersContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *Privacy_parametersContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Privacy_parametersContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *Privacy_parametersContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *Privacy_parametersContext) DELTA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDELTA_SYMBOL, 0)
}

func (s *Privacy_parametersContext) PRIVACY_UNIT_COLUMN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPRIVACY_UNIT_COLUMN_SYMBOL, 0)
}

func (s *Privacy_parametersContext) MAX_GROUPS_CONTRIBUTED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMAX_GROUPS_CONTRIBUTED_SYMBOL, 0)
}

func (s *Privacy_parametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Privacy_parametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Privacy_parametersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPrivacy_parameters(s)
	}
}

func (s *Privacy_parametersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPrivacy_parameters(s)
	}
}

func (s *Privacy_parametersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPrivacy_parameters(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Privacy_parameters() (localctx IPrivacy_parametersContext) {
	localctx = NewPrivacy_parametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, GoogleSQLParserRULE_privacy_parameters)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(597)
		p.Match(GoogleSQLParserEPSILON_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(598)
		p.Match(GoogleSQLParserEQUAL_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(599)
		p.Expression()
	}
	{
		p.SetState(600)
		p.Match(GoogleSQLParserCOMMA_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(601)
		p.Match(GoogleSQLParserDELTA_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(602)
		p.Match(GoogleSQLParserEQUAL_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(603)
		p.Expression()
	}
	{
		p.SetState(604)
		p.Match(GoogleSQLParserCOMMA_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(610)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserMAX_GROUPS_CONTRIBUTED_SYMBOL {
		{
			p.SetState(605)
			p.Match(GoogleSQLParserMAX_GROUPS_CONTRIBUTED_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(606)
			p.Match(GoogleSQLParserEQUAL_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(607)
			p.Expression()
		}
		{
			p.SetState(608)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(612)
		p.Match(GoogleSQLParserPRIVACY_UNIT_COLUMN_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(613)
		p.Match(GoogleSQLParserEQUAL_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(614)
		p.Expression()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWith_statementContext is an interface to support dynamic dispatch.
type IWith_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WITH_SYMBOL() antlr.TerminalNode
	AllCte() []ICteContext
	Cte(i int) ICteContext
	RECURSIVE_SYMBOL() antlr.TerminalNode
	AllCOMMA_SYMBOL() []antlr.TerminalNode
	COMMA_SYMBOL(i int) antlr.TerminalNode

	// IsWith_statementContext differentiates from other interfaces.
	IsWith_statementContext()
}

type With_statementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_statementContext() *With_statementContext {
	var p = new(With_statementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_statement
	return p
}

func InitEmptyWith_statementContext(p *With_statementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_with_statement
}

func (*With_statementContext) IsWith_statementContext() {}

func NewWith_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_statementContext {
	var p = new(With_statementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_with_statement

	return p
}

func (s *With_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *With_statementContext) WITH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWITH_SYMBOL, 0)
}

func (s *With_statementContext) AllCte() []ICteContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICteContext); ok {
			len++
		}
	}

	tst := make([]ICteContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICteContext); ok {
			tst[i] = t.(ICteContext)
			i++
		}
	}

	return tst
}

func (s *With_statementContext) Cte(i int) ICteContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICteContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICteContext)
}

func (s *With_statementContext) RECURSIVE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRECURSIVE_SYMBOL, 0)
}

func (s *With_statementContext) AllCOMMA_SYMBOL() []antlr.TerminalNode {
	return s.GetTokens(GoogleSQLParserCOMMA_SYMBOL)
}

func (s *With_statementContext) COMMA_SYMBOL(i int) antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, i)
}

func (s *With_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterWith_statement(s)
	}
}

func (s *With_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitWith_statement(s)
	}
}

func (s *With_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitWith_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) With_statement() (localctx IWith_statementContext) {
	localctx = NewWith_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, GoogleSQLParserRULE_with_statement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(616)
		p.Match(GoogleSQLParserWITH_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(618)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == GoogleSQLParserRECURSIVE_SYMBOL {
		{
			p.SetState(617)
			p.Match(GoogleSQLParserRECURSIVE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(620)
		p.Cte()
	}
	p.SetState(625)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == GoogleSQLParserCOMMA_SYMBOL {
		{
			p.SetState(621)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(622)
			p.Cte()
		}

		p.SetState(627)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICteContext is an interface to support dynamic dispatch.
type ICteContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Non_recursive_cte() INon_recursive_cteContext
	Recursive_cte() IRecursive_cteContext

	// IsCteContext differentiates from other interfaces.
	IsCteContext()
}

type CteContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCteContext() *CteContext {
	var p = new(CteContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_cte
	return p
}

func InitEmptyCteContext(p *CteContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_cte
}

func (*CteContext) IsCteContext() {}

func NewCteContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CteContext {
	var p = new(CteContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_cte

	return p
}

func (s *CteContext) GetParser() antlr.Parser { return s.parser }

func (s *CteContext) Non_recursive_cte() INon_recursive_cteContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INon_recursive_cteContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INon_recursive_cteContext)
}

func (s *CteContext) Recursive_cte() IRecursive_cteContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRecursive_cteContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRecursive_cteContext)
}

func (s *CteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CteContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CteContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCte(s)
	}
}

func (s *CteContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCte(s)
	}
}

func (s *CteContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCte(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Cte() (localctx ICteContext) {
	localctx = NewCteContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, GoogleSQLParserRULE_cte)
	p.SetState(630)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 61, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(628)
			p.Non_recursive_cte()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(629)
			p.Recursive_cte()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INon_recursive_cteContext is an interface to support dynamic dispatch.
type INon_recursive_cteContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Cte_name() ICte_nameContext
	AS_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Query_expr() IQuery_exprContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsNon_recursive_cteContext differentiates from other interfaces.
	IsNon_recursive_cteContext()
}

type Non_recursive_cteContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNon_recursive_cteContext() *Non_recursive_cteContext {
	var p = new(Non_recursive_cteContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_non_recursive_cte
	return p
}

func InitEmptyNon_recursive_cteContext(p *Non_recursive_cteContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_non_recursive_cte
}

func (*Non_recursive_cteContext) IsNon_recursive_cteContext() {}

func NewNon_recursive_cteContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Non_recursive_cteContext {
	var p = new(Non_recursive_cteContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_non_recursive_cte

	return p
}

func (s *Non_recursive_cteContext) GetParser() antlr.Parser { return s.parser }

func (s *Non_recursive_cteContext) Cte_name() ICte_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICte_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICte_nameContext)
}

func (s *Non_recursive_cteContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Non_recursive_cteContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Non_recursive_cteContext) Query_expr() IQuery_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuery_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuery_exprContext)
}

func (s *Non_recursive_cteContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Non_recursive_cteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Non_recursive_cteContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Non_recursive_cteContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterNon_recursive_cte(s)
	}
}

func (s *Non_recursive_cteContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitNon_recursive_cte(s)
	}
}

func (s *Non_recursive_cteContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitNon_recursive_cte(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Non_recursive_cte() (localctx INon_recursive_cteContext) {
	localctx = NewNon_recursive_cteContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, GoogleSQLParserRULE_non_recursive_cte)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(632)
		p.Cte_name()
	}
	{
		p.SetState(633)
		p.Match(GoogleSQLParserAS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(634)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(635)
		p.query_expr(0)
	}
	{
		p.SetState(636)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRecursive_cteContext is an interface to support dynamic dispatch.
type IRecursive_cteContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Cte_name() ICte_nameContext
	AS_SYMBOL() antlr.TerminalNode
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Recursive_union_operation() IRecursive_union_operationContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode

	// IsRecursive_cteContext differentiates from other interfaces.
	IsRecursive_cteContext()
}

type Recursive_cteContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRecursive_cteContext() *Recursive_cteContext {
	var p = new(Recursive_cteContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_recursive_cte
	return p
}

func InitEmptyRecursive_cteContext(p *Recursive_cteContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_recursive_cte
}

func (*Recursive_cteContext) IsRecursive_cteContext() {}

func NewRecursive_cteContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Recursive_cteContext {
	var p = new(Recursive_cteContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_recursive_cte

	return p
}

func (s *Recursive_cteContext) GetParser() antlr.Parser { return s.parser }

func (s *Recursive_cteContext) Cte_name() ICte_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICte_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICte_nameContext)
}

func (s *Recursive_cteContext) AS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAS_SYMBOL, 0)
}

func (s *Recursive_cteContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Recursive_cteContext) Recursive_union_operation() IRecursive_union_operationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRecursive_union_operationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRecursive_union_operationContext)
}

func (s *Recursive_cteContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Recursive_cteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Recursive_cteContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Recursive_cteContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRecursive_cte(s)
	}
}

func (s *Recursive_cteContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRecursive_cte(s)
	}
}

func (s *Recursive_cteContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRecursive_cte(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Recursive_cte() (localctx IRecursive_cteContext) {
	localctx = NewRecursive_cteContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, GoogleSQLParserRULE_recursive_cte)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(638)
		p.Cte_name()
	}
	{
		p.SetState(639)
		p.Match(GoogleSQLParserAS_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(640)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(641)
		p.Recursive_union_operation()
	}
	{
		p.SetState(642)
		p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRecursive_union_operationContext is an interface to support dynamic dispatch.
type IRecursive_union_operationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Base_term() IBase_termContext
	Union_operator() IUnion_operatorContext
	Recursive_term() IRecursive_termContext

	// IsRecursive_union_operationContext differentiates from other interfaces.
	IsRecursive_union_operationContext()
}

type Recursive_union_operationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRecursive_union_operationContext() *Recursive_union_operationContext {
	var p = new(Recursive_union_operationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_recursive_union_operation
	return p
}

func InitEmptyRecursive_union_operationContext(p *Recursive_union_operationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_recursive_union_operation
}

func (*Recursive_union_operationContext) IsRecursive_union_operationContext() {}

func NewRecursive_union_operationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Recursive_union_operationContext {
	var p = new(Recursive_union_operationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_recursive_union_operation

	return p
}

func (s *Recursive_union_operationContext) GetParser() antlr.Parser { return s.parser }

func (s *Recursive_union_operationContext) Base_term() IBase_termContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBase_termContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBase_termContext)
}

func (s *Recursive_union_operationContext) Union_operator() IUnion_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnion_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnion_operatorContext)
}

func (s *Recursive_union_operationContext) Recursive_term() IRecursive_termContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRecursive_termContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRecursive_termContext)
}

func (s *Recursive_union_operationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Recursive_union_operationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Recursive_union_operationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRecursive_union_operation(s)
	}
}

func (s *Recursive_union_operationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRecursive_union_operation(s)
	}
}

func (s *Recursive_union_operationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRecursive_union_operation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Recursive_union_operation() (localctx IRecursive_union_operationContext) {
	localctx = NewRecursive_union_operationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, GoogleSQLParserRULE_recursive_union_operation)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(644)
		p.Base_term()
	}
	{
		p.SetState(645)
		p.Union_operator()
	}
	{
		p.SetState(646)
		p.Recursive_term()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBase_termContext is an interface to support dynamic dispatch.
type IBase_termContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Query_expr() IQuery_exprContext

	// IsBase_termContext differentiates from other interfaces.
	IsBase_termContext()
}

type Base_termContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBase_termContext() *Base_termContext {
	var p = new(Base_termContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_base_term
	return p
}

func InitEmptyBase_termContext(p *Base_termContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_base_term
}

func (*Base_termContext) IsBase_termContext() {}

func NewBase_termContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Base_termContext {
	var p = new(Base_termContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_base_term

	return p
}

func (s *Base_termContext) GetParser() antlr.Parser { return s.parser }

func (s *Base_termContext) Query_expr() IQuery_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuery_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuery_exprContext)
}

func (s *Base_termContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Base_termContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Base_termContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBase_term(s)
	}
}

func (s *Base_termContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBase_term(s)
	}
}

func (s *Base_termContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBase_term(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Base_term() (localctx IBase_termContext) {
	localctx = NewBase_termContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, GoogleSQLParserRULE_base_term)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(648)
		p.query_expr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnion_operatorContext is an interface to support dynamic dispatch.
type IUnion_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UNION_SYMBOL() antlr.TerminalNode
	ALL_SYMBOL() antlr.TerminalNode

	// IsUnion_operatorContext differentiates from other interfaces.
	IsUnion_operatorContext()
}

type Union_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnion_operatorContext() *Union_operatorContext {
	var p = new(Union_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_union_operator
	return p
}

func InitEmptyUnion_operatorContext(p *Union_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_union_operator
}

func (*Union_operatorContext) IsUnion_operatorContext() {}

func NewUnion_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Union_operatorContext {
	var p = new(Union_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_union_operator

	return p
}

func (s *Union_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Union_operatorContext) UNION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNION_SYMBOL, 0)
}

func (s *Union_operatorContext) ALL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserALL_SYMBOL, 0)
}

func (s *Union_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Union_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Union_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUnion_operator(s)
	}
}

func (s *Union_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUnion_operator(s)
	}
}

func (s *Union_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUnion_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Union_operator() (localctx IUnion_operatorContext) {
	localctx = NewUnion_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, GoogleSQLParserRULE_union_operator)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(650)
		p.Match(GoogleSQLParserUNION_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(651)
		p.Match(GoogleSQLParserALL_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRecursive_termContext is an interface to support dynamic dispatch.
type IRecursive_termContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Query_expr() IQuery_exprContext

	// IsRecursive_termContext differentiates from other interfaces.
	IsRecursive_termContext()
}

type Recursive_termContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRecursive_termContext() *Recursive_termContext {
	var p = new(Recursive_termContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_recursive_term
	return p
}

func InitEmptyRecursive_termContext(p *Recursive_termContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_recursive_term
}

func (*Recursive_termContext) IsRecursive_termContext() {}

func NewRecursive_termContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Recursive_termContext {
	var p = new(Recursive_termContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_recursive_term

	return p
}

func (s *Recursive_termContext) GetParser() antlr.Parser { return s.parser }

func (s *Recursive_termContext) Query_expr() IQuery_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQuery_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQuery_exprContext)
}

func (s *Recursive_termContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Recursive_termContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Recursive_termContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRecursive_term(s)
	}
}

func (s *Recursive_termContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRecursive_term(s)
	}
}

func (s *Recursive_termContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRecursive_term(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Recursive_term() (localctx IRecursive_termContext) {
	localctx = NewRecursive_termContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, GoogleSQLParserRULE_recursive_term)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(653)
		p.query_expr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression_higher_prec_than_and() IExpression_higher_prec_than_andContext

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expression
	return p
}

func InitEmptyExpressionContext(p *ExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expression
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) Expression_higher_prec_than_and() IExpression_higher_prec_than_andContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpression_higher_prec_than_andContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpression_higher_prec_than_andContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterExpression(s)
	}
}

func (s *ExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitExpression(s)
	}
}

func (s *ExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Expression() (localctx IExpressionContext) {
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, GoogleSQLParserRULE_expression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(655)
		p.Expression_higher_prec_than_and()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpression_higher_prec_than_andContext is an interface to support dynamic dispatch.
type IExpression_higher_prec_than_andContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Unparenthesized_expression_higher_prec_than_and() IUnparenthesized_expression_higher_prec_than_andContext

	// IsExpression_higher_prec_than_andContext differentiates from other interfaces.
	IsExpression_higher_prec_than_andContext()
}

type Expression_higher_prec_than_andContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_higher_prec_than_andContext() *Expression_higher_prec_than_andContext {
	var p = new(Expression_higher_prec_than_andContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expression_higher_prec_than_and
	return p
}

func InitEmptyExpression_higher_prec_than_andContext(p *Expression_higher_prec_than_andContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_expression_higher_prec_than_and
}

func (*Expression_higher_prec_than_andContext) IsExpression_higher_prec_than_andContext() {}

func NewExpression_higher_prec_than_andContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_higher_prec_than_andContext {
	var p = new(Expression_higher_prec_than_andContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_expression_higher_prec_than_and

	return p
}

func (s *Expression_higher_prec_than_andContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_higher_prec_than_andContext) Unparenthesized_expression_higher_prec_than_and() IUnparenthesized_expression_higher_prec_than_andContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnparenthesized_expression_higher_prec_than_andContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnparenthesized_expression_higher_prec_than_andContext)
}

func (s *Expression_higher_prec_than_andContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_higher_prec_than_andContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expression_higher_prec_than_andContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterExpression_higher_prec_than_and(s)
	}
}

func (s *Expression_higher_prec_than_andContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitExpression_higher_prec_than_and(s)
	}
}

func (s *Expression_higher_prec_than_andContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitExpression_higher_prec_than_and(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Expression_higher_prec_than_and() (localctx IExpression_higher_prec_than_andContext) {
	localctx = NewExpression_higher_prec_than_andContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, GoogleSQLParserRULE_expression_higher_prec_than_and)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(657)
		p.Unparenthesized_expression_higher_prec_than_and()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnparenthesized_expression_higher_prec_than_andContext is an interface to support dynamic dispatch.
type IUnparenthesized_expression_higher_prec_than_andContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NULL_SYMBOL() antlr.TerminalNode
	Boolean_literal() IBoolean_literalContext
	String_literal() IString_literalContext
	Bytes_literal() IBytes_literalContext
	Integer_literal() IInteger_literalContext
	Numeric_literal() INumeric_literalContext
	Bignumeric_literal() IBignumeric_literalContext
	Json_literal() IJson_literalContext
	Floating_point_literal() IFloating_point_literalContext
	Date_or_time_literal() IDate_or_time_literalContext
	Range_literal() IRange_literalContext
	Parameter_expression() IParameter_expressionContext
	System_variable_expression() ISystem_variable_expressionContext
	Array_constructor() IArray_constructorContext

	// IsUnparenthesized_expression_higher_prec_than_andContext differentiates from other interfaces.
	IsUnparenthesized_expression_higher_prec_than_andContext()
}

type Unparenthesized_expression_higher_prec_than_andContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnparenthesized_expression_higher_prec_than_andContext() *Unparenthesized_expression_higher_prec_than_andContext {
	var p = new(Unparenthesized_expression_higher_prec_than_andContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unparenthesized_expression_higher_prec_than_and
	return p
}

func InitEmptyUnparenthesized_expression_higher_prec_than_andContext(p *Unparenthesized_expression_higher_prec_than_andContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_unparenthesized_expression_higher_prec_than_and
}

func (*Unparenthesized_expression_higher_prec_than_andContext) IsUnparenthesized_expression_higher_prec_than_andContext() {
}

func NewUnparenthesized_expression_higher_prec_than_andContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unparenthesized_expression_higher_prec_than_andContext {
	var p = new(Unparenthesized_expression_higher_prec_than_andContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_unparenthesized_expression_higher_prec_than_and

	return p
}

func (s *Unparenthesized_expression_higher_prec_than_andContext) GetParser() antlr.Parser {
	return s.parser
}

func (s *Unparenthesized_expression_higher_prec_than_andContext) NULL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNULL_SYMBOL, 0)
}

func (s *Unparenthesized_expression_higher_prec_than_andContext) Boolean_literal() IBoolean_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBoolean_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBoolean_literalContext)
}

func (s *Unparenthesized_expression_higher_prec_than_andContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Unparenthesized_expression_higher_prec_than_andContext) Bytes_literal() IBytes_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBytes_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBytes_literalContext)
}

func (s *Unparenthesized_expression_higher_prec_than_andContext) Integer_literal() IInteger_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInteger_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInteger_literalContext)
}

func (s *Unparenthesized_expression_higher_prec_than_andContext) Numeric_literal() INumeric_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumeric_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumeric_literalContext)
}

func (s *Unparenthesized_expression_higher_prec_than_andContext) Bignumeric_literal() IBignumeric_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBignumeric_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBignumeric_literalContext)
}

func (s *Unparenthesized_expression_higher_prec_than_andContext) Json_literal() IJson_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJson_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJson_literalContext)
}

func (s *Unparenthesized_expression_higher_prec_than_andContext) Floating_point_literal() IFloating_point_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFloating_point_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFloating_point_literalContext)
}

func (s *Unparenthesized_expression_higher_prec_than_andContext) Date_or_time_literal() IDate_or_time_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDate_or_time_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDate_or_time_literalContext)
}

func (s *Unparenthesized_expression_higher_prec_than_andContext) Range_literal() IRange_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRange_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRange_literalContext)
}

func (s *Unparenthesized_expression_higher_prec_than_andContext) Parameter_expression() IParameter_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParameter_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParameter_expressionContext)
}

func (s *Unparenthesized_expression_higher_prec_than_andContext) System_variable_expression() ISystem_variable_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISystem_variable_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISystem_variable_expressionContext)
}

func (s *Unparenthesized_expression_higher_prec_than_andContext) Array_constructor() IArray_constructorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArray_constructorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArray_constructorContext)
}

func (s *Unparenthesized_expression_higher_prec_than_andContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unparenthesized_expression_higher_prec_than_andContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unparenthesized_expression_higher_prec_than_andContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterUnparenthesized_expression_higher_prec_than_and(s)
	}
}

func (s *Unparenthesized_expression_higher_prec_than_andContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitUnparenthesized_expression_higher_prec_than_and(s)
	}
}

func (s *Unparenthesized_expression_higher_prec_than_andContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitUnparenthesized_expression_higher_prec_than_and(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Unparenthesized_expression_higher_prec_than_and() (localctx IUnparenthesized_expression_higher_prec_than_andContext) {
	localctx = NewUnparenthesized_expression_higher_prec_than_andContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, GoogleSQLParserRULE_unparenthesized_expression_higher_prec_than_and)
	p.SetState(673)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserNULL_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(659)
			p.Match(GoogleSQLParserNULL_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case GoogleSQLParserTRUE_SYMBOL, GoogleSQLParserFALSE_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(660)
			p.Boolean_literal()
		}

	case GoogleSQLParserSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(661)
			p.string_literal(0)
		}

	case GoogleSQLParserBYTES_LITERAL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(662)
			p.bytes_literal(0)
		}

	case GoogleSQLParserINTEGER_LITERAL:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(663)
			p.Integer_literal()
		}

	case GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(664)
			p.Numeric_literal()
		}

	case GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(665)
			p.Bignumeric_literal()
		}

	case GoogleSQLParserJSON_SYMBOL:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(666)
			p.Json_literal()
		}

	case GoogleSQLParserFLOAT:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(667)
			p.Floating_point_literal()
		}

	case GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(668)
			p.Date_or_time_literal()
		}

	case GoogleSQLParserRANGE_SYMBOL:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(669)
			p.Range_literal()
		}

	case GoogleSQLParserQUESTION_SYMBOL, GoogleSQLParserAT_SYMBOL:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(670)
			p.Parameter_expression()
		}

	case GoogleSQLParserATAT_SYMBOL:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(671)
			p.System_variable_expression()
		}

	case GoogleSQLParserARRAY_SYMBOL, GoogleSQLParserLS_BRACKET_SYMBOL:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(672)
			p.Array_constructor()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArray_constructorContext is an interface to support dynamic dispatch.
type IArray_constructorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Array_constructor_prefix_no_expressions() IArray_constructor_prefix_no_expressionsContext
	RS_BRACKET_SYMBOL() antlr.TerminalNode
	Array_constructor_prefix() IArray_constructor_prefixContext

	// IsArray_constructorContext differentiates from other interfaces.
	IsArray_constructorContext()
}

type Array_constructorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArray_constructorContext() *Array_constructorContext {
	var p = new(Array_constructorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_array_constructor
	return p
}

func InitEmptyArray_constructorContext(p *Array_constructorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_array_constructor
}

func (*Array_constructorContext) IsArray_constructorContext() {}

func NewArray_constructorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_constructorContext {
	var p = new(Array_constructorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_array_constructor

	return p
}

func (s *Array_constructorContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_constructorContext) Array_constructor_prefix_no_expressions() IArray_constructor_prefix_no_expressionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArray_constructor_prefix_no_expressionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArray_constructor_prefix_no_expressionsContext)
}

func (s *Array_constructorContext) RS_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRS_BRACKET_SYMBOL, 0)
}

func (s *Array_constructorContext) Array_constructor_prefix() IArray_constructor_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArray_constructor_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArray_constructor_prefixContext)
}

func (s *Array_constructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_constructorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Array_constructorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterArray_constructor(s)
	}
}

func (s *Array_constructorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitArray_constructor(s)
	}
}

func (s *Array_constructorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitArray_constructor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Array_constructor() (localctx IArray_constructorContext) {
	localctx = NewArray_constructorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, GoogleSQLParserRULE_array_constructor)
	p.SetState(681)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 63, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(675)
			p.Array_constructor_prefix_no_expressions()
		}
		{
			p.SetState(676)
			p.Match(GoogleSQLParserRS_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(678)
			p.array_constructor_prefix(0)
		}
		{
			p.SetState(679)
			p.Match(GoogleSQLParserRS_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArray_constructor_prefixContext is an interface to support dynamic dispatch.
type IArray_constructor_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Array_constructor_prefix_no_expressions() IArray_constructor_prefix_no_expressionsContext
	Expression() IExpressionContext
	Array_constructor_prefix() IArray_constructor_prefixContext
	COMMA_SYMBOL() antlr.TerminalNode

	// IsArray_constructor_prefixContext differentiates from other interfaces.
	IsArray_constructor_prefixContext()
}

type Array_constructor_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArray_constructor_prefixContext() *Array_constructor_prefixContext {
	var p = new(Array_constructor_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_array_constructor_prefix
	return p
}

func InitEmptyArray_constructor_prefixContext(p *Array_constructor_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_array_constructor_prefix
}

func (*Array_constructor_prefixContext) IsArray_constructor_prefixContext() {}

func NewArray_constructor_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_constructor_prefixContext {
	var p = new(Array_constructor_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_array_constructor_prefix

	return p
}

func (s *Array_constructor_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_constructor_prefixContext) Array_constructor_prefix_no_expressions() IArray_constructor_prefix_no_expressionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArray_constructor_prefix_no_expressionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArray_constructor_prefix_no_expressionsContext)
}

func (s *Array_constructor_prefixContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Array_constructor_prefixContext) Array_constructor_prefix() IArray_constructor_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArray_constructor_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArray_constructor_prefixContext)
}

func (s *Array_constructor_prefixContext) COMMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, 0)
}

func (s *Array_constructor_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_constructor_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Array_constructor_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterArray_constructor_prefix(s)
	}
}

func (s *Array_constructor_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitArray_constructor_prefix(s)
	}
}

func (s *Array_constructor_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitArray_constructor_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Array_constructor_prefix() (localctx IArray_constructor_prefixContext) {
	return p.array_constructor_prefix(0)
}

func (p *GoogleSQLParser) array_constructor_prefix(_p int) (localctx IArray_constructor_prefixContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewArray_constructor_prefixContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IArray_constructor_prefixContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 114
	p.EnterRecursionRule(localctx, 114, GoogleSQLParserRULE_array_constructor_prefix, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(684)
		p.Array_constructor_prefix_no_expressions()
	}
	{
		p.SetState(685)
		p.Expression()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(692)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 64, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewArray_constructor_prefixContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_array_constructor_prefix)
			p.SetState(687)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				goto errorExit
			}
			{
				p.SetState(688)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(689)
				p.Expression()
			}

		}
		p.SetState(694)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 64, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArray_constructor_prefix_no_expressionsContext is an interface to support dynamic dispatch.
type IArray_constructor_prefix_no_expressionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ARRAY_SYMBOL() antlr.TerminalNode
	LS_BRACKET_SYMBOL() antlr.TerminalNode
	Array_type() IArray_typeContext

	// IsArray_constructor_prefix_no_expressionsContext differentiates from other interfaces.
	IsArray_constructor_prefix_no_expressionsContext()
}

type Array_constructor_prefix_no_expressionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArray_constructor_prefix_no_expressionsContext() *Array_constructor_prefix_no_expressionsContext {
	var p = new(Array_constructor_prefix_no_expressionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_array_constructor_prefix_no_expressions
	return p
}

func InitEmptyArray_constructor_prefix_no_expressionsContext(p *Array_constructor_prefix_no_expressionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_array_constructor_prefix_no_expressions
}

func (*Array_constructor_prefix_no_expressionsContext) IsArray_constructor_prefix_no_expressionsContext() {
}

func NewArray_constructor_prefix_no_expressionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_constructor_prefix_no_expressionsContext {
	var p = new(Array_constructor_prefix_no_expressionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_array_constructor_prefix_no_expressions

	return p
}

func (s *Array_constructor_prefix_no_expressionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_constructor_prefix_no_expressionsContext) ARRAY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserARRAY_SYMBOL, 0)
}

func (s *Array_constructor_prefix_no_expressionsContext) LS_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLS_BRACKET_SYMBOL, 0)
}

func (s *Array_constructor_prefix_no_expressionsContext) Array_type() IArray_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArray_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArray_typeContext)
}

func (s *Array_constructor_prefix_no_expressionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_constructor_prefix_no_expressionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Array_constructor_prefix_no_expressionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterArray_constructor_prefix_no_expressions(s)
	}
}

func (s *Array_constructor_prefix_no_expressionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitArray_constructor_prefix_no_expressions(s)
	}
}

func (s *Array_constructor_prefix_no_expressionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitArray_constructor_prefix_no_expressions(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Array_constructor_prefix_no_expressions() (localctx IArray_constructor_prefix_no_expressionsContext) {
	localctx = NewArray_constructor_prefix_no_expressionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, GoogleSQLParserRULE_array_constructor_prefix_no_expressions)
	p.SetState(699)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 65, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(695)
			p.Match(GoogleSQLParserARRAY_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(696)
			p.Match(GoogleSQLParserLS_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(697)
			p.Match(GoogleSQLParserLS_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(698)
			p.Array_type()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRange_literalContext is an interface to support dynamic dispatch.
type IRange_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Range_type() IRange_typeContext
	String_literal() IString_literalContext

	// IsRange_literalContext differentiates from other interfaces.
	IsRange_literalContext()
}

type Range_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRange_literalContext() *Range_literalContext {
	var p = new(Range_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_range_literal
	return p
}

func InitEmptyRange_literalContext(p *Range_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_range_literal
}

func (*Range_literalContext) IsRange_literalContext() {}

func NewRange_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Range_literalContext {
	var p = new(Range_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_range_literal

	return p
}

func (s *Range_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Range_literalContext) Range_type() IRange_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRange_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRange_typeContext)
}

func (s *Range_literalContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Range_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Range_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Range_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRange_literal(s)
	}
}

func (s *Range_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRange_literal(s)
	}
}

func (s *Range_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRange_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Range_literal() (localctx IRange_literalContext) {
	localctx = NewRange_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, GoogleSQLParserRULE_range_literal)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(701)
		p.Range_type()
	}
	{
		p.SetState(702)
		p.string_literal(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRange_typeContext is an interface to support dynamic dispatch.
type IRange_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RANGE_SYMBOL() antlr.TerminalNode
	Template_type_open() ITemplate_type_openContext
	Type_() ITypeContext
	Template_type_close() ITemplate_type_closeContext

	// IsRange_typeContext differentiates from other interfaces.
	IsRange_typeContext()
}

type Range_typeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRange_typeContext() *Range_typeContext {
	var p = new(Range_typeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_range_type
	return p
}

func InitEmptyRange_typeContext(p *Range_typeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_range_type
}

func (*Range_typeContext) IsRange_typeContext() {}

func NewRange_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Range_typeContext {
	var p = new(Range_typeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_range_type

	return p
}

func (s *Range_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Range_typeContext) RANGE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRANGE_SYMBOL, 0)
}

func (s *Range_typeContext) Template_type_open() ITemplate_type_openContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_openContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_openContext)
}

func (s *Range_typeContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Range_typeContext) Template_type_close() ITemplate_type_closeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_closeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_closeContext)
}

func (s *Range_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Range_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Range_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRange_type(s)
	}
}

func (s *Range_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRange_type(s)
	}
}

func (s *Range_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRange_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Range_type() (localctx IRange_typeContext) {
	localctx = NewRange_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, GoogleSQLParserRULE_range_type)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(704)
		p.Match(GoogleSQLParserRANGE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(705)
		p.Template_type_open()
	}
	{
		p.SetState(706)
		p.Type_()
	}
	{
		p.SetState(707)
		p.Template_type_close()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeContext is an interface to support dynamic dispatch.
type ITypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Raw_type() IRaw_typeContext
	Opt_type_parameters() IOpt_type_parametersContext
	Collate_clause() ICollate_clauseContext

	// IsTypeContext differentiates from other interfaces.
	IsTypeContext()
}

type TypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeContext() *TypeContext {
	var p = new(TypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_type
	return p
}

func InitEmptyTypeContext(p *TypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_type
}

func (*TypeContext) IsTypeContext() {}

func NewTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeContext {
	var p = new(TypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_type

	return p
}

func (s *TypeContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeContext) Raw_type() IRaw_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRaw_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRaw_typeContext)
}

func (s *TypeContext) Opt_type_parameters() IOpt_type_parametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpt_type_parametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpt_type_parametersContext)
}

func (s *TypeContext) Collate_clause() ICollate_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollate_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollate_clauseContext)
}

func (s *TypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterType(s)
	}
}

func (s *TypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitType(s)
	}
}

func (s *TypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Type_() (localctx ITypeContext) {
	localctx = NewTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, GoogleSQLParserRULE_type)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(709)
		p.Raw_type()
	}
	p.SetState(711)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 66, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(710)
			p.Opt_type_parameters()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(714)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 67, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(713)
			p.Collate_clause()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICollate_clauseContext is an interface to support dynamic dispatch.
type ICollate_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	COLLATE_SYMBOL() antlr.TerminalNode
	String_literal_or_parameter() IString_literal_or_parameterContext

	// IsCollate_clauseContext differentiates from other interfaces.
	IsCollate_clauseContext()
}

type Collate_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCollate_clauseContext() *Collate_clauseContext {
	var p = new(Collate_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_collate_clause
	return p
}

func InitEmptyCollate_clauseContext(p *Collate_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_collate_clause
}

func (*Collate_clauseContext) IsCollate_clauseContext() {}

func NewCollate_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Collate_clauseContext {
	var p = new(Collate_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_collate_clause

	return p
}

func (s *Collate_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Collate_clauseContext) COLLATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOLLATE_SYMBOL, 0)
}

func (s *Collate_clauseContext) String_literal_or_parameter() IString_literal_or_parameterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literal_or_parameterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literal_or_parameterContext)
}

func (s *Collate_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Collate_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Collate_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCollate_clause(s)
	}
}

func (s *Collate_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCollate_clause(s)
	}
}

func (s *Collate_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCollate_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Collate_clause() (localctx ICollate_clauseContext) {
	localctx = NewCollate_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, GoogleSQLParserRULE_collate_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(716)
		p.Match(GoogleSQLParserCOLLATE_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(717)
		p.String_literal_or_parameter()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IString_literal_or_parameterContext is an interface to support dynamic dispatch.
type IString_literal_or_parameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	String_literal() IString_literalContext
	Parameter_expression() IParameter_expressionContext
	System_variable_expression() ISystem_variable_expressionContext

	// IsString_literal_or_parameterContext differentiates from other interfaces.
	IsString_literal_or_parameterContext()
}

type String_literal_or_parameterContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyString_literal_or_parameterContext() *String_literal_or_parameterContext {
	var p = new(String_literal_or_parameterContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_string_literal_or_parameter
	return p
}

func InitEmptyString_literal_or_parameterContext(p *String_literal_or_parameterContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_string_literal_or_parameter
}

func (*String_literal_or_parameterContext) IsString_literal_or_parameterContext() {}

func NewString_literal_or_parameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *String_literal_or_parameterContext {
	var p = new(String_literal_or_parameterContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_string_literal_or_parameter

	return p
}

func (s *String_literal_or_parameterContext) GetParser() antlr.Parser { return s.parser }

func (s *String_literal_or_parameterContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *String_literal_or_parameterContext) Parameter_expression() IParameter_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParameter_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParameter_expressionContext)
}

func (s *String_literal_or_parameterContext) System_variable_expression() ISystem_variable_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISystem_variable_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISystem_variable_expressionContext)
}

func (s *String_literal_or_parameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *String_literal_or_parameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *String_literal_or_parameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterString_literal_or_parameter(s)
	}
}

func (s *String_literal_or_parameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitString_literal_or_parameter(s)
	}
}

func (s *String_literal_or_parameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitString_literal_or_parameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) String_literal_or_parameter() (localctx IString_literal_or_parameterContext) {
	localctx = NewString_literal_or_parameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, GoogleSQLParserRULE_string_literal_or_parameter)
	p.SetState(722)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(719)
			p.string_literal(0)
		}

	case GoogleSQLParserQUESTION_SYMBOL, GoogleSQLParserAT_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(720)
			p.Parameter_expression()
		}

	case GoogleSQLParserATAT_SYMBOL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(721)
			p.System_variable_expression()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISystem_variable_expressionContext is an interface to support dynamic dispatch.
type ISystem_variable_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ATAT_SYMBOL() antlr.TerminalNode
	Path_expression() IPath_expressionContext

	// IsSystem_variable_expressionContext differentiates from other interfaces.
	IsSystem_variable_expressionContext()
}

type System_variable_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySystem_variable_expressionContext() *System_variable_expressionContext {
	var p = new(System_variable_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_system_variable_expression
	return p
}

func InitEmptySystem_variable_expressionContext(p *System_variable_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_system_variable_expression
}

func (*System_variable_expressionContext) IsSystem_variable_expressionContext() {}

func NewSystem_variable_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *System_variable_expressionContext {
	var p = new(System_variable_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_system_variable_expression

	return p
}

func (s *System_variable_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *System_variable_expressionContext) ATAT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserATAT_SYMBOL, 0)
}

func (s *System_variable_expressionContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *System_variable_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *System_variable_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *System_variable_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSystem_variable_expression(s)
	}
}

func (s *System_variable_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSystem_variable_expression(s)
	}
}

func (s *System_variable_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSystem_variable_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) System_variable_expression() (localctx ISystem_variable_expressionContext) {
	localctx = NewSystem_variable_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, GoogleSQLParserRULE_system_variable_expression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(724)
		p.Match(GoogleSQLParserATAT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(725)
		p.path_expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IParameter_expressionContext is an interface to support dynamic dispatch.
type IParameter_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Named_parameter_expression() INamed_parameter_expressionContext
	QUESTION_SYMBOL() antlr.TerminalNode

	// IsParameter_expressionContext differentiates from other interfaces.
	IsParameter_expressionContext()
}

type Parameter_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameter_expressionContext() *Parameter_expressionContext {
	var p = new(Parameter_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_parameter_expression
	return p
}

func InitEmptyParameter_expressionContext(p *Parameter_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_parameter_expression
}

func (*Parameter_expressionContext) IsParameter_expressionContext() {}

func NewParameter_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parameter_expressionContext {
	var p = new(Parameter_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_parameter_expression

	return p
}

func (s *Parameter_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Parameter_expressionContext) Named_parameter_expression() INamed_parameter_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamed_parameter_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamed_parameter_expressionContext)
}

func (s *Parameter_expressionContext) QUESTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserQUESTION_SYMBOL, 0)
}

func (s *Parameter_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parameter_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Parameter_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterParameter_expression(s)
	}
}

func (s *Parameter_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitParameter_expression(s)
	}
}

func (s *Parameter_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitParameter_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Parameter_expression() (localctx IParameter_expressionContext) {
	localctx = NewParameter_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, GoogleSQLParserRULE_parameter_expression)
	p.SetState(729)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserAT_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(727)
			p.Named_parameter_expression()
		}

	case GoogleSQLParserQUESTION_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(728)
			p.Match(GoogleSQLParserQUESTION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INamed_parameter_expressionContext is an interface to support dynamic dispatch.
type INamed_parameter_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AT_SYMBOL() antlr.TerminalNode
	Identifier() IIdentifierContext

	// IsNamed_parameter_expressionContext differentiates from other interfaces.
	IsNamed_parameter_expressionContext()
}

type Named_parameter_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamed_parameter_expressionContext() *Named_parameter_expressionContext {
	var p = new(Named_parameter_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_named_parameter_expression
	return p
}

func InitEmptyNamed_parameter_expressionContext(p *Named_parameter_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_named_parameter_expression
}

func (*Named_parameter_expressionContext) IsNamed_parameter_expressionContext() {}

func NewNamed_parameter_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Named_parameter_expressionContext {
	var p = new(Named_parameter_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_named_parameter_expression

	return p
}

func (s *Named_parameter_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Named_parameter_expressionContext) AT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAT_SYMBOL, 0)
}

func (s *Named_parameter_expressionContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Named_parameter_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Named_parameter_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Named_parameter_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterNamed_parameter_expression(s)
	}
}

func (s *Named_parameter_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitNamed_parameter_expression(s)
	}
}

func (s *Named_parameter_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitNamed_parameter_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Named_parameter_expression() (localctx INamed_parameter_expressionContext) {
	localctx = NewNamed_parameter_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, GoogleSQLParserRULE_named_parameter_expression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(731)
		p.Match(GoogleSQLParserAT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(732)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpt_type_parametersContext is an interface to support dynamic dispatch.
type IOpt_type_parametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Type_parameters_prefix() IType_parameters_prefixContext
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	COMMA_SYMBOL() antlr.TerminalNode

	// IsOpt_type_parametersContext differentiates from other interfaces.
	IsOpt_type_parametersContext()
}

type Opt_type_parametersContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpt_type_parametersContext() *Opt_type_parametersContext {
	var p = new(Opt_type_parametersContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_type_parameters
	return p
}

func InitEmptyOpt_type_parametersContext(p *Opt_type_parametersContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_opt_type_parameters
}

func (*Opt_type_parametersContext) IsOpt_type_parametersContext() {}

func NewOpt_type_parametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Opt_type_parametersContext {
	var p = new(Opt_type_parametersContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_opt_type_parameters

	return p
}

func (s *Opt_type_parametersContext) GetParser() antlr.Parser { return s.parser }

func (s *Opt_type_parametersContext) Type_parameters_prefix() IType_parameters_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_parameters_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_parameters_prefixContext)
}

func (s *Opt_type_parametersContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Opt_type_parametersContext) COMMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, 0)
}

func (s *Opt_type_parametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Opt_type_parametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Opt_type_parametersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterOpt_type_parameters(s)
	}
}

func (s *Opt_type_parametersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitOpt_type_parameters(s)
	}
}

func (s *Opt_type_parametersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitOpt_type_parameters(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Opt_type_parameters() (localctx IOpt_type_parametersContext) {
	localctx = NewOpt_type_parametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, GoogleSQLParserRULE_opt_type_parameters)
	p.SetState(742)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 70, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(734)
			p.type_parameters_prefix(0)
		}
		{
			p.SetState(735)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(737)
			p.type_parameters_prefix(0)
		}
		{
			p.SetState(738)
			p.Match(GoogleSQLParserCOMMA_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(739)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.NotifyErrorListeners("Syntax error: Trailing comma in type parameters list is not allowed.", nil, nil)

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IType_parameters_prefixContext is an interface to support dynamic dispatch.
type IType_parameters_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Type_parameter() IType_parameterContext
	Type_parameters_prefix() IType_parameters_prefixContext
	COMMA_SYMBOL() antlr.TerminalNode

	// IsType_parameters_prefixContext differentiates from other interfaces.
	IsType_parameters_prefixContext()
}

type Type_parameters_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_parameters_prefixContext() *Type_parameters_prefixContext {
	var p = new(Type_parameters_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_type_parameters_prefix
	return p
}

func InitEmptyType_parameters_prefixContext(p *Type_parameters_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_type_parameters_prefix
}

func (*Type_parameters_prefixContext) IsType_parameters_prefixContext() {}

func NewType_parameters_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_parameters_prefixContext {
	var p = new(Type_parameters_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_type_parameters_prefix

	return p
}

func (s *Type_parameters_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_parameters_prefixContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Type_parameters_prefixContext) Type_parameter() IType_parameterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_parameterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_parameterContext)
}

func (s *Type_parameters_prefixContext) Type_parameters_prefix() IType_parameters_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_parameters_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_parameters_prefixContext)
}

func (s *Type_parameters_prefixContext) COMMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, 0)
}

func (s *Type_parameters_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_parameters_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_parameters_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterType_parameters_prefix(s)
	}
}

func (s *Type_parameters_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitType_parameters_prefix(s)
	}
}

func (s *Type_parameters_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitType_parameters_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Type_parameters_prefix() (localctx IType_parameters_prefixContext) {
	return p.type_parameters_prefix(0)
}

func (p *GoogleSQLParser) type_parameters_prefix(_p int) (localctx IType_parameters_prefixContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewType_parameters_prefixContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IType_parameters_prefixContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 136
	p.EnterRecursionRule(localctx, 136, GoogleSQLParserRULE_type_parameters_prefix, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(745)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(746)
		p.Type_parameter()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(753)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 71, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewType_parameters_prefixContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_type_parameters_prefix)
			p.SetState(748)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				goto errorExit
			}
			{
				p.SetState(749)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(750)
				p.Type_parameter()
			}

		}
		p.SetState(755)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 71, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IType_parameterContext is an interface to support dynamic dispatch.
type IType_parameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Integer_literal() IInteger_literalContext
	Boolean_literal() IBoolean_literalContext
	String_literal() IString_literalContext
	Bytes_literal() IBytes_literalContext
	Floating_point_literal() IFloating_point_literalContext
	MAX_SYMBOL() antlr.TerminalNode

	// IsType_parameterContext differentiates from other interfaces.
	IsType_parameterContext()
}

type Type_parameterContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_parameterContext() *Type_parameterContext {
	var p = new(Type_parameterContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_type_parameter
	return p
}

func InitEmptyType_parameterContext(p *Type_parameterContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_type_parameter
}

func (*Type_parameterContext) IsType_parameterContext() {}

func NewType_parameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_parameterContext {
	var p = new(Type_parameterContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_type_parameter

	return p
}

func (s *Type_parameterContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_parameterContext) Integer_literal() IInteger_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInteger_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInteger_literalContext)
}

func (s *Type_parameterContext) Boolean_literal() IBoolean_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBoolean_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBoolean_literalContext)
}

func (s *Type_parameterContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Type_parameterContext) Bytes_literal() IBytes_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBytes_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBytes_literalContext)
}

func (s *Type_parameterContext) Floating_point_literal() IFloating_point_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFloating_point_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFloating_point_literalContext)
}

func (s *Type_parameterContext) MAX_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMAX_SYMBOL, 0)
}

func (s *Type_parameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_parameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_parameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterType_parameter(s)
	}
}

func (s *Type_parameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitType_parameter(s)
	}
}

func (s *Type_parameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitType_parameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Type_parameter() (localctx IType_parameterContext) {
	localctx = NewType_parameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, GoogleSQLParserRULE_type_parameter)
	p.SetState(762)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINTEGER_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(756)
			p.Integer_literal()
		}

	case GoogleSQLParserTRUE_SYMBOL, GoogleSQLParserFALSE_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(757)
			p.Boolean_literal()
		}

	case GoogleSQLParserSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(758)
			p.string_literal(0)
		}

	case GoogleSQLParserBYTES_LITERAL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(759)
			p.bytes_literal(0)
		}

	case GoogleSQLParserFLOAT:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(760)
			p.Floating_point_literal()
		}

	case GoogleSQLParserMAX_SYMBOL:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(761)
			p.Match(GoogleSQLParserMAX_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRaw_typeContext is an interface to support dynamic dispatch.
type IRaw_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Array_type() IArray_typeContext
	Struct_type() IStruct_typeContext
	Type_name() IType_nameContext
	Range_type() IRange_typeContext
	Function_type() IFunction_typeContext
	Map_type() IMap_typeContext

	// IsRaw_typeContext differentiates from other interfaces.
	IsRaw_typeContext()
}

type Raw_typeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRaw_typeContext() *Raw_typeContext {
	var p = new(Raw_typeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_raw_type
	return p
}

func InitEmptyRaw_typeContext(p *Raw_typeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_raw_type
}

func (*Raw_typeContext) IsRaw_typeContext() {}

func NewRaw_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Raw_typeContext {
	var p = new(Raw_typeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_raw_type

	return p
}

func (s *Raw_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Raw_typeContext) Array_type() IArray_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArray_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArray_typeContext)
}

func (s *Raw_typeContext) Struct_type() IStruct_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStruct_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStruct_typeContext)
}

func (s *Raw_typeContext) Type_name() IType_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_nameContext)
}

func (s *Raw_typeContext) Range_type() IRange_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRange_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRange_typeContext)
}

func (s *Raw_typeContext) Function_type() IFunction_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunction_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunction_typeContext)
}

func (s *Raw_typeContext) Map_type() IMap_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMap_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMap_typeContext)
}

func (s *Raw_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Raw_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Raw_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterRaw_type(s)
	}
}

func (s *Raw_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitRaw_type(s)
	}
}

func (s *Raw_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitRaw_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Raw_type() (localctx IRaw_typeContext) {
	localctx = NewRaw_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, GoogleSQLParserRULE_raw_type)
	p.SetState(770)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 73, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(764)
			p.Array_type()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(765)
			p.Struct_type()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(766)
			p.Type_name()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(767)
			p.Range_type()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(768)
			p.Function_type()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(769)
			p.Map_type()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMap_typeContext is an interface to support dynamic dispatch.
type IMap_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetKey_type returns the key_type rule contexts.
	GetKey_type() ITypeContext

	// GetValue_type returns the value_type rule contexts.
	GetValue_type() ITypeContext

	// SetKey_type sets the key_type rule contexts.
	SetKey_type(ITypeContext)

	// SetValue_type sets the value_type rule contexts.
	SetValue_type(ITypeContext)

	// Getter signatures
	MAP_SYMBOL() antlr.TerminalNode
	Template_type_open() ITemplate_type_openContext
	COMMA_SYMBOL() antlr.TerminalNode
	Template_type_close() ITemplate_type_closeContext
	AllType_() []ITypeContext
	Type_(i int) ITypeContext

	// IsMap_typeContext differentiates from other interfaces.
	IsMap_typeContext()
}

type Map_typeContext struct {
	antlr.BaseParserRuleContext
	parser     antlr.Parser
	key_type   ITypeContext
	value_type ITypeContext
}

func NewEmptyMap_typeContext() *Map_typeContext {
	var p = new(Map_typeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_map_type
	return p
}

func InitEmptyMap_typeContext(p *Map_typeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_map_type
}

func (*Map_typeContext) IsMap_typeContext() {}

func NewMap_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Map_typeContext {
	var p = new(Map_typeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_map_type

	return p
}

func (s *Map_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Map_typeContext) GetKey_type() ITypeContext { return s.key_type }

func (s *Map_typeContext) GetValue_type() ITypeContext { return s.value_type }

func (s *Map_typeContext) SetKey_type(v ITypeContext) { s.key_type = v }

func (s *Map_typeContext) SetValue_type(v ITypeContext) { s.value_type = v }

func (s *Map_typeContext) MAP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMAP_SYMBOL, 0)
}

func (s *Map_typeContext) Template_type_open() ITemplate_type_openContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_openContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_openContext)
}

func (s *Map_typeContext) COMMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, 0)
}

func (s *Map_typeContext) Template_type_close() ITemplate_type_closeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_closeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_closeContext)
}

func (s *Map_typeContext) AllType_() []ITypeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeContext); ok {
			len++
		}
	}

	tst := make([]ITypeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeContext); ok {
			tst[i] = t.(ITypeContext)
			i++
		}
	}

	return tst
}

func (s *Map_typeContext) Type_(i int) ITypeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Map_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Map_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Map_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterMap_type(s)
	}
}

func (s *Map_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitMap_type(s)
	}
}

func (s *Map_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitMap_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Map_type() (localctx IMap_typeContext) {
	localctx = NewMap_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, GoogleSQLParserRULE_map_type)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(772)
		p.Match(GoogleSQLParserMAP_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(773)
		p.Template_type_open()
	}
	{
		p.SetState(774)

		var _x = p.Type_()

		localctx.(*Map_typeContext).key_type = _x
	}
	{
		p.SetState(775)
		p.Match(GoogleSQLParserCOMMA_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(776)

		var _x = p.Type_()

		localctx.(*Map_typeContext).value_type = _x
	}
	{
		p.SetState(777)
		p.Template_type_close()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunction_typeContext is an interface to support dynamic dispatch.
type IFunction_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetReturn_type returns the return_type rule contexts.
	GetReturn_type() ITypeContext

	// GetArg_type returns the arg_type rule contexts.
	GetArg_type() ITypeContext

	// GetArg_list returns the arg_list rule contexts.
	GetArg_list() IFunction_type_prefixContext

	// SetReturn_type sets the return_type rule contexts.
	SetReturn_type(ITypeContext)

	// SetArg_type sets the arg_type rule contexts.
	SetArg_type(ITypeContext)

	// SetArg_list sets the arg_list rule contexts.
	SetArg_list(IFunction_type_prefixContext)

	// Getter signatures
	FUNCTION_SYMBOL() antlr.TerminalNode
	Template_type_open() ITemplate_type_openContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	RR_BRACKET_SYMBOL() antlr.TerminalNode
	FUNCTION_RETURN() antlr.TerminalNode
	Template_type_close() ITemplate_type_closeContext
	AllType_() []ITypeContext
	Type_(i int) ITypeContext
	Function_type_prefix() IFunction_type_prefixContext

	// IsFunction_typeContext differentiates from other interfaces.
	IsFunction_typeContext()
}

type Function_typeContext struct {
	antlr.BaseParserRuleContext
	parser      antlr.Parser
	return_type ITypeContext
	arg_type    ITypeContext
	arg_list    IFunction_type_prefixContext
}

func NewEmptyFunction_typeContext() *Function_typeContext {
	var p = new(Function_typeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_type
	return p
}

func InitEmptyFunction_typeContext(p *Function_typeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_type
}

func (*Function_typeContext) IsFunction_typeContext() {}

func NewFunction_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_typeContext {
	var p = new(Function_typeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_function_type

	return p
}

func (s *Function_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_typeContext) GetReturn_type() ITypeContext { return s.return_type }

func (s *Function_typeContext) GetArg_type() ITypeContext { return s.arg_type }

func (s *Function_typeContext) GetArg_list() IFunction_type_prefixContext { return s.arg_list }

func (s *Function_typeContext) SetReturn_type(v ITypeContext) { s.return_type = v }

func (s *Function_typeContext) SetArg_type(v ITypeContext) { s.arg_type = v }

func (s *Function_typeContext) SetArg_list(v IFunction_type_prefixContext) { s.arg_list = v }

func (s *Function_typeContext) FUNCTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFUNCTION_SYMBOL, 0)
}

func (s *Function_typeContext) Template_type_open() ITemplate_type_openContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_openContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_openContext)
}

func (s *Function_typeContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Function_typeContext) RR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRR_BRACKET_SYMBOL, 0)
}

func (s *Function_typeContext) FUNCTION_RETURN() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFUNCTION_RETURN, 0)
}

func (s *Function_typeContext) Template_type_close() ITemplate_type_closeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_closeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_closeContext)
}

func (s *Function_typeContext) AllType_() []ITypeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeContext); ok {
			len++
		}
	}

	tst := make([]ITypeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeContext); ok {
			tst[i] = t.(ITypeContext)
			i++
		}
	}

	return tst
}

func (s *Function_typeContext) Type_(i int) ITypeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Function_typeContext) Function_type_prefix() IFunction_type_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunction_type_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunction_type_prefixContext)
}

func (s *Function_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFunction_type(s)
	}
}

func (s *Function_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFunction_type(s)
	}
}

func (s *Function_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFunction_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Function_type() (localctx IFunction_typeContext) {
	localctx = NewFunction_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, GoogleSQLParserRULE_function_type)
	p.SetState(800)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 74, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(779)
			p.Match(GoogleSQLParserFUNCTION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(780)
			p.Template_type_open()
		}
		{
			p.SetState(781)
			p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(782)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(783)
			p.Match(GoogleSQLParserFUNCTION_RETURN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(784)

			var _x = p.Type_()

			localctx.(*Function_typeContext).return_type = _x
		}
		{
			p.SetState(785)
			p.Template_type_close()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(787)
			p.Match(GoogleSQLParserFUNCTION_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(788)
			p.Template_type_open()
		}
		{
			p.SetState(789)

			var _x = p.Type_()

			localctx.(*Function_typeContext).arg_type = _x
		}
		{
			p.SetState(790)
			p.Match(GoogleSQLParserFUNCTION_RETURN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(791)

			var _x = p.Type_()

			localctx.(*Function_typeContext).return_type = _x
		}
		{
			p.SetState(792)
			p.Template_type_close()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(794)

			var _x = p.function_type_prefix(0)

			localctx.(*Function_typeContext).arg_list = _x
		}
		{
			p.SetState(795)
			p.Match(GoogleSQLParserRR_BRACKET_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(796)
			p.Match(GoogleSQLParserFUNCTION_RETURN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(797)

			var _x = p.Type_()

			localctx.(*Function_typeContext).return_type = _x
		}
		{
			p.SetState(798)
			p.Template_type_close()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunction_type_prefixContext is an interface to support dynamic dispatch.
type IFunction_type_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FUNCTION_SYMBOL() antlr.TerminalNode
	Template_type_open() ITemplate_type_openContext
	LR_BRACKET_SYMBOL() antlr.TerminalNode
	Type_() ITypeContext
	Function_type_prefix() IFunction_type_prefixContext
	COMMA_SYMBOL() antlr.TerminalNode

	// IsFunction_type_prefixContext differentiates from other interfaces.
	IsFunction_type_prefixContext()
}

type Function_type_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_type_prefixContext() *Function_type_prefixContext {
	var p = new(Function_type_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_type_prefix
	return p
}

func InitEmptyFunction_type_prefixContext(p *Function_type_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_function_type_prefix
}

func (*Function_type_prefixContext) IsFunction_type_prefixContext() {}

func NewFunction_type_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_type_prefixContext {
	var p = new(Function_type_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_function_type_prefix

	return p
}

func (s *Function_type_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_type_prefixContext) FUNCTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFUNCTION_SYMBOL, 0)
}

func (s *Function_type_prefixContext) Template_type_open() ITemplate_type_openContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_openContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_openContext)
}

func (s *Function_type_prefixContext) LR_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLR_BRACKET_SYMBOL, 0)
}

func (s *Function_type_prefixContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Function_type_prefixContext) Function_type_prefix() IFunction_type_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunction_type_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunction_type_prefixContext)
}

func (s *Function_type_prefixContext) COMMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMA_SYMBOL, 0)
}

func (s *Function_type_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_type_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_type_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFunction_type_prefix(s)
	}
}

func (s *Function_type_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFunction_type_prefix(s)
	}
}

func (s *Function_type_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFunction_type_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Function_type_prefix() (localctx IFunction_type_prefixContext) {
	return p.function_type_prefix(0)
}

func (p *GoogleSQLParser) function_type_prefix(_p int) (localctx IFunction_type_prefixContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewFunction_type_prefixContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IFunction_type_prefixContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 146
	p.EnterRecursionRule(localctx, 146, GoogleSQLParserRULE_function_type_prefix, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(803)
		p.Match(GoogleSQLParserFUNCTION_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(804)
		p.Template_type_open()
	}
	{
		p.SetState(805)
		p.Match(GoogleSQLParserLR_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(806)
		p.Type_()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(813)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 75, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewFunction_type_prefixContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_function_type_prefix)
			p.SetState(808)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				goto errorExit
			}
			{
				p.SetState(809)
				p.Match(GoogleSQLParserCOMMA_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(810)
				p.Type_()
			}

		}
		p.SetState(815)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 75, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IType_nameContext is an interface to support dynamic dispatch.
type IType_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Path_expression() IPath_expressionContext
	INTERVAL_SYMBOL() antlr.TerminalNode

	// IsType_nameContext differentiates from other interfaces.
	IsType_nameContext()
}

type Type_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_nameContext() *Type_nameContext {
	var p = new(Type_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_type_name
	return p
}

func InitEmptyType_nameContext(p *Type_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_type_name
}

func (*Type_nameContext) IsType_nameContext() {}

func NewType_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_nameContext {
	var p = new(Type_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_type_name

	return p
}

func (s *Type_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_nameContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Type_nameContext) INTERVAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINTERVAL_SYMBOL, 0)
}

func (s *Type_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterType_name(s)
	}
}

func (s *Type_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitType_name(s)
	}
}

func (s *Type_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitType_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Type_name() (localctx IType_nameContext) {
	localctx = NewType_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, GoogleSQLParserRULE_type_name)
	p.SetState(818)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL, GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(816)
			p.path_expression(0)
		}

	case GoogleSQLParserINTERVAL_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(817)
			p.Match(GoogleSQLParserINTERVAL_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPath_expressionContext is an interface to support dynamic dispatch.
type IPath_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	Path_expression() IPath_expressionContext
	DOT_SYMBOL() antlr.TerminalNode

	// IsPath_expressionContext differentiates from other interfaces.
	IsPath_expressionContext()
}

type Path_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPath_expressionContext() *Path_expressionContext {
	var p = new(Path_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_path_expression
	return p
}

func InitEmptyPath_expressionContext(p *Path_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_path_expression
}

func (*Path_expressionContext) IsPath_expressionContext() {}

func NewPath_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Path_expressionContext {
	var p = new(Path_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_path_expression

	return p
}

func (s *Path_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Path_expressionContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Path_expressionContext) Path_expression() IPath_expressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPath_expressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPath_expressionContext)
}

func (s *Path_expressionContext) DOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDOT_SYMBOL, 0)
}

func (s *Path_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Path_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Path_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterPath_expression(s)
	}
}

func (s *Path_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitPath_expression(s)
	}
}

func (s *Path_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitPath_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Path_expression() (localctx IPath_expressionContext) {
	return p.path_expression(0)
}

func (p *GoogleSQLParser) path_expression(_p int) (localctx IPath_expressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewPath_expressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IPath_expressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 150
	p.EnterRecursionRule(localctx, 150, GoogleSQLParserRULE_path_expression, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(821)
		p.Identifier()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(828)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 77, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewPath_expressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_path_expression)
			p.SetState(823)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				goto errorExit
			}
			{
				p.SetState(824)
				p.Match(GoogleSQLParserDOT_SYMBOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(825)
				p.Identifier()
			}

		}
		p.SetState(830)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 77, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIdentifierContext is an interface to support dynamic dispatch.
type IIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Token_identifier() IToken_identifierContext
	Keyword_as_identifier() IKeyword_as_identifierContext

	// IsIdentifierContext differentiates from other interfaces.
	IsIdentifierContext()
}

type IdentifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierContext() *IdentifierContext {
	var p = new(IdentifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_identifier
	return p
}

func InitEmptyIdentifierContext(p *IdentifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_identifier
}

func (*IdentifierContext) IsIdentifierContext() {}

func NewIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierContext {
	var p = new(IdentifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_identifier

	return p
}

func (s *IdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierContext) Token_identifier() IToken_identifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IToken_identifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IToken_identifierContext)
}

func (s *IdentifierContext) Keyword_as_identifier() IKeyword_as_identifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKeyword_as_identifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKeyword_as_identifierContext)
}

func (s *IdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterIdentifier(s)
	}
}

func (s *IdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitIdentifier(s)
	}
}

func (s *IdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Identifier() (localctx IIdentifierContext) {
	localctx = NewIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, GoogleSQLParserRULE_identifier)
	p.SetState(833)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(831)
			p.Token_identifier()
		}

	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserSIMPLE_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(832)
			p.Keyword_as_identifier()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IKeyword_as_identifierContext is an interface to support dynamic dispatch.
type IKeyword_as_identifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Common_keyword_as_identifier() ICommon_keyword_as_identifierContext
	SIMPLE_SYMBOL() antlr.TerminalNode

	// IsKeyword_as_identifierContext differentiates from other interfaces.
	IsKeyword_as_identifierContext()
}

type Keyword_as_identifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeyword_as_identifierContext() *Keyword_as_identifierContext {
	var p = new(Keyword_as_identifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_keyword_as_identifier
	return p
}

func InitEmptyKeyword_as_identifierContext(p *Keyword_as_identifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_keyword_as_identifier
}

func (*Keyword_as_identifierContext) IsKeyword_as_identifierContext() {}

func NewKeyword_as_identifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Keyword_as_identifierContext {
	var p = new(Keyword_as_identifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_keyword_as_identifier

	return p
}

func (s *Keyword_as_identifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Keyword_as_identifierContext) Common_keyword_as_identifier() ICommon_keyword_as_identifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICommon_keyword_as_identifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICommon_keyword_as_identifierContext)
}

func (s *Keyword_as_identifierContext) SIMPLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSIMPLE_SYMBOL, 0)
}

func (s *Keyword_as_identifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Keyword_as_identifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Keyword_as_identifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterKeyword_as_identifier(s)
	}
}

func (s *Keyword_as_identifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitKeyword_as_identifier(s)
	}
}

func (s *Keyword_as_identifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitKeyword_as_identifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Keyword_as_identifier() (localctx IKeyword_as_identifierContext) {
	localctx = NewKeyword_as_identifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, GoogleSQLParserRULE_keyword_as_identifier)
	p.SetState(837)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINCLUDE_SYMBOL, GoogleSQLParserOFFSET_SYMBOL, GoogleSQLParserOPTIONS_SYMBOL, GoogleSQLParserPERCENT_SYMBOL, GoogleSQLParserPIVOT_SYMBOL, GoogleSQLParserREPLACE_SYMBOL, GoogleSQLParserUNPIVOT_SYMBOL, GoogleSQLParserSYSTEM_SYMBOL, GoogleSQLParserSYSTEM_TIME_SYMBOL, GoogleSQLParserVALUE_SYMBOL, GoogleSQLParserNUMERIC_SYMBOL, GoogleSQLParserDECIMAL_SYMBOL, GoogleSQLParserBIGNUMERIC_SYMBOL, GoogleSQLParserBIGDECIMAL_SYMBOL, GoogleSQLParserJSON_SYMBOL, GoogleSQLParserDATE_SYMBOL, GoogleSQLParserTIME_SYMBOL, GoogleSQLParserDATETIME_SYMBOL, GoogleSQLParserTIMESTAMP_SYMBOL, GoogleSQLParserABORT_SYMBOL, GoogleSQLParserACCESS_SYMBOL, GoogleSQLParserACTION_SYMBOL, GoogleSQLParserAGGREGATE_SYMBOL, GoogleSQLParserADD_SYMBOL, GoogleSQLParserALTER_SYMBOL, GoogleSQLParserALWAYS_SYMBOL, GoogleSQLParserANALYZE_SYMBOL, GoogleSQLParserAPPROX_SYMBOL, GoogleSQLParserARE_SYMBOL, GoogleSQLParserASSERT_SYMBOL, GoogleSQLParserBATCH_SYMBOL, GoogleSQLParserBEGIN_SYMBOL, GoogleSQLParserBREAK_SYMBOL, GoogleSQLParserCALL_SYMBOL, GoogleSQLParserCASCADE_SYMBOL, GoogleSQLParserCHECK_SYMBOL, GoogleSQLParserCLAMPED_SYMBOL, GoogleSQLParserCLONE_SYMBOL, GoogleSQLParserCOPY_SYMBOL, GoogleSQLParserCLUSTER_SYMBOL, GoogleSQLParserCOLUMN_SYMBOL, GoogleSQLParserCOLUMNS_SYMBOL, GoogleSQLParserCOMMIT_SYMBOL, GoogleSQLParserCONNECTION_SYMBOL, GoogleSQLParserCONSTANT_SYMBOL, GoogleSQLParserCONSTRAINT_SYMBOL, GoogleSQLParserCONTINUE_SYMBOL, GoogleSQLParserCORRESPONDING_SYMBOL, GoogleSQLParserCYCLE_SYMBOL, GoogleSQLParserDATA_SYMBOL, GoogleSQLParserDATABASE_SYMBOL, GoogleSQLParserDECLARE_SYMBOL, GoogleSQLParserDEFINER_SYMBOL, GoogleSQLParserDELETE_SYMBOL, GoogleSQLParserDELETION_SYMBOL, GoogleSQLParserDEPTH_SYMBOL, GoogleSQLParserDESCRIBE_SYMBOL, GoogleSQLParserDETERMINISTIC_SYMBOL, GoogleSQLParserDO_SYMBOL, GoogleSQLParserDROP_SYMBOL, GoogleSQLParserELSEIF_SYMBOL, GoogleSQLParserENFORCED_SYMBOL, GoogleSQLParserERROR_SYMBOL, GoogleSQLParserEXCEPTION_SYMBOL, GoogleSQLParserEXECUTE_SYMBOL, GoogleSQLParserEXPLAIN_SYMBOL, GoogleSQLParserEXPORT_SYMBOL, GoogleSQLParserEXTEND_SYMBOL, GoogleSQLParserEXTERNAL_SYMBOL, GoogleSQLParserFILES_SYMBOL, GoogleSQLParserFILTER_SYMBOL, GoogleSQLParserFILL_SYMBOL, GoogleSQLParserFIRST_SYMBOL, GoogleSQLParserFOREIGN_SYMBOL, GoogleSQLParserFORMAT_SYMBOL, GoogleSQLParserFUNCTION_SYMBOL, GoogleSQLParserGENERATED_SYMBOL, GoogleSQLParserGRANT_SYMBOL, GoogleSQLParserGROUP_ROWS_SYMBOL, GoogleSQLParserHIDDEN_SYMBOL, GoogleSQLParserIDENTITY_SYMBOL, GoogleSQLParserIMMEDIATE_SYMBOL, GoogleSQLParserIMMUTABLE_SYMBOL, GoogleSQLParserIMPORT_SYMBOL, GoogleSQLParserINCREMENT_SYMBOL, GoogleSQLParserINDEX_SYMBOL, GoogleSQLParserINOUT_SYMBOL, GoogleSQLParserINPUT_SYMBOL, GoogleSQLParserINSERT_SYMBOL, GoogleSQLParserINVOKER_SYMBOL, GoogleSQLParserISOLATION_SYMBOL, GoogleSQLParserITERATE_SYMBOL, GoogleSQLParserKEY_SYMBOL, GoogleSQLParserLANGUAGE_SYMBOL, GoogleSQLParserLAST_SYMBOL, GoogleSQLParserLEAVE_SYMBOL, GoogleSQLParserLEVEL_SYMBOL, GoogleSQLParserLOAD_SYMBOL, GoogleSQLParserLOOP_SYMBOL, GoogleSQLParserMACRO_SYMBOL, GoogleSQLParserMAP_SYMBOL, GoogleSQLParserMATCH_SYMBOL, GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, GoogleSQLParserMATCHED_SYMBOL, GoogleSQLParserMATERIALIZED_SYMBOL, GoogleSQLParserMAX_SYMBOL, GoogleSQLParserMAXVALUE_SYMBOL, GoogleSQLParserMEASURES_SYMBOL, GoogleSQLParserMESSAGE_SYMBOL, GoogleSQLParserMETADATA_SYMBOL, GoogleSQLParserMIN_SYMBOL, GoogleSQLParserMINVALUE_SYMBOL, GoogleSQLParserMODEL_SYMBOL, GoogleSQLParserMODULE_SYMBOL, GoogleSQLParserONLY_SYMBOL, GoogleSQLParserOUT_SYMBOL, GoogleSQLParserOUTPUT_SYMBOL, GoogleSQLParserOVERWRITE_SYMBOL, GoogleSQLParserPARTITIONS_SYMBOL, GoogleSQLParserPATTERN_SYMBOL, GoogleSQLParserPOLICIES_SYMBOL, GoogleSQLParserPOLICY_SYMBOL, GoogleSQLParserPRIMARY_SYMBOL, GoogleSQLParserPRIVATE_SYMBOL, GoogleSQLParserPRIVILEGE_SYMBOL, GoogleSQLParserPRIVILEGES_SYMBOL, GoogleSQLParserPROCEDURE_SYMBOL, GoogleSQLParserPROJECT_SYMBOL, GoogleSQLParserPUBLIC_SYMBOL, GoogleSQLParserRAISE_SYMBOL, GoogleSQLParserREAD_SYMBOL, GoogleSQLParserREFERENCES_SYMBOL, GoogleSQLParserREMOTE_SYMBOL, GoogleSQLParserREMOVE_SYMBOL, GoogleSQLParserRENAME_SYMBOL, GoogleSQLParserREPEAT_SYMBOL, GoogleSQLParserREPEATABLE_SYMBOL, GoogleSQLParserREPLACE_FIELDS_SYMBOL, GoogleSQLParserREPLICA_SYMBOL, GoogleSQLParserREPORT_SYMBOL, GoogleSQLParserRESTRICT_SYMBOL, GoogleSQLParserRESTRICTION_SYMBOL, GoogleSQLParserRETURNS_SYMBOL, GoogleSQLParserRETURN_SYMBOL, GoogleSQLParserREVOKE_SYMBOL, GoogleSQLParserROLLBACK_SYMBOL, GoogleSQLParserROW_SYMBOL, GoogleSQLParserRUN_SYMBOL, GoogleSQLParserSAFE_CAST_SYMBOL, GoogleSQLParserSCHEMA_SYMBOL, GoogleSQLParserSEARCH_SYMBOL, GoogleSQLParserSECURITY_SYMBOL, GoogleSQLParserSEQUENCE_SYMBOL, GoogleSQLParserSETS_SYMBOL, GoogleSQLParserSHOW_SYMBOL, GoogleSQLParserSNAPSHOT_SYMBOL, GoogleSQLParserSOURCE_SYMBOL, GoogleSQLParserSQL_SYMBOL, GoogleSQLParserSTABLE_SYMBOL, GoogleSQLParserSTART_SYMBOL, GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, GoogleSQLParserSTORED_SYMBOL, GoogleSQLParserSTORING_SYMBOL, GoogleSQLParserSTRICT_SYMBOL, GoogleSQLParserTABLE_SYMBOL, GoogleSQLParserTABLES_SYMBOL, GoogleSQLParserTARGET_SYMBOL, GoogleSQLParserTEMP_SYMBOL, GoogleSQLParserTEMPORARY_SYMBOL, GoogleSQLParserTRANSACTION_SYMBOL, GoogleSQLParserTRANSFORM_SYMBOL, GoogleSQLParserTRUNCATE_SYMBOL, GoogleSQLParserTYPE_SYMBOL, GoogleSQLParserUNDROP_SYMBOL, GoogleSQLParserUNIQUE_SYMBOL, GoogleSQLParserUNKNOWN_SYMBOL, GoogleSQLParserUNTIL_SYMBOL, GoogleSQLParserUPDATE_SYMBOL, GoogleSQLParserVALUES_SYMBOL, GoogleSQLParserVECTOR_SYMBOL, GoogleSQLParserVIEW_SYMBOL, GoogleSQLParserVIEWS_SYMBOL, GoogleSQLParserVOLATILE_SYMBOL, GoogleSQLParserWEIGHT_SYMBOL, GoogleSQLParserWHILE_SYMBOL, GoogleSQLParserWRITE_SYMBOL, GoogleSQLParserZONE_SYMBOL, GoogleSQLParserDESCRIPTOR_SYMBOL, GoogleSQLParserINTERLEAVE_SYMBOL, GoogleSQLParserNULL_FILTERED_SYMBOL, GoogleSQLParserPARENT_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(835)
			p.Common_keyword_as_identifier()
		}

	case GoogleSQLParserSIMPLE_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(836)
			p.Match(GoogleSQLParserSIMPLE_SYMBOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICommon_keyword_as_identifierContext is an interface to support dynamic dispatch.
type ICommon_keyword_as_identifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ABORT_SYMBOL() antlr.TerminalNode
	ACCESS_SYMBOL() antlr.TerminalNode
	ACTION_SYMBOL() antlr.TerminalNode
	AGGREGATE_SYMBOL() antlr.TerminalNode
	ADD_SYMBOL() antlr.TerminalNode
	ALTER_SYMBOL() antlr.TerminalNode
	ALWAYS_SYMBOL() antlr.TerminalNode
	ANALYZE_SYMBOL() antlr.TerminalNode
	APPROX_SYMBOL() antlr.TerminalNode
	ARE_SYMBOL() antlr.TerminalNode
	ASSERT_SYMBOL() antlr.TerminalNode
	BATCH_SYMBOL() antlr.TerminalNode
	BEGIN_SYMBOL() antlr.TerminalNode
	BIGDECIMAL_SYMBOL() antlr.TerminalNode
	BIGNUMERIC_SYMBOL() antlr.TerminalNode
	BREAK_SYMBOL() antlr.TerminalNode
	CALL_SYMBOL() antlr.TerminalNode
	CASCADE_SYMBOL() antlr.TerminalNode
	CHECK_SYMBOL() antlr.TerminalNode
	CLAMPED_SYMBOL() antlr.TerminalNode
	CLONE_SYMBOL() antlr.TerminalNode
	COPY_SYMBOL() antlr.TerminalNode
	CLUSTER_SYMBOL() antlr.TerminalNode
	COLUMN_SYMBOL() antlr.TerminalNode
	COLUMNS_SYMBOL() antlr.TerminalNode
	COMMIT_SYMBOL() antlr.TerminalNode
	CONNECTION_SYMBOL() antlr.TerminalNode
	CONSTANT_SYMBOL() antlr.TerminalNode
	CONSTRAINT_SYMBOL() antlr.TerminalNode
	CONTINUE_SYMBOL() antlr.TerminalNode
	CORRESPONDING_SYMBOL() antlr.TerminalNode
	CYCLE_SYMBOL() antlr.TerminalNode
	DATA_SYMBOL() antlr.TerminalNode
	DATABASE_SYMBOL() antlr.TerminalNode
	DATE_SYMBOL() antlr.TerminalNode
	DATETIME_SYMBOL() antlr.TerminalNode
	DECIMAL_SYMBOL() antlr.TerminalNode
	DECLARE_SYMBOL() antlr.TerminalNode
	DEFINER_SYMBOL() antlr.TerminalNode
	DELETE_SYMBOL() antlr.TerminalNode
	DELETION_SYMBOL() antlr.TerminalNode
	DEPTH_SYMBOL() antlr.TerminalNode
	DESCRIBE_SYMBOL() antlr.TerminalNode
	DETERMINISTIC_SYMBOL() antlr.TerminalNode
	DO_SYMBOL() antlr.TerminalNode
	DROP_SYMBOL() antlr.TerminalNode
	ELSEIF_SYMBOL() antlr.TerminalNode
	ENFORCED_SYMBOL() antlr.TerminalNode
	ERROR_SYMBOL() antlr.TerminalNode
	EXCEPTION_SYMBOL() antlr.TerminalNode
	EXECUTE_SYMBOL() antlr.TerminalNode
	EXPLAIN_SYMBOL() antlr.TerminalNode
	EXPORT_SYMBOL() antlr.TerminalNode
	EXTEND_SYMBOL() antlr.TerminalNode
	EXTERNAL_SYMBOL() antlr.TerminalNode
	FILES_SYMBOL() antlr.TerminalNode
	FILTER_SYMBOL() antlr.TerminalNode
	FILL_SYMBOL() antlr.TerminalNode
	FIRST_SYMBOL() antlr.TerminalNode
	FOREIGN_SYMBOL() antlr.TerminalNode
	FORMAT_SYMBOL() antlr.TerminalNode
	FUNCTION_SYMBOL() antlr.TerminalNode
	GENERATED_SYMBOL() antlr.TerminalNode
	GRANT_SYMBOL() antlr.TerminalNode
	GROUP_ROWS_SYMBOL() antlr.TerminalNode
	HIDDEN_SYMBOL() antlr.TerminalNode
	IDENTITY_SYMBOL() antlr.TerminalNode
	IMMEDIATE_SYMBOL() antlr.TerminalNode
	IMMUTABLE_SYMBOL() antlr.TerminalNode
	IMPORT_SYMBOL() antlr.TerminalNode
	INCLUDE_SYMBOL() antlr.TerminalNode
	INCREMENT_SYMBOL() antlr.TerminalNode
	INDEX_SYMBOL() antlr.TerminalNode
	INOUT_SYMBOL() antlr.TerminalNode
	INPUT_SYMBOL() antlr.TerminalNode
	INSERT_SYMBOL() antlr.TerminalNode
	INVOKER_SYMBOL() antlr.TerminalNode
	ISOLATION_SYMBOL() antlr.TerminalNode
	ITERATE_SYMBOL() antlr.TerminalNode
	JSON_SYMBOL() antlr.TerminalNode
	KEY_SYMBOL() antlr.TerminalNode
	LANGUAGE_SYMBOL() antlr.TerminalNode
	LAST_SYMBOL() antlr.TerminalNode
	LEAVE_SYMBOL() antlr.TerminalNode
	LEVEL_SYMBOL() antlr.TerminalNode
	LOAD_SYMBOL() antlr.TerminalNode
	LOOP_SYMBOL() antlr.TerminalNode
	MACRO_SYMBOL() antlr.TerminalNode
	MAP_SYMBOL() antlr.TerminalNode
	MATCH_SYMBOL() antlr.TerminalNode
	KW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL() antlr.TerminalNode
	MATCHED_SYMBOL() antlr.TerminalNode
	MATERIALIZED_SYMBOL() antlr.TerminalNode
	MAX_SYMBOL() antlr.TerminalNode
	MAXVALUE_SYMBOL() antlr.TerminalNode
	MEASURES_SYMBOL() antlr.TerminalNode
	MESSAGE_SYMBOL() antlr.TerminalNode
	METADATA_SYMBOL() antlr.TerminalNode
	MIN_SYMBOL() antlr.TerminalNode
	MINVALUE_SYMBOL() antlr.TerminalNode
	MODEL_SYMBOL() antlr.TerminalNode
	MODULE_SYMBOL() antlr.TerminalNode
	NUMERIC_SYMBOL() antlr.TerminalNode
	OFFSET_SYMBOL() antlr.TerminalNode
	ONLY_SYMBOL() antlr.TerminalNode
	OPTIONS_SYMBOL() antlr.TerminalNode
	OUT_SYMBOL() antlr.TerminalNode
	OUTPUT_SYMBOL() antlr.TerminalNode
	OVERWRITE_SYMBOL() antlr.TerminalNode
	PARTITIONS_SYMBOL() antlr.TerminalNode
	PATTERN_SYMBOL() antlr.TerminalNode
	PERCENT_SYMBOL() antlr.TerminalNode
	PIVOT_SYMBOL() antlr.TerminalNode
	POLICIES_SYMBOL() antlr.TerminalNode
	POLICY_SYMBOL() antlr.TerminalNode
	PRIMARY_SYMBOL() antlr.TerminalNode
	PRIVATE_SYMBOL() antlr.TerminalNode
	PRIVILEGE_SYMBOL() antlr.TerminalNode
	PRIVILEGES_SYMBOL() antlr.TerminalNode
	PROCEDURE_SYMBOL() antlr.TerminalNode
	PROJECT_SYMBOL() antlr.TerminalNode
	PUBLIC_SYMBOL() antlr.TerminalNode
	RAISE_SYMBOL() antlr.TerminalNode
	READ_SYMBOL() antlr.TerminalNode
	REFERENCES_SYMBOL() antlr.TerminalNode
	REMOTE_SYMBOL() antlr.TerminalNode
	REMOVE_SYMBOL() antlr.TerminalNode
	RENAME_SYMBOL() antlr.TerminalNode
	REPEAT_SYMBOL() antlr.TerminalNode
	REPEATABLE_SYMBOL() antlr.TerminalNode
	REPLACE_SYMBOL() antlr.TerminalNode
	REPLACE_FIELDS_SYMBOL() antlr.TerminalNode
	REPLICA_SYMBOL() antlr.TerminalNode
	REPORT_SYMBOL() antlr.TerminalNode
	RESTRICT_SYMBOL() antlr.TerminalNode
	RESTRICTION_SYMBOL() antlr.TerminalNode
	RETURNS_SYMBOL() antlr.TerminalNode
	RETURN_SYMBOL() antlr.TerminalNode
	REVOKE_SYMBOL() antlr.TerminalNode
	ROLLBACK_SYMBOL() antlr.TerminalNode
	ROW_SYMBOL() antlr.TerminalNode
	RUN_SYMBOL() antlr.TerminalNode
	SAFE_CAST_SYMBOL() antlr.TerminalNode
	SCHEMA_SYMBOL() antlr.TerminalNode
	SEARCH_SYMBOL() antlr.TerminalNode
	SECURITY_SYMBOL() antlr.TerminalNode
	SEQUENCE_SYMBOL() antlr.TerminalNode
	SETS_SYMBOL() antlr.TerminalNode
	SHOW_SYMBOL() antlr.TerminalNode
	SNAPSHOT_SYMBOL() antlr.TerminalNode
	SOURCE_SYMBOL() antlr.TerminalNode
	SQL_SYMBOL() antlr.TerminalNode
	STABLE_SYMBOL() antlr.TerminalNode
	START_SYMBOL() antlr.TerminalNode
	STATIC_DESCRIBE_SYMBOL() antlr.TerminalNode
	STORED_SYMBOL() antlr.TerminalNode
	STORING_SYMBOL() antlr.TerminalNode
	STRICT_SYMBOL() antlr.TerminalNode
	SYSTEM_SYMBOL() antlr.TerminalNode
	SYSTEM_TIME_SYMBOL() antlr.TerminalNode
	TABLE_SYMBOL() antlr.TerminalNode
	TABLES_SYMBOL() antlr.TerminalNode
	TARGET_SYMBOL() antlr.TerminalNode
	TEMP_SYMBOL() antlr.TerminalNode
	TEMPORARY_SYMBOL() antlr.TerminalNode
	TIME_SYMBOL() antlr.TerminalNode
	TIMESTAMP_SYMBOL() antlr.TerminalNode
	TRANSACTION_SYMBOL() antlr.TerminalNode
	TRANSFORM_SYMBOL() antlr.TerminalNode
	TRUNCATE_SYMBOL() antlr.TerminalNode
	TYPE_SYMBOL() antlr.TerminalNode
	UNDROP_SYMBOL() antlr.TerminalNode
	UNIQUE_SYMBOL() antlr.TerminalNode
	UNKNOWN_SYMBOL() antlr.TerminalNode
	UNPIVOT_SYMBOL() antlr.TerminalNode
	UNTIL_SYMBOL() antlr.TerminalNode
	UPDATE_SYMBOL() antlr.TerminalNode
	VALUE_SYMBOL() antlr.TerminalNode
	VALUES_SYMBOL() antlr.TerminalNode
	VECTOR_SYMBOL() antlr.TerminalNode
	VIEW_SYMBOL() antlr.TerminalNode
	VIEWS_SYMBOL() antlr.TerminalNode
	VOLATILE_SYMBOL() antlr.TerminalNode
	WEIGHT_SYMBOL() antlr.TerminalNode
	WHILE_SYMBOL() antlr.TerminalNode
	WRITE_SYMBOL() antlr.TerminalNode
	ZONE_SYMBOL() antlr.TerminalNode
	DESCRIPTOR_SYMBOL() antlr.TerminalNode
	INTERLEAVE_SYMBOL() antlr.TerminalNode
	NULL_FILTERED_SYMBOL() antlr.TerminalNode
	PARENT_SYMBOL() antlr.TerminalNode

	// IsCommon_keyword_as_identifierContext differentiates from other interfaces.
	IsCommon_keyword_as_identifierContext()
}

type Common_keyword_as_identifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCommon_keyword_as_identifierContext() *Common_keyword_as_identifierContext {
	var p = new(Common_keyword_as_identifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_common_keyword_as_identifier
	return p
}

func InitEmptyCommon_keyword_as_identifierContext(p *Common_keyword_as_identifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_common_keyword_as_identifier
}

func (*Common_keyword_as_identifierContext) IsCommon_keyword_as_identifierContext() {}

func NewCommon_keyword_as_identifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Common_keyword_as_identifierContext {
	var p = new(Common_keyword_as_identifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_common_keyword_as_identifier

	return p
}

func (s *Common_keyword_as_identifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Common_keyword_as_identifierContext) ABORT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserABORT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ACCESS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserACCESS_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ACTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserACTION_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) AGGREGATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAGGREGATE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ADD_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserADD_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ALTER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserALTER_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ALWAYS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserALWAYS_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ANALYZE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserANALYZE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) APPROX_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserAPPROX_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ARE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserARE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ASSERT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserASSERT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) BATCH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBATCH_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) BEGIN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBEGIN_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) BIGDECIMAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBIGDECIMAL_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) BIGNUMERIC_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBIGNUMERIC_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) BREAK_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBREAK_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CALL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCALL_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CASCADE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCASCADE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CHECK_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCHECK_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CLAMPED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCLAMPED_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CLONE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCLONE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) COPY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOPY_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CLUSTER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCLUSTER_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) COLUMN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOLUMN_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) COLUMNS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOLUMNS_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) COMMIT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCOMMIT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CONNECTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCONNECTION_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CONSTANT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCONSTANT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CONSTRAINT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCONSTRAINT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CONTINUE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCONTINUE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CORRESPONDING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCORRESPONDING_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) CYCLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserCYCLE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DATA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDATA_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DATABASE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDATABASE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDATE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DATETIME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDATETIME_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DECIMAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDECIMAL_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DECLARE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDECLARE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DEFINER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDEFINER_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DELETE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDELETE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DELETION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDELETION_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DEPTH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDEPTH_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DESCRIBE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDESCRIBE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DETERMINISTIC_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDETERMINISTIC_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDO_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DROP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDROP_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ELSEIF_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserELSEIF_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ENFORCED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserENFORCED_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ERROR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserERROR_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) EXCEPTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXCEPTION_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) EXECUTE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXECUTE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) EXPLAIN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXPLAIN_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) EXPORT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXPORT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) EXTEND_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXTEND_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) EXTERNAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserEXTERNAL_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) FILES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFILES_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) FILTER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFILTER_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) FILL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFILL_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) FIRST_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFIRST_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) FOREIGN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFOREIGN_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) FORMAT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFORMAT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) FUNCTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFUNCTION_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) GENERATED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGENERATED_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) GRANT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGRANT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) GROUP_ROWS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGROUP_ROWS_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) HIDDEN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserHIDDEN_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) IDENTITY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIDENTITY_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) IMMEDIATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIMMEDIATE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) IMMUTABLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIMMUTABLE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) IMPORT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIMPORT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) INCLUDE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINCLUDE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) INCREMENT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINCREMENT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) INDEX_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINDEX_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) INOUT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINOUT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) INPUT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINPUT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) INSERT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINSERT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) INVOKER_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINVOKER_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ISOLATION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserISOLATION_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ITERATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserITERATE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) JSON_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserJSON_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) KEY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserKEY_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) LANGUAGE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLANGUAGE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) LAST_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLAST_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) LEAVE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLEAVE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) LEVEL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLEVEL_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) LOAD_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLOAD_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) LOOP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLOOP_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MACRO_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMACRO_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MAP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMAP_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MATCH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMATCH_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) KW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserKW_MATCH_RECOGNIZE_NONRESERVED_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MATCHED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMATCHED_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MATERIALIZED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMATERIALIZED_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MAX_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMAX_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MAXVALUE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMAXVALUE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MEASURES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMEASURES_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MESSAGE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMESSAGE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) METADATA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMETADATA_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MIN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMIN_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MINVALUE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMINVALUE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MODEL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMODEL_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) MODULE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserMODULE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) NUMERIC_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNUMERIC_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) OFFSET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOFFSET_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ONLY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserONLY_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) OPTIONS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOPTIONS_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) OUT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOUT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) OUTPUT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOUTPUT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) OVERWRITE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserOVERWRITE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PARTITIONS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPARTITIONS_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PATTERN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPATTERN_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PERCENT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPERCENT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PIVOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPIVOT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) POLICIES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPOLICIES_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) POLICY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPOLICY_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PRIMARY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPRIMARY_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PRIVATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPRIVATE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PRIVILEGE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPRIVILEGE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PRIVILEGES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPRIVILEGES_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PROCEDURE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPROCEDURE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PROJECT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPROJECT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PUBLIC_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPUBLIC_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) RAISE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRAISE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) READ_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREAD_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) REFERENCES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREFERENCES_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) REMOTE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREMOTE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) REMOVE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREMOVE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) RENAME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRENAME_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) REPEAT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPEAT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) REPEATABLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPEATABLE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) REPLACE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPLACE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) REPLACE_FIELDS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPLACE_FIELDS_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) REPLICA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPLICA_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) REPORT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREPORT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) RESTRICT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRESTRICT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) RESTRICTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRESTRICTION_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) RETURNS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRETURNS_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) RETURN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRETURN_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) REVOKE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserREVOKE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ROLLBACK_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserROLLBACK_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ROW_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserROW_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) RUN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserRUN_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SAFE_CAST_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSAFE_CAST_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SCHEMA_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSCHEMA_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SEARCH_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSEARCH_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SECURITY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSECURITY_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SEQUENCE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSEQUENCE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SETS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSETS_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SHOW_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSHOW_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SNAPSHOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSNAPSHOT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SOURCE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSOURCE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SQL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSQL_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) STABLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTABLE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) START_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTART_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) STATIC_DESCRIBE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTATIC_DESCRIBE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) STORED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTORED_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) STORING_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTORING_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) STRICT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTRICT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SYSTEM_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSYSTEM_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) SYSTEM_TIME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSYSTEM_TIME_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TABLE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTABLE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TABLES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTABLES_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TARGET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTARGET_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TEMP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTEMP_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TEMPORARY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTEMPORARY_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TIME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTIME_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TIMESTAMP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTIMESTAMP_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TRANSACTION_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTRANSACTION_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TRANSFORM_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTRANSFORM_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TRUNCATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTRUNCATE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) TYPE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTYPE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) UNDROP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNDROP_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) UNIQUE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNIQUE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) UNKNOWN_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNKNOWN_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) UNPIVOT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNPIVOT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) UNTIL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUNTIL_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) UPDATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserUPDATE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) VALUE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserVALUE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) VALUES_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserVALUES_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) VECTOR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserVECTOR_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) VIEW_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserVIEW_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) VIEWS_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserVIEWS_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) VOLATILE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserVOLATILE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) WEIGHT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWEIGHT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) WHILE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWHILE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) WRITE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserWRITE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) ZONE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserZONE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) DESCRIPTOR_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDESCRIPTOR_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) INTERLEAVE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINTERLEAVE_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) NULL_FILTERED_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNULL_FILTERED_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) PARENT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserPARENT_SYMBOL, 0)
}

func (s *Common_keyword_as_identifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Common_keyword_as_identifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Common_keyword_as_identifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCommon_keyword_as_identifier(s)
	}
}

func (s *Common_keyword_as_identifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCommon_keyword_as_identifier(s)
	}
}

func (s *Common_keyword_as_identifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCommon_keyword_as_identifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Common_keyword_as_identifier() (localctx ICommon_keyword_as_identifierContext) {
	localctx = NewCommon_keyword_as_identifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, GoogleSQLParserRULE_common_keyword_as_identifier)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(839)
		_la = p.GetTokenStream().LA(1)

		if !(((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&9002991175976091648) != 0) || ((int64((_la-66)) & ^0x3f) == 0 && ((int64(1)<<(_la-66))&-1) != 0) || ((int64((_la-130)) & ^0x3f) == 0 && ((int64(1)<<(_la-130))&-1) != 0) || ((int64((_la-194)) & ^0x3f) == 0 && ((int64(1)<<(_la-194))&17592186044415) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IToken_identifierContext is an interface to support dynamic dispatch.
type IToken_identifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode

	// IsToken_identifierContext differentiates from other interfaces.
	IsToken_identifierContext()
}

type Token_identifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyToken_identifierContext() *Token_identifierContext {
	var p = new(Token_identifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_token_identifier
	return p
}

func InitEmptyToken_identifierContext(p *Token_identifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_token_identifier
}

func (*Token_identifierContext) IsToken_identifierContext() {}

func NewToken_identifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Token_identifierContext {
	var p = new(Token_identifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_token_identifier

	return p
}

func (s *Token_identifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Token_identifierContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserIDENTIFIER, 0)
}

func (s *Token_identifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Token_identifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Token_identifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterToken_identifier(s)
	}
}

func (s *Token_identifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitToken_identifier(s)
	}
}

func (s *Token_identifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitToken_identifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Token_identifier() (localctx IToken_identifierContext) {
	localctx = NewToken_identifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, GoogleSQLParserRULE_token_identifier)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(841)
		p.Match(GoogleSQLParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStruct_typeContext is an interface to support dynamic dispatch.
type IStruct_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	STRUCT_SYMBOL() antlr.TerminalNode
	Template_type_open() ITemplate_type_openContext
	Template_type_close() ITemplate_type_closeContext

	// IsStruct_typeContext differentiates from other interfaces.
	IsStruct_typeContext()
}

type Struct_typeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStruct_typeContext() *Struct_typeContext {
	var p = new(Struct_typeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_type
	return p
}

func InitEmptyStruct_typeContext(p *Struct_typeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_struct_type
}

func (*Struct_typeContext) IsStruct_typeContext() {}

func NewStruct_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Struct_typeContext {
	var p = new(Struct_typeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_struct_type

	return p
}

func (s *Struct_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Struct_typeContext) STRUCT_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTRUCT_SYMBOL, 0)
}

func (s *Struct_typeContext) Template_type_open() ITemplate_type_openContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_openContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_openContext)
}

func (s *Struct_typeContext) Template_type_close() ITemplate_type_closeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_closeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_closeContext)
}

func (s *Struct_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Struct_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Struct_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterStruct_type(s)
	}
}

func (s *Struct_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitStruct_type(s)
	}
}

func (s *Struct_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitStruct_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Struct_type() (localctx IStruct_typeContext) {
	localctx = NewStruct_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, GoogleSQLParserRULE_struct_type)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(843)
		p.Match(GoogleSQLParserSTRUCT_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(844)
		p.Template_type_open()
	}
	{
		p.SetState(845)
		p.Template_type_close()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArray_typeContext is an interface to support dynamic dispatch.
type IArray_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ARRAY_SYMBOL() antlr.TerminalNode
	Template_type_open() ITemplate_type_openContext
	Type_() ITypeContext
	Template_type_close() ITemplate_type_closeContext

	// IsArray_typeContext differentiates from other interfaces.
	IsArray_typeContext()
}

type Array_typeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArray_typeContext() *Array_typeContext {
	var p = new(Array_typeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_array_type
	return p
}

func InitEmptyArray_typeContext(p *Array_typeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_array_type
}

func (*Array_typeContext) IsArray_typeContext() {}

func NewArray_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_typeContext {
	var p = new(Array_typeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_array_type

	return p
}

func (s *Array_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_typeContext) ARRAY_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserARRAY_SYMBOL, 0)
}

func (s *Array_typeContext) Template_type_open() ITemplate_type_openContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_openContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_openContext)
}

func (s *Array_typeContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *Array_typeContext) Template_type_close() ITemplate_type_closeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplate_type_closeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplate_type_closeContext)
}

func (s *Array_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Array_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterArray_type(s)
	}
}

func (s *Array_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitArray_type(s)
	}
}

func (s *Array_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitArray_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Array_type() (localctx IArray_typeContext) {
	localctx = NewArray_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, GoogleSQLParserRULE_array_type)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(847)
		p.Match(GoogleSQLParserARRAY_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(848)
		p.Template_type_open()
	}
	{
		p.SetState(849)
		p.Type_()
	}
	{
		p.SetState(850)
		p.Template_type_close()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITemplate_type_openContext is an interface to support dynamic dispatch.
type ITemplate_type_openContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LT_BRACKET_SYMBOL() antlr.TerminalNode

	// IsTemplate_type_openContext differentiates from other interfaces.
	IsTemplate_type_openContext()
}

type Template_type_openContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplate_type_openContext() *Template_type_openContext {
	var p = new(Template_type_openContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_template_type_open
	return p
}

func InitEmptyTemplate_type_openContext(p *Template_type_openContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_template_type_open
}

func (*Template_type_openContext) IsTemplate_type_openContext() {}

func NewTemplate_type_openContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Template_type_openContext {
	var p = new(Template_type_openContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_template_type_open

	return p
}

func (s *Template_type_openContext) GetParser() antlr.Parser { return s.parser }

func (s *Template_type_openContext) LT_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserLT_BRACKET_SYMBOL, 0)
}

func (s *Template_type_openContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Template_type_openContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Template_type_openContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTemplate_type_open(s)
	}
}

func (s *Template_type_openContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTemplate_type_open(s)
	}
}

func (s *Template_type_openContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTemplate_type_open(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Template_type_open() (localctx ITemplate_type_openContext) {
	localctx = NewTemplate_type_openContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, GoogleSQLParserRULE_template_type_open)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(852)
		p.Match(GoogleSQLParserLT_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITemplate_type_closeContext is an interface to support dynamic dispatch.
type ITemplate_type_closeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	GT_BRACKET_SYMBOL() antlr.TerminalNode

	// IsTemplate_type_closeContext differentiates from other interfaces.
	IsTemplate_type_closeContext()
}

type Template_type_closeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplate_type_closeContext() *Template_type_closeContext {
	var p = new(Template_type_closeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_template_type_close
	return p
}

func InitEmptyTemplate_type_closeContext(p *Template_type_closeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_template_type_close
}

func (*Template_type_closeContext) IsTemplate_type_closeContext() {}

func NewTemplate_type_closeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Template_type_closeContext {
	var p = new(Template_type_closeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_template_type_close

	return p
}

func (s *Template_type_closeContext) GetParser() antlr.Parser { return s.parser }

func (s *Template_type_closeContext) GT_BRACKET_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserGT_BRACKET_SYMBOL, 0)
}

func (s *Template_type_closeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Template_type_closeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Template_type_closeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTemplate_type_close(s)
	}
}

func (s *Template_type_closeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTemplate_type_close(s)
	}
}

func (s *Template_type_closeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTemplate_type_close(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Template_type_close() (localctx ITemplate_type_closeContext) {
	localctx = NewTemplate_type_closeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, GoogleSQLParserRULE_template_type_close)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(854)
		p.Match(GoogleSQLParserGT_BRACKET_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDate_or_time_literalContext is an interface to support dynamic dispatch.
type IDate_or_time_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Date_or_time_literal_kind() IDate_or_time_literal_kindContext
	String_literal() IString_literalContext

	// IsDate_or_time_literalContext differentiates from other interfaces.
	IsDate_or_time_literalContext()
}

type Date_or_time_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDate_or_time_literalContext() *Date_or_time_literalContext {
	var p = new(Date_or_time_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_date_or_time_literal
	return p
}

func InitEmptyDate_or_time_literalContext(p *Date_or_time_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_date_or_time_literal
}

func (*Date_or_time_literalContext) IsDate_or_time_literalContext() {}

func NewDate_or_time_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Date_or_time_literalContext {
	var p = new(Date_or_time_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_date_or_time_literal

	return p
}

func (s *Date_or_time_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Date_or_time_literalContext) Date_or_time_literal_kind() IDate_or_time_literal_kindContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDate_or_time_literal_kindContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDate_or_time_literal_kindContext)
}

func (s *Date_or_time_literalContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Date_or_time_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Date_or_time_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Date_or_time_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterDate_or_time_literal(s)
	}
}

func (s *Date_or_time_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitDate_or_time_literal(s)
	}
}

func (s *Date_or_time_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitDate_or_time_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Date_or_time_literal() (localctx IDate_or_time_literalContext) {
	localctx = NewDate_or_time_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, GoogleSQLParserRULE_date_or_time_literal)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(856)
		p.Date_or_time_literal_kind()
	}
	{
		p.SetState(857)
		p.string_literal(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDate_or_time_literal_kindContext is an interface to support dynamic dispatch.
type IDate_or_time_literal_kindContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DATE_SYMBOL() antlr.TerminalNode
	TIME_SYMBOL() antlr.TerminalNode
	DATETIME_SYMBOL() antlr.TerminalNode
	TIMESTAMP_SYMBOL() antlr.TerminalNode

	// IsDate_or_time_literal_kindContext differentiates from other interfaces.
	IsDate_or_time_literal_kindContext()
}

type Date_or_time_literal_kindContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDate_or_time_literal_kindContext() *Date_or_time_literal_kindContext {
	var p = new(Date_or_time_literal_kindContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_date_or_time_literal_kind
	return p
}

func InitEmptyDate_or_time_literal_kindContext(p *Date_or_time_literal_kindContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_date_or_time_literal_kind
}

func (*Date_or_time_literal_kindContext) IsDate_or_time_literal_kindContext() {}

func NewDate_or_time_literal_kindContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Date_or_time_literal_kindContext {
	var p = new(Date_or_time_literal_kindContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_date_or_time_literal_kind

	return p
}

func (s *Date_or_time_literal_kindContext) GetParser() antlr.Parser { return s.parser }

func (s *Date_or_time_literal_kindContext) DATE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDATE_SYMBOL, 0)
}

func (s *Date_or_time_literal_kindContext) TIME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTIME_SYMBOL, 0)
}

func (s *Date_or_time_literal_kindContext) DATETIME_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDATETIME_SYMBOL, 0)
}

func (s *Date_or_time_literal_kindContext) TIMESTAMP_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTIMESTAMP_SYMBOL, 0)
}

func (s *Date_or_time_literal_kindContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Date_or_time_literal_kindContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Date_or_time_literal_kindContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterDate_or_time_literal_kind(s)
	}
}

func (s *Date_or_time_literal_kindContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitDate_or_time_literal_kind(s)
	}
}

func (s *Date_or_time_literal_kindContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitDate_or_time_literal_kind(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Date_or_time_literal_kind() (localctx IDate_or_time_literal_kindContext) {
	localctx = NewDate_or_time_literal_kindContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, GoogleSQLParserRULE_date_or_time_literal_kind)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(859)
		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&8646911284551352320) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFloating_point_literalContext is an interface to support dynamic dispatch.
type IFloating_point_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FLOAT() antlr.TerminalNode

	// IsFloating_point_literalContext differentiates from other interfaces.
	IsFloating_point_literalContext()
}

type Floating_point_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFloating_point_literalContext() *Floating_point_literalContext {
	var p = new(Floating_point_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_floating_point_literal
	return p
}

func InitEmptyFloating_point_literalContext(p *Floating_point_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_floating_point_literal
}

func (*Floating_point_literalContext) IsFloating_point_literalContext() {}

func NewFloating_point_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Floating_point_literalContext {
	var p = new(Floating_point_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_floating_point_literal

	return p
}

func (s *Floating_point_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Floating_point_literalContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFLOAT, 0)
}

func (s *Floating_point_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Floating_point_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Floating_point_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFloating_point_literal(s)
	}
}

func (s *Floating_point_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFloating_point_literal(s)
	}
}

func (s *Floating_point_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFloating_point_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Floating_point_literal() (localctx IFloating_point_literalContext) {
	localctx = NewFloating_point_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, GoogleSQLParserRULE_floating_point_literal)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(861)
		p.Match(GoogleSQLParserFLOAT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJson_literalContext is an interface to support dynamic dispatch.
type IJson_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	JSON_SYMBOL() antlr.TerminalNode
	String_literal() IString_literalContext

	// IsJson_literalContext differentiates from other interfaces.
	IsJson_literalContext()
}

type Json_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJson_literalContext() *Json_literalContext {
	var p = new(Json_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_json_literal
	return p
}

func InitEmptyJson_literalContext(p *Json_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_json_literal
}

func (*Json_literalContext) IsJson_literalContext() {}

func NewJson_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Json_literalContext {
	var p = new(Json_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_json_literal

	return p
}

func (s *Json_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Json_literalContext) JSON_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserJSON_SYMBOL, 0)
}

func (s *Json_literalContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Json_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Json_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Json_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterJson_literal(s)
	}
}

func (s *Json_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitJson_literal(s)
	}
}

func (s *Json_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitJson_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Json_literal() (localctx IJson_literalContext) {
	localctx = NewJson_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, GoogleSQLParserRULE_json_literal)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(863)
		p.Match(GoogleSQLParserJSON_SYMBOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(864)
		p.string_literal(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBignumeric_literalContext is an interface to support dynamic dispatch.
type IBignumeric_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Bignumeric_literal_prefix() IBignumeric_literal_prefixContext
	String_literal() IString_literalContext

	// IsBignumeric_literalContext differentiates from other interfaces.
	IsBignumeric_literalContext()
}

type Bignumeric_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBignumeric_literalContext() *Bignumeric_literalContext {
	var p = new(Bignumeric_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_bignumeric_literal
	return p
}

func InitEmptyBignumeric_literalContext(p *Bignumeric_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_bignumeric_literal
}

func (*Bignumeric_literalContext) IsBignumeric_literalContext() {}

func NewBignumeric_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bignumeric_literalContext {
	var p = new(Bignumeric_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_bignumeric_literal

	return p
}

func (s *Bignumeric_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Bignumeric_literalContext) Bignumeric_literal_prefix() IBignumeric_literal_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBignumeric_literal_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBignumeric_literal_prefixContext)
}

func (s *Bignumeric_literalContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Bignumeric_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bignumeric_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bignumeric_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBignumeric_literal(s)
	}
}

func (s *Bignumeric_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBignumeric_literal(s)
	}
}

func (s *Bignumeric_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBignumeric_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Bignumeric_literal() (localctx IBignumeric_literalContext) {
	localctx = NewBignumeric_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, GoogleSQLParserRULE_bignumeric_literal)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(866)
		p.Bignumeric_literal_prefix()
	}
	{
		p.SetState(867)
		p.string_literal(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBignumeric_literal_prefixContext is an interface to support dynamic dispatch.
type IBignumeric_literal_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BIGNUMERIC_SYMBOL() antlr.TerminalNode
	BIGDECIMAL_SYMBOL() antlr.TerminalNode

	// IsBignumeric_literal_prefixContext differentiates from other interfaces.
	IsBignumeric_literal_prefixContext()
}

type Bignumeric_literal_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBignumeric_literal_prefixContext() *Bignumeric_literal_prefixContext {
	var p = new(Bignumeric_literal_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_bignumeric_literal_prefix
	return p
}

func InitEmptyBignumeric_literal_prefixContext(p *Bignumeric_literal_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_bignumeric_literal_prefix
}

func (*Bignumeric_literal_prefixContext) IsBignumeric_literal_prefixContext() {}

func NewBignumeric_literal_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bignumeric_literal_prefixContext {
	var p = new(Bignumeric_literal_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_bignumeric_literal_prefix

	return p
}

func (s *Bignumeric_literal_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Bignumeric_literal_prefixContext) BIGNUMERIC_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBIGNUMERIC_SYMBOL, 0)
}

func (s *Bignumeric_literal_prefixContext) BIGDECIMAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBIGDECIMAL_SYMBOL, 0)
}

func (s *Bignumeric_literal_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bignumeric_literal_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bignumeric_literal_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBignumeric_literal_prefix(s)
	}
}

func (s *Bignumeric_literal_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBignumeric_literal_prefix(s)
	}
}

func (s *Bignumeric_literal_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBignumeric_literal_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Bignumeric_literal_prefix() (localctx IBignumeric_literal_prefixContext) {
	localctx = NewBignumeric_literal_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, GoogleSQLParserRULE_bignumeric_literal_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(869)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserBIGNUMERIC_SYMBOL || _la == GoogleSQLParserBIGDECIMAL_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INumeric_literalContext is an interface to support dynamic dispatch.
type INumeric_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Numeric_literal_prefix() INumeric_literal_prefixContext
	String_literal() IString_literalContext

	// IsNumeric_literalContext differentiates from other interfaces.
	IsNumeric_literalContext()
}

type Numeric_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumeric_literalContext() *Numeric_literalContext {
	var p = new(Numeric_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_numeric_literal
	return p
}

func InitEmptyNumeric_literalContext(p *Numeric_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_numeric_literal
}

func (*Numeric_literalContext) IsNumeric_literalContext() {}

func NewNumeric_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Numeric_literalContext {
	var p = new(Numeric_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_numeric_literal

	return p
}

func (s *Numeric_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Numeric_literalContext) Numeric_literal_prefix() INumeric_literal_prefixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumeric_literal_prefixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumeric_literal_prefixContext)
}

func (s *Numeric_literalContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Numeric_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Numeric_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Numeric_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterNumeric_literal(s)
	}
}

func (s *Numeric_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitNumeric_literal(s)
	}
}

func (s *Numeric_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitNumeric_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Numeric_literal() (localctx INumeric_literalContext) {
	localctx = NewNumeric_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, GoogleSQLParserRULE_numeric_literal)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(871)
		p.Numeric_literal_prefix()
	}
	{
		p.SetState(872)
		p.string_literal(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INumeric_literal_prefixContext is an interface to support dynamic dispatch.
type INumeric_literal_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NUMERIC_SYMBOL() antlr.TerminalNode
	DECIMAL_SYMBOL() antlr.TerminalNode

	// IsNumeric_literal_prefixContext differentiates from other interfaces.
	IsNumeric_literal_prefixContext()
}

type Numeric_literal_prefixContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumeric_literal_prefixContext() *Numeric_literal_prefixContext {
	var p = new(Numeric_literal_prefixContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_numeric_literal_prefix
	return p
}

func InitEmptyNumeric_literal_prefixContext(p *Numeric_literal_prefixContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_numeric_literal_prefix
}

func (*Numeric_literal_prefixContext) IsNumeric_literal_prefixContext() {}

func NewNumeric_literal_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Numeric_literal_prefixContext {
	var p = new(Numeric_literal_prefixContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_numeric_literal_prefix

	return p
}

func (s *Numeric_literal_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Numeric_literal_prefixContext) NUMERIC_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserNUMERIC_SYMBOL, 0)
}

func (s *Numeric_literal_prefixContext) DECIMAL_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserDECIMAL_SYMBOL, 0)
}

func (s *Numeric_literal_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Numeric_literal_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Numeric_literal_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterNumeric_literal_prefix(s)
	}
}

func (s *Numeric_literal_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitNumeric_literal_prefix(s)
	}
}

func (s *Numeric_literal_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitNumeric_literal_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Numeric_literal_prefix() (localctx INumeric_literal_prefixContext) {
	localctx = NewNumeric_literal_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, GoogleSQLParserRULE_numeric_literal_prefix)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(874)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserNUMERIC_SYMBOL || _la == GoogleSQLParserDECIMAL_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInteger_literalContext is an interface to support dynamic dispatch.
type IInteger_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	INTEGER_LITERAL() antlr.TerminalNode

	// IsInteger_literalContext differentiates from other interfaces.
	IsInteger_literalContext()
}

type Integer_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInteger_literalContext() *Integer_literalContext {
	var p = new(Integer_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_integer_literal
	return p
}

func InitEmptyInteger_literalContext(p *Integer_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_integer_literal
}

func (*Integer_literalContext) IsInteger_literalContext() {}

func NewInteger_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Integer_literalContext {
	var p = new(Integer_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_integer_literal

	return p
}

func (s *Integer_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Integer_literalContext) INTEGER_LITERAL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINTEGER_LITERAL, 0)
}

func (s *Integer_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Integer_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Integer_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterInteger_literal(s)
	}
}

func (s *Integer_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitInteger_literal(s)
	}
}

func (s *Integer_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitInteger_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Integer_literal() (localctx IInteger_literalContext) {
	localctx = NewInteger_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, GoogleSQLParserRULE_integer_literal)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(876)
		p.Match(GoogleSQLParserINTEGER_LITERAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBytes_literalContext is an interface to support dynamic dispatch.
type IBytes_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Bytes_literal_component() IBytes_literal_componentContext
	Bytes_literal() IBytes_literalContext
	String_literal_component() IString_literal_componentContext

	// IsBytes_literalContext differentiates from other interfaces.
	IsBytes_literalContext()
}

type Bytes_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBytes_literalContext() *Bytes_literalContext {
	var p = new(Bytes_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_bytes_literal
	return p
}

func InitEmptyBytes_literalContext(p *Bytes_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_bytes_literal
}

func (*Bytes_literalContext) IsBytes_literalContext() {}

func NewBytes_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bytes_literalContext {
	var p = new(Bytes_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_bytes_literal

	return p
}

func (s *Bytes_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Bytes_literalContext) Bytes_literal_component() IBytes_literal_componentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBytes_literal_componentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBytes_literal_componentContext)
}

func (s *Bytes_literalContext) Bytes_literal() IBytes_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBytes_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBytes_literalContext)
}

func (s *Bytes_literalContext) String_literal_component() IString_literal_componentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literal_componentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literal_componentContext)
}

func (s *Bytes_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bytes_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bytes_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBytes_literal(s)
	}
}

func (s *Bytes_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBytes_literal(s)
	}
}

func (s *Bytes_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBytes_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Bytes_literal() (localctx IBytes_literalContext) {
	return p.bytes_literal(0)
}

func (p *GoogleSQLParser) bytes_literal(_p int) (localctx IBytes_literalContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewBytes_literalContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBytes_literalContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 186
	p.EnterRecursionRule(localctx, 186, GoogleSQLParserRULE_bytes_literal, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(879)
		p.Bytes_literal_component()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(891)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 81, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(889)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 80, p.GetParserRuleContext()) {
			case 1:
				localctx = NewBytes_literalContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_bytes_literal)
				p.SetState(881)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
					goto errorExit
				}
				{
					p.SetState(882)
					p.Bytes_literal_component()
				}

				literalStopIndex, componentStartIndex := localctx.Bytes_literal().GetStop().GetStop(), localctx.Bytes_literal_component().GetStart().GetStart()
				if literalStopIndex+1 == componentStartIndex {
					p.NotifyErrorListeners("Syntax error: concatenated bytes literals must be separated by whitespace or comments.", nil, nil)
				}

			case 2:
				localctx = NewBytes_literalContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_bytes_literal)
				p.SetState(885)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
					goto errorExit
				}
				{
					p.SetState(886)
					p.String_literal_component()
				}
				p.NotifyErrorListeners("Syntax error: string and bytes literals cannot be concatenated.", nil, nil)

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(893)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 81, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBoolean_literalContext is an interface to support dynamic dispatch.
type IBoolean_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TRUE_SYMBOL() antlr.TerminalNode
	FALSE_SYMBOL() antlr.TerminalNode

	// IsBoolean_literalContext differentiates from other interfaces.
	IsBoolean_literalContext()
}

type Boolean_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBoolean_literalContext() *Boolean_literalContext {
	var p = new(Boolean_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_boolean_literal
	return p
}

func InitEmptyBoolean_literalContext(p *Boolean_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_boolean_literal
}

func (*Boolean_literalContext) IsBoolean_literalContext() {}

func NewBoolean_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Boolean_literalContext {
	var p = new(Boolean_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_boolean_literal

	return p
}

func (s *Boolean_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Boolean_literalContext) TRUE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserTRUE_SYMBOL, 0)
}

func (s *Boolean_literalContext) FALSE_SYMBOL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFALSE_SYMBOL, 0)
}

func (s *Boolean_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Boolean_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Boolean_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBoolean_literal(s)
	}
}

func (s *Boolean_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBoolean_literal(s)
	}
}

func (s *Boolean_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBoolean_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Boolean_literal() (localctx IBoolean_literalContext) {
	localctx = NewBoolean_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, GoogleSQLParserRULE_boolean_literal)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(894)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserTRUE_SYMBOL || _la == GoogleSQLParserFALSE_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IString_literalContext is an interface to support dynamic dispatch.
type IString_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	String_literal_component() IString_literal_componentContext
	String_literal() IString_literalContext
	Bytes_literal_component() IBytes_literal_componentContext

	// IsString_literalContext differentiates from other interfaces.
	IsString_literalContext()
}

type String_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyString_literalContext() *String_literalContext {
	var p = new(String_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_string_literal
	return p
}

func InitEmptyString_literalContext(p *String_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_string_literal
}

func (*String_literalContext) IsString_literalContext() {}

func NewString_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *String_literalContext {
	var p = new(String_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_string_literal

	return p
}

func (s *String_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *String_literalContext) String_literal_component() IString_literal_componentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literal_componentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literal_componentContext)
}

func (s *String_literalContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *String_literalContext) Bytes_literal_component() IBytes_literal_componentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBytes_literal_componentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBytes_literal_componentContext)
}

func (s *String_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *String_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *String_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterString_literal(s)
	}
}

func (s *String_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitString_literal(s)
	}
}

func (s *String_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitString_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) String_literal() (localctx IString_literalContext) {
	return p.string_literal(0)
}

func (p *GoogleSQLParser) string_literal(_p int) (localctx IString_literalContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewString_literalContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IString_literalContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 190
	p.EnterRecursionRule(localctx, 190, GoogleSQLParserRULE_string_literal, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(897)
		p.String_literal_component()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(909)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 83, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(907)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 82, p.GetParserRuleContext()) {
			case 1:
				localctx = NewString_literalContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_string_literal)
				p.SetState(899)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
					goto errorExit
				}
				{
					p.SetState(900)
					p.String_literal_component()
				}

				literalStopIndex, componentStartIndex := localctx.String_literal().GetStop().GetStop(), localctx.String_literal_component().GetStart().GetStart()
				if literalStopIndex+1 == componentStartIndex {
					p.NotifyErrorListeners("Syntax error: concatenated string literals must be separated by whitespace or comments.", nil, nil)
				}

			case 2:
				localctx = NewString_literalContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, GoogleSQLParserRULE_string_literal)
				p.SetState(903)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
					goto errorExit
				}
				{
					p.SetState(904)
					p.Bytes_literal_component()
				}
				p.NotifyErrorListeners("Syntax error: string and bytes literals cannot be concatenated.", nil, nil)

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(911)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 83, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IString_literal_componentContext is an interface to support dynamic dispatch.
type IString_literal_componentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	STRING_LITERAL() antlr.TerminalNode

	// IsString_literal_componentContext differentiates from other interfaces.
	IsString_literal_componentContext()
}

type String_literal_componentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyString_literal_componentContext() *String_literal_componentContext {
	var p = new(String_literal_componentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_string_literal_component
	return p
}

func InitEmptyString_literal_componentContext(p *String_literal_componentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_string_literal_component
}

func (*String_literal_componentContext) IsString_literal_componentContext() {}

func NewString_literal_componentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *String_literal_componentContext {
	var p = new(String_literal_componentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_string_literal_component

	return p
}

func (s *String_literal_componentContext) GetParser() antlr.Parser { return s.parser }

func (s *String_literal_componentContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserSTRING_LITERAL, 0)
}

func (s *String_literal_componentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *String_literal_componentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *String_literal_componentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterString_literal_component(s)
	}
}

func (s *String_literal_componentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitString_literal_component(s)
	}
}

func (s *String_literal_componentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitString_literal_component(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) String_literal_component() (localctx IString_literal_componentContext) {
	localctx = NewString_literal_componentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, GoogleSQLParserRULE_string_literal_component)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(912)
		p.Match(GoogleSQLParserSTRING_LITERAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBytes_literal_componentContext is an interface to support dynamic dispatch.
type IBytes_literal_componentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BYTES_LITERAL() antlr.TerminalNode

	// IsBytes_literal_componentContext differentiates from other interfaces.
	IsBytes_literal_componentContext()
}

type Bytes_literal_componentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBytes_literal_componentContext() *Bytes_literal_componentContext {
	var p = new(Bytes_literal_componentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_bytes_literal_component
	return p
}

func InitEmptyBytes_literal_componentContext(p *Bytes_literal_componentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_bytes_literal_component
}

func (*Bytes_literal_componentContext) IsBytes_literal_componentContext() {}

func NewBytes_literal_componentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bytes_literal_componentContext {
	var p = new(Bytes_literal_componentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_bytes_literal_component

	return p
}

func (s *Bytes_literal_componentContext) GetParser() antlr.Parser { return s.parser }

func (s *Bytes_literal_componentContext) BYTES_LITERAL() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserBYTES_LITERAL, 0)
}

func (s *Bytes_literal_componentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bytes_literal_componentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bytes_literal_componentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterBytes_literal_component(s)
	}
}

func (s *Bytes_literal_componentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitBytes_literal_component(s)
	}
}

func (s *Bytes_literal_componentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitBytes_literal_component(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Bytes_literal_component() (localctx IBytes_literal_componentContext) {
	localctx = NewBytes_literal_componentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, GoogleSQLParserRULE_bytes_literal_component)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(914)
		p.Match(GoogleSQLParserBYTES_LITERAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICountContext is an interface to support dynamic dispatch.
type ICountContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Number() INumberContext

	// IsCountContext differentiates from other interfaces.
	IsCountContext()
}

type CountContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCountContext() *CountContext {
	var p = new(CountContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_count
	return p
}

func InitEmptyCountContext(p *CountContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_count
}

func (*CountContext) IsCountContext() {}

func NewCountContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CountContext {
	var p = new(CountContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_count

	return p
}

func (s *CountContext) GetParser() antlr.Parser { return s.parser }

func (s *CountContext) Number() INumberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *CountContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CountContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CountContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCount(s)
	}
}

func (s *CountContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCount(s)
	}
}

func (s *CountContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCount(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Count() (localctx ICountContext) {
	localctx = NewCountContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, GoogleSQLParserRULE_count)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(916)
		p.Number()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISkip_rowsContext is an interface to support dynamic dispatch.
type ISkip_rowsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Number() INumberContext

	// IsSkip_rowsContext differentiates from other interfaces.
	IsSkip_rowsContext()
}

type Skip_rowsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySkip_rowsContext() *Skip_rowsContext {
	var p = new(Skip_rowsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_skip_rows
	return p
}

func InitEmptySkip_rowsContext(p *Skip_rowsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_skip_rows
}

func (*Skip_rowsContext) IsSkip_rowsContext() {}

func NewSkip_rowsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Skip_rowsContext {
	var p = new(Skip_rowsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_skip_rows

	return p
}

func (s *Skip_rowsContext) GetParser() antlr.Parser { return s.parser }

func (s *Skip_rowsContext) Number() INumberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *Skip_rowsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Skip_rowsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Skip_rowsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterSkip_rows(s)
	}
}

func (s *Skip_rowsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitSkip_rows(s)
	}
}

func (s *Skip_rowsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitSkip_rows(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Skip_rows() (localctx ISkip_rowsContext) {
	localctx = NewSkip_rowsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, GoogleSQLParserRULE_skip_rows)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(918)
		p.Number()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INameContext is an interface to support dynamic dispatch.
type INameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ID() antlr.TerminalNode
	QUOTED_ID() antlr.TerminalNode

	// IsNameContext differentiates from other interfaces.
	IsNameContext()
}

type NameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameContext() *NameContext {
	var p = new(NameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_name
	return p
}

func InitEmptyNameContext(p *NameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_name
}

func (*NameContext) IsNameContext() {}

func NewNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameContext {
	var p = new(NameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_name

	return p
}

func (s *NameContext) GetParser() antlr.Parser { return s.parser }

func (s *NameContext) ID() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserID, 0)
}

func (s *NameContext) QUOTED_ID() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserQUOTED_ID, 0)
}

func (s *NameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterName(s)
	}
}

func (s *NameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitName(s)
	}
}

func (s *NameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Name() (localctx INameContext) {
	localctx = NewNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, GoogleSQLParserRULE_name)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(920)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GoogleSQLParserQUOTED_ID || _la == GoogleSQLParserID) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICte_nameContext is an interface to support dynamic dispatch.
type ICte_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Name() INameContext

	// IsCte_nameContext differentiates from other interfaces.
	IsCte_nameContext()
}

type Cte_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCte_nameContext() *Cte_nameContext {
	var p = new(Cte_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_cte_name
	return p
}

func InitEmptyCte_nameContext(p *Cte_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_cte_name
}

func (*Cte_nameContext) IsCte_nameContext() {}

func NewCte_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cte_nameContext {
	var p = new(Cte_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_cte_name

	return p
}

func (s *Cte_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Cte_nameContext) Name() INameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Cte_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cte_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cte_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterCte_name(s)
	}
}

func (s *Cte_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitCte_name(s)
	}
}

func (s *Cte_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitCte_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Cte_name() (localctx ICte_nameContext) {
	localctx = NewCte_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, GoogleSQLParserRULE_cte_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(922)
		p.Name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumn_nameContext is an interface to support dynamic dispatch.
type IColumn_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Name() INameContext

	// IsColumn_nameContext differentiates from other interfaces.
	IsColumn_nameContext()
}

type Column_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_nameContext() *Column_nameContext {
	var p = new(Column_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_column_name
	return p
}

func InitEmptyColumn_nameContext(p *Column_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_column_name
}

func (*Column_nameContext) IsColumn_nameContext() {}

func NewColumn_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_nameContext {
	var p = new(Column_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_column_name

	return p
}

func (s *Column_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_nameContext) Name() INameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Column_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterColumn_name(s)
	}
}

func (s *Column_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitColumn_name(s)
	}
}

func (s *Column_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitColumn_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Column_name() (localctx IColumn_nameContext) {
	localctx = NewColumn_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, GoogleSQLParserRULE_column_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(924)
		p.Name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAlias_nameContext is an interface to support dynamic dispatch.
type IAlias_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Name() INameContext

	// IsAlias_nameContext differentiates from other interfaces.
	IsAlias_nameContext()
}

type Alias_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlias_nameContext() *Alias_nameContext {
	var p = new(Alias_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_alias_name
	return p
}

func InitEmptyAlias_nameContext(p *Alias_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_alias_name
}

func (*Alias_nameContext) IsAlias_nameContext() {}

func NewAlias_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alias_nameContext {
	var p = new(Alias_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_alias_name

	return p
}

func (s *Alias_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Alias_nameContext) Name() INameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Alias_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alias_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alias_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterAlias_name(s)
	}
}

func (s *Alias_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitAlias_name(s)
	}
}

func (s *Alias_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitAlias_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Alias_name() (localctx IAlias_nameContext) {
	localctx = NewAlias_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, GoogleSQLParserRULE_alias_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(926)
		p.Name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_nameContext is an interface to support dynamic dispatch.
type ITable_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Name() INameContext

	// IsTable_nameContext differentiates from other interfaces.
	IsTable_nameContext()
}

type Table_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_nameContext() *Table_nameContext {
	var p = new(Table_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_name
	return p
}

func InitEmptyTable_nameContext(p *Table_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_table_name
}

func (*Table_nameContext) IsTable_nameContext() {}

func NewTable_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_nameContext {
	var p = new(Table_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_table_name

	return p
}

func (s *Table_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_nameContext) Name() INameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Table_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterTable_name(s)
	}
}

func (s *Table_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitTable_name(s)
	}
}

func (s *Table_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitTable_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Table_name() (localctx ITable_nameContext) {
	localctx = NewTable_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, GoogleSQLParserRULE_table_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(928)
		p.Name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INumberContext is an interface to support dynamic dispatch.
type INumberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Integer_type() IInteger_typeContext
	Float_type() IFloat_typeContext

	// IsNumberContext differentiates from other interfaces.
	IsNumberContext()
}

type NumberContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumberContext() *NumberContext {
	var p = new(NumberContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_number
	return p
}

func InitEmptyNumberContext(p *NumberContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_number
}

func (*NumberContext) IsNumberContext() {}

func NewNumberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumberContext {
	var p = new(NumberContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_number

	return p
}

func (s *NumberContext) GetParser() antlr.Parser { return s.parser }

func (s *NumberContext) Integer_type() IInteger_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInteger_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInteger_typeContext)
}

func (s *NumberContext) Float_type() IFloat_typeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFloat_typeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFloat_typeContext)
}

func (s *NumberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NumberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterNumber(s)
	}
}

func (s *NumberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitNumber(s)
	}
}

func (s *NumberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitNumber(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Number() (localctx INumberContext) {
	localctx = NewNumberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, GoogleSQLParserRULE_number)
	p.SetState(932)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case GoogleSQLParserINT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(930)
			p.Integer_type()
		}

	case GoogleSQLParserFLOAT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(931)
			p.Float_type()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInteger_typeContext is an interface to support dynamic dispatch.
type IInteger_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	INT() antlr.TerminalNode

	// IsInteger_typeContext differentiates from other interfaces.
	IsInteger_typeContext()
}

type Integer_typeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInteger_typeContext() *Integer_typeContext {
	var p = new(Integer_typeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_integer_type
	return p
}

func InitEmptyInteger_typeContext(p *Integer_typeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_integer_type
}

func (*Integer_typeContext) IsInteger_typeContext() {}

func NewInteger_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Integer_typeContext {
	var p = new(Integer_typeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_integer_type

	return p
}

func (s *Integer_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Integer_typeContext) INT() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserINT, 0)
}

func (s *Integer_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Integer_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Integer_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterInteger_type(s)
	}
}

func (s *Integer_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitInteger_type(s)
	}
}

func (s *Integer_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitInteger_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Integer_type() (localctx IInteger_typeContext) {
	localctx = NewInteger_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, GoogleSQLParserRULE_integer_type)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(934)
		p.Match(GoogleSQLParserINT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFloat_typeContext is an interface to support dynamic dispatch.
type IFloat_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FLOAT() antlr.TerminalNode

	// IsFloat_typeContext differentiates from other interfaces.
	IsFloat_typeContext()
}

type Float_typeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFloat_typeContext() *Float_typeContext {
	var p = new(Float_typeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_float_type
	return p
}

func InitEmptyFloat_typeContext(p *Float_typeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = GoogleSQLParserRULE_float_type
}

func (*Float_typeContext) IsFloat_typeContext() {}

func NewFloat_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Float_typeContext {
	var p = new(Float_typeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = GoogleSQLParserRULE_float_type

	return p
}

func (s *Float_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Float_typeContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(GoogleSQLParserFLOAT, 0)
}

func (s *Float_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Float_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Float_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.EnterFloat_type(s)
	}
}

func (s *Float_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GoogleSQLParserListener); ok {
		listenerT.ExitFloat_type(s)
	}
}

func (s *Float_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GoogleSQLParserVisitor:
		return t.VisitFloat_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GoogleSQLParser) Float_type() (localctx IFloat_typeContext) {
	localctx = NewFloat_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, GoogleSQLParserRULE_float_type)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(936)
		p.Match(GoogleSQLParserFLOAT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

func (p *GoogleSQLParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 4:
		var t *Query_exprContext = nil
		if localctx != nil {
			t = localctx.(*Query_exprContext)
		}
		return p.Query_expr_Sempred(t, predIndex)

	case 26:
		var t *From_itemContext = nil
		if localctx != nil {
			t = localctx.(*From_itemContext)
		}
		return p.From_item_Sempred(t, predIndex)

	case 57:
		var t *Array_constructor_prefixContext = nil
		if localctx != nil {
			t = localctx.(*Array_constructor_prefixContext)
		}
		return p.Array_constructor_prefix_Sempred(t, predIndex)

	case 68:
		var t *Type_parameters_prefixContext = nil
		if localctx != nil {
			t = localctx.(*Type_parameters_prefixContext)
		}
		return p.Type_parameters_prefix_Sempred(t, predIndex)

	case 73:
		var t *Function_type_prefixContext = nil
		if localctx != nil {
			t = localctx.(*Function_type_prefixContext)
		}
		return p.Function_type_prefix_Sempred(t, predIndex)

	case 75:
		var t *Path_expressionContext = nil
		if localctx != nil {
			t = localctx.(*Path_expressionContext)
		}
		return p.Path_expression_Sempred(t, predIndex)

	case 93:
		var t *Bytes_literalContext = nil
		if localctx != nil {
			t = localctx.(*Bytes_literalContext)
		}
		return p.Bytes_literal_Sempred(t, predIndex)

	case 95:
		var t *String_literalContext = nil
		if localctx != nil {
			t = localctx.(*String_literalContext)
		}
		return p.String_literal_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *GoogleSQLParser) Query_expr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) From_item_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 5)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) Array_constructor_prefix_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 3:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) Type_parameters_prefix_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 4:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) Function_type_prefix_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 5:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) Path_expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 6:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) Bytes_literal_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 7:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GoogleSQLParser) String_literal_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 9:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
